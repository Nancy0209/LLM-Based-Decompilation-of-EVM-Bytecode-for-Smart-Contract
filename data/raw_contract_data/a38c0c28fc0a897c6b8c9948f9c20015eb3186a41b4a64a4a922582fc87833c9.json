{
    "address": "0x3e628c6678825195453B33f713147B8fb641248b",
    "tx_hash": "a38c0c28fc0a897c6b8c9948f9c20015eb3186a41b4a64a4a922582fc87833c9",
    "block_number": 18007134,
    "timestamp": 1693153031,
    "gas_used_in_creation": 6659059,
    "creation_bytecode": "60806040526000600e556012805462ffffff191660019081179091556014805460ff191690911790553480156200003557600080fd5b5060408051808201825260068082526542415441544160d01b602080840182905284518086019095529184529083015290600362000074838262000843565b50600462000083828262000843565b5050506000620000986200043b60201b60201c565b600580546001600160a01b0319166001600160a01b0383169081179091556040519192509060009060008051602062004813833981519152908290a350600980546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556040805163c45a015560e01b81529051339291829163c45a0155916004808201926020929091908290030181865afa1580156200013f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016591906200090f565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d991906200090f565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801562000227573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200024d91906200090f565b600a80546001600160a01b0319166001600160a01b03929092169182179055620002799060016200043f565b600a5462000292906001600160a01b03166001620004a2565b6b02a3f2b0acb3158a85e000006064620002ae82600162000957565b620002ba919062000977565b6006556064620002cc82600162000957565b620002d8919062000977565b6007556064620002ea82600162000957565b620002f6919062000977565b6008556127106200030982600562000957565b62000315919062000977565b600b55601460168190556000601781905560188190556019819055908190620003409082906200099a565b6200034c91906200099a565b6200035891906200099a565b6015556028601b8190556000601c819055601d819055601e819055908190620003839082906200099a565b6200038f91906200099a565b6200039b91906200099a565b601a55620003ab8360016200043f565b620003b83060016200043f565b620003c761dead60016200043f565b620003d48360016200050e565b620003e13060016200050e565b620003f061dead60016200050e565b600c80546001600160a01b0385166001600160a01b03199182168117909255600d80549091169091179055620004278382620005bc565b6200043283620006a1565b505050620009b0565b3390565b6001600160a01b038216600081815260246020908152604091829020805460ff19168515159081179091558251938452908301527f6b4f1be9103e6cbcd38ca4a922334f2c3109b260130a6676a987f94088fd6746910160405180910390a15050565b6001600160a01b0382166000908152602560205260409020805460ff1916821515179055620004d282826200043f565b604051811515906001600160a01b038416907fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab90600090a35050565b6005546001600160a01b031633146200055d5760405162461bcd60e51b81526020600482018190526024820152600080516020620047f383398151915260448201526064015b60405180910390fd5b6001600160a01b038216600081815260236020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6001600160a01b038216620006145760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640162000554565b80600260008282546200062891906200099a565b90915550506001600160a01b03821660009081526020819052604081208054839290620006579084906200099a565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6005546001600160a01b03163314620006ec5760405162461bcd60e51b81526020600482018190526024820152600080516020620047f3833981519152604482015260640162000554565b6001600160a01b038116620007535760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000554565b6005546040516001600160a01b038084169216906000805160206200481383398151915290600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620007c957607f821691505b602082108103620007ea57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200083e57600081815260208120601f850160051c81016020861015620008195750805b601f850160051c820191505b818110156200083a5782815560010162000825565b5050505b505050565b81516001600160401b038111156200085f576200085f6200079e565b6200087781620008708454620007b4565b84620007f0565b602080601f831160018114620008af5760008415620008965750858301515b600019600386901b1c1916600185901b1785556200083a565b600085815260208120601f198616915b82811015620008e057888601518255948401946001909101908401620008bf565b5085821015620008ff5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200092257600080fd5b81516001600160a01b03811681146200093a57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141762000971576200097162000941565b92915050565b6000826200099557634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111562000971576200097162000941565b613e3380620009c06000396000f3fe6080604052600436106103e85760003560e01c806388e765ff11610208578063d257b34f11610118578063e800dff7116100ab578063f11a24d31161007a578063f11a24d314610b22578063f2fde38b14610b38578063f5648a4f14610b58578063f637434214610b6d578063fc155d1d14610b8357600080fd5b8063e800dff714610ac1578063e884f26014610ae1578063e96d053a14610af6578063ee40166e14610b0c57600080fd5b8063e2cd5fcd116100e7578063e2cd5fcd14610a60578063e2f4560514610a75578063e71dc3f514610a8b578063e7ad9fcd14610aa157600080fd5b8063d257b34f146109c4578063d85ba063146109e4578063dc3f0d0f146109fa578063dd62ed3e14610a1a57600080fd5b8063a9059cbb1161019b578063b62496f51161016a578063b62496f51461091b578063bbc0c7421461094b578063c02466681461096a578063c18bc1951461098a578063c876d0b9146109aa57600080fd5b8063a9059cbb146108b9578063a94a335e146108d9578063aa4bde28146108ef578063adb873bd1461090557600080fd5b806395d89b41116101d757806395d89b411461084e5780639a7a23d614610863578063a457c2d714610883578063a62068ce146108a357600080fd5b806388e765ff146107e45780638da5cb5b146107fa578063906e9dd014610818578063921369131461083857600080fd5b80634a62bb6511610303578063715018a6116102965780637bce5a04116102655780637bce5a041461073e57806381ece7c21461075457806382aa7c68146107745780638366e79a1461079457806385ecfd28146107b457600080fd5b8063715018a6146106de578063751039fc146106f35780637571336a146107085780637ad80c9d1461072857600080fd5b80636a486a8e116102d25780636a486a8e146106725780636b0a894c146106885780636ddd17131461069e57806370a08231146106be57600080fd5b80634a62bb651461061657806351f205e41461063057806358a6d5311461064557806366d602ae1461065c57600080fd5b80631f3fed8f1161037b5780632e6ed7ef1161034a5780632e6ed7ef1461059a578063313ce567146105ba57806339509351146105d6578063452ed4f1146105f657600080fd5b80631f3fed8f146105245780632307b4411461053a57806323b872dd1461055a5780632be32b611461057a57600080fd5b8063130a2c3c116103b7578063130a2c3c146104b757806318160ddd146104d95780631a8145bb146104f85780631d7778561461050e57600080fd5b806306fdde03146103f45780630758d9241461041f578063095ea7b31461045757806310d5de531461048757600080fd5b366103ef57005b600080fd5b34801561040057600080fd5b50610409610ba3565b6040516104169190613757565b60405180910390f35b34801561042b57600080fd5b5060095461043f906001600160a01b031681565b6040516001600160a01b039091168152602001610416565b34801561046357600080fd5b506104776104723660046137bd565b610c35565b6040519015158152602001610416565b34801561049357600080fd5b506104776104a23660046137e9565b60246020526000908152604090205460ff1681565b3480156104c357600080fd5b506104d76104d236600461381b565b610c4c565b005b3480156104e557600080fd5b506002545b604051908152602001610416565b34801561050457600080fd5b506104ea60205481565b34801561051a57600080fd5b506104ea60225481565b34801561053057600080fd5b506104ea601f5481565b34801561054657600080fd5b506104d7610555366004613977565b610cf6565b34801561056657600080fd5b50610477610575366004613a39565b610e4f565b34801561058657600080fd5b506104d7610595366004613a7a565b610ef9565b3480156105a657600080fd5b506104d76105b5366004613a93565b611006565b3480156105c657600080fd5b5060405160128152602001610416565b3480156105e257600080fd5b506104776105f13660046137bd565b6110b9565b34801561060257600080fd5b50600a5461043f906001600160a01b031681565b34801561062257600080fd5b506012546104779060ff1681565b34801561063c57600080fd5b506104d76110f5565b34801561065157600080fd5b50600f544310610477565b34801561066857600080fd5b506104ea60075481565b34801561067e57600080fd5b506104ea601a5481565b34801561069457600080fd5b506104ea60115481565b3480156106aa57600080fd5b506012546104779062010000900460ff1681565b3480156106ca57600080fd5b506104ea6106d93660046137e9565b6111fe565b3480156106ea57600080fd5b506104d7611219565b3480156106ff57600080fd5b506104d761128d565b34801561071457600080fd5b506104d7610723366004613ac5565b6112f8565b34801561073457600080fd5b506104ea601d5481565b34801561074a57600080fd5b506104ea60165481565b34801561076057600080fd5b506104d761076f3660046137e9565b6113c0565b34801561078057600080fd5b506104d761078f366004613a7a565b611475565b3480156107a057600080fd5b506104776107af366004613afe565b611548565b3480156107c057600080fd5b506104776107cf3660046137e9565b60106020526000908152604090205460ff1681565b3480156107f057600080fd5b506104ea60065481565b34801561080657600080fd5b506005546001600160a01b031661043f565b34801561082457600080fd5b506104d76108333660046137e9565b611751565b34801561084457600080fd5b506104ea601b5481565b34801561085a57600080fd5b50610409611801565b34801561086f57600080fd5b506104d761087e366004613ac5565b611810565b34801561088f57600080fd5b5061047761089e3660046137bd565b611904565b3480156108af57600080fd5b506104ea600f5481565b3480156108c557600080fd5b506104776108d43660046137bd565b61199d565b3480156108e557600080fd5b506104ea60185481565b3480156108fb57600080fd5b506104ea60085481565b34801561091157600080fd5b506104ea601e5481565b34801561092757600080fd5b506104776109363660046137e9565b60256020526000908152604090205460ff1681565b34801561095757600080fd5b5060125461047790610100900460ff1681565b34801561097657600080fd5b506104d7610985366004613ac5565b6119aa565b34801561099657600080fd5b506104d76109a5366004613a7a565b611a33565b3480156109b657600080fd5b506014546104779060ff1681565b3480156109d057600080fd5b506104d76109df366004613a7a565b611b3c565b3480156109f057600080fd5b506104ea60155481565b348015610a0657600080fd5b506104d7610a15366004613a7a565b611c87565b348015610a2657600080fd5b506104ea610a35366004613afe565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a6c57600080fd5b506104d7611d8e565b348015610a8157600080fd5b506104ea600b5481565b348015610a9757600080fd5b506104ea60195481565b348015610aad57600080fd5b506104d7610abc366004613a93565b611ed3565b348015610acd57600080fd5b506104d7610adc366004613ac5565b611f81565b348015610aed57600080fd5b506104d7611fd6565b348015610b0257600080fd5b506104ea60215481565b348015610b1857600080fd5b506104ea600e5481565b348015610b2e57600080fd5b506104ea60175481565b348015610b4457600080fd5b506104d7610b533660046137e9565b61200c565b348015610b6457600080fd5b506104d76120f7565b348015610b7957600080fd5b506104ea601c5481565b348015610b8f57600080fd5b506104d7610b9e366004613a7a565b612163565b606060038054610bb290613b2c565b80601f0160208091040260200160405190810160405280929190818152602001828054610bde90613b2c565b8015610c2b5780601f10610c0057610100808354040283529160200191610c2b565b820191906000526020600020905b815481529060010190602001808311610c0e57829003601f168201915b5050505050905090565b6000610c423384846123a7565b5060015b92915050565b6005546001600160a01b03163314610c7f5760405162461bcd60e51b8152600401610c7690613b66565b60405180910390fd5b60005b82811015610cf0578160106000868685818110610ca157610ca1613b9b565b9050602002016020810190610cb691906137e9565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610ce881613bc7565b915050610c82565b50505050565b6005546001600160a01b03163314610d205760405162461bcd60e51b8152600401610c7690613b66565b8051825114610d715760405162461bcd60e51b815260206004820152601e60248201527f617272617973206d757374206265207468652073616d65206c656e67746800006044820152606401610c76565b610258825110610de25760405162461bcd60e51b815260206004820152603660248201527f43616e206f6e6c792061697264726f70203630302077616c6c657473207065726044820152752074786e2064756520746f20676173206c696d69747360501b6064820152608401610c76565b60005b8251811015610e4a576000838281518110610e0257610e02613b9b565b602002602001015190506000838381518110610e2057610e20613b9b565b60200260200101519050610e353383836124cc565b50508080610e4290613bc7565b915050610de5565b505050565b6000610e5c848484612621565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610ee15760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610c76565b610eee85338584036123a7565b506001949350505050565b6005546001600160a01b03163314610f235760405162461bcd60e51b8152600401610c7690613b66565b670de0b6b3a76400006103e8610f3860025490565b610f43906002613be0565b610f4d9190613bf7565b610f579190613bf7565b811015610fb85760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f7420736574206d61782062757920616d6f756e74206c6f776572206044820152687468616e20302e322560b81b6064820152608401610c76565b610fca81670de0b6b3a7640000613be0565b60068190556040519081527ffcc0366804aaa8dbf88a2924100c733b70dec8445957a5d5f8ff92898de41009906020015b60405180910390a150565b6005546001600160a01b031633146110305760405162461bcd60e51b8152600401610c7690613b66565b601684905560178390556018829055601981905580826110508587613c19565b61105a9190613c19565b6110649190613c19565b6015819055600f1015610cf05760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420313525206f72206c6573730000006044820152606401610c76565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610c429185906110f0908690613c19565b6123a7565b6005546001600160a01b0316331461111f5760405162461bcd60e51b8152600401610c7690613b66565b600b5461112b306111fe565b10156111a1576040805162461bcd60e51b81526020600482015260248101919091527f43616e206f6e6c792073776170207768656e20746f6b656e20616d6f756e742060448201527f6973206174206f7220686967686572207468616e207265737472696374696f6e6064820152608401610c76565b600a805460ff60a01b1916600160a01b1790556111bc613156565b600a805460ff60a01b191690556040514281527f1b56c383f4f48fc992e45667ea4eabae777b9cca68b516a9562d8cda78f1bb329060200160405180910390a1565b6001600160a01b031660009081526020819052604090205490565b6005546001600160a01b031633146112435760405162461bcd60e51b8152600401610c7690613b66565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b031633146112b75760405162461bcd60e51b8152600401610c7690613b66565b6012805460ff199081169091556014805490911690556040517fa4ffae85e880608d5d4365c2b682786545d136145537788e7e0940dff9f0b98c90600090a1565b6005546001600160a01b031633146113225760405162461bcd60e51b8152600401610c7690613b66565b8061139557600a546001600160a01b03908116908316036113955760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f742072656d6f766520756e697377617020706169722066726f6d2060448201526636b0bc103a3c3760c91b6064820152608401610c76565b6001600160a01b03919091166000908152602460205260409020805460ff1916911515919091179055565b6005546001600160a01b031633146113ea5760405162461bcd60e51b8152600401610c7690613b66565b6001600160a01b0381166114535760405162461bcd60e51b815260206004820152602a60248201527f5f5265646973747269627574696f6e41646472657373206164647265737320636044820152690616e6e6f7420626520360b41b6064820152608401610c76565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b0316331461149f5760405162461bcd60e51b8152600401610c7690613b66565b601254610100900460ff16156114f75760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207265656e61626c652074726164696e670000000000000000006044820152606401610c76565b6012805462ffff0019166201010017905543600e819055611519908290613c19565b600f556040517fa56feb2d31b9a7424db0be063fd450863979c9e2382cf5110f869bd1ad361bb790600090a150565b6005546000906001600160a01b031633146115755760405162461bcd60e51b8152600401610c7690613b66565b6001600160a01b0383166115cb5760405162461bcd60e51b815260206004820152601a60248201527f5f746f6b656e20616464726573732063616e6e6f7420626520300000000000006044820152606401610c76565b306001600160a01b038416036116235760405162461bcd60e51b815260206004820152601c60248201527f43616e2774207769746864726177206e617469766520746f6b656e73000000006044820152606401610c76565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561166a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168e9190613c2c565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390529192509085169063a9059cbb906044016020604051808303816000875af11580156116e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117059190613c45565b604080516001600160a01b0387168152602081018490529193507fdeda980967fcead7b61e78ac46a4da14274af29e894d4d61e8b81ec38ab3e438910160405180910390a15092915050565b6005546001600160a01b0316331461177b5760405162461bcd60e51b8152600401610c7690613b66565b6001600160a01b0381166117df5760405162461bcd60e51b815260206004820152602560248201527f5f4d61726b6574696e674164647265737320616464726573732063616e6e6f74604482015264020626520360dc1b6064820152608401610c76565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b606060048054610bb290613b2c565b6005546001600160a01b0316331461183a5760405162461bcd60e51b8152600401610c7690613b66565b600a546001600160a01b03908116908316036118be5760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610c76565b6118c88282613395565b604051811515906001600160a01b038416907fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab90600090a35050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156119865760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c76565b61199333858584036123a7565b5060019392505050565b6000610c42338484612621565b6005546001600160a01b031633146119d45760405162461bcd60e51b8152600401610c7690613b66565b6001600160a01b038216600081815260236020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b03163314611a5d5760405162461bcd60e51b8152600401610c7690613b66565b670de0b6b3a76400006103e8611a7260025490565b611a7d906003613be0565b611a879190613bf7565b611a919190613bf7565b811015611af55760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f7420736574206d61782077616c6c657420616d6f756e74206c6f7760448201526b6572207468616e20302e332560a01b6064820152608401610c76565b611b0781670de0b6b3a7640000613be0565b60088190556040519081527fefc9add9a9b7382de284ef5ad69d8ea863e2680492b21a81948c2d5f04a442bc90602001610ffb565b6005546001600160a01b03163314611b665760405162461bcd60e51b8152600401610c7690613b66565b620186a0611b7360025490565b611b7e906001613be0565b611b889190613bf7565b811015611bf55760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610c76565b6103e8611c0160025490565b611c0c906001613be0565b611c169190613bf7565b811115611c825760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171892903a37ba30b61039bab838363c9760611b6064820152608401610c76565b600b55565b6005546001600160a01b03163314611cb15760405162461bcd60e51b8152600401610c7690613b66565b670de0b6b3a76400006103e8611cc660025490565b611cd1906002613be0565b611cdb9190613bf7565b611ce59190613bf7565b811015611d475760405162461bcd60e51b815260206004820152602a60248201527f43616e6e6f7420736574206d61782073656c6c20616d6f756e74206c6f776572604482015269207468616e20302e322560b01b6064820152608401610c76565b611d5981670de0b6b3a7640000613be0565b60078190556040519081527f53c4eb831d8cfeb750f1c62590d8cd30f4c6f0380d29a05caa09f0d92588560e90602001610ffb565b6005546001600160a01b03163314611db85760405162461bcd60e51b8152600401610c7690613b66565b6001601b8190556000601c819055601d819055601e819055908190611dde908290613c19565b611de89190613c19565b611df29190613c19565b601a819055601e1015611e425760405162461bcd60e51b81526020600482015260186024820152774b656570206665657320617420333025206f72206c65737360401b6044820152606401610c76565b600160168190556000601781905560188190556019819055908190611e68908290613c19565b611e729190613c19565b611e7c9190613c19565b6015819055600f1015611ed15760405162461bcd60e51b815260206004820152601860248201527f4b656570206665657320617420313525206f72206c65737300000000000000006044820152606401610c76565b565b6005546001600160a01b03163314611efd5760405162461bcd60e51b8152600401610c7690613b66565b601b849055601c839055601d829055601e8190558082611f1d8587613c19565b611f279190613c19565b611f319190613c19565b601a819055601e1015610cf05760405162461bcd60e51b81526020600482015260186024820152774b656570206665657320617420333025206f72206c65737360401b6044820152606401610c76565b6005546001600160a01b03163314611fab5760405162461bcd60e51b8152600401610c7690613b66565b6001600160a01b03919091166000908152601060205260409020805460ff1916911515919091179055565b6005546001600160a01b031633146120005760405162461bcd60e51b8152600401610c7690613b66565b6014805460ff19169055565b6005546001600160a01b031633146120365760405162461bcd60e51b8152600401610c7690613b66565b6001600160a01b03811661209b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c76565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146121215760405162461bcd60e51b8152600401610c7690613b66565b604051600090339047908381818185875af1925050503d8060008114610cf0576040519150601f19603f3d011682016040523d82523d6000602084013e610cf0565b6005546001600160a01b0316331461218d5760405162461bcd60e51b8152600401610c7690613b66565b678ac7230489e8000081111561221b5760405162461bcd60e51b815260206004820152604760248201527f4d6179206e6f7420627579206d6f7265207468616e2031302045544820696e2060448201527f612073696e676c652062757920746f207265647563652073616e64776963682060648201526661747461636b7360c81b608482015260a401610c76565b6040805160028082526060820183526000926020830190803683375050600954604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015612285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a99190613c62565b816000815181106122bc576122bc613b9b565b60200260200101906001600160a01b031690816001600160a01b03168152505030816001815181106122f0576122f0613b9b565b6001600160a01b03928316602091820292909201015260095460405163b6f9de9560e01b815291169063b6f9de9590849061233890600090869061dead904290600401613cc3565b6000604051808303818588803b15801561235157600080fd5b505af1158015612365573d6000803e3d6000fd5b50505050507fa017c1567cfcdd2d750a8c01e39fe2a846bcebc293c7d078477014d6848205688260405161239b91815260200190565b60405180910390a15050565b6001600160a01b0383166124095760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c76565b6001600160a01b03821661246a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c76565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166124f25760405162461bcd60e51b8152600401610c7690613cf8565b6001600160a01b0382166125185760405162461bcd60e51b8152600401610c7690613d3d565b6001600160a01b038316600090815260208190526040902054818110156125905760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c76565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906125c7908490613c19565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161261391815260200190565b60405180910390a350505050565b6001600160a01b0383166126475760405162461bcd60e51b8152600401610c7690613cf8565b6001600160a01b03821661266d5760405162461bcd60e51b8152600401610c7690613d3d565b600081116126bd5760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610c76565b601254610100900460ff16612750576001600160a01b03831660009081526023602052604090205460ff168061270b57506001600160a01b03821660009081526023602052604090205460ff165b6127505760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610c76565b600f5415612823576001600160a01b03831660009081526010602052604090205460ff16158061278d57506005546001600160a01b038381169116145b806127a257506001600160a01b03821661dead145b6128235760405162461bcd60e51b815260206004820152604660248201527f426f74732063616e6e6f74207472616e7366657220746f6b656e7320696e206f60448201527f72206f75742065786365707420746f206f776e6572206f722064656164206164606482015265323932b9b99760d11b608482015260a401610c76565b60125460ff1615612c1f576005546001600160a01b0384811691161480159061285a57506005546001600160a01b03838116911614155b801561286e57506001600160a01b03821615155b801561288557506001600160a01b03821661dead14155b80156128aa57506001600160a01b03831660009081526023602052604090205460ff16155b80156128cf57506001600160a01b03821660009081526023602052604090205460ff16155b15612c1f5760145460ff16156129e8576009546001600160a01b0383811691161480159061290b5750600a546001600160a01b03838116911614155b156129e85761291b600243613d80565b32600090815260136020526040902054108015612959575061293e600243613d80565b6001600160a01b038316600090815260136020526040902054105b6129c35760405162461bcd60e51b815260206004820152603560248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527432b21710102a393c9030b3b0b4b7103630ba32b91760591b6064820152608401610c76565b3260009081526013602052604080822043908190556001600160a01b03851683529120555b6001600160a01b03831660009081526025602052604090205460ff168015612a2957506001600160a01b03821660009081526024602052604090205460ff16155b15612af557600654811115612a915760405162461bcd60e51b815260206004820152602860248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201526736b0bc10313abc9760c11b6064820152608401610c76565b600854612a9d836111fe565b612aa79083613c19565b1115612af05760405162461bcd60e51b815260206004820152601860248201527710d85b9b9bdd08115e18d95959081b585e081dd85b1b195d60421b6044820152606401610c76565b612c1f565b6001600160a01b03821660009081526025602052604090205460ff168015612b3657506001600160a01b03831660009081526024602052604090205460ff16155b15612ba057600754811115612af05760405162461bcd60e51b815260206004820152602a60248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152691036b0bc1039b2b6361760b11b6064820152608401610c76565b6001600160a01b03821660009081526024602052604090205460ff16612c1f57600854612bcc836111fe565b612bd69083613c19565b1115612c1f5760405162461bcd60e51b815260206004820152601860248201527710d85b9b9bdd08115e18d95959081b585e081dd85b1b195d60421b6044820152606401610c76565b6000612c2a306111fe565b600b5490915081108015908190612c49575060125462010000900460ff165b8015612c5f5750600a54600160a01b900460ff16155b8015612c8457506001600160a01b03851660009081526025602052604090205460ff16155b8015612ca957506001600160a01b03851660009081526023602052604090205460ff16155b8015612cce57506001600160a01b03841660009081526023602052604090205460ff16155b15612cfc57600a805460ff60a01b1916600160a01b179055612cee613156565b600a805460ff60a01b191690555b6001600160a01b03851660009081526023602052604090205460019060ff1680612d3e57506001600160a01b03851660009081526023602052604090205460ff165b15612d47575060005b6000811561314257600f5443108015612d7857506001600160a01b03871660009081526025602052604090205460ff165b8015612d9d57506001600160a01b03861660009081526025602052604090205460ff16155b8015612dab57506000601554115b15612f2b576001600160a01b03861660009081526010602052604090205460ff16612e4b576001600160a01b0386166000908152601060205260408120805460ff191660019081179091556011805491929091612e09908490613c19565b90915550506040516001600160a01b03871681527f55678e47d0a699d3ab99b0184c4ff14f2246ba80522deb921aa0c8823578c44a9060200160405180910390a15b6064612e58866063613be0565b612e629190613bf7565b905060155460175482612e759190613be0565b612e7f9190613bf7565b60206000828254612e909190613c19565b9091555050601554601654612ea59083613be0565b612eaf9190613bf7565b601f6000828254612ec09190613c19565b9091555050601554601854612ed59083613be0565b612edf9190613bf7565b60216000828254612ef09190613c19565b9091555050601554601954612f059083613be0565b612f0f9190613bf7565b60226000828254612f209190613c19565b909155506131249050565b6001600160a01b03861660009081526025602052604090205460ff168015612f5557506000601a54115b15613017576064601a5486612f6a9190613be0565b612f749190613bf7565b9050601a54601c5482612f879190613be0565b612f919190613bf7565b60206000828254612fa29190613c19565b9091555050601a54601b54612fb79083613be0565b612fc19190613bf7565b601f6000828254612fd29190613c19565b9091555050601a54601d54612fe79083613be0565b612ff19190613bf7565b602160008282546130029190613c19565b9091555050601a54601e54612f059083613be0565b6001600160a01b03871660009081526025602052604090205460ff16801561304157506000601554115b15613124576064601554866130569190613be0565b6130609190613bf7565b9050601554601754826130739190613be0565b61307d9190613bf7565b6020600082825461308e9190613c19565b90915550506015546016546130a39083613be0565b6130ad9190613bf7565b601f60008282546130be9190613c19565b90915550506015546018546130d39083613be0565b6130dd9190613bf7565b602160008282546130ee9190613c19565b90915550506015546019546131039083613be0565b61310d9190613bf7565b6022600082825461311e9190613c19565b90915550505b8015613135576131358730836124cc565b61313f8186613d80565b94505b61314d8787876124cc565b50505050505050565b6000602254118015613172575060225461316f306111fe565b10155b1561318357613183306022546133c3565b60006022819055613193306111fe565b90506000602154601f546020546131aa9190613c19565b6131b49190613c19565b90508115806131c1575080155b156131ca575050565b600b546131d8906014613be0565b8211156131f057600b546131ed906014613be0565b91505b600080600283602054866132049190613be0565b61320e9190613bf7565b6132189190613bf7565b905061322c6132278286613d80565b6134ed565b6020544790819060009061324290600290613bf7565b61324c9087613d80565b601f546132599085613be0565b6132639190613bf7565b9050600060026020546132769190613bf7565b6132809088613d80565b60215461328d9086613be0565b6132979190613bf7565b90506132a38183613c19565b6132ad9084613d80565b60006020819055601f8190556021819055602255925084158015906132d25750600083115b156132e1576132e18584613647565b600d546040516001600160a01b03909116908290600081818185875af1925050503d806000811461332e576040519150601f19603f3d011682016040523d82523d6000602084013e613333565b606091505b5050600c546040519197506001600160a01b0316904790600081818185875af1925050503d8060008114613383576040519150601f19603f3d011682016040523d82523d6000602084013e613388565b606091505b5050505050505050505050565b6001600160a01b0382166000908152602560205260409020805460ff19168215151790556118c882826136fb565b6001600160a01b0382166134235760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c76565b6001600160a01b038216600090815260208190526040902054818110156134975760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c76565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016124bf565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061352257613522613b9b565b6001600160a01b03928316602091820292909201810191909152600954604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561357b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359f9190613c62565b816001815181106135b2576135b2613b9b565b6001600160a01b0392831660209182029290920101526009546135d891309116846123a7565b60095460405163791ac94760e01b81526001600160a01b039091169063791ac94790613611908590600090869030904290600401613d93565b600060405180830381600087803b15801561362b57600080fd5b505af115801561363f573d6000803e3d6000fd5b505050505050565b60095461365f9030906001600160a01b0316846123a7565b600954600c5460405163f305d71960e01b81523060048201526024810185905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af11580156136cf573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906136f49190613dcf565b5050505050565b6001600160a01b038216600081815260246020908152604091829020805460ff19168515159081179091558251938452908301527f6b4f1be9103e6cbcd38ca4a922334f2c3109b260130a6676a987f94088fd6746910161239b565b600060208083528351808285015260005b8181101561378457858101830151858201604001528201613768565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146137ba57600080fd5b50565b600080604083850312156137d057600080fd5b82356137db816137a5565b946020939093013593505050565b6000602082840312156137fb57600080fd5b8135613806816137a5565b9392505050565b80151581146137ba57600080fd5b60008060006040848603121561383057600080fd5b833567ffffffffffffffff8082111561384857600080fd5b818601915086601f83011261385c57600080fd5b81358181111561386b57600080fd5b8760208260051b850101111561388057600080fd5b602092830195509350508401356138968161380d565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156138e0576138e06138a1565b604052919050565b600067ffffffffffffffff821115613902576139026138a1565b5060051b60200190565b600082601f83011261391d57600080fd5b8135602061393261392d836138e8565b6138b7565b82815260059290921b8401810191818101908684111561395157600080fd5b8286015b8481101561396c5780358352918301918301613955565b509695505050505050565b6000806040838503121561398a57600080fd5b823567ffffffffffffffff808211156139a257600080fd5b818501915085601f8301126139b657600080fd5b813560206139c661392d836138e8565b82815260059290921b840181019181810190898411156139e557600080fd5b948201945b83861015613a0c5785356139fd816137a5565b825294820194908201906139ea565b96505086013592505080821115613a2257600080fd5b50613a2f8582860161390c565b9150509250929050565b600080600060608486031215613a4e57600080fd5b8335613a59816137a5565b92506020840135613a69816137a5565b929592945050506040919091013590565b600060208284031215613a8c57600080fd5b5035919050565b60008060008060808587031215613aa957600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215613ad857600080fd5b8235613ae3816137a5565b91506020830135613af38161380d565b809150509250929050565b60008060408385031215613b1157600080fd5b8235613b1c816137a5565b91506020830135613af3816137a5565b600181811c90821680613b4057607f821691505b602082108103613b6057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613bd957613bd9613bb1565b5060010190565b8082028115828204841417610c4657610c46613bb1565b600082613c1457634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610c4657610c46613bb1565b600060208284031215613c3e57600080fd5b5051919050565b600060208284031215613c5757600080fd5b81516138068161380d565b600060208284031215613c7457600080fd5b8151613806816137a5565b600081518084526020808501945080840160005b83811015613cb85781516001600160a01b031687529582019590820190600101613c93565b509495945050505050565b848152608060208201526000613cdc6080830186613c7f565b6001600160a01b03949094166040830152506060015292915050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b81810381811115610c4657610c46613bb1565b85815284602082015260a060408201526000613db260a0830186613c7f565b6001600160a01b0394909416606083015250608001529392505050565b600080600060608486031215613de457600080fd5b835192506020840151915060408401519050925092509256fea2646970667358221220a450ba8ae45e3158691061d6918259b9b4825118d3a339af40af850661cfd29564736f6c634300081100334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
    "runtime_bytecode": "6080604052600436106103e85760003560e01c806388e765ff11610208578063d257b34f11610118578063e800dff7116100ab578063f11a24d31161007a578063f11a24d314610b22578063f2fde38b14610b38578063f5648a4f14610b58578063f637434214610b6d578063fc155d1d14610b8357600080fd5b8063e800dff714610ac1578063e884f26014610ae1578063e96d053a14610af6578063ee40166e14610b0c57600080fd5b8063e2cd5fcd116100e7578063e2cd5fcd14610a60578063e2f4560514610a75578063e71dc3f514610a8b578063e7ad9fcd14610aa157600080fd5b8063d257b34f146109c4578063d85ba063146109e4578063dc3f0d0f146109fa578063dd62ed3e14610a1a57600080fd5b8063a9059cbb1161019b578063b62496f51161016a578063b62496f51461091b578063bbc0c7421461094b578063c02466681461096a578063c18bc1951461098a578063c876d0b9146109aa57600080fd5b8063a9059cbb146108b9578063a94a335e146108d9578063aa4bde28146108ef578063adb873bd1461090557600080fd5b806395d89b41116101d757806395d89b411461084e5780639a7a23d614610863578063a457c2d714610883578063a62068ce146108a357600080fd5b806388e765ff146107e45780638da5cb5b146107fa578063906e9dd014610818578063921369131461083857600080fd5b80634a62bb6511610303578063715018a6116102965780637bce5a04116102655780637bce5a041461073e57806381ece7c21461075457806382aa7c68146107745780638366e79a1461079457806385ecfd28146107b457600080fd5b8063715018a6146106de578063751039fc146106f35780637571336a146107085780637ad80c9d1461072857600080fd5b80636a486a8e116102d25780636a486a8e146106725780636b0a894c146106885780636ddd17131461069e57806370a08231146106be57600080fd5b80634a62bb651461061657806351f205e41461063057806358a6d5311461064557806366d602ae1461065c57600080fd5b80631f3fed8f1161037b5780632e6ed7ef1161034a5780632e6ed7ef1461059a578063313ce567146105ba57806339509351146105d6578063452ed4f1146105f657600080fd5b80631f3fed8f146105245780632307b4411461053a57806323b872dd1461055a5780632be32b611461057a57600080fd5b8063130a2c3c116103b7578063130a2c3c146104b757806318160ddd146104d95780631a8145bb146104f85780631d7778561461050e57600080fd5b806306fdde03146103f45780630758d9241461041f578063095ea7b31461045757806310d5de531461048757600080fd5b366103ef57005b600080fd5b34801561040057600080fd5b50610409610ba3565b6040516104169190613757565b60405180910390f35b34801561042b57600080fd5b5060095461043f906001600160a01b031681565b6040516001600160a01b039091168152602001610416565b34801561046357600080fd5b506104776104723660046137bd565b610c35565b6040519015158152602001610416565b34801561049357600080fd5b506104776104a23660046137e9565b60246020526000908152604090205460ff1681565b3480156104c357600080fd5b506104d76104d236600461381b565b610c4c565b005b3480156104e557600080fd5b506002545b604051908152602001610416565b34801561050457600080fd5b506104ea60205481565b34801561051a57600080fd5b506104ea60225481565b34801561053057600080fd5b506104ea601f5481565b34801561054657600080fd5b506104d7610555366004613977565b610cf6565b34801561056657600080fd5b50610477610575366004613a39565b610e4f565b34801561058657600080fd5b506104d7610595366004613a7a565b610ef9565b3480156105a657600080fd5b506104d76105b5366004613a93565b611006565b3480156105c657600080fd5b5060405160128152602001610416565b3480156105e257600080fd5b506104776105f13660046137bd565b6110b9565b34801561060257600080fd5b50600a5461043f906001600160a01b031681565b34801561062257600080fd5b506012546104779060ff1681565b34801561063c57600080fd5b506104d76110f5565b34801561065157600080fd5b50600f544310610477565b34801561066857600080fd5b506104ea60075481565b34801561067e57600080fd5b506104ea601a5481565b34801561069457600080fd5b506104ea60115481565b3480156106aa57600080fd5b506012546104779062010000900460ff1681565b3480156106ca57600080fd5b506104ea6106d93660046137e9565b6111fe565b3480156106ea57600080fd5b506104d7611219565b3480156106ff57600080fd5b506104d761128d565b34801561071457600080fd5b506104d7610723366004613ac5565b6112f8565b34801561073457600080fd5b506104ea601d5481565b34801561074a57600080fd5b506104ea60165481565b34801561076057600080fd5b506104d761076f3660046137e9565b6113c0565b34801561078057600080fd5b506104d761078f366004613a7a565b611475565b3480156107a057600080fd5b506104776107af366004613afe565b611548565b3480156107c057600080fd5b506104776107cf3660046137e9565b60106020526000908152604090205460ff1681565b3480156107f057600080fd5b506104ea60065481565b34801561080657600080fd5b506005546001600160a01b031661043f565b34801561082457600080fd5b506104d76108333660046137e9565b611751565b34801561084457600080fd5b506104ea601b5481565b34801561085a57600080fd5b50610409611801565b34801561086f57600080fd5b506104d761087e366004613ac5565b611810565b34801561088f57600080fd5b5061047761089e3660046137bd565b611904565b3480156108af57600080fd5b506104ea600f5481565b3480156108c557600080fd5b506104776108d43660046137bd565b61199d565b3480156108e557600080fd5b506104ea60185481565b3480156108fb57600080fd5b506104ea60085481565b34801561091157600080fd5b506104ea601e5481565b34801561092757600080fd5b506104776109363660046137e9565b60256020526000908152604090205460ff1681565b34801561095757600080fd5b5060125461047790610100900460ff1681565b34801561097657600080fd5b506104d7610985366004613ac5565b6119aa565b34801561099657600080fd5b506104d76109a5366004613a7a565b611a33565b3480156109b657600080fd5b506014546104779060ff1681565b3480156109d057600080fd5b506104d76109df366004613a7a565b611b3c565b3480156109f057600080fd5b506104ea60155481565b348015610a0657600080fd5b506104d7610a15366004613a7a565b611c87565b348015610a2657600080fd5b506104ea610a35366004613afe565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a6c57600080fd5b506104d7611d8e565b348015610a8157600080fd5b506104ea600b5481565b348015610a9757600080fd5b506104ea60195481565b348015610aad57600080fd5b506104d7610abc366004613a93565b611ed3565b348015610acd57600080fd5b506104d7610adc366004613ac5565b611f81565b348015610aed57600080fd5b506104d7611fd6565b348015610b0257600080fd5b506104ea60215481565b348015610b1857600080fd5b506104ea600e5481565b348015610b2e57600080fd5b506104ea60175481565b348015610b4457600080fd5b506104d7610b533660046137e9565b61200c565b348015610b6457600080fd5b506104d76120f7565b348015610b7957600080fd5b506104ea601c5481565b348015610b8f57600080fd5b506104d7610b9e366004613a7a565b612163565b606060038054610bb290613b2c565b80601f0160208091040260200160405190810160405280929190818152602001828054610bde90613b2c565b8015610c2b5780601f10610c0057610100808354040283529160200191610c2b565b820191906000526020600020905b815481529060010190602001808311610c0e57829003601f168201915b5050505050905090565b6000610c423384846123a7565b5060015b92915050565b6005546001600160a01b03163314610c7f5760405162461bcd60e51b8152600401610c7690613b66565b60405180910390fd5b60005b82811015610cf0578160106000868685818110610ca157610ca1613b9b565b9050602002016020810190610cb691906137e9565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610ce881613bc7565b915050610c82565b50505050565b6005546001600160a01b03163314610d205760405162461bcd60e51b8152600401610c7690613b66565b8051825114610d715760405162461bcd60e51b815260206004820152601e60248201527f617272617973206d757374206265207468652073616d65206c656e67746800006044820152606401610c76565b610258825110610de25760405162461bcd60e51b815260206004820152603660248201527f43616e206f6e6c792061697264726f70203630302077616c6c657473207065726044820152752074786e2064756520746f20676173206c696d69747360501b6064820152608401610c76565b60005b8251811015610e4a576000838281518110610e0257610e02613b9b565b602002602001015190506000838381518110610e2057610e20613b9b565b60200260200101519050610e353383836124cc565b50508080610e4290613bc7565b915050610de5565b505050565b6000610e5c848484612621565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610ee15760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610c76565b610eee85338584036123a7565b506001949350505050565b6005546001600160a01b03163314610f235760405162461bcd60e51b8152600401610c7690613b66565b670de0b6b3a76400006103e8610f3860025490565b610f43906002613be0565b610f4d9190613bf7565b610f579190613bf7565b811015610fb85760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f7420736574206d61782062757920616d6f756e74206c6f776572206044820152687468616e20302e322560b81b6064820152608401610c76565b610fca81670de0b6b3a7640000613be0565b60068190556040519081527ffcc0366804aaa8dbf88a2924100c733b70dec8445957a5d5f8ff92898de41009906020015b60405180910390a150565b6005546001600160a01b031633146110305760405162461bcd60e51b8152600401610c7690613b66565b601684905560178390556018829055601981905580826110508587613c19565b61105a9190613c19565b6110649190613c19565b6015819055600f1015610cf05760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420313525206f72206c6573730000006044820152606401610c76565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610c429185906110f0908690613c19565b6123a7565b6005546001600160a01b0316331461111f5760405162461bcd60e51b8152600401610c7690613b66565b600b5461112b306111fe565b10156111a1576040805162461bcd60e51b81526020600482015260248101919091527f43616e206f6e6c792073776170207768656e20746f6b656e20616d6f756e742060448201527f6973206174206f7220686967686572207468616e207265737472696374696f6e6064820152608401610c76565b600a805460ff60a01b1916600160a01b1790556111bc613156565b600a805460ff60a01b191690556040514281527f1b56c383f4f48fc992e45667ea4eabae777b9cca68b516a9562d8cda78f1bb329060200160405180910390a1565b6001600160a01b031660009081526020819052604090205490565b6005546001600160a01b031633146112435760405162461bcd60e51b8152600401610c7690613b66565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b031633146112b75760405162461bcd60e51b8152600401610c7690613b66565b6012805460ff199081169091556014805490911690556040517fa4ffae85e880608d5d4365c2b682786545d136145537788e7e0940dff9f0b98c90600090a1565b6005546001600160a01b031633146113225760405162461bcd60e51b8152600401610c7690613b66565b8061139557600a546001600160a01b03908116908316036113955760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f742072656d6f766520756e697377617020706169722066726f6d2060448201526636b0bc103a3c3760c91b6064820152608401610c76565b6001600160a01b03919091166000908152602460205260409020805460ff1916911515919091179055565b6005546001600160a01b031633146113ea5760405162461bcd60e51b8152600401610c7690613b66565b6001600160a01b0381166114535760405162461bcd60e51b815260206004820152602a60248201527f5f5265646973747269627574696f6e41646472657373206164647265737320636044820152690616e6e6f7420626520360b41b6064820152608401610c76565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b0316331461149f5760405162461bcd60e51b8152600401610c7690613b66565b601254610100900460ff16156114f75760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207265656e61626c652074726164696e670000000000000000006044820152606401610c76565b6012805462ffff0019166201010017905543600e819055611519908290613c19565b600f556040517fa56feb2d31b9a7424db0be063fd450863979c9e2382cf5110f869bd1ad361bb790600090a150565b6005546000906001600160a01b031633146115755760405162461bcd60e51b8152600401610c7690613b66565b6001600160a01b0383166115cb5760405162461bcd60e51b815260206004820152601a60248201527f5f746f6b656e20616464726573732063616e6e6f7420626520300000000000006044820152606401610c76565b306001600160a01b038416036116235760405162461bcd60e51b815260206004820152601c60248201527f43616e2774207769746864726177206e617469766520746f6b656e73000000006044820152606401610c76565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561166a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168e9190613c2c565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390529192509085169063a9059cbb906044016020604051808303816000875af11580156116e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117059190613c45565b604080516001600160a01b0387168152602081018490529193507fdeda980967fcead7b61e78ac46a4da14274af29e894d4d61e8b81ec38ab3e438910160405180910390a15092915050565b6005546001600160a01b0316331461177b5760405162461bcd60e51b8152600401610c7690613b66565b6001600160a01b0381166117df5760405162461bcd60e51b815260206004820152602560248201527f5f4d61726b6574696e674164647265737320616464726573732063616e6e6f74604482015264020626520360dc1b6064820152608401610c76565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b606060048054610bb290613b2c565b6005546001600160a01b0316331461183a5760405162461bcd60e51b8152600401610c7690613b66565b600a546001600160a01b03908116908316036118be5760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610c76565b6118c88282613395565b604051811515906001600160a01b038416907fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab90600090a35050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156119865760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c76565b61199333858584036123a7565b5060019392505050565b6000610c42338484612621565b6005546001600160a01b031633146119d45760405162461bcd60e51b8152600401610c7690613b66565b6001600160a01b038216600081815260236020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b03163314611a5d5760405162461bcd60e51b8152600401610c7690613b66565b670de0b6b3a76400006103e8611a7260025490565b611a7d906003613be0565b611a879190613bf7565b611a919190613bf7565b811015611af55760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f7420736574206d61782077616c6c657420616d6f756e74206c6f7760448201526b6572207468616e20302e332560a01b6064820152608401610c76565b611b0781670de0b6b3a7640000613be0565b60088190556040519081527fefc9add9a9b7382de284ef5ad69d8ea863e2680492b21a81948c2d5f04a442bc90602001610ffb565b6005546001600160a01b03163314611b665760405162461bcd60e51b8152600401610c7690613b66565b620186a0611b7360025490565b611b7e906001613be0565b611b889190613bf7565b811015611bf55760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610c76565b6103e8611c0160025490565b611c0c906001613be0565b611c169190613bf7565b811115611c825760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171892903a37ba30b61039bab838363c9760611b6064820152608401610c76565b600b55565b6005546001600160a01b03163314611cb15760405162461bcd60e51b8152600401610c7690613b66565b670de0b6b3a76400006103e8611cc660025490565b611cd1906002613be0565b611cdb9190613bf7565b611ce59190613bf7565b811015611d475760405162461bcd60e51b815260206004820152602a60248201527f43616e6e6f7420736574206d61782073656c6c20616d6f756e74206c6f776572604482015269207468616e20302e322560b01b6064820152608401610c76565b611d5981670de0b6b3a7640000613be0565b60078190556040519081527f53c4eb831d8cfeb750f1c62590d8cd30f4c6f0380d29a05caa09f0d92588560e90602001610ffb565b6005546001600160a01b03163314611db85760405162461bcd60e51b8152600401610c7690613b66565b6001601b8190556000601c819055601d819055601e819055908190611dde908290613c19565b611de89190613c19565b611df29190613c19565b601a819055601e1015611e425760405162461bcd60e51b81526020600482015260186024820152774b656570206665657320617420333025206f72206c65737360401b6044820152606401610c76565b600160168190556000601781905560188190556019819055908190611e68908290613c19565b611e729190613c19565b611e7c9190613c19565b6015819055600f1015611ed15760405162461bcd60e51b815260206004820152601860248201527f4b656570206665657320617420313525206f72206c65737300000000000000006044820152606401610c76565b565b6005546001600160a01b03163314611efd5760405162461bcd60e51b8152600401610c7690613b66565b601b849055601c839055601d829055601e8190558082611f1d8587613c19565b611f279190613c19565b611f319190613c19565b601a819055601e1015610cf05760405162461bcd60e51b81526020600482015260186024820152774b656570206665657320617420333025206f72206c65737360401b6044820152606401610c76565b6005546001600160a01b03163314611fab5760405162461bcd60e51b8152600401610c7690613b66565b6001600160a01b03919091166000908152601060205260409020805460ff1916911515919091179055565b6005546001600160a01b031633146120005760405162461bcd60e51b8152600401610c7690613b66565b6014805460ff19169055565b6005546001600160a01b031633146120365760405162461bcd60e51b8152600401610c7690613b66565b6001600160a01b03811661209b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c76565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146121215760405162461bcd60e51b8152600401610c7690613b66565b604051600090339047908381818185875af1925050503d8060008114610cf0576040519150601f19603f3d011682016040523d82523d6000602084013e610cf0565b6005546001600160a01b0316331461218d5760405162461bcd60e51b8152600401610c7690613b66565b678ac7230489e8000081111561221b5760405162461bcd60e51b815260206004820152604760248201527f4d6179206e6f7420627579206d6f7265207468616e2031302045544820696e2060448201527f612073696e676c652062757920746f207265647563652073616e64776963682060648201526661747461636b7360c81b608482015260a401610c76565b6040805160028082526060820183526000926020830190803683375050600954604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015612285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a99190613c62565b816000815181106122bc576122bc613b9b565b60200260200101906001600160a01b031690816001600160a01b03168152505030816001815181106122f0576122f0613b9b565b6001600160a01b03928316602091820292909201015260095460405163b6f9de9560e01b815291169063b6f9de9590849061233890600090869061dead904290600401613cc3565b6000604051808303818588803b15801561235157600080fd5b505af1158015612365573d6000803e3d6000fd5b50505050507fa017c1567cfcdd2d750a8c01e39fe2a846bcebc293c7d078477014d6848205688260405161239b91815260200190565b60405180910390a15050565b6001600160a01b0383166124095760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c76565b6001600160a01b03821661246a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c76565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166124f25760405162461bcd60e51b8152600401610c7690613cf8565b6001600160a01b0382166125185760405162461bcd60e51b8152600401610c7690613d3d565b6001600160a01b038316600090815260208190526040902054818110156125905760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c76565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906125c7908490613c19565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161261391815260200190565b60405180910390a350505050565b6001600160a01b0383166126475760405162461bcd60e51b8152600401610c7690613cf8565b6001600160a01b03821661266d5760405162461bcd60e51b8152600401610c7690613d3d565b600081116126bd5760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610c76565b601254610100900460ff16612750576001600160a01b03831660009081526023602052604090205460ff168061270b57506001600160a01b03821660009081526023602052604090205460ff165b6127505760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610c76565b600f5415612823576001600160a01b03831660009081526010602052604090205460ff16158061278d57506005546001600160a01b038381169116145b806127a257506001600160a01b03821661dead145b6128235760405162461bcd60e51b815260206004820152604660248201527f426f74732063616e6e6f74207472616e7366657220746f6b656e7320696e206f60448201527f72206f75742065786365707420746f206f776e6572206f722064656164206164606482015265323932b9b99760d11b608482015260a401610c76565b60125460ff1615612c1f576005546001600160a01b0384811691161480159061285a57506005546001600160a01b03838116911614155b801561286e57506001600160a01b03821615155b801561288557506001600160a01b03821661dead14155b80156128aa57506001600160a01b03831660009081526023602052604090205460ff16155b80156128cf57506001600160a01b03821660009081526023602052604090205460ff16155b15612c1f5760145460ff16156129e8576009546001600160a01b0383811691161480159061290b5750600a546001600160a01b03838116911614155b156129e85761291b600243613d80565b32600090815260136020526040902054108015612959575061293e600243613d80565b6001600160a01b038316600090815260136020526040902054105b6129c35760405162461bcd60e51b815260206004820152603560248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527432b21710102a393c9030b3b0b4b7103630ba32b91760591b6064820152608401610c76565b3260009081526013602052604080822043908190556001600160a01b03851683529120555b6001600160a01b03831660009081526025602052604090205460ff168015612a2957506001600160a01b03821660009081526024602052604090205460ff16155b15612af557600654811115612a915760405162461bcd60e51b815260206004820152602860248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201526736b0bc10313abc9760c11b6064820152608401610c76565b600854612a9d836111fe565b612aa79083613c19565b1115612af05760405162461bcd60e51b815260206004820152601860248201527710d85b9b9bdd08115e18d95959081b585e081dd85b1b195d60421b6044820152606401610c76565b612c1f565b6001600160a01b03821660009081526025602052604090205460ff168015612b3657506001600160a01b03831660009081526024602052604090205460ff16155b15612ba057600754811115612af05760405162461bcd60e51b815260206004820152602a60248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152691036b0bc1039b2b6361760b11b6064820152608401610c76565b6001600160a01b03821660009081526024602052604090205460ff16612c1f57600854612bcc836111fe565b612bd69083613c19565b1115612c1f5760405162461bcd60e51b815260206004820152601860248201527710d85b9b9bdd08115e18d95959081b585e081dd85b1b195d60421b6044820152606401610c76565b6000612c2a306111fe565b600b5490915081108015908190612c49575060125462010000900460ff165b8015612c5f5750600a54600160a01b900460ff16155b8015612c8457506001600160a01b03851660009081526025602052604090205460ff16155b8015612ca957506001600160a01b03851660009081526023602052604090205460ff16155b8015612cce57506001600160a01b03841660009081526023602052604090205460ff16155b15612cfc57600a805460ff60a01b1916600160a01b179055612cee613156565b600a805460ff60a01b191690555b6001600160a01b03851660009081526023602052604090205460019060ff1680612d3e57506001600160a01b03851660009081526023602052604090205460ff165b15612d47575060005b6000811561314257600f5443108015612d7857506001600160a01b03871660009081526025602052604090205460ff165b8015612d9d57506001600160a01b03861660009081526025602052604090205460ff16155b8015612dab57506000601554115b15612f2b576001600160a01b03861660009081526010602052604090205460ff16612e4b576001600160a01b0386166000908152601060205260408120805460ff191660019081179091556011805491929091612e09908490613c19565b90915550506040516001600160a01b03871681527f55678e47d0a699d3ab99b0184c4ff14f2246ba80522deb921aa0c8823578c44a9060200160405180910390a15b6064612e58866063613be0565b612e629190613bf7565b905060155460175482612e759190613be0565b612e7f9190613bf7565b60206000828254612e909190613c19565b9091555050601554601654612ea59083613be0565b612eaf9190613bf7565b601f6000828254612ec09190613c19565b9091555050601554601854612ed59083613be0565b612edf9190613bf7565b60216000828254612ef09190613c19565b9091555050601554601954612f059083613be0565b612f0f9190613bf7565b60226000828254612f209190613c19565b909155506131249050565b6001600160a01b03861660009081526025602052604090205460ff168015612f5557506000601a54115b15613017576064601a5486612f6a9190613be0565b612f749190613bf7565b9050601a54601c5482612f879190613be0565b612f919190613bf7565b60206000828254612fa29190613c19565b9091555050601a54601b54612fb79083613be0565b612fc19190613bf7565b601f6000828254612fd29190613c19565b9091555050601a54601d54612fe79083613be0565b612ff19190613bf7565b602160008282546130029190613c19565b9091555050601a54601e54612f059083613be0565b6001600160a01b03871660009081526025602052604090205460ff16801561304157506000601554115b15613124576064601554866130569190613be0565b6130609190613bf7565b9050601554601754826130739190613be0565b61307d9190613bf7565b6020600082825461308e9190613c19565b90915550506015546016546130a39083613be0565b6130ad9190613bf7565b601f60008282546130be9190613c19565b90915550506015546018546130d39083613be0565b6130dd9190613bf7565b602160008282546130ee9190613c19565b90915550506015546019546131039083613be0565b61310d9190613bf7565b6022600082825461311e9190613c19565b90915550505b8015613135576131358730836124cc565b61313f8186613d80565b94505b61314d8787876124cc565b50505050505050565b6000602254118015613172575060225461316f306111fe565b10155b1561318357613183306022546133c3565b60006022819055613193306111fe565b90506000602154601f546020546131aa9190613c19565b6131b49190613c19565b90508115806131c1575080155b156131ca575050565b600b546131d8906014613be0565b8211156131f057600b546131ed906014613be0565b91505b600080600283602054866132049190613be0565b61320e9190613bf7565b6132189190613bf7565b905061322c6132278286613d80565b6134ed565b6020544790819060009061324290600290613bf7565b61324c9087613d80565b601f546132599085613be0565b6132639190613bf7565b9050600060026020546132769190613bf7565b6132809088613d80565b60215461328d9086613be0565b6132979190613bf7565b90506132a38183613c19565b6132ad9084613d80565b60006020819055601f8190556021819055602255925084158015906132d25750600083115b156132e1576132e18584613647565b600d546040516001600160a01b03909116908290600081818185875af1925050503d806000811461332e576040519150601f19603f3d011682016040523d82523d6000602084013e613333565b606091505b5050600c546040519197506001600160a01b0316904790600081818185875af1925050503d8060008114613383576040519150601f19603f3d011682016040523d82523d6000602084013e613388565b606091505b5050505050505050505050565b6001600160a01b0382166000908152602560205260409020805460ff19168215151790556118c882826136fb565b6001600160a01b0382166134235760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c76565b6001600160a01b038216600090815260208190526040902054818110156134975760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c76565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016124bf565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061352257613522613b9b565b6001600160a01b03928316602091820292909201810191909152600954604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561357b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359f9190613c62565b816001815181106135b2576135b2613b9b565b6001600160a01b0392831660209182029290920101526009546135d891309116846123a7565b60095460405163791ac94760e01b81526001600160a01b039091169063791ac94790613611908590600090869030904290600401613d93565b600060405180830381600087803b15801561362b57600080fd5b505af115801561363f573d6000803e3d6000fd5b505050505050565b60095461365f9030906001600160a01b0316846123a7565b600954600c5460405163f305d71960e01b81523060048201526024810185905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af11580156136cf573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906136f49190613dcf565b5050505050565b6001600160a01b038216600081815260246020908152604091829020805460ff19168515159081179091558251938452908301527f6b4f1be9103e6cbcd38ca4a922334f2c3109b260130a6676a987f94088fd6746910161239b565b600060208083528351808285015260005b8181101561378457858101830151858201604001528201613768565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146137ba57600080fd5b50565b600080604083850312156137d057600080fd5b82356137db816137a5565b946020939093013593505050565b6000602082840312156137fb57600080fd5b8135613806816137a5565b9392505050565b80151581146137ba57600080fd5b60008060006040848603121561383057600080fd5b833567ffffffffffffffff8082111561384857600080fd5b818601915086601f83011261385c57600080fd5b81358181111561386b57600080fd5b8760208260051b850101111561388057600080fd5b602092830195509350508401356138968161380d565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156138e0576138e06138a1565b604052919050565b600067ffffffffffffffff821115613902576139026138a1565b5060051b60200190565b600082601f83011261391d57600080fd5b8135602061393261392d836138e8565b6138b7565b82815260059290921b8401810191818101908684111561395157600080fd5b8286015b8481101561396c5780358352918301918301613955565b509695505050505050565b6000806040838503121561398a57600080fd5b823567ffffffffffffffff808211156139a257600080fd5b818501915085601f8301126139b657600080fd5b813560206139c661392d836138e8565b82815260059290921b840181019181810190898411156139e557600080fd5b948201945b83861015613a0c5785356139fd816137a5565b825294820194908201906139ea565b96505086013592505080821115613a2257600080fd5b50613a2f8582860161390c565b9150509250929050565b600080600060608486031215613a4e57600080fd5b8335613a59816137a5565b92506020840135613a69816137a5565b929592945050506040919091013590565b600060208284031215613a8c57600080fd5b5035919050565b60008060008060808587031215613aa957600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215613ad857600080fd5b8235613ae3816137a5565b91506020830135613af38161380d565b809150509250929050565b60008060408385031215613b1157600080fd5b8235613b1c816137a5565b91506020830135613af3816137a5565b600181811c90821680613b4057607f821691505b602082108103613b6057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613bd957613bd9613bb1565b5060010190565b8082028115828204841417610c4657610c46613bb1565b600082613c1457634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610c4657610c46613bb1565b600060208284031215613c3e57600080fd5b5051919050565b600060208284031215613c5757600080fd5b81516138068161380d565b600060208284031215613c7457600080fd5b8151613806816137a5565b600081518084526020808501945080840160005b83811015613cb85781516001600160a01b031687529582019590820190600101613c93565b509495945050505050565b848152608060208201526000613cdc6080830186613c7f565b6001600160a01b03949094166040830152506060015292915050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b81810381811115610c4657610c46613bb1565b85815284602082015260a060408201526000613db260a0830186613c7f565b6001600160a01b0394909416606083015250608001529392505050565b600080600060608486031215613de457600080fd5b835192506020840151915060408401519050925092509256fea2646970667358221220a450ba8ae45e3158691061d6918259b9b4825118d3a339af40af850661cfd29564736f6c63430008110033",
    "contract_name": "batata",
    "compiler_version": "v0.8.17+commit.8df45f5f",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyBackTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"CaughtEarlyBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"MaxTransactionExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerForcedSwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferForeignToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"UpdatedMarketingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxBuyAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxSellAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxWalletAmount\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInTokens\",\"type\":\"uint256[]\"}],\"name\":\"airdropToWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockForPenaltyEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botsCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boughtEarly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"buyBackTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRedistributionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBuyPenaltyInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadBlocks\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"manageBoughtEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"massManageBoughtEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnToNormalTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRedistributionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MarketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_RedistributionAddress\",\"type\":\"address\"}],\"name\":\"setRedistributionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForRedistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_RedistributionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_RedistributionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// BATATA has saved the world in the worst crises, we can always count on it. Let's give it the love it deserves <3\r\n\r\n// https://t.me/batataeth\r\n// https://twitter.com/batataeth\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _createInitialSupply(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ncontract batata is ERC20, Ownable {\r\n\r\n    uint256 public maxBuyAmount;\r\n    uint256 public maxSellAmount;\r\n    uint256 public maxWalletAmount;\r\n\r\n    IDexRouter public dexRouter;\r\n    address public lpPair;\r\n\r\n    bool private swapping;\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    address MarketingAddress;\r\n    address RedistributionAddress;\r\n\r\n    uint256 public tradingActiveBlock = 0; // 0 means trading is not active\r\n    uint256 public blockForPenaltyEnd;\r\n    mapping (address => bool) public boughtEarly;\r\n    uint256 public botsCaught;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n\r\n     // Anti-bot and anti-whale mappings and variables\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n    bool public transferDelayEnabled = true;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyMarketingFee;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyRedistributionFee;\r\n    uint256 public buyBurnFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 public sellMarketingFee;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public sellRedistributionFee;\r\n    uint256 public sellBurnFee;\r\n\r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForRedistribution;\r\n    uint256 public tokensForBurn;\r\n\r\n    /******************/\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event EnabledTrading();\r\n\r\n    event RemovedLimits();\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event UpdatedMaxBuyAmount(uint256 newAmount);\r\n\r\n    event UpdatedMaxSellAmount(uint256 newAmount);\r\n\r\n    event UpdatedMaxWalletAmount(uint256 newAmount);\r\n\r\n    event UpdatedMarketingAddress(address indexed newWallet);\r\n\r\n    event MaxTransactionExclusion(address _address, bool excluded);\r\n\r\n    event BuyBackTriggered(uint256 amount);\r\n\r\n    event OwnerForcedSwapBack(uint256 timestamp);\r\n\r\n    event CaughtEarlyBuyer(address sniper);\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    event TransferForeignToken(address token, uint256 amount);\r\n\r\n    constructor() ERC20(\"BATATA\", \"BATATA\") {\r\n\r\n        address newOwner = msg.sender; // can leave alone if owner is deployer.\r\n\r\n        IDexRouter _dexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        dexRouter = _dexRouter;\r\n\r\n        // create pair\r\n        lpPair = IDexFactory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH());\r\n        _excludeFromMaxTransaction(address(lpPair), true);\r\n        _setAutomatedMarketMakerPair(address(lpPair), true);\r\n\r\n        uint256 totalSupply = 817171000 * 1e18;\r\n\r\n        maxBuyAmount = totalSupply * 1 / 100;\r\n        maxSellAmount = totalSupply * 1 / 100;\r\n        maxWalletAmount = totalSupply * 1 / 100;\r\n        swapTokensAtAmount = totalSupply * 5 / 10000;\r\n\r\n        buyMarketingFee = 20;\r\n        buyLiquidityFee = 0;\r\n        buyRedistributionFee = 0;\r\n        buyBurnFee = 0;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyRedistributionFee + buyBurnFee;\r\n\r\n        sellMarketingFee = 40;\r\n        sellLiquidityFee = 0;\r\n        sellRedistributionFee = 0;\r\n        sellBurnFee = 0;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellRedistributionFee + sellBurnFee;\r\n\r\n        _excludeFromMaxTransaction(newOwner, true);\r\n        _excludeFromMaxTransaction(address(this), true);\r\n        _excludeFromMaxTransaction(address(0xdead), true);\r\n\r\n        excludeFromFees(newOwner, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        MarketingAddress = address(newOwner);\r\n        RedistributionAddress = address(newOwner);\r\n\r\n        _createInitialSupply(newOwner, totalSupply);\r\n        transferOwnership(newOwner);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // only enable if no plan to airdrop\r\n\r\n    function enableTrading(uint256 deadBlocks) external onlyOwner {\r\n        require(!tradingActive, \"Cannot reenable trading\");\r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n        tradingActiveBlock = block.number;\r\n        blockForPenaltyEnd = tradingActiveBlock + deadBlocks;\r\n        emit EnabledTrading();\r\n    }\r\n\r\n    // remove limits after token is stable\r\n    function removeLimits() external onlyOwner {\r\n        limitsInEffect = false;\r\n        transferDelayEnabled = false;\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    function manageBoughtEarly(address wallet, bool flag) external onlyOwner {\r\n        boughtEarly[wallet] = flag;\r\n    }\r\n\r\n    function massManageBoughtEarly(address[] calldata wallets, bool flag) external onlyOwner {\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            boughtEarly[wallets[i]] = flag;\r\n        }\r\n    }\r\n\r\n    // disable Transfer delay - cannot be reenabled\r\n    function disableTransferDelay() external onlyOwner {\r\n        transferDelayEnabled = false;\r\n    }\r\n\r\n    function updateMaxBuyAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 2 / 1000)/1e18, \"Cannot set max buy amount lower than 0.2%\");\r\n        maxBuyAmount = newNum * (10**18);\r\n        emit UpdatedMaxBuyAmount(maxBuyAmount);\r\n    }\r\n\r\n    function updateMaxSellAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 2 / 1000)/1e18, \"Cannot set max sell amount lower than 0.2%\");\r\n        maxSellAmount = newNum * (10**18);\r\n        emit UpdatedMaxSellAmount(maxSellAmount);\r\n    }\r\n\r\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 3 / 1000)/1e18, \"Cannot set max wallet amount lower than 0.3%\");\r\n        maxWalletAmount = newNum * (10**18);\r\n        emit UpdatedMaxWalletAmount(maxWalletAmount);\r\n    }\r\n\r\n    // change the minimum amount of tokens to sell from fees\r\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner {\r\n  \t    require(newAmount >= totalSupply() * 1 / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\r\n  \t    require(newAmount <= totalSupply() * 1 / 1000, \"Swap amount cannot be higher than 0.1% total supply.\");\r\n  \t    swapTokensAtAmount = newAmount;\r\n  \t}\r\n\r\n    function _excludeFromMaxTransaction(address updAds, bool isExcluded) private {\r\n        _isExcludedMaxTransactionAmount[updAds] = isExcluded;\r\n        emit MaxTransactionExclusion(updAds, isExcluded);\r\n    }\r\n\r\n    function airdropToWallets(address[] memory wallets, uint256[] memory amountsInTokens) external onlyOwner {\r\n        require(wallets.length == amountsInTokens.length, \"arrays must be the same length\");\r\n        require(wallets.length < 600, \"Can only airdrop 600 wallets per txn due to gas limits\"); // allows for airdrop + launch at the same exact time, reducing delays and reducing sniper input.\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            address wallet = wallets[i];\r\n            uint256 amount = amountsInTokens[i];\r\n            super._transfer(msg.sender, wallet, amount);\r\n        }\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx) external onlyOwner {\r\n        if(!isEx){\r\n            require(updAds != lpPair, \"Cannot remove uniswap pair from max txn\");\r\n        }\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\r\n        require(pair != lpPair, \"The pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        _excludeFromMaxTransaction(pair, value);\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateBuyFees(uint256 _MarketingFee, uint256 _liquidityFee, uint256 _RedistributionFee, uint256 _burnFee) external onlyOwner {\r\n        buyMarketingFee = _MarketingFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyRedistributionFee = _RedistributionFee;\r\n        buyBurnFee = _burnFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyRedistributionFee + buyBurnFee;\r\n        require(buyTotalFees <= 15, \"Must keep fees at 15% or less\");\r\n    }\r\n\r\n    function updateSellFees(uint256 _MarketingFee, uint256 _liquidityFee, uint256 _RedistributionFee, uint256 _burnFee) external onlyOwner {\r\n        sellMarketingFee = _MarketingFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellRedistributionFee = _RedistributionFee;\r\n        sellBurnFee = _burnFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellRedistributionFee + sellBurnFee;\r\n        require(sellTotalFees <= 30, \"Keep fees at 30% or less\");\r\n    }\r\n\r\n    function returnToNormalTax() external onlyOwner {\r\n        sellMarketingFee = 1;\r\n        sellLiquidityFee = 0;\r\n        sellRedistributionFee = 0;\r\n        sellBurnFee = 0;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellRedistributionFee + sellBurnFee;\r\n        require(sellTotalFees <= 30, \"Keep fees at 30% or less\");\r\n\r\n        buyMarketingFee = 1;\r\n        buyLiquidityFee = 0;\r\n        buyRedistributionFee = 0;\r\n        buyBurnFee = 0;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyRedistributionFee + buyBurnFee;\r\n        require(buyTotalFees <= 15, \"Keep fees at 15% or less\");\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"amount must be greater than 0\");\r\n\r\n        if(!tradingActive){\r\n            require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading is not active.\");\r\n        }\r\n\r\n        if(blockForPenaltyEnd > 0){\r\n            require(!boughtEarly[from] || to == owner() || to == address(0xdead), \"Bots cannot transfer tokens in or out except to owner or dead address.\");\r\n        }\r\n\r\n        if(limitsInEffect){\r\n            if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]){\r\n\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\r\n                if (transferDelayEnabled){\r\n                    if (to != address(dexRouter) && to != address(lpPair)){\r\n                        require(_holderLastTransferTimestamp[tx.origin] < block.number - 2 && _holderLastTransferTimestamp[to] < block.number - 2, \"_transfer:: Transfer Delay enabled.  Try again later.\");\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                        _holderLastTransferTimestamp[to] = block.number;\r\n                    }\r\n                }\r\n\r\n                //when buy\r\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\r\n                        require(amount <= maxBuyAmount, \"Buy transfer amount exceeds the max buy.\");\r\n                        require(amount + balanceOf(to) <= maxWalletAmount, \"Cannot Exceed max wallet\");\r\n                }\r\n                //when sell\r\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\r\n                        require(amount <= maxSellAmount, \"Sell transfer amount exceeds the max sell.\");\r\n                }\r\n                else if (!_isExcludedMaxTransactionAmount[to]){\r\n                    require(amount + balanceOf(to) <= maxWalletAmount, \"Cannot Exceed max wallet\");\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if(canSwap && swapEnabled && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = true;\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if(takeFee){\r\n            // bot/sniper penalty.\r\n            if(earlyBuyPenaltyInEffect() && automatedMarketMakerPairs[from] && !automatedMarketMakerPairs[to] && buyTotalFees > 0){\r\n\r\n                if(!boughtEarly[to]){\r\n                    boughtEarly[to] = true;\r\n                    botsCaught += 1;\r\n                    emit CaughtEarlyBuyer(to);\r\n                }\r\n\r\n                fees = amount * 99 / 100;\r\n        \t    tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\r\n                tokensForMarketing += fees * buyMarketingFee / buyTotalFees;\r\n                tokensForRedistribution += fees * buyRedistributionFee / buyTotalFees;\r\n                tokensForBurn += fees * buyBurnFee / buyTotalFees;\r\n            }\r\n\r\n            // on sell\r\n            else if (automatedMarketMakerPairs[to] && sellTotalFees > 0){\r\n                fees = amount * sellTotalFees / 100;\r\n                tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees;\r\n                tokensForMarketing += fees * sellMarketingFee / sellTotalFees;\r\n                tokensForRedistribution += fees * sellRedistributionFee / sellTotalFees;\r\n                tokensForBurn += fees * sellBurnFee / sellTotalFees;\r\n            }\r\n\r\n            // on buy\r\n            else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n        \t    fees = amount * buyTotalFees / 100;\r\n        \t    tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\r\n                tokensForMarketing += fees * buyMarketingFee / buyTotalFees;\r\n                tokensForRedistribution += fees * buyRedistributionFee / buyTotalFees;\r\n                tokensForBurn += fees * buyBurnFee / buyTotalFees;\r\n            }\r\n\r\n            if(fees > 0){\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n        \tamount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function earlyBuyPenaltyInEffect() public view returns (bool){\r\n        return block.number < blockForPenaltyEnd;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // add the liquidity\r\n        dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(MarketingAddress),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n\r\n        if(tokensForBurn > 0 && balanceOf(address(this)) >= tokensForBurn) {\r\n            _burn(address(this), tokensForBurn);\r\n        }\r\n        tokensForBurn = 0;\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing + tokensForRedistribution;\r\n\r\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n\r\n        if(contractBalance > swapTokensAtAmount * 20){\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        bool success;\r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\r\n\r\n        swapTokensForEth(contractBalance - liquidityTokens);\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 ethForLiquidity = ethBalance;\r\n\r\n        uint256 ethForMarketing = ethBalance * tokensForMarketing / (totalTokensToSwap - (tokensForLiquidity/2));\r\n        uint256 ethForRedistribution = ethBalance * tokensForRedistribution / (totalTokensToSwap - (tokensForLiquidity/2));\r\n\r\n        ethForLiquidity -= ethForMarketing + ethForRedistribution;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n        tokensForRedistribution = 0;\r\n        tokensForBurn = 0;\r\n\r\n        if(liquidityTokens > 0 && ethForLiquidity > 0){\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n        }\r\n\r\n        (success,) = address(RedistributionAddress).call{value: ethForRedistribution}(\"\");\r\n\r\n        (success,) = address(MarketingAddress).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function transferForeignToken(address _token, address _to) external onlyOwner returns (bool _sent) {\r\n        require(_token != address(0), \"_token address cannot be 0\");\r\n        require(_token != address(this), \"Can't withdraw native tokens\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n        emit TransferForeignToken(_token, _contractBalance);\r\n    }\r\n\r\n    // withdraw ETH if stuck or someone sends to the address\r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function setMarketingAddress(address _MarketingAddress) external onlyOwner {\r\n        require(_MarketingAddress != address(0), \"_MarketingAddress address cannot be 0\");\r\n        MarketingAddress = payable(_MarketingAddress);\r\n    }\r\n\r\n    function setRedistributionAddress(address _RedistributionAddress) external onlyOwner {\r\n        require(_RedistributionAddress != address(0), \"_RedistributionAddress address cannot be 0\");\r\n        RedistributionAddress = payable(_RedistributionAddress);\r\n    }\r\n\r\n    // force Swap back if slippage issues.\r\n    function forceSwapBack() external onlyOwner {\r\n        require(balanceOf(address(this)) >= swapTokensAtAmount, \"Can only swap when token amount is at or higher than restriction\");\r\n        swapping = true;\r\n        swapBack();\r\n        swapping = false;\r\n        emit OwnerForcedSwapBack(block.timestamp);\r\n    }\r\n\r\n    // useful for buybacks or to reclaim any ETH on the contract in a way that helps holders.\r\n    function buyBackTokens(uint256 amountInWei) external onlyOwner {\r\n        require(amountInWei <= 10 ether, \"May not buy more than 10 ETH in a single buy to reduce sandwich attacks\");\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = dexRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountInWei}(\r\n            0, // accept any amount of Ethereum\r\n            path,\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n        emit BuyBackTriggered(amountInWei);\r\n    }\r\n}",
    "etherscan_verified": true
}