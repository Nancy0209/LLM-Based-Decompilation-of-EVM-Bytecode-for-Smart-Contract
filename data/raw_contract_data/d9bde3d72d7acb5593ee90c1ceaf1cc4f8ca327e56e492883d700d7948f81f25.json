{
    "address": "0x328E4802787C25995e524C4280a69F985f08ea48",
    "tx_hash": "d9bde3d72d7acb5593ee90c1ceaf1cc4f8ca327e56e492883d700d7948f81f25",
    "block_number": 18007563,
    "timestamp": 1693158251,
    "gas_used_in_creation": 1948022,
    "creation_bytecode": "60806040526032600655603260075560146009556014600a556003600b556003600c556014600d556014600e556014600f555f6010556009600a62000045919062000359565b620000549062061a8062000370565b601155620000656009600a62000359565b6200007490620ac1e862000370565b601255620000856009600a62000359565b6200009390619c4062000370565b601355620000a46009600a62000359565b620000b39062061a8062000370565b6014556016805461ffff60a81b19169055348015620000d0575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060048054336001600160a01b0319918216179091556005805490911673254c5ade807e57c933c6c32b752ac09c8c8cd1d2179055620001536009600a62000359565b62000163906302625a0062000370565b335f9081526001602081905260408220929092556003906200018c5f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff199687161790553081526003909352818320805485166001908117909155600454909116835291208054909216179055620001ea3390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002236009600a62000359565b62000233906302625a0062000370565b60405190815260200160405180910390a36200038a565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200029e57815f19048211156200028257620002826200024a565b808516156200029057918102915b93841c939080029062000263565b509250929050565b5f82620002b65750600162000353565b81620002c457505f62000353565b8160018114620002dd5760028114620002e85762000308565b600191505062000353565b60ff841115620002fc57620002fc6200024a565b50506001821b62000353565b5060208310610133831016604e8410600b84101617156200032d575081810a62000353565b6200033983836200025e565b805f19048211156200034f576200034f6200024a565b0290505b92915050565b5f6200036960ff841683620002a6565b9392505050565b80820281158282048414176200035357620003536200024a565b611a3380620003985f395ff3fe60806040526004361061011e575f3560e01c806377b54bad1161009d578063a9059cbb11610062578063a9059cbb1461031e578063bf474bed1461033d578063c9567bf914610352578063dd62ed3e14610366578063f4293890146103aa575f80fd5b806377b54bad146102805780637d1db4a51461029f5780638da5cb5b146102b45780638f9a55c0146102da57806395d89b41146102ef575f80fd5b8063313ce567116100e3578063313ce567146101f357806351bc3c851461020e57806370a0823114610224578063715018a614610258578063751039fc1461026c575f80fd5b806306fdde0314610129578063095ea7b31461016e5780630faee56f1461019d57806318160ddd146101c057806323b872dd146101d4575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b5060408051808201909152600b81526a424947204348554e47555360a81b60208201525b604051610165919061160f565b60405180910390f35b348015610179575f80fd5b5061018d610188366004611671565b6103be565b6040519015158152602001610165565b3480156101a8575f80fd5b506101b260145481565b604051908152602001610165565b3480156101cb575f80fd5b506101b26103d4565b3480156101df575f80fd5b5061018d6101ee36600461169b565b6103f4565b3480156101fe575f80fd5b5060405160098152602001610165565b348015610219575f80fd5b5061022261045b565b005b34801561022f575f80fd5b506101b261023e3660046116d9565b6001600160a01b03165f9081526001602052604090205490565b348015610263575f80fd5b5061022261048d565b348015610277575f80fd5b50610222610507565b34801561028b575f80fd5b5061018d61029a366004611671565b6105b8565b3480156102aa575f80fd5b506101b260115481565b3480156102bf575f80fd5b505f546040516001600160a01b039091168152602001610165565b3480156102e5575f80fd5b506101b260125481565b3480156102fa575f80fd5b506040805180820190915260078152664348554e47555360c81b6020820152610158565b348015610329575f80fd5b5061018d610338366004611671565b6106e8565b348015610348575f80fd5b506101b260135481565b34801561035d575f80fd5b506102226106f4565b348015610371575f80fd5b506101b26103803660046116f4565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b3480156103b5575f80fd5b50610222610aa1565b5f6103ca338484610b3a565b5060015b92915050565b5f6103e16009600a61181f565b6103ef906302625a0061182d565b905090565b5f610400848484610c5d565b610451843361044c856040518060600160405280602881526020016119d6602891396001600160a01b038a165f908152600260209081526040808320338452909152902054919061121b565b610b3a565b5060019392505050565b305f9081526001602052604090205480156104795761047981611253565b47801561048957610489816113c3565b5050565b5f546001600160a01b031633146104bf5760405162461bcd60e51b81526004016104b690611844565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105305760405162461bcd60e51b81526004016104b690611844565b61053c6009600a61181f565b61054a906302625a0061182d565b6011556105596009600a61181f565b610567906302625a0061182d565b6012557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105976009600a61181f565b6105a5906302625a0061182d565b60405190815260200160405180910390a1565b5f815f03610629576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610602573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106269190611879565b91505b604080516001600160a01b0385168152602081018490527fda2bc2bedd1f85b5a59d5dbbd6684ff877ef916994a16ec08813101e99ace65f910160405180910390a16004805460405163a9059cbb60e01b81526001600160a01b03918216928101929092526024820184905284169063a9059cbb906044016020604051808303815f875af11580156106bd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106e19190611890565b9392505050565b5f6103ca338484610c5d565b5f546001600160a01b0316331461071d5760405162461bcd60e51b81526004016104b690611844565b601654600160a01b900460ff16156107775760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104b6565b601580546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556107c09030906107b26009600a61181f565b61044c906302625a0061182d565b60155f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610810573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061083491906118af565b6001600160a01b031663c9c653963060155f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610893573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108b791906118af565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610901573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061092591906118af565b601680546001600160a01b039283166001600160a01b03199091161790556015541663f305d719473061096c816001600160a01b03165f9081526001602052604090205490565b5f8061097f5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156109e5573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610a0a91906118ca565b505060165460155460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610a5f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a839190611890565b506016805462ff00ff60a01b19166201000160a01b17905543600855565b5f4711610b035760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726163742062616c616e6365206d7573742062652067726561746572604482015269207468616e207a65726f60b01b60648201526084016104b6565b60045460405147916001600160a01b03169082156108fc029083905f818181858888f19350505050158015610489573d5f803e3d5ffd5b6001600160a01b038316610b9c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104b6565b6001600160a01b038216610bfd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104b6565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610cc15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104b6565b6001600160a01b038216610d235760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104b6565b5f8111610d845760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104b6565b5f80546001600160a01b03858116911614801590610daf57505f546001600160a01b03848116911614155b156110de57610de06064610dda600d5460105411610dcf57600954610dd3565b600b545b8590611471565b906114ef565b6016549091506001600160a01b038581169116148015610e0e57506015546001600160a01b03848116911614155b8015610e3257506001600160a01b0383165f9081526003602052604090205460ff16155b15610f3957601154821115610e895760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104b6565b60125482610eab856001600160a01b03165f9081526001602052604090205490565b610eb591906118f5565b1115610f035760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104b6565b436008546003610f1391906118f5565b1115610f2457823b15610f24575f80fd5b60108054905f610f3383611908565b91905055505b6016546001600160a01b03848116911614801590610f6f57506001600160a01b0383165f9081526003602052604090205460ff16155b15610fee5760125482610f96856001600160a01b03165f9081526001602052604090205490565b610fa091906118f5565b1115610fee5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104b6565b6016546001600160a01b03848116911614801561101457506001600160a01b0384163014155b156110415761103e6064610dda600e546010541161103457600a54610dd3565b600c548590611471565b90505b305f90815260016020526040902054601654600160a81b900460ff1615801561107757506016546001600160a01b038581169116145b801561108c5750601654600160b01b900460ff165b8015611099575060135481115b80156110a85750600f54601054115b156110dc576110ca6110c5846110c084601454611530565b611530565b611253565b4780156110da576110da476113c3565b505b505b801561115657305f908152600160205260409020546110fd9082611544565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061114d9085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461117890836115a2565b6001600160a01b0385165f908152600160205260409020556111bb61119d83836115a2565b6001600160a01b0385165f9081526001602052604090205490611544565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61120485856115a2565b60405190815260200160405180910390a350505050565b5f818484111561123e5760405162461bcd60e51b81526004016104b6919061160f565b505f61124a8486611920565b95945050505050565b6016805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061129957611299611933565b6001600160a01b03928316602091820292909201810191909152601554604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156112f0573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061131491906118af565b8160018151811061132757611327611933565b6001600160a01b03928316602091820292909201015260155461134d9130911684610b3a565b60155460405163791ac94760e01b81526001600160a01b039091169063791ac947906113859085905f90869030904290600401611947565b5f604051808303815f87803b15801561139c575f80fd5b505af11580156113ae573d5f803e3d5ffd5b50506016805460ff60a81b1916905550505050565b5f6064600654836113d4919061182d565b6113de91906119b6565b90505f6064600754846113f1919061182d565b6113fb91906119b6565b6004546040519192506001600160a01b03169083156108fc029084905f818181858888f19350505050158015611433573d5f803e3d5ffd5b506005546040516001600160a01b039091169082156108fc029083905f818181858888f1935050505015801561146b573d5f803e3d5ffd5b50505050565b5f825f0361148057505f6103ce565b5f61148b838561182d565b90508261149885836119b6565b146106e15760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104b6565b5f6106e183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115e3565b5f81831161153e57826106e1565b50919050565b5f8061155083856118f5565b9050838110156106e15760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104b6565b5f6106e183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061121b565b5f81836116035760405162461bcd60e51b81526004016104b6919061160f565b505f61124a84866119b6565b5f6020808352835180828501525f5b8181101561163a5785810183015185820160400152820161161e565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461166e575f80fd5b50565b5f8060408385031215611682575f80fd5b823561168d8161165a565b946020939093013593505050565b5f805f606084860312156116ad575f80fd5b83356116b88161165a565b925060208401356116c88161165a565b929592945050506040919091013590565b5f602082840312156116e9575f80fd5b81356106e18161165a565b5f8060408385031215611705575f80fd5b82356117108161165a565b915060208301356117208161165a565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561177957815f190482111561175f5761175f61172b565b8085161561176c57918102915b93841c9390800290611744565b509250929050565b5f8261178f575060016103ce565b8161179b57505f6103ce565b81600181146117b157600281146117bb576117d7565b60019150506103ce565b60ff8411156117cc576117cc61172b565b50506001821b6103ce565b5060208310610133831016604e8410600b84101617156117fa575081810a6103ce565b611804838361173f565b805f19048211156118175761181761172b565b029392505050565b5f6106e160ff841683611781565b80820281158282048414176103ce576103ce61172b565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f60208284031215611889575f80fd5b5051919050565b5f602082840312156118a0575f80fd5b815180151581146106e1575f80fd5b5f602082840312156118bf575f80fd5b81516106e18161165a565b5f805f606084860312156118dc575f80fd5b8351925060208401519150604084015190509250925092565b808201808211156103ce576103ce61172b565b5f600182016119195761191961172b565b5060010190565b818103818111156103ce576103ce61172b565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156119955784516001600160a01b031683529383019391830191600101611970565b50506001600160a01b03969096166060850152505050608001529392505050565b5f826119d057634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220bc71f5b0f7f691db7a5da0d89f07121a627e9a5a5695df2ab738b40f487d562c64736f6c63430008140033",
    "runtime_bytecode": "60806040526004361061011e575f3560e01c806377b54bad1161009d578063a9059cbb11610062578063a9059cbb1461031e578063bf474bed1461033d578063c9567bf914610352578063dd62ed3e14610366578063f4293890146103aa575f80fd5b806377b54bad146102805780637d1db4a51461029f5780638da5cb5b146102b45780638f9a55c0146102da57806395d89b41146102ef575f80fd5b8063313ce567116100e3578063313ce567146101f357806351bc3c851461020e57806370a0823114610224578063715018a614610258578063751039fc1461026c575f80fd5b806306fdde0314610129578063095ea7b31461016e5780630faee56f1461019d57806318160ddd146101c057806323b872dd146101d4575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b5060408051808201909152600b81526a424947204348554e47555360a81b60208201525b604051610165919061160f565b60405180910390f35b348015610179575f80fd5b5061018d610188366004611671565b6103be565b6040519015158152602001610165565b3480156101a8575f80fd5b506101b260145481565b604051908152602001610165565b3480156101cb575f80fd5b506101b26103d4565b3480156101df575f80fd5b5061018d6101ee36600461169b565b6103f4565b3480156101fe575f80fd5b5060405160098152602001610165565b348015610219575f80fd5b5061022261045b565b005b34801561022f575f80fd5b506101b261023e3660046116d9565b6001600160a01b03165f9081526001602052604090205490565b348015610263575f80fd5b5061022261048d565b348015610277575f80fd5b50610222610507565b34801561028b575f80fd5b5061018d61029a366004611671565b6105b8565b3480156102aa575f80fd5b506101b260115481565b3480156102bf575f80fd5b505f546040516001600160a01b039091168152602001610165565b3480156102e5575f80fd5b506101b260125481565b3480156102fa575f80fd5b506040805180820190915260078152664348554e47555360c81b6020820152610158565b348015610329575f80fd5b5061018d610338366004611671565b6106e8565b348015610348575f80fd5b506101b260135481565b34801561035d575f80fd5b506102226106f4565b348015610371575f80fd5b506101b26103803660046116f4565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b3480156103b5575f80fd5b50610222610aa1565b5f6103ca338484610b3a565b5060015b92915050565b5f6103e16009600a61181f565b6103ef906302625a0061182d565b905090565b5f610400848484610c5d565b610451843361044c856040518060600160405280602881526020016119d6602891396001600160a01b038a165f908152600260209081526040808320338452909152902054919061121b565b610b3a565b5060019392505050565b305f9081526001602052604090205480156104795761047981611253565b47801561048957610489816113c3565b5050565b5f546001600160a01b031633146104bf5760405162461bcd60e51b81526004016104b690611844565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105305760405162461bcd60e51b81526004016104b690611844565b61053c6009600a61181f565b61054a906302625a0061182d565b6011556105596009600a61181f565b610567906302625a0061182d565b6012557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105976009600a61181f565b6105a5906302625a0061182d565b60405190815260200160405180910390a1565b5f815f03610629576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610602573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106269190611879565b91505b604080516001600160a01b0385168152602081018490527fda2bc2bedd1f85b5a59d5dbbd6684ff877ef916994a16ec08813101e99ace65f910160405180910390a16004805460405163a9059cbb60e01b81526001600160a01b03918216928101929092526024820184905284169063a9059cbb906044016020604051808303815f875af11580156106bd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106e19190611890565b9392505050565b5f6103ca338484610c5d565b5f546001600160a01b0316331461071d5760405162461bcd60e51b81526004016104b690611844565b601654600160a01b900460ff16156107775760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104b6565b601580546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556107c09030906107b26009600a61181f565b61044c906302625a0061182d565b60155f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610810573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061083491906118af565b6001600160a01b031663c9c653963060155f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610893573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108b791906118af565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610901573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061092591906118af565b601680546001600160a01b039283166001600160a01b03199091161790556015541663f305d719473061096c816001600160a01b03165f9081526001602052604090205490565b5f8061097f5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156109e5573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610a0a91906118ca565b505060165460155460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610a5f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a839190611890565b506016805462ff00ff60a01b19166201000160a01b17905543600855565b5f4711610b035760405162461bcd60e51b815260206004820152602a60248201527f436f6e74726163742062616c616e6365206d7573742062652067726561746572604482015269207468616e207a65726f60b01b60648201526084016104b6565b60045460405147916001600160a01b03169082156108fc029083905f818181858888f19350505050158015610489573d5f803e3d5ffd5b6001600160a01b038316610b9c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104b6565b6001600160a01b038216610bfd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104b6565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610cc15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104b6565b6001600160a01b038216610d235760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104b6565b5f8111610d845760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104b6565b5f80546001600160a01b03858116911614801590610daf57505f546001600160a01b03848116911614155b156110de57610de06064610dda600d5460105411610dcf57600954610dd3565b600b545b8590611471565b906114ef565b6016549091506001600160a01b038581169116148015610e0e57506015546001600160a01b03848116911614155b8015610e3257506001600160a01b0383165f9081526003602052604090205460ff16155b15610f3957601154821115610e895760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104b6565b60125482610eab856001600160a01b03165f9081526001602052604090205490565b610eb591906118f5565b1115610f035760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104b6565b436008546003610f1391906118f5565b1115610f2457823b15610f24575f80fd5b60108054905f610f3383611908565b91905055505b6016546001600160a01b03848116911614801590610f6f57506001600160a01b0383165f9081526003602052604090205460ff16155b15610fee5760125482610f96856001600160a01b03165f9081526001602052604090205490565b610fa091906118f5565b1115610fee5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104b6565b6016546001600160a01b03848116911614801561101457506001600160a01b0384163014155b156110415761103e6064610dda600e546010541161103457600a54610dd3565b600c548590611471565b90505b305f90815260016020526040902054601654600160a81b900460ff1615801561107757506016546001600160a01b038581169116145b801561108c5750601654600160b01b900460ff165b8015611099575060135481115b80156110a85750600f54601054115b156110dc576110ca6110c5846110c084601454611530565b611530565b611253565b4780156110da576110da476113c3565b505b505b801561115657305f908152600160205260409020546110fd9082611544565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061114d9085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461117890836115a2565b6001600160a01b0385165f908152600160205260409020556111bb61119d83836115a2565b6001600160a01b0385165f9081526001602052604090205490611544565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61120485856115a2565b60405190815260200160405180910390a350505050565b5f818484111561123e5760405162461bcd60e51b81526004016104b6919061160f565b505f61124a8486611920565b95945050505050565b6016805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061129957611299611933565b6001600160a01b03928316602091820292909201810191909152601554604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156112f0573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061131491906118af565b8160018151811061132757611327611933565b6001600160a01b03928316602091820292909201015260155461134d9130911684610b3a565b60155460405163791ac94760e01b81526001600160a01b039091169063791ac947906113859085905f90869030904290600401611947565b5f604051808303815f87803b15801561139c575f80fd5b505af11580156113ae573d5f803e3d5ffd5b50506016805460ff60a81b1916905550505050565b5f6064600654836113d4919061182d565b6113de91906119b6565b90505f6064600754846113f1919061182d565b6113fb91906119b6565b6004546040519192506001600160a01b03169083156108fc029084905f818181858888f19350505050158015611433573d5f803e3d5ffd5b506005546040516001600160a01b039091169082156108fc029083905f818181858888f1935050505015801561146b573d5f803e3d5ffd5b50505050565b5f825f0361148057505f6103ce565b5f61148b838561182d565b90508261149885836119b6565b146106e15760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104b6565b5f6106e183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115e3565b5f81831161153e57826106e1565b50919050565b5f8061155083856118f5565b9050838110156106e15760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104b6565b5f6106e183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061121b565b5f81836116035760405162461bcd60e51b81526004016104b6919061160f565b505f61124a84866119b6565b5f6020808352835180828501525f5b8181101561163a5785810183015185820160400152820161161e565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461166e575f80fd5b50565b5f8060408385031215611682575f80fd5b823561168d8161165a565b946020939093013593505050565b5f805f606084860312156116ad575f80fd5b83356116b88161165a565b925060208401356116c88161165a565b929592945050506040919091013590565b5f602082840312156116e9575f80fd5b81356106e18161165a565b5f8060408385031215611705575f80fd5b82356117108161165a565b915060208301356117208161165a565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561177957815f190482111561175f5761175f61172b565b8085161561176c57918102915b93841c9390800290611744565b509250929050565b5f8261178f575060016103ce565b8161179b57505f6103ce565b81600181146117b157600281146117bb576117d7565b60019150506103ce565b60ff8411156117cc576117cc61172b565b50506001821b6103ce565b5060208310610133831016604e8410600b84101617156117fa575081810a6103ce565b611804838361173f565b805f19048211156118175761181761172b565b029392505050565b5f6106e160ff841683611781565b80820281158282048414176103ce576103ce61172b565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f60208284031215611889575f80fd5b5051919050565b5f602082840312156118a0575f80fd5b815180151581146106e1575f80fd5b5f602082840312156118bf575f80fd5b81516106e18161165a565b5f805f606084860312156118dc575f80fd5b8351925060208401519150604084015190509250925092565b808201808211156103ce576103ce61172b565b5f600182016119195761191961172b565b5060010190565b818103818111156103ce576103ce61172b565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156119955784516001600160a01b031683529383019391830191600101611970565b50506001600160a01b03969096166060850152505050608001529392505050565b5f826119d057634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220bc71f5b0f7f691db7a5da0d89f07121a627e9a5a5695df2ab738b40f487d562c64736f6c63430008140033",
    "contract_name": "BIGCHUNGUS",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClearStucks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"TokenAddressCleared\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"ClearToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearStuckToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"fast.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n\\r\\n\\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2003\u2003\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2591\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\\r\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2003\u2003\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\\r\\n\\r\\ntelegram: https://t.me/bigchungusERC\\r\\n\\r\\nWebsite: https://chungus.gg \\r\\n\\r\\nTwitter: https://x.com/bigchungustoken\\r\\n\\r\\nGame: https://chungus.gg/sfhggames/wgame/\\r\\n\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e7\u2800\u2800\u2800\u2800\u2800\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28e7\u2800\u2800\u2800\u28b0\u287f\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u285f\u2846\u2800\u2800\u28ff\u2847\u28bb\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u2800\u28ff\u2800\u28b0\u28ff\u2847\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u2844\u28b8\u2800\u28b8\u28ff\u2847\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u2847\u28b8\u2844\u2838\u28ff\u2847\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28b8\u2845\u2800\u28ff\u28a0\u284f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28ff\u28e5\u28fe\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u287f\u287f\u28ff\u28ff\u287f\u2845\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2809\u2800\u2809\u2859\u2894\u281b\u28df\u288b\u2826\u28b5\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28c4\u2800\u2800\u2801\u28ff\u28ef\u2865\u2803\u2800\u28b3\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u28ff\u2847\u2800\u2800\u2800\u2810\u2820\u280a\u2880\u2800\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2808\u2801\u2800\u2800\u2818\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28f7\u2840\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28ff\u28e7\u2800\u2800\\r\\n\u2800\u2800\u2800\u285c\u28ed\u2824\u288d\u28ff\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u289b\u28ad\u28d7\u2800\\r\\n\u2800\u2800\u2800\u2801\u2808\u2800\u2800\u28c0\u281d\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2804\u2820\u2800\u2800\u2830\u2845\\r\\n\u2800\u2800\u2800\u2880\u2800\u2800\u2840\u2821\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2801\u2814\u2820\u2855\u2800\\r\\n\u2800\u2800\u2800\u2800\u28ff\u28f7\u28f6\u2812\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2830\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u280a\u2809\u2886\u2800\u2800\u2800\u2800\\r\\n\u2800\u2880\u2824\u2800\u2800\u28a4\u28e4\u28fd\u28ff\u28ff\u28e6\u28c0\u2880\u2860\u28a4\u2864\u2804\u2800\u2812\u2800\u2801\u2800\u2800\u2800\u2898\u2814\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2850\u2808\u2801\u2808\u281b\u28db\u283f\u281f\u2811\u2808\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2809\u2811\u2812\u2800\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\\r\\n*/\\r\\n\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n}\\r\\n\\r\\ncontract BIGCHUNGUS is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    mapping (address => uint256) private _balances;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n    mapping (address => bool) private _isExcludedFromFee;\\r\\n    address payable private _taxWallet;\\r\\n    address payable private _teamWallet;\\r\\n    uint256 private _taxWalletPercentage = 50;\\r\\n    uint256 private _teamWalletPercentage = 50;\\r\\n\\r\\n    uint256 firstBlock;\\r\\n\\r\\n    uint256 private _initialBuyTax=20;\\r\\n    uint256 private _initialSellTax=20;\\r\\n    uint256 private _finalBuyTax=3;\\r\\n    uint256 private _finalSellTax=3;\\r\\n    uint256 private _reduceBuyTaxAt=20;\\r\\n    uint256 private _reduceSellTaxAt=20;\\r\\n    uint256 private _preventSwapBefore=20;\\r\\n    uint256 private _buyCount=0;\\r\\n\\r\\n    uint8 private constant _decimals = 9;\\r\\n    uint256 private constant _tTotal = 40000000 * 10**_decimals;\\r\\n    string private constant _name = unicode\\\"BIG CHUNGUS\\\";\\r\\n    string private constant _symbol = unicode\\\"CHUNGUS\\\";\\r\\n    uint256 public _maxTxAmount =   400000 * 10**_decimals;\\r\\n    uint256 public _maxWalletSize = 705000 * 10**_decimals;\\r\\n    uint256 public _taxSwapThreshold= 40000 * 10**_decimals;\\r\\n    uint256 public _maxTaxSwap= 400000 * 10**_decimals;\\r\\n\\r\\n    IUniswapV2Router02 private uniswapV2Router;\\r\\n    address private uniswapV2Pair;\\r\\n    bool private tradingOpen;\\r\\n    bool private inSwap = false;\\r\\n    bool private swapEnabled = false;\\r\\n\\r\\n    event MaxTxAmountUpdated(uint _maxTxAmount);\\r\\n    event ClearStucks(uint256 amount);\\r\\n    event ClearToken(address TokenAddressCleared, uint256 Amount);\\r\\n    modifier lockTheSwap {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    constructor () {\\r\\n\\r\\n        _taxWallet = payable(_msgSender());\\r\\n        _teamWallet = payable(0x254c5ADE807E57c933C6c32B752aC09C8C8Cd1D2);\\r\\n        _balances[_msgSender()] = _tTotal;\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n        _isExcludedFromFee[_taxWallet] = true;\\r\\n        \\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n\\r\\n    function name() public pure returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public pure override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        uint256 taxAmount=0;\\r\\n        if (from != owner() && to != owner()) {\\r\\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\\r\\n\\r\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\\r\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\r\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\r\\n\\r\\n                if (firstBlock + 3  > block.number) {\\r\\n                    require(!isContract(to));\\r\\n                }\\r\\n                _buyCount++;\\r\\n            }\\r\\n\\r\\n            if (to != uniswapV2Pair && ! _isExcludedFromFee[to]) {\\r\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\r\\n            }\\r\\n\\r\\n            if(to == uniswapV2Pair && from!= address(this) ){\\r\\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\\r\\n            }\\r\\n\\r\\n            uint256 contractTokenBalance = balanceOf(address(this));\\r\\n            if (!inSwap && to   == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\\r\\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\\r\\n                uint256 contractETHBalance = address(this).balance;\\r\\n                if(contractETHBalance > 0) {\\r\\n                    sendETHToFee(address(this).balance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(taxAmount>0){\\r\\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\\r\\n          emit Transfer(from, address(this),taxAmount);\\r\\n        }\\r\\n        _balances[from]=_balances[from].sub(amount);\\r\\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\\r\\n        emit Transfer(from, to, amount.sub(taxAmount));\\r\\n    }\\r\\n\\r\\n\\r\\n    function min(uint256 a, uint256 b) private pure returns (uint256){\\r\\n      return (a>b)?b:a;\\r\\n    }\\r\\n\\r\\n    function isContract(address account) private view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeLimits() external onlyOwner{\\r\\n        _maxTxAmount = _tTotal;\\r\\n        _maxWalletSize=_tTotal;\\r\\n        emit MaxTxAmountUpdated(_tTotal);\\r\\n    }\\r\\n\\r\\n    function sendETHToFee(uint256 amount) private {\\r\\n        uint256 taxWalletShare = amount * _taxWalletPercentage / 100;\\r\\n        uint256 teamWalletShare = amount * _teamWalletPercentage / 100;\\r\\n\\r\\n        _taxWallet.transfer(taxWalletShare);\\r\\n        _teamWallet.transfer(teamWalletShare);\\r\\n    }\\r\\n\\r\\n    function clearStuckToken(address tokenAddress, uint256 tokens) external returns (bool success) {\\r\\n        if(tokens == 0){\\r\\n            tokens = IERC20(tokenAddress).balanceOf(address(this));\\r\\n        }\\r\\n        emit ClearToken(tokenAddress, tokens);\\r\\n        return IERC20(tokenAddress).transfer(_taxWallet, tokens);\\r\\n    }\\r\\n\\r\\n    function manualSend() external {\\r\\n        require(address(this).balance > 0, \\\"Contract balance must be greater than zero\\\");\\r\\n        uint256 balance = address(this).balance;\\r\\n        payable(_taxWallet).transfer(balance);\\r\\n    }\\r\\n \\r\\n    function manualSwap() external{\\r\\n        uint256 tokenBalance=balanceOf(address(this));\\r\\n        if(tokenBalance>0){\\r\\n          swapTokensForEth(tokenBalance);\\r\\n        }\\r\\n        uint256 ethBalance=address(this).balance;\\r\\n        if(ethBalance>0){\\r\\n          sendETHToFee(ethBalance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function openTrading() external onlyOwner() {\\r\\n        require(!tradingOpen,\\\"trading is already open\\\");\\r\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\r\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\r\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\r\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\r\\n        swapEnabled = true;\\r\\n        tradingOpen = true;\\r\\n        firstBlock = block.number;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}