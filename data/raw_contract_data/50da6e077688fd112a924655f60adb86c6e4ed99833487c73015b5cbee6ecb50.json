{
    "address": "0x57D9302e8B62a24e716C048f4925b2c74c9797dC",
    "tx_hash": "50da6e077688fd112a924655f60adb86c6e4ed99833487c73015b5cbee6ecb50",
    "block_number": 18004875,
    "timestamp": 1693125671,
    "gas_used_in_creation": 4723179,
    "creation_bytecode": "60806040526200001a67016345785d8a000060001962000366565b620000289060001962000389565b6006556000600881905560196009819055600a8290556028600b819055600c839055600d819055600e92909255600f91909155601380546001600160a01b031990811673558c06193692283d29e285f7ad5ead84d1024be89081179092556014805490911690911790556016805461ffff60a81b1916600160b01b17905566071afd498d00006017819055601855655af3107a40009055348015620000cc57600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506006543360009081526002602090815260409182902092909255601580546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d908117909155815163c45a015560e01b815291519092839263c45a015592600480830193928290030181865afa1580156200018a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b09190620003af565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002249190620003af565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801562000272573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002989190620003af565b601680546001600160a01b0319166001600160a01b03928316179055600080548216815260056020526040808220805460ff1990811660019081179092553084528284208054821683179055601354851684528284208054821683179055601454909416835291208054909216179055336001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef67016345785d8a00006040516200035791815260200190565b60405180910390a350620003e1565b6000826200038457634e487b7160e01b600052601260045260246000fd5b500690565b600082821015620003aa57634e487b7160e01b600052601160045260246000fd5b500390565b600060208284031215620003c257600080fd5b81516001600160a01b0381168114620003da57600080fd5b9392505050565b61207980620003f16000396000f3fe6080604052600436106101f15760003560e01c806374010ece1161010d578063a9059cbb116100a0578063c3c8cd801161006f578063c3c8cd80146105d2578063c492f046146105e7578063dd62ed3e14610607578063ea1644d51461064d578063f2fde38b1461066d57600080fd5b8063a9059cbb14610532578063b5a6522314610552578063bdd795ef14610572578063bfd79284146105a257600080fd5b80638da5cb5b116100dc5780638da5cb5b146104ae5780638f9a55c0146104cc57806395d89b41146104e257806398a5c3151461051257600080fd5b806374010ece1461042b578063755c9a681461044b5780637d1db4a51461046b5780637f2feddc1461048157600080fd5b8063313ce567116101855780636d8aa8f8116101545780636d8aa8f8146103c15780636fc3eaec146103e157806370a08231146103f6578063715018a61461041657600080fd5b8063313ce5671461034557806349bd5a5e1461036157806367aadb7e146103815780636b999053146103a157600080fd5b806318160ddd116101c157806318160ddd146102ca5780631f600db0146102ef57806323b872dd1461030f5780632fd689e31461032f57600080fd5b8062b8cf2a146101fd57806306fdde031461021f578063095ea7b3146102625780631694505e1461029257600080fd5b366101f857005b600080fd5b34801561020957600080fd5b5061021d610218366004611b6e565b61068d565b005b34801561022b57600080fd5b5060408051808201909152600881526705348494120322e360c41b60208201525b6040516102599190611c33565b60405180910390f35b34801561026e57600080fd5b5061028261027d366004611c88565b61072c565b6040519015158152602001610259565b34801561029e57600080fd5b506015546102b2906001600160a01b031681565b6040516001600160a01b039091168152602001610259565b3480156102d657600080fd5b5067016345785d8a00005b604051908152602001610259565b3480156102fb57600080fd5b5061021d61030a366004611cc4565b610743565b34801561031b57600080fd5b5061028261032a366004611cdf565b61078b565b34801561033b57600080fd5b506102e160195481565b34801561035157600080fd5b5060405160098152602001610259565b34801561036d57600080fd5b506016546102b2906001600160a01b031681565b34801561038d57600080fd5b5061021d61039c366004611d6c565b6107f4565b3480156103ad57600080fd5b5061021d6103bc366004611dae565b61088c565b3480156103cd57600080fd5b5061021d6103dc366004611cc4565b6108d7565b3480156103ed57600080fd5b5061021d61091f565b34801561040257600080fd5b506102e1610411366004611dae565b61096a565b34801561042257600080fd5b5061021d61098c565b34801561043757600080fd5b5061021d610446366004611dcb565b610a00565b34801561045757600080fd5b5061021d610466366004611de4565b610a2f565b34801561047757600080fd5b506102e160175481565b34801561048d57600080fd5b506102e161049c366004611dae565b60116020526000908152604090205481565b3480156104ba57600080fd5b506000546001600160a01b03166102b2565b3480156104d857600080fd5b506102e160185481565b3480156104ee57600080fd5b50604080518082019091526007815266053484941322e360cc1b602082015261024c565b34801561051e57600080fd5b5061021d61052d366004611dcb565b610a6d565b34801561053e57600080fd5b5061028261054d366004611c88565b610a9c565b34801561055e57600080fd5b5061021d61056d366004611d6c565b610aa9565b34801561057e57600080fd5b5061028261058d366004611dae565b60126020526000908152604090205460ff1681565b3480156105ae57600080fd5b506102826105bd366004611dae565b60106020526000908152604090205460ff1681565b3480156105de57600080fd5b5061021d610b45565b3480156105f357600080fd5b5061021d610602366004611e16565b610b99565b34801561061357600080fd5b506102e1610622366004611e6a565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b34801561065957600080fd5b5061021d610668366004611dcb565b610c3a565b34801561067957600080fd5b5061021d610688366004611dae565b610c69565b6000546001600160a01b031633146106c05760405162461bcd60e51b81526004016106b790611ea3565b60405180910390fd5b60005b8151811015610728576001601060008484815181106106e4576106e4611ed8565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061072081611f04565b9150506106c3565b5050565b6000610739338484610d53565b5060015b92915050565b6000546001600160a01b0316331461076d5760405162461bcd60e51b81526004016106b790611ea3565b60168054911515600160a01b0260ff60a01b19909216919091179055565b6000610798848484610e77565b6107ea84336107e58560405180606001604052806028815260200161201c602891396001600160a01b038a1660009081526004602090815260408083203384529091529020549190611408565b610d53565b5060019392505050565b6000546001600160a01b0316331461081e5760405162461bcd60e51b81526004016106b790611ea3565b60005b81811015610887576012600084848481811061083f5761083f611ed8565b90506020020160208101906108549190611dae565b6001600160a01b031681526020810191909152604001600020805460ff191690558061087f81611f04565b915050610821565b505050565b6000546001600160a01b031633146108b65760405162461bcd60e51b81526004016106b790611ea3565b6001600160a01b03166000908152601060205260409020805460ff19169055565b6000546001600160a01b031633146109015760405162461bcd60e51b81526004016106b790611ea3565b60168054911515600160b01b0260ff60b01b19909216919091179055565b6013546001600160a01b0316336001600160a01b0316148061095457506014546001600160a01b0316336001600160a01b0316145b61095d57600080fd5b4761096781611442565b50565b6001600160a01b03811660009081526002602052604081205461073d9061147c565b6000546001600160a01b031633146109b65760405162461bcd60e51b81526004016106b790611ea3565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610a2a5760405162461bcd60e51b81526004016106b790611ea3565b601755565b6000546001600160a01b03163314610a595760405162461bcd60e51b81526004016106b790611ea3565b600893909355600a91909155600955600b55565b6000546001600160a01b03163314610a975760405162461bcd60e51b81526004016106b790611ea3565b601955565b6000610739338484610e77565b6000546001600160a01b03163314610ad35760405162461bcd60e51b81526004016106b790611ea3565b60005b8181101561088757600160126000858585818110610af657610af6611ed8565b9050602002016020810190610b0b9190611dae565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610b3d81611f04565b915050610ad6565b6013546001600160a01b0316336001600160a01b03161480610b7a57506014546001600160a01b0316336001600160a01b0316145b610b8357600080fd5b6000610b8e3061096a565b905061096781611500565b6000546001600160a01b03163314610bc35760405162461bcd60e51b81526004016106b790611ea3565b60005b82811015610c34578160056000868685818110610be557610be5611ed8565b9050602002016020810190610bfa9190611dae565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610c2c81611f04565b915050610bc6565b50505050565b6000546001600160a01b03163314610c645760405162461bcd60e51b81526004016106b790611ea3565b601855565b6000546001600160a01b03163314610c935760405162461bcd60e51b81526004016106b790611ea3565b6001600160a01b038116610cf85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106b7565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316610db55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106b7565b6001600160a01b038216610e165760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106b7565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610edb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106b7565b6001600160a01b038216610f3d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106b7565b60008111610f9f5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016106b7565b6000546001600160a01b03848116911614801590610fcb57506000546001600160a01b03838116911614155b8015610ff057506001600160a01b03831660009081526012602052604090205460ff16155b801561101557506001600160a01b03821660009081526012602052604090205460ff16155b1561130157601654600160a01b900460ff166110b9576001600160a01b03831660009081526012602052604090205460ff166110b95760405162461bcd60e51b815260206004820152603f60248201527f544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e642060448201527f746f6b656e7320756e74696c2074726164696e6720697320656e61626c65640060648201526084016106b7565b60175481111561110b5760405162461bcd60e51b815260206004820152601c60248201527f544f4b454e3a204d6178205472616e73616374696f6e204c696d69740000000060448201526064016106b7565b6001600160a01b03831660009081526010602052604090205460ff1615801561114d57506001600160a01b03821660009081526010602052604090205460ff16155b6111a55760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a20596f7572206163636f756e7420697320626c61636b6c69737460448201526265642160e81b60648201526084016106b7565b6016546001600160a01b0383811691161461122a57601854816111c78461096a565b6111d19190611f1d565b1061122a5760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a2042616c616e636520657863656564732077616c6c65742073696044820152627a652160e81b60648201526084016106b7565b60006112353061096a565b60195460175491925082101590821061124e5760175491505b8080156112655750601654600160a81b900460ff16155b801561127f57506016546001600160a01b03868116911614155b80156112945750601654600160b01b900460ff165b80156112b957506001600160a01b03851660009081526005602052604090205460ff16155b80156112de57506001600160a01b03841660009081526005602052604090205460ff16155b156112fe576112ec82611500565b4780156112fc576112fc47611442565b505b50505b6001600160a01b03831660009081526005602052604090205460019060ff168061134357506001600160a01b03831660009081526005602052604090205460ff165b8061137557506016546001600160a01b0385811691161480159061137557506016546001600160a01b03848116911614155b15611382575060006113fc565b6016546001600160a01b0385811691161480156113ad57506015546001600160a01b03848116911614155b156113bf57600854600c55600954600d555b6016546001600160a01b0384811691161480156113ea57506015546001600160a01b03858116911614155b156113fc57600a54600c55600b54600d555b610c348484848461167a565b6000818484111561142c5760405162461bcd60e51b81526004016106b79190611c33565b5060006114398486611f35565b95945050505050565b6014546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610728573d6000803e3d6000fd5b60006006548211156114e35760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b60648201526084016106b7565b60006114ed6116a8565b90506114f983826116cb565b9392505050565b6016805460ff60a81b1916600160a81b179055604080516002808252606082018352600092602083019080368337019050509050308160008151811061154857611548611ed8565b6001600160a01b03928316602091820292909201810191909152601554604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156115a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c59190611f4c565b816001815181106115d8576115d8611ed8565b6001600160a01b0392831660209182029290920101526015546115fe9130911684610d53565b60155460405163791ac94760e01b81526001600160a01b039091169063791ac94790611637908590600090869030904290600401611f69565b600060405180830381600087803b15801561165157600080fd5b505af1158015611665573d6000803e3d6000fd5b50506016805460ff60a81b1916905550505050565b806116875761168761170d565b61169284848461173b565b80610c3457610c34600e54600c55600f54600d55565b60008060006116b5611832565b90925090506116c482826116cb565b9250505090565b60006114f983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611872565b600c5415801561171d5750600d54155b1561172457565b600c8054600e55600d8054600f5560009182905555565b60008060008060008061174d876118a0565b6001600160a01b038f16600090815260026020526040902054959b5093995091975095509350915061177f90876118fd565b6001600160a01b03808b1660009081526002602052604080822093909355908a16815220546117ae908661193f565b6001600160a01b0389166000908152600260205260409020556117d08161199e565b6117da84836119e8565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161181f91815260200190565b60405180910390a3505050505050505050565b600654600090819067016345785d8a000061184d82826116cb565b8210156118695750506006549267016345785d8a000092509050565b90939092509050565b600081836118935760405162461bcd60e51b81526004016106b79190611c33565b5060006114398486611fda565b60008060008060008060008060006118bd8a600c54600d54611a0c565b92509250925060006118cd6116a8565b905060008060006118e08e878787611a61565b919e509c509a509598509396509194505050505091939550919395565b60006114f983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611408565b60008061194c8385611f1d565b9050838110156114f95760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016106b7565b60006119a86116a8565b905060006119b68383611ab1565b306000908152600260205260409020549091506119d3908261193f565b30600090815260026020526040902055505050565b6006546119f590836118fd565b600655600754611a05908261193f565b6007555050565b6000808080611a266064611a208989611ab1565b906116cb565b90506000611a396064611a208a89611ab1565b90506000611a5182611a4b8b866118fd565b906118fd565b9992985090965090945050505050565b6000808080611a708886611ab1565b90506000611a7e8887611ab1565b90506000611a8c8888611ab1565b90506000611a9e82611a4b86866118fd565b939b939a50919850919650505050505050565b600082600003611ac35750600061073d565b6000611acf8385611ffc565b905082611adc8583611fda565b146114f95760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016106b7565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461096757600080fd5b8035611b6981611b49565b919050565b60006020808385031215611b8157600080fd5b823567ffffffffffffffff80821115611b9957600080fd5b818501915085601f830112611bad57600080fd5b813581811115611bbf57611bbf611b33565b8060051b604051601f19603f83011681018181108582111715611be457611be4611b33565b604052918252848201925083810185019188831115611c0257600080fd5b938501935b82851015611c2757611c1885611b5e565b84529385019392850192611c07565b98975050505050505050565b600060208083528351808285015260005b81811015611c6057858101830151858201604001528201611c44565b81811115611c72576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215611c9b57600080fd5b8235611ca681611b49565b946020939093013593505050565b80358015158114611b6957600080fd5b600060208284031215611cd657600080fd5b6114f982611cb4565b600080600060608486031215611cf457600080fd5b8335611cff81611b49565b92506020840135611d0f81611b49565b929592945050506040919091013590565b60008083601f840112611d3257600080fd5b50813567ffffffffffffffff811115611d4a57600080fd5b6020830191508360208260051b8501011115611d6557600080fd5b9250929050565b60008060208385031215611d7f57600080fd5b823567ffffffffffffffff811115611d9657600080fd5b611da285828601611d20565b90969095509350505050565b600060208284031215611dc057600080fd5b81356114f981611b49565b600060208284031215611ddd57600080fd5b5035919050565b60008060008060808587031215611dfa57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060408486031215611e2b57600080fd5b833567ffffffffffffffff811115611e4257600080fd5b611e4e86828701611d20565b9094509250611e61905060208501611cb4565b90509250925092565b60008060408385031215611e7d57600080fd5b8235611e8881611b49565b91506020830135611e9881611b49565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611f1657611f16611eee565b5060010190565b60008219821115611f3057611f30611eee565b500190565b600082821015611f4757611f47611eee565b500390565b600060208284031215611f5e57600080fd5b81516114f981611b49565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611fb95784516001600160a01b031683529383019391830191600101611f94565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611ff757634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561201657612016611eee565b50029056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122009e328b0d8f2f1fb5967c2ed24d27b4bd691402cb7accd43335ef90ec792abeb64736f6c634300080e0033",
    "runtime_bytecode": "6080604052600436106101f15760003560e01c806374010ece1161010d578063a9059cbb116100a0578063c3c8cd801161006f578063c3c8cd80146105d2578063c492f046146105e7578063dd62ed3e14610607578063ea1644d51461064d578063f2fde38b1461066d57600080fd5b8063a9059cbb14610532578063b5a6522314610552578063bdd795ef14610572578063bfd79284146105a257600080fd5b80638da5cb5b116100dc5780638da5cb5b146104ae5780638f9a55c0146104cc57806395d89b41146104e257806398a5c3151461051257600080fd5b806374010ece1461042b578063755c9a681461044b5780637d1db4a51461046b5780637f2feddc1461048157600080fd5b8063313ce567116101855780636d8aa8f8116101545780636d8aa8f8146103c15780636fc3eaec146103e157806370a08231146103f6578063715018a61461041657600080fd5b8063313ce5671461034557806349bd5a5e1461036157806367aadb7e146103815780636b999053146103a157600080fd5b806318160ddd116101c157806318160ddd146102ca5780631f600db0146102ef57806323b872dd1461030f5780632fd689e31461032f57600080fd5b8062b8cf2a146101fd57806306fdde031461021f578063095ea7b3146102625780631694505e1461029257600080fd5b366101f857005b600080fd5b34801561020957600080fd5b5061021d610218366004611b6e565b61068d565b005b34801561022b57600080fd5b5060408051808201909152600881526705348494120322e360c41b60208201525b6040516102599190611c33565b60405180910390f35b34801561026e57600080fd5b5061028261027d366004611c88565b61072c565b6040519015158152602001610259565b34801561029e57600080fd5b506015546102b2906001600160a01b031681565b6040516001600160a01b039091168152602001610259565b3480156102d657600080fd5b5067016345785d8a00005b604051908152602001610259565b3480156102fb57600080fd5b5061021d61030a366004611cc4565b610743565b34801561031b57600080fd5b5061028261032a366004611cdf565b61078b565b34801561033b57600080fd5b506102e160195481565b34801561035157600080fd5b5060405160098152602001610259565b34801561036d57600080fd5b506016546102b2906001600160a01b031681565b34801561038d57600080fd5b5061021d61039c366004611d6c565b6107f4565b3480156103ad57600080fd5b5061021d6103bc366004611dae565b61088c565b3480156103cd57600080fd5b5061021d6103dc366004611cc4565b6108d7565b3480156103ed57600080fd5b5061021d61091f565b34801561040257600080fd5b506102e1610411366004611dae565b61096a565b34801561042257600080fd5b5061021d61098c565b34801561043757600080fd5b5061021d610446366004611dcb565b610a00565b34801561045757600080fd5b5061021d610466366004611de4565b610a2f565b34801561047757600080fd5b506102e160175481565b34801561048d57600080fd5b506102e161049c366004611dae565b60116020526000908152604090205481565b3480156104ba57600080fd5b506000546001600160a01b03166102b2565b3480156104d857600080fd5b506102e160185481565b3480156104ee57600080fd5b50604080518082019091526007815266053484941322e360cc1b602082015261024c565b34801561051e57600080fd5b5061021d61052d366004611dcb565b610a6d565b34801561053e57600080fd5b5061028261054d366004611c88565b610a9c565b34801561055e57600080fd5b5061021d61056d366004611d6c565b610aa9565b34801561057e57600080fd5b5061028261058d366004611dae565b60126020526000908152604090205460ff1681565b3480156105ae57600080fd5b506102826105bd366004611dae565b60106020526000908152604090205460ff1681565b3480156105de57600080fd5b5061021d610b45565b3480156105f357600080fd5b5061021d610602366004611e16565b610b99565b34801561061357600080fd5b506102e1610622366004611e6a565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b34801561065957600080fd5b5061021d610668366004611dcb565b610c3a565b34801561067957600080fd5b5061021d610688366004611dae565b610c69565b6000546001600160a01b031633146106c05760405162461bcd60e51b81526004016106b790611ea3565b60405180910390fd5b60005b8151811015610728576001601060008484815181106106e4576106e4611ed8565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061072081611f04565b9150506106c3565b5050565b6000610739338484610d53565b5060015b92915050565b6000546001600160a01b0316331461076d5760405162461bcd60e51b81526004016106b790611ea3565b60168054911515600160a01b0260ff60a01b19909216919091179055565b6000610798848484610e77565b6107ea84336107e58560405180606001604052806028815260200161201c602891396001600160a01b038a1660009081526004602090815260408083203384529091529020549190611408565b610d53565b5060019392505050565b6000546001600160a01b0316331461081e5760405162461bcd60e51b81526004016106b790611ea3565b60005b81811015610887576012600084848481811061083f5761083f611ed8565b90506020020160208101906108549190611dae565b6001600160a01b031681526020810191909152604001600020805460ff191690558061087f81611f04565b915050610821565b505050565b6000546001600160a01b031633146108b65760405162461bcd60e51b81526004016106b790611ea3565b6001600160a01b03166000908152601060205260409020805460ff19169055565b6000546001600160a01b031633146109015760405162461bcd60e51b81526004016106b790611ea3565b60168054911515600160b01b0260ff60b01b19909216919091179055565b6013546001600160a01b0316336001600160a01b0316148061095457506014546001600160a01b0316336001600160a01b0316145b61095d57600080fd5b4761096781611442565b50565b6001600160a01b03811660009081526002602052604081205461073d9061147c565b6000546001600160a01b031633146109b65760405162461bcd60e51b81526004016106b790611ea3565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610a2a5760405162461bcd60e51b81526004016106b790611ea3565b601755565b6000546001600160a01b03163314610a595760405162461bcd60e51b81526004016106b790611ea3565b600893909355600a91909155600955600b55565b6000546001600160a01b03163314610a975760405162461bcd60e51b81526004016106b790611ea3565b601955565b6000610739338484610e77565b6000546001600160a01b03163314610ad35760405162461bcd60e51b81526004016106b790611ea3565b60005b8181101561088757600160126000858585818110610af657610af6611ed8565b9050602002016020810190610b0b9190611dae565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610b3d81611f04565b915050610ad6565b6013546001600160a01b0316336001600160a01b03161480610b7a57506014546001600160a01b0316336001600160a01b0316145b610b8357600080fd5b6000610b8e3061096a565b905061096781611500565b6000546001600160a01b03163314610bc35760405162461bcd60e51b81526004016106b790611ea3565b60005b82811015610c34578160056000868685818110610be557610be5611ed8565b9050602002016020810190610bfa9190611dae565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610c2c81611f04565b915050610bc6565b50505050565b6000546001600160a01b03163314610c645760405162461bcd60e51b81526004016106b790611ea3565b601855565b6000546001600160a01b03163314610c935760405162461bcd60e51b81526004016106b790611ea3565b6001600160a01b038116610cf85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106b7565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316610db55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106b7565b6001600160a01b038216610e165760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106b7565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610edb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106b7565b6001600160a01b038216610f3d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106b7565b60008111610f9f5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016106b7565b6000546001600160a01b03848116911614801590610fcb57506000546001600160a01b03838116911614155b8015610ff057506001600160a01b03831660009081526012602052604090205460ff16155b801561101557506001600160a01b03821660009081526012602052604090205460ff16155b1561130157601654600160a01b900460ff166110b9576001600160a01b03831660009081526012602052604090205460ff166110b95760405162461bcd60e51b815260206004820152603f60248201527f544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e642060448201527f746f6b656e7320756e74696c2074726164696e6720697320656e61626c65640060648201526084016106b7565b60175481111561110b5760405162461bcd60e51b815260206004820152601c60248201527f544f4b454e3a204d6178205472616e73616374696f6e204c696d69740000000060448201526064016106b7565b6001600160a01b03831660009081526010602052604090205460ff1615801561114d57506001600160a01b03821660009081526010602052604090205460ff16155b6111a55760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a20596f7572206163636f756e7420697320626c61636b6c69737460448201526265642160e81b60648201526084016106b7565b6016546001600160a01b0383811691161461122a57601854816111c78461096a565b6111d19190611f1d565b1061122a5760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a2042616c616e636520657863656564732077616c6c65742073696044820152627a652160e81b60648201526084016106b7565b60006112353061096a565b60195460175491925082101590821061124e5760175491505b8080156112655750601654600160a81b900460ff16155b801561127f57506016546001600160a01b03868116911614155b80156112945750601654600160b01b900460ff165b80156112b957506001600160a01b03851660009081526005602052604090205460ff16155b80156112de57506001600160a01b03841660009081526005602052604090205460ff16155b156112fe576112ec82611500565b4780156112fc576112fc47611442565b505b50505b6001600160a01b03831660009081526005602052604090205460019060ff168061134357506001600160a01b03831660009081526005602052604090205460ff165b8061137557506016546001600160a01b0385811691161480159061137557506016546001600160a01b03848116911614155b15611382575060006113fc565b6016546001600160a01b0385811691161480156113ad57506015546001600160a01b03848116911614155b156113bf57600854600c55600954600d555b6016546001600160a01b0384811691161480156113ea57506015546001600160a01b03858116911614155b156113fc57600a54600c55600b54600d555b610c348484848461167a565b6000818484111561142c5760405162461bcd60e51b81526004016106b79190611c33565b5060006114398486611f35565b95945050505050565b6014546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610728573d6000803e3d6000fd5b60006006548211156114e35760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b60648201526084016106b7565b60006114ed6116a8565b90506114f983826116cb565b9392505050565b6016805460ff60a81b1916600160a81b179055604080516002808252606082018352600092602083019080368337019050509050308160008151811061154857611548611ed8565b6001600160a01b03928316602091820292909201810191909152601554604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156115a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c59190611f4c565b816001815181106115d8576115d8611ed8565b6001600160a01b0392831660209182029290920101526015546115fe9130911684610d53565b60155460405163791ac94760e01b81526001600160a01b039091169063791ac94790611637908590600090869030904290600401611f69565b600060405180830381600087803b15801561165157600080fd5b505af1158015611665573d6000803e3d6000fd5b50506016805460ff60a81b1916905550505050565b806116875761168761170d565b61169284848461173b565b80610c3457610c34600e54600c55600f54600d55565b60008060006116b5611832565b90925090506116c482826116cb565b9250505090565b60006114f983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611872565b600c5415801561171d5750600d54155b1561172457565b600c8054600e55600d8054600f5560009182905555565b60008060008060008061174d876118a0565b6001600160a01b038f16600090815260026020526040902054959b5093995091975095509350915061177f90876118fd565b6001600160a01b03808b1660009081526002602052604080822093909355908a16815220546117ae908661193f565b6001600160a01b0389166000908152600260205260409020556117d08161199e565b6117da84836119e8565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161181f91815260200190565b60405180910390a3505050505050505050565b600654600090819067016345785d8a000061184d82826116cb565b8210156118695750506006549267016345785d8a000092509050565b90939092509050565b600081836118935760405162461bcd60e51b81526004016106b79190611c33565b5060006114398486611fda565b60008060008060008060008060006118bd8a600c54600d54611a0c565b92509250925060006118cd6116a8565b905060008060006118e08e878787611a61565b919e509c509a509598509396509194505050505091939550919395565b60006114f983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611408565b60008061194c8385611f1d565b9050838110156114f95760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016106b7565b60006119a86116a8565b905060006119b68383611ab1565b306000908152600260205260409020549091506119d3908261193f565b30600090815260026020526040902055505050565b6006546119f590836118fd565b600655600754611a05908261193f565b6007555050565b6000808080611a266064611a208989611ab1565b906116cb565b90506000611a396064611a208a89611ab1565b90506000611a5182611a4b8b866118fd565b906118fd565b9992985090965090945050505050565b6000808080611a708886611ab1565b90506000611a7e8887611ab1565b90506000611a8c8888611ab1565b90506000611a9e82611a4b86866118fd565b939b939a50919850919650505050505050565b600082600003611ac35750600061073d565b6000611acf8385611ffc565b905082611adc8583611fda565b146114f95760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016106b7565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461096757600080fd5b8035611b6981611b49565b919050565b60006020808385031215611b8157600080fd5b823567ffffffffffffffff80821115611b9957600080fd5b818501915085601f830112611bad57600080fd5b813581811115611bbf57611bbf611b33565b8060051b604051601f19603f83011681018181108582111715611be457611be4611b33565b604052918252848201925083810185019188831115611c0257600080fd5b938501935b82851015611c2757611c1885611b5e565b84529385019392850192611c07565b98975050505050505050565b600060208083528351808285015260005b81811015611c6057858101830151858201604001528201611c44565b81811115611c72576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215611c9b57600080fd5b8235611ca681611b49565b946020939093013593505050565b80358015158114611b6957600080fd5b600060208284031215611cd657600080fd5b6114f982611cb4565b600080600060608486031215611cf457600080fd5b8335611cff81611b49565b92506020840135611d0f81611b49565b929592945050506040919091013590565b60008083601f840112611d3257600080fd5b50813567ffffffffffffffff811115611d4a57600080fd5b6020830191508360208260051b8501011115611d6557600080fd5b9250929050565b60008060208385031215611d7f57600080fd5b823567ffffffffffffffff811115611d9657600080fd5b611da285828601611d20565b90969095509350505050565b600060208284031215611dc057600080fd5b81356114f981611b49565b600060208284031215611ddd57600080fd5b5035919050565b60008060008060808587031215611dfa57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060408486031215611e2b57600080fd5b833567ffffffffffffffff811115611e4257600080fd5b611e4e86828701611d20565b9094509250611e61905060208501611cb4565b90509250925092565b60008060408385031215611e7d57600080fd5b8235611e8881611b49565b91506020830135611e9881611b49565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611f1657611f16611eee565b5060010190565b60008219821115611f3057611f30611eee565b500190565b600082821015611f4757611f47611eee565b500390565b600060208284031215611f5e57600080fd5b81516114f981611b49565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611fb95784516001600160a01b031683529383019391830191600101611f94565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611ff757634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561201657612016611eee565b50029056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122009e328b0d8f2f1fb5967c2ed24d27b4bd691402cb7accd43335ef90ec792abeb64736f6c634300080e0033",
    "contract_name": "SHIA20",
    "compiler_version": "v0.8.14+commit.80d49f37",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redisFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redisFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"Changetax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"OpenTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"allowPreTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"blockBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removePreTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapTokensThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"unblockBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: Unlicensed\r\n\r\n// https://shibasaga20.vip\r\n\r\n// https://twitter.com/ShibaSaga2\r\n\r\n// https://t.me/ShibaSaga2Portal\r\npragma solidity ^0.8.14;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract SHIA20 is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"SHIA 2.0\";\r\n    string private constant _symbol = \"SHIA2.0\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 100000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _redisFeeOnBuy = 0;\r\n    uint256 private _taxFeeOnBuy = 25;\r\n    uint256 private _redisFeeOnSell = 0;\r\n    uint256 private _taxFeeOnSell = 40;\r\n\r\n    //Original Fee\r\n    uint256 private _redisFee = _redisFeeOnSell;\r\n    uint256 private _taxFee = _taxFeeOnSell;\r\n\r\n    uint256 private _previousredisFee = _redisFee;\r\n    uint256 private _previoustaxFee = _taxFee;\r\n\r\n    mapping(address => bool) public bots; mapping (address => uint256) public _buyMap;\r\n    mapping (address => bool) public preTrader;\r\n    address payable private _developmentAddress = payable(0x558C06193692283d29E285f7aD5Ead84d1024Be8);\r\n    address payable private _marketingAddress = payable(0x558C06193692283d29E285f7aD5Ead84d1024Be8);\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n\r\n    uint256 public _maxTxAmount = 2000000 * 10**9;\r\n    uint256 public _maxWalletSize = 2000000 * 10**9;\r\n    uint256 public _swapTokensAtAmount = 100000 * 10**9;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);//\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_developmentAddress] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_redisFee == 0 && _taxFee == 0) return;\r\n\r\n        _previousredisFee = _redisFee;\r\n        _previoustaxFee = _taxFee;\r\n\r\n        _redisFee = 0;\r\n        _taxFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _redisFee = _previousredisFee;\r\n        _taxFee = _previoustaxFee;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        \tif (from != owner() && to != owner() && !preTrader[from] && !preTrader[to]) {\r\n\r\n            //Trade start check\r\n            if (!tradingOpen) {\r\n                require(preTrader[from], \"TOKEN: This account cannot send tokens until trading is enabled\");\r\n            }\r\n\r\n            require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n            require(!bots[from] && !bots[to], \"TOKEN: Your account is blacklisted!\");\r\n\r\n            if(to != uniswapV2Pair) {\r\n                require(balanceOf(to) + amount < _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\r\n\r\n            if(contractTokenBalance >= _maxTxAmount)\r\n            {\r\n                contractTokenBalance = _maxTxAmount;\r\n            }\r\n\r\n            if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        //Transfer Tokens\r\n        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n            takeFee = false;\r\n        } else {\r\n\r\n            //Set Fee for Buys\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                _redisFee = _redisFeeOnBuy;\r\n                _taxFee = _taxFeeOnBuy;\r\n            }\r\n\r\n            //Set Fee for Sells\r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                _redisFee = _redisFeeOnSell;\r\n                _taxFee = _taxFeeOnSell;\r\n            }\r\n\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _marketingAddress.transfer(amount);\r\n    }\r\n\r\n    function OpenTrading(bool _tradingOpen) public onlyOwner {\r\n        tradingOpen = _tradingOpen;\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function manualsend() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function blockBots(address[] memory bots_) public onlyOwner {\r\n        for (uint256 i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function unblockBot(address notbot) public onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\r\n            _getTValues(tAmount, _redisFee, _taxFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n            _getRValues(tAmount, tFee, tTeam, currentRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        uint256 redisFee,\r\n        uint256 taxFee\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = tAmount.mul(redisFee).div(100);\r\n        uint256 tTeam = tAmount.mul(taxFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTeam,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function Changetax(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {\r\n        _redisFeeOnBuy = redisFeeOnBuy;\r\n        _redisFeeOnSell = redisFeeOnSell;\r\n        _taxFeeOnBuy = taxFeeOnBuy;\r\n        _taxFeeOnSell = taxFeeOnSell;\r\n    }\r\n\r\n    //Set minimum tokens required to swap.\r\n    function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {\r\n        _swapTokensAtAmount = swapTokensAtAmount;\r\n    }\r\n\r\n    //Set minimum tokens required to swap.\r\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n\r\n    //Set maximum transaction\r\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n        _maxWalletSize = maxWalletSize;\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    function allowPreTrading(address[] calldata accounts) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n                 preTrader[accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removePreTrading(address[] calldata accounts) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n                 delete preTrader[accounts[i]];\r\n        }\r\n    }\r\n}",
    "etherscan_verified": true
}