{
    "address": "0xc0aC4689fe801A49Be4Ab080c0018eE0d9C3229e",
    "tx_hash": "04110581b4e4dcd2f8cafba02ea29a70ab84ebdae5e6683ef7b44c31a1883f8c",
    "block_number": 18006882,
    "timestamp": 1693149971,
    "gas_used_in_creation": 3829809,
    "creation_bytecode": "",
    "runtime_bytecode": "6080604052600436106102dd575f3560e01c8063944df0451161017d578063c031f679116100d2578063e2dd00d81161008e578063f0c7ba651161006b578063f0c7ba65146109ae578063f242432a146109cd578063f2fde38b146109ec578063f3fef3a314610a0b57005b8063e2dd00d814610911578063e985e9c51461093c578063eeeb81a81461098357005b8063c031f67914610875578063c59bc73914610894578063c9653539146108a9578063cedcc6da146108be578063dca615ed146108dd578063dcd4f427146108f257005b8063a22cb46511610139578063aec60fab11610116578063aec60fab146107c3578063b32c4d8d146107d8578063b4b726371461084d578063bf2d9e0b1461086057005b8063a22cb46514610750578063aa25936f1461076f578063aa48ed8f1461078357005b8063944df0451461065c5780639534dd3e1461067f57806395d89b411461069e5780639ca423b3146106b25780639e4eed7c14610726578063a0752e1f1461073b57005b80634e1273f41161023357806371fb18dd116101ef57806382f20d4d116101cc57806382f20d4d146105e45780638da5cb5b14610603578063920a253e14610634578063926427441461064957005b806371fb18dd1461058257806379dc80a9146105b05780637c59ed45146105c557005b80634e1273f4146104cb578063553a74d4146104f757806355f804b3146105255780635e6b651a146105445780636605ff6614610559578063715018a61461056e57005b806326c008961161029a5780632eb2c2d6116102775780632eb2c2d61461042c57806333cd42801461044b57806339bfc3191461047657806343b1f3ff1461049557005b806326c00896146103bb578063298fe880146103cf5780632a55205a146103ee57005b8062fdd58e146102e657806301ffc9a71461031857806306fdde03146103475780630e89341c146103685780630ffe38e2146103875780631984dc65146103a657005b366102e457005b005b3480156102f1575f80fd5b5061030561030036600461273a565b610a2a565b6040519081526020015b60405180910390f35b348015610323575f80fd5b50610337610332366004612779565b610ac1565b604051901515815260200161030f565b348015610352575f80fd5b5061035b610b10565b60405161030f91906127e1565b348015610373575f80fd5b5061035b6103823660046127f3565b610b9c565b348015610392575f80fd5b506102e46103a136600461281e565b610bd0565b3480156103b1575f80fd5b5061030560105481565b3480156103c6575f80fd5b50610305600781565b3480156103da575f80fd5b506102e46103e93660046127f3565b610d11565b3480156103f9575f80fd5b5061040d61040836600461285a565b610d7b565b604080516001600160a01b03909316835260208301919091520161030f565b348015610437575f80fd5b506102e46104463660046129b9565b610dcf565b348015610456575f80fd5b50610305610465366004612a6d565b600e6020525f908152604090205481565b348015610481575f80fd5b506102e46104903660046127f3565b610e14565b3480156104a0575f80fd5b506103056104af366004612a86565b600a60209081525f928352604080842090915290825290205481565b3480156104d6575f80fd5b506104ea6104e5366004612ab4565b610e89565b60405161030f9190612bb3565b348015610502575f80fd5b50610337610511366004612bc5565b600c6020525f908152604090205460ff1681565b348015610530575f80fd5b506102e461053f366004612be0565b610fb0565b34801561054f575f80fd5b5061030560075481565b348015610564575f80fd5b5061030560175481565b348015610579575f80fd5b506102e4610fc8565b34801561058d575f80fd5b5061033761059c366004612bc5565b60196020525f908152604090205460ff1681565b3480156105bb575f80fd5b5061030561177081565b3480156105d0575f80fd5b506103376105df366004612be0565b610fdb565b3480156105ef575f80fd5b506102e46105fe366004612c59565b611017565b34801561060e575f80fd5b506003546001600160a01b03165b6040516001600160a01b03909116815260200161030f565b34801561063f575f80fd5b5061030560155481565b6102e46106573660046127f3565b611243565b348015610667575f80fd5b5061040d601a54601b546001600160a01b0390911691565b34801561068a575f80fd5b5061035b610699366004612bc5565b611351565b3480156106a9575f80fd5b5061035b611369565b3480156106bd575f80fd5b506106fc6106cc366004612bc5565b60146020525f908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b604080516001600160a01b039095168552602085019390935291830152606082015260800161030f565b348015610731575f80fd5b50610305601b5481565b348015610746575f80fd5b5061030560085481565b34801561075b575f80fd5b506102e461076a366004612cd3565b611376565b34801561077a575f80fd5b50610305611381565b34801561078e575f80fd5b5061061c61079d366004612be0565b80516020818301810180516011825292820191909301209152546001600160a01b031681565b3480156107ce575f80fd5b50610305601c5481565b3480156107e3575f80fd5b506108236107f23660046127f3565b600b6020525f9081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a00161030f565b6102e461085b366004612d06565b6113a5565b34801561086b575f80fd5b5061030560185481565b348015610880575f80fd5b50601a5461061c906001600160a01b031681565b34801561089f575f80fd5b5061030560095481565b3480156108b4575f80fd5b5061030560165481565b3480156108c9575f80fd5b506102e46108d83660046127f3565b611598565b3480156108e8575f80fd5b50610305600f5481565b3480156108fd575f80fd5b506102e461090c366004612be0565b61160d565b34801561091c575f80fd5b5061030561092b366004612a6d565b600d6020525f908152604090205481565b348015610947575f80fd5b50610337610956366004612d3f565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205460ff1690565b34801561098e575f80fd5b5061030561099d366004612bc5565b60136020525f908152604090205481565b3480156109b9575f80fd5b506102e46109c8366004612be0565b611702565b3480156109d8575f80fd5b506102e46109e7366004612d6b565b6118d6565b3480156109f7575f80fd5b506102e4610a06366004612bc5565b61191b565b348015610a16575f80fd5b506102e4610a2536600461273a565b611994565b5f6001600160a01b038316610a995760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b505f818152602081815260408083206001600160a01b03861684529091529020545b92915050565b5f6001600160e01b03198216636cdb3d1360e11b1480610af157506001600160e01b031982166303a24d0760e21b145b80610abb57506301ffc9a760e01b6001600160e01b0319831614610abb565b60048054610b1d90612dce565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4990612dce565b8015610b945780601f10610b6b57610100808354040283529160200191610b94565b820191905f5260205f20905b815481529060010190602001808311610b7757829003601f168201915b505050505081565b60606006610ba983611a2b565b604051602001610bba929190612e06565b6040516020818303038152906040529050919050565b610bd8611aba565b60078410610c1b5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a590818985d18da08125160821b6044820152606401610a90565b5f848152600b6020526040902083815560048101805460ff191683158015919091179091556002909101839055610d0b575f848152600b60205260409020600181015460039091015410610ca95760405162461bcd60e51b815260206004820152601560248201527410985d18da081a5cc8185b1c9958591e48199d5b1b605a1b6044820152606401610a90565b60088490555f5b6007811015610d0957848114158015610cd957505f818152600b602052604090206004015460ff165b15610cf7575f818152600b60205260409020600401805460ff191690555b80610d0181612ead565b915050610cb0565b505b50505050565b610d19611aba565b601054610d2790600a612fa5565b610d32906064612fb0565b811115610d765760405162461bcd60e51b815260206004820152601260248201527143616e6e6f7420657863656564203130302560701b6044820152606401610a90565b600f55565b5f805f610daf601054600a610d909190612fa5565b610d9b906064612fb0565b600f54610da9908790611b14565b90611b26565b9050610dc36003546001600160a01b031690565b925090505b9250929050565b6001600160a01b038516331480610deb5750610deb8533610956565b610e075760405162461bcd60e51b8152600401610a9090612fc7565b610d098585858585611b31565b610e1c611aba565b601054610e2a90600a612fa5565b610e35906064612fb0565b811115610e845760405162461bcd60e51b815260206004820152601c60248201527f50657263656e746167652063616e6e6f742065786365656420313030000000006044820152606401610a90565b601655565b60608151835114610eee5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610a90565b5f83516001600160401b03811115610f0857610f0861287a565b604051908082528060200260200182016040528015610f31578160200160208202803683370190505b5090505f5b8451811015610fa857610f7b858281518110610f5457610f54613015565b6020026020010151858381518110610f6e57610f6e613015565b6020026020010151610a2a565b828281518110610f8d57610f8d613015565b6020908102919091010152610fa181612ead565b9050610f36565b509392505050565b610fb8611aba565b6006610fc4828261306e565b5050565b610fd0611aba565b610fd95f611d09565b565b5f806001600160a01b0316601183604051610ff69190613129565b908152604051908190036020019020546001600160a01b0316141592915050565b61101f611aba565b83821461106e5760405162461bcd60e51b815260206004820152601760248201527f4d69736d61746368656420696e707574206172726179730000000000000000006044820152606401610a90565b5f805b838110156110b8576110a485858381811061108e5761108e613015565b9050602002013583611d5a90919063ffffffff16565b9150806110b081612ead565b915050611071565b5080600d5f8460038111156110cf576110cf613144565b60038111156110e0576110e0613144565b81526020019081526020015f2054101561113c5760405162461bcd60e51b815260206004820152601b60248201527f457863656564732063617465676f727920616c6c6f636174696f6e00000000006044820152606401610a90565b5f5b858110156111be575f6111516003611d65565b90506111ab88888481811061116857611168613015565b905060200201602081019061117d9190612bc5565b8288888681811061119057611190613015565b9050602002013560405180602001604052805f815250611db7565b50806111b681612ead565b91505061113e565b5061120581600e5f8560038111156111d8576111d8613144565b60038111156111e9576111e9613144565b81526020019081526020015f2054611d5a90919063ffffffff16565b600e5f84600381111561121a5761121a613144565b600381111561122b5761122b613144565b815260208101919091526040015f2055505050505050565b6008545f908152600b602052604090205461125e9082611b14565b3410156112a45760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd08115d1a195c881cd95b9d60621b6044820152606401610a90565b6112ad81611ec6565b335f908152600c60205260408120805460ff19166001179055601780548392906112d8908490613158565b925050819055503460185f8282546112f09190613158565b9091555050335f9081526019602052604090205460ff1661133857335f908152601960205260408120805460ff19166001179055601c80549161133283612ead565b91905055505b50601a80546001600160a01b0319163317905534601b55565b60126020525f908152604090208054610b1d90612dce565b60058054610b1d90612dce565b610fc4338383612198565b5f6017545f0361139057505f90565b6017546018546113a0919061317f565b905090565b5f6011826040516113b69190613129565b908152604051908190036020019020546001600160a01b03169050806114165760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420726566657272616c20636f646560581b6044820152606401610a90565b6008545f908152600b60205260408120546114319085611b14565b90505f61145f601054600a6114469190612fa5565b611451906064612fb0565b601654610da9908590611b14565b90505f61146c8383612277565b9050803410156114be5760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e740000000000000000006044820152606401610a90565b6114c786611ec6565b5f6114f3601054600a6114da9190612fa5565b6114e5906064612fb0565b601554610da9908790611b14565b6040519091506001600160a01b0386169082156108fc029083905f818181858888f19350505050158015611529573d5f803e3d5ffd5b506001600160a01b0385165f90815260146020526040902080546001600160a01b0319163317815560018101546115609083611d5a565b600182015560028101546115749085611d5a565b60028201556003810154611589906001611d5a565b60039091015550505050505050565b6115a0611aba565b6010546115ae90600a612fa5565b6115b9906064612fb0565b8111156116085760405162461bcd60e51b815260206004820152601c60248201527f50657263656e746167652063616e6e6f742065786365656420313030000000006044820152606401610a90565b601555565b611615611aba565b5f6001600160a01b031660118260405161162f9190613129565b908152604051908190036020019020546001600160a01b03160361168d5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420726566657272616c20636f646560581b6044820152606401610a90565b60125f6011836040516116a09190613129565b9081526040805160209281900383019020546001600160a01b0316835290820192909252015f9081206116d2916126dc565b6011816040516116e29190613129565b90815260405190819003602001902080546001600160a01b031916905550565b5f6001600160a01b031660118260405161171c9190613129565b908152604051908190036020019020546001600160a01b0316146117785760405162461bcd60e51b8152602060048201526013602482015272436f646520616c72656164792065786973747360681b6044820152606401610a90565b335f908152601260205260409020805461179190612dce565b1590506117e05760405162461bcd60e51b815260206004820152601a60248201527f4164647265737320616c726561647920726567697374657265640000000000006044820152606401610a90565b5f805b6007811015611814576118006117f93383610a2a565b8390611d5a565b91508061180c81612ead565b9150506117e3565b505f811161187b5760405162461bcd60e51b815260206004820152602e60248201527f4d757374206f776e206120594243204e465420746f207265676973746572206160448201526d20726566657272616c20636f646560901b6064820152608401610a90565b3360118360405161188c9190613129565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b039490941693909317909255335f9081526012909152206118d1838261306e565b505050565b6001600160a01b0385163314806118f257506118f28533610956565b61190e5760405162461bcd60e51b8152600401610a9090612fc7565b610d098585858585612282565b611923611aba565b6001600160a01b0381166119885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a90565b61199181611d09565b50565b61199c611aba565b804710156119f85760405162461bcd60e51b8152602060048201526024808201527f496e73756666696369656e742062616c616e636520696e2074686520636f6e746044820152631c9858dd60e21b6064820152608401610a90565b6040516001600160a01b0383169082156108fc029083905f818181858888f193505050501580156118d1573d5f803e3d5ffd5b60605f611a37836123a8565b60010190505f816001600160401b03811115611a5557611a5561287a565b6040519080825280601f01601f191660200182016040528015611a7f576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611a8957509392505050565b6003546001600160a01b03163314610fd95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a90565b5f611b1f8284612fb0565b9392505050565b5f611b1f828461317f565b8151835114611b935760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610a90565b6001600160a01b038416611bb95760405162461bcd60e51b8152600401610a9090613192565b335f5b8451811015611c9b575f858281518110611bd857611bd8613015565b602002602001015190505f858381518110611bf557611bf5613015565b6020908102919091018101515f84815280835260408082206001600160a01b038e168352909352919091205490915081811015611c445760405162461bcd60e51b8152600401610a90906131d7565b5f838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611c80908490613158565b9250508190555050505080611c9490612ead565b9050611bbc565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611ceb929190613221565b60405180910390a4611d0181878787878761247f565b505050505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f611b1f8284613158565b5f814233604051602001611d9592919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b604051602081830303815290604052805190602001205f1c610abb919061324e565b6001600160a01b038416611e175760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610a90565b335f611e22856125d9565b90505f611e2e856125d9565b90505f868152602081815260408083206001600160a01b038b16845290915281208054879290611e5f908490613158565b909155505060408051878152602081018790526001600160a01b03808a16925f92918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611ebd835f89898989612622565b50505050505050565b6008545f908152600b6020908152604091829020825160a081018452815481526001820154928101929092526002810154928201929092526003820154606082015260049091015460ff16151560808201819052611f755760405162461bcd60e51b815260206004820152602660248201527f4e6f20616374697665206261746368206f72206261746368206973206e6f742060448201526561637469766560d01b6064820152608401610a90565b6008545f908152600a60209081526040808320338452909152812054611f9b9084611d5a565b9050816040015181111561200d5760405162461bcd60e51b815260206004820152603360248201527f45786365656473206d6178207075726368617365206c696d69742070657220776044820152720c2d8d8cae840ccdee440e8d0ca40c4c2e8c6d606b1b6064820152608401610a90565b602082015160608301516120219085611d5a565b111561207f5760405162461bcd60e51b815260206004820152602760248201527f4578636565647320594243206d696e74696e67206c696d697420666f722074686044820152660ca40c4c2e8c6d60cb1b6064820152608401610a90565b600754611770906120909085611d5a565b11156120de5760405162461bcd60e51b815260206004820152601f60248201527f4578636565647320746f74616c20594243206d696e74696e67206c696d6974006044820152606401610a90565b6008545f908152600b60205260408120600301546120fc9085611d5a565b90505f61211485600754611d5a90919063ffffffff16565b600880545f908152600b60209081526040808320600301879055600785905592548252600a815282822033835281529190208590558501519091508203612171576008545f908152600b60205260409020600401805460ff191690555b5f61217c6003611d65565b9050611d0133828860405180602001604052805f815250611db7565b816001600160a01b0316836001600160a01b03160361220b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610a90565b6001600160a01b038381165f81815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b5f611b1f8284613261565b6001600160a01b0384166122a85760405162461bcd60e51b8152600401610a9090613192565b335f6122b3856125d9565b90505f6122bf856125d9565b90505f868152602081815260408083206001600160a01b038c168452909152902054858110156123015760405162461bcd60e51b8152600401610a90906131d7565b5f878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061233d908490613158565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461239d848a8a8a8a8a612622565b505050505050505050565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106123e65772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612412576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061243057662386f26fc10000830492506010015b6305f5e1008310612448576305f5e100830492506008015b612710831061245c57612710830492506004015b6064831061246e576064830492506002015b600a8310610abb5760010192915050565b6001600160a01b0384163b15611d015760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906124c39089908990889088908890600401613274565b6020604051808303815f875af19250505080156124fd575060408051601f3d908101601f191682019092526124fa918101906132d1565b60015b6125a9576125096132ec565b806308c379a003612542575061251d613305565b806125285750612544565b8060405162461bcd60e51b8152600401610a9091906127e1565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610a90565b6001600160e01b0319811663bc197c8160e01b14611ebd5760405162461bcd60e51b8152600401610a909061338d565b6040805160018082528183019092526060915f91906020808301908036833701905050905082815f8151811061261157612611613015565b602090810291909101015292915050565b6001600160a01b0384163b15611d015760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061266690899089908890889088906004016133d5565b6020604051808303815f875af19250505080156126a0575060408051601f3d908101601f1916820190925261269d918101906132d1565b60015b6126ac576125096132ec565b6001600160e01b0319811663f23a6e6160e01b14611ebd5760405162461bcd60e51b8152600401610a909061338d565b5080546126e890612dce565b5f825580601f106126f7575050565b601f0160209004905f5260205f209081019061199191905b80821115612722575f815560010161270f565b5090565b6001600160a01b0381168114611991575f80fd5b5f806040838503121561274b575f80fd5b823561275681612726565b946020939093013593505050565b6001600160e01b031981168114611991575f80fd5b5f60208284031215612789575f80fd5b8135611b1f81612764565b5f5b838110156127ae578181015183820152602001612796565b50505f910152565b5f81518084526127cd816020860160208601612794565b601f01601f19169290920160200192915050565b602081525f611b1f60208301846127b6565b5f60208284031215612803575f80fd5b5035919050565b80358015158114612819575f80fd5b919050565b5f805f8060808587031215612831575f80fd5b84359350602085013592506040850135915061284f6060860161280a565b905092959194509250565b5f806040838503121561286b575f80fd5b50508035926020909101359150565b634e487b7160e01b5f52604160045260245ffd5b601f8201601f191681016001600160401b03811182821017156128b3576128b361287a565b6040525050565b5f6001600160401b038211156128d2576128d261287a565b5060051b60200190565b5f82601f8301126128eb575f80fd5b813560206128f8826128ba565b604051612905828261288e565b83815260059390931b8501820192828101915086841115612924575f80fd5b8286015b8481101561293f5780358352918301918301612928565b509695505050505050565b5f82601f830112612959575f80fd5b81356001600160401b038111156129725761297261287a565b604051612989601f8301601f19166020018261288e565b81815284602083860101111561299d575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f805f60a086880312156129cd575f80fd5b85356129d881612726565b945060208601356129e881612726565b935060408601356001600160401b0380821115612a03575f80fd5b612a0f89838a016128dc565b94506060880135915080821115612a24575f80fd5b612a3089838a016128dc565b93506080880135915080821115612a45575f80fd5b50612a528882890161294a565b9150509295509295909350565b803560048110612819575f80fd5b5f60208284031215612a7d575f80fd5b611b1f82612a5f565b5f8060408385031215612a97575f80fd5b823591506020830135612aa981612726565b809150509250929050565b5f8060408385031215612ac5575f80fd5b82356001600160401b0380821115612adb575f80fd5b818501915085601f830112612aee575f80fd5b81356020612afb826128ba565b604051612b08828261288e565b83815260059390931b8501820192828101915089841115612b27575f80fd5b948201945b83861015612b4e578535612b3f81612726565b82529482019490820190612b2c565b96505086013592505080821115612b63575f80fd5b50612b70858286016128dc565b9150509250929050565b5f8151808452602080850194508084015f5b83811015612ba857815187529582019590820190600101612b8c565b509495945050505050565b602081525f611b1f6020830184612b7a565b5f60208284031215612bd5575f80fd5b8135611b1f81612726565b5f60208284031215612bf0575f80fd5b81356001600160401b03811115612c05575f80fd5b612c118482850161294a565b949350505050565b5f8083601f840112612c29575f80fd5b5081356001600160401b03811115612c3f575f80fd5b6020830191508360208260051b8501011115610dc8575f80fd5b5f805f805f60608688031215612c6d575f80fd5b85356001600160401b0380821115612c83575f80fd5b612c8f89838a01612c19565b90975095506020880135915080821115612ca7575f80fd5b50612cb488828901612c19565b9094509250612cc7905060408701612a5f565b90509295509295909350565b5f8060408385031215612ce4575f80fd5b8235612cef81612726565b9150612cfd6020840161280a565b90509250929050565b5f8060408385031215612d17575f80fd5b8235915060208301356001600160401b03811115612d33575f80fd5b612b708582860161294a565b5f8060408385031215612d50575f80fd5b8235612d5b81612726565b91506020830135612aa981612726565b5f805f805f60a08688031215612d7f575f80fd5b8535612d8a81612726565b94506020860135612d9a81612726565b9350604086013592506060860135915060808601356001600160401b03811115612dc2575f80fd5b612a528882890161294a565b600181811c90821680612de257607f821691505b602082108103612e0057634e487b7160e01b5f52602260045260245ffd5b50919050565b5f808454612e1381612dce565b60018281168015612e2b5760018114612e4057612e6c565b60ff1984168752821515830287019450612e6c565b885f526020805f205f5b85811015612e635781548a820152908401908201612e4a565b50505082870194505b505050508351612e80818360208801612794565b64173539b7b760d91b9101908152600501949350505050565b634e487b7160e01b5f52601160045260245ffd5b5f60018201612ebe57612ebe612e99565b5060010190565b600181815b80851115612eff57815f1904821115612ee557612ee5612e99565b80851615612ef257918102915b93841c9390800290612eca565b509250929050565b5f82612f1557506001610abb565b81612f2157505f610abb565b8160018114612f375760028114612f4157612f5d565b6001915050610abb565b60ff841115612f5257612f52612e99565b50506001821b610abb565b5060208310610133831016604e8410600b8410161715612f80575081810a610abb565b612f8a8383612ec5565b805f1904821115612f9d57612f9d612e99565b029392505050565b5f611b1f8383612f07565b8082028115828204841417610abb57610abb612e99565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b5f52603260045260245ffd5b601f8211156118d1575f81815260208120601f850160051c8101602086101561304f5750805b601f850160051c820191505b81811015611d015782815560010161305b565b81516001600160401b038111156130875761308761287a565b61309b816130958454612dce565b84613029565b602080601f8311600181146130ce575f84156130b75750858301515b5f19600386901b1c1916600185901b178555611d01565b5f85815260208120601f198616915b828110156130fc578886015182559484019460019091019084016130dd565b508582101561311957878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f825161313a818460208701612794565b9190910192915050565b634e487b7160e01b5f52602160045260245ffd5b80820180821115610abb57610abb612e99565b634e487b7160e01b5f52601260045260245ffd5b5f8261318d5761318d61316b565b500490565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081525f6132336040830185612b7a565b82810360208401526132458185612b7a565b95945050505050565b5f8261325c5761325c61316b565b500690565b81810381811115610abb57610abb612e99565b6001600160a01b0386811682528516602082015260a0604082018190525f9061329f90830186612b7a565b82810360608401526132b18186612b7a565b905082810360808401526132c581856127b6565b98975050505050505050565b5f602082840312156132e1575f80fd5b8151611b1f81612764565b5f60033d11156133025760045f803e505f5160e01c5b90565b5f60443d10156133125790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561334157505050505090565b82850191508151818111156133595750505050505090565b843d87010160208285010111156133735750505050505090565b6133826020828601018761288e565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190525f9061340e908301846127b6565b97965050505050505056fea2646970667358221220e1fd600bca58a228c3f6161e8276702e8997b93e01848021f6c0c608488ba37e64736f6c63430008140033",
    "contract_name": "YBC",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_MINT_YBC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_BATCHES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeBatchId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"enum YBC.ResourceCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"airdropNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ybcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchasePerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum YBC.ResourceCategory\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"categoryAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum YBC.ResourceCategory\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"categorySpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMintedYBC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"disableReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAverageSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasMintedOrReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"isReferralCodeValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBuyer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedAmountByUserForBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedInCurrentBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownedNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"purchaseWithReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCodes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralDiscountPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"referralOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"registerForReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyAndReferralDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchasePerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setBatchDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountPercentage\",\"type\":\"uint256\"}],\"name\":\"setReferralDiscountPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPercentage\",\"type\":\"uint256\"}],\"name\":\"setReferralRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueBuyerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniqueBuyers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ybc_flattened.sol\": {\r\n      \"content\": \"\\n// File: @openzeppelin/contracts/utils/math/SignedMath.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/math/Math.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Strings.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\\n// File: contracts/ybc.sol\\n\\n\\npragma solidity ^0.8.20;\\n\\n\\n\\n\\n\\ninterface IERC2981 {\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\\ncontract YBC is ERC1155, Ownable, IERC2981 {\\n    using SafeMath for uint256;\\n    using Strings for uint256;\\n\\n    // Constants\\n    uint256 public constant NUM_BATCHES = 7;\\n    uint256 public constant MAX_TOTAL_MINT_YBC = 6000;\\n\\n    // Token Details\\n    string public name = \\\"Young Birds Club 2.0\\\";\\n    string public symbol = \\\"YBC\\\";\\n    string private baseURI =\\n        \\\"ipfs://QmdatTzZGfgiBBQiaCtz3QyKEwihxFzHFD7E5K4VtAoXH5/\\\";\\n\\n    // Minting State Variables\\n    uint256 public currentMintedYBC = 0;\\n    uint256 public activeBatchId;\\n    uint256 public mintedInCurrentBatch;\\n    mapping(uint256 => mapping(address => uint256))\\n        public mintedAmountByUserForBatch;\\n    mapping(uint256 => Batch) public batches;\\n    mapping(address => bool) public hasMintedOrReceived;\\n\\n    // Resources and Categories\\n    enum ResourceCategory {\\n        FoundingMembers,\\n        Community,\\n        Team,\\n        Reserve\\n    }\\n\\n    mapping(ResourceCategory => uint256) public categoryAllocations;\\n    mapping(ResourceCategory => uint256) public categorySpent;\\n\\n    // Royalty and Referral\\n    uint256 public royaltyFeePercent = 1000000;\\n    uint256 public royaltyAndReferralDecimals = 5;\\n\\n    // Referral Details\\n    struct Referral {\\n        address referrer;\\n        uint256 totalReward;\\n        uint256 totalDiscount;\\n        uint256 referralCount;\\n    }\\n\\n    mapping(string => address) public referralOwners;\\n    mapping(address => string) public referralCodes;\\n    mapping(address => uint256) public ownedNFTCount;\\n    mapping(address => Referral) public referrals;\\n\\n    uint256 public referralRewardPercentage = 530000;\\n    uint256 public referralDiscountPercentage = 550000;\\n\\n    // Admin Data\\n    uint256 public totalSales = 0;\\n    uint256 public totalRevenue = 0;\\n    mapping(address => bool) public uniqueBuyers;\\n    address public latestBuyer;\\n    uint256 public latestSaleAmount;\\n    uint256 public uniqueBuyerCount = 0;\\n\\n    // Batch Details\\n    struct Batch {\\n        uint256 priceInWei;\\n        uint256 ybcAmount;\\n        uint256 maxPurchasePerWallet;\\n        uint256 minted;\\n        bool active;\\n    }\\n\\n    // Constructor\\n    constructor() ERC1155(\\\"\\\") {\\n        // Initialize categoryAllocations\\n        categoryAllocations[ResourceCategory.FoundingMembers] = 1000;\\n        categoryAllocations[ResourceCategory.Community] = 1000;\\n        categoryAllocations[ResourceCategory.Team] = 1000;\\n        categoryAllocations[ResourceCategory.Reserve] = 1000;\\n\\n        // init batches\\n        batches[0] = Batch({\\n            priceInWei: 90000000000000000,\\n            ybcAmount: 300,\\n            maxPurchasePerWallet: 5,\\n            minted: 0,\\n            active: true\\n        });\\n        batches[1] = Batch({\\n            priceInWei: 190000000000000000,\\n            ybcAmount: 700,\\n            maxPurchasePerWallet: 10,\\n            minted: 0,\\n            active: false\\n        });\\n        batches[2] = Batch({\\n            priceInWei: 390000000000000000,\\n            ybcAmount: 1000,\\n            maxPurchasePerWallet: 15,\\n            minted: 0,\\n            active: false\\n        });\\n        batches[3] = Batch({\\n            priceInWei: 790000000000000000,\\n            ybcAmount: 1000,\\n            maxPurchasePerWallet: 20,\\n            minted: 0,\\n            active: false\\n        });\\n        batches[4] = Batch({\\n            priceInWei: 1590000000000000000,\\n            ybcAmount: 1000,\\n            maxPurchasePerWallet: 25,\\n            minted: 0,\\n            active: false\\n        });\\n        batches[5] = Batch({\\n            priceInWei: 3190000000000000000,\\n            ybcAmount: 1000,\\n            maxPurchasePerWallet: 30,\\n            minted: 0,\\n            active: false\\n        });\\n        batches[6] = Batch({\\n            priceInWei: 6390000000000000000,\\n            ybcAmount: 1000,\\n            maxPurchasePerWallet: 35,\\n            minted: 0,\\n            active: false\\n        });\\n    }\\n\\n    function setRoyaltyFeePercent(uint256 newPercent) external onlyOwner {\\n        require(\\n            newPercent <= 100 * 10**royaltyAndReferralDecimals,\\n            \\\"Cannot exceed 100%\\\"\\n        );\\n        royaltyFeePercent = newPercent;\\n    }\\n\\n    function setBatchDetails(\\n        uint256 batchId,\\n        uint256 priceInWei,\\n        uint256 maxPurchasePerWallet,\\n        bool active\\n    ) external onlyOwner {\\n        require(batchId < NUM_BATCHES, \\\"Invalid batch ID\\\");\\n        batches[batchId].priceInWei = priceInWei;\\n        batches[batchId].active = active; // This line sets the batch to active or inactive based on the input\\n        batches[batchId].maxPurchasePerWallet = maxPurchasePerWallet;\\n\\n        if (active) {\\n            require(batches[batchId].minted < batches[batchId].ybcAmount, \\\"Batch is already full\\\");\\n            activeBatchId = batchId;\\n\\n            // Deactivate other batches\\n            for (uint256 i = 0; i < NUM_BATCHES; i++) {\\n                if (i != batchId && batches[i].active) {\\n                    batches[i].active = false;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _mintWithChecks(uint256 amount) internal {\\n        Batch memory batch = batches[activeBatchId];\\n\\n        // Ensure the batch is active\\n        require(batch.active, \\\"No active batch or batch is not active\\\");\\n\\n        // Ensure the minting does not exceed the batch's per-wallet limit\\n        uint256 totalMintedForUserForBatch = mintedAmountByUserForBatch[\\n            activeBatchId\\n        ][msg.sender].add(amount);\\n        require(\\n            totalMintedForUserForBatch <= batch.maxPurchasePerWallet,\\n            \\\"Exceeds max purchase limit per wallet for the batch\\\"\\n        );\\n\\n        // Ensure total minting for the batch does not exceed its limit\\n        require(\\n            batch.minted.add(amount) <= batch.ybcAmount,\\n            \\\"Exceeds YBC minting limit for the batch\\\"\\n        );\\n\\n        // Ensure the total minted YBC does not exceed the limit\\n        require(\\n            currentMintedYBC.add(amount) <= MAX_TOTAL_MINT_YBC,\\n            \\\"Exceeds total YBC minting limit\\\"\\n        );\\n\\n        uint256 newMintedInCurrentBatch = batches[activeBatchId].minted.add(amount);\\n        uint256 newMintedYBC = currentMintedYBC.add(amount);\\n\\n        // Update the minted amount trackers\\n        batches[activeBatchId].minted = newMintedInCurrentBatch;\\n        currentMintedYBC = newMintedYBC;\\n\\n        mintedAmountByUserForBatch[activeBatchId][\\n            msg.sender\\n        ] = totalMintedForUserForBatch;\\n\\n        // Disable the batch if the minting limit is reached\\n        if (newMintedInCurrentBatch == batch.ybcAmount) {\\n            batches[activeBatchId].active = false;\\n        }\\n\\n        // Mint the NFTs\\n        uint256 randomTypeId = randomType(3);\\n        _mint(msg.sender, randomTypeId, amount, \\\"\\\");\\n    }\\n\\n\\n    function mintNFT(uint256 amount) public payable {\\n        require(msg.value >= batches[activeBatchId].priceInWei.mul(amount), \\\"Incorrect Ether sent\\\");\\n        _mintWithChecks(amount);\\n        hasMintedOrReceived[msg.sender] = true;\\n\\n        // Update sales data\\n        totalSales += amount;\\n        totalRevenue += msg.value;\\n\\n        if (!uniqueBuyers[msg.sender]) {\\n            uniqueBuyers[msg.sender] = true;\\n            uniqueBuyerCount++; // Increment the unique buyer count\\n        }\\n\\n        latestBuyer = msg.sender;\\n        latestSaleAmount = msg.value;\\n    }\\n\\n    function airdropNFTs(\\n        address[] calldata recipients,\\n        uint256[] calldata amounts,\\n        ResourceCategory category\\n    ) external onlyOwner {\\n        require(recipients.length == amounts.length, \\\"Mismatched input arrays\\\");\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            totalAmount = totalAmount.add(amounts[i]);\\n        }\\n\\n        require(\\n            categoryAllocations[category] >= totalAmount,\\n            \\\"Exceeds category allocation\\\"\\n        );\\n\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            uint256 randomNFTType = randomType(3);\\n            _mint(recipients[i], randomNFTType, amounts[i], \\\"\\\");\\n        }\\n\\n        categorySpent[category] = categorySpent[category].add(totalAmount);\\n    }\\n\\n    function setBaseURI(string memory _baseURI) external onlyOwner {\\n        baseURI = _baseURI;\\n    }\\n\\n    function randomType(uint256 modulo) internal view returns (uint256) {\\n        return\\n            uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender))) %\\n            modulo;\\n    }\\n\\n    function uri(uint256 _type) public view override returns (string memory) {\\n        return string(abi.encodePacked(baseURI, _type.toString(), \\\".json\\\"));\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        uint256 royalty = salePrice.mul(royaltyFeePercent).div(\\n            100*10**royaltyAndReferralDecimals\\n        );\\n        return (owner(), royalty);\\n    }\\n\\n    function withdraw(address payable _to, uint256 _amount) external onlyOwner {\\n        require(\\n            address(this).balance >= _amount,\\n            \\\"Insufficient balance in the contract\\\"\\n        );\\n        _to.transfer(_amount);\\n    }\\n\\n    //referal related functions\\n    // Register for referral. Anyone can call this. They get a referral code\\n    function registerForReferral(string memory _code) external {\\n        require(referralOwners[_code] == address(0), \\\"Code already exists\\\");\\n        require(\\n            bytes(referralCodes[msg.sender]).length == 0,\\n            \\\"Address already registered\\\"\\n        );\\n\\n        // Check if the sender owns at least one YBC NFT\\n        uint256 totalOwned = 0;\\n        for (uint256 i = 0; i < NUM_BATCHES; i++) {\\n            totalOwned = totalOwned.add(balanceOf(msg.sender, i));\\n        }\\n        require(\\n            totalOwned > 0,\\n            \\\"Must own a YBC NFT to register a referral code\\\"\\n        );\\n\\n        referralOwners[_code] = msg.sender;\\n        referralCodes[msg.sender] = _code;\\n    }\\n\\n    function purchaseWithReferral(uint256 amount, string memory _code)\\n        external\\n        payable\\n    {\\n        address referrerAddress = referralOwners[_code];\\n        require(referrerAddress != address(0), \\\"Invalid referral code\\\");\\n\\n        uint256 totalCost = batches[activeBatchId].priceInWei.mul(amount);\\n        uint256 discount = totalCost.mul(referralDiscountPercentage).div(100*10**royaltyAndReferralDecimals);\\n        uint256 finalCost = totalCost.sub(discount);\\n\\n        require(msg.value >= finalCost, \\\"Insufficient funds sent\\\");\\n\\n        // Mint the NFTs\\n        _mintWithChecks(amount);\\n\\n        // Handle referral rewards\\n        uint256 reward = totalCost.mul(referralRewardPercentage).div(100*10**royaltyAndReferralDecimals);\\n        payable(referrerAddress).transfer(reward);\\n\\n        // Record referral details\\n        Referral storage ref = referrals[referrerAddress];\\n        ref.referrer = msg.sender;\\n        ref.totalReward = ref.totalReward.add(reward);\\n        ref.totalDiscount = ref.totalDiscount.add(discount);\\n        ref.referralCount = ref.referralCount.add(1);\\n    }\\n\\n    function setReferralRewardPercentage(uint256 _rewardPercentage)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _rewardPercentage <= 100 * 10**royaltyAndReferralDecimals,\\n            \\\"Percentage cannot exceed 100\\\"\\n        );\\n        referralRewardPercentage = _rewardPercentage;\\n    }\\n\\n    function isReferralCodeValid(string memory _code)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return referralOwners[_code] != address(0);\\n    }\\n\\n    function setReferralDiscountPercentage(uint256 _discountPercentage)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _discountPercentage <= 100 * 10**royaltyAndReferralDecimals,\\n            \\\"Percentage cannot exceed 100\\\"\\n        );\\n        referralDiscountPercentage = _discountPercentage;\\n    }\\n\\n    function disableReferralCode(string memory _code) external onlyOwner {\\n        require(referralOwners[_code] != address(0), \\\"Invalid referral code\\\");\\n\\n        delete referralCodes[referralOwners[_code]];\\n        delete referralOwners[_code];\\n    }\\n\\n    function getAverageSalePrice() public view returns (uint256) {\\n        if (totalSales == 0) return 0;\\n        return totalRevenue / totalSales;\\n    }\\n\\n    function getLatestSale()\\n        public\\n        view\\n        returns (address buyer, uint256 saleAmount)\\n    {\\n        return (latestBuyer, latestSaleAmount);\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}