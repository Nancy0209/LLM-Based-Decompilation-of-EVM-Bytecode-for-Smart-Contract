{
    "address": "0xC6583634d8D1075E24dbBdB76fA1a04589558689",
    "tx_hash": "0e0faad22035449c9142d5a8ee83d582ca92e703947b82197d1413de2fb654e5",
    "block_number": 18004771,
    "timestamp": 1693124399,
    "gas_used_in_creation": 733209,
    "creation_bytecode": "608060405234801561000f575f80fd5b50604051610c07380380610c0783398101604081905261002e916100d2565b61003733610068565b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055610103565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100cd575f80fd5b919050565b5f80604083850312156100e3575f80fd5b6100ec836100b7565b91506100fa602084016100b7565b90509250929050565b610af7806101105f395ff3fe608060405234801561000f575f80fd5b50600436106100cb575f3560e01c80638da5cb5b11610088578063bade267b11610063578063bade267b1461019a578063d06fcba8146101ad578063f2fde38b146101c0578063f7c618c1146101d3575f80fd5b80638da5cb5b146101595780638e6f6b771461017d578063a2beb51014610187575f80fd5b80634978ea9d146100cf57806352049ace146100eb5780635312ea8e1461010a5780635685c4661461011f578063715018a61461013e5780638bdf67f214610146575b5f80fd5b6100d860055481565b6040519081526020015b60405180910390f35b6100d86100f936600461092f565b60036020525f908152604090205481565b61011d61011836600461092f565b6101e6565b005b6100d861012d36600461092f565b60046020525f908152604090205481565b61011d610264565b61011d61015436600461092f565b610277565b5f546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b6100d862093a8081565b61011d610195366004610946565b61040e565b6100d86101a8366004610946565b610579565b600254610165906001600160a01b031681565b61011d6101ce3660046109c9565b6106f7565b600154610165906001600160a01b031681565b6101ee610770565b60015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303815f875af115801561023c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061026091906109eb565b5050565b61026c610770565b6102755f6107c9565b565b61027f610770565b600254604080516318160ddd60e01b815290515f926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156102c6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102ea9190610a0a565b90505f81116103355760405162461bcd60e51b8152602060048201526012602482015271139bc81391951cc81b5a5b9d1959081e595d60721b60448201526064015b60405180910390fd5b6001546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303815f875af1158015610389573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ad91906109eb565b6103eb5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161032c565b6103f58183610a35565b60055f8282546104059190610a54565b90915550505050565b806104535760405162461bcd60e51b8152602060048201526015602482015274139bc81d1bdad95b8812511cc81c1c9bdd9a591959605a1b604482015260640161032c565b5f5b81811015610574575f83838381811061047057610470610a67565b6002546040516331a9108f60e11b8152602092909202939093013560048201819052935033926001600160a01b03169150636352211e90602401602060405180830381865afa1580156104c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104e99190610a7b565b6001600160a01b0316146105355760405162461bcd60e51b81526020600482015260136024820152722737ba103a3432903a37b5b2b71037bbb732b960691b604482015260640161032c565b5f8181526003602052604090205462093a80906105529042610a96565b11156105615761056181610818565b508061056c81610aa9565b915050610455565b505050565b5f816105bf5760405162461bcd60e51b8152602060048201526015602482015274139bc81d1bdad95b8812511cc81c1c9bdd9a591959605a1b604482015260640161032c565b5f805b838110156106ed575f8585838181106105dd576105dd610a67565b6002546040516331a9108f60e11b8152602092909202939093013560048201819052935033926001600160a01b03169150636352211e90602401602060405180830381865afa158015610632573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106569190610a7b565b6001600160a01b0316146106a25760405162461bcd60e51b81526020600482015260136024820152722737ba103a3432903a37b5b2b71037bbb732b960691b604482015260640161032c565b5f8181526003602052604081205442906106c09062093a8090610a54565b6106ca9190610a96565b9050838111156106d8578093505b505080806106e590610aa9565b9150506105c2565b5090505b92915050565b6106ff610770565b6001600160a01b0381166107645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161032c565b61076d816107c9565b50565b5f546001600160a01b031633146102755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161032c565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f818152600460205260408120546005546108339190610a96565b90505f811161088e5760405162461bcd60e51b815260206004820152602160248201527f4e6f207265776172647320617661696c61626c6520666f722074686973204e466044820152601560fa1b606482015260840161032c565b5f8281526003602090815260408083204290556004909152812080548392906108b8908490610a54565b909155505060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303815f875af115801561090b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061057491906109eb565b5f6020828403121561093f575f80fd5b5035919050565b5f8060208385031215610957575f80fd5b823567ffffffffffffffff8082111561096e575f80fd5b818501915085601f830112610981575f80fd5b81358181111561098f575f80fd5b8660208260051b85010111156109a3575f80fd5b60209290920196919550909350505050565b6001600160a01b038116811461076d575f80fd5b5f602082840312156109d9575f80fd5b81356109e4816109b5565b9392505050565b5f602082840312156109fb575f80fd5b815180151581146109e4575f80fd5b5f60208284031215610a1a575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b5f82610a4f57634e487b7160e01b5f52601260045260245ffd5b500490565b808201808211156106f1576106f1610a21565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215610a8b575f80fd5b81516109e4816109b5565b818103818111156106f1576106f1610a21565b5f60018201610aba57610aba610a21565b506001019056fea2646970667358221220613cf460c1ce290c8a5390b51c761727ba7da4ed2f913f4047a89b47c21bf2df64736f6c63430008150033000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000057cb16ed0620cdee0bbcd8e1bede99ec86186c86",
    "runtime_bytecode": "608060405234801561000f575f80fd5b50600436106100cb575f3560e01c80638da5cb5b11610088578063bade267b11610063578063bade267b1461019a578063d06fcba8146101ad578063f2fde38b146101c0578063f7c618c1146101d3575f80fd5b80638da5cb5b146101595780638e6f6b771461017d578063a2beb51014610187575f80fd5b80634978ea9d146100cf57806352049ace146100eb5780635312ea8e1461010a5780635685c4661461011f578063715018a61461013e5780638bdf67f214610146575b5f80fd5b6100d860055481565b6040519081526020015b60405180910390f35b6100d86100f936600461092f565b60036020525f908152604090205481565b61011d61011836600461092f565b6101e6565b005b6100d861012d36600461092f565b60046020525f908152604090205481565b61011d610264565b61011d61015436600461092f565b610277565b5f546001600160a01b03165b6040516001600160a01b0390911681526020016100e2565b6100d862093a8081565b61011d610195366004610946565b61040e565b6100d86101a8366004610946565b610579565b600254610165906001600160a01b031681565b61011d6101ce3660046109c9565b6106f7565b600154610165906001600160a01b031681565b6101ee610770565b60015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303815f875af115801561023c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061026091906109eb565b5050565b61026c610770565b6102755f6107c9565b565b61027f610770565b600254604080516318160ddd60e01b815290515f926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156102c6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102ea9190610a0a565b90505f81116103355760405162461bcd60e51b8152602060048201526012602482015271139bc81391951cc81b5a5b9d1959081e595d60721b60448201526064015b60405180910390fd5b6001546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303815f875af1158015610389573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ad91906109eb565b6103eb5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161032c565b6103f58183610a35565b60055f8282546104059190610a54565b90915550505050565b806104535760405162461bcd60e51b8152602060048201526015602482015274139bc81d1bdad95b8812511cc81c1c9bdd9a591959605a1b604482015260640161032c565b5f5b81811015610574575f83838381811061047057610470610a67565b6002546040516331a9108f60e11b8152602092909202939093013560048201819052935033926001600160a01b03169150636352211e90602401602060405180830381865afa1580156104c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104e99190610a7b565b6001600160a01b0316146105355760405162461bcd60e51b81526020600482015260136024820152722737ba103a3432903a37b5b2b71037bbb732b960691b604482015260640161032c565b5f8181526003602052604090205462093a80906105529042610a96565b11156105615761056181610818565b508061056c81610aa9565b915050610455565b505050565b5f816105bf5760405162461bcd60e51b8152602060048201526015602482015274139bc81d1bdad95b8812511cc81c1c9bdd9a591959605a1b604482015260640161032c565b5f805b838110156106ed575f8585838181106105dd576105dd610a67565b6002546040516331a9108f60e11b8152602092909202939093013560048201819052935033926001600160a01b03169150636352211e90602401602060405180830381865afa158015610632573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106569190610a7b565b6001600160a01b0316146106a25760405162461bcd60e51b81526020600482015260136024820152722737ba103a3432903a37b5b2b71037bbb732b960691b604482015260640161032c565b5f8181526003602052604081205442906106c09062093a8090610a54565b6106ca9190610a96565b9050838111156106d8578093505b505080806106e590610aa9565b9150506105c2565b5090505b92915050565b6106ff610770565b6001600160a01b0381166107645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161032c565b61076d816107c9565b50565b5f546001600160a01b031633146102755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161032c565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f818152600460205260408120546005546108339190610a96565b90505f811161088e5760405162461bcd60e51b815260206004820152602160248201527f4e6f207265776172647320617661696c61626c6520666f722074686973204e466044820152601560fa1b606482015260840161032c565b5f8281526003602090815260408083204290556004909152812080548392906108b8908490610a54565b909155505060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303815f875af115801561090b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061057491906109eb565b5f6020828403121561093f575f80fd5b5035919050565b5f8060208385031215610957575f80fd5b823567ffffffffffffffff8082111561096e575f80fd5b818501915085601f830112610981575f80fd5b81358181111561098f575f80fd5b8660208260051b85010111156109a3575f80fd5b60209290920196919550909350505050565b6001600160a01b038116811461076d575f80fd5b5f602082840312156109d9575f80fd5b81356109e4816109b5565b9392505050565b5f602082840312156109fb575f80fd5b815180151581146109e4575f80fd5b5f60208284031215610a1a575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b5f82610a4f57634e487b7160e01b5f52601260045260245ffd5b500490565b808201808211156106f1576106f1610a21565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215610a8b575f80fd5b81516109e4816109b5565b818103818111156106f1576106f1610a21565b5f60018201610aba57610aba610a21565b506001019056fea2646970667358221220613cf460c1ce290c8a5390b51c761727ba7da4ed2f913f4047a89b47c21bf2df64736f6c63430008150033",
    "contract_name": "RewardClaimer",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftToken\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"timeUntilNextClaimForWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"RewardClaimer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title RewardClaimer\\r\\n * @author 5thWeb Via WhiteLab3l\\r\\n * @notice A contract that allows holders of a specific ERC721 token to claim rewards in the form of an ERC20 token.\\r\\n */\\r\\ncontract RewardClaimer is Ownable {\\r\\n\\r\\n    IERC20 public rewardToken;\\r\\n    IERC721Enumerable public nftToken;\\r\\n\\r\\n    mapping(uint256 => uint256) public lastClaimed;\\r\\n    mapping(uint256 => uint256) public rewardsClaimed;\\r\\n\\r\\n    uint256 public rewardPerNFT;\\r\\n\\r\\n    uint256 public constant ONE_WEEK = 7 days;\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor that sets the addresses for the ERC20 and ERC721 tokens.\\r\\n     * @param _rewardToken Address of the ERC20 reward token.\\r\\n     * @param _nftToken Address of the ERC721 token.\\r\\n     */\\r\\n    constructor(address _rewardToken, address _nftToken) {\\r\\n        rewardToken = IERC20(_rewardToken);\\r\\n        nftToken = IERC721Enumerable(_nftToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows a user to claim rewards for specified NFTs.\\r\\n     * @param tokenIds An array of NFT token IDs owned by the caller.\\r\\n     */\\r\\n    function claimAllRewards(uint256[] calldata tokenIds) external {\\r\\n        require(tokenIds.length > 0, \\\"No token IDs provided\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            uint256 tokenId = tokenIds[i];\\r\\n            require(nftToken.ownerOf(tokenId) == msg.sender, \\\"Not the token owner\\\");\\r\\n            if (block.timestamp - lastClaimed[tokenId] > ONE_WEEK) {\\r\\n                _claimReward(tokenId);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to process the reward claim for a specific NFT.\\r\\n     * @param tokenId The ID of the NFT token.\\r\\n     */\\r\\n    function _claimReward(uint256 tokenId) internal {\\r\\n        uint256 pendingReward = rewardPerNFT - rewardsClaimed[tokenId];\\r\\n        require(pendingReward > 0, \\\"No rewards available for this NFT\\\");\\r\\n\\r\\n        lastClaimed[tokenId] = block.timestamp;\\r\\n        rewardsClaimed[tokenId] += pendingReward;\\r\\n\\r\\n        rewardToken.transfer(msg.sender, pendingReward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev View function to check the longest time remaining for the next claim across specified NFTs owned by the caller.\\r\\n     * @param tokenIds An array of NFT token IDs owned by the caller.\\r\\n     * @return The longest time remaining in seconds until the next claim is available.\\r\\n     */\\r\\n    function timeUntilNextClaimForWallet(uint256[] calldata tokenIds) external view returns (uint256) {\\r\\n        require(tokenIds.length > 0, \\\"No token IDs provided\\\");\\r\\n\\r\\n        uint256 longestWait = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            uint256 tokenId = tokenIds[i];\\r\\n            require(nftToken.ownerOf(tokenId) == msg.sender, \\\"Not the token owner\\\");\\r\\n\\r\\n            uint256 timeForThisToken = (lastClaimed[tokenId] + ONE_WEEK) - block.timestamp;\\r\\n\\r\\n            if (timeForThisToken > longestWait) {\\r\\n                longestWait = timeForThisToken;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return longestWait;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the owner to deposit rewards for distribution.\\r\\n     * @param amount The amount of ERC20 tokens to deposit.\\r\\n     */\\r\\n    function depositRewards(uint256 amount) external onlyOwner {\\r\\n        uint256 totalSupply = nftToken.totalSupply();\\r\\n        require(totalSupply > 0, \\\"No NFTs minted yet\\\");\\r\\n\\r\\n        require(rewardToken.transferFrom(msg.sender, address(this), amount), \\\"Transfer failed\\\");\\r\\n\\r\\n        // Distribute the deposited rewards among the existing NFTs\\r\\n        rewardPerNFT += amount / totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the owner to withdraw ERC20 tokens in case of an emergency.\\r\\n     * @param amount The amount of ERC20 tokens to withdraw.\\r\\n     */\\r\\n    function emergencyWithdraw(uint256 amount) external onlyOwner {\\r\\n        rewardToken.transfer(msg.sender, amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}