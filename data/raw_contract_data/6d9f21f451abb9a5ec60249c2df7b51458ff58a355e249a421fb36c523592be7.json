{
    "address": "0xfC5b4524F85D2f45997f2705B448d346c0a5eAc1",
    "tx_hash": "6d9f21f451abb9a5ec60249c2df7b51458ff58a355e249a421fb36c523592be7",
    "block_number": 18009842,
    "timestamp": 1693185851,
    "gas_used_in_creation": 1888373,
    "creation_bytecode": "6080604052601e600655601e60075560046008556004600955601e600a55601e600b55601e600c555f600d556009600a6200003b91906200032b565b6200004a9062030d4062000342565b600e556200005b6009600a6200032b565b6200006a9062030d4062000342565b600f556200007b6009600a6200032b565b620000899061138862000342565b6010556200009a6009600a6200032b565b620000a990620186a062000342565b6011556013805461ffff60a81b19169055348015620000c6575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600580546001600160a01b03191633179055620001276009600a6200032b565b62000136906298968062000342565b335f9081526001602081905260408220929092556003906200015f5f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff199687161790553081526003909352818320805485166001908117909155600554909116835291208054909216179055620001bd3390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620001f66009600a6200032b565b62000205906298968062000342565b60405190815260200160405180910390a36200035c565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200027057815f19048211156200025457620002546200021c565b808516156200026257918102915b93841c939080029062000235565b509250929050565b5f82620002885750600162000325565b816200029657505f62000325565b8160018114620002af5760028114620002ba57620002da565b600191505062000325565b60ff841115620002ce57620002ce6200021c565b50506001821b62000325565b5060208310610133831016604e8410600b8410161715620002ff575081810a62000325565b6200030b838362000230565b805f19048211156200032157620003216200021c565b0290505b92915050565b5f6200033b60ff84168362000278565b9392505050565b80820281158282048414176200032557620003256200021c565b611a55806200036a5f395ff3fe608060405260043610610129575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb1461034f578063bf474bed1461036e578063c9567bf914610383578063d34628cc14610397578063dd62ed3e146103b6578063fc76729c146103fa575f80fd5b8063751039fc146102bd5780637d1db4a5146102d15780638da5cb5b146102e65780638f9a55c01461030c57806395d89b4114610321575f80fd5b8063313ce567116100ee578063313ce5671461020257806331c2d8471461021d5780633bbac5791461023e57806370a0823114610275578063715018a6146102a9575f80fd5b806306fdde0314610134578063095ea7b31461017d5780630faee56f146101ac57806318160ddd146101cf57806323b872dd146101e3575f80fd5b3661013057005b5f80fd5b34801561013f575f80fd5b5060408051808201909152600f81526e524146464c4520474956454157415960881b60208201525b6040516101749190611564565b60405180910390f35b348015610188575f80fd5b5061019c6101973660046115d6565b61040e565b6040519015158152602001610174565b3480156101b7575f80fd5b506101c160115481565b604051908152602001610174565b3480156101da575f80fd5b506101c1610424565b3480156101ee575f80fd5b5061019c6101fd366004611600565b610443565b34801561020d575f80fd5b5060405160098152602001610174565b348015610228575f80fd5b5061023c610237366004611652565b6104aa565b005b348015610249575f80fd5b5061019c610258366004611712565b6001600160a01b03165f9081526004602052604090205460ff1690565b348015610280575f80fd5b506101c161028f366004611712565b6001600160a01b03165f9081526001602052604090205490565b3480156102b4575f80fd5b5061023c610544565b3480156102c8575f80fd5b5061023c6105b5565b3480156102dc575f80fd5b506101c1600e5481565b3480156102f1575f80fd5b505f546040516001600160a01b039091168152602001610174565b348015610317575f80fd5b506101c1600f5481565b34801561032c575f80fd5b50604080518082019091526006815265524146464c4560d01b6020820152610167565b34801561035a575f80fd5b5061019c6103693660046115d6565b610663565b348015610379575f80fd5b506101c160105481565b34801561038e575f80fd5b5061023c61066f565b3480156103a2575f80fd5b5061023c6103b1366004611652565b610a17565b3480156103c1575f80fd5b506101c16103d036600461172d565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b348015610405575f80fd5b5061023c610aa5565b5f61041a338484610ad9565b5060015b92915050565b5f6104316009600a611858565b61043e9062989680611866565b905090565b5f61044f848484610bfc565b6104a0843361049b856040518060600160405280602881526020016119f8602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906111e0565b610ad9565b5060019392505050565b5f546001600160a01b031633146104dc5760405162461bcd60e51b81526004016104d39061187d565b60405180910390fd5b5f5b8151811015610540575f60045f8484815181106104fd576104fd6118b2565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610538816118c6565b9150506104de565b5050565b5f546001600160a01b0316331461056d5760405162461bcd60e51b81526004016104d39061187d565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105de5760405162461bcd60e51b81526004016104d39061187d565b6105ea6009600a611858565b6105f79062989680611866565b600e556106066009600a611858565b6106139062989680611866565b600f557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106436009600a611858565b6106509062989680611866565b60405190815260200160405180910390a1565b5f61041a338484610bfc565b5f546001600160a01b031633146106985760405162461bcd60e51b81526004016104d39061187d565b601354600160a01b900460ff16156106f25760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104d3565b601280546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561073a90309061072d6009600a611858565b61049b9062989680611866565b60125f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561078a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107ae91906118de565b6001600160a01b031663c9c653963060125f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061083191906118de565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561087b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061089f91906118de565b601380546001600160a01b039283166001600160a01b03199091161790556012541663f305d71947306108e6816001600160a01b03165f9081526001602052604090205490565b5f806108f95f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561095f573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061098491906118f9565b505060135460125460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156109d9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109fd9190611924565b506013805462ff00ff60a01b19166201000160a01b179055565b5f546001600160a01b03163314610a405760405162461bcd60e51b81526004016104d39061187d565b5f5b815181101561054057600160045f848481518110610a6257610a626118b2565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610a9d816118c6565b915050610a42565b5f546001600160a01b03163314610ace5760405162461bcd60e51b81526004016104d39061187d565b610ad747611218565b565b6001600160a01b038316610b3b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104d3565b6001600160a01b038216610b9c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104d3565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610c605760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104d3565b6001600160a01b038216610cc25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104d3565b5f8111610d235760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104d3565b5f80546001600160a01b03858116911614801590610d4e57505f546001600160a01b03848116911614155b156110a3576001600160a01b0384165f9081526004602052604090205460ff16158015610d9357506001600160a01b0383165f9081526004602052604090205460ff16155b610d9b575f80fd5b6013546001600160a01b038581169116148015610dc657506012546001600160a01b03848116911614155b8015610dea57506001600160a01b0383165f9081526003602052604090205460ff16155b15610efe57610e1b6064610e15600a54600d5411610e0a57600654610e0e565b6008545b859061124f565b906112d4565b9050600e54821115610e6f5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104d3565b600f5482610e91856001600160a01b03165f9081526001602052604090205490565b610e9b9190611943565b1115610ee95760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104d3565b600d8054905f610ef8836118c6565b91905055505b6013546001600160a01b03848116911614801590610f3457506001600160a01b0383165f9081526003602052604090205460ff16155b15610fb357600f5482610f5b856001600160a01b03165f9081526001602052604090205490565b610f659190611943565b1115610fb35760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104d3565b6013546001600160a01b038481169116148015610fd957506001600160a01b0384163014155b15611006576110036064610e15600b54600d5411610ff957600754610e0e565b600954859061124f565b90505b305f90815260016020526040902054601354600160a81b900460ff1615801561103c57506013546001600160a01b038581169116145b80156110515750601354600160b01b900460ff165b801561105e575060105481115b801561106d5750600c54600d54115b156110a15761108f61108a8461108584601154611315565b611315565b611329565b47801561109f5761109f47611218565b505b505b801561111b57305f908152600160205260409020546110c29082611499565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111129085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461113d90836114f7565b6001600160a01b0385165f9081526001602052604090205561118061116283836114f7565b6001600160a01b0385165f9081526001602052604090205490611499565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6111c985856114f7565b60405190815260200160405180910390a350505050565b5f81848411156112035760405162461bcd60e51b81526004016104d39190611564565b505f61120f8486611956565b95945050505050565b6005546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015610540573d5f803e3d5ffd5b5f825f0361125e57505f61041e565b5f6112698385611866565b9050826112768583611969565b146112cd5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104d3565b9392505050565b5f6112cd83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611538565b5f81831161132357826112cd565b50919050565b6013805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061136f5761136f6118b2565b6001600160a01b03928316602091820292909201810191909152601254604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156113c6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113ea91906118de565b816001815181106113fd576113fd6118b2565b6001600160a01b0392831660209182029290920101526012546114239130911684610ad9565b60125460405163791ac94760e01b81526001600160a01b039091169063791ac9479061145b9085905f90869030904290600401611988565b5f604051808303815f87803b158015611472575f80fd5b505af1158015611484573d5f803e3d5ffd5b50506013805460ff60a81b1916905550505050565b5f806114a58385611943565b9050838110156112cd5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104d3565b5f6112cd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111e0565b5f81836115585760405162461bcd60e51b81526004016104d39190611564565b505f61120f8486611969565b5f6020808352835180828501525f5b8181101561158f57858101830151858201604001528201611573565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146115c3575f80fd5b50565b80356115d1816115af565b919050565b5f80604083850312156115e7575f80fd5b82356115f2816115af565b946020939093013593505050565b5f805f60608486031215611612575f80fd5b833561161d816115af565b9250602084013561162d816115af565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b5f6020808385031215611663575f80fd5b823567ffffffffffffffff8082111561167a575f80fd5b818501915085601f83011261168d575f80fd5b81358181111561169f5761169f61163e565b8060051b604051601f19603f830116810181811085821117156116c4576116c461163e565b6040529182528482019250838101850191888311156116e1575f80fd5b938501935b82851015611706576116f7856115c6565b845293850193928501926116e6565b98975050505050505050565b5f60208284031215611722575f80fd5b81356112cd816115af565b5f806040838503121561173e575f80fd5b8235611749816115af565b91506020830135611759816115af565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156117b257815f190482111561179857611798611764565b808516156117a557918102915b93841c939080029061177d565b509250929050565b5f826117c85750600161041e565b816117d457505f61041e565b81600181146117ea57600281146117f457611810565b600191505061041e565b60ff84111561180557611805611764565b50506001821b61041e565b5060208310610133831016604e8410600b8410161715611833575081810a61041e565b61183d8383611778565b805f190482111561185057611850611764565b029392505050565b5f6112cd60ff8416836117ba565b808202811582820484141761041e5761041e611764565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b5f600182016118d7576118d7611764565b5060010190565b5f602082840312156118ee575f80fd5b81516112cd816115af565b5f805f6060848603121561190b575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611934575f80fd5b815180151581146112cd575f80fd5b8082018082111561041e5761041e611764565b8181038181111561041e5761041e611764565b5f8261198357634e487b7160e01b5f52601260045260245ffd5b500490565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156119d65784516001600160a01b0316835293830193918301916001016119b1565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122083b8d33bc99044eabac2b170241efd7d23bde8de9a96a9a6ecf70d1acfbe84b464736f6c63430008150033",
    "runtime_bytecode": "608060405260043610610129575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb1461034f578063bf474bed1461036e578063c9567bf914610383578063d34628cc14610397578063dd62ed3e146103b6578063fc76729c146103fa575f80fd5b8063751039fc146102bd5780637d1db4a5146102d15780638da5cb5b146102e65780638f9a55c01461030c57806395d89b4114610321575f80fd5b8063313ce567116100ee578063313ce5671461020257806331c2d8471461021d5780633bbac5791461023e57806370a0823114610275578063715018a6146102a9575f80fd5b806306fdde0314610134578063095ea7b31461017d5780630faee56f146101ac57806318160ddd146101cf57806323b872dd146101e3575f80fd5b3661013057005b5f80fd5b34801561013f575f80fd5b5060408051808201909152600f81526e524146464c4520474956454157415960881b60208201525b6040516101749190611564565b60405180910390f35b348015610188575f80fd5b5061019c6101973660046115d6565b61040e565b6040519015158152602001610174565b3480156101b7575f80fd5b506101c160115481565b604051908152602001610174565b3480156101da575f80fd5b506101c1610424565b3480156101ee575f80fd5b5061019c6101fd366004611600565b610443565b34801561020d575f80fd5b5060405160098152602001610174565b348015610228575f80fd5b5061023c610237366004611652565b6104aa565b005b348015610249575f80fd5b5061019c610258366004611712565b6001600160a01b03165f9081526004602052604090205460ff1690565b348015610280575f80fd5b506101c161028f366004611712565b6001600160a01b03165f9081526001602052604090205490565b3480156102b4575f80fd5b5061023c610544565b3480156102c8575f80fd5b5061023c6105b5565b3480156102dc575f80fd5b506101c1600e5481565b3480156102f1575f80fd5b505f546040516001600160a01b039091168152602001610174565b348015610317575f80fd5b506101c1600f5481565b34801561032c575f80fd5b50604080518082019091526006815265524146464c4560d01b6020820152610167565b34801561035a575f80fd5b5061019c6103693660046115d6565b610663565b348015610379575f80fd5b506101c160105481565b34801561038e575f80fd5b5061023c61066f565b3480156103a2575f80fd5b5061023c6103b1366004611652565b610a17565b3480156103c1575f80fd5b506101c16103d036600461172d565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b348015610405575f80fd5b5061023c610aa5565b5f61041a338484610ad9565b5060015b92915050565b5f6104316009600a611858565b61043e9062989680611866565b905090565b5f61044f848484610bfc565b6104a0843361049b856040518060600160405280602881526020016119f8602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906111e0565b610ad9565b5060019392505050565b5f546001600160a01b031633146104dc5760405162461bcd60e51b81526004016104d39061187d565b60405180910390fd5b5f5b8151811015610540575f60045f8484815181106104fd576104fd6118b2565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610538816118c6565b9150506104de565b5050565b5f546001600160a01b0316331461056d5760405162461bcd60e51b81526004016104d39061187d565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105de5760405162461bcd60e51b81526004016104d39061187d565b6105ea6009600a611858565b6105f79062989680611866565b600e556106066009600a611858565b6106139062989680611866565b600f557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106436009600a611858565b6106509062989680611866565b60405190815260200160405180910390a1565b5f61041a338484610bfc565b5f546001600160a01b031633146106985760405162461bcd60e51b81526004016104d39061187d565b601354600160a01b900460ff16156106f25760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104d3565b601280546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561073a90309061072d6009600a611858565b61049b9062989680611866565b60125f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561078a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107ae91906118de565b6001600160a01b031663c9c653963060125f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061083191906118de565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561087b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061089f91906118de565b601380546001600160a01b039283166001600160a01b03199091161790556012541663f305d71947306108e6816001600160a01b03165f9081526001602052604090205490565b5f806108f95f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561095f573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061098491906118f9565b505060135460125460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156109d9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109fd9190611924565b506013805462ff00ff60a01b19166201000160a01b179055565b5f546001600160a01b03163314610a405760405162461bcd60e51b81526004016104d39061187d565b5f5b815181101561054057600160045f848481518110610a6257610a626118b2565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610a9d816118c6565b915050610a42565b5f546001600160a01b03163314610ace5760405162461bcd60e51b81526004016104d39061187d565b610ad747611218565b565b6001600160a01b038316610b3b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104d3565b6001600160a01b038216610b9c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104d3565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610c605760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104d3565b6001600160a01b038216610cc25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104d3565b5f8111610d235760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104d3565b5f80546001600160a01b03858116911614801590610d4e57505f546001600160a01b03848116911614155b156110a3576001600160a01b0384165f9081526004602052604090205460ff16158015610d9357506001600160a01b0383165f9081526004602052604090205460ff16155b610d9b575f80fd5b6013546001600160a01b038581169116148015610dc657506012546001600160a01b03848116911614155b8015610dea57506001600160a01b0383165f9081526003602052604090205460ff16155b15610efe57610e1b6064610e15600a54600d5411610e0a57600654610e0e565b6008545b859061124f565b906112d4565b9050600e54821115610e6f5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104d3565b600f5482610e91856001600160a01b03165f9081526001602052604090205490565b610e9b9190611943565b1115610ee95760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104d3565b600d8054905f610ef8836118c6565b91905055505b6013546001600160a01b03848116911614801590610f3457506001600160a01b0383165f9081526003602052604090205460ff16155b15610fb357600f5482610f5b856001600160a01b03165f9081526001602052604090205490565b610f659190611943565b1115610fb35760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104d3565b6013546001600160a01b038481169116148015610fd957506001600160a01b0384163014155b15611006576110036064610e15600b54600d5411610ff957600754610e0e565b600954859061124f565b90505b305f90815260016020526040902054601354600160a81b900460ff1615801561103c57506013546001600160a01b038581169116145b80156110515750601354600160b01b900460ff165b801561105e575060105481115b801561106d5750600c54600d54115b156110a15761108f61108a8461108584601154611315565b611315565b611329565b47801561109f5761109f47611218565b505b505b801561111b57305f908152600160205260409020546110c29082611499565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111129085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461113d90836114f7565b6001600160a01b0385165f9081526001602052604090205561118061116283836114f7565b6001600160a01b0385165f9081526001602052604090205490611499565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6111c985856114f7565b60405190815260200160405180910390a350505050565b5f81848411156112035760405162461bcd60e51b81526004016104d39190611564565b505f61120f8486611956565b95945050505050565b6005546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015610540573d5f803e3d5ffd5b5f825f0361125e57505f61041e565b5f6112698385611866565b9050826112768583611969565b146112cd5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104d3565b9392505050565b5f6112cd83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611538565b5f81831161132357826112cd565b50919050565b6013805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061136f5761136f6118b2565b6001600160a01b03928316602091820292909201810191909152601254604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156113c6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113ea91906118de565b816001815181106113fd576113fd6118b2565b6001600160a01b0392831660209182029290920101526012546114239130911684610ad9565b60125460405163791ac94760e01b81526001600160a01b039091169063791ac9479061145b9085905f90869030904290600401611988565b5f604051808303815f87803b158015611472575f80fd5b505af1158015611484573d5f803e3d5ffd5b50506013805460ff60a81b1916905550505050565b5f806114a58385611943565b9050838110156112cd5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104d3565b5f6112cd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111e0565b5f81836115585760405162461bcd60e51b81526004016104d39190611564565b505f61120f8486611969565b5f6020808352835180828501525f5b8181101561158f57858101830151858201604001528201611573565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146115c3575f80fd5b50565b80356115d1816115af565b919050565b5f80604083850312156115e7575f80fd5b82356115f2816115af565b946020939093013593505050565b5f805f60608486031215611612575f80fd5b833561161d816115af565b9250602084013561162d816115af565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b5f6020808385031215611663575f80fd5b823567ffffffffffffffff8082111561167a575f80fd5b818501915085601f83011261168d575f80fd5b81358181111561169f5761169f61163e565b8060051b604051601f19603f830116810181811085821117156116c4576116c461163e565b6040529182528482019250838101850191888311156116e1575f80fd5b938501935b82851015611706576116f7856115c6565b845293850193928501926116e6565b98975050505050505050565b5f60208284031215611722575f80fd5b81356112cd816115af565b5f806040838503121561173e575f80fd5b8235611749816115af565b91506020830135611759816115af565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156117b257815f190482111561179857611798611764565b808516156117a557918102915b93841c939080029061177d565b509250929050565b5f826117c85750600161041e565b816117d457505f61041e565b81600181146117ea57600281146117f457611810565b600191505061041e565b60ff84111561180557611805611764565b50506001821b61041e565b5060208310610133831016604e8410600b8410161715611833575081810a61041e565b61183d8383611778565b805f190482111561185057611850611764565b029392505050565b5f6112cd60ff8416836117ba565b808202811582820484141761041e5761041e611764565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b5f600182016118d7576118d7611764565b5060010190565b5f602082840312156118ee575f80fd5b81516112cd816115af565b5f805f6060848603121561190b575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611934575f80fd5b815180151581146112cd575f80fd5b8082018082111561041e5761041e611764565b8181038181111561041e5761041e611764565b5f8261198357634e487b7160e01b5f52601260045260245ffd5b500490565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156119d65784516001600160a01b0316835293830193918301916001016119b1565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122083b8d33bc99044eabac2b170241efd7d23bde8de9a96a9a6ecf70d1acfbe84b464736f6c63430008150033",
    "contract_name": "RAFFLE",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbot\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// Website: https://www.rafflecoin.xyz/\r\n// Twitter: https://twitter.com/RaffleERCGG\r\n// TG Portal: https://t.me/raffleportal\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract RAFFLE is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private bots;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax = 30;\r\n    uint256 private _initialSellTax = 30;\r\n    uint256 private _finalBuyTax = 4;\r\n    uint256 private _finalSellTax = 4;\r\n    uint256 private _reduceBuyTaxAt = 30;\r\n    uint256 private _reduceSellTaxAt = 30;\r\n    uint256 private _preventSwapBefore = 30;\r\n    uint256 private _buyCount = 0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 10_000_000 * 10**_decimals;\r\n    string private constant _name = unicode\"RAFFLE GIVEAWAY\";\r\n    string private constant _symbol = unicode\"RAFFLE\";\r\n    uint256 public _maxTxAmount = 200000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 200000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold = 5000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap = 100000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount = 0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            if (\r\n                from == uniswapV2Pair &&\r\n                to != address(uniswapV2Router) &&\r\n                !_isExcludedFromFee[to]\r\n            ) {\r\n                taxAmount = amount\r\n                    .mul(\r\n                        (_buyCount > _reduceBuyTaxAt)\r\n                            ? _finalBuyTax\r\n                            : _initialBuyTax\r\n                    )\r\n                    .div(100);\r\n\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(\r\n                    balanceOf(to) + amount <= _maxWalletSize,\r\n                    \"Exceeds the maxWalletSize.\"\r\n                );\r\n\r\n                _buyCount++;\r\n            }\r\n\r\n            if (to != uniswapV2Pair && !_isExcludedFromFee[to]) {\r\n                require(\r\n                    balanceOf(to) + amount <= _maxWalletSize,\r\n                    \"Exceeds the maxWalletSize.\"\r\n                );\r\n            }\r\n\r\n            if (to == uniswapV2Pair && from != address(this)) {\r\n                taxAmount = amount\r\n                    .mul(\r\n                        (_buyCount > _reduceSellTaxAt)\r\n                            ? _finalSellTax\r\n                            : _initialSellTax\r\n                    )\r\n                    .div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (\r\n                !inSwap &&\r\n                to == uniswapV2Pair &&\r\n                swapEnabled &&\r\n                contractTokenBalance > _taxSwapThreshold &&\r\n                _buyCount > _preventSwapBefore\r\n            ) {\r\n                swapTokensForEth(\r\n                    min(amount, min(contractTokenBalance, _maxTaxSwap))\r\n                );\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function recoverEmergency() external onlyOwner {\r\n        sendETHToFee(address(this).balance);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function addBots(address[] memory bots_) public onlyOwner {\r\n        for (uint256 i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function delBots(address[] memory notbot) public onlyOwner {\r\n        for (uint256 i = 0; i < notbot.length; i++) {\r\n            bots[notbot[i]] = false;\r\n        }\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool) {\r\n        return bots[a];\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                uniswapV2Router.WETH()\r\n            );\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
    "etherscan_verified": true
}