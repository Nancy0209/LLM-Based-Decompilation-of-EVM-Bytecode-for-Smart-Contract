{
    "address": "0x8bD394Bd4b52207Df7a12F4a3EBF089e3d632826",
    "tx_hash": "0bee70a59a95b3307db94451f2add9a70fbd97b79a06e888431d5f280ac9dcd0",
    "block_number": 18006897,
    "timestamp": 1693150151,
    "gas_used_in_creation": 4700122,
    "creation_bytecode": "6080604052620000126009600a620004d4565b620000259066017e9d8602b400620004ec565b60018181556007805461ffff60a01b1916600160a81b179055600a55620186a09062000054906103e8620004ec565b62000060919062000506565b600b55620186a0600154600a620000789190620004ec565b62000084919062000506565b600c556000600d819055600e8190556103e8600f5560108190556105dc6011556107d060125560135561271060148190556015805473254c5ade807e57c933c6c32b752ac09c8c8cd1d26001600160a01b031991821681179092556016805482168317905560178054909116909117905560015462000105906064620004ec565b62000111919062000506565b6018556127106001546064620001289190620004ec565b62000134919062000506565b60195561271060015460646200014b9190620004ec565b62000157919062000506565b601a553480156200016757600080fd5b50600080546001600160a01b031916331781556040805163c45a015560e01b81529051737a250d5630b4cf539739df2c5dacb4c659f2488d9291839163c45a0155916004808201926020929091908290030181865afa158015620001cf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f5919062000529565b6001600160a01b031663c9c6539630846001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000243573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000269919062000529565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015620002b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002dd919062000529565b600680546001600160a01b038581166001600160a01b031992831617909255600780548484169216919091179055306000908152600460209081526040808320805460ff19908116600190811790925560175486168552828520805482168317905560165486168552828520805482168317905560155490951684528184208054861682179055338085528285208054909616821790955554600283528184208190559051908152939450919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505062000554565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000416578160001904821115620003fa57620003fa620003bf565b808516156200040857918102915b93841c9390800290620003da565b509250929050565b6000826200042f57506001620004ce565b816200043e57506000620004ce565b8160018114620004575760028114620004625762000482565b6001915050620004ce565b60ff841115620004765762000476620003bf565b50506001821b620004ce565b5060208310610133831016604e8410600b8410161715620004a7575081810a620004ce565b620004b38383620003d5565b8060001904821115620004ca57620004ca620003bf565b0290505b92915050565b6000620004e560ff8416836200041e565b9392505050565b8082028115828204841417620004ce57620004ce620003bf565b6000826200052457634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156200053c57600080fd5b81516001600160a01b0381168114620004e557600080fd5b611e5980620005646000396000f3fe6080604052600436106101855760003560e01c80637cca52fe116100d15780639cc353511161008a578063a9059cbb11610064578063a9059cbb146104ab578063cb7f97d7146104cb578063dd62ed3e146104eb578063f2fde38b1461053157600080fd5b80639cc353511461044b5780639d8740cb1461046b578063a8aa1b311461048b57600080fd5b80637cca52fe1461037d5780637d1db4a51461039357806382f6a7c3146103a9578063893d20e8146103c95780639213c358146103fb57806395d89b411461041b57600080fd5b80632f54bf6e1161013e57806348ff2b8b1161011857806348ff2b8b146102fc57806351bc3c851461031c57806370a082311461033157806378109e541461036757600080fd5b80632f54bf6e14610281578063313ce567146102b05780633f4218e0146102cc57600080fd5b806306fdde0314610191578063095ea7b3146101d757806317e084001461020757806318160ddd1461022957806323b872dd1461024c578063293230b81461026c57600080fd5b3661018c57005b600080fd5b34801561019d57600080fd5b5060408051808201909152600b81526a424947204348554e47555360a81b60208201525b6040516101ce91906119a2565b60405180910390f35b3480156101e357600080fd5b506101f76101f2366004611a08565b610551565b60405190151581526020016101ce565b34801561021357600080fd5b50610227610222366004611a42565b610568565b005b34801561023557600080fd5b5061023e610612565b6040519081526020016101ce565b34801561025857600080fd5b506101f7610267366004611ac8565b610683565b34801561027857600080fd5b506102276106ed565b34801561028d57600080fd5b506101f761029c366004611b09565b6000546001600160a01b0391821691161490565b3480156102bc57600080fd5b50604051600981526020016101ce565b3480156102d857600080fd5b506101f76102e7366004611b09565b60046020526000908152604090205460ff1681565b34801561030857600080fd5b50610227610317366004611b26565b61072c565b34801561032857600080fd5b50610227610781565b34801561033d57600080fd5b5061023e61034c366004611b09565b6001600160a01b031660009081526002602052604090205490565b34801561037357600080fd5b5061023e601a5481565b34801561038957600080fd5b5061023e60195481565b34801561039f57600080fd5b5061023e60185481565b3480156103b557600080fd5b506102276103c4366004611a08565b6107b8565b3480156103d557600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101ce565b34801561040757600080fd5b50610227610416366004611b5f565b6108df565b34801561042757600080fd5b506040805180820190915260078152664348554e47555360c81b60208201526101c1565b34801561045757600080fd5b50610227610466366004611b9f565b610985565b34801561047757600080fd5b50610227610486366004611b9f565b610aba565b34801561049757600080fd5b506007546103e3906001600160a01b031681565b3480156104b757600080fd5b506101f76104c6366004611a08565b610b20565b3480156104d757600080fd5b506102276104e6366004611bcb565b610b2d565b3480156104f757600080fd5b5061023e610506366004611c17565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b34801561053d57600080fd5b5061022761054c366004611b09565b610c24565b600061055e338484610ca2565b5060015b92915050565b6000546001600160a01b0316331461059b5760405162461bcd60e51b815260040161059290611c45565b60405180910390fd5b60005b8281101561060c5781600560008686858181106105bd576105bd611c65565b90506020020160208101906105d29190611b09565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061060481611c91565b91505061059e565b50505050565b60026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b5461dead60009081527f6a9609baa168169acaea398c4407efea4be641bb08e21e88806d9836fd9333cc54600154919261067e9290916106789190610dc6565b90610dc6565b905090565b6000610690848484610dd2565b6106e284336106dd85604051806060016040528060288152602001611dfc602891396001600160a01b038a166000908152600360209081526040808320338452909152902054919061131f565b610ca2565b5060015b9392505050565b6000546001600160a01b031633146107175760405162461bcd60e51b815260040161059290611c45565b6007805460ff60a01b1916600160a01b179055565b6000546001600160a01b031633146107565760405162461bcd60e51b815260040161059290611c45565b6001600160a01b03919091166000908152600460205260409020805460ff1916911515919091179055565b6000546001600160a01b031633146107ab5760405162461bcd60e51b815260040161059290611c45565b6107b6600b5461134b565b565b6000546001600160a01b031633146107e25760405162461bcd60e51b815260040161059290611c45565b6040516370a0823160e01b8152306004820152600090610866906064906108609085906001600160a01b038816906370a0823190602401602060405180830381865afa158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190611caa565b906114c8565b906114d4565b60155460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810183905291925084169063a9059cbb906044016020604051808303816000875af11580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c9190611cc3565b6000546001600160a01b031633146109095760405162461bcd60e51b815260040161059290611c45565b601680546001600160a01b039485166001600160a01b031991821681179092556017805494861694821685179055601580549390951692168217909355600092835260046020526040808420805460ff199081166001908117909255938552818520805485168217905591845290922080549091169091179055565b6000546001600160a01b031633146109af5760405162461bcd60e51b815260040161059290611c45565b60006109cc612710610860866001546114c890919063ffffffff16565b905060006109eb612710610860866001546114c890919063ffffffff16565b90506000610a0a612710610860866001546114c890919063ffffffff16565b60188490556019839055601a81905590506000610a306103e8610860600561085a610612565b9050808410158015610a425750808310155b8015610a4e5750808210155b610ab15760405162461bcd60e51b815260206004820152602e60248201527f4d61782054587320616e64204d61782057616c6c65742063616e6e6f7420626560448201526d206c657373207468616e202e352560901b6064820152608401610592565b50505050505050565b6000546001600160a01b03163314610ae45760405162461bcd60e51b815260040161059290611c45565b600a839055600154610aff90620186a09061086090856114c8565b600b55600154610b1890620186a09061086090846114c8565b600c55505050565b600061055e338484610dd2565b6000546001600160a01b03163314610b575760405162461bcd60e51b815260040161059290611c45565b600d879055600e8690556010859055600f849055601183905560128290556013819055601454610b889060016114d4565b60115411158015610ba85750601454610ba29060016114d4565b60125411155b8015610bc35750601454610bbd9060016114d4565b60135411155b610ab15760405162461bcd60e51b815260206004820152602c60248201527f746f74616c46656520616e642073656c6c4665652063616e6e6f74206265206d60448201526b6f7265207468616e2032302560a01b6064820152608401610592565b6000546001600160a01b03163314610c4e5760405162461bcd60e51b815260040161059290611c45565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc6861639060200160405180910390a150565b6001600160a01b038316610d045760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610592565b6001600160a01b038216610d655760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610592565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006106e68284611ce0565b6001600160a01b038316610e365760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610592565b6001600160a01b038216610e985760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610592565b6001600160a01b038316600090815260026020526040902054811115610f1a5760405162461bcd60e51b815260206004820152603160248201527f596f752061726520747279696e6720746f207472616e73666572206d6f7265206044820152707468616e20796f75722062616c616e636560781b6064820152608401610592565b6001600160a01b03831660009081526004602052604090205460ff16158015610f5c57506001600160a01b03821660009081526004602052604090205460ff16155b15610fab57600754600160a01b900460ff16610fab5760405162461bcd60e51b815260206004820152600e60248201526d1d1c98591a5b99d05b1b1bddd95960921b6044820152606401610592565b6001600160a01b03831660009081526004602052604090205460ff16158015610fed57506001600160a01b03821660009081526004602052604090205460ff16155b801561100757506007546001600160a01b03838116911614155b801561101e57506001600160a01b03821661dead14155b1561109757601a546001600160a01b03831660009081526002602052604090205461104990836114e0565b11156110975760405162461bcd60e51b815260206004820152601e60248201527f45786365656473206d6178696d756d2077616c6c657420616d6f756e742e00006044820152606401610592565b6007546001600160a01b0384811691161461113857601954811115806110d557506001600160a01b03831660009081526004602052604090205460ff165b806110f857506001600160a01b03821660009081526004602052604090205460ff165b6111385760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b6044820152606401610592565b6018548111158061116157506001600160a01b03831660009081526004602052604090205460ff165b8061118457506001600160a01b03821660009081526004602052604090205460ff165b6111c45760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b6044820152606401610592565b6007546001600160a01b0383811691161480156111fa57506001600160a01b03831660009081526004602052604090205460ff16155b15611218576001600860008282546112129190611cf3565b90915550505b6112238383836114ec565b1561123957611233600b5461134b565b60006008555b6001600160a01b03831660009081526002602052604090205461125c9082610dc6565b6001600160a01b03841660009081526002602052604081209190915561128284846115a6565b61128c5781611297565b6112978484846115ec565b6001600160a01b0384166000908152600260205260409020549091506112bd90826114e0565b6001600160a01b0380851660008181526002602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906113119085815260200190565b60405180910390a350505050565b600081848411156113435760405162461bcd60e51b815260040161059291906119a2565b505050900390565b6009805460ff19166001908117909155600f54600e54600d546000936113859360029361085a93919261137f9283916114e0565b906114e0565b905060006113a282610860600d54866114c890919063ffffffff16565b905060006113b08483610dc6565b9050476113bc826116f3565b60006113c84783610dc6565b905060006113eb6113e4600d5488610dc690919063ffffffff16565b83906114d4565b90506000611404600d54836114c890919063ffffffff16565b9050801561141657611416868261184d565b600e5460009061142b9061085a8560026114c8565b9050801561146f576016546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561146d573d6000803e3d6000fd5b505b4780156114b2576015546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156114b0573d6000803e3d6000fd5b505b50506009805460ff191690555050505050505050565b60006106e68284611d06565b60006106e68284611d1d565b60006106e68284611cf3565b600c54600b543060009081526002602052604081205460095491938510159211159060ff161580156115275750600754600160a81b900460ff165b801561153c5750600754600160a01b900460ff165b80156115455750815b801561156a57506001600160a01b03861660009081526004602052604090205460ff16155b801561158357506007546001600160a01b038681169116145b80156115935750600a5460085410155b801561159c5750805b9695505050505050565b6001600160a01b03821660009081526004602052604081205460ff161580156106e65750506001600160a01b031660009081526004602052604090205460ff1615919050565b6000806115f98585611901565b11156116ec57600061161c61160e8686611901565b60145461085a9086906114d4565b3060009081526002602052604090205490915061163990826114e0565b30600081815260026020526040908190209290925590516001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061168a9085815260200190565b60405180910390a360006010541180156116ae57506010546116ac8686611901565b115b156116da576116da3061dead6116d560105461085a601454896114d490919063ffffffff16565b610dd2565b6116e48382610dc6565b9150506106e6565b5092915050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061172857611728611c65565b6001600160a01b03928316602091820292909201810191909152600654604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a59190611d3f565b816001815181106117b8576117b8611c65565b6001600160a01b0392831660209182029290920101526006546117de9130911684610ca2565b60065460405163791ac94760e01b81526001600160a01b039091169063791ac94790611817908590600090869030904290600401611d5c565b600060405180830381600087803b15801561183157600080fd5b505af1158015611845573d6000803e3d6000fd5b505050505050565b6006546118659030906001600160a01b031684610ca2565b60065460175460405163f305d71960e01b81523060048201526024810185905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af11580156118d5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906118fa9190611dcd565b5050505050565b6001600160a01b03821660009081526005602052604081205460ff168061194057506001600160a01b03821660009081526005602052604090205460ff165b1561195a57601454611953906064610dc6565b9050610562565b6007546001600160a01b03908116908316036119795750601254610562565b6007546001600160a01b03908116908416036119985750601154610562565b5060135492915050565b600060208083528351808285015260005b818110156119cf578581018301518582016040015282016119b3565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611a0557600080fd5b50565b60008060408385031215611a1b57600080fd5b8235611a26816119f0565b946020939093013593505050565b8015158114611a0557600080fd5b600080600060408486031215611a5757600080fd5b833567ffffffffffffffff80821115611a6f57600080fd5b818601915086601f830112611a8357600080fd5b813581811115611a9257600080fd5b8760208260051b8501011115611aa757600080fd5b60209283019550935050840135611abd81611a34565b809150509250925092565b600080600060608486031215611add57600080fd5b8335611ae8816119f0565b92506020840135611af8816119f0565b929592945050506040919091013590565b600060208284031215611b1b57600080fd5b81356106e6816119f0565b60008060408385031215611b3957600080fd5b8235611b44816119f0565b91506020830135611b5481611a34565b809150509250929050565b600080600060608486031215611b7457600080fd5b8335611b7f816119f0565b92506020840135611b8f816119f0565b91506040840135611abd816119f0565b600080600060608486031215611bb457600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a031215611be657600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b60008060408385031215611c2a57600080fd5b8235611c35816119f0565b91506020830135611b54816119f0565b60208082526006908201526510a7aba722a960d11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611ca357611ca3611c7b565b5060010190565b600060208284031215611cbc57600080fd5b5051919050565b600060208284031215611cd557600080fd5b81516106e681611a34565b8181038181111561056257610562611c7b565b8082018082111561056257610562611c7b565b808202811582820484141761056257610562611c7b565b600082611d3a57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611d5157600080fd5b81516106e6816119f0565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611dac5784516001600160a01b031683529383019391830191600101611d87565b50506001600160a01b03969096166060850152505050608001529392505050565b600080600060608486031215611de257600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220cad0d999bab33c790f6c003301d5d1924db0a0dc1da1969d67bf801e91e9a65664736f6c63430008130033",
    "runtime_bytecode": "6080604052600436106101855760003560e01c80637cca52fe116100d15780639cc353511161008a578063a9059cbb11610064578063a9059cbb146104ab578063cb7f97d7146104cb578063dd62ed3e146104eb578063f2fde38b1461053157600080fd5b80639cc353511461044b5780639d8740cb1461046b578063a8aa1b311461048b57600080fd5b80637cca52fe1461037d5780637d1db4a51461039357806382f6a7c3146103a9578063893d20e8146103c95780639213c358146103fb57806395d89b411461041b57600080fd5b80632f54bf6e1161013e57806348ff2b8b1161011857806348ff2b8b146102fc57806351bc3c851461031c57806370a082311461033157806378109e541461036757600080fd5b80632f54bf6e14610281578063313ce567146102b05780633f4218e0146102cc57600080fd5b806306fdde0314610191578063095ea7b3146101d757806317e084001461020757806318160ddd1461022957806323b872dd1461024c578063293230b81461026c57600080fd5b3661018c57005b600080fd5b34801561019d57600080fd5b5060408051808201909152600b81526a424947204348554e47555360a81b60208201525b6040516101ce91906119a2565b60405180910390f35b3480156101e357600080fd5b506101f76101f2366004611a08565b610551565b60405190151581526020016101ce565b34801561021357600080fd5b50610227610222366004611a42565b610568565b005b34801561023557600080fd5b5061023e610612565b6040519081526020016101ce565b34801561025857600080fd5b506101f7610267366004611ac8565b610683565b34801561027857600080fd5b506102276106ed565b34801561028d57600080fd5b506101f761029c366004611b09565b6000546001600160a01b0391821691161490565b3480156102bc57600080fd5b50604051600981526020016101ce565b3480156102d857600080fd5b506101f76102e7366004611b09565b60046020526000908152604090205460ff1681565b34801561030857600080fd5b50610227610317366004611b26565b61072c565b34801561032857600080fd5b50610227610781565b34801561033d57600080fd5b5061023e61034c366004611b09565b6001600160a01b031660009081526002602052604090205490565b34801561037357600080fd5b5061023e601a5481565b34801561038957600080fd5b5061023e60195481565b34801561039f57600080fd5b5061023e60185481565b3480156103b557600080fd5b506102276103c4366004611a08565b6107b8565b3480156103d557600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101ce565b34801561040757600080fd5b50610227610416366004611b5f565b6108df565b34801561042757600080fd5b506040805180820190915260078152664348554e47555360c81b60208201526101c1565b34801561045757600080fd5b50610227610466366004611b9f565b610985565b34801561047757600080fd5b50610227610486366004611b9f565b610aba565b34801561049757600080fd5b506007546103e3906001600160a01b031681565b3480156104b757600080fd5b506101f76104c6366004611a08565b610b20565b3480156104d757600080fd5b506102276104e6366004611bcb565b610b2d565b3480156104f757600080fd5b5061023e610506366004611c17565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b34801561053d57600080fd5b5061022761054c366004611b09565b610c24565b600061055e338484610ca2565b5060015b92915050565b6000546001600160a01b0316331461059b5760405162461bcd60e51b815260040161059290611c45565b60405180910390fd5b60005b8281101561060c5781600560008686858181106105bd576105bd611c65565b90506020020160208101906105d29190611b09565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061060481611c91565b91505061059e565b50505050565b60026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b5461dead60009081527f6a9609baa168169acaea398c4407efea4be641bb08e21e88806d9836fd9333cc54600154919261067e9290916106789190610dc6565b90610dc6565b905090565b6000610690848484610dd2565b6106e284336106dd85604051806060016040528060288152602001611dfc602891396001600160a01b038a166000908152600360209081526040808320338452909152902054919061131f565b610ca2565b5060015b9392505050565b6000546001600160a01b031633146107175760405162461bcd60e51b815260040161059290611c45565b6007805460ff60a01b1916600160a01b179055565b6000546001600160a01b031633146107565760405162461bcd60e51b815260040161059290611c45565b6001600160a01b03919091166000908152600460205260409020805460ff1916911515919091179055565b6000546001600160a01b031633146107ab5760405162461bcd60e51b815260040161059290611c45565b6107b6600b5461134b565b565b6000546001600160a01b031633146107e25760405162461bcd60e51b815260040161059290611c45565b6040516370a0823160e01b8152306004820152600090610866906064906108609085906001600160a01b038816906370a0823190602401602060405180830381865afa158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190611caa565b906114c8565b906114d4565b60155460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810183905291925084169063a9059cbb906044016020604051808303816000875af11580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c9190611cc3565b6000546001600160a01b031633146109095760405162461bcd60e51b815260040161059290611c45565b601680546001600160a01b039485166001600160a01b031991821681179092556017805494861694821685179055601580549390951692168217909355600092835260046020526040808420805460ff199081166001908117909255938552818520805485168217905591845290922080549091169091179055565b6000546001600160a01b031633146109af5760405162461bcd60e51b815260040161059290611c45565b60006109cc612710610860866001546114c890919063ffffffff16565b905060006109eb612710610860866001546114c890919063ffffffff16565b90506000610a0a612710610860866001546114c890919063ffffffff16565b60188490556019839055601a81905590506000610a306103e8610860600561085a610612565b9050808410158015610a425750808310155b8015610a4e5750808210155b610ab15760405162461bcd60e51b815260206004820152602e60248201527f4d61782054587320616e64204d61782057616c6c65742063616e6e6f7420626560448201526d206c657373207468616e202e352560901b6064820152608401610592565b50505050505050565b6000546001600160a01b03163314610ae45760405162461bcd60e51b815260040161059290611c45565b600a839055600154610aff90620186a09061086090856114c8565b600b55600154610b1890620186a09061086090846114c8565b600c55505050565b600061055e338484610dd2565b6000546001600160a01b03163314610b575760405162461bcd60e51b815260040161059290611c45565b600d879055600e8690556010859055600f849055601183905560128290556013819055601454610b889060016114d4565b60115411158015610ba85750601454610ba29060016114d4565b60125411155b8015610bc35750601454610bbd9060016114d4565b60135411155b610ab15760405162461bcd60e51b815260206004820152602c60248201527f746f74616c46656520616e642073656c6c4665652063616e6e6f74206265206d60448201526b6f7265207468616e2032302560a01b6064820152608401610592565b6000546001600160a01b03163314610c4e5760405162461bcd60e51b815260040161059290611c45565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc6861639060200160405180910390a150565b6001600160a01b038316610d045760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610592565b6001600160a01b038216610d655760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610592565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006106e68284611ce0565b6001600160a01b038316610e365760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610592565b6001600160a01b038216610e985760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610592565b6001600160a01b038316600090815260026020526040902054811115610f1a5760405162461bcd60e51b815260206004820152603160248201527f596f752061726520747279696e6720746f207472616e73666572206d6f7265206044820152707468616e20796f75722062616c616e636560781b6064820152608401610592565b6001600160a01b03831660009081526004602052604090205460ff16158015610f5c57506001600160a01b03821660009081526004602052604090205460ff16155b15610fab57600754600160a01b900460ff16610fab5760405162461bcd60e51b815260206004820152600e60248201526d1d1c98591a5b99d05b1b1bddd95960921b6044820152606401610592565b6001600160a01b03831660009081526004602052604090205460ff16158015610fed57506001600160a01b03821660009081526004602052604090205460ff16155b801561100757506007546001600160a01b03838116911614155b801561101e57506001600160a01b03821661dead14155b1561109757601a546001600160a01b03831660009081526002602052604090205461104990836114e0565b11156110975760405162461bcd60e51b815260206004820152601e60248201527f45786365656473206d6178696d756d2077616c6c657420616d6f756e742e00006044820152606401610592565b6007546001600160a01b0384811691161461113857601954811115806110d557506001600160a01b03831660009081526004602052604090205460ff165b806110f857506001600160a01b03821660009081526004602052604090205460ff165b6111385760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b6044820152606401610592565b6018548111158061116157506001600160a01b03831660009081526004602052604090205460ff165b8061118457506001600160a01b03821660009081526004602052604090205460ff165b6111c45760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b6044820152606401610592565b6007546001600160a01b0383811691161480156111fa57506001600160a01b03831660009081526004602052604090205460ff16155b15611218576001600860008282546112129190611cf3565b90915550505b6112238383836114ec565b1561123957611233600b5461134b565b60006008555b6001600160a01b03831660009081526002602052604090205461125c9082610dc6565b6001600160a01b03841660009081526002602052604081209190915561128284846115a6565b61128c5781611297565b6112978484846115ec565b6001600160a01b0384166000908152600260205260409020549091506112bd90826114e0565b6001600160a01b0380851660008181526002602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906113119085815260200190565b60405180910390a350505050565b600081848411156113435760405162461bcd60e51b815260040161059291906119a2565b505050900390565b6009805460ff19166001908117909155600f54600e54600d546000936113859360029361085a93919261137f9283916114e0565b906114e0565b905060006113a282610860600d54866114c890919063ffffffff16565b905060006113b08483610dc6565b9050476113bc826116f3565b60006113c84783610dc6565b905060006113eb6113e4600d5488610dc690919063ffffffff16565b83906114d4565b90506000611404600d54836114c890919063ffffffff16565b9050801561141657611416868261184d565b600e5460009061142b9061085a8560026114c8565b9050801561146f576016546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561146d573d6000803e3d6000fd5b505b4780156114b2576015546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156114b0573d6000803e3d6000fd5b505b50506009805460ff191690555050505050505050565b60006106e68284611d06565b60006106e68284611d1d565b60006106e68284611cf3565b600c54600b543060009081526002602052604081205460095491938510159211159060ff161580156115275750600754600160a81b900460ff165b801561153c5750600754600160a01b900460ff165b80156115455750815b801561156a57506001600160a01b03861660009081526004602052604090205460ff16155b801561158357506007546001600160a01b038681169116145b80156115935750600a5460085410155b801561159c5750805b9695505050505050565b6001600160a01b03821660009081526004602052604081205460ff161580156106e65750506001600160a01b031660009081526004602052604090205460ff1615919050565b6000806115f98585611901565b11156116ec57600061161c61160e8686611901565b60145461085a9086906114d4565b3060009081526002602052604090205490915061163990826114e0565b30600081815260026020526040908190209290925590516001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061168a9085815260200190565b60405180910390a360006010541180156116ae57506010546116ac8686611901565b115b156116da576116da3061dead6116d560105461085a601454896114d490919063ffffffff16565b610dd2565b6116e48382610dc6565b9150506106e6565b5092915050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061172857611728611c65565b6001600160a01b03928316602091820292909201810191909152600654604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a59190611d3f565b816001815181106117b8576117b8611c65565b6001600160a01b0392831660209182029290920101526006546117de9130911684610ca2565b60065460405163791ac94760e01b81526001600160a01b039091169063791ac94790611817908590600090869030904290600401611d5c565b600060405180830381600087803b15801561183157600080fd5b505af1158015611845573d6000803e3d6000fd5b505050505050565b6006546118659030906001600160a01b031684610ca2565b60065460175460405163f305d71960e01b81523060048201526024810185905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af11580156118d5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906118fa9190611dcd565b5050505050565b6001600160a01b03821660009081526005602052604081205460ff168061194057506001600160a01b03821660009081526005602052604090205460ff165b1561195a57601454611953906064610dc6565b9050610562565b6007546001600160a01b03908116908316036119795750601254610562565b6007546001600160a01b03908116908416036119985750601154610562565b5060135492915050565b600060208083528351808285015260005b818110156119cf578581018301518582016040015282016119b3565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611a0557600080fd5b50565b60008060408385031215611a1b57600080fd5b8235611a26816119f0565b946020939093013593505050565b8015158114611a0557600080fd5b600080600060408486031215611a5757600080fd5b833567ffffffffffffffff80821115611a6f57600080fd5b818601915086601f830112611a8357600080fd5b813581811115611a9257600080fd5b8760208260051b8501011115611aa757600080fd5b60209283019550935050840135611abd81611a34565b809150509250925092565b600080600060608486031215611add57600080fd5b8335611ae8816119f0565b92506020840135611af8816119f0565b929592945050506040919091013590565b600060208284031215611b1b57600080fd5b81356106e6816119f0565b60008060408385031215611b3957600080fd5b8235611b44816119f0565b91506020830135611b5481611a34565b809150509250929050565b600080600060608486031215611b7457600080fd5b8335611b7f816119f0565b92506020840135611b8f816119f0565b91506040840135611abd816119f0565b600080600060608486031215611bb457600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a031215611be657600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b60008060408385031215611c2a57600080fd5b8235611c35816119f0565b91506020830135611b54816119f0565b60208082526006908201526510a7aba722a960d11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611ca357611ca3611c7b565b5060010190565b600060208284031215611cbc57600080fd5b5051919050565b600060208284031215611cd557600080fd5b81516106e681611a34565b8181038181111561056257610562611c7b565b8082018082111561056257610562611c7b565b808202811582820484141761056257610562611c7b565b600082611d3a57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611d5157600080fd5b81516106e6816119f0565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611dac5784516001600160a01b031683529383019391830191600101611d87565b50506001600160a01b03969096166060850152505050608001529392505050565b600080600060608486031215611de257600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220cad0d999bab33c790f6c003301d5d1924db0a0dc1da1969d67bf801e91e9a65664736f6c63430008130033",
    "contract_name": "BIGCHUNGUS",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"rescuesERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setContractSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_development\",\"type\":\"address\"}],\"name\":\"setInternalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"}],\"name\":\"setTransactionLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setTransactionRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setisExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setisbribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"gus.sol\": {\r\n      \"content\": \"/**\\r\\n\\r\\n\\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2003\u2003\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2591\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\\r\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2003\u2003\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\\r\\n\\r\\ntelegram: https://t.me/bigchungusERC\\r\\n\\r\\nWebsite: https://chungus.gg \\r\\n\\r\\nTwitter: https://x.com/bigchungustoken\\r\\n\\r\\nGame: https://chungus.gg/sfhggames/wgame/\\r\\n\\r\\n\u2800\u2800\u2800\u2800\u2800\u28e7\u2800\u2800\u2800\u2800\u2800\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28e7\u2800\u2800\u2800\u28b0\u287f\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u285f\u2846\u2800\u2800\u28ff\u2847\u28bb\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u2800\u28ff\u2800\u28b0\u28ff\u2847\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u2844\u28b8\u2800\u28b8\u28ff\u2847\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u2847\u28b8\u2844\u2838\u28ff\u2847\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28b8\u2845\u2800\u28ff\u28a0\u284f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28ff\u28e5\u28fe\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u287f\u287f\u28ff\u28ff\u287f\u2845\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2809\u2800\u2809\u2859\u2894\u281b\u28df\u288b\u2826\u28b5\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28c4\u2800\u2800\u2801\u28ff\u28ef\u2865\u2803\u2800\u28b3\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u28ff\u2847\u2800\u2800\u2800\u2810\u2820\u280a\u2880\u2800\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2808\u2801\u2800\u2800\u2818\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28f7\u2840\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28ff\u28e7\u2800\u2800\\r\\n\u2800\u2800\u2800\u285c\u28ed\u2824\u288d\u28ff\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u289b\u28ad\u28d7\u2800\\r\\n\u2800\u2800\u2800\u2801\u2808\u2800\u2800\u28c0\u281d\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2804\u2820\u2800\u2800\u2830\u2845\\r\\n\u2800\u2800\u2800\u2880\u2800\u2800\u2840\u2821\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2801\u2814\u2820\u2855\u2800\\r\\n\u2800\u2800\u2800\u2800\u28ff\u28f7\u28f6\u2812\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2830\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u280a\u2809\u2886\u2800\u2800\u2800\u2800\\r\\n\u2800\u2880\u2824\u2800\u2800\u28a4\u28e4\u28fd\u28ff\u28ff\u28e6\u28c0\u2880\u2860\u28a4\u2864\u2804\u2800\u2812\u2800\u2801\u2800\u2800\u2800\u2898\u2814\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2850\u2808\u2801\u2808\u281b\u28db\u283f\u281f\u2811\u2808\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2809\u2811\u2812\u2800\u2801\u2800\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function name() external view returns (string memory);\\r\\n    function getOwner() external view returns (address);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\\r\\n\\r\\nabstract contract Ownable {\\r\\n    address internal owner;\\r\\n    constructor(address _owner) {owner = _owner;}\\r\\n    modifier onlyOwner() {require(isOwner(msg.sender), \\\"!OWNER\\\"); _;}\\r\\n    function isOwner(address account) public view returns (bool) {return account == owner;}\\r\\n    function transferOwnership(address payable adr) public onlyOwner {owner = adr; emit OwnershipTransferred(adr);}\\r\\n    event OwnershipTransferred(address owner);\\r\\n}\\r\\n\\r\\ninterface IFactory{\\r\\n        function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline) external;\\r\\n}\\r\\n\\r\\ncontract BIGCHUNGUS is IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    string private constant _name = 'BIG CHUNGUS';\\r\\n    string private constant _symbol = 'CHUNGUS';\\r\\n    uint8 private constant _decimals = 9;\\r\\n    uint256 private _totalSupply = 420690000000000 * (10 ** _decimals);\\r\\n    mapping (address => uint256) _balances;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n    mapping (address => bool) public isFeeExempt;\\r\\n    mapping (address => bool) private isBot;\\r\\n    IRouter router;\\r\\n    address public pair;\\r\\n    bool private tradingAllowed = false;\\r\\n    bool private swapEnabled = true;\\r\\n    uint256 private swapTimes;\\r\\n    bool private swapping;\\r\\n    uint256 swapAmount = 1;\\r\\n    uint256 private swapThreshold = ( _totalSupply * 1000 ) / 100000;\\r\\n    uint256 private minTokenAmount = ( _totalSupply * 10 ) / 100000;\\r\\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\\r\\n    uint256 private liquidityFee = 0;\\r\\n    uint256 private marketingFee = 0;\\r\\n    uint256 private developmentFee = 1000;\\r\\n    uint256 private burnFee = 0;\\r\\n    uint256 private totalFee = 1500;\\r\\n    uint256 private sellFee = 2000;\\r\\n    uint256 private transferFee = 0;\\r\\n    uint256 private denominator = 10000;\\r\\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    address internal development_receiver = 0x254c5ADE807E57c933C6c32B752aC09C8C8Cd1D2; \\r\\n    address internal marketing_receiver = 0x254c5ADE807E57c933C6c32B752aC09C8C8Cd1D2;\\r\\n    address internal liquidity_receiver = 0x254c5ADE807E57c933C6c32B752aC09C8C8Cd1D2;\\r\\n    uint256 public _maxTxAmount = ( _totalSupply * 100 ) / 10000;\\r\\n    uint256 public _maxSellAmount = ( _totalSupply * 100 ) / 10000;\\r\\n    uint256 public _maxWalletToken = ( _totalSupply * 100 ) / 10000;\\r\\n\\r\\n    constructor() Ownable(msg.sender) {\\r\\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\\r\\n        router = _router; pair = _pair;\\r\\n        isFeeExempt[address(this)] = true;\\r\\n        isFeeExempt[liquidity_receiver] = true;\\r\\n        isFeeExempt[marketing_receiver] = true;\\r\\n        isFeeExempt[development_receiver] = true;\\r\\n        isFeeExempt[msg.sender] = true;\\r\\n        _balances[msg.sender] = _totalSupply;\\r\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n    function name() public pure returns (string memory) {return _name;}\\r\\n    function symbol() public pure returns (string memory) {return _symbol;}\\r\\n    function decimals() public pure returns (uint8) {return _decimals;}\\r\\n    function startTrading() external onlyOwner {tradingAllowed = true;}\\r\\n    function getOwner() external view override returns (address) { return owner; }\\r\\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\\r\\n    function setisExempt(address _address, bool _enabled) external onlyOwner {isFeeExempt[_address] = _enabled;}\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\\r\\n    function totalSupply() public view override returns (uint256) {return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\\r\\n\\r\\n    function shouldContractSwap(address sender, address recipient, uint256 amount) internal view returns (bool) {\\r\\n        bool aboveMin = amount >= minTokenAmount;\\r\\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\\r\\n        return !swapping && swapEnabled && tradingAllowed && aboveMin && !isFeeExempt[sender] && recipient == pair && swapTimes >= swapAmount && aboveThreshold;\\r\\n    }\\r\\n\\r\\n    function setContractSwapSettings(uint256 _swapAmount, uint256 _swapThreshold, uint256 _minTokenAmount) external onlyOwner {\\r\\n        swapAmount = _swapAmount; swapThreshold = _totalSupply.mul(_swapThreshold).div(uint256(100000)); \\r\\n        minTokenAmount = _totalSupply.mul(_minTokenAmount).div(uint256(100000));\\r\\n    }\\r\\n\\r\\n    function setTransactionRequirements(uint256 _liquidity, uint256 _marketing, uint256 _burn, uint256 _development, uint256 _total, uint256 _sell, uint256 _trans) external onlyOwner {\\r\\n        liquidityFee = _liquidity; marketingFee = _marketing; burnFee = _burn; developmentFee = _development; totalFee = _total; sellFee = _sell; transferFee = _trans;\\r\\n        require(totalFee <= denominator.div(1) && sellFee <= denominator.div(1) && transferFee <= denominator.div(1), \\\"totalFee and sellFee cannot be more than 20%\\\");\\r\\n    }\\r\\n\\r\\n    function setTransactionLimits(uint256 _buy, uint256 _sell, uint256 _wallet) external onlyOwner {\\r\\n        uint256 newTx = _totalSupply.mul(_buy).div(10000); uint256 newTransfer = _totalSupply.mul(_sell).div(10000); uint256 newWallet = _totalSupply.mul(_wallet).div(10000);\\r\\n        _maxTxAmount = newTx; _maxSellAmount = newTransfer; _maxWalletToken = newWallet;\\r\\n        uint256 limit = totalSupply().mul(5).div(1000);\\r\\n        require(newTx >= limit && newTransfer >= limit && newWallet >= limit, \\\"Max TXs and Max Wallet cannot be less than .5%\\\");\\r\\n    }\\r\\n\\r\\n    function setInternalAddresses(address _marketing, address _liquidity, address _development) external onlyOwner {\\r\\n        marketing_receiver = _marketing; liquidity_receiver = _liquidity; development_receiver = _development;\\r\\n        isFeeExempt[_marketing] = true; isFeeExempt[_liquidity] = true; isFeeExempt[_development] = true;\\r\\n    }\\r\\n\\r\\n    function setisbribe(address[] calldata addresses, bool _enabled) external onlyOwner {\\r\\n        for(uint i=0; i < addresses.length; i++){\\r\\n        isBot[addresses[i]] = _enabled; }\\r\\n    }\\r\\n\\r\\n    function manualSwap() external onlyOwner {\\r\\n        swapAndLiquify(swapThreshold);\\r\\n    }\\r\\n\\r\\n    function rescuesERC20(address _address, uint256 percent) external onlyOwner {\\r\\n        uint256 _amount = IERC20(_address).balanceOf(address(this)).mul(percent).div(100);\\r\\n        IERC20(_address).transfer(development_receiver, _amount);\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\\r\\n        uint256 _denominator = (liquidityFee.add(1).add(marketingFee).add(developmentFee)).mul(2);\\r\\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidityFee).div(_denominator);\\r\\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n        swapTokensForETH(toSwap);\\r\\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\\r\\n        uint256 unitBalance= deltaBalance.div(_denominator.sub(liquidityFee));\\r\\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidityFee);\\r\\n        if(ETHToAddLiquidityWith > uint256(0)){addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); }\\r\\n        uint256 marketingAmt = unitBalance.mul(2).mul(marketingFee);\\r\\n        if(marketingAmt > 0){payable(marketing_receiver).transfer(marketingAmt);}\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n        if(contractBalance > uint256(0)){payable(development_receiver).transfer(contractBalance);}\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\\r\\n        _approve(address(this), address(router), tokenAmount);\\r\\n        router.addLiquidityETH{value: ETHAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            0,\\r\\n            liquidity_receiver,\\r\\n            block.timestamp);\\r\\n    }\\r\\n\\r\\n    function swapTokensForETH(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n        _approve(address(this), address(router), tokenAmount);\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp);\\r\\n    }\\r\\n\\r\\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\\r\\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\\r\\n    }\\r\\n\\r\\n    function getTotalFee(address sender, address recipient) internal view returns (uint256) {\\r\\n        if(isBot[sender] || isBot[recipient]){return denominator.sub(uint256(100));}\\r\\n        if(recipient == pair){return sellFee;}\\r\\n        if(sender == pair){return totalFee;}\\r\\n        return transferFee;\\r\\n    }\\r\\n\\r\\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\\r\\n        if(getTotalFee(sender, recipient) > 0){\\r\\n        uint256 feeAmount = amount.div(denominator).mul(getTotalFee(sender, recipient));\\r\\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\\r\\n        emit Transfer(sender, address(this), feeAmount);\\r\\n        if(burnFee > uint256(0) && getTotalFee(sender, recipient) > burnFee){_transfer(address(this), address(DEAD), amount.div(denominator).mul(burnFee));}\\r\\n        return amount.sub(feeAmount);} return amount;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount <= balanceOf(sender),\\\"You are trying to transfer more than your balance\\\");\\r\\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]){require(tradingAllowed, \\\"tradingAllowed\\\");}\\r\\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient] && recipient != address(pair) && recipient != address(DEAD)){\\r\\n        require((_balances[recipient].add(amount)) <= _maxWalletToken, \\\"Exceeds maximum wallet amount.\\\");}\\r\\n        if(sender != pair){require(amount <= _maxSellAmount || isFeeExempt[sender] || isFeeExempt[recipient], \\\"TX Limit Exceeded\\\");}\\r\\n        require(amount <= _maxTxAmount || isFeeExempt[sender] || isFeeExempt[recipient], \\\"TX Limit Exceeded\\\"); \\r\\n        if(recipient == pair && !isFeeExempt[sender]){swapTimes += uint256(1);}\\r\\n        if(shouldContractSwap(sender, recipient, amount)){swapAndLiquify(swapThreshold); swapTimes = uint256(0);}\\r\\n        _balances[sender] = _balances[sender].sub(amount);\\r\\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\\r\\n        _balances[recipient] = _balances[recipient].add(amountReceived);\\r\\n        emit Transfer(sender, recipient, amountReceived);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}