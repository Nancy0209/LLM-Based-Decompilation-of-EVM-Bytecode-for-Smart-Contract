{
    "address": "0x4c5CbB44F1F835E2BbE255d8dBFb91A364b0D36B",
    "tx_hash": "18197c433582b0ce211b0c09cfe99e9fd2f38d3ec2cc115e61988af85b0e22d8",
    "block_number": 18005028,
    "timestamp": 1693127519,
    "gas_used_in_creation": 3022507,
    "creation_bytecode": "5f8080556007819055668e1bc9bf040000600c55666a94d74f430000600d55665c5edcbc290000600e5561016060405261014090815260109062000044908262000502565b50604080518082019091526005815264173539b7b760d91b602082015260119062000070908262000502565b505f6013556016805460ff191690553480156200008b575f80fd5b50604051620036d9380380620036d9833981016040819052620000ae91620005ca565b6040518060400160405280600b81526020016a4f7074696d7573446f677360a81b815250604051806040016040528060068152602001654f50444f475360d01b81525086865f81116200015f5760405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20636f6c6c656374696f6e206d757374206861766520612060448201526d6e6f6e7a65726f20737570706c7960901b60648201526084015b60405180910390fd5b5f8211620001c05760405162461bcd60e51b815260206004820152602760248201527f455243373231413a206d61782062617463682073697a65206d757374206265206044820152666e6f6e7a65726f60c81b606482015260840162000156565b6001620001ce858262000502565b506002620001dd848262000502565b5060a09190915260805250620001f590503362000296565b600160095562000208336101f4620002e7565b6200021381620003e8565b60c085905262000225600286620006bf565b6101205261010083905260e0829052600f829055838311156200028b5760405162461bcd60e51b815260206004820152601d60248201527f6c617267657220636f6c6c656374696f6e2073697a65206e6565646564000000604482015260640162000156565b5050505050620006df565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6127106001600160601b0382161115620003575760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b606482015260840162000156565b6001600160a01b038216620003af5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c696420726563656976657200000000000000604482015260640162000156565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600a55565b620003f262000404565b601262000400828262000502565b5050565b6008546001600160a01b03163314620004605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000156565b565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200048b57607f821691505b602082108103620004aa57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620004fd575f81815260208120601f850160051c81016020861015620004d85750805b601f850160051c820191505b81811015620004f957828155600101620004e4565b5050505b505050565b81516001600160401b038111156200051e576200051e62000462565b62000536816200052f845462000476565b84620004b0565b602080601f8311600181146200056c575f8415620005545750858301515b5f19600386901b1c1916600185901b178555620004f9565b5f85815260208120601f198616915b828110156200059c578886015182559484019460019091019084016200057b565b5085821015620005ba57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f805f805f60a08688031215620005df575f80fd5b8551602080880151604089015160608a015160808b015194995091975095509350906001600160401b038082111562000616575f80fd5b818901915089601f8301126200062a575f80fd5b8151818111156200063f576200063f62000462565b604051601f8201601f19908116603f011681019083821181831017156200066a576200066a62000462565b816040528281528c8684870101111562000682575f80fd5b5f93505b82841015620006a5578484018601518185018701529285019262000686565b5f8684830101528096505050505050509295509295909350565b5f82620006da57634e487b7160e01b5f52601260045260245ffd5b500490565b60805160a05160c05160e0516101005161012051612f50620007895f395f81816105c201528181610dfa01528181610e4a01528181611813015261186301525f818161058f01528181610e96015281816113cb01526118af01525f61052901525f818161065a0152818161132f015261137f01525f81816110f8015281816111410152818161117801528181611ffe01528181612028015261244d01525f61107f0152612f505ff3fe6080604052600436106102bf575f3560e01c80637ec4a6591161016f578063b769c7a4116100d8578063d7224ba011610092578063e985e9c51161006d578063e985e9c514610857578063f2fde38b1461089e578063f31b5b33146108bd578063f375b7c7146108d0575f80fd5b8063d7224ba01461080e578063e0a8085314610823578063e4f2487a14610842575f80fd5b8063b769c7a41461075c578063b88d4fde1461077b578063c002d23d1461079a578063c87b56dd146107af578063c9a32039146107ce578063d6492d81146107f9575f80fd5b8063a22cb46511610129578063a22cb465146106c2578063a45ba8e7146106e1578063a58fdc11146106f5578063ac44600214610714578063ad3e31b714610728578063ad6cb31914610747575f80fd5b80637ec4a6591461061757806382448412146106365780638bc35c2f146106495780638da5cb5b1461067c57806390069b421461069957806395d89b41146106ae575f80fd5b806342842e0e1161022b5780635c4be282116101e55780636ca2a558116101c05780636ca2a5581461057e5780636e125b28146105b157806370a08231146105e4578063715018a614610603575f80fd5b80635c4be2821461051857806362b99ad41461054b5780636352211e1461055f575f80fd5b806342842e0e1461046f5780634f6ccce71461048e5780634fdd43cb146104ad57806351830227146104cc5780635503a0e8146104e55780635a4d448a146104f9575f80fd5b806318160ddd1161027c57806318160ddd146103ae57806323b872dd146103cb5780632a55205a146103ea5780632f745c591461042857806331c3c7a014610447578063370a36bd1461045c575f80fd5b806301ffc9a7146102c357806304634d8d146102f757806306fdde0314610318578063081812fc14610339578063095ea7b31461037057806316ba10e01461038f575b5f80fd5b3480156102ce575f80fd5b506102e26102dd3660046127c7565b6108e5565b60405190151581526020015b60405180910390f35b348015610302575f80fd5b506103166103113660046127fd565b6108f5565b005b348015610323575f80fd5b5061032c61090b565b6040516102ee919061288a565b348015610344575f80fd5b5061035861035336600461289c565b61099b565b6040516001600160a01b0390911681526020016102ee565b34801561037b575f80fd5b5061031661038a3660046128b3565b610a28565b34801561039a575f80fd5b506103166103a9366004612962565b610b3e565b3480156103b9575f80fd5b505f545b6040519081526020016102ee565b3480156103d6575f80fd5b506103166103e53660046129a7565b610b52565b3480156103f5575f80fd5b506104096104043660046129e0565b610b5d565b604080516001600160a01b0390931683526020830191909152016102ee565b348015610433575f80fd5b506103bd6104423660046128b3565b610c07565b348015610452575f80fd5b506103bd600d5481565b61031661046a366004612a00565b610d70565b34801561047a575f80fd5b506103166104893660046129a7565b610f52565b348015610499575f80fd5b506103bd6104a836600461289c565b610f6c565b3480156104b8575f80fd5b506103166104c7366004612962565b610fcd565b3480156104d7575f80fd5b506016546102e29060ff1681565b3480156104f0575f80fd5b5061032c610fe1565b348015610504575f80fd5b5061031661051336600461289c565b61106d565b348015610523575f80fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b348015610556575f80fd5b5061032c6111d1565b34801561056a575f80fd5b5061035861057936600461289c565b6111de565b348015610589575f80fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105bc575f80fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105ef575f80fd5b506103bd6105fe366004612a78565b6111ef565b34801561060e575f80fd5b5061031661127e565b348015610622575f80fd5b50610316610631366004612962565b611291565b610316610644366004612a00565b6112a5565b348015610654575f80fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000081565b348015610687575f80fd5b506008546001600160a01b0316610358565b3480156106a4575f80fd5b506103bd600e5481565b3480156106b9575f80fd5b5061032c61142b565b3480156106cd575f80fd5b506103166106dc366004612aa0565b61143a565b3480156106ec575f80fd5b5061032c6114fd565b348015610700575f80fd5b5061031661070f36600461289c565b61150a565b34801561071f575f80fd5b50610316611517565b348015610733575f80fd5b5061031661074236600461289c565b611598565b348015610752575f80fd5b506103bd60155481565b348015610767575f80fd5b5061031661077636600461289c565b6115a5565b348015610786575f80fd5b50610316610795366004612ad1565b6115b2565b3480156107a5575f80fd5b506103bd600c5481565b3480156107ba575f80fd5b5061032c6107c936600461289c565b6115eb565b3480156107d9575f80fd5b506103bd6107e8366004612a78565b60176020525f908152604090205481565b348015610804575f80fd5b506103bd60145481565b348015610819575f80fd5b506103bd60075481565b34801561082e575f80fd5b5061031661083d366004612b48565b611755565b34801561084d575f80fd5b506103bd60135481565b348015610862575f80fd5b506102e2610871366004612b61565b6001600160a01b039182165f90815260066020908152604080832093909416825291909152205460ff1690565b3480156108a9575f80fd5b506103166108b8366004612a78565b611770565b6103166108cb36600461289c565b6117e6565b3480156108db575f80fd5b506103bd600f5481565b5f6108ef8261196b565b92915050565b6108fd61198f565b61090782826119e9565b5050565b60606001805461091a90612b89565b80601f016020809104026020016040519081016040528092919081815260200182805461094690612b89565b80156109915780601f1061096857610100808354040283529160200191610991565b820191905f5260205f20905b81548152906001019060200180831161097457829003601f168201915b5050505050905090565b5f6109a6825f541190565b610a0d5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b505f908152600560205260409020546001600160a01b031690565b5f610a32826111de565b9050806001600160a01b0316836001600160a01b031603610aa05760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b6064820152608401610a04565b336001600160a01b0382161480610abc5750610abc8133610871565b610b2e5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c000000000000006064820152608401610a04565b610b39838383611ae6565b505050565b610b4661198f565b60116109078282612c06565b610b39838383611b41565b5f828152600b602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610bd1575060408051808201909152600a546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101515f9061271090610bef906001600160601b031687612cd6565b610bf99190612d01565b915196919550909350505050565b5f610c11836111ef565b8210610c6a5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610a04565b5f80549080805b83811015610d10575f818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215610cc357805192505b876001600160a01b0316836001600160a01b031603610cfd57868403610cef575093506108ef92505050565b83610cf981612d14565b9450505b5080610d0881612d14565b915050610c71565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b6064820152608401610a04565b610d78611ebe565b601354600114610d9b57604051634ce630e160e01b815260040160405180910390fd5b610ddb338383808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506014549150611f179050565b610df85760405163582f497d60e11b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000831115610e395760405163162d230560e11b815260040160405180910390fd5b335f908152601760205260409020547f000000000000000000000000000000000000000000000000000000000000000090610e75908590612d2c565b1115610e945760405163061b63e160e31b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000083610ebe5f5490565b610ec89190612d2c565b1115610ee757604051630283147360e61b815260040160405180910390fd5b5f83600d54610ef69190612cd6565b905080341015610f195760405163cd1c886760e01b815260040160405180910390fd5b335f9081526017602052604081208054869290610f37908490612d2c565b90915550610f4790503385611f66565b50610b396001600955565b610b3983838360405180602001604052805f8152506115b2565b5f80548210610fc95760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b6064820152608401610a04565b5090565b610fd561198f565b60126109078282612c06565b60118054610fee90612b89565b80601f016020809104026020016040519081016040528092919081815260200182805461101a90612b89565b80156110655780601f1061103c57610100808354040283529160200191611065565b820191905f5260205f20905b81548152906001019060200180831161104857829003601f168201915b505050505081565b611075611ebe565b61107d61198f565b7f0000000000000000000000000000000000000000000000000000000000000000816110a75f5490565b6110b19190612d2c565b11156110d05760405163c30436e960e01b815260040160405180910390fd5b80600f5410156110f3576040516327d5107960e21b815260040160405180910390fd5b61111d7f000000000000000000000000000000000000000000000000000000000000000082612d3f565b1561113b57604051634341e6ed60e01b815260040160405180910390fd5b5f6111667f000000000000000000000000000000000000000000000000000000000000000083612d01565b90505f5b818110156111ae5761119c337f0000000000000000000000000000000000000000000000000000000000000000611f66565b806111a681612d14565b91505061116a565b5081600f5f8282546111c09190612d52565b909155505060016009555050565b50565b60108054610fee90612b89565b5f6111e882611f7f565b5192915050565b5f6001600160a01b03821661125a5760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610a04565b506001600160a01b03165f908152600460205260409020546001600160801b031690565b61128661198f565b61128f5f612125565b565b61129961198f565b60106109078282612c06565b6112ad611ebe565b6013546001146112d057604051634ce630e160e01b815260040160405180910390fd5b611310338383808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506015549150611f179050565b61132d5760405163582f497d60e11b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000083111561136e5760405163162d230560e11b815260040160405180910390fd5b335f908152601760205260409020547f0000000000000000000000000000000000000000000000000000000000000000906113aa908590612d2c565b11156113c95760405163061b63e160e31b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000836113f35f5490565b6113fd9190612d2c565b111561141c57604051630283147360e61b815260040160405180910390fd5b5f83600e54610ef69190612cd6565b60606002805461091a90612b89565b336001600160a01b038316036114925760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c65720000000000006044820152606401610a04565b335f8181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60128054610fee90612b89565b61151261198f565b601555565b61151f61198f565b611527611ebe565b6040515f90339047908381818185875af1925050503d805f8114611566576040519150601f19603f3d011682016040523d82523d5f602084013e61156b565b606091505b505090508061158d576040516312171d8360e31b815260040160405180910390fd5b5061128f6001600955565b6115a061198f565b601455565b6115ad61198f565b601355565b6115bd848484611b41565b6115c984848484612176565b6115e55760405162461bcd60e51b8152600401610a0490612d65565b50505050565b60606115f7825f541190565b61165b5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610a04565b60165460ff1615155f036116f9576012805461167690612b89565b80601f01602080910402602001604051908101604052809291908181526020018280546116a290612b89565b80156116ed5780601f106116c4576101008083540402835291602001916116ed565b820191905f5260205f20905b8154815290600101906020018083116116d057829003601f168201915b50505050509050919050565b5f611702612274565b90505f8151116117205760405180602001604052805f81525061174e565b8061172a84612283565b601160405160200161173e93929190612db8565b6040516020818303038152906040525b9392505050565b61175d61198f565b6016805460ff1916911515919091179055565b61177861198f565b6001600160a01b0381166117dd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a04565b6111ce81612125565b6117ee611ebe565b6013546002146118115760405163b7b2409760e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008111156118525760405163162d230560e11b815260040160405180910390fd5b335f908152601760205260409020547f00000000000000000000000000000000000000000000000000000000000000009061188e908390612d2c565b11156118ad5760405163061b63e160e31b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000816118d75f5490565b6118e19190612d2c565b111561190057604051630283147360e61b815260040160405180910390fd5b335f908152601760205260408120805483929061191e908490612d2c565b9091555050600c545f90611933908390612cd6565b9050803410156119565760405163cd1c886760e01b815260040160405180910390fd5b6119603383611f66565b506111ce6001600955565b5f6001600160e01b0319821663152a902d60e11b14806108ef57506108ef82612313565b6008546001600160a01b0316331461128f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a04565b6127106001600160601b0382161115611a575760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610a04565b6001600160a01b038216611aad5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610a04565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600a55565b5f8281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b5f611b4b82611f7f565b80519091505f906001600160a01b0316336001600160a01b03161480611b81575033611b768461099b565b6001600160a01b0316145b80611b9357508151611b939033610871565b905080611bfd5760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610a04565b846001600160a01b0316825f01516001600160a01b031614611c705760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b6064820152608401610a04565b6001600160a01b038416611cd45760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610a04565b611ce25f84845f0151611ae6565b6001600160a01b0385165f908152600460205260408120805460019290611d139084906001600160801b0316612e53565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b0386165f9081526004602052604081208054600194509092611d5e91859116612e7a565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff42811660208085019182525f8981526003909152948520935184549151909216600160a01b026001600160e01b03199091169190921617179055611de5846001612d2c565b5f818152600360205260409020549091506001600160a01b0316611e7457611e0d815f541190565b15611e745760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081525f878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b600260095403611f105760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a04565b6002600955565b6040516bffffffffffffffffffffffff19606085901b1660208201525f908190603401604051602081830303815290604052805190602001209050611f5d84848361237d565b95945050505050565b610907828260405180602001604052805f815250612392565b604080518082019091525f8082526020820152611f9c825f541190565b611ffb5760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610a04565b5f7f0000000000000000000000000000000000000000000000000000000000000000831061205b5761204d7f000000000000000000000000000000000000000000000000000000000000000084612d52565b612058906001612d2c565b90505b825b8181106120c4575f818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff1691830191909152156120b157949350505050565b50806120bc81612e9a565b91505061205d565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201526e1037bbb732b91037b3103a37b5b2b760891b6064820152608401610a04565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f6001600160a01b0384163b1561226857604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906121b9903390899088908890600401612eaf565b6020604051808303815f875af19250505080156121f3575060408051601f3d908101601f191682019092526121f091810190612eeb565b60015b61224e573d808015612220576040519150601f19603f3d011682016040523d82523d5f602084013e612225565b606091505b5080515f036122465760405162461bcd60e51b8152600401610a0490612d65565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061226c565b5060015b949350505050565b60606010805461091a90612b89565b60605f61228f83612666565b60010190505f8167ffffffffffffffff8111156122ae576122ae6128db565b6040519080825280601f01601f1916602001820160405280156122d8576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846122e257509392505050565b5f6001600160e01b031982166380ac58cd60e01b148061234357506001600160e01b03198216635b5e139f60e01b145b8061235e57506001600160e01b0319821663780e9d6360e01b145b806108ef57506301ffc9a760e01b6001600160e01b03198316146108ef565b5f82612389858461273d565b14949350505050565b5f546001600160a01b0384166123f45760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610a04565b6123fe815f541190565b1561244b5760405162461bcd60e51b815260206004820152601d60248201527f455243373231413a20746f6b656e20616c7265616479206d696e7465640000006044820152606401610a04565b7f00000000000000000000000000000000000000000000000000000000000000008311156124c65760405162461bcd60e51b815260206004820152602260248201527f455243373231413a207175616e7469747920746f206d696e7420746f6f2068696044820152610ced60f31b6064820152608401610a04565b6001600160a01b0384165f908152600460209081526040918290208251808401845290546001600160801b038082168352600160801b9091041691810191909152815180830190925280519091908190612521908790612e7a565b6001600160801b0316815260200185836020015161253f9190612e7a565b6001600160801b039081169091526001600160a01b038088165f8181526004602090815260408083208751978301518716600160801b0297909616969096179094558451808601865291825267ffffffffffffffff4281168386019081528883526003909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b8581101561265c5760405182906001600160a01b038916905f907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46126205f888488612176565b61263c5760405162461bcd60e51b8152600401610a0490612d65565b8161264681612d14565b925050808061265490612d14565b9150506125d5565b505f819055611eb6565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106126a45772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106126d0576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106126ee57662386f26fc10000830492506010015b6305f5e1008310612706576305f5e100830492506008015b612710831061271a57612710830492506004015b6064831061272c576064830492506002015b600a83106108ef5760010192915050565b5f81815b84518110156127815761276d8286838151811061276057612760612f06565b6020026020010151612789565b91508061277981612d14565b915050612741565b509392505050565b5f8183106127a3575f82815260208490526040902061174e565b505f9182526020526040902090565b6001600160e01b0319811681146111ce575f80fd5b5f602082840312156127d7575f80fd5b813561174e816127b2565b80356001600160a01b03811681146127f8575f80fd5b919050565b5f806040838503121561280e575f80fd5b612817836127e2565b915060208301356001600160601b0381168114612832575f80fd5b809150509250929050565b5f5b8381101561285757818101518382015260200161283f565b50505f910152565b5f815180845261287681602086016020860161283d565b601f01601f19169290920160200192915050565b602081525f61174e602083018461285f565b5f602082840312156128ac575f80fd5b5035919050565b5f80604083850312156128c4575f80fd5b6128cd836127e2565b946020939093013593505050565b634e487b7160e01b5f52604160045260245ffd5b5f67ffffffffffffffff80841115612909576129096128db565b604051601f8501601f19908116603f01168101908282118183101715612931576129316128db565b81604052809350858152868686011115612949575f80fd5b858560208301375f602087830101525050509392505050565b5f60208284031215612972575f80fd5b813567ffffffffffffffff811115612988575f80fd5b8201601f81018413612998575f80fd5b61226c848235602084016128ef565b5f805f606084860312156129b9575f80fd5b6129c2846127e2565b92506129d0602085016127e2565b9150604084013590509250925092565b5f80604083850312156129f1575f80fd5b50508035926020909101359150565b5f805f60408486031215612a12575f80fd5b83359250602084013567ffffffffffffffff80821115612a30575f80fd5b818601915086601f830112612a43575f80fd5b813581811115612a51575f80fd5b8760208260051b8501011115612a65575f80fd5b6020830194508093505050509250925092565b5f60208284031215612a88575f80fd5b61174e826127e2565b803580151581146127f8575f80fd5b5f8060408385031215612ab1575f80fd5b612aba836127e2565b9150612ac860208401612a91565b90509250929050565b5f805f8060808587031215612ae4575f80fd5b612aed856127e2565b9350612afb602086016127e2565b925060408501359150606085013567ffffffffffffffff811115612b1d575f80fd5b8501601f81018713612b2d575f80fd5b612b3c878235602084016128ef565b91505092959194509250565b5f60208284031215612b58575f80fd5b61174e82612a91565b5f8060408385031215612b72575f80fd5b612b7b836127e2565b9150612ac8602084016127e2565b600181811c90821680612b9d57607f821691505b602082108103612bbb57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610b39575f81815260208120601f850160051c81016020861015612be75750805b601f850160051c820191505b81811015611eb657828155600101612bf3565b815167ffffffffffffffff811115612c2057612c206128db565b612c3481612c2e8454612b89565b84612bc1565b602080601f831160018114612c67575f8415612c505750858301515b5f19600386901b1c1916600185901b178555611eb6565b5f85815260208120601f198616915b82811015612c9557888601518255948401946001909101908401612c76565b5085821015612cb257878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176108ef576108ef612cc2565b634e487b7160e01b5f52601260045260245ffd5b5f82612d0f57612d0f612ced565b500490565b5f60018201612d2557612d25612cc2565b5060010190565b808201808211156108ef576108ef612cc2565b5f82612d4d57612d4d612ced565b500690565b818103818111156108ef576108ef612cc2565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b5f84516020612dca8285838a0161283d565b855191840191612ddd8184848a0161283d565b85549201915f90612ded81612b89565b60018281168015612e055760018114612e1a57612e43565b60ff1984168752821515830287019450612e43565b895f52855f205f5b84811015612e3b57815489820152908301908701612e22565b505082870194505b50929a9950505050505050505050565b6001600160801b03828116828216039080821115612e7357612e73612cc2565b5092915050565b6001600160801b03818116838216019080821115612e7357612e73612cc2565b5f81612ea857612ea8612cc2565b505f190190565b6001600160a01b03858116825284166020820152604081018390526080606082018190525f90612ee19083018461285f565b9695505050505050565b5f60208284031215612efb575f80fd5b815161174e816127b2565b634e487b7160e01b5f52603260045260245ffdfea26469706673582212202303dd761e27aeaf76ce566d76eb4870586d503a3ec994262a7dbdcb5bb319c464736f6c634300081400330000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000024b8000000000000000000000000000000000000000000000000000000000000025800000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000041697066733a2f2f516d584a3753586b7044486b46717633573670384c396671344250763579646e6e7074736a546a486d54386351532f68696464656e2e6a736f6e00000000000000000000000000000000000000000000000000000000000000",
    "runtime_bytecode": "6080604052600436106102bf575f3560e01c80637ec4a6591161016f578063b769c7a4116100d8578063d7224ba011610092578063e985e9c51161006d578063e985e9c514610857578063f2fde38b1461089e578063f31b5b33146108bd578063f375b7c7146108d0575f80fd5b8063d7224ba01461080e578063e0a8085314610823578063e4f2487a14610842575f80fd5b8063b769c7a41461075c578063b88d4fde1461077b578063c002d23d1461079a578063c87b56dd146107af578063c9a32039146107ce578063d6492d81146107f9575f80fd5b8063a22cb46511610129578063a22cb465146106c2578063a45ba8e7146106e1578063a58fdc11146106f5578063ac44600214610714578063ad3e31b714610728578063ad6cb31914610747575f80fd5b80637ec4a6591461061757806382448412146106365780638bc35c2f146106495780638da5cb5b1461067c57806390069b421461069957806395d89b41146106ae575f80fd5b806342842e0e1161022b5780635c4be282116101e55780636ca2a558116101c05780636ca2a5581461057e5780636e125b28146105b157806370a08231146105e4578063715018a614610603575f80fd5b80635c4be2821461051857806362b99ad41461054b5780636352211e1461055f575f80fd5b806342842e0e1461046f5780634f6ccce71461048e5780634fdd43cb146104ad57806351830227146104cc5780635503a0e8146104e55780635a4d448a146104f9575f80fd5b806318160ddd1161027c57806318160ddd146103ae57806323b872dd146103cb5780632a55205a146103ea5780632f745c591461042857806331c3c7a014610447578063370a36bd1461045c575f80fd5b806301ffc9a7146102c357806304634d8d146102f757806306fdde0314610318578063081812fc14610339578063095ea7b31461037057806316ba10e01461038f575b5f80fd5b3480156102ce575f80fd5b506102e26102dd3660046127c7565b6108e5565b60405190151581526020015b60405180910390f35b348015610302575f80fd5b506103166103113660046127fd565b6108f5565b005b348015610323575f80fd5b5061032c61090b565b6040516102ee919061288a565b348015610344575f80fd5b5061035861035336600461289c565b61099b565b6040516001600160a01b0390911681526020016102ee565b34801561037b575f80fd5b5061031661038a3660046128b3565b610a28565b34801561039a575f80fd5b506103166103a9366004612962565b610b3e565b3480156103b9575f80fd5b505f545b6040519081526020016102ee565b3480156103d6575f80fd5b506103166103e53660046129a7565b610b52565b3480156103f5575f80fd5b506104096104043660046129e0565b610b5d565b604080516001600160a01b0390931683526020830191909152016102ee565b348015610433575f80fd5b506103bd6104423660046128b3565b610c07565b348015610452575f80fd5b506103bd600d5481565b61031661046a366004612a00565b610d70565b34801561047a575f80fd5b506103166104893660046129a7565b610f52565b348015610499575f80fd5b506103bd6104a836600461289c565b610f6c565b3480156104b8575f80fd5b506103166104c7366004612962565b610fcd565b3480156104d7575f80fd5b506016546102e29060ff1681565b3480156104f0575f80fd5b5061032c610fe1565b348015610504575f80fd5b5061031661051336600461289c565b61106d565b348015610523575f80fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000025881565b348015610556575f80fd5b5061032c6111d1565b34801561056a575f80fd5b5061035861057936600461289c565b6111de565b348015610589575f80fd5b506103bd7f00000000000000000000000000000000000000000000000000000000000024b881565b3480156105bc575f80fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000381565b3480156105ef575f80fd5b506103bd6105fe366004612a78565b6111ef565b34801561060e575f80fd5b5061031661127e565b348015610622575f80fd5b50610316610631366004612962565b611291565b610316610644366004612a00565b6112a5565b348015610654575f80fd5b506103bd7f000000000000000000000000000000000000000000000000000000000000000681565b348015610687575f80fd5b506008546001600160a01b0316610358565b3480156106a4575f80fd5b506103bd600e5481565b3480156106b9575f80fd5b5061032c61142b565b3480156106cd575f80fd5b506103166106dc366004612aa0565b61143a565b3480156106ec575f80fd5b5061032c6114fd565b348015610700575f80fd5b5061031661070f36600461289c565b61150a565b34801561071f575f80fd5b50610316611517565b348015610733575f80fd5b5061031661074236600461289c565b611598565b348015610752575f80fd5b506103bd60155481565b348015610767575f80fd5b5061031661077636600461289c565b6115a5565b348015610786575f80fd5b50610316610795366004612ad1565b6115b2565b3480156107a5575f80fd5b506103bd600c5481565b3480156107ba575f80fd5b5061032c6107c936600461289c565b6115eb565b3480156107d9575f80fd5b506103bd6107e8366004612a78565b60176020525f908152604090205481565b348015610804575f80fd5b506103bd60145481565b348015610819575f80fd5b506103bd60075481565b34801561082e575f80fd5b5061031661083d366004612b48565b611755565b34801561084d575f80fd5b506103bd60135481565b348015610862575f80fd5b506102e2610871366004612b61565b6001600160a01b039182165f90815260066020908152604080832093909416825291909152205460ff1690565b3480156108a9575f80fd5b506103166108b8366004612a78565b611770565b6103166108cb36600461289c565b6117e6565b3480156108db575f80fd5b506103bd600f5481565b5f6108ef8261196b565b92915050565b6108fd61198f565b61090782826119e9565b5050565b60606001805461091a90612b89565b80601f016020809104026020016040519081016040528092919081815260200182805461094690612b89565b80156109915780601f1061096857610100808354040283529160200191610991565b820191905f5260205f20905b81548152906001019060200180831161097457829003601f168201915b5050505050905090565b5f6109a6825f541190565b610a0d5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b505f908152600560205260409020546001600160a01b031690565b5f610a32826111de565b9050806001600160a01b0316836001600160a01b031603610aa05760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b6064820152608401610a04565b336001600160a01b0382161480610abc5750610abc8133610871565b610b2e5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c000000000000006064820152608401610a04565b610b39838383611ae6565b505050565b610b4661198f565b60116109078282612c06565b610b39838383611b41565b5f828152600b602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610bd1575060408051808201909152600a546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101515f9061271090610bef906001600160601b031687612cd6565b610bf99190612d01565b915196919550909350505050565b5f610c11836111ef565b8210610c6a5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610a04565b5f80549080805b83811015610d10575f818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215610cc357805192505b876001600160a01b0316836001600160a01b031603610cfd57868403610cef575093506108ef92505050565b83610cf981612d14565b9450505b5080610d0881612d14565b915050610c71565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b6064820152608401610a04565b610d78611ebe565b601354600114610d9b57604051634ce630e160e01b815260040160405180910390fd5b610ddb338383808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506014549150611f179050565b610df85760405163582f497d60e11b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000003831115610e395760405163162d230560e11b815260040160405180910390fd5b335f908152601760205260409020547f000000000000000000000000000000000000000000000000000000000000000390610e75908590612d2c565b1115610e945760405163061b63e160e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000024b883610ebe5f5490565b610ec89190612d2c565b1115610ee757604051630283147360e61b815260040160405180910390fd5b5f83600d54610ef69190612cd6565b905080341015610f195760405163cd1c886760e01b815260040160405180910390fd5b335f9081526017602052604081208054869290610f37908490612d2c565b90915550610f4790503385611f66565b50610b396001600955565b610b3983838360405180602001604052805f8152506115b2565b5f80548210610fc95760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b6064820152608401610a04565b5090565b610fd561198f565b60126109078282612c06565b60118054610fee90612b89565b80601f016020809104026020016040519081016040528092919081815260200182805461101a90612b89565b80156110655780601f1061103c57610100808354040283529160200191611065565b820191905f5260205f20905b81548152906001019060200180831161104857829003601f168201915b505050505081565b611075611ebe565b61107d61198f565b7f0000000000000000000000000000000000000000000000000000000000002710816110a75f5490565b6110b19190612d2c565b11156110d05760405163c30436e960e01b815260040160405180910390fd5b80600f5410156110f3576040516327d5107960e21b815260040160405180910390fd5b61111d7f000000000000000000000000000000000000000000000000000000000000000682612d3f565b1561113b57604051634341e6ed60e01b815260040160405180910390fd5b5f6111667f000000000000000000000000000000000000000000000000000000000000000683612d01565b90505f5b818110156111ae5761119c337f0000000000000000000000000000000000000000000000000000000000000006611f66565b806111a681612d14565b91505061116a565b5081600f5f8282546111c09190612d52565b909155505060016009555050565b50565b60108054610fee90612b89565b5f6111e882611f7f565b5192915050565b5f6001600160a01b03821661125a5760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610a04565b506001600160a01b03165f908152600460205260409020546001600160801b031690565b61128661198f565b61128f5f612125565b565b61129961198f565b60106109078282612c06565b6112ad611ebe565b6013546001146112d057604051634ce630e160e01b815260040160405180910390fd5b611310338383808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506015549150611f179050565b61132d5760405163582f497d60e11b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000683111561136e5760405163162d230560e11b815260040160405180910390fd5b335f908152601760205260409020547f0000000000000000000000000000000000000000000000000000000000000006906113aa908590612d2c565b11156113c95760405163061b63e160e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000024b8836113f35f5490565b6113fd9190612d2c565b111561141c57604051630283147360e61b815260040160405180910390fd5b5f83600e54610ef69190612cd6565b60606002805461091a90612b89565b336001600160a01b038316036114925760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c65720000000000006044820152606401610a04565b335f8181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60128054610fee90612b89565b61151261198f565b601555565b61151f61198f565b611527611ebe565b6040515f90339047908381818185875af1925050503d805f8114611566576040519150601f19603f3d011682016040523d82523d5f602084013e61156b565b606091505b505090508061158d576040516312171d8360e31b815260040160405180910390fd5b5061128f6001600955565b6115a061198f565b601455565b6115ad61198f565b601355565b6115bd848484611b41565b6115c984848484612176565b6115e55760405162461bcd60e51b8152600401610a0490612d65565b50505050565b60606115f7825f541190565b61165b5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610a04565b60165460ff1615155f036116f9576012805461167690612b89565b80601f01602080910402602001604051908101604052809291908181526020018280546116a290612b89565b80156116ed5780601f106116c4576101008083540402835291602001916116ed565b820191905f5260205f20905b8154815290600101906020018083116116d057829003601f168201915b50505050509050919050565b5f611702612274565b90505f8151116117205760405180602001604052805f81525061174e565b8061172a84612283565b601160405160200161173e93929190612db8565b6040516020818303038152906040525b9392505050565b61175d61198f565b6016805460ff1916911515919091179055565b61177861198f565b6001600160a01b0381166117dd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a04565b6111ce81612125565b6117ee611ebe565b6013546002146118115760405163b7b2409760e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000038111156118525760405163162d230560e11b815260040160405180910390fd5b335f908152601760205260409020547f00000000000000000000000000000000000000000000000000000000000000039061188e908390612d2c565b11156118ad5760405163061b63e160e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000024b8816118d75f5490565b6118e19190612d2c565b111561190057604051630283147360e61b815260040160405180910390fd5b335f908152601760205260408120805483929061191e908490612d2c565b9091555050600c545f90611933908390612cd6565b9050803410156119565760405163cd1c886760e01b815260040160405180910390fd5b6119603383611f66565b506111ce6001600955565b5f6001600160e01b0319821663152a902d60e11b14806108ef57506108ef82612313565b6008546001600160a01b0316331461128f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a04565b6127106001600160601b0382161115611a575760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610a04565b6001600160a01b038216611aad5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610a04565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600a55565b5f8281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b5f611b4b82611f7f565b80519091505f906001600160a01b0316336001600160a01b03161480611b81575033611b768461099b565b6001600160a01b0316145b80611b9357508151611b939033610871565b905080611bfd5760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610a04565b846001600160a01b0316825f01516001600160a01b031614611c705760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b6064820152608401610a04565b6001600160a01b038416611cd45760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610a04565b611ce25f84845f0151611ae6565b6001600160a01b0385165f908152600460205260408120805460019290611d139084906001600160801b0316612e53565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b0386165f9081526004602052604081208054600194509092611d5e91859116612e7a565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff42811660208085019182525f8981526003909152948520935184549151909216600160a01b026001600160e01b03199091169190921617179055611de5846001612d2c565b5f818152600360205260409020549091506001600160a01b0316611e7457611e0d815f541190565b15611e745760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081525f878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b600260095403611f105760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a04565b6002600955565b6040516bffffffffffffffffffffffff19606085901b1660208201525f908190603401604051602081830303815290604052805190602001209050611f5d84848361237d565b95945050505050565b610907828260405180602001604052805f815250612392565b604080518082019091525f8082526020820152611f9c825f541190565b611ffb5760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610a04565b5f7f0000000000000000000000000000000000000000000000000000000000000006831061205b5761204d7f000000000000000000000000000000000000000000000000000000000000000684612d52565b612058906001612d2c565b90505b825b8181106120c4575f818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff1691830191909152156120b157949350505050565b50806120bc81612e9a565b91505061205d565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201526e1037bbb732b91037b3103a37b5b2b760891b6064820152608401610a04565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f6001600160a01b0384163b1561226857604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906121b9903390899088908890600401612eaf565b6020604051808303815f875af19250505080156121f3575060408051601f3d908101601f191682019092526121f091810190612eeb565b60015b61224e573d808015612220576040519150601f19603f3d011682016040523d82523d5f602084013e612225565b606091505b5080515f036122465760405162461bcd60e51b8152600401610a0490612d65565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061226c565b5060015b949350505050565b60606010805461091a90612b89565b60605f61228f83612666565b60010190505f8167ffffffffffffffff8111156122ae576122ae6128db565b6040519080825280601f01601f1916602001820160405280156122d8576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846122e257509392505050565b5f6001600160e01b031982166380ac58cd60e01b148061234357506001600160e01b03198216635b5e139f60e01b145b8061235e57506001600160e01b0319821663780e9d6360e01b145b806108ef57506301ffc9a760e01b6001600160e01b03198316146108ef565b5f82612389858461273d565b14949350505050565b5f546001600160a01b0384166123f45760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610a04565b6123fe815f541190565b1561244b5760405162461bcd60e51b815260206004820152601d60248201527f455243373231413a20746f6b656e20616c7265616479206d696e7465640000006044820152606401610a04565b7f00000000000000000000000000000000000000000000000000000000000000068311156124c65760405162461bcd60e51b815260206004820152602260248201527f455243373231413a207175616e7469747920746f206d696e7420746f6f2068696044820152610ced60f31b6064820152608401610a04565b6001600160a01b0384165f908152600460209081526040918290208251808401845290546001600160801b038082168352600160801b9091041691810191909152815180830190925280519091908190612521908790612e7a565b6001600160801b0316815260200185836020015161253f9190612e7a565b6001600160801b039081169091526001600160a01b038088165f8181526004602090815260408083208751978301518716600160801b0297909616969096179094558451808601865291825267ffffffffffffffff4281168386019081528883526003909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b8581101561265c5760405182906001600160a01b038916905f907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46126205f888488612176565b61263c5760405162461bcd60e51b8152600401610a0490612d65565b8161264681612d14565b925050808061265490612d14565b9150506125d5565b505f819055611eb6565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106126a45772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106126d0576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106126ee57662386f26fc10000830492506010015b6305f5e1008310612706576305f5e100830492506008015b612710831061271a57612710830492506004015b6064831061272c576064830492506002015b600a83106108ef5760010192915050565b5f81815b84518110156127815761276d8286838151811061276057612760612f06565b6020026020010151612789565b91508061277981612d14565b915050612741565b509392505050565b5f8183106127a3575f82815260208490526040902061174e565b505f9182526020526040902090565b6001600160e01b0319811681146111ce575f80fd5b5f602082840312156127d7575f80fd5b813561174e816127b2565b80356001600160a01b03811681146127f8575f80fd5b919050565b5f806040838503121561280e575f80fd5b612817836127e2565b915060208301356001600160601b0381168114612832575f80fd5b809150509250929050565b5f5b8381101561285757818101518382015260200161283f565b50505f910152565b5f815180845261287681602086016020860161283d565b601f01601f19169290920160200192915050565b602081525f61174e602083018461285f565b5f602082840312156128ac575f80fd5b5035919050565b5f80604083850312156128c4575f80fd5b6128cd836127e2565b946020939093013593505050565b634e487b7160e01b5f52604160045260245ffd5b5f67ffffffffffffffff80841115612909576129096128db565b604051601f8501601f19908116603f01168101908282118183101715612931576129316128db565b81604052809350858152868686011115612949575f80fd5b858560208301375f602087830101525050509392505050565b5f60208284031215612972575f80fd5b813567ffffffffffffffff811115612988575f80fd5b8201601f81018413612998575f80fd5b61226c848235602084016128ef565b5f805f606084860312156129b9575f80fd5b6129c2846127e2565b92506129d0602085016127e2565b9150604084013590509250925092565b5f80604083850312156129f1575f80fd5b50508035926020909101359150565b5f805f60408486031215612a12575f80fd5b83359250602084013567ffffffffffffffff80821115612a30575f80fd5b818601915086601f830112612a43575f80fd5b813581811115612a51575f80fd5b8760208260051b8501011115612a65575f80fd5b6020830194508093505050509250925092565b5f60208284031215612a88575f80fd5b61174e826127e2565b803580151581146127f8575f80fd5b5f8060408385031215612ab1575f80fd5b612aba836127e2565b9150612ac860208401612a91565b90509250929050565b5f805f8060808587031215612ae4575f80fd5b612aed856127e2565b9350612afb602086016127e2565b925060408501359150606085013567ffffffffffffffff811115612b1d575f80fd5b8501601f81018713612b2d575f80fd5b612b3c878235602084016128ef565b91505092959194509250565b5f60208284031215612b58575f80fd5b61174e82612a91565b5f8060408385031215612b72575f80fd5b612b7b836127e2565b9150612ac8602084016127e2565b600181811c90821680612b9d57607f821691505b602082108103612bbb57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610b39575f81815260208120601f850160051c81016020861015612be75750805b601f850160051c820191505b81811015611eb657828155600101612bf3565b815167ffffffffffffffff811115612c2057612c206128db565b612c3481612c2e8454612b89565b84612bc1565b602080601f831160018114612c67575f8415612c505750858301515b5f19600386901b1c1916600185901b178555611eb6565b5f85815260208120601f198616915b82811015612c9557888601518255948401946001909101908401612c76565b5085821015612cb257878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176108ef576108ef612cc2565b634e487b7160e01b5f52601260045260245ffd5b5f82612d0f57612d0f612ced565b500490565b5f60018201612d2557612d25612cc2565b5060010190565b808201808211156108ef576108ef612cc2565b5f82612d4d57612d4d612ced565b500690565b818103818111156108ef576108ef612cc2565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b5f84516020612dca8285838a0161283d565b855191840191612ddd8184848a0161283d565b85549201915f90612ded81612b89565b60018281168015612e055760018114612e1a57612e43565b60ff1984168752821515830287019450612e43565b895f52855f205f5b84811015612e3b57815489820152908301908701612e22565b505082870194505b50929a9950505050505050505050565b6001600160801b03828116828216039080821115612e7357612e73612cc2565b5092915050565b6001600160801b03818116838216019080821115612e7357612e73612cc2565b5f81612ea857612ea8612cc2565b505f190190565b6001600160a01b03858116825284166020820152604081018390526080606082018190525f90612ee19083018461285f565b9695505050505050565b5f60208284031215612efb575f80fd5b815161174e816127b2565b634e487b7160e01b5f52603260045260245ffdfea26469706673582212202303dd761e27aeaf76ce566d76eb4870586d503a3ec994262a7dbdcb5bb319c464736f6c63430008140033",
    "contract_name": "OptimusDogs",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBatchSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AmountForPublic_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AmountforTeam_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_hiddenMetadataUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountNotMultipleOfBatchSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxPerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxPerPublic\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxPerTeam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxPerTransaction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleNotInWLOGPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AmountForPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AmountforTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OG_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_mintedPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hiddenMetadataUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchSizeForWL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerAddressDuringMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootOG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootWL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintForOG\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintForPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintForTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintForWL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTeamMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hiddenMetadataUri\",\"type\":\"string\"}],\"name\":\"setHiddenMetadataUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRootOG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRootWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"setSalePhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"name\":\"setUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\\r\\n *\\r\\n * Does not support burning tokens to address(0).\\r\\n */\\r\\ncontract ERC721A is\\r\\n  Context,\\r\\n  ERC165,\\r\\n  IERC721,\\r\\n  IERC721Metadata,\\r\\n  IERC721Enumerable\\r\\n{\\r\\n  using Address for address;\\r\\n  using Strings for uint256;\\r\\n\\r\\n  struct TokenOwnership {\\r\\n    address addr;\\r\\n    uint64 startTimestamp;\\r\\n  }\\r\\n\\r\\n  struct AddressData {\\r\\n    uint128 balance;\\r\\n    uint128 numberMinted;\\r\\n  }\\r\\n\\r\\n  uint256 private currentIndex = 0;\\r\\n\\r\\n  uint256 internal immutable collectionSize;\\r\\n  uint256 internal immutable maxBatchSize;\\r\\n\\r\\n  // Token name\\r\\n  string private _name;\\r\\n\\r\\n  // Token symbol\\r\\n  string private _symbol;\\r\\n\\r\\n  // Mapping from token ID to ownership details\\r\\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\r\\n  mapping(uint256 => TokenOwnership) private _ownerships;\\r\\n\\r\\n  // Mapping owner address to address data\\r\\n  mapping(address => AddressData) private _addressData;\\r\\n\\r\\n  // Mapping from token ID to approved address\\r\\n  mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n  // Mapping from owner to operator approvals\\r\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n  /**\\r\\n   * @dev\\r\\n   * `maxBatchSize` refers to how much a minter can mint at a time.\\r\\n   * `collectionSize_` refers to how many tokens are in the collection.\\r\\n   */\\r\\n  constructor(\\r\\n    string memory name_,\\r\\n    string memory symbol_,\\r\\n    uint256 maxBatchSize_,\\r\\n    uint256 collectionSize_\\r\\n  ) {\\r\\n    require(\\r\\n      collectionSize_ > 0,\\r\\n      \\\"ERC721A: collection must have a nonzero supply\\\"\\r\\n    );\\r\\n    require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n    maxBatchSize = maxBatchSize_;\\r\\n    collectionSize = collectionSize_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return currentIndex;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n   */\\r\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\r\\n    require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\r\\n    return index;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n   * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\\r\\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\r\\n   */\\r\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\r\\n    uint256 numMintedSoFar = totalSupply();\\r\\n    uint256 tokenIdsIdx = 0;\\r\\n    address currOwnershipAddr = address(0);\\r\\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\\r\\n      TokenOwnership memory ownership = _ownerships[i];\\r\\n      if (ownership.addr != address(0)) {\\r\\n        currOwnershipAddr = ownership.addr;\\r\\n      }\\r\\n      if (currOwnershipAddr == owner) {\\r\\n        if (tokenIdsIdx == index) {\\r\\n          return i;\\r\\n        }\\r\\n        tokenIdsIdx++;\\r\\n      }\\r\\n    }\\r\\n    revert(\\\"ERC721A: unable to get token of owner by index\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(ERC165, IERC165)\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      interfaceId == type(IERC721).interfaceId ||\\r\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n      interfaceId == type(IERC721Enumerable).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address owner) public view override returns (uint256) {\\r\\n    require(owner != address(0), \\\"ERC721A: balance query for the zero address\\\");\\r\\n    return uint256(_addressData[owner].balance);\\r\\n  }\\r\\n\\r\\n  function _numberMinted(address owner) internal view returns (uint256) {\\r\\n    require(\\r\\n      owner != address(0),\\r\\n      \\\"ERC721A: number minted query for the zero address\\\"\\r\\n    );\\r\\n    return uint256(_addressData[owner].numberMinted);\\r\\n  }\\r\\n\\r\\n  function ownershipOf(uint256 tokenId)\\r\\n    internal\\r\\n    view\\r\\n    returns (TokenOwnership memory)\\r\\n  {\\r\\n    require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\r\\n\\r\\n    uint256 lowestTokenToCheck;\\r\\n    if (tokenId >= maxBatchSize) {\\r\\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\\r\\n    }\\r\\n\\r\\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\r\\n      TokenOwnership memory ownership = _ownerships[curr];\\r\\n      if (ownership.addr != address(0)) {\\r\\n        return ownership;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    revert(\\\"ERC721A: unable to determine the owner of token\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-ownerOf}.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n    return ownershipOf(tokenId).addr;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-name}.\\r\\n   */\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-symbol}.\\r\\n   */\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-tokenURI}.\\r\\n   */\\r\\n  function tokenURI(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (string memory)\\r\\n  {\\r\\n    require(\\r\\n      _exists(tokenId),\\r\\n      \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n    );\\r\\n\\r\\n    string memory baseURI = _baseURI();\\r\\n    return\\r\\n      bytes(baseURI).length > 0\\r\\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\\r\\n        : \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n   * by default, can be overriden in child contracts.\\r\\n   */\\r\\n  function _baseURI() internal view virtual returns (string memory) {\\r\\n    return \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-approve}.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) public override {\\r\\n    address owner = ERC721A.ownerOf(tokenId);\\r\\n    require(to != owner, \\\"ERC721A: approval to current owner\\\");\\r\\n\\r\\n    require(\\r\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n      \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\r\\n    );\\r\\n\\r\\n    _approve(to, tokenId, owner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-getApproved}.\\r\\n   */\\r\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\r\\n    require(_exists(tokenId), \\\"ERC721A: approved query for nonexistent token\\\");\\r\\n\\r\\n    return _tokenApprovals[tokenId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-setApprovalForAll}.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool approved) public override {\\r\\n    require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\r\\n\\r\\n    _operatorApprovals[_msgSender()][operator] = approved;\\r\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-isApprovedForAll}.\\r\\n   */\\r\\n  function isApprovedForAll(address owner, address operator)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _operatorApprovals[owner][operator];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-transferFrom}.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public override {\\r\\n    _transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public override {\\r\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) public override {\\r\\n    _transfer(from, to, tokenId);\\r\\n    require(\\r\\n      _checkOnERC721Received(from, to, tokenId, _data),\\r\\n      \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns whether `tokenId` exists.\\r\\n   *\\r\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Tokens start existing when they are minted (`_mint`),\\r\\n   */\\r\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n    return tokenId < currentIndex;\\r\\n  }\\r\\n\\r\\n  function _safeMint(address to, uint256 quantity) internal {\\r\\n    _safeMint(to, quantity, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - there must be `quantity` tokens remaining unminted in the total collection.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `quantity` cannot be larger than the max batch size.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _safeMint(\\r\\n    address to,\\r\\n    uint256 quantity,\\r\\n    bytes memory _data\\r\\n  ) internal {\\r\\n    uint256 startTokenId = currentIndex;\\r\\n    require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\r\\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\r\\n    require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\r\\n    require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\r\\n\\r\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n    AddressData memory addressData = _addressData[to];\\r\\n    _addressData[to] = AddressData(\\r\\n      addressData.balance + uint128(quantity),\\r\\n      addressData.numberMinted + uint128(quantity)\\r\\n    );\\r\\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n    uint256 updatedIndex = startTokenId;\\r\\n\\r\\n    for (uint256 i = 0; i < quantity; i++) {\\r\\n      emit Transfer(address(0), to, updatedIndex);\\r\\n      require(\\r\\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\r\\n        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n      );\\r\\n      updatedIndex++;\\r\\n    }\\r\\n\\r\\n    currentIndex = updatedIndex;\\r\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` from `from` to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) private {\\r\\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\r\\n\\r\\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\r\\n      getApproved(tokenId) == _msgSender() ||\\r\\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\\r\\n\\r\\n    require(\\r\\n      isApprovedOrOwner,\\r\\n      \\\"ERC721A: transfer caller is not owner nor approved\\\"\\r\\n    );\\r\\n\\r\\n    require(\\r\\n      prevOwnership.addr == from,\\r\\n      \\\"ERC721A: transfer from incorrect owner\\\"\\r\\n    );\\r\\n    require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n    // Clear approvals from the previous owner\\r\\n    _approve(address(0), tokenId, prevOwnership.addr);\\r\\n\\r\\n    _addressData[from].balance -= 1;\\r\\n    _addressData[to].balance += 1;\\r\\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\r\\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n    uint256 nextTokenId = tokenId + 1;\\r\\n    if (_ownerships[nextTokenId].addr == address(0)) {\\r\\n      if (_exists(nextTokenId)) {\\r\\n        _ownerships[nextTokenId] = TokenOwnership(\\r\\n          prevOwnership.addr,\\r\\n          prevOwnership.startTimestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Transfer(from, to, tokenId);\\r\\n    _afterTokenTransfers(from, to, tokenId, 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve `to` to operate on `tokenId`\\r\\n   *\\r\\n   * Emits a {Approval} event.\\r\\n   */\\r\\n  function _approve(\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    address owner\\r\\n  ) private {\\r\\n    _tokenApprovals[tokenId] = to;\\r\\n    emit Approval(owner, to, tokenId);\\r\\n  }\\r\\n\\r\\n  uint256 public nextOwnerToExplicitlySet = 0;\\r\\n\\r\\n  /**\\r\\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\r\\n   */\\r\\n  function _setOwnersExplicit(uint256 quantity) internal {\\r\\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\r\\n    require(quantity > 0, \\\"quantity must be nonzero\\\");\\r\\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\r\\n    if (endIndex > collectionSize - 1) {\\r\\n      endIndex = collectionSize - 1;\\r\\n    }\\r\\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\r\\n    require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\r\\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\r\\n      if (_ownerships[i].addr == address(0)) {\\r\\n        TokenOwnership memory ownership = ownershipOf(i);\\r\\n        _ownerships[i] = TokenOwnership(\\r\\n          ownership.addr,\\r\\n          ownership.startTimestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n    nextOwnerToExplicitlySet = endIndex + 1;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n   * The call is not executed if the target address is not a contract.\\r\\n   *\\r\\n   * @param from address representing the previous owner of the given token ID\\r\\n   * @param to target address that will receive the tokens\\r\\n   * @param tokenId uint256 ID of the token to be transferred\\r\\n   * @param _data bytes optional data to send along with the call\\r\\n   * @return bool whether the call correctly returned the expected magic value\\r\\n   */\\r\\n  function _checkOnERC721Received(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) private returns (bool) {\\r\\n    if (to.isContract()) {\\r\\n      try\\r\\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\r\\n      returns (bytes4 retval) {\\r\\n        return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n      } catch (bytes memory reason) {\\r\\n        if (reason.length == 0) {\\r\\n          revert(\\\"ERC721A: transfer to non ERC721Receiver implementer\\\");\\r\\n        } else {\\r\\n          assembly {\\r\\n            revert(add(32, reason), mload(reason))\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n   *\\r\\n   * startTokenId - the first token id to be transferred\\r\\n   * quantity - the amount to be transferred\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n   * transferred to `to`.\\r\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n   */\\r\\n  function _beforeTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n   * minting.\\r\\n   *\\r\\n   * startTokenId - the first token id to be transferred\\r\\n   * quantity - the amount to be transferred\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   */\\r\\n  function _afterTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n}\"\r\n    },\r\n    \"contracts/OptimusDogs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./ERC721A.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nerror SaleNotActive();\\nerror SaleNotInWLOGPhase();\\nerror InvalidMerkleProof();\\nerror ExceedsMaxPerTransaction();\\nerror ExceedsMaxPerAddress();\\nerror ExceedsMaxSupply();\\nerror ExceedsMaxPerPublic();\\nerror InsufficientPayment();\\nerror TransferFailed();\\nerror ExceedsMaxPerTeam();\\nerror AmountNotMultipleOfBatchSize();\\nerror LargerCollectionSizeNeeded();\\n\\ncontract OptimusDogs is ERC721A, Ownable, ReentrancyGuard, ERC2981 {\\n    using Strings for uint256;\\n    \\n\\n    uint256 public MINT_PRICE = 0.04 ether; \\n    uint256 public WL_PRICE = 0.03 ether; \\n    uint256 public OG_PRICE = 0.026 ether; \\n    uint256 public immutable maxPerAddressDuringMint;\\n    uint256 public immutable AmountforTeam;\\n    uint256 public immutable AmountForPublic;\\n    uint256 public immutable maxBatchSizeForWL;\\n    uint256 public  remainingTeamMints;\\n    string public uriPrefix = '';\\n    string public uriSuffix = '.json';\\n    string public hiddenMetadataUri;\\n    \\n    uint256 public salePhase = 0; // 0 = no sale, 1 = WL & OG phase, 2 = public phase\\n\\n\\n    bytes32 public merkleRootWL;\\n    bytes32 public merkleRootOG;\\n\\n    bool public revealed = false;\\n\\n    \\n    \\n\\n    \\n    mapping(address => uint256) public _mintedPerAddress;\\n    \\n\\n    constructor(\\n        uint256 maxBatchSize_,\\n        uint256 collectionSize_,\\n        uint256 AmountForPublic_,\\n        uint256 AmountforTeam_,\\n        string memory _hiddenMetadataUri\\n    ) ERC721A(\\\"OptimusDogs\\\", \\\"OPDOGS\\\", maxBatchSize_, collectionSize_) {\\n        _setDefaultRoyalty(msg.sender, 500); // 5% royalties\\n        setHiddenMetadataUri(_hiddenMetadataUri);\\n        maxPerAddressDuringMint = maxBatchSize_;\\n        maxBatchSizeForWL = maxBatchSize_ / 2;\\n        AmountForPublic = AmountForPublic_;\\n        AmountforTeam = AmountforTeam_;\\n        remainingTeamMints = AmountforTeam_;\\n        require(\\n            AmountForPublic_ <= collectionSize_,\\n            \\\"larger collection size needed\\\"\\n        );\\n\\n    }\\n\\n    function _verifyMerkleProof(address account, bytes32[] memory proof, bytes32 merkleRoot) private pure returns (bool) {\\n        bytes32 leaf = keccak256(abi.encodePacked(account));\\n        return MerkleProof.verify(proof, merkleRoot, leaf);\\n    }\\n\\n   \\n\\n     function setSalePhase(uint256 phase) external onlyOwner {\\n        salePhase = phase;\\n    }\\n    \\n    function setMerkleRootWL(bytes32 merkleRoot) external onlyOwner {\\n        merkleRootWL = merkleRoot;\\n    }\\n\\n    function setMerkleRootOG(bytes32 merkleRoot) external onlyOwner {\\n        merkleRootOG = merkleRoot;\\n    }\\n\\n\\n\\n\\n    function mintForTeam(uint256 amount) external nonReentrant onlyOwner {\\n        if (totalSupply() + amount > collectionSize) revert ExceedsMaxSupply();\\n        if (remainingTeamMints < amount) revert ExceedsMaxPerTeam();\\n        if (amount % maxBatchSize != 0) revert AmountNotMultipleOfBatchSize();\\n        \\n        uint256 SizeforTeam = amount / maxBatchSize;\\n        for (uint256 i = 0; i < SizeforTeam ; i++) {\\n            _safeMint(msg.sender, maxBatchSize);\\n        }\\n        \\n        remainingTeamMints -= amount; \\n        \\n    }\\n    \\n    function mintForWL(uint256 amount, bytes32[] calldata merkleProof) external payable nonReentrant {\\n        if (salePhase != 1) revert SaleNotInWLOGPhase();\\n        if (!_verifyMerkleProof(msg.sender, merkleProof, merkleRootWL)) revert InvalidMerkleProof();\\n        if (amount > maxBatchSizeForWL) revert ExceedsMaxPerTransaction();\\n        if (_mintedPerAddress[msg.sender] + amount > maxBatchSizeForWL) revert ExceedsMaxPerAddress();\\n        if (totalSupply() + amount > AmountForPublic) revert ExceedsMaxPerPublic();\\n        \\n        uint256 totalPrice = WL_PRICE * amount;\\n        if (msg.value < totalPrice) revert InsufficientPayment();\\n        _mintedPerAddress[msg.sender] += amount;\\n        _safeMint(msg.sender, amount);\\n    }\\n\\n    function mintForOG(uint256 amount, bytes32[] calldata merkleProof) external payable nonReentrant {\\n        if (salePhase != 1) revert SaleNotInWLOGPhase();\\n        if (!_verifyMerkleProof(msg.sender, merkleProof, merkleRootOG)) revert InvalidMerkleProof();\\n        if (amount > maxPerAddressDuringMint) revert ExceedsMaxPerTransaction();\\n        if (_mintedPerAddress[msg.sender] + amount > maxPerAddressDuringMint) revert ExceedsMaxPerAddress();\\n        if (totalSupply() + amount > AmountForPublic) revert ExceedsMaxPerPublic();\\n        \\n        uint256 totalPrice = OG_PRICE * amount;\\n        if (msg.value < totalPrice) revert InsufficientPayment();\\n        \\n        _mintedPerAddress[msg.sender] += amount;\\n        _safeMint(msg.sender, amount);\\n    }\\n\\n\\n    function mintForPublic(uint256 amount) external payable nonReentrant {\\n        if (salePhase != 2) revert SaleNotActive();\\n        if (amount > maxBatchSizeForWL) revert ExceedsMaxPerTransaction();\\n        if (_mintedPerAddress[msg.sender] + amount > maxBatchSizeForWL) revert ExceedsMaxPerAddress();\\n        if (totalSupply() + amount > AmountForPublic) revert ExceedsMaxPerPublic();\\n\\n        _mintedPerAddress[msg.sender] += amount; \\n\\n        uint256 totalPrice = MINT_PRICE * amount ; \\n        if (msg.value < totalPrice) revert InsufficientPayment();\\n        \\n        _safeMint(msg.sender, amount);\\n        \\n    }\\n    \\n\\n    \\n    \\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) public onlyOwner {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }    \\n\\n    \\n\\n   function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n      require(_exists(_tokenId), 'ERC721Metadata: URI query for nonexistent token');\\n\\n      if (revealed == false) {\\n        return hiddenMetadataUri;\\n      }\\n      \\n      string memory currentBaseURI = _baseURI();\\n      return bytes(currentBaseURI).length > 0\\n         ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix))\\n         : '';\\n    }\\n\\n   function setRevealed(bool _state) public onlyOwner {\\n     revealed = _state;\\n    }\\n\\n    function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {\\n        hiddenMetadataUri = _hiddenMetadataUri;\\n    }\\n\\n    function setUriPrefix(string memory _uriPrefix) public onlyOwner {\\n        \\n        uriPrefix = _uriPrefix;\\n    }\\n\\n  function setUriSuffix(string memory _uriSuffix) public onlyOwner {\\n     uriSuffix = _uriSuffix;\\n    }\\n\\n\\n  function _baseURI() internal view virtual override returns (string memory) {\\n     return uriPrefix;\\n    }\\n\\n\\n    function withdrawMoney() external onlyOwner nonReentrant {\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721A, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
    "etherscan_verified": true
}