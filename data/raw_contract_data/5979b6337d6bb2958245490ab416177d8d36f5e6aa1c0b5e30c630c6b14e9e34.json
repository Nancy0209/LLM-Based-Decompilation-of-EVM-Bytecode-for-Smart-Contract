{
    "address": "0xe3023a720d6f4d03b78763EDB3587f123565Cc6D",
    "tx_hash": "5979b6337d6bb2958245490ab416177d8d36f5e6aa1c0b5e30c630c6b14e9e34",
    "block_number": 18007170,
    "timestamp": 1693153463,
    "gas_used_in_creation": 1863801,
    "creation_bytecode": "608060405234801561001057600080fd5b5061001a3361018e565b60018055600280546001600160a01b0319908116730b4663216b812e4a2f0fc2029ff1232958f4bf8c179091556004805460ff19169055660110d9316ec0006003556007805482167379595b395bd606f175e2fed0b3dc0eb7610de351179055600e805482167314e613ac84a31f709eadbdf89c6cc390fdc9540a179055600f8054821673f4030086522a5beea4988f8ca5b36dbc97bee88c179055601080548216735f4ec3df9cbd43714fe2740f5e3616155c5b8419179055601180548216733e7d1eab13ad0104d2750b8863b489d65364e32d17905560128054821673a2f78ab2355fe2f984d808b5cee7fd0a93d5270e179055600a80548216732260fac5e5542a773aa44fbcfedf7c193bc2c599179055600b8054821673418d75f65a02b3d53b2418fb8e1fe493759c7605179055600c8054821673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48179055600d805490911673dac17f958d2ee523a2206206994597c13d831ec71790556101de565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611af1806101ed6000396000f3fe6080604052600436106101405760003560e01c8063715018a6116100b6578063aa6049471161006f578063aa604947146103b8578063b94fe917146103e5578063e6b2603b14610405578063efe0942f1461041a578063f2fde38b1461044f578063f5ac63191461046f57600080fd5b8063715018a6146102ba5780637660356b146102cf578063809dab6a146102ef5780638da5cb5b14610304578063a85c38ef14610322578063a8602fea1461039857600080fd5b8063573761981161010857806357376198146101cf5780635c975abb146101ef57806361d027b31461021e5780636a61e5fc146102565780636f3b60d6146102765780636ffe5b061461029a57600080fd5b806302c929b4146101455780630b41606914610167578063144fa6d71461018757806335831798146101a7578063537820bf146101af575b600080fd5b34801561015157600080fd5b5061016561016036600461164c565b610485565b005b34801561017357600080fd5b5061016561018236600461167e565b61051c565b34801561019357600080fd5b506101656101a23660046116ef565b6105a1565b6101656105ed565b3480156101bb57600080fd5b506101656101ca36600461170c565b610804565b3480156101db57600080fd5b506101656101ea366004611768565b61087e565b3480156101fb57600080fd5b506004546102099060ff1681565b60405190151581526020015b60405180910390f35b34801561022a57600080fd5b5060075461023e906001600160a01b031681565b6040516001600160a01b039091168152602001610215565b34801561026257600080fd5b50610165610271366004611794565b61093f565b34801561028257600080fd5b5061028c60065481565b604051908152602001610215565b3480156102a657600080fd5b506101656102b53660046117ad565b61096e565b3480156102c657600080fd5b50610165610e94565b3480156102db57600080fd5b5060025461023e906001600160a01b031681565b3480156102fb57600080fd5b5061028c610ec8565b34801561031057600080fd5b506000546001600160a01b031661023e565b34801561032e57600080fd5b5061036e61033d366004611794565b60096020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610215565b3480156103a457600080fd5b506101656103b33660046116ef565b610f3a565b3480156103c457600080fd5b506103d86103d33660046116ef565b610f86565b60405161021591906117cf565b3480156103f157600080fd5b5061028c610400366004611794565b610ff2565b34801561041157600080fd5b5061016561129e565b34801561042657600080fd5b5061043a610435366004611813565b611363565b60408051928352602083019190915201610215565b34801561045b57600080fd5b5061016561046a3660046116ef565b6113e8565b34801561047b57600080fd5b5061028c60055481565b6000546001600160a01b031633146104b85760405162461bcd60e51b81526004016104af9061183f565b60405180910390fd5b60045481151560ff9091161515036105095760405162461bcd60e51b8152602060048201526014602482015273537461747573204e6f74204368616e676564212160601b60448201526064016104af565b6004805460ff1916911515919091179055565b6000546001600160a01b031633146105465760405162461bcd60e51b81526004016104af9061183f565b600e80546001600160a01b03199081166001600160a01b0396871617909155600f8054821696861696909617909555601080548616918516919091179055601180548516918416919091179055601280549093169116179055565b6000546001600160a01b031633146105cb5760405162461bcd60e51b81526004016104af9061183f565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6105f5611480565b333461060182826114d9565b6007546040516000916001600160a01b03169083908381818185875af1925050503d806000811461064e576040519150601f19603f3d011682016040523d82523d6000602084013e610653565b606091505b50509050806106995760405162461bcd60e51b8152602060048201526012602482015271151c985b9cd858dd1a5bdb8811985a5b195960721b60448201526064016104af565b6000806106a98460016012611363565b9150915080600560008282546106bf919061188a565b925050819055506040518060800160405280336001600160a01b0316815260200185815260200142815260200183815250600960006006600081546107039061189d565b9182905550815260208082019290925260409081016000908120845181546001600160a01b0319166001600160a01b0391821617825585850151600180840191909155868501516002808501919091556060909701516003909301929092553380845260088652848420600654815494850182559085529590932090910193909355925460075491516323b872dd60e01b8152908316936323b872dd936107b093169187906004016118b6565b6020604051808303816000875af11580156107cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f391906118da565b50505050505061080260018055565b565b6000546001600160a01b0316331461082e5760405162461bcd60e51b81526004016104af9061183f565b600a80546001600160a01b039586166001600160a01b031991821617909155600b805494861694821694909417909355600c805492851692841692909217909155600d8054919093169116179055565b6000546001600160a01b031633146108a85760405162461bcd60e51b81526004016104af9061183f565b816001600160a01b031663a9059cbb6108c96000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a91906118da565b505050565b6000546001600160a01b031633146109695760405162461bcd60e51b81526004016104af9061183f565b600355565b610976611480565b336000808061098584866114d9565b85600203610a9a57600a60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af11580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0691906118f7565b9250610a13858785611363565b600a546007546040516323b872dd60e01b81529395509193506001600160a01b03908116926323b872dd92610a519289929116908a906004016118b6565b6020604051808303816000875af1158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9491906118da565b50610d3c565b85600303610b6657600b60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b91906118f7565b9250610b28858785611363565b600b546007546040516323b872dd60e01b81529395509193506001600160a01b03908116926323b872dd92610a519289929116908a906004016118b6565b85600403610c3257600d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be791906118f7565b9250610bf4858785611363565b600d546007546040516323b872dd60e01b81529395509193506001600160a01b03908116926323b872dd92610a519289929116908a906004016118b6565b85600503610cfe57600c60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb391906118f7565b9250610cc0858785611363565b600c546007546040516323b872dd60e01b81529395509193506001600160a01b03908116926323b872dd92610a519289929116908a906004016118b6565b60405162461bcd60e51b815260206004820152601360248201527257726f6e672049442053656c6563746564212160681b60448201526064016104af565b8060056000828254610d4e919061188a565b925050819055506040518060800160405280336001600160a01b031681526020018681526020014281526020018381525060096000600660008154610d929061189d565b9182905550815260208082019290925260409081016000908120845181546001600160a01b0319166001600160a01b0391821617825585850151600180840191909155868501516002808501919091556060909701516003909301929092553380845260088652848420600654815494850182559085529590932090910193909355925460075491516323b872dd60e01b8152908316936323b872dd93610e3f93169187906004016118b6565b6020604051808303816000875af1158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8291906118da565b5050505050610e9060018055565b5050565b6000546001600160a01b03163314610ebe5760405162461bcd60e51b81526004016104af9061183f565b61080260006115db565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3591906118f7565b905090565b6000546001600160a01b03163314610f645760405162461bcd60e51b81526004016104af9061183f565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600860209081526040808320805482518185028101850190935280835260609493830182828015610fe557602002820191906000526020600020905b815481526020019060010190808311610fd1575b5093979650505050505050565b6000808260010361107c57601060009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611050573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611074919061192f565b509193505050505b8260020361110357600f60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb919061192f565b509193505050505b8260030361118a57600e60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561115e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611182919061192f565b509193505050505b8260040361121157601160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156111e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611209919061192f565b509193505050505b8260050361129857601260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561126c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611290919061192f565b509193505050505b92915050565b6000546001600160a01b031633146112c85760405162461bcd60e51b81526004016104af9061183f565b600080546040516001600160a01b039091169047908381818185875af1925050503d8060008114611315576040519150601f19603f3d011682016040523d82523d6000602084013e61131a565b606091505b50509050806113605760405162461bcd60e51b8152602060048201526012602482015271151c985b9cd858dd1a5bdb8811985a5b195960721b60448201526064016104af565b50565b6000808061137284601261197f565b9050600061137f86610ff2565b9050611390816402540be40061162b565b905081156113b0576113a382600a611a76565b6113ad9088611a82565b96505b60006113bc8289611a82565b90506000600354838a6113cf9190611a82565b6113d99190611a99565b99919850909650505050505050565b6000546001600160a01b031633146114125760405162461bcd60e51b81526004016104af9061183f565b6001600160a01b0381166114775760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104af565b611360816115db565b6002600154036114d25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104af565b6002600155565b60045460ff16156115225760405162461bcd60e51b815260206004820152601360248201527243726f776473616c653a20506175736564212160681b60448201526064016104af565b6001600160a01b03821661158b5760405162461bcd60e51b815260206004820152602a60248201527f43726f776473616c653a2062656e656669636961727920697320746865207a65604482015269726f206164647265737360b01b60648201526084016104af565b80600003610e905760405162461bcd60e51b815260206004820152601960248201527f43726f776473616c653a20776569416d6f756e7420697320300000000000000060448201526064016104af565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006116378284611a82565b9392505050565b801515811461136057600080fd5b60006020828403121561165e57600080fd5b81356116378161163e565b6001600160a01b038116811461136057600080fd5b600080600080600060a0868803121561169657600080fd5b85356116a181611669565b945060208601356116b181611669565b935060408601356116c181611669565b925060608601356116d181611669565b915060808601356116e181611669565b809150509295509295909350565b60006020828403121561170157600080fd5b813561163781611669565b6000806000806080858703121561172257600080fd5b843561172d81611669565b9350602085013561173d81611669565b9250604085013561174d81611669565b9150606085013561175d81611669565b939692955090935050565b6000806040838503121561177b57600080fd5b823561178681611669565b946020939093013593505050565b6000602082840312156117a657600080fd5b5035919050565b600080604083850312156117c057600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015611807578351835292840192918401916001016117eb565b50909695505050505050565b60008060006060848603121561182857600080fd5b505081359360208301359350604090920135919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561129857611298611874565b6000600182016118af576118af611874565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156118ec57600080fd5b81516116378161163e565b60006020828403121561190957600080fd5b5051919050565b805169ffffffffffffffffffff8116811461192a57600080fd5b919050565b600080600080600060a0868803121561194757600080fd5b61195086611910565b945060208601519350604086015192506060860151915061197360808701611910565b90509295509295909350565b8181038181111561129857611298611874565b600181815b808511156119cd5781600019048211156119b3576119b3611874565b808516156119c057918102915b93841c9390800290611997565b509250929050565b6000826119e457506001611298565b816119f157506000611298565b8160018114611a075760028114611a1157611a2d565b6001915050611298565b60ff841115611a2257611a22611874565b50506001821b611298565b5060208310610133831016604e8410600b8410161715611a50575081810a611298565b611a5a8383611992565b8060001904821115611a6e57611a6e611874565b029392505050565b600061163783836119d5565b808202811582820484141761129857611298611874565b600082611ab657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ad31dc0b83b1879f86343feeb440383bb12ac0506e50fc77fff3b5d9ea19d9b364736f6c63430008120033",
    "runtime_bytecode": "",
    "contract_name": "IUCNcoinPresale",
    "compiler_version": "v0.8.18+commit.87f61d96",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyTokenNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IUCNcoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cDecimal\",\"type\":\"uint256\"}],\"name\":\"_getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_raised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"investorOrderIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestOrderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wbtc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbnb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eth\",\"type\":\"address\"}],\"name\":\"setTokenPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wbtc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbnb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n   \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n   \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n   \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n   \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n   \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n  \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n  \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n   \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n  \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n   \r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n  \r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n   \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract IUCNcoinPresale is Ownable , ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n    IERC20 public IUCNcoin;\r\n    uint256 tokenPrice; // doller price with 8 Decimals\r\n\r\n    bool public paused;\r\n    uint256 public _raised;\r\n    uint256 public latestOrderId;\r\n\r\n    address public treasury;\r\n\r\n    struct OrderInfo {\r\n        address beneficiary;\r\n        uint256 amount;\r\n        uint256 time;\r\n        uint256 totalToken;\r\n    }\r\n    mapping(address => uint256[]) private  orderIds;\r\n    mapping(uint256 => OrderInfo) public orders;\r\n\r\n\r\n    IERC20 WBTC;\r\n    IERC20 WBNB;\r\n    IERC20 USDC;\r\n    IERC20 USDT;\r\n\r\n    AggregatorV3Interface internal BnbFeed;\r\n    AggregatorV3Interface internal BtcFeed;\r\n    AggregatorV3Interface internal EthFeed;\r\n    AggregatorV3Interface internal UsdtFeed;\r\n    AggregatorV3Interface internal UsdcFeed;\r\n    \r\n    constructor() {\r\n\r\n        IUCNcoin = IERC20(0x0B4663216B812e4a2f0Fc2029ff1232958f4bf8c);\r\n        paused = false;\r\n        tokenPrice = 300000000000000; //rate = $0,0003\r\n\r\n        treasury = address(0x79595b395bd606F175E2FeD0B3dc0Eb7610dE351);  //Presale Funds Receiver\r\n        \r\n        BnbFeed = AggregatorV3Interface(0x14e613AC84a31f709eadbdF89C6CC390fDc9540A);\r\n        BtcFeed = AggregatorV3Interface(0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c);\r\n        EthFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n        UsdtFeed = AggregatorV3Interface(0x3E7d1eAB13ad0104d2750B8863b489D65364e32D);\r\n        UsdcFeed = AggregatorV3Interface(0xA2F78ab2355fe2f984D808B5CeE7FD0A93D5270E);\r\n\r\n        WBTC = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n        WBNB = IERC20(0x418D75f65a02b3D53B2418FB8E1fe493759c7605);\r\n        USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n        USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n    }\r\n\r\n    function investorOrderIds(address investor)\r\n        external\r\n        view\r\n        returns (uint256[] memory ids)\r\n    {\r\n        uint256[] memory arr = orderIds[investor];\r\n        return arr;\r\n    }\r\n\r\n    //1. ETH, \r\n    function BuyTokenNative() public nonReentrant payable {\r\n        address beneficiary = msg.sender;\r\n        uint256 _amount = msg.value;\r\n        _preValidatePurchase(beneficiary,_amount);\r\n        (bool os,) = payable(treasury).call{value: _amount}(\"\");\r\n        require(os,\"Transaction Failed\");\r\n        \r\n        (uint tokenAmount,uint totalUsd) = _getTokenAmount(_amount,1,18);\r\n          \r\n        _raised += totalUsd;\r\n\r\n        orders[++latestOrderId] = OrderInfo(\r\n             msg.sender,\r\n            _amount,\r\n            block.timestamp,\r\n            tokenAmount\r\n        );\r\n\r\n        orderIds[msg.sender].push(latestOrderId);\r\n        IUCNcoin.transferFrom(treasury, msg.sender, tokenAmount);\r\n    }\r\n\r\n    //2. Btc, 3. ETH, 4. Usdt, 5.Usdc\r\n    function BuyToken(uint _pid, uint _amount) public nonReentrant {\r\n        address beneficiary = msg.sender;\r\n        uint decimal;\r\n        uint tokenAmount;\r\n        uint totalUsd;\r\n        _preValidatePurchase(beneficiary,_amount);\r\n        if(_pid == 2) {\r\n            decimal = WBTC.decimals();\r\n            ( tokenAmount, totalUsd) = _getTokenAmount(_amount,_pid,decimal);\r\n            WBTC.transferFrom(beneficiary,treasury, _amount);\r\n        }\r\n        else if (_pid == 3) {\r\n            decimal = WBNB.decimals();\r\n            (tokenAmount,totalUsd) = _getTokenAmount(_amount,_pid,decimal);\r\n            WBNB.transferFrom(beneficiary,treasury, _amount);\r\n        }\r\n        else if (_pid == 4) {\r\n            decimal = USDT.decimals();\r\n            (tokenAmount,totalUsd) = _getTokenAmount(_amount,_pid,decimal);\r\n            USDT.transferFrom(beneficiary,treasury, _amount);\r\n        }\r\n        else if (_pid == 5) {\r\n            decimal = USDC.decimals();\r\n            (tokenAmount,totalUsd) = _getTokenAmount(_amount,_pid,decimal);\r\n            USDC.transferFrom(beneficiary,treasury, _amount);\r\n        }\r\n        else {\r\n            revert(\"Wrong ID Selected!!\");\r\n        }\r\n        _raised += totalUsd;\r\n\r\n        orders[++latestOrderId] = OrderInfo(\r\n             msg.sender,\r\n            _amount,\r\n            block.timestamp,\r\n            tokenAmount\r\n        );\r\n\r\n        orderIds[msg.sender].push(latestOrderId);\r\n           \r\n        IUCNcoin.transferFrom(treasury, msg.sender, tokenAmount);\r\n       \r\n    }\r\n\r\n    function _getTokenAmount(uint256 weiAmount,uint _pid,uint _cDecimal) public view returns (uint256,uint256) {\r\n        uint256 CurrencyDecimal = 18 - _cDecimal;\r\n        uint usd =  uint256(getLatestPrice(_pid));\r\n        usd = usd.mul(10**10);  \r\n        if(CurrencyDecimal > 0){\r\n            weiAmount = weiAmount * 10**CurrencyDecimal;\r\n        }\r\n        uint totalUsd = weiAmount * usd;\r\n        uint totalToken = weiAmount * usd / tokenPrice;\r\n        return (totalToken,totalUsd);\r\n    }\r\n\r\n    //@Param to get live price,\r\n    //1. ETH, 2. Btc, 3. BNB, 4. Usdt, 5.Usdc\r\n    function getLatestPrice(uint _pid) public view returns (int) {\r\n        int price;\r\n        if(_pid == 1) (,price,,,) = EthFeed.latestRoundData();   \r\n        if(_pid == 2) (,price,,,) = BtcFeed.latestRoundData();   \r\n        if(_pid == 3) (,price,,,) = BnbFeed.latestRoundData();   \r\n        if(_pid == 4) (,price,,,) = UsdtFeed.latestRoundData();  \r\n        if(_pid == 5) (,price,,,) = UsdcFeed.latestRoundData(); \r\n        return price;\r\n    }\r\n\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        require(!paused,\"Crowdsale: Paused!!\");\r\n        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\r\n        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\r\n    }\r\n\r\n    function setPauser(bool _status) public onlyOwner {\r\n        require(paused != _status,\"Status Not Changed!!\");\r\n        paused = _status;\r\n    }\r\n\r\n    function getAvailableBalance() public view returns (uint) {\r\n        return IUCNcoin.balanceOf(address(this));\r\n    }\r\n\r\n    function rescueFunds() public onlyOwner {\r\n        (bool os,) = payable(owner()).call{value: address(this).balance}(\"\");\r\n        require(os,\"Transaction Failed\");\r\n    }\r\n\r\n    function rescueTokens(IERC20 _token, uint _amount) public onlyOwner {\r\n        _token.transfer(owner(), _amount);\r\n    }\r\n\r\n    function setTreasuryWallet(address _adr) public onlyOwner {\r\n        treasury = _adr;\r\n    }\r\n\r\n    function setTokenPrice(uint _rate) public onlyOwner{\r\n        tokenPrice = _rate;\r\n    }\r\n\r\n    function setTokens(address _wbtc, address _wbnb , address _usdc , address _usdt) public onlyOwner{\r\n        WBTC = IERC20(_wbtc);\r\n        WBNB = IERC20(_wbnb);\r\n        USDC = IERC20(_usdc);\r\n        USDT = IERC20(_usdt);\r\n    }\r\n\r\n    function setTokenPrices(address _wbtc, address _wbnb , address _usdc , address _usdt , address _eth) public onlyOwner{\r\n        BnbFeed = AggregatorV3Interface(_wbnb);\r\n        BtcFeed = AggregatorV3Interface(_wbtc);\r\n        EthFeed = AggregatorV3Interface(_eth);\r\n        UsdtFeed = AggregatorV3Interface(_usdt);\r\n        UsdcFeed = AggregatorV3Interface(_usdc);\r\n    }\r\n\r\n    function setToken(address _token) public onlyOwner{\r\n        IUCNcoin = IERC20(_token);\r\n    }\r\n\r\n    \r\n\r\n}",
    "etherscan_verified": true
}