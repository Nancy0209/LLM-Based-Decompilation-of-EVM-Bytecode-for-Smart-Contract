{
    "address": "0x926911A3809B6e15FA9dab87A4beAE0E83361C75",
    "tx_hash": "43f630dd07b289167e2d5e8c6533aa7a2fc8ebf5c69204e4e719880c53a35e5a",
    "block_number": 18001585,
    "timestamp": 1693085987,
    "gas_used_in_creation": 5554559,
    "creation_bytecode": "60c0604052600b805462ffffff19166001908117909155600f805460ff191690911790553480156200003057600080fd5b506040518060400160405280600681526020016544615065706560d01b8152506040518060400160405280600681526020016544415045504560d01b81525081600390805190602001906200008792919062000717565b5080516200009d90600490602084019062000717565b5050506000620000b26200043560201b60201c565b600580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350737a250d5630b4cf539739df2c5dacb4c659f2488d6200012281600162000439565b6001600160a01b03811660808190526040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa1580156200016d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001939190620007bd565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002079190620007bd565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801562000255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200027b9190620007bd565b6001600160a01b031660a08190526200029690600162000439565b60a051620002a6906001620004b3565b6006600080600981806be04ee0ccb27ac646ac0000006103e8620002cc826014620007fe565b620002d8919062000820565b6008556103e8620002eb826014620007fe565b620002f7919062000820565b600a556127106200030a826005620007fe565b62000316919062000820565b6009556011879055601286905560138590558462000335878962000843565b62000341919062000843565b6010556015849055601683905560178290558162000360848662000843565b6200036c919062000843565b6014556006805473337c4942292a9ced90bcda63fd39d30384d06a676001600160a01b03199182168117909255600780549091169091179055620003c4620003bc6005546001600160a01b031690565b600162000507565b620003d130600162000507565b620003e061dead600162000507565b620003ff620003f76005546001600160a01b031690565b600162000439565b6200040c30600162000439565b6200041b61dead600162000439565b620004273382620005b1565b50505050505050506200089b565b3390565b6005546001600160a01b03163314620004885760405162461bcd60e51b815260206004820181905260248201526000805160206200346883398151915260448201526064015b60405180910390fd5b6001600160a01b03919091166000908152601d60205260409020805460ff1916911515919091179055565b6001600160a01b0382166000818152601e6020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6005546001600160a01b03163314620005525760405162461bcd60e51b815260206004820181905260248201526000805160206200346883398151915260448201526064016200047f565b6001600160a01b0382166000818152601c6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6001600160a01b038216620006095760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016200047f565b6200062581600254620006ad60201b620014781790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200065891839062001478620006ad821b17901c565b6001600160a01b038316600081815260208181526040808320949094559251848152919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600080620006bc838562000843565b905083811015620007105760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016200047f565b9392505050565b82805462000725906200085e565b90600052602060002090601f01602090048101928262000749576000855562000794565b82601f106200076457805160ff191683800117855562000794565b8280016001018555821562000794579182015b828111156200079457825182559160200191906001019062000777565b50620007a2929150620007a6565b5090565b5b80821115620007a25760008155600101620007a7565b600060208284031215620007d057600080fd5b81516001600160a01b03811681146200071057600080fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156200081b576200081b620007e8565b500290565b6000826200083e57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115620008595762000859620007e8565b500190565b600181811c908216806200087357607f821691505b602082108114156200089557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051612b6f620008f96000396000818161050101528181610eb201526118810152600081816103ac015281816118430152818161242a015281816124e30152818161251f0152818161259901526125f50152612b6f6000f3fe6080604052600436106103035760003560e01c80639213691311610190578063c17b5b8c116100dc578063dd62ed3e11610095578063f11a24d31161006f578063f11a24d314610928578063f2fde38b1461093e578063f63743421461095e578063f8b45b051461097457600080fd5b8063dd62ed3e146108b7578063e2f45605146108fd578063e884f2601461091357600080fd5b8063c17b5b8c14610811578063c18bc19514610831578063c876d0b914610851578063c8c8ebe41461086b578063d257b34f14610881578063d85ba063146108a157600080fd5b8063a0d82dc511610149578063aacebbe311610123578063aacebbe314610782578063b62496f5146107a2578063bbc0c742146107d2578063c0246668146107f157600080fd5b8063a0d82dc51461072c578063a457c2d714610742578063a9059cbb1461076257600080fd5b80639213691314610695578063924de9b7146106ab57806395d89b41146106cb5780639a7a23d6146106e05780639c3b4fdc146107005780639fccce321461071657600080fd5b806349bd5a5e1161024f578063715018a6116102085780637bce5a04116101e25780637bce5a041461062c5780638095d564146106425780638a8c523c146106625780638da5cb5b1461067757600080fd5b8063715018a6146105e2578063751039fc146105f75780637571336a1461060c57600080fd5b806349bd5a5e146104ef5780634a62bb65146105235780634fbee1931461053d5780636a486a8e146105765780636ddd17131461058c57806370a08231146105ac57600080fd5b80631a8145bb116102bc57806323b872dd1161029657806323b872dd146104735780632d5a5d3414610493578063313ce567146104b357806339509351146104cf57600080fd5b80631a8145bb146104275780631f3fed8f1461043d578063203e727e1461045357600080fd5b806306fdde031461030f578063095ea7b31461033a57806310d5de531461036a5780631694505e1461039a57806318160ddd146103e65780631816467f1461040557600080fd5b3661030a57005b600080fd5b34801561031b57600080fd5b5061032461098a565b60405161033191906126a1565b60405180910390f35b34801561034657600080fd5b5061035a61035536600461270e565b610a1c565b6040519015158152602001610331565b34801561037657600080fd5b5061035a61038536600461273a565b601d6020526000908152604090205460ff1681565b3480156103a657600080fd5b506103ce7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610331565b3480156103f257600080fd5b506002545b604051908152602001610331565b34801561041157600080fd5b5061042561042036600461273a565b610a33565b005b34801561043357600080fd5b506103f760195481565b34801561044957600080fd5b506103f760185481565b34801561045f57600080fd5b5061042561046e366004612757565b610ac3565b34801561047f57600080fd5b5061035a61048e366004612770565b610ba0565b34801561049f57600080fd5b506104256104ae3660046127c1565b610c09565b3480156104bf57600080fd5b5060405160128152602001610331565b3480156104db57600080fd5b5061035a6104ea36600461270e565b610c5e565b3480156104fb57600080fd5b506103ce7f000000000000000000000000000000000000000000000000000000000000000081565b34801561052f57600080fd5b50600b5461035a9060ff1681565b34801561054957600080fd5b5061035a61055836600461273a565b6001600160a01b03166000908152601c602052604090205460ff1690565b34801561058257600080fd5b506103f760145481565b34801561059857600080fd5b50600b5461035a9062010000900460ff1681565b3480156105b857600080fd5b506103f76105c736600461273a565b6001600160a01b031660009081526020819052604090205490565b3480156105ee57600080fd5b50610425610c94565b34801561060357600080fd5b5061035a610d08565b34801561061857600080fd5b506104256106273660046127c1565b610d45565b34801561063857600080fd5b506103f760115481565b34801561064e57600080fd5b5061042561065d3660046127f6565b610d9a565b34801561066e57600080fd5b50610425610df0565b34801561068357600080fd5b506005546001600160a01b03166103ce565b3480156106a157600080fd5b506103f760155481565b3480156106b757600080fd5b506104256106c6366004612822565b610e31565b3480156106d757600080fd5b50610324610e77565b3480156106ec57600080fd5b506104256106fb3660046127c1565b610e86565b34801561070c57600080fd5b506103f760135481565b34801561072257600080fd5b506103f7601a5481565b34801561073857600080fd5b506103f760175481565b34801561074e57600080fd5b5061035a61075d36600461270e565b610f66565b34801561076e57600080fd5b5061035a61077d36600461270e565b610fb5565b34801561078e57600080fd5b5061042561079d36600461273a565b610fc2565b3480156107ae57600080fd5b5061035a6107bd36600461273a565b601e6020526000908152604090205460ff1681565b3480156107de57600080fd5b50600b5461035a90610100900460ff1681565b3480156107fd57600080fd5b5061042561080c3660046127c1565b611049565b34801561081d57600080fd5b5061042561082c3660046127f6565b6110d2565b34801561083d57600080fd5b5061042561084c366004612757565b611128565b34801561085d57600080fd5b50600f5461035a9060ff1681565b34801561087757600080fd5b506103f760085481565b34801561088d57600080fd5b5061035a61089c366004612757565b6111f9565b3480156108ad57600080fd5b506103f760105481565b3480156108c357600080fd5b506103f76108d236600461283d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561090957600080fd5b506103f760095481565b34801561091f57600080fd5b5061035a611350565b34801561093457600080fd5b506103f760125481565b34801561094a57600080fd5b5061042561095936600461273a565b61138d565b34801561096a57600080fd5b506103f760165481565b34801561098057600080fd5b506103f7600a5481565b60606003805461099990612876565b80601f01602080910402602001604051908101604052809291908181526020018280546109c590612876565b8015610a125780601f106109e757610100808354040283529160200191610a12565b820191906000526020600020905b8154815290600101906020018083116109f557829003601f168201915b5050505050905090565b6000610a293384846114de565b5060015b92915050565b6005546001600160a01b03163314610a665760405162461bcd60e51b8152600401610a5d906128b1565b60405180910390fd5b6007546040516001600160a01b03918216918316907f90b8024c4923d3873ff5b9fcb43d0360d4b9217fa41225d07ba379993552e74390600090a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610aed5760405162461bcd60e51b8152600401610a5d906128b1565b670de0b6b3a76400006103e8610b0260025490565b610b0d9060016128fc565b610b17919061291b565b610b21919061291b565b811015610b885760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526e6c6f776572207468616e20302e312560881b6064820152608401610a5d565b610b9a81670de0b6b3a76400006128fc565b60085550565b6000610bad848484611603565b610bff8433610bfa85604051806060016040528060288152602001612aed602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190611eff565b6114de565b5060019392505050565b6005546001600160a01b03163314610c335760405162461bcd60e51b8152600401610a5d906128b1565b6001600160a01b03919091166000908152600e60205260409020805460ff1916911515919091179055565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610a29918590610bfa9086611478565b6005546001600160a01b03163314610cbe5760405162461bcd60e51b8152600401610a5d906128b1565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546000906001600160a01b03163314610d355760405162461bcd60e51b8152600401610a5d906128b1565b50600b805460ff19169055600190565b6005546001600160a01b03163314610d6f5760405162461bcd60e51b8152600401610a5d906128b1565b6001600160a01b03919091166000908152601d60205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610dc45760405162461bcd60e51b8152600401610a5d906128b1565b60138390556012829055601181905580610dde838561293d565b610de8919061293d565b601055505050565b6005546001600160a01b03163314610e1a5760405162461bcd60e51b8152600401610a5d906128b1565b600b805462ffff0019166201010017905543601b55565b6005546001600160a01b03163314610e5b5760405162461bcd60e51b8152600401610a5d906128b1565b600b8054911515620100000262ff000019909216919091179055565b60606004805461099990612876565b6005546001600160a01b03163314610eb05760405162461bcd60e51b8152600401610a5d906128b1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610f585760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610a5d565b610f628282611f39565b5050565b6000610a293384610bfa85604051806060016040528060258152602001612b15602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190611eff565b6000610a29338484611603565b6005546001600160a01b03163314610fec5760405162461bcd60e51b8152600401610a5d906128b1565b6006546040516001600160a01b03918216918316907fa751787977eeb3902e30e1d19ca00c6ad274a1f622c31a206e32366700b0567490600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146110735760405162461bcd60e51b8152600401610a5d906128b1565b6001600160a01b0382166000818152601c6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b031633146110fc5760405162461bcd60e51b8152600401610a5d906128b1565b60178390556016829055601581905580611116838561293d565b611120919061293d565b601455505050565b6005546001600160a01b031633146111525760405162461bcd60e51b8152600401610a5d906128b1565b670de0b6b3a76400006103e861116760025490565b6111729060056128fc565b61117c919061291b565b611186919061291b565b8110156111e15760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b6064820152608401610a5d565b6111f381670de0b6b3a76400006128fc565b600a5550565b6005546000906001600160a01b031633146112265760405162461bcd60e51b8152600401610a5d906128b1565b620186a061123360025490565b61123e9060016128fc565b611248919061291b565b8210156112b55760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610a5d565b6103e86112c160025490565b6112cc9060056128fc565b6112d6919061291b565b8211156113425760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610a5d565b50600981905560015b919050565b6005546000906001600160a01b0316331461137d5760405162461bcd60e51b8152600401610a5d906128b1565b50600f805460ff19169055600190565b6005546001600160a01b031633146113b75760405162461bcd60e51b8152600401610a5d906128b1565b6001600160a01b03811661141c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a5d565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b600080611485838561293d565b9050838110156114d75760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610a5d565b9392505050565b6001600160a01b0383166115405760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a5d565b6001600160a01b0382166115a15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a5d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166116295760405162461bcd60e51b8152600401610a5d90612955565b6001600160a01b03821661164f5760405162461bcd60e51b8152600401610a5d9061299a565b6001600160a01b0382166000908152600e602052604090205460ff1615801561169157506001600160a01b0383166000908152600e602052604090205460ff16155b6116f75760405162461bcd60e51b815260206004820152603160248201527f596f752068617665206265656e20626c61636b6c69737465642066726f6d207460448201527072616e73666572696e6720746f6b656e7360781b6064820152608401610a5d565b8061170d5761170883836000611f8d565b505050565b600b5460ff1615611bca576005546001600160a01b0384811691161480159061174457506005546001600160a01b03838116911614155b801561175857506001600160a01b03821615155b801561176f57506001600160a01b03821661dead14155b80156117855750600554600160a01b900460ff16155b15611bca57600b54610100900460ff1661181d576001600160a01b0383166000908152601c602052604090205460ff16806117d857506001600160a01b0382166000908152601c602052604090205460ff165b61181d5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610a5d565b600f5460ff1615611964576005546001600160a01b0383811691161480159061187857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b80156118b657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b1561196457326000908152600c602052604090205443116119515760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610a5d565b326000908152600c602052604090204390555b6001600160a01b0383166000908152601e602052604090205460ff1680156119a557506001600160a01b0382166000908152601d602052604090205460ff16155b15611a8957600854811115611a1a5760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610a5d565b600a546001600160a01b038316600090815260208190526040902054611a40908361293d565b1115611a845760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610a5d565b611bca565b6001600160a01b0382166000908152601e602052604090205460ff168015611aca57506001600160a01b0383166000908152601d602052604090205460ff16155b15611b4057600854811115611a845760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610a5d565b6001600160a01b0382166000908152601d602052604090205460ff16611bca57600a546001600160a01b038316600090815260208190526040902054611b86908361293d565b1115611bca5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610a5d565b3060009081526020819052604090205460095481108015908190611bf65750600b5462010000900460ff165b8015611c0c5750600554600160a01b900460ff16155b8015611c3157506001600160a01b0385166000908152601e602052604090205460ff16155b8015611c5657506001600160a01b0385166000908152601c602052604090205460ff16155b8015611c7b57506001600160a01b0384166000908152601c602052604090205460ff16155b15611ca9576005805460ff60a01b1916600160a01b179055611c9b612096565b6005805460ff60a01b191690555b6005546001600160a01b0386166000908152601c602052604090205460ff600160a01b909204821615911680611cf757506001600160a01b0385166000908152601c602052604090205460ff165b15611d00575060005b60008115611eeb576001600160a01b0386166000908152601e602052604090205460ff168015611d3257506000601454115b15611df057611d576064611d51601454886122d090919063ffffffff16565b9061234f565b905060145460165482611d6a91906128fc565b611d74919061291b565b60196000828254611d85919061293d565b9091555050601454601754611d9a90836128fc565b611da4919061291b565b601a6000828254611db5919061293d565b9091555050601454601554611dca90836128fc565b611dd4919061291b565b60186000828254611de5919061293d565b90915550611ecd9050565b6001600160a01b0387166000908152601e602052604090205460ff168015611e1a57506000601054115b15611ecd57611e396064611d51601054886122d090919063ffffffff16565b905060105460125482611e4c91906128fc565b611e56919061291b565b60196000828254611e67919061293d565b9091555050601054601354611e7c90836128fc565b611e86919061291b565b601a6000828254611e97919061293d565b9091555050601054601154611eac90836128fc565b611eb6919061291b565b60186000828254611ec7919061293d565b90915550505b8015611ede57611ede873083611f8d565b611ee881866129dd565b94505b611ef6878787611f8d565b50505050505050565b60008184841115611f235760405162461bcd60e51b8152600401610a5d91906126a1565b506000611f3084866129dd565b95945050505050565b6001600160a01b0382166000818152601e6020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b038316611fb35760405162461bcd60e51b8152600401610a5d90612955565b6001600160a01b038216611fd95760405162461bcd60e51b8152600401610a5d9061299a565b61201681604051806060016040528060268152602001612ac7602691396001600160a01b0386166000908152602081905260409020549190611eff565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546120459082611478565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016115f6565b3060009081526020819052604081205490506000601a546018546019546120bd919061293d565b6120c7919061293d565b905060008215806120d6575081155b156120e057505050565b6009546120ee9060146128fc565b831115612106576009546121039060146128fc565b92505b60006002836019548661211991906128fc565b612123919061291b565b61212d919061291b565b9050600061213b8583612391565b905047612147826123d3565b60006121534783612391565b9050600061217087611d51601854856122d090919063ffffffff16565b9050600061218d88611d51601a54866122d090919063ffffffff16565b905060008161219c84866129dd565b6121a691906129dd565b600060198190556018819055601a8190556007546040519293506001600160a01b031691849181818185875af1925050503d8060008114612203576040519150601f19603f3d011682016040523d82523d6000602084013e612208565b606091505b5090985050861580159061221c5750600081115b1561226f5761222b8782612593565b601954604080518881526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d80600081146122bc576040519150601f19603f3d011682016040523d82523d6000602084013e6122c1565b606091505b50505050505050505050505050565b6000826122df57506000610a2d565b60006122eb83856128fc565b9050826122f8858361291b565b146114d75760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610a5d565b60006114d783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612673565b60006114d783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611eff565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110612408576124086129f4565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124aa9190612a0a565b816001815181106124bd576124bd6129f4565b60200260200101906001600160a01b031690816001600160a01b031681525050612508307f0000000000000000000000000000000000000000000000000000000000000000846114de565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac9479061255d908590600090869030904290600401612a27565b600060405180830381600087803b15801561257757600080fd5b505af115801561258b573d6000803e3d6000fd5b505050505050565b6125be307f0000000000000000000000000000000000000000000000000000000000000000846114de565b60405163f305d71960e01b8152306004820181905260248201849052600060448301819052606483015260848201524260a48201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f305d71990839060c40160606040518083038185885af1158015612647573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061266c9190612a98565b5050505050565b600081836126945760405162461bcd60e51b8152600401610a5d91906126a1565b506000611f30848661291b565b600060208083528351808285015260005b818110156126ce578581018301518582016040015282016126b2565b818111156126e0576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461270b57600080fd5b50565b6000806040838503121561272157600080fd5b823561272c816126f6565b946020939093013593505050565b60006020828403121561274c57600080fd5b81356114d7816126f6565b60006020828403121561276957600080fd5b5035919050565b60008060006060848603121561278557600080fd5b8335612790816126f6565b925060208401356127a0816126f6565b929592945050506040919091013590565b8035801515811461134b57600080fd5b600080604083850312156127d457600080fd5b82356127df816126f6565b91506127ed602084016127b1565b90509250929050565b60008060006060848603121561280b57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561283457600080fd5b6114d7826127b1565b6000806040838503121561285057600080fd5b823561285b816126f6565b9150602083013561286b816126f6565b809150509250929050565b600181811c9082168061288a57607f821691505b602082108114156128ab57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612916576129166128e6565b500290565b60008261293857634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612950576129506128e6565b500190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6000828210156129ef576129ef6128e6565b500390565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612a1c57600080fd5b81516114d7816126f6565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612a775784516001600160a01b031683529383019391830191600101612a52565b50506001600160a01b03969096166060850152505050608001529392505050565b600080600060608486031215612aad57600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220f94673d6954f211d00a8f129339c660678569ed3c813ed407ae9f5958fe916ef64736f6c634300080b00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
    "runtime_bytecode": "6080604052600436106103035760003560e01c80639213691311610190578063c17b5b8c116100dc578063dd62ed3e11610095578063f11a24d31161006f578063f11a24d314610928578063f2fde38b1461093e578063f63743421461095e578063f8b45b051461097457600080fd5b8063dd62ed3e146108b7578063e2f45605146108fd578063e884f2601461091357600080fd5b8063c17b5b8c14610811578063c18bc19514610831578063c876d0b914610851578063c8c8ebe41461086b578063d257b34f14610881578063d85ba063146108a157600080fd5b8063a0d82dc511610149578063aacebbe311610123578063aacebbe314610782578063b62496f5146107a2578063bbc0c742146107d2578063c0246668146107f157600080fd5b8063a0d82dc51461072c578063a457c2d714610742578063a9059cbb1461076257600080fd5b80639213691314610695578063924de9b7146106ab57806395d89b41146106cb5780639a7a23d6146106e05780639c3b4fdc146107005780639fccce321461071657600080fd5b806349bd5a5e1161024f578063715018a6116102085780637bce5a04116101e25780637bce5a041461062c5780638095d564146106425780638a8c523c146106625780638da5cb5b1461067757600080fd5b8063715018a6146105e2578063751039fc146105f75780637571336a1461060c57600080fd5b806349bd5a5e146104ef5780634a62bb65146105235780634fbee1931461053d5780636a486a8e146105765780636ddd17131461058c57806370a08231146105ac57600080fd5b80631a8145bb116102bc57806323b872dd1161029657806323b872dd146104735780632d5a5d3414610493578063313ce567146104b357806339509351146104cf57600080fd5b80631a8145bb146104275780631f3fed8f1461043d578063203e727e1461045357600080fd5b806306fdde031461030f578063095ea7b31461033a57806310d5de531461036a5780631694505e1461039a57806318160ddd146103e65780631816467f1461040557600080fd5b3661030a57005b600080fd5b34801561031b57600080fd5b5061032461098a565b60405161033191906126a1565b60405180910390f35b34801561034657600080fd5b5061035a61035536600461270e565b610a1c565b6040519015158152602001610331565b34801561037657600080fd5b5061035a61038536600461273a565b601d6020526000908152604090205460ff1681565b3480156103a657600080fd5b506103ce7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b039091168152602001610331565b3480156103f257600080fd5b506002545b604051908152602001610331565b34801561041157600080fd5b5061042561042036600461273a565b610a33565b005b34801561043357600080fd5b506103f760195481565b34801561044957600080fd5b506103f760185481565b34801561045f57600080fd5b5061042561046e366004612757565b610ac3565b34801561047f57600080fd5b5061035a61048e366004612770565b610ba0565b34801561049f57600080fd5b506104256104ae3660046127c1565b610c09565b3480156104bf57600080fd5b5060405160128152602001610331565b3480156104db57600080fd5b5061035a6104ea36600461270e565b610c5e565b3480156104fb57600080fd5b506103ce7f0000000000000000000000001f68be2110f549e5af940aaf166f1525b6a9ee2081565b34801561052f57600080fd5b50600b5461035a9060ff1681565b34801561054957600080fd5b5061035a61055836600461273a565b6001600160a01b03166000908152601c602052604090205460ff1690565b34801561058257600080fd5b506103f760145481565b34801561059857600080fd5b50600b5461035a9062010000900460ff1681565b3480156105b857600080fd5b506103f76105c736600461273a565b6001600160a01b031660009081526020819052604090205490565b3480156105ee57600080fd5b50610425610c94565b34801561060357600080fd5b5061035a610d08565b34801561061857600080fd5b506104256106273660046127c1565b610d45565b34801561063857600080fd5b506103f760115481565b34801561064e57600080fd5b5061042561065d3660046127f6565b610d9a565b34801561066e57600080fd5b50610425610df0565b34801561068357600080fd5b506005546001600160a01b03166103ce565b3480156106a157600080fd5b506103f760155481565b3480156106b757600080fd5b506104256106c6366004612822565b610e31565b3480156106d757600080fd5b50610324610e77565b3480156106ec57600080fd5b506104256106fb3660046127c1565b610e86565b34801561070c57600080fd5b506103f760135481565b34801561072257600080fd5b506103f7601a5481565b34801561073857600080fd5b506103f760175481565b34801561074e57600080fd5b5061035a61075d36600461270e565b610f66565b34801561076e57600080fd5b5061035a61077d36600461270e565b610fb5565b34801561078e57600080fd5b5061042561079d36600461273a565b610fc2565b3480156107ae57600080fd5b5061035a6107bd36600461273a565b601e6020526000908152604090205460ff1681565b3480156107de57600080fd5b50600b5461035a90610100900460ff1681565b3480156107fd57600080fd5b5061042561080c3660046127c1565b611049565b34801561081d57600080fd5b5061042561082c3660046127f6565b6110d2565b34801561083d57600080fd5b5061042561084c366004612757565b611128565b34801561085d57600080fd5b50600f5461035a9060ff1681565b34801561087757600080fd5b506103f760085481565b34801561088d57600080fd5b5061035a61089c366004612757565b6111f9565b3480156108ad57600080fd5b506103f760105481565b3480156108c357600080fd5b506103f76108d236600461283d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561090957600080fd5b506103f760095481565b34801561091f57600080fd5b5061035a611350565b34801561093457600080fd5b506103f760125481565b34801561094a57600080fd5b5061042561095936600461273a565b61138d565b34801561096a57600080fd5b506103f760165481565b34801561098057600080fd5b506103f7600a5481565b60606003805461099990612876565b80601f01602080910402602001604051908101604052809291908181526020018280546109c590612876565b8015610a125780601f106109e757610100808354040283529160200191610a12565b820191906000526020600020905b8154815290600101906020018083116109f557829003601f168201915b5050505050905090565b6000610a293384846114de565b5060015b92915050565b6005546001600160a01b03163314610a665760405162461bcd60e51b8152600401610a5d906128b1565b60405180910390fd5b6007546040516001600160a01b03918216918316907f90b8024c4923d3873ff5b9fcb43d0360d4b9217fa41225d07ba379993552e74390600090a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610aed5760405162461bcd60e51b8152600401610a5d906128b1565b670de0b6b3a76400006103e8610b0260025490565b610b0d9060016128fc565b610b17919061291b565b610b21919061291b565b811015610b885760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526e6c6f776572207468616e20302e312560881b6064820152608401610a5d565b610b9a81670de0b6b3a76400006128fc565b60085550565b6000610bad848484611603565b610bff8433610bfa85604051806060016040528060288152602001612aed602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190611eff565b6114de565b5060019392505050565b6005546001600160a01b03163314610c335760405162461bcd60e51b8152600401610a5d906128b1565b6001600160a01b03919091166000908152600e60205260409020805460ff1916911515919091179055565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610a29918590610bfa9086611478565b6005546001600160a01b03163314610cbe5760405162461bcd60e51b8152600401610a5d906128b1565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546000906001600160a01b03163314610d355760405162461bcd60e51b8152600401610a5d906128b1565b50600b805460ff19169055600190565b6005546001600160a01b03163314610d6f5760405162461bcd60e51b8152600401610a5d906128b1565b6001600160a01b03919091166000908152601d60205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610dc45760405162461bcd60e51b8152600401610a5d906128b1565b60138390556012829055601181905580610dde838561293d565b610de8919061293d565b601055505050565b6005546001600160a01b03163314610e1a5760405162461bcd60e51b8152600401610a5d906128b1565b600b805462ffff0019166201010017905543601b55565b6005546001600160a01b03163314610e5b5760405162461bcd60e51b8152600401610a5d906128b1565b600b8054911515620100000262ff000019909216919091179055565b60606004805461099990612876565b6005546001600160a01b03163314610eb05760405162461bcd60e51b8152600401610a5d906128b1565b7f0000000000000000000000001f68be2110f549e5af940aaf166f1525b6a9ee206001600160a01b0316826001600160a01b03161415610f585760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610a5d565b610f628282611f39565b5050565b6000610a293384610bfa85604051806060016040528060258152602001612b15602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190611eff565b6000610a29338484611603565b6005546001600160a01b03163314610fec5760405162461bcd60e51b8152600401610a5d906128b1565b6006546040516001600160a01b03918216918316907fa751787977eeb3902e30e1d19ca00c6ad274a1f622c31a206e32366700b0567490600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146110735760405162461bcd60e51b8152600401610a5d906128b1565b6001600160a01b0382166000818152601c6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b031633146110fc5760405162461bcd60e51b8152600401610a5d906128b1565b60178390556016829055601581905580611116838561293d565b611120919061293d565b601455505050565b6005546001600160a01b031633146111525760405162461bcd60e51b8152600401610a5d906128b1565b670de0b6b3a76400006103e861116760025490565b6111729060056128fc565b61117c919061291b565b611186919061291b565b8110156111e15760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b6064820152608401610a5d565b6111f381670de0b6b3a76400006128fc565b600a5550565b6005546000906001600160a01b031633146112265760405162461bcd60e51b8152600401610a5d906128b1565b620186a061123360025490565b61123e9060016128fc565b611248919061291b565b8210156112b55760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610a5d565b6103e86112c160025490565b6112cc9060056128fc565b6112d6919061291b565b8211156113425760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610a5d565b50600981905560015b919050565b6005546000906001600160a01b0316331461137d5760405162461bcd60e51b8152600401610a5d906128b1565b50600f805460ff19169055600190565b6005546001600160a01b031633146113b75760405162461bcd60e51b8152600401610a5d906128b1565b6001600160a01b03811661141c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a5d565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b600080611485838561293d565b9050838110156114d75760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610a5d565b9392505050565b6001600160a01b0383166115405760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a5d565b6001600160a01b0382166115a15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a5d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166116295760405162461bcd60e51b8152600401610a5d90612955565b6001600160a01b03821661164f5760405162461bcd60e51b8152600401610a5d9061299a565b6001600160a01b0382166000908152600e602052604090205460ff1615801561169157506001600160a01b0383166000908152600e602052604090205460ff16155b6116f75760405162461bcd60e51b815260206004820152603160248201527f596f752068617665206265656e20626c61636b6c69737465642066726f6d207460448201527072616e73666572696e6720746f6b656e7360781b6064820152608401610a5d565b8061170d5761170883836000611f8d565b505050565b600b5460ff1615611bca576005546001600160a01b0384811691161480159061174457506005546001600160a01b03838116911614155b801561175857506001600160a01b03821615155b801561176f57506001600160a01b03821661dead14155b80156117855750600554600160a01b900460ff16155b15611bca57600b54610100900460ff1661181d576001600160a01b0383166000908152601c602052604090205460ff16806117d857506001600160a01b0382166000908152601c602052604090205460ff165b61181d5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610a5d565b600f5460ff1615611964576005546001600160a01b0383811691161480159061187857507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b0316826001600160a01b031614155b80156118b657507f0000000000000000000000001f68be2110f549e5af940aaf166f1525b6a9ee206001600160a01b0316826001600160a01b031614155b1561196457326000908152600c602052604090205443116119515760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610a5d565b326000908152600c602052604090204390555b6001600160a01b0383166000908152601e602052604090205460ff1680156119a557506001600160a01b0382166000908152601d602052604090205460ff16155b15611a8957600854811115611a1a5760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610a5d565b600a546001600160a01b038316600090815260208190526040902054611a40908361293d565b1115611a845760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610a5d565b611bca565b6001600160a01b0382166000908152601e602052604090205460ff168015611aca57506001600160a01b0383166000908152601d602052604090205460ff16155b15611b4057600854811115611a845760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610a5d565b6001600160a01b0382166000908152601d602052604090205460ff16611bca57600a546001600160a01b038316600090815260208190526040902054611b86908361293d565b1115611bca5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610a5d565b3060009081526020819052604090205460095481108015908190611bf65750600b5462010000900460ff165b8015611c0c5750600554600160a01b900460ff16155b8015611c3157506001600160a01b0385166000908152601e602052604090205460ff16155b8015611c5657506001600160a01b0385166000908152601c602052604090205460ff16155b8015611c7b57506001600160a01b0384166000908152601c602052604090205460ff16155b15611ca9576005805460ff60a01b1916600160a01b179055611c9b612096565b6005805460ff60a01b191690555b6005546001600160a01b0386166000908152601c602052604090205460ff600160a01b909204821615911680611cf757506001600160a01b0385166000908152601c602052604090205460ff165b15611d00575060005b60008115611eeb576001600160a01b0386166000908152601e602052604090205460ff168015611d3257506000601454115b15611df057611d576064611d51601454886122d090919063ffffffff16565b9061234f565b905060145460165482611d6a91906128fc565b611d74919061291b565b60196000828254611d85919061293d565b9091555050601454601754611d9a90836128fc565b611da4919061291b565b601a6000828254611db5919061293d565b9091555050601454601554611dca90836128fc565b611dd4919061291b565b60186000828254611de5919061293d565b90915550611ecd9050565b6001600160a01b0387166000908152601e602052604090205460ff168015611e1a57506000601054115b15611ecd57611e396064611d51601054886122d090919063ffffffff16565b905060105460125482611e4c91906128fc565b611e56919061291b565b60196000828254611e67919061293d565b9091555050601054601354611e7c90836128fc565b611e86919061291b565b601a6000828254611e97919061293d565b9091555050601054601154611eac90836128fc565b611eb6919061291b565b60186000828254611ec7919061293d565b90915550505b8015611ede57611ede873083611f8d565b611ee881866129dd565b94505b611ef6878787611f8d565b50505050505050565b60008184841115611f235760405162461bcd60e51b8152600401610a5d91906126a1565b506000611f3084866129dd565b95945050505050565b6001600160a01b0382166000818152601e6020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b038316611fb35760405162461bcd60e51b8152600401610a5d90612955565b6001600160a01b038216611fd95760405162461bcd60e51b8152600401610a5d9061299a565b61201681604051806060016040528060268152602001612ac7602691396001600160a01b0386166000908152602081905260409020549190611eff565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546120459082611478565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016115f6565b3060009081526020819052604081205490506000601a546018546019546120bd919061293d565b6120c7919061293d565b905060008215806120d6575081155b156120e057505050565b6009546120ee9060146128fc565b831115612106576009546121039060146128fc565b92505b60006002836019548661211991906128fc565b612123919061291b565b61212d919061291b565b9050600061213b8583612391565b905047612147826123d3565b60006121534783612391565b9050600061217087611d51601854856122d090919063ffffffff16565b9050600061218d88611d51601a54866122d090919063ffffffff16565b905060008161219c84866129dd565b6121a691906129dd565b600060198190556018819055601a8190556007546040519293506001600160a01b031691849181818185875af1925050503d8060008114612203576040519150601f19603f3d011682016040523d82523d6000602084013e612208565b606091505b5090985050861580159061221c5750600081115b1561226f5761222b8782612593565b601954604080518881526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d80600081146122bc576040519150601f19603f3d011682016040523d82523d6000602084013e6122c1565b606091505b50505050505050505050505050565b6000826122df57506000610a2d565b60006122eb83856128fc565b9050826122f8858361291b565b146114d75760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610a5d565b60006114d783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612673565b60006114d783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611eff565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110612408576124086129f4565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124aa9190612a0a565b816001815181106124bd576124bd6129f4565b60200260200101906001600160a01b031690816001600160a01b031681525050612508307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d846114de565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac9479061255d908590600090869030904290600401612a27565b600060405180830381600087803b15801561257757600080fd5b505af115801561258b573d6000803e3d6000fd5b505050505050565b6125be307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d846114de565b60405163f305d71960e01b8152306004820181905260248201849052600060448301819052606483015260848201524260a48201527f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b03169063f305d71990839060c40160606040518083038185885af1158015612647573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061266c9190612a98565b5050505050565b600081836126945760405162461bcd60e51b8152600401610a5d91906126a1565b506000611f30848661291b565b600060208083528351808285015260005b818110156126ce578581018301518582016040015282016126b2565b818111156126e0576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461270b57600080fd5b50565b6000806040838503121561272157600080fd5b823561272c816126f6565b946020939093013593505050565b60006020828403121561274c57600080fd5b81356114d7816126f6565b60006020828403121561276957600080fd5b5035919050565b60008060006060848603121561278557600080fd5b8335612790816126f6565b925060208401356127a0816126f6565b929592945050506040919091013590565b8035801515811461134b57600080fd5b600080604083850312156127d457600080fd5b82356127df816126f6565b91506127ed602084016127b1565b90509250929050565b60008060006060848603121561280b57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561283457600080fd5b6114d7826127b1565b6000806040838503121561285057600080fd5b823561285b816126f6565b9150602083013561286b816126f6565b809150509250929050565b600181811c9082168061288a57607f821691505b602082108114156128ab57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612916576129166128e6565b500290565b60008261293857634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612950576129506128e6565b500190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6000828210156129ef576129ef6128e6565b500390565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612a1c57600080fd5b81516114d7816126f6565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612a775784516001600160a01b031683529383019391830191600101612a52565b50506001600160a01b03969096166060850152505050608001529392505050565b600080600060608486031215612aad57600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220f94673d6954f211d00a8f129339c660678569ed3c813ed407ae9f5958fe916ef64736f6c634300080b0033",
    "contract_name": "DAPEPE",
    "compiler_version": "v0.8.11+commit.d7f03943",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AutoNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ManualNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"devWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"marketingWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"blacklistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/*\r\n\r\n        _  _\r\n       (.)(.)\r\n   ,-.(.____.),-.  \r\n  ( \\ \\ '--' / / )\r\n   \\ \\ / ,. \\ / /\r\n    ) '| || |' ( mrf\r\nOoO'- OoO''OoO -'OoO\r\n\r\nWebsite:  https://dape.pe\r\nTwitter:  https://twitter.com/DaPepeERC\r\nTelegram: https://t.me/dapepe_erc\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity 0.8.11;\r\n \r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n \r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n \r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n \r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n \r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n \r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n \r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n \r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n \r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n \r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n \r\n    function initialize(address, address) external;\r\n}\r\n \r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n \r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n \r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n \r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n \r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n \r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n \r\n \r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n \r\n    mapping(address => uint256) private _balances;\r\n \r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n \r\n    uint256 private _totalSupply;\r\n \r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n \r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n \r\n        _beforeTokenTransfer(address(0), account, amount);\r\n \r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n \r\n        _beforeTokenTransfer(account, address(0), amount);\r\n \r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n \r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n \r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n \r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n \r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n \r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n \r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n \r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n \r\ncontract Ownable is Context {\r\n    address private _owner;\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n \r\n \r\n \r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n \r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n \r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n \r\n \r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n \r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n \r\n \r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n \r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n \r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n \r\n    contract DAPEPE is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n \r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n \r\n    bool private swapping;\r\n \r\n    address private marketingWallet;\r\n    address private devWallet;\r\n \r\n    uint256 public maxTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWallet;\r\n \r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n \r\n     // Anti-bot and anti-whale mappings and variables\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n \r\n    // Seller Map\r\n    mapping (address => uint256) private _holderFirstBuyTimestamp;\r\n \r\n    // Blacklist Map\r\n    mapping (address => bool) private _blacklist;\r\n    bool public transferDelayEnabled = true;\r\n \r\n    uint256 public buyTotalFees;\r\n    uint256 public buyMarketingFee;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyDevFee;\r\n \r\n    uint256 public sellTotalFees;\r\n    uint256 public sellMarketingFee;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public sellDevFee;\r\n \r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForDev;\r\n \r\n    // block number of opened trading\r\n    uint256 launchedAt;\r\n \r\n    /******************/\r\n \r\n    // exclude from fees and max transaction amount\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\r\n \r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n \r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n \r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n \r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n \r\n    event marketingWalletUpdated(address indexed newWallet, address indexed oldWallet);\r\n \r\n    event devWalletUpdated(address indexed newWallet, address indexed oldWallet);\r\n \r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n \r\n    event AutoNukeLP();\r\n \r\n    event ManualNukeLP();\r\n \r\n    constructor() ERC20(\"DaPepe\", \"DAPEPE\") {\r\n \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n \r\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        uniswapV2Router = _uniswapV2Router;\r\n \r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n \r\n        uint256 _buyMarketingFee = 6;\r\n        uint256 _buyLiquidityFee = 0;\r\n        uint256 _buyDevFee = 0;\r\n \r\n        uint256 _sellMarketingFee = 9;\r\n        uint256 _sellLiquidityFee = 0;\r\n        uint256 _sellDevFee = 0;\r\n \r\n        uint256 totalSupply = 69420000000 * 1e18;\r\n \r\n        maxTransactionAmount = totalSupply * 20 / 1000; // 2.0%\r\n        maxWallet = totalSupply * 20 / 1000; // 2.0% \r\n        swapTokensAtAmount = totalSupply * 5 / 10000; // 0.1%\r\n \r\n        buyMarketingFee = _buyMarketingFee;\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        buyDevFee = _buyDevFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\r\n \r\n        sellMarketingFee = _sellMarketingFee;\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellDevFee = _sellDevFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\r\n \r\n        marketingWallet = address(0x337C4942292A9ced90bCda63fd39d30384D06a67);\r\n        devWallet = address(0x337C4942292A9ced90bCda63fd39d30384D06a67);\r\n \r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n \r\n        excludeFromMaxTransaction(owner(), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n \r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n \r\n    receive() external payable {\r\n \r\n    }\r\n \r\n    // once enabled, can never be turned off\r\n    function enableTrading() external onlyOwner {\r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n        launchedAt = block.number;\r\n    }\r\n \r\n    // remove limits after token is stable\r\n    function removeLimits() external onlyOwner returns (bool){\r\n        limitsInEffect = false;\r\n        return true;\r\n    }\r\n \r\n    // disable Transfer delay - cannot be reenabled\r\n    function disableTransferDelay() external onlyOwner returns (bool){\r\n        transferDelayEnabled = false;\r\n        return true;\r\n    }\r\n \r\n     // change the minimum amount of tokens to sell from fees\r\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){\r\n        require(newAmount >= totalSupply() * 1 / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\r\n        require(newAmount <= totalSupply() * 5 / 1000, \"Swap amount cannot be higher than 0.5% total supply.\");\r\n        swapTokensAtAmount = newAmount;\r\n        return true;\r\n    }\r\n \r\n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 1 / 1000)/1e18, \"Cannot set maxTransactionAmount lower than 0.1%\");\r\n        maxTransactionAmount = newNum * (10**18);\r\n    }\r\n \r\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 5 / 1000)/1e18, \"Cannot set maxWallet lower than 0.5%\");\r\n        maxWallet = newNum * (10**18);\r\n    }\r\n \r\n    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n          function updateBuyFees(\r\n        uint256 _devFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _marketingFee\r\n    ) external onlyOwner {\r\n        buyDevFee = _devFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyMarketingFee = _marketingFee;\r\n        buyTotalFees = buyDevFee + buyLiquidityFee + buyMarketingFee;\r\n    }\r\n\r\n    function updateSellFees(\r\n        uint256 _devFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _marketingFee\r\n    ) external onlyOwner {\r\n        sellDevFee = _devFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellMarketingFee = _marketingFee;\r\n        sellTotalFees = sellDevFee + sellLiquidityFee + sellMarketingFee;\r\n    }\r\n \r\n    // only use to disable contract sales if absolutely necessary (emergency use only)\r\n    function updateSwapEnabled(bool enabled) external onlyOwner(){\r\n        swapEnabled = enabled;\r\n    }\r\n \r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n \r\n    function blacklistAccount (address account, bool isBlacklisted) public onlyOwner {\r\n        _blacklist[account] = isBlacklisted;\r\n    }\r\n \r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair, \"The pair cannot be removed from automatedMarketMakerPairs\");\r\n \r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n \r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n \r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n \r\n    function updateMarketingWallet(address newMarketingWallet) external onlyOwner {\r\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\r\n        marketingWallet = newMarketingWallet;\r\n    }\r\n \r\n    function updateDevWallet(address newWallet) external onlyOwner {\r\n        emit devWalletUpdated(newWallet, devWallet);\r\n        devWallet = newWallet;\r\n    }\r\n \r\n \r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!_blacklist[to] && !_blacklist[from], \"You have been blacklisted from transfering tokens\");\r\n         if(amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n \r\n        if(limitsInEffect){\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ){\r\n                if(!tradingActive){\r\n                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading is not active.\");\r\n                }\r\n \r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.  \r\n                if (transferDelayEnabled){\r\n                    if (to != owner() && to != address(uniswapV2Router) && to != address(uniswapV2Pair)){\r\n                        require(_holderLastTransferTimestamp[tx.origin] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                    }\r\n                }\r\n \r\n                //when buy\r\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\r\n                        require(amount <= maxTransactionAmount, \"Buy transfer amount exceeds the maxTransactionAmount.\");\r\n                        require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n                }\r\n \r\n                //when sell\r\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\r\n                        require(amount <= maxTransactionAmount, \"Sell transfer amount exceeds the maxTransactionAmount.\");\r\n                }\r\n                else if(!_isExcludedMaxTransactionAmount[to]){\r\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n                }\r\n            }\r\n        }\r\n \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n \r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n \r\n        if( \r\n            canSwap &&\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapping = true;\r\n \r\n            swapBack();\r\n \r\n            swapping = false;\r\n        }\r\n \r\n        bool takeFee = !swapping;\r\n \r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n \r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if(takeFee){\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0){\r\n                fees = amount.mul(sellTotalFees).div(100);\r\n                tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees;\r\n                tokensForDev += fees * sellDevFee / sellTotalFees;\r\n                tokensForMarketing += fees * sellMarketingFee / sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = amount.mul(buyTotalFees).div(100);\r\n                tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\r\n                tokensForDev += fees * buyDevFee / buyTotalFees;\r\n                tokensForMarketing += fees * buyMarketingFee / buyTotalFees;\r\n            }\r\n \r\n            if(fees > 0){    \r\n                super._transfer(from, address(this), fees);\r\n            }\r\n \r\n            amount -= fees;\r\n        }\r\n \r\n        super._transfer(from, to, amount);\r\n    }\r\n \r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n \r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n \r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n \r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n \r\n    }\r\n \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n \r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n \r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing + tokensForDev;\r\n        bool success;\r\n \r\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n \r\n        if(contractBalance > swapTokensAtAmount * 20){\r\n          contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n \r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n \r\n        uint256 initialETHBalance = address(this).balance;\r\n \r\n        swapTokensForEth(amountToSwapForETH); \r\n \r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n \r\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(totalTokensToSwap);\r\n        uint256 ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap);\r\n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForDev;\r\n \r\n \r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n        tokensForDev = 0;\r\n \r\n        (success,) = address(devWallet).call{value: ethForDev}(\"\");\r\n \r\n        if(liquidityTokens > 0 && ethForLiquidity > 0){\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\r\n        }\r\n \r\n        (success,) = address(marketingWallet).call{value: address(this).balance}(\"\");\r\n    }\r\n}",
    "etherscan_verified": true
}