{
    "address": "0xa515dE84372C195F39fa6993AE9f7955EFFd8d1c",
    "tx_hash": "975d0338cadb5cc3a33ae23f9fdc37a021472a99aa823e620bd1cc6968425845",
    "block_number": 18000144,
    "timestamp": 1693068623,
    "gas_used_in_creation": 1823469,
    "creation_bytecode": "",
    "runtime_bytecode": "60806040526004361061014e5760003560e01c8063715018a6116100b6578063a9059cbb1161006f578063a9059cbb146103c6578063bf474bed146103e6578063c36956a0146103fc578063c876d0b914610412578063d34628cc1461042c578063dd62ed3e1461044c57600080fd5b8063715018a614610318578063751039fc1461032d5780637d1db4a5146103425780638da5cb5b146103585780638f9a55c01461038057806395d89b411461039657600080fd5b806323b872dd1161010857806323b872dd14610238578063313ce5671461025857806331c2d847146102745780633bbac5791461029457806351bc3c85146102cd57806370a08231146102e257600080fd5b8062a2554b1461015a57806306fdde0314610171578063095ea7b3146101b95780630c193045146101e95780630faee56f1461020d57806318160ddd1461022357600080fd5b3661015557005b600080fd5b34801561016657600080fd5b5061016f610492565b005b34801561017d57600080fd5b5060408051808201909152600d81526c4e6f7442616c644f6e4261736560981b60208201525b6040516101b09190611697565b60405180910390f35b3480156101c557600080fd5b506101d96101d436600461170d565b61085d565b60405190151581526020016101b0565b3480156101f557600080fd5b506101ff600b5481565b6040519081526020016101b0565b34801561021957600080fd5b506101ff60125481565b34801561022f57600080fd5b506101ff610874565b34801561024457600080fd5b506101d9610253366004611739565b610896565b34801561026457600080fd5b50604051600881526020016101b0565b34801561028057600080fd5b5061016f61028f366004611790565b6108fa565b3480156102a057600080fd5b506101d96102af366004611855565b6001600160a01b031660009081526004602052604090205460ff1690565b3480156102d957600080fd5b5061016f610990565b3480156102ee57600080fd5b506101ff6102fd366004611855565b6001600160a01b031660009081526001602052604090205490565b34801561032457600080fd5b5061016f6109e4565b34801561033957600080fd5b5061016f610a58565b34801561034e57600080fd5b506101ff600f5481565b34801561036457600080fd5b506000546040516001600160a01b0390911681526020016101b0565b34801561038c57600080fd5b506101ff60105481565b3480156103a257600080fd5b50604080518082019091526007815266139bdd10985b1960ca1b60208201526101a3565b3480156103d257600080fd5b506101d96103e136600461170d565b610b21565b3480156103f257600080fd5b506101ff60115481565b34801561040857600080fd5b506101ff600c5481565b34801561041e57600080fd5b506006546101d99060ff1681565b34801561043857600080fd5b5061016f610447366004611790565b610b2e565b34801561045857600080fd5b506101ff610467366004611872565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6000546001600160a01b031633146104c55760405162461bcd60e51b81526004016104bc906118ab565b60405180910390fd5b601454600160a01b900460ff161561051f5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104bc565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561056e90309061055a6008600a6119da565b61056990640e69870b006119e9565b610bc0565b601360009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e59190611a00565b6001600160a01b031663c9c6539630601360009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066b9190611a00565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af11580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190611a00565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d7194730610724816001600160a01b031660009081526001602052604090205490565b6000806107396000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156107a1573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107c69190611a1d565b505060145460135460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af115801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190611a4b565b506014805462ff00ff60a01b19166201000160a01b179055565b600061086a338484610bc0565b5060015b92915050565b60006108826008600a6119da565b61089190640e69870b006119e9565b905090565b60006108a3848484610ce4565b6108f0843361056985604051806060016040528060288152602001611b56602891396001600160a01b038a16600090815260026020908152604080832033845290915290205491906112dd565b5060019392505050565b6000546001600160a01b031633146109245760405162461bcd60e51b81526004016104bc906118ab565b60005b815181101561098c5760006004600084848151811061094857610948611a6d565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061098481611a83565b915050610927565b5050565b60065461010090046001600160a01b0316336001600160a01b0316146109b557600080fd5b3060009081526001602052604090205480156109d4576109d481611317565b47801561098c5761098c816114aa565b6000546001600160a01b03163314610a0e5760405162461bcd60e51b81526004016104bc906118ab565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610a825760405162461bcd60e51b81526004016104bc906118ab565b610a8e6008600a6119da565b610a9d90640e69870b006119e9565b600f55610aac6008600a6119da565b610abb90640e69870b006119e9565b6010556006805460ff191690556014600c819055600b557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf610aff6008600a6119da565b610b0e90640e69870b006119e9565b60405190815260200160405180910390a1565b600061086a338484610ce4565b6000546001600160a01b03163314610b585760405162461bcd60e51b81526004016104bc906118ab565b60005b815181101561098c57600160046000848481518110610b7c57610b7c611a6d565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610bb881611a83565b915050610b5b565b6001600160a01b038316610c225760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104bc565b6001600160a01b038216610c835760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104bc565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610d485760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104bc565b6001600160a01b038216610daa5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104bc565b60008111610e0c5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104bc565b600080546001600160a01b03858116911614801590610e3957506000546001600160a01b03848116911614155b1561119a576001600160a01b03841660009081526004602052604090205460ff16158015610e8057506001600160a01b03831660009081526004602052604090205460ff16155b610e8957600080fd5b60065460ff1615610f42576013546001600160a01b03848116911614801590610ec057506014546001600160a01b03848116911614155b15610f4257326000908152600560205260409020544311610f2f5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b60648201526084016104bc565b3260009081526005602052604090204390555b6014546001600160a01b038581169116148015610f6d57506013546001600160a01b03848116911614155b8015610f9257506001600160a01b03831660009081526003602052604090205460ff16155b1561107a57600f54821115610fe95760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104bc565b6010548261100c856001600160a01b031660009081526001602052604090205490565b6110169190611a9c565b11156110645760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104bc565b600e805490600061107483611a83565b91905055505b6110a660646110a0600b54600e541161109557600754611099565b6009545b85906114e8565b90611571565b6014549091506001600160a01b0384811691161480156110cf57506001600160a01b0384163014155b156110fc576110f960646110a0600c54600e54116110ef57600854611099565b600a5485906114e8565b90505b30600090815260016020526040902054601454600160a81b900460ff1615801561113357506014546001600160a01b038581169116145b80156111485750601454600160b01b900460ff165b8015611155575060115481115b80156111645750600d54600e54115b15611198576111866111818461117c846012546115b3565b6115b3565b611317565b47801561119657611196476114aa565b505b505b801561121457306000908152600160205260409020546111ba90826115c8565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061120b9085815260200190565b60405180910390a35b6001600160a01b0384166000908152600160205260409020546112379083611627565b6001600160a01b03851660009081526001602052604090205561127c61125d8383611627565b6001600160a01b038516600090815260016020526040902054906115c8565b6001600160a01b0380851660008181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6112c68585611627565b60405190815260200160405180910390a350505050565b600081848411156113015760405162461bcd60e51b81526004016104bc9190611697565b50600061130e8486611aaf565b95945050505050565b6014805460ff60a81b1916600160a81b179055801561149a57601454600160a01b900460ff161561149a57604080516002808252606082018352600092602083019080368337019050509050308160008151811061137757611377611a6d565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156113d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f49190611a00565b8160018151811061140757611407611a6d565b6001600160a01b03928316602091820292909201015260135461142d9130911684610bc0565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac94790611466908590600090869030904290600401611ac2565b600060405180830381600087803b15801561148057600080fd5b505af1158015611494573d6000803e3d6000fd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083906000818181858888f1935050505015801561098c573d6000803e3d6000fd5b6000826000036114fa5750600061086e565b600061150683856119e9565b9050826115138583611b33565b1461156a5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104bc565b9392505050565b600061156a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611669565b60008183116115c2578261156a565b50919050565b6000806115d58385611a9c565b90508381101561156a5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104bc565b600061156a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112dd565b6000818361168a5760405162461bcd60e51b81526004016104bc9190611697565b50600061130e8486611b33565b600060208083528351808285015260005b818110156116c4578581018301518582016040015282016116a8565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146116fa57600080fd5b50565b8035611708816116e5565b919050565b6000806040838503121561172057600080fd5b823561172b816116e5565b946020939093013593505050565b60008060006060848603121561174e57600080fd5b8335611759816116e5565b92506020840135611769816116e5565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156117a357600080fd5b823567ffffffffffffffff808211156117bb57600080fd5b818501915085601f8301126117cf57600080fd5b8135818111156117e1576117e161177a565b8060051b604051601f19603f830116810181811085821117156118065761180661177a565b60405291825284820192508381018501918883111561182457600080fd5b938501935b828510156118495761183a856116fd565b84529385019392850192611829565b98975050505050505050565b60006020828403121561186757600080fd5b813561156a816116e5565b6000806040838503121561188557600080fd5b8235611890816116e5565b915060208301356118a0816116e5565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611931578160001904821115611917576119176118e0565b8085161561192457918102915b93841c93908002906118fb565b509250929050565b6000826119485750600161086e565b816119555750600061086e565b816001811461196b576002811461197557611991565b600191505061086e565b60ff841115611986576119866118e0565b50506001821b61086e565b5060208310610133831016604e8410600b84101617156119b4575081810a61086e565b6119be83836118f6565b80600019048211156119d2576119d26118e0565b029392505050565b600061156a60ff841683611939565b808202811582820484141761086e5761086e6118e0565b600060208284031215611a1257600080fd5b815161156a816116e5565b600080600060608486031215611a3257600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215611a5d57600080fd5b8151801515811461156a57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611a9557611a956118e0565b5060010190565b8082018082111561086e5761086e6118e0565b8181038181111561086e5761086e6118e0565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611b125784516001600160a01b031683529383019391830191600101611aed565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611b5057634e487b7160e01b600052601260045260246000fd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212200ad5249077682baaa49ae69874926f9b28d41e268e51d0ec87c721ce8514da1364736f6c63430008130033",
    "contract_name": "Bullsack",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceBuyTaxAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceSellTaxAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbot\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gottagofast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n*/\r\n\r\n/**\r\n\r\nNotBaldOnBase (NotBald)\r\nTelegram: https://t.me/NotBaldOnBase\r\n**/\r\n\r\n// SPDX-License-Identifier: NONE\r\n\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Bullsack is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=0;\r\n    uint256 private _initialSellTax=0;\r\n    uint256 private _finalBuyTax=0;\r\n    uint256 private _finalSellTax=0;\r\n    uint256 public _reduceBuyTaxAt=0;\r\n    uint256 public _reduceSellTaxAt=0;\r\n    uint256 private _preventSwapBefore=0;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 8;\r\n    uint256 private constant _tTotal = 61900000000 * 10**_decimals;\r\n    string private constant _name = unicode\"NotBaldOnBase\";\r\n    string private constant _symbol = unicode\"NotBald\";\r\n    uint256 public _maxTxAmount =   40000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 60000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold=426000000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap=12000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                _buyCount++;\r\n            }\r\n\r\n\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        _reduceSellTaxAt=20;\r\n        _reduceBuyTaxAt=20;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function gottagofast() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n    \r\n    function addBots(address[] memory bots_) public onlyOwner {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function delBots(address[] memory notbot) public onlyOwner {\r\n      for (uint i = 0; i < notbot.length; i++) {\r\n          bots[notbot[i]] = false;\r\n      }\r\n    }\r\n    \r\n}",
    "etherscan_verified": true
}