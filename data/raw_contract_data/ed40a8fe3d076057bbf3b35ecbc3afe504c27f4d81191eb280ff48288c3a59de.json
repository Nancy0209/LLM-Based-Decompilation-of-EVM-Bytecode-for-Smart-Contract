{
    "address": "0xEA00f45b33879A1D55f91ff260C20c96a577E566",
    "tx_hash": "ed40a8fe3d076057bbf3b35ecbc3afe504c27f4d81191eb280ff48288c3a59de",
    "block_number": 18009434,
    "timestamp": 1693180895,
    "gas_used_in_creation": 5974054,
    "creation_bytecode": "60c060405260006008556009805460ff19908116909155610e10600a55600f805462ffffff1916620100011790556107086010556013805490911660011790553480156200004c57600080fd5b506040518060400160405280600781526020016615195b1958995d60ca1b815250604051806040016040528060078152602001661511531150915560ca1b8152508160039080519060200190620000a592919062000695565b508051620000bb90600490602084019062000695565b505050620000d8620000d2620003e360201b60201c565b620003e7565b737a250d5630b4cf539739df2c5dacb4c659f2488d620000fa81600162000439565b6001600160a01b03811660808190526040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa15801562000145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016b91906200073b565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001df91906200073b565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af11580156200022d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200025391906200073b565b6001600160a01b031660a08190526200026e90600162000439565b60a0516200027e906001620004b2565b6a01a784379d99db42000000600c819055600e55600a6000600760148260116a52b7d2dcc80cd2e4000000612710620002b8828962000783565b620002c49190620007a5565b600d5560158790556016869055601785905584620002e38789620007c8565b620002ef9190620007c8565b6014556019849055601a839055601b829055816200030e8486620007c8565b6200031a9190620007c8565b6018556006805473b58e5bf9bf0ccd0b566c0b31ec92402cba5bc12a6001600160a01b03199182168117909255600780549091169091179055620003726200036a6005546001600160a01b031690565b600162000506565b6200037f30600162000506565b6200038e61dead600162000506565b620003ad620003a56005546001600160a01b031690565b600162000439565b620003ba30600162000439565b620003c961dead600162000439565b620003d53382620005b0565b505050505050505062000820565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6005546001600160a01b03163314620004885760405162461bcd60e51b8152602060048201819052602482015260008051602062003a2583398151915260448201526064015b60405180910390fd5b6001600160a01b039190911660009081526020805260409020805460ff1916911515919091179055565b6001600160a01b038216600081815260216020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6005546001600160a01b03163314620005515760405162461bcd60e51b8152602060048201819052602482015260008051602062003a2583398151915260448201526064016200047f565b6001600160a01b0382166000818152601f6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6001600160a01b038216620006085760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016200047f565b80600260008282546200061c9190620007c8565b90915550506001600160a01b038216600090815260208190526040812080548392906200064b908490620007c8565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620006a390620007e3565b90600052602060002090601f016020900481019282620006c7576000855562000712565b82601f10620006e257805160ff191683800117855562000712565b8280016001018555821562000712579182015b8281111562000712578251825591602001919060010190620006f5565b506200072092915062000724565b5090565b5b8082111562000720576000815560010162000725565b6000602082840312156200074e57600080fd5b81516001600160a01b03811681146200076657600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615620007a057620007a06200076d565b500290565b600082620007c357634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115620007de57620007de6200076d565b500190565b600181811c90821680620007f857607f821691505b602082108114156200081a57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05161317d620008a86000396000818161060a0152818161123e015281816118d901528181611974015281816119a001528181611d4201528181612a7501528181612b170152612b4301526000818161046f01528181611d0401528181612543015281816125fc0152818161263801528181612bfc0152612c59015261317d6000f3fe6080604052600436106103b05760003560e01c80637d831a8b116101e7578063c02466681161010d578063dd62ed3e116100a0578063f2fde38b1161006f578063f2fde38b14610ab2578063f637434214610ad2578063f8b45b0514610ae8578063fe72b27a14610afe57600080fd5b8063dd62ed3e14610a2b578063e2f4560514610a71578063e884f26014610a87578063f11a24d314610a9c57600080fd5b8063c876d0b9116100dc578063c876d0b9146109c5578063c8c8ebe4146109df578063d257b34f146109f5578063d85ba06314610a1557600080fd5b8063c024666814610950578063c17b5b8c14610970578063c18bc19514610990578063c3c8cd80146109b057600080fd5b80639ec22c0e11610185578063a9059cbb11610154578063a9059cbb146108cb578063b2041411146108eb578063b62496f514610901578063bbc0c7421461093157600080fd5b80639ec22c0e146108695780639fccce321461087f578063a457c2d714610895578063a4c82a00146108b557600080fd5b806392136913116101c157806392136913146107fe578063924de9b71461081457806395d89b41146108345780639a7a23d61461084957600080fd5b80637d831a8b146107a05780638095d564146107c05780638da5cb5b146107e057600080fd5b80632e82f1a0116102d75780636ddd17131161026a578063730c188811610239578063730c188814610735578063751039fc146107555780637571336a1461076a5780637bce5a041461078a57600080fd5b80636ddd1713146106b55780636fc3eaec146106d557806370a08231146106ea578063715018a61461072057600080fd5b80634a62bb65116102a65780634a62bb651461062c5780634fbee19314610646578063535e02d81461067f5780636a486a8e1461069f57600080fd5b80632e82f1a0146105a2578063313ce567146105bc57806339509351146105d857806349bd5a5e146105f857600080fd5b806318a94cf11161034f578063203e727e1161031e578063203e727e1461053657806323b872dd1461055657806327c8f835146105765780632c3e486c1461058c57600080fd5b806318a94cf1146104de578063199ffc72146104f45780631a8145bb1461050a5780631f3fed8f1461052057600080fd5b806310d5de531161038b57806310d5de531461042e5780631694505e1461045d57806318160ddd146104a9578063184c16c5146104c857600080fd5b806299d386146103bc57806306fdde03146103d3578063095ea7b3146103fe57600080fd5b366103b757005b600080fd5b3480156103c857600080fd5b506103d1610b1e565b005b3480156103df57600080fd5b506103e8610b68565b6040516103f59190612cd7565b60405180910390f35b34801561040a57600080fd5b5061041e610419366004612d41565b610bfa565b60405190151581526020016103f5565b34801561043a57600080fd5b5061041e610449366004612d6d565b602080526000908152604090205460ff1681565b34801561046957600080fd5b506104917f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016103f5565b3480156104b557600080fd5b506002545b6040519081526020016103f5565b3480156104d457600080fd5b506104ba60105481565b3480156104ea57600080fd5b506104ba601b5481565b34801561050057600080fd5b506104ba60085481565b34801561051657600080fd5b506104ba601d5481565b34801561052c57600080fd5b506104ba601c5481565b34801561054257600080fd5b506103d1610551366004612d8a565b610c10565b34801561056257600080fd5b5061041e610571366004612da3565b610ced565b34801561058257600080fd5b5061049161dead81565b34801561059857600080fd5b506104ba600a5481565b3480156105ae57600080fd5b5060095461041e9060ff1681565b3480156105c857600080fd5b50604051601281526020016103f5565b3480156105e457600080fd5b5061041e6105f3366004612d41565b610d97565b34801561060457600080fd5b506104917f000000000000000000000000000000000000000000000000000000000000000081565b34801561063857600080fd5b50600f5461041e9060ff1681565b34801561065257600080fd5b5061041e610661366004612d6d565b6001600160a01b03166000908152601f602052604090205460ff1690565b34801561068b57600080fd5b506103d161069a366004612d6d565b610dd3565b3480156106ab57600080fd5b506104ba60185481565b3480156106c157600080fd5b50600f5461041e9062010000900460ff1681565b3480156106e157600080fd5b506103d1610e5a565b3480156106f657600080fd5b506104ba610705366004612d6d565b6001600160a01b031660009081526020819052604090205490565b34801561072c57600080fd5b506103d1610ef0565b34801561074157600080fd5b506103d1610750366004612df4565b610f26565b34801561076157600080fd5b5061041e61104f565b34801561077657600080fd5b506103d1610785366004612e29565b61108c565b34801561079657600080fd5b506104ba60155481565b3480156107ac57600080fd5b506103d16107bb366004612d6d565b6110e0565b3480156107cc57600080fd5b506103d16107db366004612e5e565b611167565b3480156107ec57600080fd5b506005546001600160a01b0316610491565b34801561080a57600080fd5b506104ba60195481565b34801561082057600080fd5b506103d161082f366004612e8a565b6111bd565b34801561084057600080fd5b506103e8611203565b34801561085557600080fd5b506103d1610864366004612e29565b611212565b34801561087557600080fd5b506104ba60115481565b34801561088b57600080fd5b506104ba601e5481565b3480156108a157600080fd5b5061041e6108b0366004612d41565b6112f2565b3480156108c157600080fd5b506104ba600b5481565b3480156108d757600080fd5b5061041e6108e6366004612d41565b61138b565b3480156108f757600080fd5b506104ba60175481565b34801561090d57600080fd5b5061041e61091c366004612d6d565b60216020526000908152604090205460ff1681565b34801561093d57600080fd5b50600f5461041e90610100900460ff1681565b34801561095c57600080fd5b506103d161096b366004612e29565b611398565b34801561097c57600080fd5b506103d161098b366004612e5e565b611421565b34801561099c57600080fd5b506103d16109ab366004612d8a565b611477565b3480156109bc57600080fd5b506103d1611548565b3480156109d157600080fd5b5060135461041e9060ff1681565b3480156109eb57600080fd5b506104ba600c5481565b348015610a0157600080fd5b5061041e610a10366004612d8a565b6115a2565b348015610a2157600080fd5b506104ba60145481565b348015610a3757600080fd5b506104ba610a46366004612ea5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a7d57600080fd5b506104ba600d5481565b348015610a9357600080fd5b5061041e6116f9565b348015610aa857600080fd5b506104ba60165481565b348015610abe57600080fd5b506103d1610acd366004612d6d565b611736565b348015610ade57600080fd5b506104ba601a5481565b348015610af457600080fd5b506104ba600e5481565b348015610b0a57600080fd5b5061041e610b19366004612d8a565b6117ce565b6005546001600160a01b03163314610b515760405162461bcd60e51b8152600401610b4890612ede565b60405180910390fd5b600f805462ffff0019166201010017905542600b55565b606060038054610b7790612f13565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba390612f13565b8015610bf05780601f10610bc557610100808354040283529160200191610bf0565b820191906000526020600020905b815481529060010190602001808311610bd357829003601f168201915b5050505050905090565b6000610c07338484611a48565b50600192915050565b6005546001600160a01b03163314610c3a5760405162461bcd60e51b8152600401610b4890612ede565b670de0b6b3a76400006103e8610c4f60025490565b610c5a906001612f64565b610c649190612f83565b610c6e9190612f83565b811015610cd55760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526e6c6f776572207468616e20302e312560881b6064820152608401610b48565b610ce781670de0b6b3a7640000612f64565b600c5550565b6000610cfa848484611b6c565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610d7f5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610b48565b610d8c8533858403611a48565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610c07918590610dce908690612fa5565b611a48565b6005546001600160a01b03163314610dfd5760405162461bcd60e51b8152600401610b4890612ede565b6007546040516001600160a01b03918216918316907ffaf1b77ed79f6e898c44dd8ab36b330c7b2fd39bcaab05ed6362480df870396590600090a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b6007546001600160a01b0316336001600160a01b03161480610e8f57506006546001600160a01b0316336001600160a01b0316145b610e9857600080fd5b6006546040516000916001600160a01b03169047908381818185875af1925050503d8060008114610ee5576040519150601f19603f3d011682016040523d82523d6000602084013e610eea565b606091505b50505050565b6005546001600160a01b03163314610f1a5760405162461bcd60e51b8152600401610b4890612ede565b610f246000612446565b565b6005546001600160a01b03163314610f505760405162461bcd60e51b8152600401610b4890612ede565b610258831015610fbe5760405162461bcd60e51b815260206004820152603360248201527f63616e6e6f7420736574206275796261636b206d6f7265206f6674656e207468604482015272616e206576657279203130206d696e7574657360681b6064820152608401610b48565b6103e88211158015610fce575060015b6110335760405162461bcd60e51b815260206004820152603060248201527f4d75737420736574206175746f204c50206275726e2070657263656e7420626560448201526f747765656e20302520616e642031302560801b6064820152608401610b48565b600a929092556008556009805460ff1916911515919091179055565b6005546000906001600160a01b0316331461107c5760405162461bcd60e51b8152600401610b4890612ede565b50600f805460ff19169055600190565b6005546001600160a01b031633146110b65760405162461bcd60e51b8152600401610b4890612ede565b6001600160a01b039190911660009081526020805260409020805460ff1916911515919091179055565b6005546001600160a01b0316331461110a5760405162461bcd60e51b8152600401610b4890612ede565b6006546040516001600160a01b03918216918316907fa751787977eeb3902e30e1d19ca00c6ad274a1f622c31a206e32366700b0567490600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146111915760405162461bcd60e51b8152600401610b4890612ede565b601583905560168290556017819055806111ab8385612fa5565b6111b59190612fa5565b601455505050565b6005546001600160a01b031633146111e75760405162461bcd60e51b8152600401610b4890612ede565b600f8054911515620100000262ff000019909216919091179055565b606060048054610b7790612f13565b6005546001600160a01b0316331461123c5760405162461bcd60e51b8152600401610b4890612ede565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156112e45760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610b48565b6112ee8282612498565b5050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156113745760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610b48565b6113813385858403611a48565b5060019392505050565b6000610c07338484611b6c565b6005546001600160a01b031633146113c25760405162461bcd60e51b8152600401610b4890612ede565b6001600160a01b0382166000818152601f6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b0316331461144b5760405162461bcd60e51b8152600401610b4890612ede565b6019839055601a829055601b819055806114658385612fa5565b61146f9190612fa5565b601855505050565b6005546001600160a01b031633146114a15760405162461bcd60e51b8152600401610b4890612ede565b670de0b6b3a76400006103e86114b660025490565b6114c1906005612f64565b6114cb9190612f83565b6114d59190612f83565b8110156115305760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b6064820152608401610b48565b61154281670de0b6b3a7640000612f64565b600e5550565b6007546001600160a01b0316336001600160a01b0316148061157d57506006546001600160a01b0316336001600160a01b0316145b61158657600080fd5b3060009081526020819052604090205461159f816124ec565b50565b6005546000906001600160a01b031633146115cf5760405162461bcd60e51b8152600401610b4890612ede565b620186a06115dc60025490565b6115e7906001612f64565b6115f19190612f83565b82101561165e5760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610b48565b6103e861166a60025490565b611675906005612f64565b61167f9190612f83565b8211156116eb5760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610b48565b50600d81905560015b919050565b6005546000906001600160a01b031633146117265760405162461bcd60e51b8152600401610b4890612ede565b506013805460ff19169055600190565b6005546001600160a01b031633146117605760405162461bcd60e51b8152600401610b4890612ede565b6001600160a01b0381166117c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b48565b61159f81612446565b6005546000906001600160a01b031633146117fb5760405162461bcd60e51b8152600401610b4890612ede565b60105460115461180b9190612fa5565b42116118595760405162461bcd60e51b815260206004820181905260248201527f4d757374207761697420666f7220636f6f6c646f776e20746f2066696e6973686044820152606401610b48565b6103e88211156118be5760405162461bcd60e51b815260206004820152602a60248201527f4d6179206e6f74206e756b65206d6f7265207468616e20313025206f6620746f60448201526906b656e7320696e204c560b41b6064820152608401610b48565b426011556040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009030906370a0823190602401602060405180830381865afa158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194d9190612fbd565b9050600061196761271061196184876126ac565b906126bf565b9050801561199c5761199c7f000000000000000000000000000000000000000000000000000000000000000061dead836126cb565b60007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119fc57600080fd5b505af1158015611a10573d6000803e3d6000fd5b50506040517f8462566617872a3fbab94534675218431ff9e204063ee3f4f43d965626a39abb925060009150a1506001949350505050565b6001600160a01b038316611aaa5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610b48565b6001600160a01b038216611b0b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610b48565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611b925760405162461bcd60e51b8152600401610b4890612fd6565b6001600160a01b038216611bb85760405162461bcd60e51b8152600401610b489061301b565b80611bce57611bc9838360006126cb565b505050565b600f5460ff1615612088576005546001600160a01b03848116911614801590611c0557506005546001600160a01b03838116911614155b8015611c1957506001600160a01b03821615155b8015611c3057506001600160a01b03821661dead14155b8015611c465750600554600160a01b900460ff16155b1561208857600f54610100900460ff16611cde576001600160a01b0383166000908152601f602052604090205460ff1680611c9957506001600160a01b0382166000908152601f602052604090205460ff165b611cde5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610b48565b60135460ff1615611e25576005546001600160a01b03838116911614801590611d3957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b8015611d7757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15611e2557326000908152601260205260409020544311611e125760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610b48565b3260009081526012602052604090204390555b6001600160a01b03831660009081526021602052604090205460ff168015611e6557506001600160a01b038216600090815260208052604090205460ff16155b15611f4957600c54811115611eda5760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610b48565b600e546001600160a01b038316600090815260208190526040902054611f009083612fa5565b1115611f445760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610b48565b612088565b6001600160a01b03821660009081526021602052604090205460ff168015611f8957506001600160a01b038316600090815260208052604090205460ff16155b15611fff57600c54811115611f445760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610b48565b6001600160a01b038216600090815260208052604090205460ff1661208857600e546001600160a01b0383166000908152602081905260409020546120449083612fa5565b11156120885760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610b48565b30600090815260208190526040902054600d54811080159081906120b45750600f5462010000900460ff165b80156120ca5750600554600160a01b900460ff16155b80156120ef57506001600160a01b03851660009081526021602052604090205460ff16155b801561211457506001600160a01b0385166000908152601f602052604090205460ff16155b801561213957506001600160a01b0384166000908152601f602052604090205460ff16155b15612167576005805460ff60a01b1916600160a01b179055612159612820565b6005805460ff60a01b191690555b600554600160a01b900460ff1615801561219957506001600160a01b03841660009081526021602052604090205460ff165b80156121a7575060095460ff165b80156121c25750600a54600b546121be9190612fa5565b4210155b80156121e757506001600160a01b0385166000908152601f602052604090205460ff16155b156121f6576121f4612a5a565b505b6005546001600160a01b0386166000908152601f602052604090205460ff600160a01b90920482161591168061224457506001600160a01b0385166000908152601f602052604090205460ff165b1561224d575060005b60008115612432576001600160a01b03861660009081526021602052604090205460ff16801561227f57506000601854115b156123375761229e6064611961601854886126ac90919063ffffffff16565b9050601854601a54826122b19190612f64565b6122bb9190612f83565b601d60008282546122cc9190612fa5565b9091555050601854601b546122e19083612f64565b6122eb9190612f83565b601e60008282546122fc9190612fa5565b90915550506018546019546123119083612f64565b61231b9190612f83565b601c600082825461232c9190612fa5565b909155506124149050565b6001600160a01b03871660009081526021602052604090205460ff16801561236157506000601454115b15612414576123806064611961601454886126ac90919063ffffffff16565b9050601454601654826123939190612f64565b61239d9190612f83565b601d60008282546123ae9190612fa5565b90915550506014546017546123c39083612f64565b6123cd9190612f83565b601e60008282546123de9190612fa5565b90915550506014546015546123f39083612f64565b6123fd9190612f83565b601c600082825461240e9190612fa5565b90915550505b8015612425576124258730836126cb565b61242f818661305e565b94505b61243d8787876126cb565b50505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600081815260216020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061252157612521613075565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561259f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c3919061308b565b816001815181106125d6576125d6613075565b60200260200101906001600160a01b031690816001600160a01b031681525050612621307f000000000000000000000000000000000000000000000000000000000000000084611a48565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac947906126769085906000908690309042906004016130a8565b600060405180830381600087803b15801561269057600080fd5b505af11580156126a4573d6000803e3d6000fd5b505050505050565b60006126b88284612f64565b9392505050565b60006126b88284612f83565b6001600160a01b0383166126f15760405162461bcd60e51b8152600401610b4890612fd6565b6001600160a01b0382166127175760405162461bcd60e51b8152600401610b489061301b565b6001600160a01b0383166000908152602081905260409020548181101561278f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610b48565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906127c6908490612fa5565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161281291815260200190565b60405180910390a350505050565b3060009081526020819052604081205490506000601e54601c54601d546128479190612fa5565b6128519190612fa5565b90506000821580612860575081155b1561286a57505050565b600d54612878906014612f64565b83111561289057600d5461288d906014612f64565b92505b6000600283601d54866128a39190612f64565b6128ad9190612f83565b6128b79190612f83565b905060006128c58583612bea565b9050476128d1826124ec565b60006128dd4783612bea565b905060006128fa87611961601c54856126ac90919063ffffffff16565b9050600061291788611961601e54866126ac90919063ffffffff16565b9050600081612926848661305e565b612930919061305e565b6000601d819055601c819055601e8190556007546040519293506001600160a01b031691849181818185875af1925050503d806000811461298d576040519150601f19603f3d011682016040523d82523d6000602084013e612992565b606091505b509098505086158015906129a65750600081115b156129f9576129b58782612bf6565b601d54604080518881526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d8060008114612a46576040519150601f19603f3d011682016040523d82523d6000602084013e612a4b565b606091505b50505050505050505050505050565b42600b556040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152600090819030906370a0823190602401602060405180830381865afa158015612ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aeb9190612fbd565b90506000612b0a612710611961600854856126ac90919063ffffffff16565b90508015612b3f57612b3f7f000000000000000000000000000000000000000000000000000000000000000061dead836126cb565b60007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612b9f57600080fd5b505af1158015612bb3573d6000803e3d6000fd5b50506040517f454c91ae84fcc766ddda0dcb289f26b3d0176efeacf4061fc219fa6ca8c3048d925060009150a16001935050505090565b60006126b8828461305e565b612c21307f000000000000000000000000000000000000000000000000000000000000000084611a48565b60405163f305d71960e01b815230600482015260248101839052600060448201819052606482015261dead60848201524260a48201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f305d71990839060c40160606040518083038185885af1158015612cab573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612cd09190613119565b5050505050565b600060208083528351808285015260005b81811015612d0457858101830151858201604001528201612ce8565b81811115612d16576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461159f57600080fd5b60008060408385031215612d5457600080fd5b8235612d5f81612d2c565b946020939093013593505050565b600060208284031215612d7f57600080fd5b81356126b881612d2c565b600060208284031215612d9c57600080fd5b5035919050565b600080600060608486031215612db857600080fd5b8335612dc381612d2c565b92506020840135612dd381612d2c565b929592945050506040919091013590565b803580151581146116f457600080fd5b600080600060608486031215612e0957600080fd5b8335925060208401359150612e2060408501612de4565b90509250925092565b60008060408385031215612e3c57600080fd5b8235612e4781612d2c565b9150612e5560208401612de4565b90509250929050565b600080600060608486031215612e7357600080fd5b505081359360208301359350604090920135919050565b600060208284031215612e9c57600080fd5b6126b882612de4565b60008060408385031215612eb857600080fd5b8235612ec381612d2c565b91506020830135612ed381612d2c565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c90821680612f2757607f821691505b60208210811415612f4857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612f7e57612f7e612f4e565b500290565b600082612fa057634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612fb857612fb8612f4e565b500190565b600060208284031215612fcf57600080fd5b5051919050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60008282101561307057613070612f4e565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561309d57600080fd5b81516126b881612d2c565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156130f85784516001600160a01b0316835293830193918301916001016130d3565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561312e57600080fd5b835192506020840151915060408401519050925092509256fea264697066735822122090d31a3c44b0f5d6dd388f3cdd3b4b1b6df6ae3a0596e8b21362e7351894db5e64736f6c634300080a00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
    "runtime_bytecode": "6080604052600436106103b05760003560e01c80637d831a8b116101e7578063c02466681161010d578063dd62ed3e116100a0578063f2fde38b1161006f578063f2fde38b14610ab2578063f637434214610ad2578063f8b45b0514610ae8578063fe72b27a14610afe57600080fd5b8063dd62ed3e14610a2b578063e2f4560514610a71578063e884f26014610a87578063f11a24d314610a9c57600080fd5b8063c876d0b9116100dc578063c876d0b9146109c5578063c8c8ebe4146109df578063d257b34f146109f5578063d85ba06314610a1557600080fd5b8063c024666814610950578063c17b5b8c14610970578063c18bc19514610990578063c3c8cd80146109b057600080fd5b80639ec22c0e11610185578063a9059cbb11610154578063a9059cbb146108cb578063b2041411146108eb578063b62496f514610901578063bbc0c7421461093157600080fd5b80639ec22c0e146108695780639fccce321461087f578063a457c2d714610895578063a4c82a00146108b557600080fd5b806392136913116101c157806392136913146107fe578063924de9b71461081457806395d89b41146108345780639a7a23d61461084957600080fd5b80637d831a8b146107a05780638095d564146107c05780638da5cb5b146107e057600080fd5b80632e82f1a0116102d75780636ddd17131161026a578063730c188811610239578063730c188814610735578063751039fc146107555780637571336a1461076a5780637bce5a041461078a57600080fd5b80636ddd1713146106b55780636fc3eaec146106d557806370a08231146106ea578063715018a61461072057600080fd5b80634a62bb65116102a65780634a62bb651461062c5780634fbee19314610646578063535e02d81461067f5780636a486a8e1461069f57600080fd5b80632e82f1a0146105a2578063313ce567146105bc57806339509351146105d857806349bd5a5e146105f857600080fd5b806318a94cf11161034f578063203e727e1161031e578063203e727e1461053657806323b872dd1461055657806327c8f835146105765780632c3e486c1461058c57600080fd5b806318a94cf1146104de578063199ffc72146104f45780631a8145bb1461050a5780631f3fed8f1461052057600080fd5b806310d5de531161038b57806310d5de531461042e5780631694505e1461045d57806318160ddd146104a9578063184c16c5146104c857600080fd5b806299d386146103bc57806306fdde03146103d3578063095ea7b3146103fe57600080fd5b366103b757005b600080fd5b3480156103c857600080fd5b506103d1610b1e565b005b3480156103df57600080fd5b506103e8610b68565b6040516103f59190612cd7565b60405180910390f35b34801561040a57600080fd5b5061041e610419366004612d41565b610bfa565b60405190151581526020016103f5565b34801561043a57600080fd5b5061041e610449366004612d6d565b602080526000908152604090205460ff1681565b34801561046957600080fd5b506104917f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b0390911681526020016103f5565b3480156104b557600080fd5b506002545b6040519081526020016103f5565b3480156104d457600080fd5b506104ba60105481565b3480156104ea57600080fd5b506104ba601b5481565b34801561050057600080fd5b506104ba60085481565b34801561051657600080fd5b506104ba601d5481565b34801561052c57600080fd5b506104ba601c5481565b34801561054257600080fd5b506103d1610551366004612d8a565b610c10565b34801561056257600080fd5b5061041e610571366004612da3565b610ced565b34801561058257600080fd5b5061049161dead81565b34801561059857600080fd5b506104ba600a5481565b3480156105ae57600080fd5b5060095461041e9060ff1681565b3480156105c857600080fd5b50604051601281526020016103f5565b3480156105e457600080fd5b5061041e6105f3366004612d41565b610d97565b34801561060457600080fd5b506104917f000000000000000000000000c7520dbedcd17d84b4f9c25632afdb926ac64c1f81565b34801561063857600080fd5b50600f5461041e9060ff1681565b34801561065257600080fd5b5061041e610661366004612d6d565b6001600160a01b03166000908152601f602052604090205460ff1690565b34801561068b57600080fd5b506103d161069a366004612d6d565b610dd3565b3480156106ab57600080fd5b506104ba60185481565b3480156106c157600080fd5b50600f5461041e9062010000900460ff1681565b3480156106e157600080fd5b506103d1610e5a565b3480156106f657600080fd5b506104ba610705366004612d6d565b6001600160a01b031660009081526020819052604090205490565b34801561072c57600080fd5b506103d1610ef0565b34801561074157600080fd5b506103d1610750366004612df4565b610f26565b34801561076157600080fd5b5061041e61104f565b34801561077657600080fd5b506103d1610785366004612e29565b61108c565b34801561079657600080fd5b506104ba60155481565b3480156107ac57600080fd5b506103d16107bb366004612d6d565b6110e0565b3480156107cc57600080fd5b506103d16107db366004612e5e565b611167565b3480156107ec57600080fd5b506005546001600160a01b0316610491565b34801561080a57600080fd5b506104ba60195481565b34801561082057600080fd5b506103d161082f366004612e8a565b6111bd565b34801561084057600080fd5b506103e8611203565b34801561085557600080fd5b506103d1610864366004612e29565b611212565b34801561087557600080fd5b506104ba60115481565b34801561088b57600080fd5b506104ba601e5481565b3480156108a157600080fd5b5061041e6108b0366004612d41565b6112f2565b3480156108c157600080fd5b506104ba600b5481565b3480156108d757600080fd5b5061041e6108e6366004612d41565b61138b565b3480156108f757600080fd5b506104ba60175481565b34801561090d57600080fd5b5061041e61091c366004612d6d565b60216020526000908152604090205460ff1681565b34801561093d57600080fd5b50600f5461041e90610100900460ff1681565b34801561095c57600080fd5b506103d161096b366004612e29565b611398565b34801561097c57600080fd5b506103d161098b366004612e5e565b611421565b34801561099c57600080fd5b506103d16109ab366004612d8a565b611477565b3480156109bc57600080fd5b506103d1611548565b3480156109d157600080fd5b5060135461041e9060ff1681565b3480156109eb57600080fd5b506104ba600c5481565b348015610a0157600080fd5b5061041e610a10366004612d8a565b6115a2565b348015610a2157600080fd5b506104ba60145481565b348015610a3757600080fd5b506104ba610a46366004612ea5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a7d57600080fd5b506104ba600d5481565b348015610a9357600080fd5b5061041e6116f9565b348015610aa857600080fd5b506104ba60165481565b348015610abe57600080fd5b506103d1610acd366004612d6d565b611736565b348015610ade57600080fd5b506104ba601a5481565b348015610af457600080fd5b506104ba600e5481565b348015610b0a57600080fd5b5061041e610b19366004612d8a565b6117ce565b6005546001600160a01b03163314610b515760405162461bcd60e51b8152600401610b4890612ede565b60405180910390fd5b600f805462ffff0019166201010017905542600b55565b606060038054610b7790612f13565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba390612f13565b8015610bf05780601f10610bc557610100808354040283529160200191610bf0565b820191906000526020600020905b815481529060010190602001808311610bd357829003601f168201915b5050505050905090565b6000610c07338484611a48565b50600192915050565b6005546001600160a01b03163314610c3a5760405162461bcd60e51b8152600401610b4890612ede565b670de0b6b3a76400006103e8610c4f60025490565b610c5a906001612f64565b610c649190612f83565b610c6e9190612f83565b811015610cd55760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526e6c6f776572207468616e20302e312560881b6064820152608401610b48565b610ce781670de0b6b3a7640000612f64565b600c5550565b6000610cfa848484611b6c565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610d7f5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610b48565b610d8c8533858403611a48565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610c07918590610dce908690612fa5565b611a48565b6005546001600160a01b03163314610dfd5760405162461bcd60e51b8152600401610b4890612ede565b6007546040516001600160a01b03918216918316907ffaf1b77ed79f6e898c44dd8ab36b330c7b2fd39bcaab05ed6362480df870396590600090a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b6007546001600160a01b0316336001600160a01b03161480610e8f57506006546001600160a01b0316336001600160a01b0316145b610e9857600080fd5b6006546040516000916001600160a01b03169047908381818185875af1925050503d8060008114610ee5576040519150601f19603f3d011682016040523d82523d6000602084013e610eea565b606091505b50505050565b6005546001600160a01b03163314610f1a5760405162461bcd60e51b8152600401610b4890612ede565b610f246000612446565b565b6005546001600160a01b03163314610f505760405162461bcd60e51b8152600401610b4890612ede565b610258831015610fbe5760405162461bcd60e51b815260206004820152603360248201527f63616e6e6f7420736574206275796261636b206d6f7265206f6674656e207468604482015272616e206576657279203130206d696e7574657360681b6064820152608401610b48565b6103e88211158015610fce575060015b6110335760405162461bcd60e51b815260206004820152603060248201527f4d75737420736574206175746f204c50206275726e2070657263656e7420626560448201526f747765656e20302520616e642031302560801b6064820152608401610b48565b600a929092556008556009805460ff1916911515919091179055565b6005546000906001600160a01b0316331461107c5760405162461bcd60e51b8152600401610b4890612ede565b50600f805460ff19169055600190565b6005546001600160a01b031633146110b65760405162461bcd60e51b8152600401610b4890612ede565b6001600160a01b039190911660009081526020805260409020805460ff1916911515919091179055565b6005546001600160a01b0316331461110a5760405162461bcd60e51b8152600401610b4890612ede565b6006546040516001600160a01b03918216918316907fa751787977eeb3902e30e1d19ca00c6ad274a1f622c31a206e32366700b0567490600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146111915760405162461bcd60e51b8152600401610b4890612ede565b601583905560168290556017819055806111ab8385612fa5565b6111b59190612fa5565b601455505050565b6005546001600160a01b031633146111e75760405162461bcd60e51b8152600401610b4890612ede565b600f8054911515620100000262ff000019909216919091179055565b606060048054610b7790612f13565b6005546001600160a01b0316331461123c5760405162461bcd60e51b8152600401610b4890612ede565b7f000000000000000000000000c7520dbedcd17d84b4f9c25632afdb926ac64c1f6001600160a01b0316826001600160a01b031614156112e45760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610b48565b6112ee8282612498565b5050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156113745760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610b48565b6113813385858403611a48565b5060019392505050565b6000610c07338484611b6c565b6005546001600160a01b031633146113c25760405162461bcd60e51b8152600401610b4890612ede565b6001600160a01b0382166000818152601f6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b0316331461144b5760405162461bcd60e51b8152600401610b4890612ede565b6019839055601a829055601b819055806114658385612fa5565b61146f9190612fa5565b601855505050565b6005546001600160a01b031633146114a15760405162461bcd60e51b8152600401610b4890612ede565b670de0b6b3a76400006103e86114b660025490565b6114c1906005612f64565b6114cb9190612f83565b6114d59190612f83565b8110156115305760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b6064820152608401610b48565b61154281670de0b6b3a7640000612f64565b600e5550565b6007546001600160a01b0316336001600160a01b0316148061157d57506006546001600160a01b0316336001600160a01b0316145b61158657600080fd5b3060009081526020819052604090205461159f816124ec565b50565b6005546000906001600160a01b031633146115cf5760405162461bcd60e51b8152600401610b4890612ede565b620186a06115dc60025490565b6115e7906001612f64565b6115f19190612f83565b82101561165e5760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610b48565b6103e861166a60025490565b611675906005612f64565b61167f9190612f83565b8211156116eb5760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610b48565b50600d81905560015b919050565b6005546000906001600160a01b031633146117265760405162461bcd60e51b8152600401610b4890612ede565b506013805460ff19169055600190565b6005546001600160a01b031633146117605760405162461bcd60e51b8152600401610b4890612ede565b6001600160a01b0381166117c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b48565b61159f81612446565b6005546000906001600160a01b031633146117fb5760405162461bcd60e51b8152600401610b4890612ede565b60105460115461180b9190612fa5565b42116118595760405162461bcd60e51b815260206004820181905260248201527f4d757374207761697420666f7220636f6f6c646f776e20746f2066696e6973686044820152606401610b48565b6103e88211156118be5760405162461bcd60e51b815260206004820152602a60248201527f4d6179206e6f74206e756b65206d6f7265207468616e20313025206f6620746f60448201526906b656e7320696e204c560b41b6064820152608401610b48565b426011556040516370a0823160e01b81526001600160a01b037f000000000000000000000000c7520dbedcd17d84b4f9c25632afdb926ac64c1f16600482015260009030906370a0823190602401602060405180830381865afa158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194d9190612fbd565b9050600061196761271061196184876126ac565b906126bf565b9050801561199c5761199c7f000000000000000000000000c7520dbedcd17d84b4f9c25632afdb926ac64c1f61dead836126cb565b60007f000000000000000000000000c7520dbedcd17d84b4f9c25632afdb926ac64c1f9050806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119fc57600080fd5b505af1158015611a10573d6000803e3d6000fd5b50506040517f8462566617872a3fbab94534675218431ff9e204063ee3f4f43d965626a39abb925060009150a1506001949350505050565b6001600160a01b038316611aaa5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610b48565b6001600160a01b038216611b0b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610b48565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611b925760405162461bcd60e51b8152600401610b4890612fd6565b6001600160a01b038216611bb85760405162461bcd60e51b8152600401610b489061301b565b80611bce57611bc9838360006126cb565b505050565b600f5460ff1615612088576005546001600160a01b03848116911614801590611c0557506005546001600160a01b03838116911614155b8015611c1957506001600160a01b03821615155b8015611c3057506001600160a01b03821661dead14155b8015611c465750600554600160a01b900460ff16155b1561208857600f54610100900460ff16611cde576001600160a01b0383166000908152601f602052604090205460ff1680611c9957506001600160a01b0382166000908152601f602052604090205460ff165b611cde5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610b48565b60135460ff1615611e25576005546001600160a01b03838116911614801590611d3957507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b0316826001600160a01b031614155b8015611d7757507f000000000000000000000000c7520dbedcd17d84b4f9c25632afdb926ac64c1f6001600160a01b0316826001600160a01b031614155b15611e2557326000908152601260205260409020544311611e125760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610b48565b3260009081526012602052604090204390555b6001600160a01b03831660009081526021602052604090205460ff168015611e6557506001600160a01b038216600090815260208052604090205460ff16155b15611f4957600c54811115611eda5760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610b48565b600e546001600160a01b038316600090815260208190526040902054611f009083612fa5565b1115611f445760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610b48565b612088565b6001600160a01b03821660009081526021602052604090205460ff168015611f8957506001600160a01b038316600090815260208052604090205460ff16155b15611fff57600c54811115611f445760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610b48565b6001600160a01b038216600090815260208052604090205460ff1661208857600e546001600160a01b0383166000908152602081905260409020546120449083612fa5565b11156120885760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610b48565b30600090815260208190526040902054600d54811080159081906120b45750600f5462010000900460ff165b80156120ca5750600554600160a01b900460ff16155b80156120ef57506001600160a01b03851660009081526021602052604090205460ff16155b801561211457506001600160a01b0385166000908152601f602052604090205460ff16155b801561213957506001600160a01b0384166000908152601f602052604090205460ff16155b15612167576005805460ff60a01b1916600160a01b179055612159612820565b6005805460ff60a01b191690555b600554600160a01b900460ff1615801561219957506001600160a01b03841660009081526021602052604090205460ff165b80156121a7575060095460ff165b80156121c25750600a54600b546121be9190612fa5565b4210155b80156121e757506001600160a01b0385166000908152601f602052604090205460ff16155b156121f6576121f4612a5a565b505b6005546001600160a01b0386166000908152601f602052604090205460ff600160a01b90920482161591168061224457506001600160a01b0385166000908152601f602052604090205460ff165b1561224d575060005b60008115612432576001600160a01b03861660009081526021602052604090205460ff16801561227f57506000601854115b156123375761229e6064611961601854886126ac90919063ffffffff16565b9050601854601a54826122b19190612f64565b6122bb9190612f83565b601d60008282546122cc9190612fa5565b9091555050601854601b546122e19083612f64565b6122eb9190612f83565b601e60008282546122fc9190612fa5565b90915550506018546019546123119083612f64565b61231b9190612f83565b601c600082825461232c9190612fa5565b909155506124149050565b6001600160a01b03871660009081526021602052604090205460ff16801561236157506000601454115b15612414576123806064611961601454886126ac90919063ffffffff16565b9050601454601654826123939190612f64565b61239d9190612f83565b601d60008282546123ae9190612fa5565b90915550506014546017546123c39083612f64565b6123cd9190612f83565b601e60008282546123de9190612fa5565b90915550506014546015546123f39083612f64565b6123fd9190612f83565b601c600082825461240e9190612fa5565b90915550505b8015612425576124258730836126cb565b61242f818661305e565b94505b61243d8787876126cb565b50505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600081815260216020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061252157612521613075565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561259f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c3919061308b565b816001815181106125d6576125d6613075565b60200260200101906001600160a01b031690816001600160a01b031681525050612621307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84611a48565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac947906126769085906000908690309042906004016130a8565b600060405180830381600087803b15801561269057600080fd5b505af11580156126a4573d6000803e3d6000fd5b505050505050565b60006126b88284612f64565b9392505050565b60006126b88284612f83565b6001600160a01b0383166126f15760405162461bcd60e51b8152600401610b4890612fd6565b6001600160a01b0382166127175760405162461bcd60e51b8152600401610b489061301b565b6001600160a01b0383166000908152602081905260409020548181101561278f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610b48565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906127c6908490612fa5565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161281291815260200190565b60405180910390a350505050565b3060009081526020819052604081205490506000601e54601c54601d546128479190612fa5565b6128519190612fa5565b90506000821580612860575081155b1561286a57505050565b600d54612878906014612f64565b83111561289057600d5461288d906014612f64565b92505b6000600283601d54866128a39190612f64565b6128ad9190612f83565b6128b79190612f83565b905060006128c58583612bea565b9050476128d1826124ec565b60006128dd4783612bea565b905060006128fa87611961601c54856126ac90919063ffffffff16565b9050600061291788611961601e54866126ac90919063ffffffff16565b9050600081612926848661305e565b612930919061305e565b6000601d819055601c819055601e8190556007546040519293506001600160a01b031691849181818185875af1925050503d806000811461298d576040519150601f19603f3d011682016040523d82523d6000602084013e612992565b606091505b509098505086158015906129a65750600081115b156129f9576129b58782612bf6565b601d54604080518881526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d8060008114612a46576040519150601f19603f3d011682016040523d82523d6000602084013e612a4b565b606091505b50505050505050505050505050565b42600b556040516370a0823160e01b81526001600160a01b037f000000000000000000000000c7520dbedcd17d84b4f9c25632afdb926ac64c1f166004820152600090819030906370a0823190602401602060405180830381865afa158015612ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aeb9190612fbd565b90506000612b0a612710611961600854856126ac90919063ffffffff16565b90508015612b3f57612b3f7f000000000000000000000000c7520dbedcd17d84b4f9c25632afdb926ac64c1f61dead836126cb565b60007f000000000000000000000000c7520dbedcd17d84b4f9c25632afdb926ac64c1f9050806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612b9f57600080fd5b505af1158015612bb3573d6000803e3d6000fd5b50506040517f454c91ae84fcc766ddda0dcb289f26b3d0176efeacf4061fc219fa6ca8c3048d925060009150a16001935050505090565b60006126b8828461305e565b612c21307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84611a48565b60405163f305d71960e01b815230600482015260248101839052600060448201819052606482015261dead60848201524260a48201527f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b03169063f305d71990839060c40160606040518083038185885af1158015612cab573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612cd09190613119565b5050505050565b600060208083528351808285015260005b81811015612d0457858101830151858201604001528201612ce8565b81811115612d16576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461159f57600080fd5b60008060408385031215612d5457600080fd5b8235612d5f81612d2c565b946020939093013593505050565b600060208284031215612d7f57600080fd5b81356126b881612d2c565b600060208284031215612d9c57600080fd5b5035919050565b600080600060608486031215612db857600080fd5b8335612dc381612d2c565b92506020840135612dd381612d2c565b929592945050506040919091013590565b803580151581146116f457600080fd5b600080600060608486031215612e0957600080fd5b8335925060208401359150612e2060408501612de4565b90509250925092565b60008060408385031215612e3c57600080fd5b8235612e4781612d2c565b9150612e5560208401612de4565b90509250929050565b600080600060608486031215612e7357600080fd5b505081359360208301359350604090920135919050565b600060208284031215612e9c57600080fd5b6126b882612de4565b60008060408385031215612eb857600080fd5b8235612ec381612d2c565b91506020830135612ed381612d2c565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c90821680612f2757607f821691505b60208210811415612f4857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612f7e57612f7e612f4e565b500290565b600082612fa057634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612fb857612fb8612f4e565b500190565b600060208284031215612fcf57600080fd5b5051919050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60008282101561307057613070612f4e565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561309d57600080fd5b81516126b881612d2c565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156130f85784516001600160a01b0316835293830193918301916001016130d3565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561312e57600080fd5b835192506020840151915060408401519050925092509256fea264697066735822122090d31a3c44b0f5d6dd388f3cdd3b4b1b6df6ae3a0596e8b21362e7351894db5e64736f6c634300080a0033",
    "contract_name": "TELEBET",
    "compiler_version": "v0.8.10+commit.fc410830",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AutoNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"BoughtEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ManualNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"developmentWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"marketingWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastManualLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"manualBurnLiquidityPairTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForLPBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frequencyInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_Enabled\",\"type\":\"bool\"}],\"name\":\"setAutoLPBurnSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developmentFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevelopmentWalletInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWalletInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developmentFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/*\r\nTELEBET\r\nDestiny's gamble\r\nTRY YOUR LUCK AND WITNESS THE HAND OF FATE UNFOLD.\r\nhttps://telebet.cc/wp-content/uploads/2023/08/Telebet_whitepaper.pdf\r\nhttps://telebet.cc\r\nhttps://t.me/TelebetOfficialPortal\r\nhttps://twitter.com/Telebet_ERC20\r\n*/\r\n\r\n/**\r\n$TELEBET\r\nTelebet elevates Telegram into a premier betting arena, \r\ninfusing the adrenaline of gambling with strategic nuance and a cohesive community feel. \r\nPositioned as the pinnacle of Telegram gaming bots, Telebet promises user-centric, high-octane games. \r\nAt its core is $TELEBET\u2014an ERC20 deflationary token custom-built for those with a passion for betting. \r\nPossessing this token opens doors to an unparalleled betting saga. \r\nOur bot\u2019s fluid integration ensures tokens are swiftly and safely transitioned to an escrow mechanism, \r\nstreamlining the betting journey.\r\n\r\n/\r\nCOMMAND CENTRAL\r\nTELEBET\u2019S INTERACTIVE SUITE\u200b\r\n/telebet\r\nSwiftly open the primary dashboard, showcasing available options and game variants.\r\n\r\n/start < minimumBid > < entrantCount >\r\nKick off a game, specifying the minimal bid and participant limit.\r\n\r\n/enter\r\nDive headfirst into the ongoing game\u2019s momentum.\r\n\r\n/stake\r\nLock in your bet and anticipate the thrill.\r\n\r\n/insight\r\nGlean insights on the current game\u2019s strategy and stake layout.\r\n\r\n/history\r\nRevisit your past bets, wins, and moments of serendipity.\r\n\r\n\r\n**/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.10 >=0.8.10 >=0.8.0 <0.9.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\ncontract TELEBET is ERC20, Ownable { \r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    address public constant deadAddress = address(0xdead);\r\n\r\n    bool private swapping;\r\n\r\n    address private marketingWallet;\r\n    address private developmentWallet;\r\n\r\n    uint256 public percentForLPBurn = 0; \r\n    bool public lpBurnEnabled = false;\r\n    uint256 public lpBurnFrequency = 3600 seconds;\r\n    uint256 public lastLpBurnTime;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWallet;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = true;\r\n\r\n    uint256 public manualBurnFrequency = 30 minutes;\r\n    uint256 public lastManualLpBurnTime;\r\n\r\n\r\n\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; \r\n    bool public transferDelayEnabled = true;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyMarketingFee;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyDevelopmentFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 public sellMarketingFee;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public sellDevelopmentFee;\r\n\r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForDev;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event marketingWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event developmentWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    event AutoNukeLP();\r\n\r\n    event ManualNukeLP();\r\n\r\n    constructor() ERC20(\"Telebet\", \"TELEBET\") { \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n\r\n        uint256 _buyMarketingFee = 10;\r\n        uint256 _buyLiquidityFee = 0;\r\n        uint256 _buyDevelopmentFee = 7;\r\n\r\n        uint256 _sellMarketingFee = 20;\r\n        uint256 _sellLiquidityFee = 0;\r\n        uint256 _sellDevelopmentFee = 17; \r\n\r\n        uint256 totalSupply = 100_000_000 * 1e18; \r\n        maxTransactionAmount = 2_000_000 * 1e18; \r\n        maxWallet = 2_000_000 * 1e18; \r\n        swapTokensAtAmount = (totalSupply * 10) / 10000; \r\n\r\n        buyMarketingFee = _buyMarketingFee;\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        buyDevelopmentFee = _buyDevelopmentFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevelopmentFee;\r\n\r\n        sellMarketingFee = _sellMarketingFee;\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellDevelopmentFee = _sellDevelopmentFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevelopmentFee;\r\n\r\n        marketingWallet = address(0xB58e5Bf9Bf0cCD0b566c0b31Ec92402CBa5bc12A);  \r\n        developmentWallet = address(0xB58e5Bf9Bf0cCD0b566c0b31Ec92402CBa5bc12A); \r\n\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        excludeFromMaxTransaction(owner(), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function enableTrade() external onlyOwner {\r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n        lastLpBurnTime = block.timestamp;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner returns (bool) {\r\n        limitsInEffect = false;\r\n        return true;\r\n    }\r\n\r\n    function disableTransferDelay() external onlyOwner returns (bool) {\r\n        transferDelayEnabled = false;\r\n        return true;\r\n    }\r\n\r\n    function updateSwapTokensAtAmount(uint256 newAmount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            newAmount >= (totalSupply() * 1) / 100000,\r\n            \"Swap amount cannot be lower than 0.001% total supply.\"\r\n        );\r\n        require(\r\n            newAmount <= (totalSupply() * 5) / 1000,\r\n            \"Swap amount cannot be higher than 0.5% total supply.\"\r\n        );\r\n        swapTokensAtAmount = newAmount;\r\n        return true;\r\n    }\r\n\r\n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 1) / 1000) / 1e18,\r\n            \"Cannot set maxTransactionAmount lower than 0.1%\"\r\n        );\r\n        maxTransactionAmount = newNum * (10**18);\r\n    }\r\n\r\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot set maxWallet lower than 0.5%\"\r\n        );\r\n        maxWallet = newNum * (10**18);\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    function updateSwapEnabled(bool enabled) external onlyOwner {\r\n        swapEnabled = enabled;\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _developmentFee\r\n    ) external onlyOwner {\r\n        buyMarketingFee = _marketingFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyDevelopmentFee = _developmentFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevelopmentFee;\r\n    }\r\n\r\n    function updateSellFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _developmentFee\r\n    ) external onlyOwner {\r\n        sellMarketingFee = _marketingFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellDevelopmentFee = _developmentFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevelopmentFee;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateMarketingWalletInfo(address newMarketingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\r\n        marketingWallet = newMarketingWallet;\r\n    }\r\n\r\n    function updateDevelopmentWalletInfo(address newWallet) external onlyOwner {\r\n        emit developmentWalletUpdated(newWallet, developmentWallet);\r\n        developmentWallet = newWallet;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    event BoughtEarly(address indexed sniper);\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ) {\r\n                if (!tradingActive) {\r\n                    require(\r\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\r\n                        \"Trading is not active.\"\r\n                    );\r\n                }\r\n\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\r\n                if (transferDelayEnabled) {\r\n                    if (\r\n                        to != owner() &&\r\n                        to != address(uniswapV2Router) &&\r\n                        to != address(uniswapV2Pair)\r\n                    ) {\r\n                        require(\r\n                            _holderLastTransferTimestamp[tx.origin] <\r\n                                block.number,\r\n                            \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                        );\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                    }\r\n                }\r\n\r\n                //when buy\r\n                if (\r\n                    automatedMarketMakerPairs[from] &&\r\n                    !_isExcludedMaxTransactionAmount[to]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Buy transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n                //when sell\r\n                else if (\r\n                    automatedMarketMakerPairs[to] &&\r\n                    !_isExcludedMaxTransactionAmount[from]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Sell transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        if (\r\n            !swapping &&\r\n            automatedMarketMakerPairs[to] &&\r\n            lpBurnEnabled &&\r\n            block.timestamp >= lastLpBurnTime + lpBurnFrequency &&\r\n            !_isExcludedFromFees[from]\r\n        ) {\r\n            autoBurnLiquidityPairTokens();\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if (takeFee) {\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\r\n                fees = amount.mul(sellTotalFees).div(100);\r\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\r\n                tokensForDev += (fees * sellDevelopmentFee) / sellTotalFees;\r\n                tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = amount.mul(buyTotalFees).div(100);\r\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\r\n                tokensForDev += (fees * buyDevelopmentFee) / buyTotalFees;\r\n                tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            deadAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity +\r\n            tokensForMarketing +\r\n            tokensForDev;\r\n        bool success;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapTokensAtAmount * 20) {\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /\r\n            totalTokensToSwap /\r\n            2;\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(\r\n            totalTokensToSwap\r\n        );\r\n        uint256 ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap);\r\n\r\n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForDev;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n        tokensForDev = 0;\r\n\r\n        (success, ) = address(developmentWallet).call{value: ethForDev}(\"\");\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(\r\n                amountToSwapForETH,\r\n                ethForLiquidity,\r\n                tokensForLiquidity\r\n            );\r\n        }\r\n\r\n        (success, ) = address(marketingWallet).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n\r\n\r\n        function manualswap() external {\r\n        require(\r\n            _msgSender() == developmentWallet ||\r\n                _msgSender() == marketingWallet\r\n        );\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function manualsend() external {\r\n        require(\r\n            _msgSender() == developmentWallet ||\r\n                _msgSender() == marketingWallet\r\n        );\r\n        bool success;\r\n        (success, ) = address(marketingWallet).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n\r\n    function setAutoLPBurnSettings(\r\n        uint256 _frequencyInSeconds,\r\n        uint256 _percent,\r\n        bool _Enabled\r\n    ) external onlyOwner {\r\n        require(\r\n            _frequencyInSeconds >= 600,\r\n            \"cannot set buyback more often than every 10 minutes\"\r\n        );\r\n        require(\r\n            _percent <= 1000 && _percent >= 0,\r\n            \"Must set auto LP burn percent between 0% and 10%\"\r\n        );\r\n        lpBurnFrequency = _frequencyInSeconds;\r\n        percentForLPBurn = _percent;\r\n        lpBurnEnabled = _Enabled;\r\n    }\r\n\r\n    function autoBurnLiquidityPairTokens() internal returns (bool) {\r\n        lastLpBurnTime = block.timestamp;\r\n\r\n        // get balance of liquidity pair\r\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\r\n\r\n        // calculate amount to burn\r\n        uint256 amountToBurn = liquidityPairBalance.mul(percentForLPBurn).div(\r\n            10000\r\n        );\r\n\r\n        // pull tokens from pancakePair liquidity and move to dead address permanently\r\n        if (amountToBurn > 0) {\r\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\r\n        }\r\n\r\n        //sync price since this is not in a swap transaction!\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        pair.sync();\r\n        emit AutoNukeLP();\r\n        return true;\r\n    }\r\n\r\n    function manualBurnLiquidityPairTokens(uint256 percent)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            block.timestamp > lastManualLpBurnTime + manualBurnFrequency,\r\n            \"Must wait for cooldown to finish\"\r\n        );\r\n        require(percent <= 1000, \"May not nuke more than 10% of tokens in LP\");\r\n        lastManualLpBurnTime = block.timestamp;\r\n\r\n        // get balance of liquidity pair\r\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\r\n\r\n        // calculate amount to burn\r\n        uint256 amountToBurn = liquidityPairBalance.mul(percent).div(10000);\r\n\r\n        // pull tokens from pancakePair liquidity and move to dead address permanently\r\n        if (amountToBurn > 0) {\r\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\r\n        }\r\n\r\n        //sync price since this is not in a swap transaction!\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        pair.sync();\r\n        emit ManualNukeLP();\r\n        return true;\r\n    }\r\n}",
    "etherscan_verified": true
}