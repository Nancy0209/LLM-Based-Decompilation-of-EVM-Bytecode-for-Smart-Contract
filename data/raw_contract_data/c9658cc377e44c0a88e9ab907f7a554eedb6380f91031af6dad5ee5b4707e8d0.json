{
    "address": "0xaEAD18A6f788fb7460aDA9fDFf4C4Cd6Ba72dDBE",
    "tx_hash": "c9658cc377e44c0a88e9ab907f7a554eedb6380f91031af6dad5ee5b4707e8d0",
    "block_number": 18007362,
    "timestamp": 1693155791,
    "gas_used_in_creation": 3077999,
    "creation_bytecode": "608060405234801561001057600080fd5b506136b4806100206000396000f3fe6080604052600436106101e15760003560e01c806301ffc9a7146101e657806306fdde031461021b578063081812fc1461023d578063095ea7b31461026a578063152f0eb51461027f57806318160ddd1461029f5780631986166f146102c25780631beab0f6146102e257806323b872dd146103025780632a55205a146103155780632adbc37d146103545780632cf1dacb146103695780634029a3ce1461038957806340897bbe146103a957806340c10f19146103be57806342842e0e146103de57806342966c68146103f15780634cd88b761461041157806354fd4d501461043157806355f804b31461045f5780635bbb21771461047f5780636352211e146104ac57806370a08231146104cc578063715018a6146104ec57806374478bb3146105015780637b74297d1461051b5780638462151c146105485780638d01616d146105755780638da5cb5b146105a257806395d89b41146105b75780639713c807146105cc57806399a2557a146105ec578063a06617cd1461060c578063a22cb46514610639578063a64d0cd414610659578063a8f1602c1461067b578063b7b090ee146106b5578063b88d4fde146106d5578063c23dc68f146106e8578063c87b56dd14610715578063e985e9c514610735578063f2fde38b14610755575b600080fd5b3480156101f257600080fd5b50610206610201366004612c79565b610775565b60405190151581526020015b60405180910390f35b34801561022757600080fd5b506102306107bc565b6040516102129190612cee565b34801561024957600080fd5b5061025d610258366004612d01565b610857565b6040516102129190612d1a565b61027d610278366004612d43565b61089b565b005b34801561028b57600080fd5b5061027d61029a366004612d43565b61095c565b3480156102ab57600080fd5b506102b46109f2565b604051908152602001610212565b3480156102ce57600080fd5b5061027d6102dd366004612d6f565b610a12565b3480156102ee57600080fd5b5061027d6102fd366004612d43565b610afd565b61027d610310366004612db0565b610cd3565b34801561032157600080fd5b50610335610330366004612de0565b610da7565b604080516001600160a01b039093168352602083019190915201610212565b34801561036057600080fd5b5061027d610e32565b34801561037557600080fd5b5061027d610384366004612d6f565b610ec8565b34801561039557600080fd5b5061027d6103a4366004612ed6565b610faf565b3480156103b557600080fd5b5061027d6110c2565b3480156103ca57600080fd5b5061027d6103d9366004612d43565b61114f565b61027d6103ec366004612db0565b6111d1565b3480156103fd57600080fd5b5061027d61040c366004612d01565b6112a0565b34801561041d57600080fd5b5061027d61042c366004613004565b6113fc565b34801561043d57600080fd5b506040805180820190915260058152640625c605c760db1b6020820152610230565b34801561046b57600080fd5b5061027d61047a36600461305d565b6115c7565b34801561048b57600080fd5b5061049f61049a366004613091565b611652565b6040516102129190613141565b3480156104b857600080fd5b5061025d6104c7366004612d01565b61169e565b3480156104d857600080fd5b506102b46104e7366004613183565b6116a9565b3480156104f857600080fd5b5061027d611708565b34801561050d57600080fd5b506065546102069060ff1681565b34801561052757600080fd5b5061053b610536366004612d01565b61178d565b60405161021291906131a0565b34801561055457600080fd5b50610568610563366004613183565b6117f9565b60405161021291906131e1565b34801561058157600080fd5b506102b4610590366004612d01565b6000908152606c602052604090205490565b3480156105ae57600080fd5b5061025d611828565b3480156105c357600080fd5b50610230611837565b3480156105d857600080fd5b5061027d6105e7366004613219565b61184f565b3480156105f857600080fd5b50610568610607366004613240565b6119f6565b34801561061857600080fd5b506102b4610627366004613183565b60686020526000908152604090205481565b34801561064557600080fd5b5061027d610654366004613283565b611a03565b34801561066557600080fd5b50604051637a54af9360e11b8152602001610212565b34801561068757600080fd5b50610206610696366004612d43565b6001600160a01b03919091166000908152606860205260409020541490565b3480156106c157600080fd5b5061027d6106d0366004613004565b611ab6565b61027d6106e33660046132bc565b611b6d565b3480156106f457600080fd5b50610708610703366004612d01565b611c4a565b604051610212919061333b565b34801561072157600080fd5b50610230610730366004612d01565b611c91565b34801561074157600080fd5b50610206610750366004613349565b611d0c565b34801561076157600080fd5b5061027d610770366004613183565b611d49565b600061078082611e2f565b8061079b57506001600160e01b03198216637a54af9360e11b145b806107b6575063152a902d60e11b6001600160e01b03198316145b92915050565b60606107c6611e7d565b60020180546107d490613377565b80601f016020809104026020016040519081016040528092919081815260200182805461080090613377565b801561084d5780601f106108225761010080835404028352916020019161084d565b820191906000526020600020905b81548152906001019060200180831161083057829003601f168201915b5050505050905090565b600061086282611ea1565b610876576108766333d1c03960e21b611eff565b61087e611e7d565b60009283526006016020525060409020546001600160a01b031690565b816daaeb6d7670e522a718067333cd4e3b1561094d57604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c6171134906108e490309085906004016133b1565b602060405180830381865afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092591906133cb565b61094d5780604051633b79c77360e21b81526004016109449190612d1a565b60405180910390fd5b6109578383611f09565b505050565b3360008181526068602052604090205415158061098857503361097d611828565b6001600160a01b0316145b6109a45760405162461bcd60e51b8152600401610944906133e8565b506001600160a01b03909116600081815260686020908152604080832085905593825260698152928120805460018101825590825292902090910180546001600160a01b0319169091179055565b600060016109fe611e7d565b60010154610a0a611e7d565b540303919050565b606554600090610100900460ff168015610a51575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033610a5c611828565b6001600160a01b03161480610a6e5750805b610a8a5760405162461bcd60e51b81526004016109449061342c565b6001600160a01b03841660009081526066602090815260408083206001600160e01b0319871684529091529020805460ff191660011790558115610af7576001600160a01b03841660009081526067602090815260408083208584529091529020805460ff191660011790555b50505050565b606554600090610100900460ff168015610b3c575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033610b47611828565b6001600160a01b03161480610b595750805b610b755760405162461bcd60e51b81526004016109449061342c565b6001600160a01b0383166000908152606860205260409020548390610bd95760405162461bcd60e51b815260206004820152601a60248201527910dbdb9d1c9858dd081a5cc81b9bdd081c9959da5cdd195c995960321b6044820152606401610944565b6001600160a01b03841660009081526068602090815260408083205483526069909152902080548190610c0e90600190613477565b81548110610c1e57610c1e61348e565b9060005260206000200160009054906101000a90046001600160a01b0316818581548110610c4e57610c4e61348e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080805480610c8c57610c8c6134a4565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b039690961681526068909552505060408320929092555050565b826daaeb6d7670e522a718067333cd4e3b15610d9c57336001600160a01b03821603610d0957610d04848484611f15565b610af7565b604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c617113490610d3c90309033906004016133b1565b602060405180830381865afa158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d91906133cb565b610d9c5733604051633b79c77360e21b81526004016109449190612d1a565b610af7848484611f15565b6000828152606b6020526040812054819081906001600160a01b0316610dce57606a610ddd565b6000858152606b602052604090205b6040805180820190915290546001600160a01b038116808352600160a01b90910462ffffff166020830181905290945090915061271090610e1e90866134ba565b610e2891906134d9565b9150509250929050565b606554600090610100900460ff168015610e71575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033610e7c611828565b6001600160a01b03161480610e8e5750805b610eaa5760405162461bcd60e51b81526004016109449061342c565b506065805461ff001981166101009182900460ff1615909102179055565b606554600090610100900460ff168015610f07575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033610f12611828565b6001600160a01b03161480610f245750805b610f405760405162461bcd60e51b81526004016109449061342c565b6001600160a01b03841660009081526066602090815260408083206001600160e01b0319871684529091529020805460ff191690558115610af7576001600160a01b03841660009081526067602090815260408083208584529091529020805460ff1916600117905550505050565b606554600090610100900460ff168015610fee575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033610ff9611828565b6001600160a01b0316148061100b5750805b6110275760405162461bcd60e51b81526004016109449061342c565b81518351146110685760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081a5b9c1d5d609a1b6044820152606401610944565b60005b8351811015610af7576110b08482815181106110895761108961348e565b60200260200101518483815181106110a3576110a361348e565b60200260200101516120c8565b806110ba816134fb565b91505061106b565b606554600090610100900460ff168015611101575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b90503361110c611828565b6001600160a01b0316148061111e5750805b61113a5760405162461bcd60e51b81526004016109449061342c565b506065805460ff19811660ff90911615179055565b606554600090610100900460ff16801561118e575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033611199611828565b6001600160a01b031614806111ab5750805b6111c75760405162461bcd60e51b81526004016109449061342c565b61095783836120c8565b826daaeb6d7670e522a718067333cd4e3b1561129557336001600160a01b0382160361120257610d0484848461220d565b604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c61711349061123590309033906004016133b1565b602060405180830381865afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127691906133cb565b6112955733604051633b79c77360e21b81526004016109449190612d1a565b610af784848461220d565b336000818152606860205260409020541515806112cc5750336112c1611828565b6001600160a01b0316145b6112e85760405162461bcd60e51b8152600401610944906133e8565b6112f182612228565b6003600052606960205260008051602061363f8339815191525415801590611357575060036000908152606960205260008051602061363f8339815191528054829061133f5761133f61348e565b6000918252602090912001546001600160a01b031614155b156113f85760036000908152606960205260008051602061363f83398151915280549091906113885761138861348e565b600091825260208220015460405163b68c437960e01b81526001600160a01b039091169163b68c4379916113c59133918790600390600401613514565b600060405180830381600087803b1580156113df57600080fd5b505af11580156113f3573d6000803e3d6000fd5b505050505b5050565b600054610100900460ff161580801561141c5750600054600160ff909116105b806114365750303b158015611436575060005460ff166001145b6114995760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610944565b6000805460ff1916600117905580156114bc576000805461ff0019166101001790555b606d5460ff1661157d57606d805460ff19166001179055826114dc611e7d565b60020190805190602001906114f2929190612ba3565b50816114fc611e7d565b6003019080519060200190611512929190612ba3565b50600161151d611e7d565b5561152733612233565b61152f6110c2565b61154e739dc5ee2d52d014f8b81d662fa8f4ca525f27cd6b6001612285565b60405180606001604052806021815260200161361e60219139805161157b9160a091602090910190612ba3565b505b8015610957576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b606554600090610100900460ff168015611606575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033611611611828565b6001600160a01b031614806116235750805b61163f5760405162461bcd60e51b81526004016109449061342c565b81516109579060a0906020850190612ba3565b60408051828152600583901b8082016020019092526060915b801561169657601f198082019186010135600061168782611c4a565b848401602001525061166b9050565b509392505050565b60006107b682612429565b60006001600160a01b0382166116c9576116c96323d3ad8160e21b611eff565b6001600160401b036116d9611e7d565b6005016000846001600160a01b03166001600160a01b0316815260200190815260200160002054169050919050565b606554600090610100900460ff168015611747575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033611752611828565b6001600160a01b031614806117645750805b6117805760405162461bcd60e51b81526004016109449061342c565b61178a6000612233565b50565b6000818152606960209081526040918290208054835181840281018401909452808452606093928301828280156117ed57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117cf575b50505050509050919050565b6060600160006118076124eb565b905060608183146118205761181d8584846124fb565b90505b949350505050565b6033546001600160a01b031690565b6060611841611e7d565b60030180546107d490613377565b306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561188d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b19190613560565b6001600160a01b0316336001600160a01b0316146118fd5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610944565b61271081111561194c5760405162461bcd60e51b815260206004820152601a60248201527908aa48664727062a4def2c2d8e8d2cae67440a8dede40d0d2ced60331b6044820152606401610944565b8260000361199f57604080518082019091526001600160a01b03831680825262ffffff83166020909201829052606a8054600160a01b9093026001600160b81b0319909316909117919091179055505050565b6040805180820182526001600160a01b03938416815262ffffff92831660208083019182526000968752606b905291909420935184549151909216600160a01b026001600160b81b03199091169190921617179055565b60606118208484846124fb565b816daaeb6d7670e522a718067333cd4e3b15611aac57604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c617113490611a4c90309085906004016133b1565b602060405180830381865afa158015611a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8d91906133cb565b611aac5780604051633b79c77360e21b81526004016109449190612d1a565b6109578383612603565b606554600090610100900460ff168015611af5575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033611b00611828565b6001600160a01b03161480611b125750805b611b2e5760405162461bcd60e51b81526004016109449061342c565b82611b37611e7d565b6002019080519060200190611b4d929190612ba3565b5081611b57611e7d565b6003019080519060200190610af7929190612ba3565b836daaeb6d7670e522a718067333cd4e3b15611c3757336001600160a01b03821603611ba457611b9f85858585612680565b611c43565b604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c617113490611bd790309033906004016133b1565b602060405180830381865afa158015611bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1891906133cb565b611c375733604051633b79c77360e21b81526004016109449190612d1a565b611c4385858585612680565b5050505050565b611c52612c27565b60018210611c8c57611c626124eb565b821015611c8c575b611c73826126bb565b611c835760001990910190611c6a565b6107b6826126db565b919050565b6060611c9c82611ea1565b611cb057611cb0630a14c4b560e41b611eff565b6000611cba612706565b90508051600003611cda5760405180602001604052806000815250611d05565b80611ce484612715565b604051602001611cf592919061357d565b6040516020818303038152906040525b9392505050565b6000611d16611e7d565b6001600160a01b039384166000908152600791909101602090815260408083209490951682529290925250205460ff1690565b606554600090610100900460ff168015611d88575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033611d93611828565b6001600160a01b03161480611da55750805b611dc15760405162461bcd60e51b81526004016109449061342c565b6001600160a01b038216611e265760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610944565b6113f882612233565b60006301ffc9a760e01b6001600160e01b031983161480611e6057506380ac58cd60e01b6001600160e01b03198316145b806107b65750506001600160e01b031916635b5e139f60e01b1490565b7f2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c4090565b600081600111611c8c57611eb3611e7d565b54821015611c8c5760005b611ec6611e7d565b600084815260049190910160205260408120549150819003611ef257611eeb836135ac565b9250611ebe565b600160e01b161592915050565b8060005260046000fd5b6113f882826001612759565b6000611f2082612429565b6001600160a01b039485169490915081168414611f4657611f4662a1148160e81b611eff565b600080611f528461280a565b91509150611f778187611f623390565b6001600160a01b039081169116811491141790565b611f9957611f858633611d0c565b611f9957611f99632ce44b5f60e11b611eff565b8015611fa457600082555b611fac611e7d565b6001600160a01b0387166000908152600591909101602052604090208054600019019055611fd8611e7d565b6001600160a01b0386166000908152600591909101602052604090208054600101905561200985600160e11b612832565b612011611e7d565b60008681526004919091016020526040812091909155600160e11b841690036120875760018401612040611e7d565b60008281526004919091016020526040812054900361208557612061611e7d565b5481146120855783612071611e7d565b600083815260049190910160205260409020555b505b6001600160a01b03851684818860008051602061365f833981519152600080a4806000036120bf576120bf633a954ecd60e21b611eff565b50505050505050565b6000818152606c6020526040902054156121215760405162461bcd60e51b815260206004820152601a602482015279115e1d195c9b985b08125108185b1c9958591e481b5a5b9d195960321b6044820152606401610944565b600061212b611e7d565b546000838152606c60205260409020819055905061214a836001612847565b6003600052606960205260008051602061363f83398151915254158015906121b0575060036000908152606960205260008051602061363f83398151915280543392906121995761219961348e565b6000918252602090912001546001600160a01b0316145b156109575760405163b68c437960e01b8152339063b68c4379906121df90600090879086908390600401613514565b600060405180830381600087803b1580156121f957600080fd5b505af11580156120bf573d6000803e3d6000fd5b61095783838360405180602001604052806000815250611b6d565b61178a816001612920565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166122f05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610944565b6daaeb6d7670e522a718067333cd4e3b156113f85760405163c3c5a54760e01b81526daaeb6d7670e522a718067333cd4e9063c3c5a54790612336903090600401612d1a565b6020604051808303816000875af1158015612355573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237991906133cb565b6113f85780156123b657604051633e9f1edf60e11b81526daaeb6d7670e522a718067333cd4e90637d3e3dbe906113c590309086906004016133b1565b6001600160a01b038216156123f85760405163a0af290360e01b81526daaeb6d7670e522a718067333cd4e9063a0af2903906113c590309086906004016133b1565b604051632210724360e11b81526daaeb6d7670e522a718067333cd4e90634420e486906113c5903090600401612d1a565b6000816001116124db5761243b611e7d565b6000838152600491909101602052604081205491508190036124c85761245f611e7d565b54821061247657612476636f96cda160e11b611eff565b61247e611e7d565b60001990920160008181526004939093016020526040909220549050801561247657600160e01b81166000036124b357919050565b6124c3636f96cda160e11b611eff565b612476565b600160e01b81166000036124db57919050565b611c8c636f96cda160e11b611eff565b60006124f5611e7d565b54919050565b606081831061251457612514631960ccad60e11b611eff565b600183101561252257600192505b600061252c6124eb565b9050808310612539578092505b60606000612546876116a9565b858710908102915081156125f75781878703116125635786860391505b60405192506001820160051b8301604052600061257f88611c4a565b905060008160400151612590575080515b60005b61259c8a6126db565b92506040830151600081146125b457600092506125d9565b8351156125c057835192505b8b831860601b6125d9576001820191508a8260051b8801525b5060018a019950888a14806125ed57508481145b1561259357855250505b50909695505050505050565b8061260c611e7d565b336000818152600792909201602090815260408084206001600160a01b03881680865290835293819020805460ff19169515159590951790945592518415158152919290917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61268b848484610cd3565b6001600160a01b0383163b15610af7576126a784848484612a7e565b610af757610af76368d2bf6b60e11b611eff565b60006126c5611e7d565b6000928352600401602052506040902054151590565b6126e3612c27565b6107b66126ee611e7d565b60008481526004919091016020526040902054612b60565b606060a080546107d490613377565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a90048061272f5750819003601f19909101908152919050565b60006127648361169e565b905081801561277c5750336001600160a01b03821614155b1561279f5761278b8133611d0c565b61279f5761279f6367d9dca160e11b611eff565b836127a8611e7d565b6000858152600691909101602052604080822080546001600160a01b0319166001600160a01b0394851617905551859287811692908516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a450505050565b6000806000612817611e7d565b60009485526006016020525050604090912080549092909150565b4260a01b176001600160a01b03919091161790565b6000612851611e7d565b549050600082900361286d5761286d63b562e8dd60e01b611eff565b61287d836001841460e11b612832565b612885611e7d565b600083815260049190910160205260409020556001600160401b0182026128aa611e7d565b6001600160a01b03851660008181526005929092016020526040822080549093019092558190036128e4576128e4622e076360e81b611eff565b818301825b8083600060008051602061365f833981519152600080a48181600101915081036128e95781612916611e7d565b5550610957915050565b600061292b83612429565b90508060008061293a8661280a565b9150915084156129715761294f818433611f62565b6129715761295d8333611d0c565b61297157612971632ce44b5f60e11b611eff565b801561297c57600082555b6001600160801b0361298c611e7d565b6001600160a01b03851660009081526005919091016020526040902080549190910190556129be83600360e01b612832565b6129c6611e7d565b60008881526004919091016020526040812091909155600160e11b85169003612a3c57600186016129f5611e7d565b600082815260049190910160205260408120549003612a3a57612a16611e7d565b548114612a3a5784612a26611e7d565b600083815260049190910160205260409020555b505b60405186906000906001600160a01b0386169060008051602061365f833981519152908390a4612a6a611e7d565b600190810180549091019055505050505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290612ab39033908990889088906004016135c3565b6020604051808303816000875af1925050508015612aee575060408051601f3d908101601f19168201909252612aeb91810190613600565b60015b612b43573d808015612b1c576040519150601f19603f3d011682016040523d82523d6000602084013e612b21565b606091505b508051600003612b3b57612b3b6368d2bf6b60e11b611eff565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b612b68612c27565b6001600160a01b03821681526001600160401b0360a083901c166020820152600160e01b82161515604082015260e89190911c606082015290565b828054612baf90613377565b90600052602060002090601f016020900481019282612bd15760008555612c17565b82601f10612bea57805160ff1916838001178555612c17565b82800160010185558215612c17579182015b82811115612c17578251825591602001919060010190612bfc565b50612c23929150612c4e565b5090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b5b80821115612c235760008155600101612c4f565b6001600160e01b03198116811461178a57600080fd5b600060208284031215612c8b57600080fd5b8135611d0581612c63565b60005b83811015612cb1578181015183820152602001612c99565b83811115610af75750506000910152565b60008151808452612cda816020860160208601612c96565b601f01601f19169290920160200192915050565b602081526000611d056020830184612cc2565b600060208284031215612d1357600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461178a57600080fd5b60008060408385031215612d5657600080fd5b8235612d6181612d2e565b946020939093013593505050565b600080600060608486031215612d8457600080fd5b8335612d8f81612d2e565b92506020840135612d9f81612c63565b929592945050506040919091013590565b600080600060608486031215612dc557600080fd5b8335612dd081612d2e565b92506020840135612d9f81612d2e565b60008060408385031215612df357600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612e4057612e40612e02565b604052919050565b60006001600160401b03821115612e6157612e61612e02565b5060051b60200190565b600082601f830112612e7c57600080fd5b81356020612e91612e8c83612e48565b612e18565b82815260059290921b84018101918181019086841115612eb057600080fd5b8286015b84811015612ecb5780358352918301918301612eb4565b509695505050505050565b60008060408385031215612ee957600080fd5b82356001600160401b0380821115612f0057600080fd5b818501915085601f830112612f1457600080fd5b81356020612f24612e8c83612e48565b82815260059290921b84018101918181019089841115612f4357600080fd5b948201945b83861015612f6a578535612f5b81612d2e565b82529482019490820190612f48565b96505086013592505080821115612f8057600080fd5b50610e2885828601612e6b565b60006001600160401b03831115612fa657612fa6612e02565b612fb9601f8401601f1916602001612e18565b9050828152838383011115612fcd57600080fd5b828260208301376000602084830101529392505050565b600082601f830112612ff557600080fd5b611d0583833560208501612f8d565b6000806040838503121561301757600080fd5b82356001600160401b038082111561302e57600080fd5b61303a86838701612fe4565b9350602085013591508082111561305057600080fd5b50610e2885828601612fe4565b60006020828403121561306f57600080fd5b81356001600160401b0381111561308557600080fd5b61182084828501612fe4565b600080602083850312156130a457600080fd5b82356001600160401b03808211156130bb57600080fd5b818501915085601f8301126130cf57600080fd5b8135818111156130de57600080fd5b8660208260051b85010111156130f357600080fd5b60209290920196919550909350505050565b80516001600160a01b031682526020808201516001600160401b03169083015260408082015115159083015260609081015162ffffff16910152565b6020808252825182820181905260009190848201906040850190845b818110156125f757613170838551613105565b928401926080929092019160010161315d565b60006020828403121561319557600080fd5b8135611d0581612d2e565b6020808252825182820181905260009190848201906040850190845b818110156125f75783516001600160a01b0316835292840192918401916001016131bc565b6020808252825182820181905260009190848201906040850190845b818110156125f7578351835292840192918401916001016131fd565b60008060006060848603121561322e57600080fd5b833592506020840135612d9f81612d2e565b60008060006060848603121561325557600080fd5b833561326081612d2e565b95602085013595506040909401359392505050565b801515811461178a57600080fd5b6000806040838503121561329657600080fd5b82356132a181612d2e565b915060208301356132b181613275565b809150509250929050565b600080600080608085870312156132d257600080fd5b84356132dd81612d2e565b935060208501356132ed81612d2e565b92506040850135915060608501356001600160401b0381111561330f57600080fd5b8501601f8101871361332057600080fd5b61332f87823560208401612f8d565b91505092959194509250565b608081016107b68284613105565b6000806040838503121561335c57600080fd5b823561336781612d2e565b915060208301356132b181612d2e565b600181811c9082168061338b57607f821691505b6020821081036133ab57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b0392831681529116602082015260400190565b6000602082840312156133dd57600080fd5b8151611d0581613275565b60208082526024908201527f436f6e7472616374206973206e6f742072656769737465726564206e6f72204f6040820152633bb732b960e11b606082015260800190565b6020808252601b908201527a4e6f74206f776e6572206f722061626c6520746f2062797061737360281b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561348957613489613461565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156134d4576134d4613461565b500290565b6000826134f657634e487b7160e01b600052601260045260246000fd5b500490565b60006001820161350d5761350d613461565b5060010190565b6001600160a01b0385811682528416602082015260408101839052608081016005831061355157634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b60006020828403121561357257600080fd5b8151611d0581612d2e565b6000835161358f818460208801612c96565b8351908301906135a3818360208801612c96565b01949350505050565b6000816135bb576135bb613461565b506000190190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906135f690830184612cc2565b9695505050505050565b60006020828403121561361257600080fd5b8151611d0581612c6356fe68747470733a2f2f76322e656d626c656d7661756c742e696f2f76332f6d65746156d594188730cd2db4f97166f7e9b0b9d5caa8ac32e0506fd5faeb5b224f8813ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a1bad9af7cd76de60a93aeb2a308eb296088ccc4fa1fb6b56709f6a56d1f613664736f6c634300080d0033",
    "runtime_bytecode": "6080604052600436106101e15760003560e01c806301ffc9a7146101e657806306fdde031461021b578063081812fc1461023d578063095ea7b31461026a578063152f0eb51461027f57806318160ddd1461029f5780631986166f146102c25780631beab0f6146102e257806323b872dd146103025780632a55205a146103155780632adbc37d146103545780632cf1dacb146103695780634029a3ce1461038957806340897bbe146103a957806340c10f19146103be57806342842e0e146103de57806342966c68146103f15780634cd88b761461041157806354fd4d501461043157806355f804b31461045f5780635bbb21771461047f5780636352211e146104ac57806370a08231146104cc578063715018a6146104ec57806374478bb3146105015780637b74297d1461051b5780638462151c146105485780638d01616d146105755780638da5cb5b146105a257806395d89b41146105b75780639713c807146105cc57806399a2557a146105ec578063a06617cd1461060c578063a22cb46514610639578063a64d0cd414610659578063a8f1602c1461067b578063b7b090ee146106b5578063b88d4fde146106d5578063c23dc68f146106e8578063c87b56dd14610715578063e985e9c514610735578063f2fde38b14610755575b600080fd5b3480156101f257600080fd5b50610206610201366004612c79565b610775565b60405190151581526020015b60405180910390f35b34801561022757600080fd5b506102306107bc565b6040516102129190612cee565b34801561024957600080fd5b5061025d610258366004612d01565b610857565b6040516102129190612d1a565b61027d610278366004612d43565b61089b565b005b34801561028b57600080fd5b5061027d61029a366004612d43565b61095c565b3480156102ab57600080fd5b506102b46109f2565b604051908152602001610212565b3480156102ce57600080fd5b5061027d6102dd366004612d6f565b610a12565b3480156102ee57600080fd5b5061027d6102fd366004612d43565b610afd565b61027d610310366004612db0565b610cd3565b34801561032157600080fd5b50610335610330366004612de0565b610da7565b604080516001600160a01b039093168352602083019190915201610212565b34801561036057600080fd5b5061027d610e32565b34801561037557600080fd5b5061027d610384366004612d6f565b610ec8565b34801561039557600080fd5b5061027d6103a4366004612ed6565b610faf565b3480156103b557600080fd5b5061027d6110c2565b3480156103ca57600080fd5b5061027d6103d9366004612d43565b61114f565b61027d6103ec366004612db0565b6111d1565b3480156103fd57600080fd5b5061027d61040c366004612d01565b6112a0565b34801561041d57600080fd5b5061027d61042c366004613004565b6113fc565b34801561043d57600080fd5b506040805180820190915260058152640625c605c760db1b6020820152610230565b34801561046b57600080fd5b5061027d61047a36600461305d565b6115c7565b34801561048b57600080fd5b5061049f61049a366004613091565b611652565b6040516102129190613141565b3480156104b857600080fd5b5061025d6104c7366004612d01565b61169e565b3480156104d857600080fd5b506102b46104e7366004613183565b6116a9565b3480156104f857600080fd5b5061027d611708565b34801561050d57600080fd5b506065546102069060ff1681565b34801561052757600080fd5b5061053b610536366004612d01565b61178d565b60405161021291906131a0565b34801561055457600080fd5b50610568610563366004613183565b6117f9565b60405161021291906131e1565b34801561058157600080fd5b506102b4610590366004612d01565b6000908152606c602052604090205490565b3480156105ae57600080fd5b5061025d611828565b3480156105c357600080fd5b50610230611837565b3480156105d857600080fd5b5061027d6105e7366004613219565b61184f565b3480156105f857600080fd5b50610568610607366004613240565b6119f6565b34801561061857600080fd5b506102b4610627366004613183565b60686020526000908152604090205481565b34801561064557600080fd5b5061027d610654366004613283565b611a03565b34801561066557600080fd5b50604051637a54af9360e11b8152602001610212565b34801561068757600080fd5b50610206610696366004612d43565b6001600160a01b03919091166000908152606860205260409020541490565b3480156106c157600080fd5b5061027d6106d0366004613004565b611ab6565b61027d6106e33660046132bc565b611b6d565b3480156106f457600080fd5b50610708610703366004612d01565b611c4a565b604051610212919061333b565b34801561072157600080fd5b50610230610730366004612d01565b611c91565b34801561074157600080fd5b50610206610750366004613349565b611d0c565b34801561076157600080fd5b5061027d610770366004613183565b611d49565b600061078082611e2f565b8061079b57506001600160e01b03198216637a54af9360e11b145b806107b6575063152a902d60e11b6001600160e01b03198316145b92915050565b60606107c6611e7d565b60020180546107d490613377565b80601f016020809104026020016040519081016040528092919081815260200182805461080090613377565b801561084d5780601f106108225761010080835404028352916020019161084d565b820191906000526020600020905b81548152906001019060200180831161083057829003601f168201915b5050505050905090565b600061086282611ea1565b610876576108766333d1c03960e21b611eff565b61087e611e7d565b60009283526006016020525060409020546001600160a01b031690565b816daaeb6d7670e522a718067333cd4e3b1561094d57604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c6171134906108e490309085906004016133b1565b602060405180830381865afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092591906133cb565b61094d5780604051633b79c77360e21b81526004016109449190612d1a565b60405180910390fd5b6109578383611f09565b505050565b3360008181526068602052604090205415158061098857503361097d611828565b6001600160a01b0316145b6109a45760405162461bcd60e51b8152600401610944906133e8565b506001600160a01b03909116600081815260686020908152604080832085905593825260698152928120805460018101825590825292902090910180546001600160a01b0319169091179055565b600060016109fe611e7d565b60010154610a0a611e7d565b540303919050565b606554600090610100900460ff168015610a51575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033610a5c611828565b6001600160a01b03161480610a6e5750805b610a8a5760405162461bcd60e51b81526004016109449061342c565b6001600160a01b03841660009081526066602090815260408083206001600160e01b0319871684529091529020805460ff191660011790558115610af7576001600160a01b03841660009081526067602090815260408083208584529091529020805460ff191660011790555b50505050565b606554600090610100900460ff168015610b3c575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033610b47611828565b6001600160a01b03161480610b595750805b610b755760405162461bcd60e51b81526004016109449061342c565b6001600160a01b0383166000908152606860205260409020548390610bd95760405162461bcd60e51b815260206004820152601a60248201527910dbdb9d1c9858dd081a5cc81b9bdd081c9959da5cdd195c995960321b6044820152606401610944565b6001600160a01b03841660009081526068602090815260408083205483526069909152902080548190610c0e90600190613477565b81548110610c1e57610c1e61348e565b9060005260206000200160009054906101000a90046001600160a01b0316818581548110610c4e57610c4e61348e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080805480610c8c57610c8c6134a4565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b039690961681526068909552505060408320929092555050565b826daaeb6d7670e522a718067333cd4e3b15610d9c57336001600160a01b03821603610d0957610d04848484611f15565b610af7565b604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c617113490610d3c90309033906004016133b1565b602060405180830381865afa158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d91906133cb565b610d9c5733604051633b79c77360e21b81526004016109449190612d1a565b610af7848484611f15565b6000828152606b6020526040812054819081906001600160a01b0316610dce57606a610ddd565b6000858152606b602052604090205b6040805180820190915290546001600160a01b038116808352600160a01b90910462ffffff166020830181905290945090915061271090610e1e90866134ba565b610e2891906134d9565b9150509250929050565b606554600090610100900460ff168015610e71575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033610e7c611828565b6001600160a01b03161480610e8e5750805b610eaa5760405162461bcd60e51b81526004016109449061342c565b506065805461ff001981166101009182900460ff1615909102179055565b606554600090610100900460ff168015610f07575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033610f12611828565b6001600160a01b03161480610f245750805b610f405760405162461bcd60e51b81526004016109449061342c565b6001600160a01b03841660009081526066602090815260408083206001600160e01b0319871684529091529020805460ff191690558115610af7576001600160a01b03841660009081526067602090815260408083208584529091529020805460ff1916600117905550505050565b606554600090610100900460ff168015610fee575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033610ff9611828565b6001600160a01b0316148061100b5750805b6110275760405162461bcd60e51b81526004016109449061342c565b81518351146110685760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081a5b9c1d5d609a1b6044820152606401610944565b60005b8351811015610af7576110b08482815181106110895761108961348e565b60200260200101518483815181106110a3576110a361348e565b60200260200101516120c8565b806110ba816134fb565b91505061106b565b606554600090610100900460ff168015611101575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b90503361110c611828565b6001600160a01b0316148061111e5750805b61113a5760405162461bcd60e51b81526004016109449061342c565b506065805460ff19811660ff90911615179055565b606554600090610100900460ff16801561118e575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033611199611828565b6001600160a01b031614806111ab5750805b6111c75760405162461bcd60e51b81526004016109449061342c565b61095783836120c8565b826daaeb6d7670e522a718067333cd4e3b1561129557336001600160a01b0382160361120257610d0484848461220d565b604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c61711349061123590309033906004016133b1565b602060405180830381865afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127691906133cb565b6112955733604051633b79c77360e21b81526004016109449190612d1a565b610af784848461220d565b336000818152606860205260409020541515806112cc5750336112c1611828565b6001600160a01b0316145b6112e85760405162461bcd60e51b8152600401610944906133e8565b6112f182612228565b6003600052606960205260008051602061363f8339815191525415801590611357575060036000908152606960205260008051602061363f8339815191528054829061133f5761133f61348e565b6000918252602090912001546001600160a01b031614155b156113f85760036000908152606960205260008051602061363f83398151915280549091906113885761138861348e565b600091825260208220015460405163b68c437960e01b81526001600160a01b039091169163b68c4379916113c59133918790600390600401613514565b600060405180830381600087803b1580156113df57600080fd5b505af11580156113f3573d6000803e3d6000fd5b505050505b5050565b600054610100900460ff161580801561141c5750600054600160ff909116105b806114365750303b158015611436575060005460ff166001145b6114995760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610944565b6000805460ff1916600117905580156114bc576000805461ff0019166101001790555b606d5460ff1661157d57606d805460ff19166001179055826114dc611e7d565b60020190805190602001906114f2929190612ba3565b50816114fc611e7d565b6003019080519060200190611512929190612ba3565b50600161151d611e7d565b5561152733612233565b61152f6110c2565b61154e739dc5ee2d52d014f8b81d662fa8f4ca525f27cd6b6001612285565b60405180606001604052806021815260200161361e60219139805161157b9160a091602090910190612ba3565b505b8015610957576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b606554600090610100900460ff168015611606575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033611611611828565b6001600160a01b031614806116235750805b61163f5760405162461bcd60e51b81526004016109449061342c565b81516109579060a0906020850190612ba3565b60408051828152600583901b8082016020019092526060915b801561169657601f198082019186010135600061168782611c4a565b848401602001525061166b9050565b509392505050565b60006107b682612429565b60006001600160a01b0382166116c9576116c96323d3ad8160e21b611eff565b6001600160401b036116d9611e7d565b6005016000846001600160a01b03166001600160a01b0316815260200190815260200160002054169050919050565b606554600090610100900460ff168015611747575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033611752611828565b6001600160a01b031614806117645750805b6117805760405162461bcd60e51b81526004016109449061342c565b61178a6000612233565b50565b6000818152606960209081526040918290208054835181840281018401909452808452606093928301828280156117ed57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117cf575b50505050509050919050565b6060600160006118076124eb565b905060608183146118205761181d8584846124fb565b90505b949350505050565b6033546001600160a01b031690565b6060611841611e7d565b60030180546107d490613377565b306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561188d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b19190613560565b6001600160a01b0316336001600160a01b0316146118fd5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610944565b61271081111561194c5760405162461bcd60e51b815260206004820152601a60248201527908aa48664727062a4def2c2d8e8d2cae67440a8dede40d0d2ced60331b6044820152606401610944565b8260000361199f57604080518082019091526001600160a01b03831680825262ffffff83166020909201829052606a8054600160a01b9093026001600160b81b0319909316909117919091179055505050565b6040805180820182526001600160a01b03938416815262ffffff92831660208083019182526000968752606b905291909420935184549151909216600160a01b026001600160b81b03199091169190921617179055565b60606118208484846124fb565b816daaeb6d7670e522a718067333cd4e3b15611aac57604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c617113490611a4c90309085906004016133b1565b602060405180830381865afa158015611a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8d91906133cb565b611aac5780604051633b79c77360e21b81526004016109449190612d1a565b6109578383612603565b606554600090610100900460ff168015611af5575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033611b00611828565b6001600160a01b03161480611b125750805b611b2e5760405162461bcd60e51b81526004016109449061342c565b82611b37611e7d565b6002019080519060200190611b4d929190612ba3565b5081611b57611e7d565b6003019080519060200190610af7929190612ba3565b836daaeb6d7670e522a718067333cd4e3b15611c3757336001600160a01b03821603611ba457611b9f85858585612680565b611c43565b604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c617113490611bd790309033906004016133b1565b602060405180830381865afa158015611bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1891906133cb565b611c375733604051633b79c77360e21b81526004016109449190612d1a565b611c4385858585612680565b5050505050565b611c52612c27565b60018210611c8c57611c626124eb565b821015611c8c575b611c73826126bb565b611c835760001990910190611c6a565b6107b6826126db565b919050565b6060611c9c82611ea1565b611cb057611cb0630a14c4b560e41b611eff565b6000611cba612706565b90508051600003611cda5760405180602001604052806000815250611d05565b80611ce484612715565b604051602001611cf592919061357d565b6040516020818303038152906040525b9392505050565b6000611d16611e7d565b6001600160a01b039384166000908152600791909101602090815260408083209490951682529290925250205460ff1690565b606554600090610100900460ff168015611d88575033600090815260666020908152604080832083356001600160e01b031916845290915290205460ff165b905033611d93611828565b6001600160a01b03161480611da55750805b611dc15760405162461bcd60e51b81526004016109449061342c565b6001600160a01b038216611e265760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610944565b6113f882612233565b60006301ffc9a760e01b6001600160e01b031983161480611e6057506380ac58cd60e01b6001600160e01b03198316145b806107b65750506001600160e01b031916635b5e139f60e01b1490565b7f2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c4090565b600081600111611c8c57611eb3611e7d565b54821015611c8c5760005b611ec6611e7d565b600084815260049190910160205260408120549150819003611ef257611eeb836135ac565b9250611ebe565b600160e01b161592915050565b8060005260046000fd5b6113f882826001612759565b6000611f2082612429565b6001600160a01b039485169490915081168414611f4657611f4662a1148160e81b611eff565b600080611f528461280a565b91509150611f778187611f623390565b6001600160a01b039081169116811491141790565b611f9957611f858633611d0c565b611f9957611f99632ce44b5f60e11b611eff565b8015611fa457600082555b611fac611e7d565b6001600160a01b0387166000908152600591909101602052604090208054600019019055611fd8611e7d565b6001600160a01b0386166000908152600591909101602052604090208054600101905561200985600160e11b612832565b612011611e7d565b60008681526004919091016020526040812091909155600160e11b841690036120875760018401612040611e7d565b60008281526004919091016020526040812054900361208557612061611e7d565b5481146120855783612071611e7d565b600083815260049190910160205260409020555b505b6001600160a01b03851684818860008051602061365f833981519152600080a4806000036120bf576120bf633a954ecd60e21b611eff565b50505050505050565b6000818152606c6020526040902054156121215760405162461bcd60e51b815260206004820152601a602482015279115e1d195c9b985b08125108185b1c9958591e481b5a5b9d195960321b6044820152606401610944565b600061212b611e7d565b546000838152606c60205260409020819055905061214a836001612847565b6003600052606960205260008051602061363f83398151915254158015906121b0575060036000908152606960205260008051602061363f83398151915280543392906121995761219961348e565b6000918252602090912001546001600160a01b0316145b156109575760405163b68c437960e01b8152339063b68c4379906121df90600090879086908390600401613514565b600060405180830381600087803b1580156121f957600080fd5b505af11580156120bf573d6000803e3d6000fd5b61095783838360405180602001604052806000815250611b6d565b61178a816001612920565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166122f05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610944565b6daaeb6d7670e522a718067333cd4e3b156113f85760405163c3c5a54760e01b81526daaeb6d7670e522a718067333cd4e9063c3c5a54790612336903090600401612d1a565b6020604051808303816000875af1158015612355573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237991906133cb565b6113f85780156123b657604051633e9f1edf60e11b81526daaeb6d7670e522a718067333cd4e90637d3e3dbe906113c590309086906004016133b1565b6001600160a01b038216156123f85760405163a0af290360e01b81526daaeb6d7670e522a718067333cd4e9063a0af2903906113c590309086906004016133b1565b604051632210724360e11b81526daaeb6d7670e522a718067333cd4e90634420e486906113c5903090600401612d1a565b6000816001116124db5761243b611e7d565b6000838152600491909101602052604081205491508190036124c85761245f611e7d565b54821061247657612476636f96cda160e11b611eff565b61247e611e7d565b60001990920160008181526004939093016020526040909220549050801561247657600160e01b81166000036124b357919050565b6124c3636f96cda160e11b611eff565b612476565b600160e01b81166000036124db57919050565b611c8c636f96cda160e11b611eff565b60006124f5611e7d565b54919050565b606081831061251457612514631960ccad60e11b611eff565b600183101561252257600192505b600061252c6124eb565b9050808310612539578092505b60606000612546876116a9565b858710908102915081156125f75781878703116125635786860391505b60405192506001820160051b8301604052600061257f88611c4a565b905060008160400151612590575080515b60005b61259c8a6126db565b92506040830151600081146125b457600092506125d9565b8351156125c057835192505b8b831860601b6125d9576001820191508a8260051b8801525b5060018a019950888a14806125ed57508481145b1561259357855250505b50909695505050505050565b8061260c611e7d565b336000818152600792909201602090815260408084206001600160a01b03881680865290835293819020805460ff19169515159590951790945592518415158152919290917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61268b848484610cd3565b6001600160a01b0383163b15610af7576126a784848484612a7e565b610af757610af76368d2bf6b60e11b611eff565b60006126c5611e7d565b6000928352600401602052506040902054151590565b6126e3612c27565b6107b66126ee611e7d565b60008481526004919091016020526040902054612b60565b606060a080546107d490613377565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a90048061272f5750819003601f19909101908152919050565b60006127648361169e565b905081801561277c5750336001600160a01b03821614155b1561279f5761278b8133611d0c565b61279f5761279f6367d9dca160e11b611eff565b836127a8611e7d565b6000858152600691909101602052604080822080546001600160a01b0319166001600160a01b0394851617905551859287811692908516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a450505050565b6000806000612817611e7d565b60009485526006016020525050604090912080549092909150565b4260a01b176001600160a01b03919091161790565b6000612851611e7d565b549050600082900361286d5761286d63b562e8dd60e01b611eff565b61287d836001841460e11b612832565b612885611e7d565b600083815260049190910160205260409020556001600160401b0182026128aa611e7d565b6001600160a01b03851660008181526005929092016020526040822080549093019092558190036128e4576128e4622e076360e81b611eff565b818301825b8083600060008051602061365f833981519152600080a48181600101915081036128e95781612916611e7d565b5550610957915050565b600061292b83612429565b90508060008061293a8661280a565b9150915084156129715761294f818433611f62565b6129715761295d8333611d0c565b61297157612971632ce44b5f60e11b611eff565b801561297c57600082555b6001600160801b0361298c611e7d565b6001600160a01b03851660009081526005919091016020526040902080549190910190556129be83600360e01b612832565b6129c6611e7d565b60008881526004919091016020526040812091909155600160e11b85169003612a3c57600186016129f5611e7d565b600082815260049190910160205260408120549003612a3a57612a16611e7d565b548114612a3a5784612a26611e7d565b600083815260049190910160205260409020555b505b60405186906000906001600160a01b0386169060008051602061365f833981519152908390a4612a6a611e7d565b600190810180549091019055505050505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290612ab39033908990889088906004016135c3565b6020604051808303816000875af1925050508015612aee575060408051601f3d908101601f19168201909252612aeb91810190613600565b60015b612b43573d808015612b1c576040519150601f19603f3d011682016040523d82523d6000602084013e612b21565b606091505b508051600003612b3b57612b3b6368d2bf6b60e11b611eff565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b612b68612c27565b6001600160a01b03821681526001600160401b0360a083901c166020820152600160e01b82161515604082015260e89190911c606082015290565b828054612baf90613377565b90600052602060002090601f016020900481019282612bd15760008555612c17565b82601f10612bea57805160ff1916838001178555612c17565b82800160010185558215612c17579182015b82811115612c17578251825591602001919060010190612bfc565b50612c23929150612c4e565b5090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b5b80821115612c235760008155600101612c4f565b6001600160e01b03198116811461178a57600080fd5b600060208284031215612c8b57600080fd5b8135611d0581612c63565b60005b83811015612cb1578181015183820152602001612c99565b83811115610af75750506000910152565b60008151808452612cda816020860160208601612c96565b601f01601f19169290920160200192915050565b602081526000611d056020830184612cc2565b600060208284031215612d1357600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461178a57600080fd5b60008060408385031215612d5657600080fd5b8235612d6181612d2e565b946020939093013593505050565b600080600060608486031215612d8457600080fd5b8335612d8f81612d2e565b92506020840135612d9f81612c63565b929592945050506040919091013590565b600080600060608486031215612dc557600080fd5b8335612dd081612d2e565b92506020840135612d9f81612d2e565b60008060408385031215612df357600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612e4057612e40612e02565b604052919050565b60006001600160401b03821115612e6157612e61612e02565b5060051b60200190565b600082601f830112612e7c57600080fd5b81356020612e91612e8c83612e48565b612e18565b82815260059290921b84018101918181019086841115612eb057600080fd5b8286015b84811015612ecb5780358352918301918301612eb4565b509695505050505050565b60008060408385031215612ee957600080fd5b82356001600160401b0380821115612f0057600080fd5b818501915085601f830112612f1457600080fd5b81356020612f24612e8c83612e48565b82815260059290921b84018101918181019089841115612f4357600080fd5b948201945b83861015612f6a578535612f5b81612d2e565b82529482019490820190612f48565b96505086013592505080821115612f8057600080fd5b50610e2885828601612e6b565b60006001600160401b03831115612fa657612fa6612e02565b612fb9601f8401601f1916602001612e18565b9050828152838383011115612fcd57600080fd5b828260208301376000602084830101529392505050565b600082601f830112612ff557600080fd5b611d0583833560208501612f8d565b6000806040838503121561301757600080fd5b82356001600160401b038082111561302e57600080fd5b61303a86838701612fe4565b9350602085013591508082111561305057600080fd5b50610e2885828601612fe4565b60006020828403121561306f57600080fd5b81356001600160401b0381111561308557600080fd5b61182084828501612fe4565b600080602083850312156130a457600080fd5b82356001600160401b03808211156130bb57600080fd5b818501915085601f8301126130cf57600080fd5b8135818111156130de57600080fd5b8660208260051b85010111156130f357600080fd5b60209290920196919550909350505050565b80516001600160a01b031682526020808201516001600160401b03169083015260408082015115159083015260609081015162ffffff16910152565b6020808252825182820181905260009190848201906040850190845b818110156125f757613170838551613105565b928401926080929092019160010161315d565b60006020828403121561319557600080fd5b8135611d0581612d2e565b6020808252825182820181905260009190848201906040850190845b818110156125f75783516001600160a01b0316835292840192918401916001016131bc565b6020808252825182820181905260009190848201906040850190845b818110156125f7578351835292840192918401916001016131fd565b60008060006060848603121561322e57600080fd5b833592506020840135612d9f81612d2e565b60008060006060848603121561325557600080fd5b833561326081612d2e565b95602085013595506040909401359392505050565b801515811461178a57600080fd5b6000806040838503121561329657600080fd5b82356132a181612d2e565b915060208301356132b181613275565b809150509250929050565b600080600080608085870312156132d257600080fd5b84356132dd81612d2e565b935060208501356132ed81612d2e565b92506040850135915060608501356001600160401b0381111561330f57600080fd5b8501601f8101871361332057600080fd5b61332f87823560208401612f8d565b91505092959194509250565b608081016107b68284613105565b6000806040838503121561335c57600080fd5b823561336781612d2e565b915060208301356132b181612d2e565b600181811c9082168061338b57607f821691505b6020821081036133ab57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b0392831681529116602082015260400190565b6000602082840312156133dd57600080fd5b8151611d0581613275565b60208082526024908201527f436f6e7472616374206973206e6f742072656769737465726564206e6f72204f6040820152633bb732b960e11b606082015260800190565b6020808252601b908201527a4e6f74206f776e6572206f722061626c6520746f2062797061737360281b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561348957613489613461565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156134d4576134d4613461565b500290565b6000826134f657634e487b7160e01b600052601260045260246000fd5b500490565b60006001820161350d5761350d613461565b5060010190565b6001600160a01b0385811682528416602082015260408101839052608081016005831061355157634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b60006020828403121561357257600080fd5b8151611d0581612d2e565b6000835161358f818460208801612c96565b8351908301906135a3818360208801612c96565b01949350505050565b6000816135bb576135bb613461565b506000190190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906135f690830184612cc2565b9695505050505050565b60006020828403121561361257600080fd5b8151611d0581612c6356fe68747470733a2f2f76322e656d626c656d7661756c742e696f2f76332f6d65746156d594188730cd2db4f97166f7e9b0b9d5caa8ac32e0506fd5faeb5b224f8813ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a1bad9af7cd76de60a93aeb2a308eb296088ccc4fa1fb6b56709f6a56d1f613664736f6c634300080d0033",
    "contract_name": "EmblemVault721AUpgradeable",
    "compiler_version": "v0.8.13+commit.abaa5c0e",
    "optimization_used": "1",
    "runs": "1",
    "abi": "[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"addBypassRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721AUpgradeable.TokenOwnership\",\"name\":\"ownership\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721AUpgradeable.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getAllRegisteredContractsOfType\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getInternalTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interfaceId\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"externalTokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"externalTokenId\",\"type\":\"uint256[]\"}],\"name\":\"mintMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"registerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"removeBypassRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"setDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBypassability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unregisterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/EmblemVault721AUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport './ERC721AUpgradeable.sol';\\nimport \\\"./HasRegistration.sol\\\";\\nimport './extensions/ERC721ABurnableUpgradeable.sol';\\nimport './extensions/ERC721AQueryableUpgradeable.sol';\\nimport \\\"./IHandlerCallback.sol\\\";\\nimport \\\"./ERC2981Royalties.sol\\\";\\nimport \\\"operator-filter-registry/src/upgradeable/OperatorFiltererUpgradeable.sol\\\";\\n\\ncontract EmblemVault721AUpgradeable is ERC721AUpgradeable, ERC721ABurnableUpgradeable, ERC721AQueryableUpgradeable, HasRegistration, OperatorFiltererUpgradeable, ERC2981Royalties {  \\n\\n    mapping(uint256 => uint256) internal _externalTokenIdMap; // tokenId >> externalTokenId\\n    bool initialized;\\n    \\n    function initialize(string memory name_, string memory symbol_) initializer external {\\n        if (!initialized) {\\n            initialized = true;\\n            ERC721AStorage.layout()._name = name_;\\n            ERC721AStorage.layout()._symbol = symbol_;\\n            ERC721AStorage.layout()._currentIndex = _startTokenId();\\n            _transferOwnership(_msgSender());\\n            toggleClaimable();\\n            __OperatorFilterer_init(0x9dC5EE2D52d014f8b81D662FA8f4CA525F27cD6b, true);\\n            BASE_URI = \\\"https://v2.emblemvault.io/v3/meta\\\";\\n        }\\n    }\\n\\n    function mint(address to, uint256 externalTokenId) external onlyOwner {\\n        __mint(to, externalTokenId);\\n    }\\n\\n    function mintMany(address[] memory to, uint256[] memory externalTokenId) public onlyOwner {\\n        require(to.length == externalTokenId.length, \\\"Invalid input\\\");\\n        for (uint i = 0; i < to.length; i++) {\\n            __mint(to[i], externalTokenId[i]);\\n        }\\n    }\\n\\n    function __mint(address to, uint256 externalTokenId) internal {\\n        require(_externalTokenIdMap[externalTokenId] == 0, \\\"External ID already minted\\\");\\n        uint256 _tokenId = ERC721AStorage.layout()._currentIndex;\\n        _externalTokenIdMap[externalTokenId] = _tokenId;\\n        _mint(to, 1);        \\n        if (registeredOfType[3].length > 0 && registeredOfType[3][0] == _msgSender()) { // Called by Handler\\n            IHandlerCallback(_msgSender()).executeCallbacks(address(0), to, _tokenId, IHandlerCallback.CallbackType.MINT);\\n        }\\n    }    \\n\\n    function burn(uint256 tokenId) public override isRegisteredContractOrOwner(_msgSender()) {        \\n        super.burn(tokenId);\\n        if (registeredOfType[3].length > 0 && registeredOfType[3][0] != address(0)) {\\n            IHandlerCallback(registeredOfType[3][0]).executeCallbacks(_msgSender(), address(0), tokenId, IHandlerCallback.CallbackType.BURN);\\n        }\\n    }\\n\\n    function setDetails(string memory name_, string memory symbol_) public onlyOwner {\\n        ERC721AStorage.layout()._name = name_;\\n        ERC721AStorage.layout()._symbol = symbol_;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return BASE_URI;\\n    }\\n\\n    function setBaseURI(string memory baseURI) external onlyOwner {\\n        BASE_URI = baseURI;\\n    }\\n\\n    // function tokenURI(uint256 tokenId) public view override(ERC721AUpgradeable, IERC721AUpgradeable) onlyOwner returns (string memory)  {\\n    //     if (!_exists(tokenId)) _revert(URIQueryForNonexistentToken.selector);\\n    //     string memory baseURI = _baseURI();\\n    //     return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, \\\"/\\\", _addressToString(address(this)), \\\"/\\\", _toString(tokenId))) : '';\\n    // }\\n    \\n\\n    function _startTokenId() internal pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function supportsInterface(bytes4 _interfaceId) public view override(ERC721AUpgradeable, IERC721AUpgradeable) returns (bool) {\\n        return \\n        ERC721AUpgradeable.supportsInterface(_interfaceId) || \\n        _interfaceId == bytes4(keccak256(\\\"ERC721A\\\")) || \\n        _interfaceId == 0x2a55205a;\\n    }\\n\\n    function getInternalTokenId(uint256 tokenId) external view returns (uint256) {\\n        return _externalTokenIdMap[tokenId];\\n    }\\n\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.8\\\";\\n    }\\n\\n    function interfaceId() external pure returns (bytes4) {\\n        return bytes4(keccak256(\\\"ERC721A\\\"));\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenId) public payable override(ERC721AUpgradeable, IERC721AUpgradeable) onlyAllowedOperator(from) {\\n        super.transferFrom(from, to, tokenId);\\n        \\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public payable override(ERC721AUpgradeable, IERC721AUpgradeable) onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public payable override(ERC721AUpgradeable, IERC721AUpgradeable) onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n    \\n    function approve(address operator, uint256 tokenId) public payable override(ERC721AUpgradeable, IERC721AUpgradeable) onlyAllowedOperatorApproval(operator) {\\n        super.approve(operator, tokenId);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public override(ERC721AUpgradeable, IERC721AUpgradeable) onlyAllowedOperatorApproval(operator) {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    // function _addressToString(address _addr) internal pure returns(string memory) {\\n    //     bytes32 value = bytes32(uint256(uint160(_addr)));\\n    //     bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n    //     bytes memory str = new bytes(42);\\n    //     str[0] = '0';\\n    //     str[1] = 'x';\\n    //     for (uint256 i = 0; i < 20; i++) {\\n    //         str[2+i*2] = alphabet[uint8(value[i + 12] >> 4)];\\n    //         str[3+i*2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n    //     }\\n    //     return string(str);\\n    // }\\n\\n    uint256[50] private __gap;\\n    string BASE_URI;\\n}\"\r\n    },\r\n    \"contracts/ERC2981Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport './IERC2981Royalties.sol';\\n\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\nabstract contract ERC2981Base is IERC2981Royalties {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint24 amount;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/ERC2981Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport './ERC2981Base.sol';\\nimport './OwnableUpgradeable.sol';\\n\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\n/// @dev This implementation has the same royalties for each and every tokens\\nabstract contract ERC2981Royalties is ERC2981Base {\\n    RoyaltyInfo private _contractRoyalties;\\n    mapping(uint256 => RoyaltyInfo) private _individualRoyalties;\\n\\n    \\n    /// @dev Sets token royalties\\n    /// @param tokenId the token id fir which we register the royalties\\n    /// @param recipient recipient of the royalties\\n    /// @param value percentage (using 2 decimals - 10000 = 100, 0 = 0)\\n    function setTokenRoyalty(uint256 tokenId, address recipient, uint256 value) public override {\\n        require(msg.sender == OwnableUpgradeable(address(this)).owner(), \\\"Not Owner\\\");\\n        require(value <= 10000, 'ERC2981Royalties: Too high');\\n        if (tokenId == 0) {\\n            _contractRoyalties = RoyaltyInfo(recipient, uint24(value));\\n        } else {\\n            _individualRoyalties[tokenId] = RoyaltyInfo(recipient, uint24(value));\\n        }\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 value) public view override returns (address receiver, uint256 royaltyAmount) {\\n        RoyaltyInfo memory royalties = _individualRoyalties[tokenId].recipient != address(0)? _individualRoyalties[tokenId]: _contractRoyalties;\\n        \\n        receiver = royalties.recipient;\\n        royaltyAmount = (value * royalties.amount) / 10000;\\n    }\\n}\"\r\n    },\r\n    \"contracts/ERC721A__Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable diamond facet contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\n\\nimport {ERC721A__InitializableStorage} from './ERC721A__InitializableStorage.sol';\\n\\nabstract contract ERC721A__Initializable {\\n    using ERC721A__InitializableStorage for ERC721A__InitializableStorage.Layout;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializerERC721A() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(\\n            ERC721A__InitializableStorage.layout()._initializing\\n                ? _isConstructor()\\n                : !ERC721A__InitializableStorage.layout()._initialized,\\n            'ERC721A__Initializable: contract is already initialized'\\n        );\\n\\n        bool isTopLevelCall = !ERC721A__InitializableStorage.layout()._initializing;\\n        if (isTopLevelCall) {\\n            ERC721A__InitializableStorage.layout()._initializing = true;\\n            ERC721A__InitializableStorage.layout()._initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            ERC721A__InitializableStorage.layout()._initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializingERC721A() {\\n        require(\\n            ERC721A__InitializableStorage.layout()._initializing,\\n            'ERC721A__Initializable: contract is not initializing'\\n        );\\n        _;\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721A__InitializableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base storage for the  initialization function for upgradeable diamond facet contracts\\n **/\\n\\nlibrary ERC721A__InitializableStorage {\\n    struct Layout {\\n        /*\\n         * Indicates that the contract has been initialized.\\n         */\\n        bool _initialized;\\n        /*\\n         * Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256('ERC721A.contracts.storage.initializable.facet');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721AStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC721AStorage {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    struct Layout {\\n        // =============================================================\\n        //                            STORAGE\\n        // =============================================================\\n\\n        // The next token ID to be minted.\\n        uint256 _currentIndex;\\n        // The number of tokens burned.\\n        uint256 _burnCounter;\\n        // Token name\\n        string _name;\\n        // Token symbol\\n        string _symbol;\\n        // Mapping from token ID to ownership details\\n        // An empty struct value does not necessarily mean the token is unowned.\\n        // See {_packedOwnershipOf} implementation for details.\\n        //\\n        // Bits Layout:\\n        // - [0..159]   `addr`\\n        // - [160..223] `startTimestamp`\\n        // - [224]      `burned`\\n        // - [225]      `nextInitialized`\\n        // - [232..255] `extraData`\\n        mapping(uint256 => uint256) _packedOwnerships;\\n        // Mapping owner address to address data.\\n        //\\n        // Bits Layout:\\n        // - [0..63]    `balance`\\n        // - [64..127]  `numberMinted`\\n        // - [128..191] `numberBurned`\\n        // - [192..255] `aux`\\n        mapping(address => uint256) _packedAddressData;\\n        // Mapping from token ID to approved address.\\n        mapping(uint256 => ERC721AStorage.TokenApprovalRef) _tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) _operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256('ERC721A.contracts.storage.ERC721A');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721AUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AUpgradeable.sol';\\nimport {ERC721AStorage} from './ERC721AStorage.sol';\\nimport './ERC721A__Initializable.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721ReceiverUpgradeable {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is ERC721A__Initializable, IERC721AUpgradeable {\\n    using ERC721AStorage for ERC721AStorage.Layout;\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializingERC721A {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializingERC721A {\\n        ERC721AStorage.layout()._name = name_;\\n        ERC721AStorage.layout()._symbol = symbol_;\\n        ERC721AStorage.layout()._currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return ERC721AStorage.layout()._currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return ERC721AStorage.layout()._currentIndex - ERC721AStorage.layout()._burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return ERC721AStorage.layout()._currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return ERC721AStorage.layout()._burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) _revert(BalanceQueryForZeroAddress.selector);\\n        return ERC721AStorage.layout()._packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return\\n            (ERC721AStorage.layout()._packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return\\n            (ERC721AStorage.layout()._packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(ERC721AStorage.layout()._packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = ERC721AStorage.layout()._packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        ERC721AStorage.layout()._packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return ERC721AStorage.layout()._name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return ERC721AStorage.layout()._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) _revert(URIQueryForNonexistentToken.selector);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(ERC721AStorage.layout()._packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Returns whether the ownership slot at `index` is initialized.\\n     * An uninitialized slot does not necessarily mean that the slot has no owner.\\n     */\\n    function _ownershipIsInitialized(uint256 index) internal view virtual returns (bool) {\\n        return ERC721AStorage.layout()._packedOwnerships[index] != 0;\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (ERC721AStorage.layout()._packedOwnerships[index] == 0) {\\n            ERC721AStorage.layout()._packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256 packed) {\\n        if (_startTokenId() <= tokenId) {\\n            packed = ERC721AStorage.layout()._packedOwnerships[tokenId];\\n            // If the data at the starting slot does not exist, start the scan.\\n            if (packed == 0) {\\n                if (tokenId >= ERC721AStorage.layout()._currentIndex) _revert(OwnerQueryForNonexistentToken.selector);\\n                // Invariant:\\n                // There will always be an initialized ownership slot\\n                // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                // before an unintialized ownership slot\\n                // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                // Hence, `tokenId` will not underflow.\\n                //\\n                // We can directly compare the packed value.\\n                // If the address is zero, packed will be zero.\\n                for (;;) {\\n                    unchecked {\\n                        packed = ERC721AStorage.layout()._packedOwnerships[--tokenId];\\n                    }\\n                    if (packed == 0) continue;\\n                    if (packed & _BITMASK_BURNED == 0) return packed;\\n                    // Otherwise, the token is burned, and we must revert.\\n                    // This handles the case of batch burned tokens, where only the burned bit\\n                    // of the starting slot is set, and remaining slots are left uninitialized.\\n                    _revert(OwnerQueryForNonexistentToken.selector);\\n                }\\n            }\\n            // Otherwise, the data exists and we can skip the scan.\\n            // This is possible because we have already achieved the target condition.\\n            // This saves 2143 gas on transfers of initialized tokens.\\n            // If the token is not burned, return `packed`. Otherwise, revert.\\n            if (packed & _BITMASK_BURNED == 0) return packed;\\n        }\\n        _revert(OwnerQueryForNonexistentToken.selector);\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        _approve(to, tokenId, true);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) _revert(ApprovalQueryForNonexistentToken.selector);\\n\\n        return ERC721AStorage.layout()._tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        ERC721AStorage.layout()._operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return ERC721AStorage.layout()._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool result) {\\n        if (_startTokenId() <= tokenId) {\\n            if (tokenId < ERC721AStorage.layout()._currentIndex) {\\n                uint256 packed;\\n                while ((packed = ERC721AStorage.layout()._packedOwnerships[tokenId]) == 0) --tokenId;\\n                result = packed & _BITMASK_BURNED == 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        ERC721AStorage.TokenApprovalRef storage tokenApproval = ERC721AStorage.layout()._tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n        from = address(uint160(uint256(uint160(from)) & _BITMASK_ADDRESS));\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) _revert(TransferFromIncorrectOwner.selector);\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) _revert(TransferCallerNotOwnerNorApproved.selector);\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --ERC721AStorage.layout()._packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++ERC721AStorage.layout()._packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            ERC721AStorage.layout()._packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (ERC721AStorage.layout()._packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != ERC721AStorage.layout()._currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        ERC721AStorage.layout()._packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n        uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\\n        assembly {\\n            // Emit the `Transfer` event.\\n            log4(\\n                0, // Start of data (0, since no data).\\n                0, // End of data (0, since no data).\\n                _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                from, // `from`.\\n                toMasked, // `to`.\\n                tokenId // `tokenId`.\\n            )\\n        }\\n        if (toMasked == 0) _revert(TransferToZeroAddress.selector);\\n\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                _revert(TransferToNonERC721ReceiverImplementer.selector);\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try\\n            ERC721A__IERC721ReceiverUpgradeable(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data)\\n        returns (bytes4 retval) {\\n            return retval == ERC721A__IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                _revert(TransferToNonERC721ReceiverImplementer.selector);\\n            }\\n            assembly {\\n                revert(add(32, reason), mload(reason))\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = ERC721AStorage.layout()._currentIndex;\\n        if (quantity == 0) _revert(MintZeroQuantity.selector);\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            ERC721AStorage.layout()._packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            ERC721AStorage.layout()._packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\\n\\n            if (toMasked == 0) _revert(MintToZeroAddress.selector);\\n\\n            uint256 end = startTokenId + quantity;\\n            uint256 tokenId = startTokenId;\\n\\n            do {\\n                assembly {\\n                    // Emit the `Transfer` event.\\n                    log4(\\n                        0, // Start of data (0, since no data).\\n                        0, // End of data (0, since no data).\\n                        _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                        0, // `address(0)`.\\n                        toMasked, // `to`.\\n                        tokenId // `tokenId`.\\n                    )\\n                }\\n                // The `!=` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n            } while (++tokenId != end);\\n\\n            ERC721AStorage.layout()._currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = ERC721AStorage.layout()._currentIndex;\\n        if (to == address(0)) _revert(MintToZeroAddress.selector);\\n        if (quantity == 0) _revert(MintZeroQuantity.selector);\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) _revert(MintERC2309QuantityExceedsLimit.selector);\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            ERC721AStorage.layout()._packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            ERC721AStorage.layout()._packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            ERC721AStorage.layout()._currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = ERC721AStorage.layout()._currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        _revert(TransferToNonERC721ReceiverImplementer.selector);\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (ERC721AStorage.layout()._currentIndex != end) _revert(bytes4(0));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                       APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_approve(to, tokenId, false)`.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _approve(to, tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        bool approvalCheck\\n    ) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        if (approvalCheck && _msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                _revert(ApprovalCallerNotOwnerNorApproved.selector);\\n            }\\n\\n        ERC721AStorage.layout()._tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) _revert(TransferCallerNotOwnerNorApproved.selector);\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            ERC721AStorage.layout()._packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            ERC721AStorage.layout()._packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (ERC721AStorage.layout()._packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != ERC721AStorage.layout()._currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        ERC721AStorage.layout()._packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            ERC721AStorage.layout()._burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = ERC721AStorage.layout()._packedOwnerships[index];\\n        if (packed == 0) _revert(OwnershipNotInitializedForExtraData.selector);\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        ERC721AStorage.layout()._packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n\\n    /**\\n     * @dev For more efficient reverts.\\n     */\\n    function _revert(bytes4 errorSelector) internal pure {\\n        assembly {\\n            mstore(0x00, errorSelector)\\n            revert(0x00, 0x04)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/ERC721ABurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721ABurnableUpgradeable.sol';\\nimport '../ERC721AUpgradeable.sol';\\nimport '../ERC721A__Initializable.sol';\\n\\n/**\\n * @title ERC721ABurnable.\\n *\\n * @dev ERC721A token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721ABurnableUpgradeable is\\n    ERC721A__Initializable,\\n    ERC721AUpgradeable,\\n    IERC721ABurnableUpgradeable\\n{\\n    function __ERC721ABurnable_init() internal onlyInitializingERC721A {\\n        __ERC721ABurnable_init_unchained();\\n    }\\n\\n    function __ERC721ABurnable_init_unchained() internal onlyInitializingERC721A {}\\n\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual override {\\n        _burn(tokenId, true);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/ERC721AQueryableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryableUpgradeable.sol';\\nimport '../ERC721AUpgradeable.sol';\\nimport '../ERC721A__Initializable.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryableUpgradeable is\\n    ERC721A__Initializable,\\n    ERC721AUpgradeable,\\n    IERC721AQueryableUpgradeable\\n{\\n    function __ERC721AQueryable_init() internal onlyInitializingERC721A {\\n        __ERC721AQueryable_init_unchained();\\n    }\\n\\n    function __ERC721AQueryable_init_unchained() internal onlyInitializingERC721A {}\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership memory ownership)\\n    {\\n        unchecked {\\n            if (tokenId >= _startTokenId()) {\\n                if (tokenId < _nextTokenId()) {\\n                    // If the `tokenId` is within bounds,\\n                    // scan backwards for the initialized ownership slot.\\n                    while (!_ownershipIsInitialized(tokenId)) --tokenId;\\n                    return _ownershipAt(tokenId);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        TokenOwnership[] memory ownerships;\\n        uint256 i = tokenIds.length;\\n        assembly {\\n            // Grab the free memory pointer.\\n            ownerships := mload(0x40)\\n            // Store the length.\\n            mstore(ownerships, i)\\n            // Allocate one word for the length,\\n            // `tokenIds.length` words for the pointers.\\n            i := shl(5, i) // Multiply `i` by 32.\\n            mstore(0x40, add(add(ownerships, 0x20), i))\\n        }\\n        while (i != 0) {\\n            uint256 tokenId;\\n            assembly {\\n                i := sub(i, 0x20)\\n                tokenId := calldataload(add(tokenIds.offset, i))\\n            }\\n            TokenOwnership memory ownership = explicitOwnershipOf(tokenId);\\n            assembly {\\n                // Store the pointer of `ownership` in the `ownerships` array.\\n                mstore(add(add(ownerships, 0x20), i), ownership)\\n            }\\n        }\\n        return ownerships;\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        return _tokensOfOwnerIn(owner, start, stop);\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        uint256 start = _startTokenId();\\n        uint256 stop = _nextTokenId();\\n        uint256[] memory tokenIds;\\n        if (start != stop) tokenIds = _tokensOfOwnerIn(owner, start, stop);\\n        return tokenIds;\\n    }\\n\\n    /**\\n     * @dev Helper function for returning an array of token IDs owned by `owner`.\\n     *\\n     * Note that this function is optimized for smaller bytecode size over runtime gas,\\n     * since it is meant to be called off-chain.\\n     */\\n    function _tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) private view returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) _revert(InvalidQueryRange.selector);\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop >= stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256[] memory tokenIds;\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            bool startLtStop = start < stop;\\n            assembly {\\n                // Set `tokenIdsMaxLength` to zero if `start` is less than `stop`.\\n                tokenIdsMaxLength := mul(tokenIdsMaxLength, startLtStop)\\n            }\\n            if (tokenIdsMaxLength != 0) {\\n                // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n                // to cater for cases where `balanceOf(owner)` is too big.\\n                if (stop - start <= tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = stop - start;\\n                }\\n                assembly {\\n                    // Grab the free memory pointer.\\n                    tokenIds := mload(0x40)\\n                    // Allocate one word for the length, and `tokenIdsMaxLength` words\\n                    // for the data. `shl(5, x)` is equivalent to `mul(32, x)`.\\n                    mstore(0x40, add(tokenIds, shl(5, add(tokenIdsMaxLength, 1))))\\n                }\\n                // We need to call `explicitOwnershipOf(start)`,\\n                // because the slot at `start` may not be initialized.\\n                TokenOwnership memory ownership = explicitOwnershipOf(start);\\n                address currOwnershipAddr;\\n                // If the starting slot exists (i.e. not burned),\\n                // initialize `currOwnershipAddr`.\\n                // `ownership.address` will not be zero,\\n                // as `start` is clamped to the valid token ID range.\\n                if (!ownership.burned) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                uint256 tokenIdsIdx;\\n                // Use a do-while, which is slightly more efficient for this case,\\n                // as the array will at least contain one element.\\n                do {\\n                    ownership = _ownershipAt(start);\\n                    assembly {\\n                        switch mload(add(ownership, 0x40))\\n                        // if `ownership.burned == false`.\\n                        case 0 {\\n                            // if `ownership.addr != address(0)`.\\n                            // The `addr` already has it's upper 96 bits clearned,\\n                            // since it is written to memory with regular Solidity.\\n                            if mload(ownership) {\\n                                currOwnershipAddr := mload(ownership)\\n                            }\\n                            // if `currOwnershipAddr == owner`.\\n                            // The `shl(96, x)` is to make the comparison agnostic to any\\n                            // dirty upper 96 bits in `owner`.\\n                            if iszero(shl(96, xor(currOwnershipAddr, owner))) {\\n                                tokenIdsIdx := add(tokenIdsIdx, 1)\\n                                mstore(add(tokenIds, shl(5, tokenIdsIdx)), start)\\n                            }\\n                        }\\n                        // Otherwise, reset `currOwnershipAddr`.\\n                        // This handles the case of batch burned tokens\\n                        // (burned bit of first slot set, remaining slots left uninitialized).\\n                        default {\\n                            currOwnershipAddr := 0\\n                        }\\n                        start := add(start, 1)\\n                    }\\n                } while (!(start == stop || tokenIdsIdx == tokenIdsMaxLength));\\n                // Store the length of the array.\\n                assembly {\\n                    mstore(tokenIds, tokenIdsIdx)\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/IERC721ABurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721AUpgradeable.sol';\\n\\n/**\\n * @dev Interface of ERC721ABurnable.\\n */\\ninterface IERC721ABurnableUpgradeable is IERC721AUpgradeable {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/IERC721AQueryableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721AUpgradeable.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryableUpgradeable is IERC721AUpgradeable {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/HasRegistration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\nimport \\\"./IsBypassable.sol\\\";\\n\\ncontract HasRegistration is IsBypassable {\\n\\n    mapping(address => uint256) public registeredContracts; // 0 EMPTY, 1 ERC1155, 2 ERC721, 3 HANDLER, 4 ERC20, 5 BALANCE, 6 CLAIM, 7 UNKNOWN, 8 FACTORY, 9 STAKING, 10 BYPASS\\n    mapping(uint256 => address[]) internal registeredOfType;\\n\\n    modifier isRegisteredContract(address _contract) {\\n        require(registeredContracts[_contract] > 0, \\\"Contract is not registered\\\");\\n        _;\\n    }\\n\\n    modifier isRegisteredContractOrOwner(address _contract) {\\n        require(registeredContracts[_contract] > 0 || owner() == _msgSender(), \\\"Contract is not registered nor Owner\\\");\\n        _;\\n    }\\n\\n    function registerContract(address _contract, uint _type) public isRegisteredContractOrOwner(_msgSender()) {\\n        registeredContracts[_contract] = _type;\\n        registeredOfType[_type].push(_contract);\\n    }\\n\\n    function unregisterContract(address _contract, uint256 index) public onlyOwner isRegisteredContract(_contract) {\\n        address[] storage arr = registeredOfType[registeredContracts[_contract]];\\n        arr[index] = arr[arr.length - 1];\\n        arr.pop();\\n        delete registeredContracts[_contract];\\n    }\\n\\n    function isRegistered(address _contract, uint256 _type) public view returns (bool) {\\n        return registeredContracts[_contract] == _type;\\n    }\\n\\n    function getAllRegisteredContractsOfType(uint256 _type) public view returns (address[] memory) {\\n        return registeredOfType[_type];\\n    }\\n}\"\r\n    },\r\n    \"contracts/IERC2981Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IERC2981Royalties {\\n   function setTokenRoyalty(uint256 tokenId, address recipient, uint256 value) external;\\n   function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address receiver, uint256 royaltyAmount);\\n}\"\r\n    },\r\n    \"contracts/IERC721AUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721AUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    },\r\n    \"contracts/IHandlerCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\ninterface IHandlerCallback {\\n    enum CallbackType {\\n        MINT, TRANSFER, CLAIM, BURN, FALLBACK\\n    }\\n\\n    struct Callback {\\n        address vault;\\n        address registrant;\\n        address target;\\n        bytes4 targetFunction;\\n        bool canRevert;\\n    }\\n    function executeCallbacksInternal(address _from, address _to, uint256 tokenId, CallbackType _type) external;\\n    function executeCallbacks(address _from, address _to, uint256 tokenId, CallbackType _type) external;\\n    function executeStoredCallbacksInternal(address _nftAddress, address _from, address _to, uint256 tokenId, IHandlerCallback.CallbackType _type) external;\\n    \\n}\"\r\n    },\r\n    \"contracts/IsBypassable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IsClaimable.sol\\\";\\n// import \\\"operator-filter-registry/src/upgradeable/OperatorFiltererUpgradeable.sol\\\";\\n\\nabstract contract IsBypassable is IsClaimable {\\n\\n    bool byPassable;\\n    mapping(address => mapping(bytes4 => bool)) byPassableFunction;\\n    mapping(address => mapping(uint256 => bool)) byPassableIds;\\n\\n    modifier onlyOwner virtual override {\\n        bool _canBypass = byPassable && byPassableFunction[_msgSender()][msg.sig];\\n        require(owner() == _msgSender() || _canBypass, \\\"Not owner or able to bypass\\\");        \\n            _;\\n    }\\n\\n    modifier onlyOwnerOrBypassWithId(uint256 id) {\\n        require (owner() == _msgSender() || (id != 0 && byPassableIds[_msgSender()][id] ), \\\"Invalid id\\\");\\n            _;\\n    }\\n\\n    function canBypass() internal view returns(bool) {\\n        return (byPassable && byPassableFunction[_msgSender()][msg.sig]);\\n    }\\n\\n    function canBypassForTokenId(uint256 id) internal view returns(bool) {\\n        return (byPassable && canBypass() && byPassableIds[_msgSender()][id]);\\n    }\\n\\n    function toggleBypassability() public onlyOwner {\\n      byPassable = !byPassable;\\n    }\\n\\n    function addBypassRule(address who, bytes4 functionSig, uint256 id) public onlyOwner {\\n        byPassableFunction[who][functionSig] = true;\\n        if (id != 0) {\\n            byPassableIds[who][id] = true;\\n        }        \\n    }\\n\\n    function removeBypassRule(address who, bytes4 functionSig, uint256 id) public onlyOwner {\\n        byPassableFunction[who][functionSig] = false;\\n        if (id !=0) {\\n            byPassableIds[who][id] = true;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/IsClaimable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nabstract contract IsClaimable is OwnableUpgradeable {\\n\\n    bool public isClaimable;\\n\\n    function toggleClaimable() public onlyOwner {\\n        isClaimable = !isClaimable;\\n    }\\n   \\n}\"\r\n    },\r\n    \"contracts/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/upgradeable/OperatorFiltererUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"../IOperatorFilterRegistry.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract OperatorFiltererUpgradeable is Initializable {\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry constant operatorFilterRegistry =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe)\\n        internal\\n        onlyInitializing\\n    {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        operatorFilterRegistry.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\\n                revert OperatorNotAllowed(msg.sender);\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
    "etherscan_verified": true
}