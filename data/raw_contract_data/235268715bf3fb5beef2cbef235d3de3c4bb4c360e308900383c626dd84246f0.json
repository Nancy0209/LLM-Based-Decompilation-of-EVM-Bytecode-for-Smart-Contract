{
    "address": "0x61b34D8c15305c8536D730C2CFF0Ba4006B7Fe67",
    "tx_hash": "235268715bf3fb5beef2cbef235d3de3c4bb4c360e308900383c626dd84246f0",
    "block_number": 18007538,
    "timestamp": 1693157939,
    "gas_used_in_creation": 2161075,
    "creation_bytecode": "",
    "runtime_bytecode": "608060405234801561001057600080fd5b50600436106101005760003560e01c80639e196cad11610097578063bf58390311610066578063bf583903146102b1578063e627f2db146102cf578063e9917c07146102ed578063f2fde38b1461030957610100565b80639e196cad14610217578063a3fcd25314610247578063ad9159fd14610263578063b8fcf9371461029357610100565b8063715018a6116100d3578063715018a6146101b55780637e61badd146101bf5780638b0e9f3f146101db5780638da5cb5b146101f957610100565b8063063b35bf146101055780630ded03cd146101355780630e15561a146101655780633027ffc014610183575b600080fd5b61011f600480360381019061011a9190611991565b610325565b60405161012c9190611cc8565b60405180910390f35b61014f600480360381019061014a91906119fe565b6103b4565b60405161015c9190611dc3565b60405180910390f35b61016d61052a565b60405161017a9190611dc3565b60405180910390f35b61019d60048036038101906101989190611991565b610530565b6040516101ac93929190611dde565b60405180910390f35b6101bd610574565b005b6101d960048036038101906101d49190611a58565b610588565b005b6101e3610ae8565b6040516101f09190611dc3565b60405180910390f35b610201610aee565b60405161020e9190611c09565b60405180910390f35b610231600480360381019061022c91906119fe565b610b17565b60405161023e9190611dc3565b60405180910390f35b610261600480360381019061025c9190611a98565b610b2f565b005b61027d60048036038101906102789190611991565b610b7a565b60405161028a9190611dc3565b60405180910390f35b61029b610bfc565b6040516102a89190611cad565b60405180910390f35b6102b9610c22565b6040516102c69190611dc3565b60405180910390f35b6102d7610d97565b6040516102e49190611dc3565b60405180910390f35b61030760048036038101906103029190611a58565b610da1565b005b610323600480360381019061031e9190611964565b611290565b005b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083600481111561037b5761037a612049565b5b600481111561038d5761038c612049565b5b815260200190815260200160002060010160009054906101000a900460ff16905092915050565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600481111561040b5761040a612049565b5b600481111561041d5761041c612049565b5b8152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900460ff16600481111561046557610464612049565b5b600481111561047757610476612049565b5b815260200160028201548152505090506000610497826000015183611314565b905060006104e460186104d6603c6104c8603c8860400151426104ba9190611f07565b61139290919063ffffffff16565b61139290919063ffffffff16565b61139290919063ffffffff16565b9050600181106104f457806104f7565b60015b90506105208161051261016c8561139290919063ffffffff16565b6113a890919063ffffffff16565b9350505050919050565b60025481565b6004602052816000526040600020602052806000526040600020600091509150508060000154908060010160009054906101000a900460ff16908060020154905083565b61057c6113be565b610586600061143c565b565b600082116105cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c290611d43565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083600481111561062157610620612049565b5b600481111561063357610632612049565b5b8152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900460ff16600481111561067b5761067a612049565b5b600481111561068d5761068c612049565b5b815260200160028201548152505090506106a681611500565b6106e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dc90611da3565b60405180910390fd5b806000015183111561072c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072390611d83565b60405180910390fd5b6000610737836103b4565b905061075084836000015161152990919063ffffffff16565b82600001818152505081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008560048111156107ae576107ad612049565b5b60048111156107c0576107bf612049565b5b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083600481111561080357610802612049565b5b02179055506040820151816002015590505061082a8460015461152990919063ffffffff16565b6001819055506108458160025461153f90919063ffffffff16565b6002819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008560048111156108a1576108a0612049565b5b60048111156108b3576108b2612049565b5b81526020019081526020016000206000015414156108d5576108d433611555565b5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401610932929190611c84565b602060405180830381600087803b15801561094c57600080fd5b505af1158015610960573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098491906119d1565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6109cb610aee565b33846040518463ffffffff1660e01b81526004016109eb93929190611c4d565b602060405180830381600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d91906119d1565b503373ffffffffffffffffffffffffffffffffffffffff167f20b8c145b65cb389fbd3274ce53ddf475d0167c30e65fc56215bbc9988670f56858542604051610a8893929190611dde565b60405180910390a23373ffffffffffffffffffffffffffffffffffffffff167f6719f60144372d022e82b9bbcec8a044fc8dbaf58504f89906532d12008e4c57828542604051610ada93929190611dde565b60405180910390a250505050565b60015481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60056020528060005260406000206000915090505481565b610b376113be565b8160ff1660056000836004811115610b5257610b51612049565b5b6004811115610b6457610b63612049565b5b8152602001908152602001600020819055505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836004811115610bd057610bcf612049565b5b6004811115610be257610be1612049565b5b815260200190815260200160002060000154905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610d92600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231610c6d610aee565b6040518263ffffffff1660e01b8152600401610c899190611c09565b60206040518083038186803b158015610ca157600080fd5b505afa158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd99190611a2b565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e610d1f610aee565b306040518363ffffffff1660e01b8152600401610d3d929190611c24565b60206040518083038186803b158015610d5557600080fd5b505afa158015610d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8d9190611a2b565b611664565b905090565b6000600254905090565b60008211610de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddb90611ce3565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610e4393929190611c4d565b602060405180830381600087803b158015610e5d57600080fd5b505af1158015610e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9591906119d1565b610ed4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecb90611d03565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836004811115610f2a57610f29612049565b5b6004811115610f3c57610f3b612049565b5b815260200190815260200160002060000154141561106557610f5d3361167d565b6040518060600160405280838152602001826004811115610f8157610f80612049565b5b815260200142815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836004811115610fde57610fdd612049565b5b6004811115610ff057610fef612049565b5b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083600481111561103357611032612049565b5b02179055506040820151816002015590505061105a8260015461153f90919063ffffffff16565b60018190555061123a565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360048111156110bb576110ba612049565b5b60048111156110cd576110cc612049565b5b8152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900460ff16600481111561111557611114612049565b5b600481111561112757611126612049565b5b8152602001600282015481525050905061114e83826000015161153f90919063ffffffff16565b8160000181815250504281604001818152505080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460048111156111b6576111b5612049565b5b60048111156111c8576111c7612049565b5b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083600481111561120b5761120a612049565b5b0217905550604082015181600201559050506112328360015461153f90919063ffffffff16565b600181905550505b3373ffffffffffffffffffffffffffffffffffffffff167fadd17b9d82cb146eaff151f4f864faa55b09599b4eff7714935025b99054fe1c83834260405161128493929190611dde565b60405180910390a25050565b6112986113be565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611308576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ff90611d23565b60405180910390fd5b6113118161143c565b50565b600061138a606461137c606461136e600560008860200151600481111561133e5761133d612049565b5b60048111156113505761134f612049565b5b815260200190815260200160002054886113a890919063ffffffff16565b61139290919063ffffffff16565b61139290919063ffffffff16565b905092915050565b600081836113a09190611e7c565b905092915050565b600081836113b69190611ead565b905092915050565b6113c66116f8565b73ffffffffffffffffffffffffffffffffffffffff166113e4610aee565b73ffffffffffffffffffffffffffffffffffffffff161461143a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143190611d63565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008061150c83611700565b836040015161151b9190611e26565b905080421015915050919050565b600081836115379190611f07565b905092915050565b6000818361154d9190611e26565b905092915050565b60008061156183611832565b91509150811561165f576003600160038054905061157f9190611f07565b815481106115905761158f6120a7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600382815481106115cf576115ce6120a7565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600380548061162957611628612078565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b505050565b60008183106116735781611675565b825b905092915050565b600061168882611832565b509050806116f4576003829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b600033905090565b600080600481111561171557611714612049565b5b8260200151600481111561172c5761172b612049565b5b14611820576001600481111561174557611744612049565b5b8260200151600481111561175c5761175b612049565b5b14611816576002600481111561177557611774612049565b5b8260200151600481111561178c5761178b612049565b5b1461180c57600360048111156117a5576117a4612049565b5b826020015160048111156117bc576117bb612049565b5b14611802576004808111156117d4576117d3612049565b5b826020015160048111156117eb576117ea612049565b5b146117f75760006117fd565b6301e133805b611807565b62ed4e005b611811565b6276a7005b61181b565b624f1a005b611825565b62278d005b63ffffffff169050919050565b60008060005b6003805490508110156118d85760038181548110611859576118586120a7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156118c45760018192509250506118e1565b6001816118d19190611e26565b9050611838565b50600080915091505b915091565b6000813590506118f581612280565b92915050565b60008151905061190a81612297565b92915050565b60008135905061191f816122ae565b92915050565b600081359050611934816122be565b92915050565b600081519050611949816122be565b92915050565b60008135905061195e816122d5565b92915050565b60006020828403121561197a576119796120d6565b5b6000611988848285016118e6565b91505092915050565b600080604083850312156119a8576119a76120d6565b5b60006119b6858286016118e6565b92505060206119c785828601611910565b9150509250929050565b6000602082840312156119e7576119e66120d6565b5b60006119f5848285016118fb565b91505092915050565b600060208284031215611a1457611a136120d6565b5b6000611a2284828501611910565b91505092915050565b600060208284031215611a4157611a406120d6565b5b6000611a4f8482850161193a565b91505092915050565b60008060408385031215611a6f57611a6e6120d6565b5b6000611a7d85828601611925565b9250506020611a8e85828601611910565b9150509250929050565b60008060408385031215611aaf57611aae6120d6565b5b6000611abd8582860161194f565b9250506020611ace85828601611910565b9150509250929050565b611ae181611f3b565b82525050565b611af081611fa3565b82525050565b611aff81611fb5565b82525050565b6000611b12601e83611e15565b9150611b1d826120db565b602082019050919050565b6000611b35601583611e15565b9150611b4082612104565b602082019050919050565b6000611b58602683611e15565b9150611b638261212d565b604082019050919050565b6000611b7b603183611e15565b9150611b868261217c565b604082019050919050565b6000611b9e602083611e15565b9150611ba9826121cb565b602082019050919050565b6000611bc1601483611e15565b9150611bcc826121f4565b602082019050919050565b6000611be4603283611e15565b9150611bef8261221d565b604082019050919050565b611c0381611f8c565b82525050565b6000602082019050611c1e6000830184611ad8565b92915050565b6000604082019050611c396000830185611ad8565b611c466020830184611ad8565b9392505050565b6000606082019050611c626000830186611ad8565b611c6f6020830185611ad8565b611c7c6040830184611bfa565b949350505050565b6000604082019050611c996000830185611ad8565b611ca66020830184611bfa565b9392505050565b6000602082019050611cc26000830184611ae7565b92915050565b6000602082019050611cdd6000830184611af6565b92915050565b60006020820190508181036000830152611cfc81611b05565b9050919050565b60006020820190508181036000830152611d1c81611b28565b9050919050565b60006020820190508181036000830152611d3c81611b4b565b9050919050565b60006020820190508181036000830152611d5c81611b6e565b9050919050565b60006020820190508181036000830152611d7c81611b91565b9050919050565b60006020820190508181036000830152611d9c81611bb4565b9050919050565b60006020820190508181036000830152611dbc81611bd7565b9050919050565b6000602082019050611dd86000830184611bfa565b92915050565b6000606082019050611df36000830186611bfa565b611e006020830185611af6565b611e0d6040830184611bfa565b949350505050565b600082825260208201905092915050565b6000611e3182611f8c565b9150611e3c83611f8c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e7157611e70611feb565b5b828201905092915050565b6000611e8782611f8c565b9150611e9283611f8c565b925082611ea257611ea161201a565b5b828204905092915050565b6000611eb882611f8c565b9150611ec383611f8c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611efc57611efb611feb565b5b828202905092915050565b6000611f1282611f8c565b9150611f1d83611f8c565b925082821015611f3057611f2f611feb565b5b828203905092915050565b6000611f4682611f6c565b9050919050565b60008115159050919050565b6000819050611f678261226c565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611fae82611fc7565b9050919050565b6000611fc082611f59565b9050919050565b6000611fd282611fd9565b9050919050565b6000611fe482611f6c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f7374616b652076616c75652073686f756c64206e6f74206265207a65726f0000600082015250565b7f546f6b656e205472616e73666572204661696c65640000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5374616b652076616c756520284e756d626572206f6620546f6b656e7329207360008201527f686f756c64206e6f74206265207a65726f000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e76616c6964205374616b6520416d6f756e74000000000000000000000000600082015250565b7f5374616b696e6720706572696f6420686173206e6f7420657870697265642e2060008201527f506c656173652077616974206d6f726520210000000000000000000000000000602082015250565b6005811061227d5761227c612049565b5b50565b61228981611f3b565b811461229457600080fd5b50565b6122a081611f4d565b81146122ab57600080fd5b50565b600581106122bb57600080fd5b50565b6122c781611f8c565b81146122d257600080fd5b50565b6122de81611f96565b81146122e957600080fd5b5056fea2646970667358221220b7b73ba97e145d33e47bc38fe5a739dfb0cad7ffaaf9b7141d6e3b898597d28e64736f6c63430008070033",
    "contract_name": "STAKINGContract",
    "compiler_version": "v0.8.7+commit.e28d00a7",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_myToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenUnstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"_stakePeriod\",\"type\":\"uint8\"}],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"_stakePeriod\",\"type\":\"uint8\"}],\"name\":\"getDailyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"_stakePeriod\",\"type\":\"uint8\"}],\"name\":\"setApyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"_stakePeriod\",\"type\":\"uint8\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"stakePeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"_stakePeriod\",\"type\":\"uint8\"}],\"name\":\"stakingPeriodOf\",\"outputs\":[{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"_stakePeriod\",\"type\":\"uint8\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "/**\r\n *Submitted for verification at Etherscan.io on 2023-08-27\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return\r\n                result +\r\n                (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return\r\n                result +\r\n                (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return\r\n                result +\r\n                (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return\r\n                result +\r\n                (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: staking.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract STAKINGContract is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalStake;\r\n    uint256 public totalRewards;\r\n\r\n    enum StakingPeriod {\r\n        ONE_MONTH,\r\n        TWO_MONTH,\r\n        THREE_MONTH,\r\n        SIX_MONTH,\r\n        ONE_YEAR\r\n    }\r\n\r\n    struct stake {\r\n        uint256 amount;\r\n        StakingPeriod stakePeriod;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    address[] internal stakeholders;\r\n\r\n    mapping(address => mapping(StakingPeriod => stake)) public stakes;\r\n    mapping(StakingPeriod => uint256) public apr;\r\n\r\n    IERC20 public myToken;\r\n\r\n    event TokenStaked(\r\n        address indexed _from,\r\n        uint256 amount,\r\n        StakingPeriod plan,\r\n        uint256 timestamp\r\n    );\r\n    event TokenUnstaked(\r\n        address indexed _from,\r\n        uint256 amount,\r\n        StakingPeriod plan,\r\n        uint256 timestamp\r\n    );\r\n    event RewardsTransferred(\r\n        address indexed _to,\r\n        uint256 amount,\r\n        StakingPeriod plan,\r\n        uint256 timestamp\r\n    );\r\n\r\n    constructor(address _myToken) {\r\n        myToken = IERC20(_myToken);\r\n        apr[StakingPeriod.ONE_MONTH] = 900; //9%\r\n        apr[StakingPeriod.TWO_MONTH] = 2000; //20%\r\n        apr[StakingPeriod.THREE_MONTH] = 3200; //32%\r\n        apr[StakingPeriod.SIX_MONTH] = 7000; //70%\r\n        apr[StakingPeriod.ONE_YEAR] = 16000; //160%\r\n    }\r\n\r\n    // ---------- STAKES ----------\r\n\r\n    function createStake(uint256 _stake, StakingPeriod _stakePeriod) public {\r\n        require(_stake > 0, \"stake value should not be zero\");\r\n        require(\r\n            myToken.transferFrom(msg.sender, address(this), _stake),\r\n            \"Token Transfer Failed\"\r\n        );\r\n        if (stakes[msg.sender][_stakePeriod].amount == 0) {\r\n            addStakeholder(msg.sender);\r\n            stakes[msg.sender][_stakePeriod] = stake(\r\n                _stake,\r\n                _stakePeriod,\r\n                block.timestamp\r\n            );\r\n            totalStake = totalStake.add(_stake);\r\n        } else {\r\n            stake memory tempStake = stakes[msg.sender][_stakePeriod];\r\n            tempStake.amount = tempStake.amount.add(_stake);\r\n            tempStake.timestamp = block.timestamp;\r\n            stakes[msg.sender][_stakePeriod] = tempStake;\r\n            totalStake = totalStake.add(_stake);\r\n        }\r\n        emit TokenStaked(msg.sender, _stake, _stakePeriod, block.timestamp);\r\n    }\r\n\r\n    function unStake(uint256 _stake, StakingPeriod _stakePeriod) public {\r\n        require(_stake > 0, \"Stake value (Number of Tokens) should not be zero\");\r\n        stake memory tempStake = stakes[msg.sender][_stakePeriod];\r\n        require(\r\n            validateStakingPeriod(tempStake),\r\n            \"Staking period has not expired. Please wait more !\"\r\n        );\r\n        require(_stake <= tempStake.amount, \"Invalid Stake Amount\");\r\n        uint256 _investorReward = getDailyRewards(_stakePeriod);\r\n        tempStake.amount = tempStake.amount.sub(_stake);\r\n        stakes[msg.sender][_stakePeriod] = tempStake;\r\n        totalStake = totalStake.sub(_stake);\r\n        totalRewards = totalRewards.add(_investorReward);\r\n        //uint256 tokensToBeTransfer = _stake.add(_investorReward);\r\n        if (stakes[msg.sender][_stakePeriod].amount == 0)\r\n            removeStakeholder(msg.sender);\r\n        myToken.transfer(msg.sender, _stake);\r\n        myToken.transferFrom(owner(), msg.sender, _investorReward);\r\n        emit TokenUnstaked(msg.sender, _stake, _stakePeriod, block.timestamp);\r\n        emit RewardsTransferred(\r\n            msg.sender,\r\n            _investorReward,\r\n            _stakePeriod,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getInvestorRewards(uint256 _unstakeAmount, stake memory _investor)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // uint256 investorStakingPeriod = getStakingPeriodInNumbers(_investor);\r\n        // uint APY = investorStakingPeriod == 26 weeks ? sixMonthAPR : investorStakingPeriod == 52 weeks ? oneYearAPR : investorStakingPeriod == 156 weeks ? threeYearAPR : 0;\r\n        return _unstakeAmount.mul(apr[_investor.stakePeriod]).div(100).div(100);\r\n    }\r\n\r\n    function validateStakingPeriod(stake memory _investor)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 stakingTimeStamp = _investor.timestamp +\r\n            getStakingPeriodInNumbers(_investor);\r\n        return block.timestamp >= stakingTimeStamp;\r\n    }\r\n\r\n    function getStakingPeriodInNumbers(stake memory _investor)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return\r\n            _investor.stakePeriod == StakingPeriod.ONE_MONTH\r\n                ? 30 days\r\n                : _investor.stakePeriod == StakingPeriod.TWO_MONTH\r\n                ? 60 days\r\n                : _investor.stakePeriod == StakingPeriod.THREE_MONTH\r\n                ? 90 days\r\n                : _investor.stakePeriod == StakingPeriod.SIX_MONTH\r\n                ? 180 days\r\n                : _investor.stakePeriod == StakingPeriod.ONE_YEAR\r\n                ? 365 days\r\n                : 0;\r\n    }\r\n\r\n    function stakeOf(address _stakeholder, StakingPeriod _stakePeriod)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return stakes[_stakeholder][_stakePeriod].amount;\r\n    }\r\n\r\n    function stakingPeriodOf(address _stakeholder, StakingPeriod _stakePeriod)\r\n        public\r\n        view\r\n        returns (StakingPeriod)\r\n    {\r\n        return stakes[_stakeholder][_stakePeriod].stakePeriod;\r\n    }\r\n\r\n    function getDailyRewards(StakingPeriod _stakePeriod)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        stake memory tempStake = stakes[msg.sender][_stakePeriod];\r\n        uint256 total_rewards = getInvestorRewards(tempStake.amount, tempStake);\r\n        uint256 noOfDays = (block.timestamp - tempStake.timestamp)\r\n            .div(60)\r\n            .div(60)\r\n            .div(24);\r\n        noOfDays = (noOfDays < 1) ? 1 : noOfDays;\r\n        // uint256 stakingPeriodInDays =  getStakingPeriodInNumbers(tempStake).div(60).div(60).div(24);\r\n        return total_rewards.div(364).mul(noOfDays);\r\n    }\r\n\r\n    // ---------- STAKEHOLDERS ----------\r\n\r\n    function isStakeholder(address _address)\r\n        internal\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1) {\r\n            if (_address == stakeholders[s]) return (true, s);\r\n        }\r\n        return (false, 0);\r\n    }\r\n\r\n    function addStakeholder(address _stakeholder) internal {\r\n        (bool _isStakeholder, ) = isStakeholder(_stakeholder);\r\n        if (!_isStakeholder) stakeholders.push(_stakeholder);\r\n    }\r\n\r\n    function removeStakeholder(address _stakeholder) internal {\r\n        (bool _isStakeholder, uint256 s) = isStakeholder(_stakeholder);\r\n        if (_isStakeholder) {\r\n            stakeholders[s] = stakeholders[stakeholders.length - 1];\r\n            stakeholders.pop();\r\n        }\r\n    }\r\n\r\n    // ---------- REWARDS ----------\r\n\r\n    function getTotalRewards() public view returns (uint256) {\r\n        return totalRewards;\r\n    }\r\n\r\n    // ---- Staking APY  setters ----\r\n\r\n    function setApyPercentage(uint8 _percentage, StakingPeriod _stakePeriod)\r\n        public\r\n        onlyOwner\r\n    {\r\n        apr[_stakePeriod] = _percentage;\r\n    }\r\n\r\n    function remainingTokens() public view returns (uint256) {\r\n        return\r\n            Math.min(\r\n                myToken.balanceOf(owner()),\r\n                myToken.allowance(owner(), address(this))\r\n            );\r\n    }\r\n}",
    "etherscan_verified": true
}