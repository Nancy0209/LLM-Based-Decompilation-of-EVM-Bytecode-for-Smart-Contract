{
    "address": "0xEEF6196376173FC3F2BeDfe0cFcB355401e1Be51",
    "tx_hash": "b7ae4c5956e2e39e4f1a6ca8e607545880a75fdeb1456ec536feb3e5f254f8a4",
    "block_number": 18009781,
    "timestamp": 1693185119,
    "gas_used_in_creation": 1854713,
    "creation_bytecode": "60806040526006805460ff19169055600f600755602360088181555f6009819055600a8181556019600b55600c93909355600d839055600e5562000043916200031f565b62000053906301312d0062000336565b600f55620000646008600a6200031f565b62000074906301312d0062000336565b601055620000856008600a6200031f565b62000091905f62000336565b6011556014805461ffff60a81b19169055348015620000ae575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060068054610100600160a81b0319166101003302179055620001146008600a6200031f565b6200012490633b9aca0062000336565b335f9081526001602081905260408220929092556003906200014d5f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556006546101009004909116835291208054909216179055620001b03390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620001e96008600a6200031f565b620001f990633b9aca0062000336565b60405190815260200160405180910390a362000350565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200026457815f190482111562000248576200024862000210565b808516156200025657918102915b93841c939080029062000229565b509250929050565b5f826200027c5750600162000319565b816200028a57505f62000319565b8160018114620002a35760028114620002ae57620002ce565b600191505062000319565b60ff841115620002c257620002c262000210565b50506001821b62000319565b5060208310610133831016604e8410600b8410161715620002f3575081810a62000319565b620002ff838362000224565b805f190482111562000315576200031562000210565b0290505b92915050565b5f6200032f60ff8416836200026c565b9392505050565b808202811582820484141762000319576200031962000210565b611b35806200035e5f395ff3fe608060405260043610610134575f3560e01c806372333356116100a857806395d89b411161006d57806395d89b411461035e578063a9059cbb14610389578063bf474bed146103a8578063c876d0b9146103bd578063c9567bf9146103d6578063dd62ed3e146103ea575f80fd5b806372333356146102db578063751039fc146102fa5780637d1db4a51461030e5780638da5cb5b146103235780638f9a55c014610349575f80fd5b80633bbac579116100f95780633bbac5791461021257806351bc3c8514610249578063553193ca1461025f5780636de7bcbd1461027457806370a0823114610293578063715018a6146102c7575f80fd5b806306fdde031461013f578063095ea7b31461018757806318160ddd146101b657806323b872dd146101d8578063313ce567146101f7575f80fd5b3661013b57005b5f80fd5b34801561014a575f80fd5b5060408051808201909152600e81526d109a5d08141b185e59dc9bdd5b9960921b60208201525b60405161017e9190611624565b60405180910390f35b348015610192575f80fd5b506101a66101a1366004611696565b61042e565b604051901515815260200161017e565b3480156101c1575f80fd5b506101ca610444565b60405190815260200161017e565b3480156101e3575f80fd5b506101a66101f23660046116c0565b610464565b348015610202575f80fd5b506040516008815260200161017e565b34801561021d575f80fd5b506101a661022c3660046116fe565b6001600160a01b03165f9081526004602052604090205460ff1690565b348015610254575f80fd5b5061025d6104cb565b005b34801561026a575f80fd5b506101ca60125481565b34801561027f575f80fd5b5061025d61028e36600461172d565b610521565b34801561029e575f80fd5b506101ca6102ad3660046116fe565b6001600160a01b03165f9081526001602052604090205490565b3480156102d2575f80fd5b5061025d6105b8565b3480156102e6575f80fd5b5061025d6102f53660046117ed565b610629565b348015610305575f80fd5b5061025d61065d565b348015610319575f80fd5b506101ca600f5481565b34801561032e575f80fd5b505f546040516001600160a01b03909116815260200161017e565b348015610354575f80fd5b506101ca60105481565b348015610369575f80fd5b5060408051808201909152600381526242504760e81b6020820152610171565b348015610394575f80fd5b506101a66103a3366004611696565b610718565b3480156103b3575f80fd5b506101ca60115481565b3480156103c8575f80fd5b506006546101a69060ff1681565b3480156103e1575f80fd5b5061025d610724565b3480156103f5575f80fd5b506101ca61040436600461180d565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f61043a338484610ad1565b5060015b92915050565b5f6104516008600a611938565b61045f90633b9aca00611946565b905090565b5f610470848484610bf4565b6104c184336104bc85604051806060016040528060288152602001611ad8602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611283565b610ad1565b5060019392505050565b60065461010090046001600160a01b0316336001600160a01b0316146104ef575f80fd5b305f90815260016020526040902054801561050d5761050d816112bb565b47801561051d5761051d81611444565b5050565b5f546001600160a01b031633146105535760405162461bcd60e51b815260040161054a9061195d565b60405180910390fd5b5f5b815181101561051d57600160045f84848151811061057557610575611992565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff1916911515919091179055806105b0816119a6565b915050610555565b5f546001600160a01b031633146105e15760405162461bcd60e51b815260040161054a9061195d565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146106525760405162461bcd60e51b815260040161054a9061195d565b600991909155600a55565b5f546001600160a01b031633146106865760405162461bcd60e51b815260040161054a9061195d565b6106926008600a611938565b6106a090633b9aca00611946565b600f556106af6008600a611938565b6106bd90633b9aca00611946565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106f76008600a611938565b61070590633b9aca00611946565b60405190815260200160405180910390a1565b5f61043a338484610bf4565b5f546001600160a01b0316331461074d5760405162461bcd60e51b815260040161054a9061195d565b601454600160a01b900460ff16156107a75760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161054a565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556107f09030906107e26008600a611938565b6104bc90633b9aca00611946565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610840573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061086491906119be565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e791906119be565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610931573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061095591906119be565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d719473061099c816001600160a01b03165f9081526001602052604090205490565b5f806109af5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610a15573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610a3a91906119d9565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610a8f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ab39190611a04565b506014805462ff00ff60a01b19166201000160a01b17905543601255565b6001600160a01b038316610b335760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161054a565b6001600160a01b038216610b945760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161054a565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610c585760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161054a565b6001600160a01b038216610cba5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161054a565b5f8111610d1b5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161054a565b5f80546001600160a01b03858116911614801590610d4657505f546001600160a01b03848116911614155b15611146576001600160a01b0384165f9081526004602052604090205460ff16158015610d8b57506001600160a01b0383165f9081526004602052604090205460ff16155b610d93575f80fd5b60065460ff1615610e4a576013546001600160a01b03848116911614801590610dca57506014546001600160a01b03848116911614155b15610e4a57325f908152600560205260409020544311610e385760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b606482015260840161054a565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610e7557506013546001600160a01b03848116911614155b8015610e9957506001600160a01b0383165f9081526003602052604090205460ff16155b15610f9257600f54821115610eec5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161054a565b60105482610f0e856001600160a01b03165f9081526001602052604090205490565b610f189190611a23565b1115610f665760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161054a565b600d54600e541015610f7d57823b15610f7d575f80fd5b600e8054905f610f8c836119a6565b91905055505b610fbe6064610fb8600b54600e5411610fad57600754610fb1565b6009545b859061147f565b90611504565b6014549091506001600160a01b038481169116148015610fe757506001600160a01b0384163014155b1561106257600f5482111561103a5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161054a565b61105f6064610fb8600c54600e541161105557600854610fb1565b600a54859061147f565b90505b601254439061107390600190611a23565b1061108b576110886064610fb884606361147f565b90505b305f90815260016020526040902054601454600160a81b900460ff161580156110c157506014546001600160a01b038581169116145b80156110d65750601454600160b01b900460ff165b80156110e3575060115481115b80156110f25750600d54600e54115b156111445761113261112d6111276064610fb860026111136008600a611938565b61112190633b9aca00611946565b9061147f565b83611545565b6112bb565b4780156111425761114247611444565b505b505b80156111be57305f908152600160205260409020546111659082611559565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111b59085815260200190565b60405180910390a35b6001600160a01b0384165f908152600160205260409020546111e090836115b7565b6001600160a01b0385165f9081526001602052604090205561122361120583836115b7565b6001600160a01b0385165f9081526001602052604090205490611559565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61126c85856115b7565b60405190815260200160405180910390a350505050565b5f81848411156112a65760405162461bcd60e51b815260040161054a9190611624565b505f6112b28486611a36565b95945050505050565b6014805460ff60a81b1916600160a81b179055801561143457601454600160a01b900460ff1615611434576040805160028082526060820183525f9260208301908036833701905050905030815f8151811061131957611319611992565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611370573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061139491906119be565b816001815181106113a7576113a7611992565b6001600160a01b0392831660209182029290920101526013546113cd9130911684610ad1565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906114059085905f90869030904290600401611a49565b5f604051808303815f87803b15801561141c575f80fd5b505af115801561142e573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f1935050505015801561051d573d5f803e3d5ffd5b5f825f0361148e57505f61043e565b5f6114998385611946565b9050826114a68583611ab8565b146114fd5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161054a565b9392505050565b5f6114fd83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115f8565b5f81831161155357826114fd565b50919050565b5f806115658385611a23565b9050838110156114fd5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161054a565b5f6114fd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611283565b5f81836116185760405162461bcd60e51b815260040161054a9190611624565b505f6112b28486611ab8565b5f6020808352835180828501525f5b8181101561164f57858101830151858201604001528201611633565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611683575f80fd5b50565b80356116918161166f565b919050565b5f80604083850312156116a7575f80fd5b82356116b28161166f565b946020939093013593505050565b5f805f606084860312156116d2575f80fd5b83356116dd8161166f565b925060208401356116ed8161166f565b929592945050506040919091013590565b5f6020828403121561170e575f80fd5b81356114fd8161166f565b634e487b7160e01b5f52604160045260245ffd5b5f602080838503121561173e575f80fd5b823567ffffffffffffffff80821115611755575f80fd5b818501915085601f830112611768575f80fd5b81358181111561177a5761177a611719565b8060051b604051601f19603f8301168101818110858211171561179f5761179f611719565b6040529182528482019250838101850191888311156117bc575f80fd5b938501935b828510156117e1576117d285611686565b845293850193928501926117c1565b98975050505050505050565b5f80604083850312156117fe575f80fd5b50508035926020909101359150565b5f806040838503121561181e575f80fd5b82356118298161166f565b915060208301356118398161166f565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561189257815f190482111561187857611878611844565b8085161561188557918102915b93841c939080029061185d565b509250929050565b5f826118a85750600161043e565b816118b457505f61043e565b81600181146118ca57600281146118d4576118f0565b600191505061043e565b60ff8411156118e5576118e5611844565b50506001821b61043e565b5060208310610133831016604e8410600b8410161715611913575081810a61043e565b61191d8383611858565b805f190482111561193057611930611844565b029392505050565b5f6114fd60ff84168361189a565b808202811582820484141761043e5761043e611844565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b5f600182016119b7576119b7611844565b5060010190565b5f602082840312156119ce575f80fd5b81516114fd8161166f565b5f805f606084860312156119eb575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611a14575f80fd5b815180151581146114fd575f80fd5b8082018082111561043e5761043e611844565b8181038181111561043e5761043e611844565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015611a975784516001600160a01b031683529383019391830191600101611a72565b50506001600160a01b03969096166060850152505050608001529392505050565b5f82611ad257634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220da8f56723eca805a4f34bd35c271fe9f62c8561219856ca0413408ff9901376664736f6c63430008140033",
    "runtime_bytecode": "",
    "contract_name": "BitPlayground",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"manageList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSellFee\",\"type\":\"uint256\"}],\"name\":\"reduceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "//Bit Playground\r\n/**\r\nWelcome to Bitplayground, a universe where the nostalgia of arcade games meets the innovation of blockchain. \r\nPlay, build, trade, and connect with fellow gamers and creators. Jump into the Game!\r\n\r\nINFINITE PLAYGROUNDS AWAIT YOU\r\nWhether you\u2019re a fan of 8-bit classics, gripping DOS games, or cutting-edge blockchain-powered titles, \r\nour library has something for every gamer. Dive into arcade gaming like never before!\r\n\r\n-PAC MAN\r\n-PIT-FIGHTER\r\n-The Combatribes\r\n-THE KING OF FIGHTERS XV\r\n\r\nhttps://bitplayground.xyz\r\nhttps://t.me/BitPlaygroundPortal\r\nhttps://twitter.com/BitPlayground_\r\n\r\n\r\n**/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract BitPlayground is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=15; \r\n    uint256 private _initialSellTax=35;\r\n    uint256 private _finalBuyTax=0; \r\n    uint256 private _finalSellTax=0;\r\n    uint256 private _reduceBuyTaxAt=25;\r\n    uint256 private _reduceSellTaxAt=35;\r\n    uint256 private _preventSwapBefore=10;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 8;\r\n    uint256 private constant _tTotal = 1000000000 * 10**_decimals;\r\n    string private constant _name = \"Bit Playground\";\r\n    string private constant _symbol = \"BPG\";\r\n    uint256 public _maxTxAmount =   20000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 20000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold=0 * 10**_decimals;\r\n    uint8 private constant _deadBlocks = 1; \r\n    uint256 public startTradeBlock;   \r\n\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_buyCount<_preventSwapBefore){\r\n                    require(!isContract(to));\r\n                }\r\n                _buyCount++;  \r\n            }\r\n\r\n\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            if(startTradeBlock+_deadBlocks >= block.number){\r\n                taxAmount = amount.mul(99).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(_tTotal.mul(2).div(100),contractTokenBalance));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function manageList(address[] memory bots_) external onlyOwner{\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function reduceFee(uint256 _newBuyFee,uint256 _newSellFee) external onlyOwner{\r\n        _finalBuyTax=_newBuyFee;\r\n        _finalSellTax=_newSellFee;\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n}",
    "etherscan_verified": true
}