{
    "address": "0x4EEB531934eb03F55032CF7468957e9cc3b9Ce7d",
    "tx_hash": "dc3285f8c5a9601189df6ebbbd394f1390db5fc92334993328b58b266b01c809",
    "block_number": 18009821,
    "timestamp": 1693185599,
    "gas_used_in_creation": 4899317,
    "creation_bytecode": "6080604052620000126009600a62000643565b620000259066017e9d8602b40062000653565b600381905562000046906064906200003f90600262000420565b90620004b3565b60045560035462000061906064906200003f90600262000420565b6005556001600a556002600b556001600c555f600d555f600e55600e54600c54600a54600b54600d546200009691906200066d565b620000a291906200066d565b620000ae91906200066d565b620000ba91906200066d565b600f55606460108190556011819055601281905560138190556019819055601a55601d805461ffff60a01b1916600160a81b1790556003546103e8906200010390603c62000653565b6200010f919062000683565b601e553480156200011e575f80fd5b505f80546001600160a01b031916339081178255808252600160208190526040808420805460ff191690921790915551909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350601b80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d908117909155604080516315ab88c960e31b8152905163ad5c4648916004808201926020929091908290030181865afa158015620001db573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620002019190620006a3565b600280546001600160a01b0319166001600160a01b03928316179055601b546040805163c45a015560e01b81529051919092169163c45a01559160048083019260209291908290030181865afa1580156200025e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620002849190620006a3565b6002546040516364e329cb60e11b81526001600160a01b03918216600482015230602482015291169063c9c65396906044016020604051808303815f875af1158015620002d3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620002f99190620006a3565b601d80546001600160a01b039283166001600160a01b031991821681178355601c805483169091179055305f818152600760209081526040808320601b548816845282528083205f1990553380845260088352818420805460ff1990811660019081179092556009855283862080548216831790559754891685528285208054891682179055601580549099168552828520805489168217905594845281842080549097169094179095558554841683179095556014805484168317905560168054841683179055601780548416831790556018805490931682179092556003548183526006855283832081905592519283529290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a362000718565b5f825f036200043157505f620004ad565b5f6200043e838562000653565b9050826200044d858362000683565b14620004aa5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084015b60405180910390fd5b90505b92915050565b5f620004aa83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250620004fc60201b60201c565b5f81836200051f5760405162461bcd60e51b8152600401620004a19190620006cb565b505f6200052d848662000683565b95945050505050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200058a57815f19048211156200056e576200056e62000536565b808516156200057c57918102915b93841c93908002906200054f565b509250929050565b5f82620005a257506001620004ad565b81620005b057505f620004ad565b8160018114620005c95760028114620005d457620005f4565b6001915050620004ad565b60ff841115620005e857620005e862000536565b50506001821b620004ad565b5060208310610133831016604e8410600b841016171562000619575081810a620004ad565b6200062583836200054a565b805f19048211156200063b576200063b62000536565b029392505050565b5f620004aa60ff84168362000592565b8082028115828204841417620004ad57620004ad62000536565b80820180821115620004ad57620004ad62000536565b5f826200069e57634e487b7160e01b5f52601260045260245ffd5b500490565b5f60208284031215620006b4575f80fd5b81516001600160a01b0381168114620004aa575f80fd5b5f6020808352835180828501525f5b81811015620006f857858101830151858201604001528201620006da565b505f604082860101526040601f19601f8301168501019250505092915050565b611d0680620007265f395ff3fe6080604052600436106101f4575f3560e01c806378109e5411610108578063a70419d21161009d578063b6a5d7de1161006d578063b6a5d7de1461058b578063dd62ed3e146105aa578063ded1e438146105ee578063f2fde38b1461060d578063f887ea401461062c575f80fd5b8063a70419d21461051b578063a8aa1b311461052f578063a9059cbb1461054e578063b2bdfa7b1461056d575f80fd5b80638a8c523c116100d85780638a8c523c1461049b5780638da5cb5b146104af57806395d89b41146104cb5780639fde54f5146104fc575f80fd5b806378109e541461042d5780637d1db4a51461044257806389291a8f14610457578063893d20e81461046b575f80fd5b806330c9a6a011610189578063571ac8b011610159578063571ac8b0146103875780635d83e1d5146103a65780636ddd1713146103c557806370a08231146103e5578063715018a614610419575f80fd5b806330c9a6a014610318578063313ce5671461033757806342a75d6b146103525780635526566914610373575f80fd5b806318160ddd116101c457806318160ddd146102b15780631d0d1576146102c55780631df4ccfc146102e457806323b872dd146102f9575f80fd5b80630445b667146101ff57806306fdde031461022757806308fd3d0514610262578063095ea7b314610292575f80fd5b366101fb57005b5f80fd5b34801561020a575f80fd5b50610214601e5481565b6040519081526020015b60405180910390f35b348015610232575f80fd5b5060408051808201909152600a8152690436865656d7320322e360b41b60208201525b60405161021e9190611985565b34801561026d575f80fd5b50601d5461028290600160a01b900460ff1681565b604051901515815260200161021e565b34801561029d575f80fd5b506102826102ac3660046119eb565b61064b565b3480156102bc575f80fd5b50600354610214565b3480156102d0575f80fd5b506102826102df3660046119eb565b6106b7565b3480156102ef575f80fd5b50610214600f5481565b348015610304575f80fd5b50610282610313366004611a13565b6107e5565b348015610323575f80fd5b50610214610332366004611a4c565b6108a1565b348015610342575f80fd5b506040516009815260200161021e565b34801561035d575f80fd5b5061037161036c366004611a70565b6108e6565b005b34801561037e575f80fd5b50610214610981565b348015610392575f80fd5b506102826103a1366004611a8c565b6109f1565b3480156103b1575f80fd5b506103716103c0366004611a4c565b6109fd565b3480156103d0575f80fd5b50601d5461028290600160a81b900460ff1681565b3480156103f0575f80fd5b506102146103ff366004611a8c565b6001600160a01b03165f9081526006602052604090205490565b348015610424575f80fd5b50610371610a47565b348015610438575f80fd5b5061021460055481565b34801561044d575f80fd5b5061021460045481565b348015610462575f80fd5b50610371610ab8565b348015610476575f80fd5b505f546001600160a01b03165b6040516001600160a01b03909116815260200161021e565b3480156104a6575f80fd5b50610371610af1565b3480156104ba575f80fd5b505f546001600160a01b0316610483565b3480156104d6575f80fd5b506040805180820190915260098152680434845454d53322e360bc1b6020820152610255565b348015610507575f80fd5b50610371610516366004611aa5565b610b3f565b348015610526575f80fd5b50610371610ba5565b34801561053a575f80fd5b50601d54610483906001600160a01b031681565b348015610559575f80fd5b506102826105683660046119eb565b610bde565b348015610578575f80fd5b505f54610483906001600160a01b031681565b348015610596575f80fd5b506103716105a5366004611a8c565b610bea565b3480156105b5575f80fd5b506102146105c4366004611ada565b6001600160a01b039182165f90815260076020908152604080832093909416825291909152205490565b3480156105f9575f80fd5b50610282610608366004611b0b565b610c39565b348015610618575f80fd5b50610371610627366004611a8c565b610c4c565b348015610637575f80fd5b50601b54610483906001600160a01b031681565b335f8181526007602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906106a59086815260200190565b60405180910390a35060015b92915050565b5f815f03610728576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610701573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107259190611b2b565b91505b604080516001600160a01b0385168152602081018490527fda2bc2bedd1f85b5a59d5dbbd6684ff877ef916994a16ec08813101e99ace65f910160405180910390a160145460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529084169063a9059cbb906044016020604051808303815f875af11580156107ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107de9190611b42565b9392505050565b6001600160a01b0383165f9081526007602090815260408083203384529091528120545f191461088e576040805180820182526016815275496e73756666696369656e7420416c6c6f77616e636560501b6020808301919091526001600160a01b0387165f90815260078252838120338252909152919091205461086a918490610d33565b6001600160a01b0385165f9081526007602090815260408083203384529091529020555b610899848484610d6b565b949350505050565b5f6106b16108ad610981565b601d546001600160a01b03165f908152600660205260409020546108e0906108d9906002905b90611124565b8590611124565b906111a2565b5f546001600160a01b031633146109185760405162461bcd60e51b815260040161090f90611b5d565b60405180910390fd5b601d805460ff60a81b1916600160a81b84151581029190911791829055601e8390556040805184815260ff9290930491909116151560208301527f519582fd959400ab5e398f78c2768dea99251e8e26aed5578213b059ce4cee60910160405180910390a15050565b60066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f85461dead5f9081527f1aecba4ebe7a4e0673e4891b2b092b2228e4322380b579fb494fad3da8586e225460035491926109ec9290916109e691906111e3565b906111e3565b905090565b5f6106b1825f1961064b565b5f546001600160a01b03163314610a265760405162461bcd60e51b815260040161090f90611b5d565b6103e881600354610a379190611ba6565b610a419190611bbd565b60045550565b5f546001600160a01b03163314610a705760405162461bcd60e51b815260040161090f90611b5d565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b6015546040516001600160a01b03909116904780156108fc02915f818181858888f19350505050158015610aee573d5f803e3d5ffd5b50565b5f546001600160a01b03163314610b1a5760405162461bcd60e51b815260040161090f90611b5d565b601d805460ff60a01b1916600160a01b1790556103206011556101f46012555f601355565b5f546001600160a01b03163314610b685760405162461bcd60e51b815260040161090f90611b5d565b6001600160a01b039091165f908152600860209081526040808320805494151560ff19958616811790915560099092529091208054909216179055565b5f546001600160a01b03163314610bce5760405162461bcd60e51b815260040161090f90611b5d565b606460118190556012555f601355565b5f6107de338484610d6b565b5f546001600160a01b03163314610c135760405162461bcd60e51b815260040161090f90611b5d565b6001600160a01b03165f908152600160208190526040909120805460ff19169091179055565b5f82610c44836108a1565b119392505050565b5f546001600160a01b03163314610c755760405162461bcd60e51b815260040161090f90611b5d565b6001600160a01b038116610cda5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161090f565b5f80546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35f80546001600160a01b0319166001600160a01b0392909216919091179055565b5f8184841115610d565760405162461bcd60e51b815260040161090f9190611985565b505f610d628486611bdc565b95945050505050565b601f545f9060ff1615610d8a57610d83848484611224565b90506107de565b6001600160a01b0384165f9081526001602052604090205460ff16158015610dca57506001600160a01b0383165f9081526001602052604090205460ff16155b8015610de45750601d546001600160a01b03848116911614155b8015610e0857506001600160a01b0384165f9081526009602052604090205460ff16155b8015610e2c57506001600160a01b0383165f9081526009602052604090205460ff16155b15610e8157601d54600160a01b900460ff16610e815760405162461bcd60e51b8152602060048201526014602482015273151c98591a5b99c81b9bdd081bdc195b881e595d60621b604482015260640161090f565b6001600160a01b0384165f9081526001602052604090205460ff16158015610eb257506001600160a01b0383163014155b8015610ec957506001600160a01b03831661dead14155b8015610ee35750601d546001600160a01b03848116911614155b8015610efd57506018546001600160a01b03848116911614155b8015610f1757506015546001600160a01b03848116911614155b8015610f3b57506001600160a01b0383165f9081526009602052604090205460ff16155b15610fdb576001600160a01b0383165f90815260066020526040902054600554610f658483611bef565b1115610fd95760405162461bcd60e51b815260206004820152603e60248201527f546f74616c20486f6c64696e672069732063757272656e746c79206c696d697460448201527f65642c20796f752063616e206e6f74206275792074686174206d7563682e0000606482015260840161090f565b505b610fe584836112f4565b610fed611360565b15610ffa57610ffa6113b4565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0387165f9081526006909152919091205461104b918490610d33565b6001600160a01b0385165f90815260066020908152604080832093909355600890529081205460ff168061109657506001600160a01b0384165f9081526008602052604090205460ff165b6110aa576110a585848661177c565b6110ac565b825b6001600160a01b0385165f908152600660205260409020549091506110d190826118fb565b6001600160a01b038086165f8181526006602052604090819020939093559151908716905f80516020611cb1833981519152906111119085815260200190565b60405180910390a3506001949350505050565b5f825f0361113357505f6106b1565b5f61113e8385611ba6565b90508261114b8583611bbd565b146107de5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161090f565b5f6107de83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611959565b5f6107de83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610d33565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0386165f908152600690915291822054611274918490610d33565b6001600160a01b038086165f9081526006602052604080822093909355908516815220546112a290836118fb565b6001600160a01b038085165f8181526006602052604090819020939093559151908616905f80516020611cb1833981519152906112e29086815260200190565b60405180910390a35060019392505050565b6004548111158061131c57506001600160a01b0382165f9081526009602052604090205460ff165b61135c5760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b604482015260640161090f565b5050565b601d545f906001600160a01b031633148015906113805750601f5460ff16155b80156113955750601d54600160a81b900460ff165b80156109ec575050601e54305f90815260066020526040902054101590565b601f805460ff19166001179055601954601a545f916113d291610c39565b6113de57600a546113e0565b5f5b90505f61140360026108e0600f546108e086601e5461112490919063ffffffff16565b90505f61141b82601e546111e390919063ffffffff16565b6040805160028082526060820183529293505f92909160208301908036833701905050905030815f8151811061145357611453611c02565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061148457611484611c02565b6001600160a01b039283166020918202929092010152601b5460405163791ac94760e01b81524792919091169063791ac947906114cd9086905f90879030904290600401611c16565b5f604051808303815f87803b1580156114e4575f80fd5b505af11580156114f6573d5f803e3d5ffd5b505050505f61150e82476111e390919063ffffffff16565b90505f61152861151f8860026111a2565b600f54906111e3565b90505f61153c60026108e08481878d611124565b90505f611558836108e0600b548761112490919063ffffffff16565b90505f611574846108e0600d548861112490919063ffffffff16565b90505f611590856108e0600c548961112490919063ffffffff16565b6015546040519192505f916001600160a01b039091169085908381818185875af1925050503d805f81146115df576040519150601f19603f3d011682016040523d82523d5f602084013e6115e4565b606091505b50506016546040519192506001600160a01b03169083905f81818185875af1925050503d805f8114611631576040519150601f19603f3d011682016040523d82523d5f602084013e611636565b606091505b50506017546040519192506001600160a01b03169084905f81818185875af1925050503d805f8114611683576040519150601f19603f3d011682016040523d82523d5f602084013e611688565b606091505b505f9250508b15905061176457601b5460145460405163f305d71960e01b8152306004820152602481018e90525f6044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990879060c40160606040518083038185885af1158015611702573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906117279190611c85565b505060408051878152602081018e90527f424db2872186fa7e7afa7a5e902ed3b49a2ef19c2f5431e672462495dd6b450692500160405180910390a15b5050601f805460ff1916905550505050505050505050565b601354601d545f91906001600160a01b03908116908416036117a157506011546117bc565b601d546001600160a01b03908116908616036117bc57506012545b5f6117e860105460646117cf9190611ba6565b6108e0846108d3600f548a61112490919063ffffffff16565b90505f611806600f546108e0600e548561112490919063ffffffff16565b90505f61181383836111e3565b305f9081526006602052604090205490915061182f90826118fb565b305f90815260066020526040808220929092556018546001600160a01b03168152205461185c90836118fb565b6018546001600160a01b039081165f9081526006602090815260409182902093909355518381523092918b16915f80516020611cb1833981519152910160405180910390a381156118e5576003546118b490836111e3565b6003556040518281525f906001600160a01b038a16905f80516020611cb18339815191529060200160405180910390a35b6118ef87846111e3565b98975050505050505050565b5f806119078385611bef565b9050838110156107de5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161090f565b5f81836119795760405162461bcd60e51b815260040161090f9190611985565b505f610d628486611bbd565b5f6020808352835180828501525f5b818110156119b057858101830151858201604001528201611994565b505f604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146119e6575f80fd5b919050565b5f80604083850312156119fc575f80fd5b611a05836119d0565b946020939093013593505050565b5f805f60608486031215611a25575f80fd5b611a2e846119d0565b9250611a3c602085016119d0565b9150604084013590509250925092565b5f60208284031215611a5c575f80fd5b5035919050565b8015158114610aee575f80fd5b5f8060408385031215611a81575f80fd5b8235611a0581611a63565b5f60208284031215611a9c575f80fd5b6107de826119d0565b5f8060408385031215611ab6575f80fd5b611abf836119d0565b91506020830135611acf81611a63565b809150509250929050565b5f8060408385031215611aeb575f80fd5b611af4836119d0565b9150611b02602084016119d0565b90509250929050565b5f8060408385031215611b1c575f80fd5b50508035926020909101359150565b5f60208284031215611b3b575f80fd5b5051919050565b5f60208284031215611b52575f80fd5b81516107de81611a63565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176106b1576106b1611b92565b5f82611bd757634e487b7160e01b5f52601260045260245ffd5b500490565b818103818111156106b1576106b1611b92565b808201808211156106b1576106b1611b92565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015611c645784516001600160a01b031683529383019391830191600101611c3f565b50506001600160a01b03969096166060850152505050608001529392505050565b5f805f60608486031215611c97575f80fd5b835192506020840151915060408401519050925092509256feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122042e9ce5a8a7585b857442a94335e3448e900a99924d3d72c9847b187853886e664736f6c63430008140033",
    "runtime_bytecode": "6080604052600436106101f4575f3560e01c806378109e5411610108578063a70419d21161009d578063b6a5d7de1161006d578063b6a5d7de1461058b578063dd62ed3e146105aa578063ded1e438146105ee578063f2fde38b1461060d578063f887ea401461062c575f80fd5b8063a70419d21461051b578063a8aa1b311461052f578063a9059cbb1461054e578063b2bdfa7b1461056d575f80fd5b80638a8c523c116100d85780638a8c523c1461049b5780638da5cb5b146104af57806395d89b41146104cb5780639fde54f5146104fc575f80fd5b806378109e541461042d5780637d1db4a51461044257806389291a8f14610457578063893d20e81461046b575f80fd5b806330c9a6a011610189578063571ac8b011610159578063571ac8b0146103875780635d83e1d5146103a65780636ddd1713146103c557806370a08231146103e5578063715018a614610419575f80fd5b806330c9a6a014610318578063313ce5671461033757806342a75d6b146103525780635526566914610373575f80fd5b806318160ddd116101c457806318160ddd146102b15780631d0d1576146102c55780631df4ccfc146102e457806323b872dd146102f9575f80fd5b80630445b667146101ff57806306fdde031461022757806308fd3d0514610262578063095ea7b314610292575f80fd5b366101fb57005b5f80fd5b34801561020a575f80fd5b50610214601e5481565b6040519081526020015b60405180910390f35b348015610232575f80fd5b5060408051808201909152600a8152690436865656d7320322e360b41b60208201525b60405161021e9190611985565b34801561026d575f80fd5b50601d5461028290600160a01b900460ff1681565b604051901515815260200161021e565b34801561029d575f80fd5b506102826102ac3660046119eb565b61064b565b3480156102bc575f80fd5b50600354610214565b3480156102d0575f80fd5b506102826102df3660046119eb565b6106b7565b3480156102ef575f80fd5b50610214600f5481565b348015610304575f80fd5b50610282610313366004611a13565b6107e5565b348015610323575f80fd5b50610214610332366004611a4c565b6108a1565b348015610342575f80fd5b506040516009815260200161021e565b34801561035d575f80fd5b5061037161036c366004611a70565b6108e6565b005b34801561037e575f80fd5b50610214610981565b348015610392575f80fd5b506102826103a1366004611a8c565b6109f1565b3480156103b1575f80fd5b506103716103c0366004611a4c565b6109fd565b3480156103d0575f80fd5b50601d5461028290600160a81b900460ff1681565b3480156103f0575f80fd5b506102146103ff366004611a8c565b6001600160a01b03165f9081526006602052604090205490565b348015610424575f80fd5b50610371610a47565b348015610438575f80fd5b5061021460055481565b34801561044d575f80fd5b5061021460045481565b348015610462575f80fd5b50610371610ab8565b348015610476575f80fd5b505f546001600160a01b03165b6040516001600160a01b03909116815260200161021e565b3480156104a6575f80fd5b50610371610af1565b3480156104ba575f80fd5b505f546001600160a01b0316610483565b3480156104d6575f80fd5b506040805180820190915260098152680434845454d53322e360bc1b6020820152610255565b348015610507575f80fd5b50610371610516366004611aa5565b610b3f565b348015610526575f80fd5b50610371610ba5565b34801561053a575f80fd5b50601d54610483906001600160a01b031681565b348015610559575f80fd5b506102826105683660046119eb565b610bde565b348015610578575f80fd5b505f54610483906001600160a01b031681565b348015610596575f80fd5b506103716105a5366004611a8c565b610bea565b3480156105b5575f80fd5b506102146105c4366004611ada565b6001600160a01b039182165f90815260076020908152604080832093909416825291909152205490565b3480156105f9575f80fd5b50610282610608366004611b0b565b610c39565b348015610618575f80fd5b50610371610627366004611a8c565b610c4c565b348015610637575f80fd5b50601b54610483906001600160a01b031681565b335f8181526007602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906106a59086815260200190565b60405180910390a35060015b92915050565b5f815f03610728576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610701573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107259190611b2b565b91505b604080516001600160a01b0385168152602081018490527fda2bc2bedd1f85b5a59d5dbbd6684ff877ef916994a16ec08813101e99ace65f910160405180910390a160145460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529084169063a9059cbb906044016020604051808303815f875af11580156107ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107de9190611b42565b9392505050565b6001600160a01b0383165f9081526007602090815260408083203384529091528120545f191461088e576040805180820182526016815275496e73756666696369656e7420416c6c6f77616e636560501b6020808301919091526001600160a01b0387165f90815260078252838120338252909152919091205461086a918490610d33565b6001600160a01b0385165f9081526007602090815260408083203384529091529020555b610899848484610d6b565b949350505050565b5f6106b16108ad610981565b601d546001600160a01b03165f908152600660205260409020546108e0906108d9906002905b90611124565b8590611124565b906111a2565b5f546001600160a01b031633146109185760405162461bcd60e51b815260040161090f90611b5d565b60405180910390fd5b601d805460ff60a81b1916600160a81b84151581029190911791829055601e8390556040805184815260ff9290930491909116151560208301527f519582fd959400ab5e398f78c2768dea99251e8e26aed5578213b059ce4cee60910160405180910390a15050565b60066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f85461dead5f9081527f1aecba4ebe7a4e0673e4891b2b092b2228e4322380b579fb494fad3da8586e225460035491926109ec9290916109e691906111e3565b906111e3565b905090565b5f6106b1825f1961064b565b5f546001600160a01b03163314610a265760405162461bcd60e51b815260040161090f90611b5d565b6103e881600354610a379190611ba6565b610a419190611bbd565b60045550565b5f546001600160a01b03163314610a705760405162461bcd60e51b815260040161090f90611b5d565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b6015546040516001600160a01b03909116904780156108fc02915f818181858888f19350505050158015610aee573d5f803e3d5ffd5b50565b5f546001600160a01b03163314610b1a5760405162461bcd60e51b815260040161090f90611b5d565b601d805460ff60a01b1916600160a01b1790556103206011556101f46012555f601355565b5f546001600160a01b03163314610b685760405162461bcd60e51b815260040161090f90611b5d565b6001600160a01b039091165f908152600860209081526040808320805494151560ff19958616811790915560099092529091208054909216179055565b5f546001600160a01b03163314610bce5760405162461bcd60e51b815260040161090f90611b5d565b606460118190556012555f601355565b5f6107de338484610d6b565b5f546001600160a01b03163314610c135760405162461bcd60e51b815260040161090f90611b5d565b6001600160a01b03165f908152600160208190526040909120805460ff19169091179055565b5f82610c44836108a1565b119392505050565b5f546001600160a01b03163314610c755760405162461bcd60e51b815260040161090f90611b5d565b6001600160a01b038116610cda5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161090f565b5f80546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35f80546001600160a01b0319166001600160a01b0392909216919091179055565b5f8184841115610d565760405162461bcd60e51b815260040161090f9190611985565b505f610d628486611bdc565b95945050505050565b601f545f9060ff1615610d8a57610d83848484611224565b90506107de565b6001600160a01b0384165f9081526001602052604090205460ff16158015610dca57506001600160a01b0383165f9081526001602052604090205460ff16155b8015610de45750601d546001600160a01b03848116911614155b8015610e0857506001600160a01b0384165f9081526009602052604090205460ff16155b8015610e2c57506001600160a01b0383165f9081526009602052604090205460ff16155b15610e8157601d54600160a01b900460ff16610e815760405162461bcd60e51b8152602060048201526014602482015273151c98591a5b99c81b9bdd081bdc195b881e595d60621b604482015260640161090f565b6001600160a01b0384165f9081526001602052604090205460ff16158015610eb257506001600160a01b0383163014155b8015610ec957506001600160a01b03831661dead14155b8015610ee35750601d546001600160a01b03848116911614155b8015610efd57506018546001600160a01b03848116911614155b8015610f1757506015546001600160a01b03848116911614155b8015610f3b57506001600160a01b0383165f9081526009602052604090205460ff16155b15610fdb576001600160a01b0383165f90815260066020526040902054600554610f658483611bef565b1115610fd95760405162461bcd60e51b815260206004820152603e60248201527f546f74616c20486f6c64696e672069732063757272656e746c79206c696d697460448201527f65642c20796f752063616e206e6f74206275792074686174206d7563682e0000606482015260840161090f565b505b610fe584836112f4565b610fed611360565b15610ffa57610ffa6113b4565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0387165f9081526006909152919091205461104b918490610d33565b6001600160a01b0385165f90815260066020908152604080832093909355600890529081205460ff168061109657506001600160a01b0384165f9081526008602052604090205460ff165b6110aa576110a585848661177c565b6110ac565b825b6001600160a01b0385165f908152600660205260409020549091506110d190826118fb565b6001600160a01b038086165f8181526006602052604090819020939093559151908716905f80516020611cb1833981519152906111119085815260200190565b60405180910390a3506001949350505050565b5f825f0361113357505f6106b1565b5f61113e8385611ba6565b90508261114b8583611bbd565b146107de5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161090f565b5f6107de83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611959565b5f6107de83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610d33565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0386165f908152600690915291822054611274918490610d33565b6001600160a01b038086165f9081526006602052604080822093909355908516815220546112a290836118fb565b6001600160a01b038085165f8181526006602052604090819020939093559151908616905f80516020611cb1833981519152906112e29086815260200190565b60405180910390a35060019392505050565b6004548111158061131c57506001600160a01b0382165f9081526009602052604090205460ff165b61135c5760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b604482015260640161090f565b5050565b601d545f906001600160a01b031633148015906113805750601f5460ff16155b80156113955750601d54600160a81b900460ff165b80156109ec575050601e54305f90815260066020526040902054101590565b601f805460ff19166001179055601954601a545f916113d291610c39565b6113de57600a546113e0565b5f5b90505f61140360026108e0600f546108e086601e5461112490919063ffffffff16565b90505f61141b82601e546111e390919063ffffffff16565b6040805160028082526060820183529293505f92909160208301908036833701905050905030815f8151811061145357611453611c02565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061148457611484611c02565b6001600160a01b039283166020918202929092010152601b5460405163791ac94760e01b81524792919091169063791ac947906114cd9086905f90879030904290600401611c16565b5f604051808303815f87803b1580156114e4575f80fd5b505af11580156114f6573d5f803e3d5ffd5b505050505f61150e82476111e390919063ffffffff16565b90505f61152861151f8860026111a2565b600f54906111e3565b90505f61153c60026108e08481878d611124565b90505f611558836108e0600b548761112490919063ffffffff16565b90505f611574846108e0600d548861112490919063ffffffff16565b90505f611590856108e0600c548961112490919063ffffffff16565b6015546040519192505f916001600160a01b039091169085908381818185875af1925050503d805f81146115df576040519150601f19603f3d011682016040523d82523d5f602084013e6115e4565b606091505b50506016546040519192506001600160a01b03169083905f81818185875af1925050503d805f8114611631576040519150601f19603f3d011682016040523d82523d5f602084013e611636565b606091505b50506017546040519192506001600160a01b03169084905f81818185875af1925050503d805f8114611683576040519150601f19603f3d011682016040523d82523d5f602084013e611688565b606091505b505f9250508b15905061176457601b5460145460405163f305d71960e01b8152306004820152602481018e90525f6044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990879060c40160606040518083038185885af1158015611702573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906117279190611c85565b505060408051878152602081018e90527f424db2872186fa7e7afa7a5e902ed3b49a2ef19c2f5431e672462495dd6b450692500160405180910390a15b5050601f805460ff1916905550505050505050505050565b601354601d545f91906001600160a01b03908116908416036117a157506011546117bc565b601d546001600160a01b03908116908616036117bc57506012545b5f6117e860105460646117cf9190611ba6565b6108e0846108d3600f548a61112490919063ffffffff16565b90505f611806600f546108e0600e548561112490919063ffffffff16565b90505f61181383836111e3565b305f9081526006602052604090205490915061182f90826118fb565b305f90815260066020526040808220929092556018546001600160a01b03168152205461185c90836118fb565b6018546001600160a01b039081165f9081526006602090815260409182902093909355518381523092918b16915f80516020611cb1833981519152910160405180910390a381156118e5576003546118b490836111e3565b6003556040518281525f906001600160a01b038a16905f80516020611cb18339815191529060200160405180910390a35b6118ef87846111e3565b98975050505050505050565b5f806119078385611bef565b9050838110156107de5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161090f565b5f81836119795760405162461bcd60e51b815260040161090f9190611985565b505f610d628486611bbd565b5f6020808352835180828501525f5b818110156119b057858101830151858201604001528201611994565b505f604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146119e6575f80fd5b919050565b5f80604083850312156119fc575f80fd5b611a05836119d0565b946020939093013593505050565b5f805f60608486031215611a25575f80fd5b611a2e846119d0565b9250611a3c602085016119d0565b9150604084013590509250925092565b5f60208284031215611a5c575f80fd5b5035919050565b8015158114610aee575f80fd5b5f8060408385031215611a81575f80fd5b8235611a0581611a63565b5f60208284031215611a9c575f80fd5b6107de826119d0565b5f8060408385031215611ab6575f80fd5b611abf836119d0565b91506020830135611acf81611a63565b809150509250929050565b5f8060408385031215611aeb575f80fd5b611af4836119d0565b9150611b02602084016119d0565b90509250929050565b5f8060408385031215611b1c575f80fd5b50508035926020909101359150565b5f60208284031215611b3b575f80fd5b5051919050565b5f60208284031215611b52575f80fd5b81516107de81611a63565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176106b1576106b1611b92565b5f82611bd757634e487b7160e01b5f52601260045260245ffd5b500490565b818103818111156106b1576106b1611b92565b808201808211156106b1576106b1611b92565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015611c645784516001600160a01b031683529383019391830191600101611c3f565b50506001600160a01b03969096166060850152505050608001529392505050565b5f805f60608486031215611c97575f80fd5b835192506020840151915060408401519050925092509256feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122042e9ce5a8a7585b857442a94335e3448e900a99924d3d72c9847b187853886e664736f6c63430008140033",
    "contract_name": "Cheems20",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClearStuck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"TokenAddressCleared\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"ClearToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"set_MaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Enabled\",\"type\":\"bool\"}],\"name\":\"set_SwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Exempt\",\"type\":\"bool\"}],\"name\":\"user_TxExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Exempt\",\"type\":\"bool\"}],\"name\":\"user_exemptfromfees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"checkRatio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"maxWalletRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"removeERCToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setNumTokensToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"showBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\nabstract contract Context {\r\n    \r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        authorizations[_owner] = true;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Cheems20 is Ownable, ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    address WETH;\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n    \r\n\r\n    string constant _name = \"Cheems 2.0\";\r\n    string constant _symbol = \"CHEEMS2.0\";\r\n    uint8 constant _decimals = 9; \r\n\r\n\r\n    event AutoLiquify(uint256 amountETH, uint256 amountTokens);\r\n    event user_exemptfromfees(address Wallet, bool Exempt);\r\n    event user_TxExempt(address Wallet, bool Exempt);\r\n    event ClearStuck(uint256 amount);\r\n    event ClearToken(address TokenAddressCleared, uint256 Amount);\r\n    event set_MaxWallet(uint256 maxWallet);\r\n    event set_SwapBack(uint256 Amount, bool Enabled);\r\n  \r\n    uint256 _totalSupply =  420690000000000 * 10**_decimals; \r\n\r\n    uint256 public _maxTxAmount = _totalSupply.mul(2).div(100); \r\n    uint256 public _maxWalletToken = _totalSupply.mul(2).div(100);\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;  \r\n    mapping (address => bool) isexemptfromfees;\r\n    mapping (address => bool) isexemptfrommaxTX;\r\n\r\n    uint256 private liquidityFee    = 1;\r\n    uint256 private marketingFee    = 2;\r\n    uint256 private devFee          = 1;\r\n    uint256 private utilityFee      = 0; \r\n    uint256 private burnFee         = 0;\r\n    uint256 public totalFee         = utilityFee + marketingFee + liquidityFee + devFee + burnFee;\r\n    uint256 private feeDenominator  = 100;\r\n\r\n    uint256 sellpercent = 100;\r\n    uint256 buypercent = 100;\r\n    uint256 transferpercent = 100; \r\n\r\n    address private autoLiquidityReceiver;\r\n    address private marketingFeeReceiver;\r\n    address private devFeeReceiver;\r\n    address private utilityFeeReceiver;\r\n    address private burnFeeReceiver;\r\n\r\n    uint256 setRatio = 100;\r\n    uint256 setRatioDenominator = 100;\r\n    \r\n\r\n    IDEXRouter public router;\r\n    InterfaceLP private pairContract;\r\n    address public pair;\r\n    \r\n    bool public TradingOpen = false; \r\n\r\n   \r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply * 60 / 1000; \r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n    \r\n    constructor () {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        WETH = router.WETH();\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        pairContract = InterfaceLP(pair);\r\n       \r\n        \r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        isexemptfromfees[msg.sender] = true;            \r\n        isexemptfrommaxTX[msg.sender] = true;\r\n        isexemptfrommaxTX[pair] = true;\r\n        isexemptfrommaxTX[marketingFeeReceiver] = true;\r\n        isexemptfrommaxTX[address(this)] = true;\r\n        \r\n        \r\n        marketingFeeReceiver = msg.sender;\r\n        autoLiquidityReceiver = msg.sender;\r\n        devFeeReceiver = msg.sender;\r\n        utilityFeeReceiver = msg.sender;\r\n        burnFeeReceiver = msg.sender;\r\n                \r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) {return owner();}\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n       function maxWalletRule(uint256 maxTxPercent) external onlyOwner {\r\n         _maxTxAmount = (_totalSupply * maxTxPercent ) / 1000;\r\n                       \r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n      \r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(!authorizations[sender] && !authorizations[recipient] && recipient != pair && !isexemptfrommaxTX[sender] && !isexemptfrommaxTX[recipient]){\r\n            require(TradingOpen,\"Trading not open yet\");\r\n        \r\n          }\r\n        \r\n               \r\n        if (!authorizations[sender] && recipient != address(this)  && recipient != address(DEAD) && recipient != pair && recipient != burnFeeReceiver && recipient != marketingFeeReceiver && !isexemptfrommaxTX[recipient]){\r\n            uint256 heldTokens = balanceOf(recipient);\r\n            require((heldTokens + amount) <= _maxWalletToken,\"Total Holding is currently limited, you can not buy that much.\");}\r\n\r\n        checkTxLimit(sender, amount);  \r\n\r\n        if(shouldSwapBack()){ swapBack(); }\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 amountReceived = (isexemptfromfees[sender] || isexemptfromfees[recipient]) ? amount : takeFee(sender, amount, recipient);\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isexemptfrommaxTX[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isexemptfromfees[sender];\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount, address recipient) internal returns (uint256) {\r\n        \r\n        uint256 percent = transferpercent;\r\n        if(recipient == pair) {\r\n            percent = sellpercent;\r\n        } else if(sender == pair) {\r\n            percent = buypercent;\r\n        }\r\n\r\n        uint256 feeAmount = amount.mul(totalFee).mul(percent).div(feeDenominator * 100);\r\n        uint256 burnTokens = feeAmount.mul(burnFee).div(totalFee);\r\n        uint256 contractTokens = feeAmount.sub(burnTokens);\r\n        _balances[address(this)] = _balances[address(this)].add(contractTokens);\r\n        _balances[burnFeeReceiver] = _balances[burnFeeReceiver].add(burnTokens);\r\n        emit Transfer(sender, address(this), contractTokens);\r\n        \r\n        \r\n        if(burnTokens > 0){\r\n            _totalSupply = _totalSupply.sub(burnTokens);\r\n            emit Transfer(sender, ZERO, burnTokens);  \r\n        \r\n        }\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n  \r\n     function clearStuckEth() external { \r\n             payable(marketingFeeReceiver).transfer(address(this).balance);\r\n            \r\n    }\r\n\r\n   function removeERCToken(address tokenAddress, uint256 tokens) external returns (bool success) {\r\n            if(tokens == 0){\r\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\r\n        }\r\n        emit ClearToken(tokenAddress, tokens);\r\n        return ERC20(tokenAddress).transfer(autoLiquidityReceiver, tokens);\r\n    }\r\n\r\n           \r\n    function enableTrading() public onlyOwner {\r\n        TradingOpen = true;\r\n        sellpercent = 800;\r\n        buypercent = 500;\r\n        transferpercent = 0; \r\n                                      \r\n    }\r\n\r\n    function reduceFee() public onlyOwner {\r\n        sellpercent = 100;\r\n        buypercent = 100;\r\n        transferpercent = 0; \r\n                                      \r\n    }\r\n                    \r\n    function swapBack() internal swapping {\r\n        uint256 dynamicLiquidityFee = checkRatio(setRatio, setRatioDenominator) ? 0 : liquidityFee;\r\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 totalETHFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n        \r\n        uint256 amountETHLiquidity = amountETH.mul(dynamicLiquidityFee).div(totalETHFee).div(2);\r\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);\r\n        uint256 amountETHutility = amountETH.mul(utilityFee).div(totalETHFee);\r\n        uint256 amountETHdev = amountETH.mul(devFee).div(totalETHFee);\r\n\r\n        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountETHMarketing}(\"\");\r\n        (tmpSuccess,) = payable(devFeeReceiver).call{value: amountETHdev}(\"\");\r\n        (tmpSuccess,) = payable(utilityFeeReceiver).call{value: amountETHutility}(\"\");\r\n        \r\n        tmpSuccess = false;\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountETHLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n         \r\n \r\n    function setNumTokensToSwap(bool _enabled, uint256 _amount) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n        emit set_SwapBack(swapThreshold, swapEnabled);\r\n    }\r\n\r\n     function setExempt(address holder, bool exempt) external onlyOwner {\r\n        isexemptfromfees[holder] = exempt;\r\n        isexemptfrommaxTX[holder] = exempt;\r\n    }\r\n\r\n    function checkRatio(uint256 ratio, uint256 accuracy) public view returns (bool) {\r\n        return showBacking(accuracy) > ratio;\r\n    }\r\n\r\n    function showBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(showSupply());\r\n    }\r\n    \r\n    function showSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n\r\n}",
    "etherscan_verified": true
}