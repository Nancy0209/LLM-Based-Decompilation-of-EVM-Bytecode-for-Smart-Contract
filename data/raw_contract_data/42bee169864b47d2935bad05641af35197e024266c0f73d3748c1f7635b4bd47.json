{
    "address": "0x46062Bb908158b945803Df5E5233c10240269C09",
    "tx_hash": "42bee169864b47d2935bad05641af35197e024266c0f73d3748c1f7635b4bd47",
    "block_number": 18002899,
    "timestamp": 1693101827,
    "gas_used_in_creation": 1760437,
    "creation_bytecode": "60806040526006805460ff191660011790556012600781905560085560056009818155600a9182556019600b819055600c819055600d555f600e55620000459162000342565b6200005490621e848062000359565b600f55620000656009600a62000342565b6200007490621e848062000359565b601055620000856009600a62000342565b6200009490620186a062000359565b601155620000a56009600a62000342565b620000b49062155cc062000359565b6012556014805461ffff60a81b19169055348015620000d1575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060068054610100600160a81b0319166101003302179055620001376009600a62000342565b62000147906305f5e10062000359565b335f908152600160208190526040822092909255600390620001705f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556006546101009004909116835291208054909216179055620001d33390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6200020c6009600a62000342565b6200021c906305f5e10062000359565b60405190815260200160405180910390a362000373565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200028757815f19048211156200026b576200026b62000233565b808516156200027957918102915b93841c93908002906200024c565b509250929050565b5f826200029f575060016200033c565b81620002ad57505f6200033c565b8160018114620002c65760028114620002d157620002f1565b60019150506200033c565b60ff841115620002e557620002e562000233565b50506001821b6200033c565b5060208310610133831016604e8410600b841016171562000316575081810a6200033c565b62000322838362000247565b805f190482111562000338576200033862000233565b0290505b92915050565b5f6200035260ff8416836200028f565b9392505050565b80820281158282048414176200033c576200033c62000233565b61180380620003815f395ff3fe608060405260043610610113575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb146102f5578063bf474bed14610314578063c876d0b914610329578063c9567bf914610342578063dd62ed3e14610356575f80fd5b8063751039fc146102605780637d1db4a5146102745780638da5cb5b146102895780638f9a55c0146102af57806395d89b41146102c4575f80fd5b806323b872dd116100e357806323b872dd146101c8578063313ce567146101e757806351bc3c851461020257806370a0823114610218578063715018a61461024c575f80fd5b806306fdde031461011e578063095ea7b3146101625780630faee56f1461019157806318160ddd146101b4575f80fd5b3661011a57005b5f80fd5b348015610129575f80fd5b5060408051808201909152600a815269121153951052481093d560b21b60208201525b60405161015991906113f6565b60405180910390f35b34801561016d575f80fd5b5061018161017c366004611458565b61039a565b6040519015158152602001610159565b34801561019c575f80fd5b506101a660125481565b604051908152602001610159565b3480156101bf575f80fd5b506101a66103b0565b3480156101d3575f80fd5b506101816101e2366004611482565b6103d0565b3480156101f2575f80fd5b5060405160098152602001610159565b34801561020d575f80fd5b50610216610437565b005b348015610223575f80fd5b506101a66102323660046114c0565b6001600160a01b03165f9081526001602052604090205490565b348015610257575f80fd5b5061021661048d565b34801561026b575f80fd5b50610216610507565b34801561027f575f80fd5b506101a6600f5481565b348015610294575f80fd5b505f546040516001600160a01b039091168152602001610159565b3480156102ba575f80fd5b506101a660105481565b3480156102cf575f80fd5b506040805180820190915260098152681211539510525093d560ba1b602082015261014c565b348015610300575f80fd5b5061018161030f366004611458565b6105c2565b34801561031f575f80fd5b506101a660115481565b348015610334575f80fd5b506006546101819060ff1681565b34801561034d575f80fd5b506102166105ce565b348015610361575f80fd5b506101a66103703660046114db565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103a6338484610977565b5060015b92915050565b5f6103bd6009600a611606565b6103cb906305f5e100611614565b905090565b5f6103dc848484610a9a565b61042d8433610428856040518060600160405280602881526020016117a6602891396001600160a01b038a165f908152600260209081526040808320338452909152902054919061106e565b610977565b5060019392505050565b60065461010090046001600160a01b0316336001600160a01b03161461045b575f80fd5b305f90815260016020526040902054801561047957610479816110a6565b4780156104895761048981611216565b5050565b5f546001600160a01b031633146104bf5760405162461bcd60e51b81526004016104b69061162b565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105305760405162461bcd60e51b81526004016104b69061162b565b61053c6009600a611606565b61054a906305f5e100611614565b600f556105596009600a611606565b610567906305f5e100611614565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105a16009600a611606565b6105af906305f5e100611614565b60405190815260200160405180910390a1565b5f6103a6338484610a9a565b5f546001600160a01b031633146105f75760405162461bcd60e51b81526004016104b69061162b565b601454600160a01b900460ff16156106515760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104b6565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561069a90309061068c6009600a611606565b610428906305f5e100611614565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ea573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061070e9190611660565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561076d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107919190611660565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156107db573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107ff9190611660565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d7194730610846816001600160a01b03165f9081526001602052604090205490565b5f806108595f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156108bf573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906108e4919061167b565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610939573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061095d91906116a6565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b0383166109d95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104b6565b6001600160a01b038216610a3a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104b6565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610afe5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104b6565b6001600160a01b038216610b605760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104b6565b5f8111610bc15760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104b6565b5f80546001600160a01b03858116911614801590610bec57505f546001600160a01b03848116911614155b15610f3157610c1d6064610c17600b54600e5411610c0c57600754610c10565b6009545b8590611251565b906112d6565b60065490915060ff1615610d03576013546001600160a01b03848116911614801590610c5757506014546001600160a01b03848116911614155b15610d0357325f908152600560205260409020544311610cf15760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a4016104b6565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610d2e57506013546001600160a01b03848116911614155b8015610d5257506001600160a01b0383165f9081526003602052604090205460ff16155b15610e3857600f54821115610da95760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104b6565b60105482610dcb856001600160a01b03165f9081526001602052604090205490565b610dd591906116c5565b1115610e235760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104b6565b600e8054905f610e32836116d8565b91905055505b6014546001600160a01b038481169116148015610e5e57506001600160a01b0384163014155b15610e8b57610e886064610c17600c54600e5411610e7e57600854610c10565b600a548590611251565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610ec157506014546001600160a01b038581169116145b8015610ed65750601454600160b01b900460ff165b8015610ee3575060115481115b8015610ef25750600d54600e54115b15610f2f57610f14610f0f84610f0a84601254611317565b611317565b6110a6565b4766b1a2bc2ec50000811115610f2d57610f2d47611216565b505b505b8015610fa957305f90815260016020526040902054610f50908261132b565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fa09085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610fcb9083611389565b6001600160a01b0385165f9081526001602052604090205561100e610ff08383611389565b6001600160a01b0385165f908152600160205260409020549061132b565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110578585611389565b60405190815260200160405180910390a350505050565b5f81848411156110915760405162461bcd60e51b81526004016104b691906113f6565b505f61109d84866116f0565b95945050505050565b6014805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f815181106110ec576110ec611703565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611143573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111679190611660565b8160018151811061117a5761117a611703565b6001600160a01b0392831660209182029290920101526013546111a09130911684610977565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906111d89085905f90869030904290600401611717565b5f604051808303815f87803b1580156111ef575f80fd5b505af1158015611201573d5f803e3d5ffd5b50506014805460ff60a81b1916905550505050565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f19350505050158015610489573d5f803e3d5ffd5b5f825f0361126057505f6103aa565b5f61126b8385611614565b9050826112788583611786565b146112cf5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104b6565b9392505050565b5f6112cf83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506113ca565b5f81831161132557826112cf565b50919050565b5f8061133783856116c5565b9050838110156112cf5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104b6565b5f6112cf83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061106e565b5f81836113ea5760405162461bcd60e51b81526004016104b691906113f6565b505f61109d8486611786565b5f6020808352835180828501525f5b8181101561142157858101830151858201604001528201611405565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611455575f80fd5b50565b5f8060408385031215611469575f80fd5b823561147481611441565b946020939093013593505050565b5f805f60608486031215611494575f80fd5b833561149f81611441565b925060208401356114af81611441565b929592945050506040919091013590565b5f602082840312156114d0575f80fd5b81356112cf81611441565b5f80604083850312156114ec575f80fd5b82356114f781611441565b9150602083013561150781611441565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561156057815f190482111561154657611546611512565b8085161561155357918102915b93841c939080029061152b565b509250929050565b5f82611576575060016103aa565b8161158257505f6103aa565b816001811461159857600281146115a2576115be565b60019150506103aa565b60ff8411156115b3576115b3611512565b50506001821b6103aa565b5060208310610133831016604e8410600b84101617156115e1575081810a6103aa565b6115eb8383611526565b805f19048211156115fe576115fe611512565b029392505050565b5f6112cf60ff841683611568565b80820281158282048414176103aa576103aa611512565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f60208284031215611670575f80fd5b81516112cf81611441565b5f805f6060848603121561168d575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156116b6575f80fd5b815180151581146112cf575f80fd5b808201808211156103aa576103aa611512565b5f600182016116e9576116e9611512565b5060010190565b818103818111156103aa576103aa611512565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156117655784516001600160a01b031683529383019391830191600101611740565b50506001600160a01b03969096166060850152505050608001529392505050565b5f826117a057634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220cc381826d255363f5e30ba1920e5419c1d59d3f606f213525805f174eddcf2a564736f6c63430008140033",
    "runtime_bytecode": "608060405260043610610113575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb146102f5578063bf474bed14610314578063c876d0b914610329578063c9567bf914610342578063dd62ed3e14610356575f80fd5b8063751039fc146102605780637d1db4a5146102745780638da5cb5b146102895780638f9a55c0146102af57806395d89b41146102c4575f80fd5b806323b872dd116100e357806323b872dd146101c8578063313ce567146101e757806351bc3c851461020257806370a0823114610218578063715018a61461024c575f80fd5b806306fdde031461011e578063095ea7b3146101625780630faee56f1461019157806318160ddd146101b4575f80fd5b3661011a57005b5f80fd5b348015610129575f80fd5b5060408051808201909152600a815269121153951052481093d560b21b60208201525b60405161015991906113f6565b60405180910390f35b34801561016d575f80fd5b5061018161017c366004611458565b61039a565b6040519015158152602001610159565b34801561019c575f80fd5b506101a660125481565b604051908152602001610159565b3480156101bf575f80fd5b506101a66103b0565b3480156101d3575f80fd5b506101816101e2366004611482565b6103d0565b3480156101f2575f80fd5b5060405160098152602001610159565b34801561020d575f80fd5b50610216610437565b005b348015610223575f80fd5b506101a66102323660046114c0565b6001600160a01b03165f9081526001602052604090205490565b348015610257575f80fd5b5061021661048d565b34801561026b575f80fd5b50610216610507565b34801561027f575f80fd5b506101a6600f5481565b348015610294575f80fd5b505f546040516001600160a01b039091168152602001610159565b3480156102ba575f80fd5b506101a660105481565b3480156102cf575f80fd5b506040805180820190915260098152681211539510525093d560ba1b602082015261014c565b348015610300575f80fd5b5061018161030f366004611458565b6105c2565b34801561031f575f80fd5b506101a660115481565b348015610334575f80fd5b506006546101819060ff1681565b34801561034d575f80fd5b506102166105ce565b348015610361575f80fd5b506101a66103703660046114db565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103a6338484610977565b5060015b92915050565b5f6103bd6009600a611606565b6103cb906305f5e100611614565b905090565b5f6103dc848484610a9a565b61042d8433610428856040518060600160405280602881526020016117a6602891396001600160a01b038a165f908152600260209081526040808320338452909152902054919061106e565b610977565b5060019392505050565b60065461010090046001600160a01b0316336001600160a01b03161461045b575f80fd5b305f90815260016020526040902054801561047957610479816110a6565b4780156104895761048981611216565b5050565b5f546001600160a01b031633146104bf5760405162461bcd60e51b81526004016104b69061162b565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105305760405162461bcd60e51b81526004016104b69061162b565b61053c6009600a611606565b61054a906305f5e100611614565b600f556105596009600a611606565b610567906305f5e100611614565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105a16009600a611606565b6105af906305f5e100611614565b60405190815260200160405180910390a1565b5f6103a6338484610a9a565b5f546001600160a01b031633146105f75760405162461bcd60e51b81526004016104b69061162b565b601454600160a01b900460ff16156106515760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104b6565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561069a90309061068c6009600a611606565b610428906305f5e100611614565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ea573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061070e9190611660565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561076d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107919190611660565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156107db573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107ff9190611660565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d7194730610846816001600160a01b03165f9081526001602052604090205490565b5f806108595f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156108bf573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906108e4919061167b565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610939573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061095d91906116a6565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b0383166109d95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104b6565b6001600160a01b038216610a3a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104b6565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610afe5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104b6565b6001600160a01b038216610b605760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104b6565b5f8111610bc15760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104b6565b5f80546001600160a01b03858116911614801590610bec57505f546001600160a01b03848116911614155b15610f3157610c1d6064610c17600b54600e5411610c0c57600754610c10565b6009545b8590611251565b906112d6565b60065490915060ff1615610d03576013546001600160a01b03848116911614801590610c5757506014546001600160a01b03848116911614155b15610d0357325f908152600560205260409020544311610cf15760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a4016104b6565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610d2e57506013546001600160a01b03848116911614155b8015610d5257506001600160a01b0383165f9081526003602052604090205460ff16155b15610e3857600f54821115610da95760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104b6565b60105482610dcb856001600160a01b03165f9081526001602052604090205490565b610dd591906116c5565b1115610e235760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104b6565b600e8054905f610e32836116d8565b91905055505b6014546001600160a01b038481169116148015610e5e57506001600160a01b0384163014155b15610e8b57610e886064610c17600c54600e5411610e7e57600854610c10565b600a548590611251565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610ec157506014546001600160a01b038581169116145b8015610ed65750601454600160b01b900460ff165b8015610ee3575060115481115b8015610ef25750600d54600e54115b15610f2f57610f14610f0f84610f0a84601254611317565b611317565b6110a6565b4766b1a2bc2ec50000811115610f2d57610f2d47611216565b505b505b8015610fa957305f90815260016020526040902054610f50908261132b565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fa09085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610fcb9083611389565b6001600160a01b0385165f9081526001602052604090205561100e610ff08383611389565b6001600160a01b0385165f908152600160205260409020549061132b565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110578585611389565b60405190815260200160405180910390a350505050565b5f81848411156110915760405162461bcd60e51b81526004016104b691906113f6565b505f61109d84866116f0565b95945050505050565b6014805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f815181106110ec576110ec611703565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611143573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111679190611660565b8160018151811061117a5761117a611703565b6001600160a01b0392831660209182029290920101526013546111a09130911684610977565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906111d89085905f90869030904290600401611717565b5f604051808303815f87803b1580156111ef575f80fd5b505af1158015611201573d5f803e3d5ffd5b50506014805460ff60a81b1916905550505050565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f19350505050158015610489573d5f803e3d5ffd5b5f825f0361126057505f6103aa565b5f61126b8385611614565b9050826112788583611786565b146112cf5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104b6565b9392505050565b5f6112cf83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506113ca565b5f81831161132557826112cf565b50919050565b5f8061133783856116c5565b9050838110156112cf5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104b6565b5f6112cf83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061106e565b5f81836113ea5760405162461bcd60e51b81526004016104b691906113f6565b505f61109d8486611786565b5f6020808352835180828501525f5b8181101561142157858101830151858201604001528201611405565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611455575f80fd5b50565b5f8060408385031215611469575f80fd5b823561147481611441565b946020939093013593505050565b5f805f60608486031215611494575f80fd5b833561149f81611441565b925060208401356114af81611441565b929592945050506040919091013590565b5f602082840312156114d0575f80fd5b81356112cf81611441565b5f80604083850312156114ec575f80fd5b82356114f781611441565b9150602083013561150781611441565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561156057815f190482111561154657611546611512565b8085161561155357918102915b93841c939080029061152b565b509250929050565b5f82611576575060016103aa565b8161158257505f6103aa565b816001811461159857600281146115a2576115be565b60019150506103aa565b60ff8411156115b3576115b3611512565b50506001821b6103aa565b5060208310610133831016604e8410600b84101617156115e1575081810a6103aa565b6115eb8383611526565b805f19048211156115fe576115fe611512565b029392505050565b5f6112cf60ff841683611568565b80820281158282048414176103aa576103aa611512565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f60208284031215611670575f80fd5b81516112cf81611441565b5f805f6060848603121561168d575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156116b6575f80fd5b815180151581146112cf575f80fd5b808201808211156103aa576103aa611512565b5f600182016116e9576116e9611512565b5060010190565b818103818111156103aa576103aa611512565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156117655784516001600160a01b031683529383019391830191600101611740565b50506001600160a01b03969096166060850152505050608001529392505050565b5f826117a057634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220cc381826d255363f5e30ba1920e5419c1d59d3f606f213525805f174eddcf2a564736f6c63430008140033",
    "contract_name": "HENTAIBOT",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HentaiBot.sol\": {\r\n      \"content\": \"/**\\n\\nTelegram: https://t.me/HentaiBotTG\\n\\nTwitter:  https://twitter.com/HentaiBotETH\\n\\nWebsite:  https://hentaibot.tech\\n\\nBot:      https://t.me/Hentai_Super_Bot\\n\\n*/\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ncontract HENTAIBOT is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private bots;\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\n    bool public transferDelayEnabled = true;\\n    address payable private _taxWallet;\\n\\n    uint256 private _initialBuyTax = 18;\\n    uint256 private _initialSellTax = 18;\\n    uint256 private _finalBuyTax = 5;\\n    uint256 private _finalSellTax = 5;\\n    uint256 private _reduceBuyTaxAt = 25;\\n    uint256 private _reduceSellTaxAt = 25;\\n    uint256 private _preventSwapBefore = 25;\\n    uint256 private _buyCount = 0;\\n\\n    uint8 private constant _decimals = 9;\\n    uint256 private constant _tTotal = 100000000 * 10 ** _decimals;\\n    string private constant _name = unicode\\\"HENTAI BOT\\\";\\n    string private constant _symbol = unicode\\\"HENTAIBOT\\\";\\n    uint256 public _maxTxAmount = 2000000 * 10 ** _decimals;\\n    uint256 public _maxWalletSize = 2000000 * 10 ** _decimals;\\n    uint256 public _taxSwapThreshold = 100000 * 10 ** _decimals;\\n    uint256 public _maxTaxSwap = 1400000 * 10 ** _decimals;\\n\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address private uniswapV2Pair;\\n    bool private tradingOpen;\\n    bool private inSwap = false;\\n    bool private swapEnabled = false;\\n\\n    event MaxTxAmountUpdated(uint _maxTxAmount);\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor() {\\n        _taxWallet = payable(_msgSender());\\n        _balances[_msgSender()] = _tTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_taxWallet] = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        uint256 taxAmount = 0;\\n        if (from != owner() && to != owner()) {\\n            taxAmount = amount\\n                .mul(\\n                    (_buyCount > _reduceBuyTaxAt)\\n                        ? _finalBuyTax\\n                        : _initialBuyTax\\n                )\\n                .div(100);\\n\\n            if (transferDelayEnabled) {\\n                if (\\n                    to != address(uniswapV2Router) &&\\n                    to != address(uniswapV2Pair)\\n                ) {\\n                    require(\\n                        _holderLastTransferTimestamp[tx.origin] < block.number,\\n                        \\\"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\\\"\\n                    );\\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\\n                }\\n            }\\n\\n            if (\\n                from == uniswapV2Pair &&\\n                to != address(uniswapV2Router) &&\\n                !_isExcludedFromFee[to]\\n            ) {\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\n                require(\\n                    balanceOf(to) + amount <= _maxWalletSize,\\n                    \\\"Exceeds the maxWalletSize.\\\"\\n                );\\n                _buyCount++;\\n            }\\n\\n            if (to == uniswapV2Pair && from != address(this)) {\\n                taxAmount = amount\\n                    .mul(\\n                        (_buyCount > _reduceSellTaxAt)\\n                            ? _finalSellTax\\n                            : _initialSellTax\\n                    )\\n                    .div(100);\\n            }\\n\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            if (\\n                !inSwap &&\\n                to == uniswapV2Pair &&\\n                swapEnabled &&\\n                contractTokenBalance > _taxSwapThreshold &&\\n                _buyCount > _preventSwapBefore\\n            ) {\\n                swapTokensForEth(\\n                    min(amount, min(contractTokenBalance, _maxTaxSwap))\\n                );\\n                uint256 contractETHBalance = address(this).balance;\\n                if (contractETHBalance > 50000000000000000) {\\n                    sendETHToFee(address(this).balance);\\n                }\\n            }\\n        }\\n\\n        if (taxAmount > 0) {\\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\\n            emit Transfer(from, address(this), taxAmount);\\n        }\\n        _balances[from] = _balances[from].sub(amount);\\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\\n        emit Transfer(from, to, amount.sub(taxAmount));\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return (a > b) ? b : a;\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function removeLimits() external onlyOwner {\\n        _maxTxAmount = _tTotal;\\n        _maxWalletSize = _tTotal;\\n        transferDelayEnabled = false;\\n        emit MaxTxAmountUpdated(_tTotal);\\n    }\\n\\n    function sendETHToFee(uint256 amount) private {\\n        _taxWallet.transfer(amount);\\n    }\\n\\n    function openTrading() external onlyOwner {\\n        require(!tradingOpen, \\\"trading is already open\\\");\\n        uniswapV2Router = IUniswapV2Router02(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\\n            address(this),\\n            uniswapV2Router.WETH()\\n        );\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\\n            address(this),\\n            balanceOf(address(this)),\\n            0,\\n            0,\\n            owner(),\\n            block.timestamp\\n        );\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        swapEnabled = true;\\n        tradingOpen = true;\\n    }\\n\\n    receive() external payable {}\\n\\n    function manualSwap() external {\\n        require(_msgSender() == _taxWallet);\\n        uint256 tokenBalance = balanceOf(address(this));\\n        if (tokenBalance > 0) {\\n            swapTokensForEth(tokenBalance);\\n        }\\n        uint256 ethBalance = address(this).balance;\\n        if (ethBalance > 0) {\\n            sendETHToFee(ethBalance);\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
    "etherscan_verified": true
}