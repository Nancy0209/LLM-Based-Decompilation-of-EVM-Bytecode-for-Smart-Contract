{
    "address": "0x16E04d776e1B647BE948C6D2f51Bca26401DC011",
    "tx_hash": "374f707f0ff16ba95cf3fbcd312b9e8a18022eff55d46c2b648f19dd33a2b78d",
    "block_number": 18004853,
    "timestamp": 1693125407,
    "gas_used_in_creation": 3884319,
    "creation_bytecode": "6080604052600980546001600160a01b0319908116737a250d5630b4cf539739df2c5dacb4c659f2488d17909155600a8054909116736c7094f44655cc1860c4ed7ea239934720a386f21790556001600b553480156200005e57600080fd5b50604080518082018252600880825267424142595045504560c01b60208084018290528451808601909552918452908301529060126004620000a18482620006a3565b506005620000b08382620006a3565b506003805460ff191660ff9290921691909117905550620000da9050620000d43390565b6200030f565b600960009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200012e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200015491906200076f565b600780546001600160a01b0319166001600160a01b039283161790556009546040805163c45a015560e01b81529051919092169163c45a01559160048083019260209291908290030181865afa158015620001b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d991906200076f565b6007546040516364e329cb60e11b81526001600160a01b03918216600482015230602482015291169063c9c65396906044016020604051808303816000875af11580156200022b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200025191906200076f565b600860006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200029f6103e86b0d92289838d21a99680000006200036160201b620007431790919060201c565b600d55620002af30600162000378565b600a54620002c8906001600160a01b0316600162000378565b620002d533600162000378565b620002ed336b0d92289838d21a9968000000620003ad565b600954620003099030906001600160a01b031660001962000474565b620007e6565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006200036f8284620007a1565b90505b92915050565b620003826200059c565b6001600160a01b03919091166000908152600e60205260409020805460ff1916911515919091179055565b6001600160a01b038216620004095760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b80600260008282546200041d9190620007c4565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038316620004d85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162000400565b6001600160a01b0382166200053b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162000400565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6006546001600160a01b03163314620005f85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000400565b565b505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200062a57607f821691505b6020821081036200064b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620005fa57600081815260208120601f850160051c810160208610156200067a5750805b601f850160051c820191505b818110156200069b5782815560010162000686565b505050505050565b81516001600160401b03811115620006bf57620006bf620005ff565b620006d781620006d0845462000615565b8462000651565b602080601f8311600181146200070f5760008415620006f65750858301515b600019600386901b1c1916600185901b1785556200069b565b600085815260208120601f198616915b8281101562000740578886015182559484019460019091019084016200071f565b50858210156200075f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200078257600080fd5b81516001600160a01b03811681146200079a57600080fd5b9392505050565b600082620007bf57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156200037257634e487b7160e01b600052601160045260246000fd5b61111b80620007f66000396000f3fe6080604052600436106101395760003560e01c806370a08231116100ab578063a457c2d71161006f578063a457c2d71461036f578063a9059cbb1461038f578063c0246668146103af578063dd62ed3e146103cf578063ddca3f43146103ef578063f2fde38b1461040557600080fd5b806370a08231146102d0578063715018a6146103065780638091f3bf1461031b5780638da5cb5b1461033c57806395d89b411461035a57600080fd5b8063313ce567116100fd578063313ce567146101f657806339509351146102185780633fc8cef3146102385780633ff42b92146102705780634f360148146102905780636b90694c146102b057600080fd5b806301339c211461014557806306fdde031461015c578063095ea7b31461018757806318160ddd146101b757806323b872dd146101d657600080fd5b3661014057005b600080fd5b34801561015157600080fd5b5061015a610425565b005b34801561016857600080fd5b506101716104ce565b60405161017e9190610e55565b60405180910390f35b34801561019357600080fd5b506101a76101a2366004610ebf565b610560565b604051901515815260200161017e565b3480156101c357600080fd5b506002545b60405190815260200161017e565b3480156101e257600080fd5b506101a76101f1366004610ee9565b61057a565b34801561020257600080fd5b5060035460405160ff909116815260200161017e565b34801561022457600080fd5b506101a7610233366004610ebf565b61059e565b34801561024457600080fd5b50600754610258906001600160a01b031681565b6040516001600160a01b03909116815260200161017e565b34801561027c57600080fd5b50600a54610258906001600160a01b031681565b34801561029c57600080fd5b50600854610258906001600160a01b031681565b3480156102bc57600080fd5b50600954610258906001600160a01b031681565b3480156102dc57600080fd5b506101c86102eb366004610f25565b6001600160a01b031660009081526020819052604090205490565b34801561031257600080fd5b5061015a6105c0565b34801561032757600080fd5b50600a546101a790600160a01b900460ff1681565b34801561034857600080fd5b506006546001600160a01b0316610258565b34801561036657600080fd5b506101716105d4565b34801561037b57600080fd5b506101a761038a366004610ebf565b6105e3565b34801561039b57600080fd5b506101a76103aa366004610ebf565b61065e565b3480156103bb57600080fd5b5061015a6103ca366004610f40565b61066c565b3480156103db57600080fd5b506101c86103ea366004610f7c565b61069f565b3480156103fb57600080fd5b506101c8600b5481565b34801561041157600080fd5b5061015a610420366004610f25565b6106ca565b61042d610756565b600a54600160a01b900460ff161561047f5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481b185d5b98da195960821b60448201526064015b60405180910390fd5b600a805460ff60a01b1916600160a01b1790556040517feca0dfbda743d141662328d4d48393e344b2c60df0430297221df823f2926dba906104c49043815260200190565b60405180910390a1565b6060600480546104dd90610faf565b80601f016020809104026020016040519081016040528092919081815260200182805461050990610faf565b80156105565780601f1061052b57610100808354040283529160200191610556565b820191906000526020600020905b81548152906001019060200180831161053957829003601f168201915b5050505050905090565b60003361056e8185856107b0565b60019150505b92915050565b6000336105888582856108d4565b61059385858561094e565b506001949350505050565b60003361056e8185856105b1838361069f565b6105bb9190610fff565b6107b0565b6105c8610756565b6105d26000610b58565b565b6060600580546104dd90610faf565b600033816105f1828661069f565b9050838110156106515760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610476565b61059382868684036107b0565b60003361056e81858561094e565b610674610756565b6001600160a01b03919091166000908152600e60205260409020805460ff1916911515919091179055565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6106d2610756565b6001600160a01b0381166107375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610476565b61074081610b58565b50565b600061074f8284611012565b9392505050565b6006546001600160a01b031633146105d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610476565b6001600160a01b0383166108125760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610476565b6001600160a01b0382166108735760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610476565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006108e0848461069f565b90506000198114610948578181101561093b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610476565b61094884848484036107b0565b50505050565b6001600160a01b03831661096157600080fd5b6001600160a01b03821661097457600080fd5b8060000361098157600080fd5b600a54600160a01b900460ff16806109b157506001600160a01b0383166000908152600e602052604090205460ff165b806109d457506001600160a01b0382166000908152600e602052604090205460ff165b6109dd57600080fd5b6001600160a01b0383166000908152600e602052604090205460ff16158015610a1f57506001600160a01b0382166000908152600e602052604090205460ff16155b15610b48576008546001600160a01b038381169116148015610a445750600c5460ff16155b8015610a615750600d543060009081526020819052604090205410155b15610ab157600c805460ff19166001179055610aa6610a95306001600160a01b031660009081526020819052604090205490565b600a546001600160a01b0316610baa565b600c805460ff191690555b600c5460ff16610b48576008546000906001600160a01b0385811691161480610ae757506008546001600160a01b038481169116145b610af2576000610af6565b600b545b90506000610b0f6064610b098585610c99565b90610743565b90508015610b2e57610b218382610ca5565b9250610b2e853083610cb1565b6001831115610b4557610b42836001610ca5565b92505b50505b610b53838383610cb1565b505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b81600003610bb6575050565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110610beb57610beb611034565b6001600160a01b039283166020918202929092010152600754825191169082906001908110610c1c57610c1c611034565b6001600160a01b0392831660209182029290920101526009546040516338ed173960e01b81529116906338ed173990610c6290869060009086908890429060040161104a565b600060405180830381600087803b158015610c7c57600080fd5b505af1158015610c90573d6000803e3d6000fd5b50505050505050565b600061074f82846110bb565b600061074f82846110d2565b6001600160a01b038316610d155760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610476565b6001600160a01b038216610d775760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610476565b6001600160a01b03831660009081526020819052604090205481811015610def5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610476565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610948565b600060208083528351808285015260005b81811015610e8257858101830151858201604001528201610e66565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610eba57600080fd5b919050565b60008060408385031215610ed257600080fd5b610edb83610ea3565b946020939093013593505050565b600080600060608486031215610efe57600080fd5b610f0784610ea3565b9250610f1560208501610ea3565b9150604084013590509250925092565b600060208284031215610f3757600080fd5b61074f82610ea3565b60008060408385031215610f5357600080fd5b610f5c83610ea3565b915060208301358015158114610f7157600080fd5b809150509250929050565b60008060408385031215610f8f57600080fd5b610f9883610ea3565b9150610fa660208401610ea3565b90509250929050565b600181811c90821680610fc357607f821691505b602082108103610fe357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561057457610574610fe9565b60008261102f57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561109a5784516001600160a01b031683529383019391830191600101611075565b50506001600160a01b03969096166060850152505050608001529392505050565b808202811582820484141761057457610574610fe9565b8181038181111561057457610574610fe956fea2646970667358221220a8bb9b8588b9f905f5580fdf0a37e090f89659856f9076275b0b8e254895d7d064736f6c63430008120033",
    "runtime_bytecode": "6080604052600436106101395760003560e01c806370a08231116100ab578063a457c2d71161006f578063a457c2d71461036f578063a9059cbb1461038f578063c0246668146103af578063dd62ed3e146103cf578063ddca3f43146103ef578063f2fde38b1461040557600080fd5b806370a08231146102d0578063715018a6146103065780638091f3bf1461031b5780638da5cb5b1461033c57806395d89b411461035a57600080fd5b8063313ce567116100fd578063313ce567146101f657806339509351146102185780633fc8cef3146102385780633ff42b92146102705780634f360148146102905780636b90694c146102b057600080fd5b806301339c211461014557806306fdde031461015c578063095ea7b31461018757806318160ddd146101b757806323b872dd146101d657600080fd5b3661014057005b600080fd5b34801561015157600080fd5b5061015a610425565b005b34801561016857600080fd5b506101716104ce565b60405161017e9190610e55565b60405180910390f35b34801561019357600080fd5b506101a76101a2366004610ebf565b610560565b604051901515815260200161017e565b3480156101c357600080fd5b506002545b60405190815260200161017e565b3480156101e257600080fd5b506101a76101f1366004610ee9565b61057a565b34801561020257600080fd5b5060035460405160ff909116815260200161017e565b34801561022457600080fd5b506101a7610233366004610ebf565b61059e565b34801561024457600080fd5b50600754610258906001600160a01b031681565b6040516001600160a01b03909116815260200161017e565b34801561027c57600080fd5b50600a54610258906001600160a01b031681565b34801561029c57600080fd5b50600854610258906001600160a01b031681565b3480156102bc57600080fd5b50600954610258906001600160a01b031681565b3480156102dc57600080fd5b506101c86102eb366004610f25565b6001600160a01b031660009081526020819052604090205490565b34801561031257600080fd5b5061015a6105c0565b34801561032757600080fd5b50600a546101a790600160a01b900460ff1681565b34801561034857600080fd5b506006546001600160a01b0316610258565b34801561036657600080fd5b506101716105d4565b34801561037b57600080fd5b506101a761038a366004610ebf565b6105e3565b34801561039b57600080fd5b506101a76103aa366004610ebf565b61065e565b3480156103bb57600080fd5b5061015a6103ca366004610f40565b61066c565b3480156103db57600080fd5b506101c86103ea366004610f7c565b61069f565b3480156103fb57600080fd5b506101c8600b5481565b34801561041157600080fd5b5061015a610420366004610f25565b6106ca565b61042d610756565b600a54600160a01b900460ff161561047f5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481b185d5b98da195960821b60448201526064015b60405180910390fd5b600a805460ff60a01b1916600160a01b1790556040517feca0dfbda743d141662328d4d48393e344b2c60df0430297221df823f2926dba906104c49043815260200190565b60405180910390a1565b6060600480546104dd90610faf565b80601f016020809104026020016040519081016040528092919081815260200182805461050990610faf565b80156105565780601f1061052b57610100808354040283529160200191610556565b820191906000526020600020905b81548152906001019060200180831161053957829003601f168201915b5050505050905090565b60003361056e8185856107b0565b60019150505b92915050565b6000336105888582856108d4565b61059385858561094e565b506001949350505050565b60003361056e8185856105b1838361069f565b6105bb9190610fff565b6107b0565b6105c8610756565b6105d26000610b58565b565b6060600580546104dd90610faf565b600033816105f1828661069f565b9050838110156106515760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610476565b61059382868684036107b0565b60003361056e81858561094e565b610674610756565b6001600160a01b03919091166000908152600e60205260409020805460ff1916911515919091179055565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6106d2610756565b6001600160a01b0381166107375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610476565b61074081610b58565b50565b600061074f8284611012565b9392505050565b6006546001600160a01b031633146105d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610476565b6001600160a01b0383166108125760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610476565b6001600160a01b0382166108735760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610476565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006108e0848461069f565b90506000198114610948578181101561093b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610476565b61094884848484036107b0565b50505050565b6001600160a01b03831661096157600080fd5b6001600160a01b03821661097457600080fd5b8060000361098157600080fd5b600a54600160a01b900460ff16806109b157506001600160a01b0383166000908152600e602052604090205460ff165b806109d457506001600160a01b0382166000908152600e602052604090205460ff165b6109dd57600080fd5b6001600160a01b0383166000908152600e602052604090205460ff16158015610a1f57506001600160a01b0382166000908152600e602052604090205460ff16155b15610b48576008546001600160a01b038381169116148015610a445750600c5460ff16155b8015610a615750600d543060009081526020819052604090205410155b15610ab157600c805460ff19166001179055610aa6610a95306001600160a01b031660009081526020819052604090205490565b600a546001600160a01b0316610baa565b600c805460ff191690555b600c5460ff16610b48576008546000906001600160a01b0385811691161480610ae757506008546001600160a01b038481169116145b610af2576000610af6565b600b545b90506000610b0f6064610b098585610c99565b90610743565b90508015610b2e57610b218382610ca5565b9250610b2e853083610cb1565b6001831115610b4557610b42836001610ca5565b92505b50505b610b53838383610cb1565b505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b81600003610bb6575050565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110610beb57610beb611034565b6001600160a01b039283166020918202929092010152600754825191169082906001908110610c1c57610c1c611034565b6001600160a01b0392831660209182029290920101526009546040516338ed173960e01b81529116906338ed173990610c6290869060009086908890429060040161104a565b600060405180830381600087803b158015610c7c57600080fd5b505af1158015610c90573d6000803e3d6000fd5b50505050505050565b600061074f82846110bb565b600061074f82846110d2565b6001600160a01b038316610d155760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610476565b6001600160a01b038216610d775760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610476565b6001600160a01b03831660009081526020819052604090205481811015610def5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610476565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610948565b600060208083528351808285015260005b81811015610e8257858101830151858201604001528201610e66565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610eba57600080fd5b919050565b60008060408385031215610ed257600080fd5b610edb83610ea3565b946020939093013593505050565b600080600060608486031215610efe57600080fd5b610f0784610ea3565b9250610f1560208501610ea3565b9150604084013590509250925092565b600060208284031215610f3757600080fd5b61074f82610ea3565b60008060408385031215610f5357600080fd5b610f5c83610ea3565b915060208301358015158114610f7157600080fd5b809150509250929050565b60008060408385031215610f8f57600080fd5b610f9883610ea3565b9150610fa660208401610ea3565b90509250929050565b600181811c90821680610fc357607f821691505b602082108103610fe357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561057457610574610fe9565b60008261102f57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561109a5784516001600160a01b031683529383019391830191600101611075565b50506001600160a01b03969096166060850152505050608001529392505050565b808202811582820484141761057457610574610fe9565b8181038181111561057457610574610fe956fea2646970667358221220a8bb9b8588b9f905f5580fdf0a37e090f89659856f9076275b0b8e254895d7d064736f6c63430008120033",
    "contract_name": "BABYPEPE",
    "compiler_version": "v0.8.18+commit.87f61d96",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Launched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainpair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n// https://twitter.com/BabyPepe_er20\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { uint256 c = a + b; if (c < a) return (false, 0); return (true, c); } }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b > a) return (false, 0); return (true, a - b); } }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (a == 0) return (true, 0); uint256 c = a * b; if (c / a != b) return (false, 0); return (true, c); } }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b == 0) return (false, 0); return (true, a / b); } }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b == 0) return (false, 0); return (true, a % b); } }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) { return a + b; }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { return a - b; }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) { return a * b; }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) { return a / b; }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) { return a % b; }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { unchecked { require(b <= a, errorMessage); return a - b; } }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { unchecked { require(b > 0, errorMessage); return a / b; } }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { unchecked { require(b > 0, errorMessage); return a % b; } }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external view returns (address);\r\n    function WETH() external view returns (address);\r\n    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) { return msg.sender; }\r\n    function _msgData() internal view virtual returns (bytes calldata) { return msg.data; }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() { _transferOwnership(_msgSender()); }\r\n    modifier onlyOwner() { _checkOwner(); _; }\r\n    function owner() public view virtual returns (address) { return _owner; }\r\n    function _checkOwner() internal view virtual { require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); }\r\n    function renounceOwnership() public virtual onlyOwner { _transferOwnership(address(0)); }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), \"Ownable: new owner is the zero address\"); _transferOwnership(newOwner); }\r\n    function _transferOwnership(address newOwner) internal virtual { address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner); }\r\n}\r\n\r\nabstract contract ERC20 is Context, IERC20 {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) { _name = name_; _symbol = symbol_; _decimals = decimals_; }\r\n    function name() public view virtual override returns (string memory) { return _name; }\r\n    function symbol() public view virtual override returns (string memory) { return _symbol; }\r\n    function decimals() public view virtual override returns (uint8) { return _decimals; }\r\n    function totalSupply() public view virtual override returns (uint256) { return _totalSupply; }\r\n    function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; }\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) { address owner = _msgSender(); _transfer(owner, to, amount); return true; }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) { address owner = _msgSender(); _approve(owner, spender, amount); return true; }\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) { address spender = _msgSender(); _spendAllowance(from, spender, amount); _transfer(from, to, amount); return true; }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { address owner = _msgSender(); _approve(owner, spender, allowance(owner, spender) + addedValue); return true; }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked { _approve(owner, spender, currentAllowance - subtractedValue); }\r\n        return true;\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to, amount);\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked { _balances[from] = fromBalance - amount; _balances[to] += amount; }\r\n        emit Transfer(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        unchecked { _balances[account] += amount; }\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked { _balances[account] = accountBalance - amount; _totalSupply -= amount; }\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked { _approve(owner, spender, currentAllowance - amount); }\r\n        }\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\ncontract BABYPEPE is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public weth;\r\n    address public mainpair;\r\n    address public routerAddr = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address public marketingAddr = 0x6C7094F44655Cc1860c4eD7Ea239934720a386f2;\r\n\r\n    bool public launched;\r\n\r\n    uint256 public fee = 1;\r\n\r\n    bool    private _swapping;\r\n    uint256 private _swapAmount;\r\n    uint256 private constant _totalSupply = 42 * 10000 * 10000 * (10**18);\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n\r\n    event Launched(uint256 blockNumber);\r\n\r\n    constructor() ERC20(\"BABYPEPE\", \"BABYPEPE\", 18) {\r\n        weth = IRouter(routerAddr).WETH();\r\n        mainpair = IFactory(IRouter(routerAddr).factory()).createPair(weth, address(this));\r\n\r\n        _swapAmount = _totalSupply.div(1000);\r\n\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(marketingAddr, true);\r\n        excludeFromFees(msg.sender, true);\r\n\r\n        _mint(msg.sender, _totalSupply);\r\n        _approve(address(this), routerAddr, ~uint256(0));\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function launch() external onlyOwner {\r\n        require(!launched, \"Already launched\");\r\n        launched = true;\r\n        emit Launched(block.number);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner { _isExcludedFromFees[account] = excluded; }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(amount != 0);\r\n        require(launched || _isExcludedFromFees[from] || _isExcludedFromFees[to]);\r\n\r\n        if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            if (to == mainpair && !_swapping && balanceOf(address(this)) >= _swapAmount) {\r\n                _swapping = true;\r\n                _swap(balanceOf(address(this)), marketingAddr);\r\n                _swapping = false;\r\n            }\r\n\r\n            if (!_swapping) {\r\n                uint256 _fee = from == mainpair || to == mainpair ? fee : 0;\r\n                uint256 feeAmount = amount.mul(_fee).div(100);\r\n                if (feeAmount > 0) { amount = amount.sub(feeAmount); super._transfer(from, address(this), feeAmount); }\r\n                if (amount > 1) amount = amount.sub(1);\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function _swap(uint256 amount, address to) internal {\r\n        if (amount == 0) return;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = weth;\r\n        IRouter(routerAddr).swapExactTokensForTokens(amount, 0, path, to, block.timestamp);\r\n    }\r\n}",
    "etherscan_verified": true
}