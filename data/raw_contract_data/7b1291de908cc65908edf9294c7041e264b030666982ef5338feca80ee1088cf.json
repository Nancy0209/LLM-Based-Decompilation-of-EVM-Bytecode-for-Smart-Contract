{
    "address": "0x842FD31eAd327AE42D19B7BFbdB045d3A219c662",
    "tx_hash": "7b1291de908cc65908edf9294c7041e264b030666982ef5338feca80ee1088cf",
    "block_number": 18004513,
    "timestamp": 1693121279,
    "gas_used_in_creation": 4899871,
    "creation_bytecode": "60a06040526021600681905560075569021e19e0c9bab24000006008556009805461ffff19166001179055600b805474e196cd3dec5936176b3ba5a55856b9f0d43d03b7016001600160a81b0319909116179055600c80546001600160a01b03199081167369998fe4551cad42661ef3a6d0bb0aaa72578ca217909155600d8054909116738f36492db0fbdd84d77b1bb1825e4dabe0693df9179055605a600e556000600f55600a601055348015620000b757600080fd5b50620000c3336200049d565b336000908152600260205260409020805460ff19166001908117909155461480620000ee5750466004145b80620000fa5750466003145b156200012c57601180546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d179055620001a0565b466005036200016157601180546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d179055620001a0565b60405162461bcd60e51b815260206004820152600f60248201526e10da185a5b881b9bdd081d985b1a59608a1b60448201526064015b60405180910390fd5b336000818152600360209081526040808320805460ff191660011790556005825280832069d3c21bcecceda10000009081905590519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3601054600f54600e54620002189190620005b5565b620002249190620005b5565b606414620002755760405162461bcd60e51b815260206004820152601c60248201527f426967426f73733a204d75737420657175616c7320746f203130302500000000604482015260640162000197565b601160009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002c9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ef9190620005dd565b6001600160a01b031663c9c65396601160009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000351573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003779190620005dd565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201523060248201526044016020604051808303816000875af1158015620003c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ea9190620005dd565b601280546001600160a01b0319166001600160a01b039283169081179091556000908152600460205260409020805460ff191660011790556011546200043691339116600019620004ed565b601154620004529030906001600160a01b0316600019620004ed565b336080526001600a60006200046f6000546001600160a01b031690565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556200060f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0383166200053b5760405162461bcd60e51b815260206004820152601360248201527245524332303a205a65726f204164647265737360681b604482015260640162000197565b6001600160a01b038216620005895760405162461bcd60e51b815260206004820152601360248201527245524332303a205a65726f204164647265737360681b604482015260640162000197565b6001600160a01b0392831660009081526001602090815260408083209490951682529290925291902055565b80820180821115620005d757634e487b7160e01b600052601160045260246000fd5b92915050565b600060208284031215620005f057600080fd5b81516001600160a01b03811681146200060857600080fd5b9392505050565b60805161226e6200064060003960008181610b3001528181610b7c01528181610dc60152610e85015261226e6000f3fe6080604052600436106102135760003560e01c806370a08231116101185780639e8c708e116100a0578063d5914dc01161006f578063d5914dc014610610578063dc9d75b014610630578063dd62ed3e14610646578063e0b76b191461068c578063f2fde38b146106a657600080fd5b80639e8c708e14610590578063a9059cbb146105b0578063c31c9c07146105d0578063cd9a2235146105f057600080fd5b8063899cce52116100e7578063899cce52146105305780638b4cee08146105505780638cec4fec146105705780638da5cb5b1461051257806395d89b411461027557600080fd5b806370a08231146104b1578063715018a6146104e757806376f1f2b7146104fc578063893d20e81461051257600080fd5b80631e949f8d1161019b578063313ce5671161016a578063313ce567146104225780633eaaf86b1461043e578063452ed4f11461045c57806347f8b0971461047c57806352d8bfc21461049c57600080fd5b80631e949f8d1461038957806323b872dd146103a957806327889862146103c957806327c51ca91461040257600080fd5b80630cc835a3116101e25780630cc835a3146102da5780630faba554146102fc578063111a60b01461031c57806311abf5371461033c57806318160ddd1461036c57600080fd5b806303fd2a451461021f5780630445b6671461025257806306fdde0314610275578063095ea7b3146102aa57600080fd5b3661021a57005b600080fd5b34801561022b57600080fd5b5061023561dead81565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561025e57600080fd5b506102676106c6565b604051908152602001610249565b34801561028157600080fd5b5060408051808201825260068152654d414441504560d01b602082015290516102499190611e6e565b3480156102b657600080fd5b506102ca6102c5366004611ed1565b6106df565b6040519015158152602001610249565b3480156102e657600080fd5b506102fa6102f5366004611efd565b6106f6565b005b34801561030857600080fd5b506102fa610317366004611f24565b6107c6565b34801561032857600080fd5b506102fa610337366004611f5d565b61081b565b34801561034857600080fd5b506103516108d3565b60408051938452602084019290925290820152606001610249565b34801561037857600080fd5b5069d3c21bcecceda1000000610267565b34801561039557600080fd5b506102fa6103a4366004611f81565b610934565b3480156103b557600080fd5b506102ca6103c4366004611f9e565b6109d2565b3480156103d557600080fd5b506102ca6103e4366004611f81565b6001600160a01b031660009081526002602052604090205460ff1690565b34801561040e57600080fd5b506102fa61041d366004611f5d565b610a4a565b34801561042e57600080fd5b5060405160128152602001610249565b34801561044a57600080fd5b5061026769d3c21bcecceda100000081565b34801561046857600080fd5b50601254610235906001600160a01b031681565b34801561048857600080fd5b506102fa610497366004611f81565b610a87565b3480156104a857600080fd5b506102fa610b25565b3480156104bd57600080fd5b506102676104cc366004611f81565b6001600160a01b031660009081526005602052604090205490565b3480156104f357600080fd5b506102fa610bc9565b34801561050857600080fd5b5061026760085481565b34801561051e57600080fd5b506000546001600160a01b0316610235565b34801561053c57600080fd5b506102fa61054b366004611f24565b610bff565b34801561055c57600080fd5b506102fa61056b366004611efd565b610c54565b34801561057c57600080fd5b506102fa61058b366004611f81565b610d15565b34801561059c57600080fd5b506102fa6105ab366004611f81565b610dbb565b3480156105bc57600080fd5b506102ca6105cb366004611ed1565b610f0a565b3480156105dc57600080fd5b50601154610235906001600160a01b031681565b3480156105fc57600080fd5b506102fa61060b366004611efd565b610f21565b34801561061c57600080fd5b506102fa61062b366004611f81565b610f63565b34801561063c57600080fd5b506102676103e881565b34801561065257600080fd5b50610267610661366004611fdf565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561069857600080fd5b506009546102ca9060ff1681565b3480156106b257600080fd5b506102fa6106c1366004611f81565b610fe1565b6106dc6103e869d3c21bcecceda1000000612023565b81565b60006106ec33848461107c565b5060015b92915050565b6000546001600160a01b031633146107295760405162461bcd60e51b815260040161072090612045565b60405180910390fd5b60c881111561076d5760405162461bcd60e51b815260206004820152601060248201526f46656520697320746f6f20686967682160801b6044820152606401610720565b6006819055604080518181526003918101919091526242757960e81b6060820152602081018290527fc5dbbc1a39078c6d41f75645288952af1adce3154214371d76e7735665642453906080015b60405180910390a150565b6000546001600160a01b031633146107f05760405162461bcd60e51b815260040161072090612045565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b6000546001600160a01b031633146108455760405162461bcd60e51b815260040161072090612045565b600b5481151560ff9091161515036108925760405162461bcd60e51b815260206004820152601060248201526f426f6f6c206973207468652073616d6560801b6044820152606401610720565b600b805460ff19168215159081179091556040519081527f4686eea8d0ea8d72497b77f908906325d7bbafd9f1d6753522573258958656e8906020016107bb565b60008060006103e860065460646108ea919061207a565b6108f49190612023565b6103e86007546064610906919061207a565b6109109190612023565b6103e861091f6000606461207a565b6109299190612023565b925092509250909192565b6000546001600160a01b0316331461095e5760405162461bcd60e51b815260040161072090612045565b6001600160a01b0381166109845760405162461bcd60e51b815260040161072090612091565b600c80546001600160a01b0319166001600160a01b0383169081179091556040519081527f75b3130e927a91c986aa1ec84d17d79e0fb9dd0e81e748217719388fb0921aa5906020016107bb565b6001600160a01b038316600090815260016020908152604080832033845290915281205460001914610a37576001600160a01b038416600090815260016020908152604080832033845290915281208054849290610a319084906120c0565b90915550505b610a42848484611140565b949350505050565b6000546001600160a01b03163314610a745760405162461bcd60e51b815260040161072090612045565b6009805460ff1916911515919091179055565b6000546001600160a01b03163314610ab15760405162461bcd60e51b815260040161072090612045565b6001600160a01b038116610ad75760405162461bcd60e51b815260040161072090612091565b600d80546001600160a01b0319166001600160a01b0383169081179091556040519081527f105c24033c7d516e6b4d65a28401944fbbfd611d1ff653d1d1c1410a1298de44906020016107bb565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b6d5760405162461bcd60e51b8152600401610720906120d3565b60405147906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169082156108fc029083906000818181858888f19350505050158015610bc5573d6000803e3d6000fd5b5050565b6000546001600160a01b03163314610bf35760405162461bcd60e51b815260040161072090612045565b610bfd60006115e1565b565b6000546001600160a01b03163314610c295760405162461bcd60e51b815260040161072090612045565b6001600160a01b03919091166000908152600a60205260409020805460ff1916911515919091179055565b6000546001600160a01b03163314610c7e5760405162461bcd60e51b815260040161072090612045565b60c8811115610cc25760405162461bcd60e51b815260206004820152601060248201526f46656520697320746f6f20686967682160801b6044820152606401610720565b6007819055604080518181526004918101919091526314d95b1b60e21b6060820152602081018290527fc5dbbc1a39078c6d41f75645288952af1adce3154214371d76e7735665642453906080016107bb565b6000546001600160a01b03163314610d3f5760405162461bcd60e51b815260040161072090612045565b6001600160a01b038116610d655760405162461bcd60e51b815260040161072090612091565b600b8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f7196d664bcbee763e73762890af078aaca12d6457c8ae2c4a9c9a8302d98c38f906020016107bb565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e035760405162461bcd60e51b8152600401610720906120d3565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6e919061211d565b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f059190612136565b505050565b6000610f17338484611140565b5060019392505050565b6000546001600160a01b03163314610f4b5760405162461bcd60e51b815260040161072090612045565b610f5d81670de0b6b3a764000061207a565b60085550565b6000546001600160a01b03163314610f8d5760405162461bcd60e51b815260040161072090612045565b6001600160a01b038116600081815260046020908152604091829020805460ff1916600117905590519182527f03b62011431502c791d443ee6149c9ec9b43632aeb5eb55c621104c128fe02f791016107bb565b6000546001600160a01b0316331461100b5760405162461bcd60e51b815260040161072090612045565b6001600160a01b0381166110705760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610720565b611079816115e1565b50565b6001600160a01b0383166110c85760405162461bcd60e51b815260206004820152601360248201527245524332303a205a65726f204164647265737360681b6044820152606401610720565b6001600160a01b0382166111145760405162461bcd60e51b815260206004820152601360248201527245524332303a205a65726f204164647265737360681b6044820152606401610720565b6001600160a01b0392831660009081526001602090815260408083209490951682529290925291902055565b600060016001600160a01b0384166111a65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610720565b6001600160a01b03851661120a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610720565b6000831161126c5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610720565b60095460ff16801561129757506001600160a01b0385166000908152600a602052604090205460ff16155b80156112bc57506001600160a01b0384166000908152600a602052604090205460ff16155b1561132b5760085483111561132b5760405162461bcd60e51b815260206004820152602f60248201527f5472616e7366657220616d6f756e74206578636565647320746865206d61782060448201526e3a3930b739b332b9103634b6b4ba1760891b6064820152608401610720565b6113358585611631565b801561134b5750601254600160a01b900460ff16155b80156113595750600b5460ff165b156113fc57306000908152600560205260409020546113846103e869d3c21bcecceda1000000612023565b81106113fa576000600e54118061139d57506000600f54115b156113d0576113d06064600f54600e546113b79190612153565b6113c1908461207a565b6113cb9190612023565b611678565b601054156113fa576113fa6064601054836113eb919061207a565b6113f59190612023565b611a9c565b505b6001600160a01b03851660009081526002602052604090205460ff168061143b57506001600160a01b03841660009081526002602052604090205460ff165b15611444575060005b6001600160a01b0385166000908152600560205260408120805485929061146c9084906120c0565b90915550600090508161147f578361149d565b61149d8661148d8888611d56565b6114978989611631565b87611d9d565b6001600160a01b0386166000908152600560205260408120805492935083929091906114ca908490612153565b909155505060095460ff1680156114fa57506001600160a01b0385166000908152600a602052604090205460ff16155b15611588576008546001600160a01b03861660009081526005602052604090205411156115885760405162461bcd60e51b815260206004820152603660248201527f4e65772062616c616e6365206578636565647320746865206d617820746f6b6560448201527537399030b63637bbb2b2103832b9103bb0b63632ba1760511b6064820152608401610720565b846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516115cd91815260200190565b60405180910390a350600195945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116600090815260046020526040812054819060ff168015610a4257505050506001600160a01b031660009081526004602052604090205460ff161590565b6012805460ff60a01b1916600160a01b17905560408051600280825260608201835260009260208301908036833701905050905030816000815181106116c0576116c0612166565b6001600160a01b03928316602091820292909201810191909152601154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173d919061217c565b8160018151811061175057611750612166565b6001600160a01b039283166020918202929092018101919091523060009081526001825260408082206011549094168252929091522054600019146117ba573060009081526001602090815260408083206011546001600160a01b03168452909152902060001990555b60115460405163791ac94760e01b81526001600160a01b039091169063791ac947906117f3908590600090869030904290600401612199565b600060405180830381600087803b15801561180d57600080fd5b505af192505050801561181e575060015b6118285750611a8c565b47600061271061183a8361123e61207a565b6118449190612023565b90506000612710611857846110ea61207a565b6118619190612023565b90506000612710611874856103e861207a565b61187e9190612023565b600b546040519192506000916101009091046001600160a01b0316906188b890869084818181858888f193505050503d80600081146118d9576040519150601f19603f3d011682016040523d82523d6000602084013e6118de565b606091505b505080915050806119315760405162461bcd60e51b815260206004820152601c60248201527f5472616e7366657220746f204d61726b6574696e67206661696c6564000000006044820152606401610720565b600c546040516001600160a01b03909116906188b89085906000818181858888f193505050503d8060008114611983576040519150601f19603f3d011682016040523d82523d6000602084013e611988565b606091505b505080915050806119db5760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657220746f2044657641646472657373206661696c65640000006044820152606401610720565b600d546040516001600160a01b03909116906188b89084906000818181858888f193505050503d8060008114611a2d576040519150601f19603f3d011682016040523d82523d6000602084013e611a32565b606091505b50508091505080611a855760405162461bcd60e51b815260206004820152601b60248201527f5472616e7366657220746f204241646472657373206661696c656400000000006044820152606401610720565b5050505050505b506012805460ff60a01b19169055565b6012805460ff60a01b1916600160a01b1790556000611abc600283612023565b90506000611aca82846120c0565b60408051600280825260608201835292935047926000926020830190803683370190505090503081600081518110611b0457611b04612166565b6001600160a01b03928316602091820292909201810191909152601154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b81919061217c565b81600181518110611b9457611b94612166565b6001600160a01b03928316602091820292909201810191909152306000908152600182526040808220601154909416825292909152205460001914611bfe573060009081526001602090815260408083206011546001600160a01b03168452909152902060001990555b60115460405163791ac94760e01b81526001600160a01b039091169063791ac94790611c37908790600090869030904290600401612199565b600060405180830381600087803b158015611c5157600080fd5b505af1925050508015611c62575060015b611c6f5750505050611a8c565b6000611c7b83476120c0565b60115460405163f305d71960e01b815230600482015260248101879052600060448201819052606482015261dead60848201524260a48201529192506001600160a01b03169063f305d71990839060c40160606040518083038185885af193505050508015611d07575060408051601f3d908101601f19168201909252611d049181019061220a565b60015b611d15575050505050611a8c565b5050506040517fd9f20192eafa060dc85f5f8b3b0a5b9c106b02d5d1503335b857e50c2bb7003090600090a15050505050506012805460ff60a01b19169055565b6001600160a01b038116600090815260046020526040812054819060ff16158015610a4257505050506001600160a01b031660009081526004602052604090205460ff1690565b6000808415611daf5750600654611dc2565b8315611dbe5750600754611dc2565b5060005b80600003611dd35782915050610a42565b60006103e8611de2838661207a565b611dec9190612023565b90508015611e59573060009081526005602052604081208054839290611e13908490612153565b909155505060405181815230906001600160a01b038916907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35b611e6381856120c0565b979650505050505050565b600060208083528351808285015260005b81811015611e9b57858101830151858201604001528201611e7f565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461107957600080fd5b60008060408385031215611ee457600080fd5b8235611eef81611ebc565b946020939093013593505050565b600060208284031215611f0f57600080fd5b5035919050565b801515811461107957600080fd5b60008060408385031215611f3757600080fd5b8235611f4281611ebc565b91506020830135611f5281611f16565b809150509250929050565b600060208284031215611f6f57600080fd5b8135611f7a81611f16565b9392505050565b600060208284031215611f9357600080fd5b8135611f7a81611ebc565b600080600060608486031215611fb357600080fd5b8335611fbe81611ebc565b92506020840135611fce81611ebc565b929592945050506040919091013590565b60008060408385031215611ff257600080fd5b8235611ffd81611ebc565b91506020830135611f5281611ebc565b634e487b7160e01b600052601160045260246000fd5b60008261204057634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b80820281158282048414176106f0576106f061200d565b602080825260159082015274426967426f73733a2041646472657373205a65726f60581b604082015260600190565b818103818111156106f0576106f061200d565b6020808252602a908201527f4f6e6c79206f726967696e616c206f776e65722063616e2063616c6c207468696040820152693990333ab731ba34b7b760b11b606082015260800190565b60006020828403121561212f57600080fd5b5051919050565b60006020828403121561214857600080fd5b8151611f7a81611f16565b808201808211156106f0576106f061200d565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561218e57600080fd5b8151611f7a81611ebc565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156121e95784516001600160a01b0316835293830193918301916001016121c4565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561221f57600080fd5b835192506020840151915060408401519050925092509256fea264697066735822122084e110097f5b6984c127ee87d6f11d7ff59f1ad9a4fa1dacaf1bbec005462e9964736f6c63430008130033",
    "runtime_bytecode": "6080604052600436106102135760003560e01c806370a08231116101185780639e8c708e116100a0578063d5914dc01161006f578063d5914dc014610610578063dc9d75b014610630578063dd62ed3e14610646578063e0b76b191461068c578063f2fde38b146106a657600080fd5b80639e8c708e14610590578063a9059cbb146105b0578063c31c9c07146105d0578063cd9a2235146105f057600080fd5b8063899cce52116100e7578063899cce52146105305780638b4cee08146105505780638cec4fec146105705780638da5cb5b1461051257806395d89b411461027557600080fd5b806370a08231146104b1578063715018a6146104e757806376f1f2b7146104fc578063893d20e81461051257600080fd5b80631e949f8d1161019b578063313ce5671161016a578063313ce567146104225780633eaaf86b1461043e578063452ed4f11461045c57806347f8b0971461047c57806352d8bfc21461049c57600080fd5b80631e949f8d1461038957806323b872dd146103a957806327889862146103c957806327c51ca91461040257600080fd5b80630cc835a3116101e25780630cc835a3146102da5780630faba554146102fc578063111a60b01461031c57806311abf5371461033c57806318160ddd1461036c57600080fd5b806303fd2a451461021f5780630445b6671461025257806306fdde0314610275578063095ea7b3146102aa57600080fd5b3661021a57005b600080fd5b34801561022b57600080fd5b5061023561dead81565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561025e57600080fd5b506102676106c6565b604051908152602001610249565b34801561028157600080fd5b5060408051808201825260068152654d414441504560d01b602082015290516102499190611e6e565b3480156102b657600080fd5b506102ca6102c5366004611ed1565b6106df565b6040519015158152602001610249565b3480156102e657600080fd5b506102fa6102f5366004611efd565b6106f6565b005b34801561030857600080fd5b506102fa610317366004611f24565b6107c6565b34801561032857600080fd5b506102fa610337366004611f5d565b61081b565b34801561034857600080fd5b506103516108d3565b60408051938452602084019290925290820152606001610249565b34801561037857600080fd5b5069d3c21bcecceda1000000610267565b34801561039557600080fd5b506102fa6103a4366004611f81565b610934565b3480156103b557600080fd5b506102ca6103c4366004611f9e565b6109d2565b3480156103d557600080fd5b506102ca6103e4366004611f81565b6001600160a01b031660009081526002602052604090205460ff1690565b34801561040e57600080fd5b506102fa61041d366004611f5d565b610a4a565b34801561042e57600080fd5b5060405160128152602001610249565b34801561044a57600080fd5b5061026769d3c21bcecceda100000081565b34801561046857600080fd5b50601254610235906001600160a01b031681565b34801561048857600080fd5b506102fa610497366004611f81565b610a87565b3480156104a857600080fd5b506102fa610b25565b3480156104bd57600080fd5b506102676104cc366004611f81565b6001600160a01b031660009081526005602052604090205490565b3480156104f357600080fd5b506102fa610bc9565b34801561050857600080fd5b5061026760085481565b34801561051e57600080fd5b506000546001600160a01b0316610235565b34801561053c57600080fd5b506102fa61054b366004611f24565b610bff565b34801561055c57600080fd5b506102fa61056b366004611efd565b610c54565b34801561057c57600080fd5b506102fa61058b366004611f81565b610d15565b34801561059c57600080fd5b506102fa6105ab366004611f81565b610dbb565b3480156105bc57600080fd5b506102ca6105cb366004611ed1565b610f0a565b3480156105dc57600080fd5b50601154610235906001600160a01b031681565b3480156105fc57600080fd5b506102fa61060b366004611efd565b610f21565b34801561061c57600080fd5b506102fa61062b366004611f81565b610f63565b34801561063c57600080fd5b506102676103e881565b34801561065257600080fd5b50610267610661366004611fdf565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561069857600080fd5b506009546102ca9060ff1681565b3480156106b257600080fd5b506102fa6106c1366004611f81565b610fe1565b6106dc6103e869d3c21bcecceda1000000612023565b81565b60006106ec33848461107c565b5060015b92915050565b6000546001600160a01b031633146107295760405162461bcd60e51b815260040161072090612045565b60405180910390fd5b60c881111561076d5760405162461bcd60e51b815260206004820152601060248201526f46656520697320746f6f20686967682160801b6044820152606401610720565b6006819055604080518181526003918101919091526242757960e81b6060820152602081018290527fc5dbbc1a39078c6d41f75645288952af1adce3154214371d76e7735665642453906080015b60405180910390a150565b6000546001600160a01b031633146107f05760405162461bcd60e51b815260040161072090612045565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b6000546001600160a01b031633146108455760405162461bcd60e51b815260040161072090612045565b600b5481151560ff9091161515036108925760405162461bcd60e51b815260206004820152601060248201526f426f6f6c206973207468652073616d6560801b6044820152606401610720565b600b805460ff19168215159081179091556040519081527f4686eea8d0ea8d72497b77f908906325d7bbafd9f1d6753522573258958656e8906020016107bb565b60008060006103e860065460646108ea919061207a565b6108f49190612023565b6103e86007546064610906919061207a565b6109109190612023565b6103e861091f6000606461207a565b6109299190612023565b925092509250909192565b6000546001600160a01b0316331461095e5760405162461bcd60e51b815260040161072090612045565b6001600160a01b0381166109845760405162461bcd60e51b815260040161072090612091565b600c80546001600160a01b0319166001600160a01b0383169081179091556040519081527f75b3130e927a91c986aa1ec84d17d79e0fb9dd0e81e748217719388fb0921aa5906020016107bb565b6001600160a01b038316600090815260016020908152604080832033845290915281205460001914610a37576001600160a01b038416600090815260016020908152604080832033845290915281208054849290610a319084906120c0565b90915550505b610a42848484611140565b949350505050565b6000546001600160a01b03163314610a745760405162461bcd60e51b815260040161072090612045565b6009805460ff1916911515919091179055565b6000546001600160a01b03163314610ab15760405162461bcd60e51b815260040161072090612045565b6001600160a01b038116610ad75760405162461bcd60e51b815260040161072090612091565b600d80546001600160a01b0319166001600160a01b0383169081179091556040519081527f105c24033c7d516e6b4d65a28401944fbbfd611d1ff653d1d1c1410a1298de44906020016107bb565b336001600160a01b037f000000000000000000000000f6f50011df50e1180dc78f4a8237f293f30a3b271614610b6d5760405162461bcd60e51b8152600401610720906120d3565b60405147906001600160a01b037f000000000000000000000000f6f50011df50e1180dc78f4a8237f293f30a3b27169082156108fc029083906000818181858888f19350505050158015610bc5573d6000803e3d6000fd5b5050565b6000546001600160a01b03163314610bf35760405162461bcd60e51b815260040161072090612045565b610bfd60006115e1565b565b6000546001600160a01b03163314610c295760405162461bcd60e51b815260040161072090612045565b6001600160a01b03919091166000908152600a60205260409020805460ff1916911515919091179055565b6000546001600160a01b03163314610c7e5760405162461bcd60e51b815260040161072090612045565b60c8811115610cc25760405162461bcd60e51b815260206004820152601060248201526f46656520697320746f6f20686967682160801b6044820152606401610720565b6007819055604080518181526004918101919091526314d95b1b60e21b6060820152602081018290527fc5dbbc1a39078c6d41f75645288952af1adce3154214371d76e7735665642453906080016107bb565b6000546001600160a01b03163314610d3f5760405162461bcd60e51b815260040161072090612045565b6001600160a01b038116610d655760405162461bcd60e51b815260040161072090612091565b600b8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f7196d664bcbee763e73762890af078aaca12d6457c8ae2c4a9c9a8302d98c38f906020016107bb565b336001600160a01b037f000000000000000000000000f6f50011df50e1180dc78f4a8237f293f30a3b271614610e035760405162461bcd60e51b8152600401610720906120d3565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6e919061211d565b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000f6f50011df50e1180dc78f4a8237f293f30a3b2781166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f059190612136565b505050565b6000610f17338484611140565b5060019392505050565b6000546001600160a01b03163314610f4b5760405162461bcd60e51b815260040161072090612045565b610f5d81670de0b6b3a764000061207a565b60085550565b6000546001600160a01b03163314610f8d5760405162461bcd60e51b815260040161072090612045565b6001600160a01b038116600081815260046020908152604091829020805460ff1916600117905590519182527f03b62011431502c791d443ee6149c9ec9b43632aeb5eb55c621104c128fe02f791016107bb565b6000546001600160a01b0316331461100b5760405162461bcd60e51b815260040161072090612045565b6001600160a01b0381166110705760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610720565b611079816115e1565b50565b6001600160a01b0383166110c85760405162461bcd60e51b815260206004820152601360248201527245524332303a205a65726f204164647265737360681b6044820152606401610720565b6001600160a01b0382166111145760405162461bcd60e51b815260206004820152601360248201527245524332303a205a65726f204164647265737360681b6044820152606401610720565b6001600160a01b0392831660009081526001602090815260408083209490951682529290925291902055565b600060016001600160a01b0384166111a65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610720565b6001600160a01b03851661120a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610720565b6000831161126c5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610720565b60095460ff16801561129757506001600160a01b0385166000908152600a602052604090205460ff16155b80156112bc57506001600160a01b0384166000908152600a602052604090205460ff16155b1561132b5760085483111561132b5760405162461bcd60e51b815260206004820152602f60248201527f5472616e7366657220616d6f756e74206578636565647320746865206d61782060448201526e3a3930b739b332b9103634b6b4ba1760891b6064820152608401610720565b6113358585611631565b801561134b5750601254600160a01b900460ff16155b80156113595750600b5460ff165b156113fc57306000908152600560205260409020546113846103e869d3c21bcecceda1000000612023565b81106113fa576000600e54118061139d57506000600f54115b156113d0576113d06064600f54600e546113b79190612153565b6113c1908461207a565b6113cb9190612023565b611678565b601054156113fa576113fa6064601054836113eb919061207a565b6113f59190612023565b611a9c565b505b6001600160a01b03851660009081526002602052604090205460ff168061143b57506001600160a01b03841660009081526002602052604090205460ff165b15611444575060005b6001600160a01b0385166000908152600560205260408120805485929061146c9084906120c0565b90915550600090508161147f578361149d565b61149d8661148d8888611d56565b6114978989611631565b87611d9d565b6001600160a01b0386166000908152600560205260408120805492935083929091906114ca908490612153565b909155505060095460ff1680156114fa57506001600160a01b0385166000908152600a602052604090205460ff16155b15611588576008546001600160a01b03861660009081526005602052604090205411156115885760405162461bcd60e51b815260206004820152603660248201527f4e65772062616c616e6365206578636565647320746865206d617820746f6b6560448201527537399030b63637bbb2b2103832b9103bb0b63632ba1760511b6064820152608401610720565b846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516115cd91815260200190565b60405180910390a350600195945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116600090815260046020526040812054819060ff168015610a4257505050506001600160a01b031660009081526004602052604090205460ff161590565b6012805460ff60a01b1916600160a01b17905560408051600280825260608201835260009260208301908036833701905050905030816000815181106116c0576116c0612166565b6001600160a01b03928316602091820292909201810191909152601154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173d919061217c565b8160018151811061175057611750612166565b6001600160a01b039283166020918202929092018101919091523060009081526001825260408082206011549094168252929091522054600019146117ba573060009081526001602090815260408083206011546001600160a01b03168452909152902060001990555b60115460405163791ac94760e01b81526001600160a01b039091169063791ac947906117f3908590600090869030904290600401612199565b600060405180830381600087803b15801561180d57600080fd5b505af192505050801561181e575060015b6118285750611a8c565b47600061271061183a8361123e61207a565b6118449190612023565b90506000612710611857846110ea61207a565b6118619190612023565b90506000612710611874856103e861207a565b61187e9190612023565b600b546040519192506000916101009091046001600160a01b0316906188b890869084818181858888f193505050503d80600081146118d9576040519150601f19603f3d011682016040523d82523d6000602084013e6118de565b606091505b505080915050806119315760405162461bcd60e51b815260206004820152601c60248201527f5472616e7366657220746f204d61726b6574696e67206661696c6564000000006044820152606401610720565b600c546040516001600160a01b03909116906188b89085906000818181858888f193505050503d8060008114611983576040519150601f19603f3d011682016040523d82523d6000602084013e611988565b606091505b505080915050806119db5760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657220746f2044657641646472657373206661696c65640000006044820152606401610720565b600d546040516001600160a01b03909116906188b89084906000818181858888f193505050503d8060008114611a2d576040519150601f19603f3d011682016040523d82523d6000602084013e611a32565b606091505b50508091505080611a855760405162461bcd60e51b815260206004820152601b60248201527f5472616e7366657220746f204241646472657373206661696c656400000000006044820152606401610720565b5050505050505b506012805460ff60a01b19169055565b6012805460ff60a01b1916600160a01b1790556000611abc600283612023565b90506000611aca82846120c0565b60408051600280825260608201835292935047926000926020830190803683370190505090503081600081518110611b0457611b04612166565b6001600160a01b03928316602091820292909201810191909152601154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b81919061217c565b81600181518110611b9457611b94612166565b6001600160a01b03928316602091820292909201810191909152306000908152600182526040808220601154909416825292909152205460001914611bfe573060009081526001602090815260408083206011546001600160a01b03168452909152902060001990555b60115460405163791ac94760e01b81526001600160a01b039091169063791ac94790611c37908790600090869030904290600401612199565b600060405180830381600087803b158015611c5157600080fd5b505af1925050508015611c62575060015b611c6f5750505050611a8c565b6000611c7b83476120c0565b60115460405163f305d71960e01b815230600482015260248101879052600060448201819052606482015261dead60848201524260a48201529192506001600160a01b03169063f305d71990839060c40160606040518083038185885af193505050508015611d07575060408051601f3d908101601f19168201909252611d049181019061220a565b60015b611d15575050505050611a8c565b5050506040517fd9f20192eafa060dc85f5f8b3b0a5b9c106b02d5d1503335b857e50c2bb7003090600090a15050505050506012805460ff60a01b19169055565b6001600160a01b038116600090815260046020526040812054819060ff16158015610a4257505050506001600160a01b031660009081526004602052604090205460ff1690565b6000808415611daf5750600654611dc2565b8315611dbe5750600754611dc2565b5060005b80600003611dd35782915050610a42565b60006103e8611de2838661207a565b611dec9190612023565b90508015611e59573060009081526005602052604081208054839290611e13908490612153565b909155505060405181815230906001600160a01b038916907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35b611e6381856120c0565b979650505050505050565b600060208083528351808285015260005b81811015611e9b57858101830151858201604001528201611e7f565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461107957600080fd5b60008060408385031215611ee457600080fd5b8235611eef81611ebc565b946020939093013593505050565b600060208284031215611f0f57600080fd5b5035919050565b801515811461107957600080fd5b60008060408385031215611f3757600080fd5b8235611f4281611ebc565b91506020830135611f5281611f16565b809150509250929050565b600060208284031215611f6f57600080fd5b8135611f7a81611f16565b9392505050565b600060208284031215611f9357600080fd5b8135611f7a81611ebc565b600080600060608486031215611fb357600080fd5b8335611fbe81611ebc565b92506020840135611fce81611ebc565b929592945050506040919091013590565b60008060408385031215611ff257600080fd5b8235611ffd81611ebc565b91506020830135611f5281611ebc565b634e487b7160e01b600052601160045260246000fd5b60008261204057634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b80820281158282048414176106f0576106f061200d565b602080825260159082015274426967426f73733a2041646472657373205a65726f60581b604082015260600190565b818103818111156106f0576106f061200d565b6020808252602a908201527f4f6e6c79206f726967696e616c206f776e65722063616e2063616c6c207468696040820152693990333ab731ba34b7b760b11b606082015260800190565b60006020828403121561212f57600080fd5b5051919050565b60006020828403121561214857600080fd5b8151611f7a81611f16565b808201808211156106f0576106f061200d565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561218e57600080fd5b8151611f7a81611ebc565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156121e95784516001600160a01b0316835293830193918301916001016121c4565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561221f57600080fd5b835192506020840151915060408401519050925092509256fea264697066735822122084e110097f5b6984c127ee87d6f11d7ff59f1ad9a4fa1dacaf1bbec005462e9964736f6c63430008130033",
    "contract_name": "MADAPE",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"}],\"name\":\"_changeFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLpPair\",\"type\":\"address\"}],\"name\":\"_changePair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"_changeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"MarketingW\",\"type\":\"address\"}],\"name\":\"_changeW1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DevW\",\"type\":\"address\"}],\"name\":\"_changeW2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"BaW\",\"type\":\"address\"}],\"name\":\"_changeW3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"_toggleCanSwapFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AntiWhaleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_exempted\",\"type\":\"bool\"}],\"name\":\"AntiWhaleSetExemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"AntiWhaleSetThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AntiWhaleToggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiWhaleThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"changeLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"MarketingW\",\"type\":\"address\"}],\"name\":\"changeW1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"DevW\",\"type\":\"address\"}],\"name\":\"changeW2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"BaW\",\"type\":\"address\"}],\"name\":\"changeW3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isNoFeeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setNoFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"yesno\",\"type\":\"bool\"}],\"name\":\"toggleCanSwapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// MADAPE //\r\n\r\n// Telegram\r\n// https://t.me/madapeeth\r\n\r\n// Website\r\n// https://madape.city/\r\n\r\n// Twitter\r\n// https://twitter.com/madapeeth\r\n\r\n// SPDX-License-Identifier: No\r\n \r\npragma solidity = 0.8.19;\r\n\r\n//--- Context ---//\r\nabstract contract Context {\r\n    constructor() {\r\n    }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n//--- Ownable ---//\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n//--- Interface for ERC20 ---//\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n//--- Contract v3 ---//\r\ncontract MADAPE is Context, Ownable, IERC20 {\r\n\r\n    function totalSupply() external pure override returns (uint256) { if (_totalSupply == 0) { revert(); } return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { if (_totalSupply == 0) { revert(); } return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balance[account];\r\n    }\r\n\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _noFee;\r\n    mapping (address => bool) private liquidityAdd;\r\n    mapping (address => bool) private isLpPair;\r\n    mapping (address => uint256) private balance;\r\n\r\n    uint256 constant public _totalSupply = 1_000_000 * 10**18;\r\n    uint256 constant public swapThreshold = _totalSupply / 1_000;\r\n    uint256 private buyFee = 33; // 3.3%\r\n    uint256 private sellFee = 33; // 3.3%\r\n    uint256 constant private MAX_FEE = 200; // represents 20%  \r\n    uint256 constant private transferfee = 0;\r\n    uint256 constant public fee_denominator = 1_000;\r\n\r\n    // Anti-whale features\r\n    uint256 public antiWhaleThreshold = 10000 * 10**18;\r\n    bool public AntiWhaleEnabled = true;\r\n    bool private isToggled = false;\r\n\r\n    // A mapping to store AntiWhale exempt addresses\r\n    mapping (address => bool) private isAntiWhaleExempt;\r\n\r\n    // Add the exemption function\r\n    function AntiWhaleSetExemption(address _address, bool _exempted) external onlyOwner {\r\n        isAntiWhaleExempt[_address] = _exempted;\r\n    }\r\n\r\n    function viewTaxes() external view returns(uint256 buy, uint256 sell, uint256 transferf) {\r\n        return(100 * buyFee / fee_denominator, 100 * sellFee / fee_denominator, 100 * transferfee / fee_denominator);\r\n    }\r\n    \r\n    bool private canSwapFees = true;\r\n    address payable private MarketingAddress = payable(0xe196CD3Dec5936176b3BA5a55856B9f0D43d03b7); \r\n    address payable private DevAddress = payable(0x69998FE4551caD42661EF3A6d0Bb0AaA72578cA2);\r\n    address payable private BAddress = payable(0x8F36492Db0Fbdd84D77B1BB1825E4dABe0693DF9);\r\n \r\n \r\n\r\n//--- v3 Allocations ---//\r\n    uint256 private buyAllocation = 90;\r\n    uint256 private sellAllocation = 0;\r\n    uint256 private liquidityAllocation = 10;\r\n \r\n    IRouter02 public swapRouter;\r\n    string constant private _name = \"MADAPE\";\r\n    string constant private _symbol = \"MADAPE\";\r\n \r\n    uint8 constant private _decimals = 18;\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address public lpPair;\r\n    address private immutable originalOwner;\r\n    bool private inSwap;\r\n\r\n        modifier inSwapFlag {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n \r\n    event _toggleCanSwapFees(bool enabled);\r\n    event _changePair(address newLpPair);\r\n    event _changeThreshold(uint256 newThreshold);\r\n    event _changeW1(address MarketingW);\r\n    event _changeW2(address DevW);\r\n    event _changeW3(address BaW);\r\n    event _changeFees(uint256 buy, uint256 sell);\r\n    event SwapAndLiquify();\r\n    event FeeUpdated(string feeType, uint256 newValue);\r\n\r\n    constructor () {\r\n        _noFee[msg.sender] = true;\r\n\r\n         if (block.chainid == 1 || block.chainid == 4 || block.chainid == 3) {\r\n            swapRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        } else if (block.chainid == 5) {\r\n            swapRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        } else {\r\n            revert(\"Chain not valid\");\r\n        }\r\n        liquidityAdd[msg.sender] = true;\r\n        balance[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n        require(buyAllocation + sellAllocation + liquidityAllocation == 100,\"BigBoss: Must equals to 100%\");\r\n\r\n        lpPair = IFactoryV2(swapRouter.factory()).createPair(swapRouter.WETH(), address(this));\r\n        isLpPair[lpPair] = true;\r\n        _approve(msg.sender, address(swapRouter), type(uint256).max);\r\n        _approve(address(this), address(swapRouter), type(uint256).max);\r\n\r\n        originalOwner = msg.sender;\r\n        isAntiWhaleExempt[owner()] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n        function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n        function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n        function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n    }\r\n\r\n        function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n    function isNoFeeWallet(address account) external view returns(bool) {\r\n        return _noFee[account];\r\n    }\r\n\r\n    function setNoFeeWallet(address account, bool enabled) public onlyOwner {\r\n        _noFee[account] = enabled;\r\n    }\r\n\r\n    function isLimitedAddress(address ins, address out) internal view returns (bool) {\r\n\r\n        bool isLimited = ins != owner()\r\n            && out != owner() && tx.origin != owner() // any transaction with no direct interaction from owner will be accepted\r\n            && msg.sender != owner()\r\n            && !liquidityAdd[ins]  && !liquidityAdd[out] && out != DEAD && out != address(0) && out != address(this);\r\n            return isLimited;\r\n    }\r\n\r\n    function is_buy(address ins, address out) internal view returns (bool) {\r\n        bool _is_buy = !isLpPair[out] && isLpPair[ins];\r\n        return _is_buy;\r\n    }\r\n\r\n    function is_sell(address ins, address out) internal view returns (bool) { \r\n        bool _is_sell = isLpPair[out] && !isLpPair[ins];\r\n        return _is_sell;\r\n    }\r\n\r\n    function is_transfer(address ins, address out) internal view returns (bool) { \r\n        bool _is_transfer = !isLpPair[out] && !isLpPair[ins];\r\n        return _is_transfer;\r\n    }\r\n\r\n    function canSwap() internal view returns (bool) {\r\n        return canSwapFees;\r\n    }\r\n    function changeLpPair(address newPair) external onlyOwner {\r\n        isLpPair[newPair] = true;\r\n        emit _changePair(newPair);\r\n    }\r\n\r\n    function toggleCanSwapFees(bool yesno) external onlyOwner {\r\n        require(canSwapFees != yesno,\"Bool is the same\");\r\n        canSwapFees = yesno;\r\n        emit _toggleCanSwapFees(yesno);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns  (bool) {\r\n        bool takeFee = true;\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // AntiWhale\r\n        if (AntiWhaleEnabled && !isAntiWhaleExempt[from] && !isAntiWhaleExempt[to]) {\r\n            require(amount <= antiWhaleThreshold, \"Transfer amount exceeds the max transfer limit.\");\r\n        }\r\n \r\n        if(is_sell(from, to) &&  !inSwap && canSwap()) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if(contractTokenBalance >= swapThreshold) { \r\n                if(buyAllocation > 0 || sellAllocation > 0) internalSwap((contractTokenBalance * (buyAllocation + sellAllocation)) / 100);\r\n                if(liquidityAllocation > 0) {swapAndLiquify(contractTokenBalance * liquidityAllocation / 100);}\r\n            }\r\n        }\r\n\r\n        if (_noFee[from] || _noFee[to]){\r\n            takeFee = false;\r\n        }\r\n        balance[from] -= amount; \r\n        uint256 amountAfterFee = (takeFee) ? takeTaxes(from, is_buy(from, to), is_sell(from, to), amount) : amount;\r\n        balance[to] += amountAfterFee; \r\n\r\n         // AntiWhale Check for Total Balance After Transfer\r\n        if (AntiWhaleEnabled && !isAntiWhaleExempt[to]) {\r\n            require(balance[to] <= antiWhaleThreshold, \"New balance exceeds the max tokens allowed per wallet.\");\r\n        }\r\n\r\n        emit Transfer(from, to, amountAfterFee);\r\n\r\n        return true;\r\n    }\r\n\r\n   function changeW1(address MarketingW) external onlyOwner {\r\n        require(MarketingW != address(0),\"BigBoss: Address Zero\");\r\n        MarketingAddress = payable(MarketingW);\r\n        emit _changeW1(MarketingW);\r\n    }\r\n\r\n    function changeW2(address DevW) external onlyOwner {\r\n        require(DevW != address(0),\"BigBoss: Address Zero\");\r\n        DevAddress = payable(DevW);\r\n        emit _changeW2(DevW);\r\n    }\r\n \r\n    function changeW3(address BaW) external onlyOwner {\r\n        require(BaW != address(0),\"BigBoss: Address Zero\");\r\n        BAddress = payable(BaW);\r\n        emit _changeW3(BaW);\r\n    }\r\n\r\n\r\n    function setBuyFee(uint256 newBuyFee) external onlyOwner {\r\n    require(newBuyFee <= MAX_FEE, \"Fee is too high!\");\r\n    buyFee = newBuyFee;\r\n    emit FeeUpdated(\"Buy\", newBuyFee);\r\n    }\r\n\r\n    function setSellFee(uint256 newSellFee) external onlyOwner {\r\n        require(newSellFee <= MAX_FEE, \"Fee is too high!\");\r\n        sellFee = newSellFee;\r\n        emit FeeUpdated(\"Sell\", newSellFee);\r\n    }\r\n\r\n\r\n    function takeTaxes(address from, bool isbuy, bool issell, uint256 amount) internal returns (uint256) {\r\n        uint256 fee;\r\n        if (isbuy) fee = buyFee; else if (issell) fee = sellFee; else  fee = transferfee; \r\n        if (fee == 0)  return amount; \r\n        uint256 feeAmount = amount * fee / fee_denominator;\r\n        if (feeAmount > 0) {\r\n\r\n            balance[address(this)] += feeAmount;\r\n            emit Transfer(from, address(this), feeAmount);\r\n            \r\n        }\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) internal inSwapFlag {\r\n        uint256 firstmath = contractTokenBalance / 2;\r\n        uint256 secondMath = contractTokenBalance - firstmath;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = swapRouter.WETH();\r\n\r\n        if (_allowances[address(this)][address(swapRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(swapRouter)] = type(uint256).max;\r\n        }\r\n\r\n        try swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            firstmath,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp) {} catch {return;}\r\n        \r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n        try swapRouter.addLiquidityETH{value: newBalance}(\r\n            address(this),\r\n            secondMath,\r\n            0,\r\n            0,\r\n            DEAD,\r\n            block.timestamp\r\n        ){} catch {return;}\r\n\r\n        emit SwapAndLiquify();\r\n    }\r\n\r\n    function internalSwap(uint256 contractTokenBalance) internal inSwapFlag {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = swapRouter.WETH();\r\n\r\n        if (_allowances[address(this)][address(swapRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(swapRouter)] = type(uint256).max;\r\n        }\r\n\r\n        try swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            contractTokenBalance,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {} catch {\r\n            return;\r\n        }\r\n\r\n        uint256 currentBalance = address(this).balance;\r\n        uint256 marketingShare = (currentBalance * 4670) / 10000;  // 1.4% of the total \r\n        uint256 devShare = (currentBalance * 4330) / 10000;       // 1.2% of the total \r\n        uint256 bShare = (currentBalance * 1000) / 10000;         // 0.3% of the total \r\n \r\n\r\n        bool success;\r\n        (success,) = MarketingAddress.call{value: marketingShare, gas: 35000}(\"\");\r\n        require(success, \"Transfer to Marketing failed\");\r\n\r\n        (success,) = DevAddress.call{value: devShare, gas: 35000}(\"\");\r\n        require(success, \"Transfer to DevAddress failed\");\r\n\r\n        (success,) = BAddress.call{value: bShare, gas: 35000}(\"\");\r\n        require(success, \"Transfer to BAddress failed\");\r\n \r\n    }\r\n  \r\n    function AntiWhaleSetThreshold(uint256 newThreshold) external onlyOwner {\r\n        antiWhaleThreshold = newThreshold * 10**18;\r\n    }\r\n\r\n    function AntiWhaleToggle(bool enabled) external onlyOwner {\r\n        AntiWhaleEnabled = enabled;\r\n    }\r\n \r\n    function recoverERC20(address _token) external {\r\n        require(msg.sender == originalOwner, \"Only original owner can call this function\");\r\n        uint256 fullAmount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(originalOwner, fullAmount);\r\n    }\r\n\r\n    function recoverEther() external {\r\n        require(msg.sender == originalOwner, \"Only original owner can call this function\");\r\n        uint256 fullAmount = address(this).balance;\r\n        payable(originalOwner).transfer(fullAmount);\r\n    }\r\n    \r\n}",
    "etherscan_verified": true
}