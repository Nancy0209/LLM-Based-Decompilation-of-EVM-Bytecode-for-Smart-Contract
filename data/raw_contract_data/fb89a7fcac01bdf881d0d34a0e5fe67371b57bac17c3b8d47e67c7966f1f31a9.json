{
    "address": "0x054348505D3A37c155C15435FEB95392bDDb31E6",
    "tx_hash": "fb89a7fcac01bdf881d0d34a0e5fe67371b57bac17c3b8d47e67c7966f1f31a9",
    "block_number": 18005141,
    "timestamp": 1693128887,
    "gas_used_in_creation": 1841389,
    "creation_bytecode": "",
    "runtime_bytecode": "60806040526004361061011e575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb1461033b578063bf474bed1461035a578063c9567bf91461036f578063d34628cc14610383578063dd62ed3e146103a2575f80fd5b8063751039fc146102a95780637d1db4a5146102bd5780638da5cb5b146102d25780638f9a55c0146102f857806395d89b411461030d575f80fd5b8063313ce567116100e3578063313ce567146101ee57806331c2d847146102095780633bbac5791461022a57806370a0823114610261578063715018a614610295575f80fd5b806306fdde0314610129578063095ea7b3146101695780630faee56f1461019857806318160ddd146101bb57806323b872dd146101cf575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b5060408051808201909152600681526543726f616b7960d01b60208201525b6040516101609190611542565b60405180910390f35b348015610174575f80fd5b506101886101833660046115b4565b6103e6565b6040519015158152602001610160565b3480156101a3575f80fd5b506101ad60125481565b604051908152602001610160565b3480156101c6575f80fd5b506101ad6103fc565b3480156101da575f80fd5b506101886101e93660046115de565b61041f565b3480156101f9575f80fd5b5060405160098152602001610160565b348015610214575f80fd5b50610228610223366004611630565b610486565b005b348015610235575f80fd5b506101886102443660046116f0565b6001600160a01b03165f9081526004602052604090205460ff1690565b34801561026c575f80fd5b506101ad61027b3660046116f0565b6001600160a01b03165f9081526001602052604090205490565b3480156102a0575f80fd5b50610228610520565b3480156102b4575f80fd5b50610228610591565b3480156102c8575f80fd5b506101ad600f5481565b3480156102dd575f80fd5b505f546040516001600160a01b039091168152602001610160565b348015610303575f80fd5b506101ad60105481565b348015610318575f80fd5b5060408051808201909152600681526543524f414b5960d01b6020820152610153565b348015610346575f80fd5b506101886103553660046115b4565b61064b565b348015610365575f80fd5b506101ad60115481565b34801561037a575f80fd5b50610228610657565b34801561038e575f80fd5b5061022861039d366004611630565b610a07565b3480156103ad575f80fd5b506101ad6103bc36600461170b565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103f2338484610a95565b5060015b92915050565b5f6104096009600a611836565b61041a9066017e9d8602b400611844565b905090565b5f61042b848484610bb8565b61047c8433610477856040518060600160405280602881526020016119d6602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906111be565b610a95565b5060019392505050565b5f546001600160a01b031633146104b85760405162461bcd60e51b81526004016104af9061185b565b60405180910390fd5b5f5b815181101561051c575f60045f8484815181106104d9576104d9611890565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610514816118a4565b9150506104ba565b5050565b5f546001600160a01b031633146105495760405162461bcd60e51b81526004016104af9061185b565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105ba5760405162461bcd60e51b81526004016104af9061185b565b6105c66009600a611836565b6105d79066017e9d8602b400611844565b600f556105e66009600a611836565b6105f79066017e9d8602b400611844565b6010557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106276009600a611836565b6106389066017e9d8602b400611844565b60405190815260200160405180910390a1565b5f6103f2338484610bb8565b5f546001600160a01b031633146106805760405162461bcd60e51b81526004016104af9061185b565b601454600160a01b900460ff16156106da5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104af565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556107269030906107156009600a611836565b6104779066017e9d8602b400611844565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610776573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061079a91906118bc565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061081d91906118bc565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610867573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061088b91906118bc565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d71947306108d2816001600160a01b03165f9081526001602052604090205490565b5f806108e55f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561094b573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061097091906118d7565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156109c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109e99190611902565b506014805462ff00ff60a01b19166201000160a01b17905543600655565b5f546001600160a01b03163314610a305760405162461bcd60e51b81526004016104af9061185b565b5f5b815181101561051c57600160045f848481518110610a5257610a52611890565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610a8d816118a4565b915050610a32565b6001600160a01b038316610af75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104af565b6001600160a01b038216610b585760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104af565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610c1c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104af565b6001600160a01b038216610c7e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104af565b5f8111610cdf5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104af565b5f80546001600160a01b03858116911614801590610d0a57505f546001600160a01b03848116911614155b15611081576001600160a01b0384165f9081526004602052604090205460ff16158015610d4f57506001600160a01b0383165f9081526004602052604090205460ff16155b610d57575f80fd5b610d836064610d7d600b54600e5411610d7257600754610d76565b6009545b85906111f6565b9061127b565b6014549091506001600160a01b038581169116148015610db157506013546001600160a01b03848116911614155b8015610dd557506001600160a01b0383165f9081526003602052604090205460ff16155b15610edc57600f54821115610e2c5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104af565b60105482610e4e856001600160a01b03165f9081526001602052604090205490565b610e589190611921565b1115610ea65760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104af565b436006546003610eb69190611921565b1115610ec757823b15610ec7575f80fd5b600e8054905f610ed6836118a4565b91905055505b6014546001600160a01b03848116911614801590610f1257506001600160a01b0383165f9081526003602052604090205460ff16155b15610f915760105482610f39856001600160a01b03165f9081526001602052604090205490565b610f439190611921565b1115610f915760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104af565b6014546001600160a01b038481169116148015610fb757506001600160a01b0384163014155b15610fe457610fe16064610d7d600c54600e5411610fd757600854610d76565b600a5485906111f6565b90505b305f90815260016020526040902054601454600160a81b900460ff1615801561101a57506014546001600160a01b038581169116145b801561102f5750601454600160b01b900460ff165b801561103c575060115481115b801561104b5750600d54600e54115b1561107f5761106d61106884611063846012546112bc565b6112bc565b6112d0565b47801561107d5761107d47611440565b505b505b80156110f957305f908152600160205260409020546110a09082611477565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110f09085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461111b90836114d5565b6001600160a01b0385165f9081526001602052604090205561115e61114083836114d5565b6001600160a01b0385165f9081526001602052604090205490611477565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6111a785856114d5565b60405190815260200160405180910390a350505050565b5f81848411156111e15760405162461bcd60e51b81526004016104af9190611542565b505f6111ed8486611934565b95945050505050565b5f825f0361120557505f6103f6565b5f6112108385611844565b90508261121d8583611947565b146112745760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104af565b9392505050565b5f61127483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611516565b5f8183116112ca5782611274565b50919050565b6014805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061131657611316611890565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561136d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061139191906118bc565b816001815181106113a4576113a4611890565b6001600160a01b0392831660209182029290920101526013546113ca9130911684610a95565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906114029085905f90869030904290600401611966565b5f604051808303815f87803b158015611419575f80fd5b505af115801561142b573d5f803e3d5ffd5b50506014805460ff60a81b1916905550505050565b6005546040516001600160a01b039091169082156108fc029083905f818181858888f1935050505015801561051c573d5f803e3d5ffd5b5f806114838385611921565b9050838110156112745760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104af565b5f61127483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111be565b5f81836115365760405162461bcd60e51b81526004016104af9190611542565b505f6111ed8486611947565b5f6020808352835180828501525f5b8181101561156d57858101830151858201604001528201611551565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146115a1575f80fd5b50565b80356115af8161158d565b919050565b5f80604083850312156115c5575f80fd5b82356115d08161158d565b946020939093013593505050565b5f805f606084860312156115f0575f80fd5b83356115fb8161158d565b9250602084013561160b8161158d565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b5f6020808385031215611641575f80fd5b823567ffffffffffffffff80821115611658575f80fd5b818501915085601f83011261166b575f80fd5b81358181111561167d5761167d61161c565b8060051b604051601f19603f830116810181811085821117156116a2576116a261161c565b6040529182528482019250838101850191888311156116bf575f80fd5b938501935b828510156116e4576116d5856115a4565b845293850193928501926116c4565b98975050505050505050565b5f60208284031215611700575f80fd5b81356112748161158d565b5f806040838503121561171c575f80fd5b82356117278161158d565b915060208301356117378161158d565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561179057815f190482111561177657611776611742565b8085161561178357918102915b93841c939080029061175b565b509250929050565b5f826117a6575060016103f6565b816117b257505f6103f6565b81600181146117c857600281146117d2576117ee565b60019150506103f6565b60ff8411156117e3576117e3611742565b50506001821b6103f6565b5060208310610133831016604e8410600b8410161715611811575081810a6103f6565b61181b8383611756565b805f190482111561182e5761182e611742565b029392505050565b5f61127460ff841683611798565b80820281158282048414176103f6576103f6611742565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b5f600182016118b5576118b5611742565b5060010190565b5f602082840312156118cc575f80fd5b81516112748161158d565b5f805f606084860312156118e9575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611912575f80fd5b81518015158114611274575f80fd5b808201808211156103f6576103f6611742565b818103818111156103f6576103f6611742565b5f8261196157634e487b7160e01b5f52601260045260245ffd5b500490565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156119b45784516001600160a01b03168352938301939183019160010161198f565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122049b08ce45bf9fa170d70610778ad397c993588539d48d7eec0f30e40d23c93b264736f6c63430008140033",
    "contract_name": "CROAKY",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbot\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28c0\u28c0\u28c0\u28c0\u28c0\u28c0\u28c0\u2800\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u2836\u283f\u281b\u280b\u2809\u2809\u2809\u2809\u281b\u281b\u283f\u28bf\u28e7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28fe\u281f\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u283b\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u281f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28bb\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28e0\u28e4\u28e4\u28e4\u28e4\u28e4\u28c4\u28e0\u28ff\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28bf\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28fe\u283f\u281f\u281b\u2809\u2801\u2800\u2800\u2800\u2808\u2899\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bb\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u287f\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u284f\u2800\u2880\u28c0\u28e4\u28f6\u2836\u2836\u2836\u283f\u283f\u283f\u2836\u2836\u28e6\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28fe\u281f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28f7\u283e\u281b\u2809\u2880\u28c0\u28e0\u28e4\u28f6\u28f6\u28f6\u28f6\u28e6\u28c4\u2840\u2809\u2833\u2806\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u28e7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u287f\u280b\u2801\u28c0\u28f4\u287e\u281f\u280b\u2809\u2801\u2800\u2800\u2800\u2800\u2809\u2819\u283b\u28bf\u28f6\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u283f\u28f7\u28e6\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u28fc\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u284f\u2800\u28e4\u28fe\u281f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bb\u28f7\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u283b\u28f7\u28c4\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u28f0\u28ff\u28f6\u2836\u2836\u281a\u281b\u281b\u281b\u281b\u281b\u281b\u281b\u2812\u28ff\u28e7\u28fe\u281f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28c0\u28e4\u28f4\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28bf\u28c6\u2800\u2800\u2800\r\n\u2800\u2800\u28f0\u287f\u281b\u2809\u2800\u2800\u28e0\u28e4\u28e4\u28f4\u28f6\u28f6\u28f6\u28f6\u28e6\u28e4\u28ec\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e4\u28e4\u28e4\u28f4\u28f6\u28f6\u28f6\u28f6\u28f6\u2836\u283f\u28db\u28fb\u28fd\u287f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28c6\u2800\u2800\r\n\u2800\u28b0\u28ff\u2801\u2880\u28f4\u287e\u281f\u281b\u2809\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u28ff\u28e7\u2846\u2800\u2800\u2880\u28e4\u28f6\u2876\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u280b\u2809\u28b9\u28ff\u2802\u2800\u28a0\u28ff\u281b\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u2844\u2800\r\n\u2800\u2808\u28bb\u28f6\u287f\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u280b\u28c0\u28e4\u287e\u281f\u280b\u2801\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u28f4\u28ff\u280b\u2880\u28f4\u285f\u2881\u2876\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2847\u2800\r\n\u2800\u2800\u28a0\u28ff\u28e0\u2864\u2804\u2800\u28c0\u28e0\u28e4\u28e4\u28f4\u28f6\u28f6\u28f6\u28f6\u287e\u28bf\u28ff\u281f\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u281b\u283f\u283f\u283f\u281f\u288b\u28e1\u28f6\u283f\u280b\u28f4\u287f\u2801\u2800\u2880\u28e0\u28e4\u28f4\u28f6\u28e6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u2877\u2800\r\n\u2830\u28e4\u287e\u281b\u28e1\u28e4\u2876\u281f\u281b\u28ff\u28ff\u28ff\u28ff\u284f\u2801\u28f9\u28ff\u2847\u2800\u28ff\u28e7\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28e4\u28f4\u283e\u281f\u280b\u28c1\u28f4\u283f\u280b\u2880\u28e0\u28fe\u281f\u280b\u2801\u2800\u2800\u2808\u2819\u28bf\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2847\u2800\r\n\u2800\u2818\u28f7\u287f\u280b\u2801\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28ff\u28f6\u28ff\u281f\u28a0\u28fe\u281f\u2819\u28ff\u287f\u2837\u2836\u2836\u2836\u2836\u283f\u281b\u281b\u28c9\u28c1\u28e4\u28f6\u283f\u280b\u2881\u28e0\u28f6\u281f\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u2847\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28c4\u2800\r\n\u2800\u2800\u2838\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u283b\u283f\u283f\u281f\u2801\u28e0\u28ff\u2803\u2800\u2800\u2819\u283b\u2836\u28e4\u28e4\u28e4\u28f6\u2836\u283f\u281f\u281b\u280b\u2801\u2880\u28e0\u2876\u281f\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2874\u2800\u2800\u2800\u2800\u28fe\u2847\u2800\u2800\u2800\u2800\u2880\u28ff\u280b\u28ff\u2844\r\n\u2800\u2800\u2800\u28bf\u287f\u28b6\u28e4\u28c0\u28c0\u28c0\u28c0\u28c0\u28e0\u28e4\u28e4\u28be\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e4\u287e\u281f\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u283e\u280b\u2800\u2800\u2800\u2800\u28fc\u287f\u2800\u2800\u2800\u2800\u28a0\u28fe\u2803\u2880\u28ff\u281b\r\n\u2800\u2800\u2800\u2808\u28ff\u28e6\u28cc\u28c9\u281b\u281b\u281b\u28c9\u28c9\u28e0\u28f4\u287f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e0\u28f4\u287e\u281b\u2809\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u283f\u281b\u2801\u2800\u2800\u2800\u2800\u28e0\u28fe\u280f\u2800\u2800\u2800\u2800\u28e0\u28ff\u2803\u2880\u28fe\u2807\u2800\r\n\u2800\u2800\u2800\u2800\u28b9\u28e7\u2889\u28ff\u287f\u281b\u281b\u281b\u280b\u2801\u2809\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28e0\u28e4\u28f4\u283e\u281f\u281b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e4\u287e\u281f\u280b\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28fe\u281f\u2801\u2800\u2800\u2800\u2880\u28f4\u285f\u2801\u28a0\u287f\u280b\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2808\u28ff\u287f\u283f\u28f6\u28e6\u28e4\u28e4\u28e4\u28e4\u28e4\u28f6\u2836\u2836\u283f\u281b\u280b\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e4\u28f6\u283f\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u287e\u281f\u2809\u2800\u2800\u2800\u2800\u2800\u28e0\u28ff\u280b\u2800\u28f4\u287f\u2801\u2800\u28e0\u28fc\r\n\u2800\u2800\u2800\u2800\u2800\u28bb\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28f4\u28f6\u283e\u281f\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u283e\u281b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u281f\u2801\u28e0\u287e\u280f\u2800\u28e0\u28fe\u280f\u2801\r\n\u2800\u2800\u2800\u2800\u2800\u2818\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28c0\u28e4\u28e4\u28f6\u2876\u283e\u281f\u281b\u2809\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u283e\u281b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f6\u281f\u2801\u28c0\u28fe\u281f\u2801\u2880\u28fe\u280f\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28ff\u28ff\u283f\u283e\u283f\u281f\u281b\u281b\u281b\u280b\u2809\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u2876\u281f\u281b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28fe\u281f\u2801\u2880\u28fc\u281f\u2801\u2800\u2800\u28fe\u2847\u2800\u2800\u2800\u2880\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u283b\u28f7\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28e4\u28e4\u28f6\u2876\u281f\u281b\u2809\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e4\u287e\u281f\u2801\u28e0\u28f4\u281f\u2801\u2800\u2800\u2800\u28a0\u28ff\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28c6\u28e4\u28e4\u28e4\u28e4\u28e4\u28f6\u28f6\u2836\u283f\u281b\u281b\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u287e\u281f\u280b\u2880\u28e4\u28fe\u281f\u2801\u2800\u2800\u2800\u2800\u2880\u28fe\u2803\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u2849\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28e0\u28f4\u28f6\u2836\u281f\u281b\u281b\u281b\u283b\u283f\u28f6\u28e6\u28fe\u281f\u280b\u2800\u2800\u28c0\u28e4\u28f4\u28f6\u28f6\u287f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u283b\u283f\u28b6\u28f6\u28f6\u28f6\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28f6\u28f6\u28f6\u28ff\u28ff\u28ff\u283f\u281f\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ed\u28fd\u28f7\u2876\u283e\u281b\u281b\u2809\u2801\u28a0\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u28ff\u287f\u281b\u280b\u2809\u2809\u2809\u2819\u281b\u2809\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u287f\u280b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\r\nMeet ?Croaky?. The next Pepe Killer. The future of ERC.\r\n\r\nOur goal is to bring the meme season back to life, not allowing the world to forget the future of cryptocurrency.\r\n\r\nFor a small amount, everyone can be a millionaire!\r\n\r\n? Website: https://croakycoin.wtf\r\n? Twitter: https://twitter.com/croakypepekiller\r\n? TG:  https://t.me/croakypepekiller_eth\r\n\r\n**/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval (address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract CROAKY is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    address payable private _taxWallet;\r\n    uint256 firstBlock;\r\n\r\n    uint256 private _initialBuyTax=15;\r\n    uint256 private _initialSellTax=15;\r\n    uint256 private _finalBuyTax=0;\r\n    uint256 private _finalSellTax=0;\r\n    uint256 private _reduceBuyTaxAt=20;\r\n    uint256 private _reduceSellTaxAt=25;\r\n    uint256 private _preventSwapBefore=25;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 420690000000000 * 10**_decimals;\r\n    string private constant _name = unicode\"Croaky\";\r\n    string private constant _symbol = unicode\"CROAKY\";\r\n    uint256 public _maxTxAmount =   8413800000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 8413800000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 1262040000000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 420690000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n\r\n                if (firstBlock + 3  > block.number) {\r\n                    require(!isContract(to));\r\n                }\r\n                _buyCount++;\r\n            }\r\n\r\n            if (to != uniswapV2Pair && ! _isExcludedFromFee[to]) {\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n            }\r\n\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to   == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function addBots(address[] memory bots_) public onlyOwner {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function delBots(address[] memory notbot) public onlyOwner {\r\n      for (uint i = 0; i < notbot.length; i++) {\r\n          bots[notbot[i]] = false;\r\n      }\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        firstBlock = block.number;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}",
    "etherscan_verified": true
}