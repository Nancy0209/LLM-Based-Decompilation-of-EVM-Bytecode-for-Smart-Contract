{
    "address": "0x5352d5312F76de5a8f335d7df9301c6A4a209b0e",
    "tx_hash": "151b44341b62328d37069f3191398c3eeec9fc0f2dbeafe958bfbc7264b68114",
    "block_number": 18006666,
    "timestamp": 1693147355,
    "gas_used_in_creation": 5442261,
    "creation_bytecode": "60806040526014600755601460085560056009556005600a556019600b556019600c556019600d556000600e556012600a6200003c91906200081e565b6127106200004b91906200095b565b600f556012600a6200005e91906200081e565b614e206200006d91906200095b565b6010556012600a6200008091906200081e565b6127106200008f91906200095b565b6011556012600a620000a291906200081e565b612710620000b191906200095b565b601255348015620000c157600080fd5b506040516200369c3803806200369c8339818101604052810190620000e791906200072b565b62000107620000fb620005dc60201b60201c565b620005e460201b60201c565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600a6200015891906200081e565b620f42406200016891906200095b565b600160006200017c620005dc60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160036000620001d0620006a860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550737a250d5630b4cf539739df2c5dacb4c659f2488d601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156200038f57600080fd5b505afa158015620003a4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ca9190620006ff565b73ffffffffffffffffffffffffffffffffffffffff1663c9c6539630601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156200044f57600080fd5b505afa15801562000464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200048a9190620006ff565b6040518363ffffffff1660e01b8152600401620004a992919062000779565b602060405180830381600087803b158015620004c457600080fd5b505af1158015620004d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004ff9190620006ff565b601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200054f620005dc60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6012600a620005ae91906200081e565b620f4240620005be91906200095b565b604051620005cd9190620007a6565b60405180910390a35062000a8b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081519050620006e28162000a57565b92915050565b600081519050620006f98162000a71565b92915050565b6000602082840312156200071257600080fd5b60006200072284828501620006d1565b91505092915050565b6000602082840312156200073e57600080fd5b60006200074e84828501620006e8565b91505092915050565b6200076281620009bc565b82525050565b620007738162000a04565b82525050565b600060408201905062000790600083018562000757565b6200079f602083018462000757565b9392505050565b6000602082019050620007bd600083018462000768565b92915050565b6000808291508390505b60018511156200081557808604811115620007ed57620007ec62000a1b565b5b6001851615620007fd5780820291505b80810290506200080d8562000a4a565b9450620007cd565b94509492505050565b60006200082b8262000a04565b9150620008388362000a0e565b9250620008677fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846200086f565b905092915050565b60008262000881576001905062000954565b8162000891576000905062000954565b8160018114620008aa5760028114620008b557620008eb565b600191505062000954565b60ff841115620008ca57620008c962000a1b565b5b8360020a915084821115620008e457620008e362000a1b565b5b5062000954565b5060208310610133831016604e8410600b8410161715620009255782820a9050838111156200091f576200091e62000a1b565b5b62000954565b620009348484846001620007c3565b925090508184048111156200094e576200094d62000a1b565b5b81810290505b9392505050565b6000620009688262000a04565b9150620009758362000a04565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620009b157620009b062000a1b565b5b828202905092915050565b6000620009c982620009e4565b9050919050565b6000620009dd82620009bc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b62000a6281620009bc565b811462000a6e57600080fd5b50565b62000a7c81620009d0565b811462000a8857600080fd5b50565b612c018062000a9b6000396000f3fe60806040526004361061012e5760003560e01c806378e97925116100ab578063a9059cbb1161006f578063a9059cbb146103cd578063bf474bed1461040a578063c9567bf914610435578063ce7460241461044c578063dd62ed3e14610463578063f2fde38b146104a057610135565b806378e97925146102f65780637d1db4a5146103215780638da5cb5b1461034c5780638f9a55c01461037757806395d89b41146103a257610135565b8063313ce567116100f2578063313ce567146102355780634cf088d91461026057806370a082311461028b578063715018a6146102c8578063751039fc146102df57610135565b806306fdde031461013a578063095ea7b3146101655780630faee56f146101a257806318160ddd146101cd57806323b872dd146101f857610135565b3661013557005b600080fd5b34801561014657600080fd5b5061014f6104c9565b60405161015c9190612209565b60405180910390f35b34801561017157600080fd5b5061018c60048036038101906101879190611daf565b610506565b60405161019991906121d3565b60405180910390f35b3480156101ae57600080fd5b506101b7610524565b6040516101c491906123ab565b60405180910390f35b3480156101d957600080fd5b506101e261052a565b6040516101ef91906123ab565b60405180910390f35b34801561020457600080fd5b5061021f600480360381019061021a9190611d60565b61054d565b60405161022c91906121d3565b60405180910390f35b34801561024157600080fd5b5061024a610605565b6040516102579190612420565b60405180910390f35b34801561026c57600080fd5b5061027561060e565b60405161028291906121ee565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad9190611cd2565b610634565b6040516102bf91906123ab565b60405180910390f35b3480156102d457600080fd5b506102dd6106c0565b005b3480156102eb57600080fd5b506102f46106d4565b005b34801561030257600080fd5b5061030b610774565b60405161031891906123ab565b60405180910390f35b34801561032d57600080fd5b5061033661077a565b60405161034391906123ab565b60405180910390f35b34801561035857600080fd5b50610361610780565b60405161036e919061212e565b60405180910390f35b34801561038357600080fd5b5061038c6107a9565b60405161039991906123ab565b60405180910390f35b3480156103ae57600080fd5b506103b76107af565b6040516103c49190612209565b60405180910390f35b3480156103d957600080fd5b506103f460048036038101906103ef9190611daf565b6107ec565b60405161040191906121d3565b60405180910390f35b34801561041657600080fd5b5061041f61080a565b60405161042c91906123ab565b60405180910390f35b34801561044157600080fd5b5061044a610810565b005b34801561045857600080fd5b50610461610a13565b005b34801561046f57600080fd5b5061048a60048036038101906104859190611d24565b610a26565b60405161049791906123ab565b60405180910390f35b3480156104ac57600080fd5b506104c760048036038101906104c29190611cd2565b610aad565b005b60606040518060400160405280600981526020017f4c696d626f20426f740000000000000000000000000000000000000000000000815250905090565b600061051a610513610b31565b8484610b39565b6001905092915050565b60125481565b60006012600a61053a9190612575565b620f42406105489190612693565b905090565b600061055a848484610d04565b6105fa84610566610b31565b84600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006105b0610b31565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105f591906126ed565b610b39565b600190509392505050565b60006012905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601460169054906101000a900460ff16610679577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6106c86116f3565b6106d26000611771565b565b6106dc6116f3565b6012600a6106ea9190612575565b620f42406106f89190612693565b600f819055506012600a61070c9190612575565b620f424061071a9190612693565b6010819055507f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6012600a61074f9190612575565b620f424061075d9190612693565b60405161076a91906123ab565b60405180910390a1565b60065481565b600f5481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60105481565b60606040518060400160405280600581526020017f4c494d424f000000000000000000000000000000000000000000000000000000815250905090565b60006108006107f9610b31565b8484610d04565b6001905092915050565b60115481565b6108186116f3565b60148054906101000a900460ff1615610866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085d9061238b565b60405180910390fd5b6001601460166101000a81548160ff021916908315150217905550737a250d5630b4cf539739df2c5dacb4c659f2488d601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061091e30601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166012600a61090b9190612575565b620f42406109199190612693565b610b39565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d719473061096730610634565b600080610972610780565b426040518863ffffffff1660e01b815260040161099496959493929190612172565b6060604051808303818588803b1580156109ad57600080fd5b505af11580156109c1573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109e69190611deb565b5050504260068190555060016014806101000a81548160ff02191690831515021790555043600581905550565b610a1b6116f3565b610a2447611835565b565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610ab56116f3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c9061226b565b60405180910390fd5b610b2e81611771565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba09061236b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c109061228b565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610cf791906123ab565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b9061232b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddb9061222b565b60405180910390fd5b60008111610e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1e9061230b565b60405180910390fd5b6000610e31610780565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610e9f5750610e6f610780565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561136857601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015610f4f5750601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b8015610fa55750600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156110ba576064600b54600e5411610fbf57600754610fc3565b6009545b83610fce9190612693565b610fd891906124f1565b9050600f5482111561101f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110169061224b565b60405180910390fd5b6010548261102c85610634565b611036919061249b565b1115611077576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106e9061234b565b60405180910390fd5b436003600554611087919061249b565b11156110a15761109683611864565b156110a057600080fd5b5b600e60008154809291906110b4906127df565b91905055505b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156111625750600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156111c0576010548261117485610634565b61117e919061249b565b11156111bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b69061234b565b60405180910390fd5b5b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614801561124957503073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b1561127f576064600c54600e541161126357600854611267565b600a545b836112729190612693565b61127c91906124f1565b90505b600061128a30610634565b9050601460159054906101000a900460ff161580156112f65750601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b801561130e5750601460169054906101000a900460ff165b801561131b575060115481115b801561132a5750600d54600e54115b156113665761134c6113478461134284601254611877565b611877565b611890565b600047905060008111156113645761136347611835565b5b505b505b60008111156114655780600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113bc919061249b565b600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161145c91906123ab565b60405180910390a35b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114b091906126ed565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080826114ff91906126ed565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611549919061249b565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83856115e791906126ed565b6040516115f491906123ab565b60405180910390a3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156116ed57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347e7ef2485838561169d91906126ed565b6040518363ffffffff1660e01b81526004016116ba929190612149565b600060405180830381600087803b1580156116d457600080fd5b505af11580156116e8573d6000803e3d6000fd5b505050505b50505050565b6116fb610b31565b73ffffffffffffffffffffffffffffffffffffffff16611719610780565b73ffffffffffffffffffffffffffffffffffffffff161461176f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611766906122eb565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611861600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682611b8a565b50565b600080823b905060008111915050919050565b60008183116118865782611888565b815b905092915050565b6001601460156101000a81548160ff0219169083151502179055506000600267ffffffffffffffff8111156118ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561191c5781602001602082028036833780820191505090505b509050308160008151811061195a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156119fc57600080fd5b505afa158015611a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a349190611cfb565b81600181518110611a6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611ad530601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684610b39565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b8152600401611b399594939291906123c6565b600060405180830381600087803b158015611b5357600080fd5b505af1158015611b67573d6000803e3d6000fd5b50505050506000601460156101000a81548160ff02191690831515021790555050565b80471015611bcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc4906122cb565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051611bf390612119565b60006040518083038185875af1925050503d8060008114611c30576040519150601f19603f3d011682016040523d82523d6000602084013e611c35565b606091505b5050905080611c79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c70906122ab565b60405180910390fd5b505050565b600081359050611c8d81612b9d565b92915050565b600081519050611ca281612b9d565b92915050565b600081359050611cb781612bb4565b92915050565b600081519050611ccc81612bb4565b92915050565b600060208284031215611ce457600080fd5b6000611cf284828501611c7e565b91505092915050565b600060208284031215611d0d57600080fd5b6000611d1b84828501611c93565b91505092915050565b60008060408385031215611d3757600080fd5b6000611d4585828601611c7e565b9250506020611d5685828601611c7e565b9150509250929050565b600080600060608486031215611d7557600080fd5b6000611d8386828701611c7e565b9350506020611d9486828701611c7e565b9250506040611da586828701611ca8565b9150509250925092565b60008060408385031215611dc257600080fd5b6000611dd085828601611c7e565b9250506020611de185828601611ca8565b9150509250929050565b600080600060608486031215611e0057600080fd5b6000611e0e86828701611cbd565b9350506020611e1f86828701611cbd565b9250506040611e3086828701611cbd565b9150509250925092565b6000611e468383611e52565b60208301905092915050565b611e5b81612721565b82525050565b611e6a81612721565b82525050565b6000611e7b8261244b565b611e85818561246e565b9350611e908361243b565b8060005b83811015611ec1578151611ea88882611e3a565b9750611eb383612461565b925050600181019050611e94565b5085935050505092915050565b611ed781612733565b82525050565b611ee681612776565b82525050565b611ef58161279a565b82525050565b6000611f0682612456565b611f10818561248a565b9350611f208185602086016127ac565b611f2981612886565b840191505092915050565b6000611f4160238361248a565b9150611f4c826128a4565b604082019050919050565b6000611f6460198361248a565b9150611f6f826128f3565b602082019050919050565b6000611f8760268361248a565b9150611f928261291c565b604082019050919050565b6000611faa60228361248a565b9150611fb58261296b565b604082019050919050565b6000611fcd603a8361248a565b9150611fd8826129ba565b604082019050919050565b6000611ff0601d8361248a565b9150611ffb82612a09565b602082019050919050565b600061201360208361248a565b915061201e82612a32565b602082019050919050565b600061203660298361248a565b915061204182612a5b565b604082019050919050565b600061205960258361248a565b915061206482612aaa565b604082019050919050565b600061207c601a8361248a565b915061208782612af9565b602082019050919050565b600061209f60008361247f565b91506120aa82612b22565b600082019050919050565b60006120c260248361248a565b91506120cd82612b25565b604082019050919050565b60006120e560178361248a565b91506120f082612b74565b602082019050919050565b6121048161275f565b82525050565b61211381612769565b82525050565b600061212482612092565b9150819050919050565b60006020820190506121436000830184611e61565b92915050565b600060408201905061215e6000830185611e61565b61216b60208301846120fb565b9392505050565b600060c0820190506121876000830189611e61565b61219460208301886120fb565b6121a16040830187611eec565b6121ae6060830186611eec565b6121bb6080830185611e61565b6121c860a08301846120fb565b979650505050505050565b60006020820190506121e86000830184611ece565b92915050565b60006020820190506122036000830184611edd565b92915050565b600060208201905081810360008301526122238184611efb565b905092915050565b6000602082019050818103600083015261224481611f34565b9050919050565b6000602082019050818103600083015261226481611f57565b9050919050565b6000602082019050818103600083015261228481611f7a565b9050919050565b600060208201905081810360008301526122a481611f9d565b9050919050565b600060208201905081810360008301526122c481611fc0565b9050919050565b600060208201905081810360008301526122e481611fe3565b9050919050565b6000602082019050818103600083015261230481612006565b9050919050565b6000602082019050818103600083015261232481612029565b9050919050565b600060208201905081810360008301526123448161204c565b9050919050565b600060208201905081810360008301526123648161206f565b9050919050565b60006020820190508181036000830152612384816120b5565b9050919050565b600060208201905081810360008301526123a4816120d8565b9050919050565b60006020820190506123c060008301846120fb565b92915050565b600060a0820190506123db60008301886120fb565b6123e86020830187611eec565b81810360408301526123fa8186611e70565b90506124096060830185611e61565b61241660808301846120fb565b9695505050505050565b6000602082019050612435600083018461210a565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006124a68261275f565b91506124b18361275f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156124e6576124e5612828565b5b828201905092915050565b60006124fc8261275f565b91506125078361275f565b92508261251757612516612857565b5b828204905092915050565b6000808291508390505b600185111561256c5780860481111561254857612547612828565b5b60018516156125575780820291505b808102905061256585612897565b945061252c565b94509492505050565b60006125808261275f565b915061258b83612769565b92506125b87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846125c0565b905092915050565b6000826125d0576001905061268c565b816125de576000905061268c565b81600181146125f457600281146125fe5761262d565b600191505061268c565b60ff8411156126105761260f612828565b5b8360020a91508482111561262757612626612828565b5b5061268c565b5060208310610133831016604e8410600b84101617156126625782820a90508381111561265d5761265c612828565b5b61268c565b61266f8484846001612522565b9250905081840481111561268657612685612828565b5b81810290505b9392505050565b600061269e8261275f565b91506126a98361275f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126e2576126e1612828565b5b828202905092915050565b60006126f88261275f565b91506127038361275f565b92508282101561271657612715612828565b5b828203905092915050565b600061272c8261273f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061278182612788565b9050919050565b60006127938261273f565b9050919050565b60006127a58261275f565b9050919050565b60005b838110156127ca5780820151818401526020810190506127af565b838111156127d9576000848401525b50505050565b60006127ea8261275f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561281d5761281c612828565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4578636565647320746865205f6d61785478416d6f756e742e00000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5472616e7366657220616d6f756e74206d75737420626520677265617465722060008201527f7468616e207a65726f0000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f4578636565647320746865206d617857616c6c657453697a652e000000000000600082015250565b50565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f74726164696e6720697320616c7265616479206f70656e000000000000000000600082015250565b612ba681612721565b8114612bb157600080fd5b50565b612bbd8161275f565b8114612bc857600080fd5b5056fea2646970667358221220a51d08868c183a4bfcd5d0bff0c7d3e41e8ae906bc9593d0fca758ed8da9b1b964736f6c6343000801003300000000000000000000000051310ed331fb85314977e02b35424dafae5c741d",
    "runtime_bytecode": "",
    "contract_name": "Token",
    "compiler_version": "v0.8.1+commit.df193b15",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"staking_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\n\\ninterface IStaking {\\n\\tfunction deposit(address, uint) external;\\n}\"\r\n    },\r\n    \"contracts/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\n\\ninterface IUniswapV2Factory {\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\n}\"\r\n    },\r\n    \"contracts/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\"\r\n    },\r\n    \"contracts/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\n\\n/**\\n * The Limbo Telegram Bot - Stake your $LIMBO to earn native $ETH rewards.\\n *\\n * Bot: https://t.me/LimboTokenERC_bot\\n * Docs: https://docs.limbotokenerc.com/\\n * Website: https://limbotokenerc.com/\\n * Twitter: https://twitter.com/LimboTokenERC\\n * Telegram: https://t.me/limbotokenerc\\n*/\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\nimport \\\"./IStaking.sol\\\";\\n\\ncontract Token is IERC20, Ownable {\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _isExcludedFromFee;\\n\\tIStaking public staking;\\n    uint256 private firstBlock;\\n\\tuint256 public startTime;\\n\\n    uint256 private _initialBuyTax = 20;\\n    uint256 private _initialSellTax = 20;\\n    uint256 private _finalBuyTax = 5;\\n    uint256 private _finalSellTax = 5;\\n    uint256 private _reduceBuyTaxAt = 25;\\n    uint256 private _reduceSellTaxAt = 25;\\n    uint256 private _preventSwapBefore = 25;\\n    uint256 private _buyCount = 0;\\n\\n    uint8 private constant _decimals = 18;\\n    uint256 private constant _tTotal = 1000000 * 10**_decimals;\\n    string private constant _name = unicode\\\"Limbo Bot\\\";\\n    string private constant _symbol = unicode\\\"LIMBO\\\";\\n    uint256 public _maxTxAmount = 10000 * 10**_decimals;\\n    uint256 public _maxWalletSize = 20000 * 10**_decimals;\\n    uint256 public _taxSwapThreshold = 10000 * 10**_decimals;\\n    uint256 public _maxTaxSwap = 10000 * 10**_decimals;\\n\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address private uniswapV2Pair;\\n    bool private tradingOpen;\\n    bool private inSwap;\\n    bool private swapEnabled;\\n\\n    event MaxTxAmountUpdated(uint _maxTxAmount);\\n\\n    modifier lockTheSwap {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor(IStaking staking_) {\\n\\t\\tstaking = staking_;\\n        _balances[_msgSender()] = _tTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[address(staking_)] = true;\\n        \\n\\t\\tuniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n\\t\\tassert(swapEnabled);\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        uint256 taxAmount = 0;\\n\\n        if (from != owner() && to != owner()) {\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to] ) {\\n            \\ttaxAmount = amount * (_buyCount > _reduceBuyTaxAt ? _finalBuyTax : _initialBuyTax) / 100;\\n\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\n\\n                if (firstBlock + 3 > block.number) {\\n                    require(!isContract(to));\\n                }\\n\\n                _buyCount++;\\n            }\\n\\n            if (to != uniswapV2Pair && !_isExcludedFromFee[to]) {\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\n            }\\n\\n            if (to == uniswapV2Pair && from != address(this)){\\n                taxAmount = amount * (_buyCount > _reduceSellTaxAt ? _finalSellTax : _initialSellTax) / 100 ;\\n            }\\n\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance > _taxSwapThreshold && _buyCount > _preventSwapBefore) {\\n                swapTokensForEth(min(amount, min(contractTokenBalance, _maxTaxSwap)));\\n                uint256 contractETHBalance = address(this).balance;\\n                if (contractETHBalance > 0) {\\n                    sendETHToFee(address(this).balance);\\n                }\\n            }\\n        }\\n\\n        if (taxAmount > 0){\\n          _balances[address(this)] = _balances[address(this)] + taxAmount;\\n          emit Transfer(from, address(this), taxAmount);\\n        }\\n\\n        _balances[from] = _balances[from] - amount;\\n        _balances[to] = _balances[to] + (amount - taxAmount);\\n        emit Transfer(from, to, amount - taxAmount);\\n\\n\\t\\tif (to == address(staking)) {\\n\\t\\t\\tstaking.deposit(from, amount - taxAmount);\\n\\t\\t}\\n    }\\n\\n\\tfunction recover() external onlyOwner {\\n\\t\\tsendETHToFee(address(this).balance);\\n\\t}\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256){\\n      return a > b ? b : a;\\n    }\\n\\n    function isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function removeLimits() external onlyOwner{\\n        _maxTxAmount = _tTotal;\\n        _maxWalletSize=_tTotal;\\n        emit MaxTxAmountUpdated(_tTotal);\\n    }\\n\\n    function sendETHToFee(uint256 amount) private {\\n\\t\\tAddress.sendValue(payable(address(staking)), amount);\\n    }\\n\\n    function openTrading() external onlyOwner {\\n        require(!tradingOpen, \\\"trading is already open\\\");\\n        swapEnabled = true;\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tbalanceOf(address(this)),\\n\\t\\t\\t0,\\n\\t\\t\\t0,\\n\\t\\t\\towner(),\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t\\tstartTime = block.timestamp;\\n\\t\\ttradingOpen = true;\\n        firstBlock = block.number;\\n    }\\n\\n    receive() external payable {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
    "etherscan_verified": true
}