{
    "address": "0x03eB7Fe6801893F6006127B5248809e8CFbdd89D",
    "tx_hash": "0bfd31710433fed0c5ac45e00b2fbbe3cb273219b204bcf058ea1ad6bb13615d",
    "block_number": 18009232,
    "timestamp": 1693178435,
    "gas_used_in_creation": 3139147,
    "creation_bytecode": "6080604052603c60085534801562000015575f80fd5b506040516200359538038062003595833981016040819052620000389162000064565b5f80546001600160a01b03191633179055600994909455600a92909255600b55600c55600d55620000a1565b5f805f805f60a0868803121562000079575f80fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6134e680620000af5f395ff3fe608060405234801561000f575f80fd5b50600436106101a1575f3560e01c8063a54e2a2f116100f3578063ca4b208b11610093578063e1dfe6651161006e578063e1dfe665146104c9578063f0fbcbd4146104dc578063f5eaf974146104ef578063fcd1bff914610511575f80fd5b8063ca4b208b1461049b578063cf094497146104ad578063dbaa7b88146104b6575f80fd5b8063be2f5ca1116100ce578063be2f5ca11461045f578063c19a27a114610480578063c46ed45a14610489578063c4ad34a214610492575f80fd5b8063a54e2a2f14610430578063ae8d3ddb14610443578063b55aa63a1461044c575f80fd5b80634644d6e41161015e5780638306264111610139578063830626411461036757806386b1be231461037a57806396526d3e1461038f5780639e3f8428146103a2575f80fd5b80634644d6e4146102b45780636e9b277f14610331578063804d3d4214610354575f80fd5b8063035b3b35146101a557806318b62acd146101c157806322af00fa146101ec5780633c4f8bfc1461027557806342b79ea41461029557806344f9b5981461029e575b5f80fd5b6101ae600a5481565b6040519081526020015b60405180910390f35b6001546101d4906001600160a01b031681565b6040516001600160a01b0390911681526020016101b8565b61025f6101fa366004612f54565b600660208190525f918252604090912080546001820154600283015460038401546004850154600586015496860154600790960154949693956001600160a01b03909316949193909260ff80831693610100840482169362010000900490911691908a565b6040516101b89a99989796959493929190612f6b565b610288610283366004612f54565b610539565b6040516101b891906130b0565b6101ae60045481565b6102a6610698565b6040516101b89291906130c2565b6102ff6102c2366004612f54565b60076020525f9081526040902080546001820154600283015460039093015491926001600160a01b0391821692909160ff82169161010090041685565b604080519586526001600160a01b0394851660208701528501929092521515606084015216608082015260a0016101b8565b61034461033f3660046130fe565b610815565b60405190151581526020016101b8565b6101ae610362366004613137565b6109a6565b6101ae61037536600461315f565b610d6d565b61038d610388366004613195565b611463565b005b61038d61039d366004613137565b6114d2565b6104196103b0366004612f54565b600560208190525f9182526040909120805460018201546002830154600384015460048501549585015460068601546007870154600888015460099098015496986001600160a01b03968716989690951696939592939192909160ff808216916101009004168b565b6040516101b89b9a999897969594939291906131b5565b6102a661043e366004613226565b611a91565b6101ae60095481565b61038d61045a36600461324f565b611c9b565b61047261046d366004612f54565b611df0565b6040516101b892919061329b565b6101ae60025481565b6101ae600b5481565b6101ae600c5481565b5f546101d4906001600160a01b031681565b6101ae60035481565b6103446104c436600461315f565b611fa3565b6104726104d7366004613226565b6124e3565b61038d6104ea366004612f54565b6126ac565b6101ae6104fd366004612f54565b5f9081526005602052604090206007015490565b61052461051f366004613353565b612beb565b604080519283526020830191909152016101b8565b6040805160018082528183019092526060915f9190816020015b61055b612e8a565b815260200190600190039081610553575050600254909150805b801561068f575f8181526005602052604090205485900361067d575f818152600560208181526040928390208351610160810185528154815260018201546001600160a01b03908116938201939093526002808301549093169481019490945260038101546060850152600481015460808501529182015460a0840152600682015460c0840152600782015460e08401526008820154610100840152600982015461012084019160ff9091169081111561063157610631612fbf565b600281111561064257610642612fbf565b815260099190910154610100900460ff161515602090910152835184905f9061066d5761066d613391565b602002602001018190525061068f565b80610687816133b9565b915050610575565b50909392505050565b60605f8060025467ffffffffffffffff8111156106b7576106b761337d565b6040519080825280602002602001820160405280156106f057816020015b6106dd612e8a565b8152602001906001900390816106d55790505b506002549091505f905b801561080b575f818152600560208181526040928390208351610160810185528154815260018201546001600160a01b03908116938201939093526002808301549093169481019490945260038101546060850152600481015460808501529182015460a0840152600682015460c0840152600782015460e08401526008820154610100840152600982015461012084019160ff909116908111156107a1576107a1612fbf565b60028111156107b2576107b2612fbf565b815260099190910154610100900460ff16151560209091015283518490849081106107df576107df613391565b602002602001018190525081806107f5906133ce565b9250508080610803906133b9565b9150506106fa565b5090939092509050565b5f80546001600160a01b0316331461089a5760405162461bcd60e51b815260206004820152603d60248201527f6f6e6c7920646576656c6f7065722063616e2061646420737570706f7274656460448201527f20746f6b656e73204020416464537570706f72746564546f6b656e282900000060648201526084015b60405180910390fd5b60015f5b60045481116108e0575f818152600760205260409020600101546001600160a01b038088169116036108ce575f91505b806108d8816133ce565b91505061089e565b50801561099e5760048054905f6108f6836133ce565b9091555050600480545f81815260076020908152604091829020928355600180840180546001600160a01b0319166001600160a01b038c8116918217909255600286018b90556003860180546001600160a81b031916610100938c1693840217909317909255945483519081529182015290810192909252907f334e38326d94e1c4144737ce1013806648ec009e6461fa744e2ce57d5d151f5e9060600160405180910390a1505b949350505050565b5f80600854426109b691906133e6565b905042811015610a235760405162461bcd60e51b815260206004820152603260248201527f42657474696e672063616e6e6f7420737461727420696e20746865207061737460448201527120402043726561746542657474696e67282960701b6064820152608401610891565b5f60095484610a3291906133f9565b9050818111610aa95760405162461bcd60e51b815260206004820152603860248201527f496e76616c696420656e642074696d652028656e6454696d65203c207374617260448201527f7454696d652920402043726561746542657474696e67282900000000000000006064820152608401610891565b5f600a5485610ab891906133f9565b9050828111610b31576040805162461bcd60e51b81526020600482015260248101919091527f496e76616c69642070656e64696e672074696d65202870656e64696e6754696d60448201527f65203c20737461727454696d652920402043726561746542657474696e6728296064820152608401610891565b6002805433915f610b41836133ce565b91905055505f805b6004548111610bae575f818152600760205260409020600101546001600160a01b038a81169116148015610b9257505f8181526007602052604090206003015460ff1615156001145b15610b9c57600191505b80610ba6816133ce565b915050610b49565b50600181151514610c185760405162461bcd60e51b815260206004820152602e60248201527f746f6b656e2061646472657373206e6f7420737570706f72746564212040204360448201526d726561746542657474696e67282960901b6064820152608401610891565b5f60055f60025481526020019081526020015f20905088816001015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555082816002015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550600254815f01819055508581600301819055508781600401819055508381600501819055505f81600601819055505f81600701819055505f81600801819055505f816009015f6101000a81548160ff02191690836002811115610ce357610ce3612fbf565b021790555060098101805461ff0019169055600254604080519182526001600160a01b038b8116602084015285168282015260608201889052608082018a905260a082018690525f60c0830152517f23323f00aa2a740018d064c981339a0a67ad972496f643315dead463459cea379181900360e00190a160025496505050505050505b92915050565b5f838152600560205260408120600101546001600160a01b03868116911614610de95760405162461bcd60e51b815260206004820152602860248201527f696e636f6d70617469626c6520746f6b656e2061646472657373204020437265604482015267617465426574282960c01b6064820152608401610891565b5f84118015610dfa57506002548411155b610e465760405162461bcd60e51b815260206004820181905260248201527f496e76616c69642062657474696e6720494420402043726561746542657428296044820152606401610891565b5f8481526005602052604081206009015460ff166002811115610e6b57610e6b612fbf565b14610ecb5760405162461bcd60e51b815260206004820152602a60248201527f42657474696e67206973206e6f74206f70656e20666f722062657473204020436044820152697265617465426574282960b01b6064820152608401610891565b5f84815260056020819052604090912001544210610f405760405162461bcd60e51b815260206004820152602c60248201527f42657474696e6720697320636c6f73656420666f72206e65772062657473204060448201526b20437265617465426574282960a01b6064820152608401610891565b5f8211610f8f5760405162461bcd60e51b815260206004820181905260248201527f496e76616c69642062657420616d6f756e7420402043726561746542657428296044820152606401610891565b5f80610f9b8633612beb565b91509150805f14610fee5760405162461bcd60e51b815260206004820152601e60248201527f77726f6e672062657474696e67206964204020437265617465426574282900006044820152606401610891565b81156110535760405162461bcd60e51b815260206004820152602e60248201527f596f7520616c726561647920626564206f6e20746869732062657474696e672160448201526d204020437265617465426574282960901b6064820152608401610891565b6040516370a0823160e01b8152336004820152879085906001600160a01b038316906370a0823190602401602060405180830381865afa158015611099573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110bd919061340c565b101561111c5760405162461bcd60e51b815260206004820152602860248201527f496e73756666696369656e7420746f6b656e2062616c616e6365204020437265604482015267617465426574282960c01b6064820152608401610891565b60405163095ea7b360e01b8152306004820152602481018690526001600160a01b0382169063095ea7b3906044016020604051808303815f875af1158015611166573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061118a9190613423565b6111ea5760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420617070726f76696e6720746f6b656e207472616e736665722120402060448201526a437265617465426574282960a81b6064820152608401610891565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038216906323b872dd906064016020604051808303815f875af115801561123a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061125e9190613423565b6112aa5760405162461bcd60e51b815260206004820152601d60248201527f5472616e73666572206661696c656420402043726561746542657428290000006044820152606401610891565b5f6112b58887612c6b565b90505f6112c282886133f9565b600380549192505f6112d3836133ce565b90915550505f89815260056020526040812060070154906112f58260016133e6565b5f8c8152600560205260408120600701805492935090611314836133ce565b90915550505f8b815260056020526040812060080180548592906113399084906133e6565b925050819055505f60065f60035481526020019081526020015f20905081815f01819055508b816001018190555033816002015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055508a81600301819055508381600401819055505f816005015f6101000a81548160ff0219169083151502179055505f8160050160016101000a81548160ff0219169083151502179055505f8160050160026101000a81548160ff0219169083151502179055505f81600601819055505f81600701819055507fa8fad9c60f41a45436a0d147bbc7619d2a86e00ffebbfb1fbe63bf40a5501b06828d338e8e5f805f805f6040516114479a99989796959493929190612f6b565b60405180910390a150506003549b9a5050505050505050505050565b5f546001600160a01b031633146114c75760405162461bcd60e51b815260206004820152602260248201527f6f6e6c7920646576656c6f7065722063616e207570646174652074696d654c65604482015261061760f41b6064820152608401610891565b600991909155600a55565b5f806114de8333612beb565b915091505f81116115445760405162461bcd60e51b815260206004820152602a60248201527f77726f6e672062657420696420696e20626574206c69737420402057696e6e696044820152696e67436c61696d73282960b01b6064820152608401610891565b5f82116115aa5760405162461bcd60e51b815260206004820152602e60248201527f77726f6e672062657420696420696e2062657474696e67206c6973742040205760448201526d696e6e696e67436c61696d73282960901b6064820152608401610891565b5f8181526006602052604090206001015483146116145760405162461bcd60e51b815260206004820152602260248201527f77726f6e672062657474696e6720696420402057696e6e696e67436c61696d73604482015261282960f01b6064820152608401610891565b60015f8481526005602052604090206009015460ff16600281111561163b5761163b612fbf565b146116995760405162461bcd60e51b815260206004820152602860248201527f42657474696e67206973206e6f742070656e64696e6720402057696e6e696e67604482015267436c61696d73282960c01b6064820152608401610891565b5f8381526005602052604090206009015460ff61010090910416151560011461171a5760405162461bcd60e51b815260206004820152602d60248201527f546869732062657474696e6720686173206e6f2077696e6e65722e204020576960448201526c6e6e696e67436c61696d73282960981b6064820152608401610891565b5f818152600660205260409020600201546001600160a01b0316331461179d5760405162461bcd60e51b815260206004820152603260248201527f596f7520646964206e6f7420626574206f6e20746869732062657474696e672e60448201527120402057696e6e696e67436c61696d73282960701b6064820152608401610891565b5f8181526006602052604090206005015460ff16151560011461181b5760405162461bcd60e51b815260206004820152603060248201527f596f7520646964206e6f742077696e206f7665722074686973206265742e204060448201526f2057696e6e696e67436c61696d73282960801b6064820152608401610891565b5f8181526006602052604081206007810154600490910154909161183f82846133e6565b90505f81116118a75760405162461bcd60e51b815260206004820152602e60248201527f596f75722077696e6e696e6720616d6f756e74206973207a65726f2e2040205760448201526d696e6e696e67436c61696d73282960901b6064820152608401610891565b5f84815260066020526040902060050154610100900460ff161561192f5760405162461bcd60e51b815260206004820152603960248201527f596f75206861766520616c726561647920636c61696d656420796f75722077696044820152786e6e696e67732e20402057696e6e696e67436c61696d73282960381b6064820152608401610891565b5f8481526006602052604090206005015462010000900460ff16156119b85760405162461bcd60e51b815260206004820152603960248201527f596f75206861766520616c7265616479207265626574656420796f75722077696044820152786e6e696e67732e20402057696e6e696e67436c61696d73282960381b6064820152608401610891565b8015611a885760405163a9059cbb60e01b81523360048201526024810182905287906001600160a01b0382169063a9059cbb906044016020604051808303815f875af1158015611a0a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a2e9190613423565b505f85815260066020908152604091829020600501805461ff00191661010017905581513381529081018490527f7ece775b21b9cce06a00019166b5ea8ac3786eb947bac43c734b1b16dccf6f33910160405180910390a1505b50505050505050565b6002546060905f908190815b818111611ae7575f818152600560205260409020600201546001600160a01b03808816911603611ad55782611ad1816133ce565b9350505b80611adf816133ce565b915050611a9d565b505f8267ffffffffffffffff811115611b0257611b0261337d565b604051908082528060200260200182016040528015611b3b57816020015b611b28612e8a565b815260200190600190039081611b205790505b5090505f80835b8015611c8c575f818152600560205260409020600201546001600160a01b03808b16911603611c72575f818152600560208181526040928390208351610160810185528154815260018201546001600160a01b03908116938201939093526002808301549093169481019490945260038101546060850152600481015460808501529182015460a0840152600682015460c0840152600782015460e08401526008820154610100840152600982015461012084019160ff90911690811115611c0c57611c0c612fbf565b6002811115611c1d57611c1d612fbf565b815260099190910154610100900460ff1615156020909101528451859084908110611c4a57611c4a613391565b60200260200101819052508280611c60906133ce565b9350508180611c6e906133ce565b9250505b85831015611c8c5780611c84816133b9565b915050611b42565b50919791965090945050505050565b5f546001600160a01b03163314611d265760405162461bcd60e51b815260206004820152604360248201527f6f6e6c7920646576656c6f7065722063616e2075706461746520737570706f7260448201527f74656420746f6b656e73204020557064617465537570706f72746564546f6b656064820152626e282960e81b608482015260a401610891565b5f848152600760205260409020600101546001600160a01b03848116911614611daf5760405162461bcd60e51b815260206004820152603560248201527f746f6b656e2061646472657373206973206e6f74206d617463686564204020556044820152747064617465537570706f72746564546f6b656e282960581b6064820152608401610891565b5f9384526007602052604090932060030180546001600160a81b0319166101006001600160a01b039095169490940260ff1916939093179015151790915550565b6003546060905f908190815b818111611e3b575f81815260066020526040902060010154869003611e295782611e25816133ce565b9350505b80611e33816133ce565b915050611dfc565b505f8267ffffffffffffffff811115611e5657611e5661337d565b604051908082528060200260200182016040528015611e8f57816020015b611e7c612efc565b815260200190600190039081611e745790505b5090505f80835b8015611c8c575f81815260066020526040902060010154899003611f89575f818152600660208181526040928390208351610140810185528154815260018201549281019290925260028101546001600160a01b0316938201939093526003830154606082015260048301546080820152600583015460ff808216151560a08401526101008083048216151560c08501526201000090920416151560e083015291830154918101919091526007909101546101208201528451859084908110611f6157611f61613391565b60200260200101819052508280611f77906133ce565b9350508180611f85906133ce565b9250505b85831015611c8c5780611f9b816133b9565b915050611e96565b5f805f611fb08633612beb565b915091505f811161200e5760405162461bcd60e51b815260206004820152602260248201527f77726f6e672062657420696420696e20626574206c6973742040205265426574604482015261282960f01b6064820152608401610891565b5f821161206c5760405162461bcd60e51b815260206004820152602660248201527f77726f6e672062657420696420696e2062657474696e67206c6973742040205260448201526565426574282960d01b6064820152608401610891565b5f8181526006602052604090206001015486146120cb5760405162461bcd60e51b815260206004820152601a60248201527f77726f6e672062657474696e67206964204020526542657428290000000000006044820152606401610891565b60015f8781526005602052604090206009015460ff1660028111156120f2576120f2612fbf565b1461213f5760405162461bcd60e51b815260206004820181905260248201527f42657474696e67206973206e6f742070656e64696e67204020526542657428296044820152606401610891565b5f868152600560205260409020600101546001600160a01b038881169116146121dc5760405162461bcd60e51b815260206004820152604360248201527f696e636f6d70617469626c6520746f6b656e206164647265737320666f72205f60448201527f6f726967696e616c62657474696e675f62657474696e6749642040205265426560648201526274282960e81b608482015260a401610891565b5f818152600660205260409020600201546001600160a01b031633146122575760405162461bcd60e51b815260206004820152602a60248201527f596f7520646964206e6f7420626574206f6e20746869732062657474696e672e6044820152692040205265426574282960b01b6064820152608401610891565b5f81815260066020526040902060050154610100900460ff16156122d75760405162461bcd60e51b815260206004820152603160248201527f596f75206861766520616c726561647920636c61696d656420796f75722077696044820152706e6e696e67732e2040205265426574282960781b6064820152608401610891565b5f8181526006602052604090206005015462010000900460ff16156123585760405162461bcd60e51b815260206004820152603160248201527f596f75206861766520616c7265616479207265626574656420796f75722077696044820152706e6e696e67732e2040205265426574282960781b6064820152608401610891565b5f86815260056020526040812060090154610100900460ff16151560010361240a575f8281526006602052604090206005015460ff1615156001146123df5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792077696e6e65722063616e2072656265742e204020526542657428296044820152606401610891565b5f828152600660205260409020600781015460049091015461240181836133e6565b9250505061241d565b505f818152600660205260409020600401545b5f81116124845760405162461bcd60e51b815260206004820152602f60248201527f596f7520646f6e2774206861766520656e6f75676820616d6f756e7420746f2060448201526e72656265742040205265426574282960881b6064820152608401610891565b80156124d8575f61249789888885610d6d565b9050828111156124cc5750505f908152600660205260409020600501805462ff0000191662010000179055506001905061099e565b5f94505050505061099e565b5f935050505061099e565b6003546060905f908190815b818111612539575f818152600660205260409020600201546001600160a01b038088169116036125275782612523816133ce565b9350505b80612531816133ce565b9150506124ef565b505f8267ffffffffffffffff8111156125545761255461337d565b60405190808252806020026020018201604052801561258d57816020015b61257a612efc565b8152602001906001900390816125725790505b5090505f80835b8015611c8c575f818152600660205260409020600201546001600160a01b03808b16911603612692575f818152600660208181526040928390208351610140810185528154815260018201549281019290925260028101546001600160a01b0316938201939093526003830154606082015260048301546080820152600583015460ff808216151560a08401526101008083048216151560c08501526201000090920416151560e08301529183015491810191909152600790910154610120820152845185908490811061266a5761266a613391565b60200260200101819052508280612680906133ce565b935050818061268e906133ce565b9250505b85831015611c8c57806126a4816133b9565b915050612594565b5f6126b78233612beb565b5f848152600560209081526040808320848452600690925282206001015492945090925090841480156126f957505f8381526006602052604090206004015415155b1561270357600191505b6002810154336001600160a01b039091160361271e57600191505b6001821515146127965760405162461bcd60e51b815260206004820152603a60248201527f6f6e6c792062657474657273206f7220637265617465722063616e20636c6f7360448201527f652062657474696e67204020436c6f736542657474696e6728290000000000006064820152608401610891565b5f600982015460ff1660028111156127b0576127b0612fbf565b146128095760405162461bcd60e51b8152602060048201526024808201527f42657474696e67206973206e6f74206f70656e204020436c6f736542657474696044820152636e67282960e01b6064820152608401610891565b80600501544210156128835760405162461bcd60e51b815260206004820152603760248201527f42657474696e672070656e64696e6754696d6520686173206e6f74207061737360448201527f656420796574204020436c6f736542657474696e6728290000000000000000006064820152608401610891565b80600401544210156128f35760405162461bcd60e51b815260206004820152603360248201527f42657474696e6720656e6454696d6520686173206e6f742070617373656420796044820152726574204020436c6f736542657474696e67282960681b6064820152608401610891565b5f805f5b6004548111612989576001808501545f838152600760205260409020909101546001600160a01b03908116911614801561294657505f8181526007602052604090206003015460ff1615156001145b15612977575f818152600760205260409020600281015460039091015490935061010090046001600160a01b031691505b80612981816133ce565b9150506128f7565b50600180546001600160a01b0319166001600160a01b0383811691821783559185015460048087015460405163b09a57a960e01b815292909416908201526024810192909252604482018490525f9163b09a57a99060640160408051808303815f875af11580156129fc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a20919061343e565b505f888152600560205260408120600601829055600c54919250908190819060c890612a4c908661347a565b612a569190613491565b90505f612a6382866133e6565b90505f612a7083876133f9565b90505f5b6003548111612b27575f818152600660205260409020600101548d9003612b15575f8181526006602052604090206004015415612b15575f818152600660205260409020600301548211801590612adb57505f818152600660205260409020600301548310155b15612b15575f81815260066020526040902060058101805460ff19166001908117909155600490910154909650612b1290866133e6565b94505b80612b1f816133ce565b915050612a74565b50841515600103612bbf575f5b6003548111612bbd575f818152600660205260409020600101548d9003612bab575f8181526006602052604090206005015460ff161515600103612bab57612b7c8186612df8565b5f8281526006602081905260409091200155612b998d8287612e2b565b5f828152600660205260409020600701555b80612bb5816133ce565b915050612b34565b505b50505050600994909401805460019515156101000261ffff199091161794909417909355505050505050565b5f805f805f5b6003548111612c60575f81815260066020526040902060010154879003612c4e575f818152600660205260409020600201546001600160a01b03808816911603612c4e575f81815260066020526040902054909250905081612c60565b80612c58816133ce565b915050612bf1565b509590945092505050565b5f82815260056020526040812060010154600b546001600160a01b039091169081908390606490612c9c908761347a565b612ca69190613491565b5f8781526005602052604090206002908101549192506001600160a01b03918216918416906323b872dd9033908490612cdf9087613491565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af1158015612d30573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d549190613423565b505f546001600160a01b03808516916323b872dd91339116612d77600287613491565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af1158015612dc8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612dec9190613423565b50909695505050505050565b600d545f8381526006602052604081206004015490918391612e1a919061347a565b612e249190613491565b9392505050565b600d545f84815260056020526040812060080154909190612e4d9084906133f9565b600d545f868152600660205260409020600401548591612e6c9161347a565b612e769190613491565b612e80919061347a565b61099e9190613491565b6040518061016001604052805f81526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f6002811115612ef057612ef0612fbf565b81525f60209091015290565b6040518061014001604052805f81526020015f81526020015f6001600160a01b031681526020015f81526020015f81526020015f151581526020015f151581526020015f151581526020015f81526020015f81525090565b5f60208284031215612f64575f80fd5b5035919050565b998a5260208a01989098526001600160a01b0396909616604089015260608801949094526080870192909252151560a0860152151560c0850152151560e08401526101008301526101208201526101400190565b634e487b7160e01b5f52602160045260245ffd5b60038110612fef57634e487b7160e01b5f52602160045260245ffd5b9052565b5f8151808452602080850194508084015f5b838110156130a557815180518852838101516001600160a01b03908116858a015260408083015190911690890152606080820151908901526080808201519089015260a0808201519089015260c0808201519089015260e08082015190890152610100808201519089015261012080820151613083828b0182612fd3565b5050610140908101511515908801526101609096019590820190600101613005565b509495945050505050565b602081525f612e246020830184612ff3565b604081525f6130d46040830185612ff3565b90508260208301529392505050565b80356001600160a01b03811681146130f9575f80fd5b919050565b5f805f60608486031215613110575f80fd5b613119846130e3565b92506020840135915061312e604085016130e3565b90509250925092565b5f8060408385031215613148575f80fd5b613151836130e3565b946020939093013593505050565b5f805f8060808587031215613172575f80fd5b61317b856130e3565b966020860135965060408601359560600135945092505050565b5f80604083850312156131a6575f80fd5b50508035926020909101359150565b8b81526001600160a01b038b811660208301528a166040820152606081018990526080810188905260a0810187905260c0810186905260e081018590526101008101849052610160810161320d610120830185612fd3565b8215156101408301529c9b505050505050505050505050565b5f60208284031215613236575f80fd5b612e24826130e3565b801515811461324c575f80fd5b50565b5f805f8060808587031215613262575f80fd5b84359350613272602086016130e3565b925060408501356132828161323f565b9150613290606086016130e3565b905092959194509250565b604080825283518282018190525f9190606090818501906020808901865b8381101561333f578151805186528381015184870152878101516001600160a01b03168887015286810151878701526080808201519087015260a08082015115159087015260c08082015115159087015260e0808201511515908701526101008082015190870152610120908101519086015261014090940193908201906001016132b9565b505095909501959095525092949350505050565b5f8060408385031215613364575f80fd5b82359150613374602084016130e3565b90509250929050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f816133c7576133c76133a5565b505f190190565b5f600182016133df576133df6133a5565b5060010190565b80820180821115610d6757610d676133a5565b81810381811115610d6757610d676133a5565b5f6020828403121561341c575f80fd5b5051919050565b5f60208284031215613433575f80fd5b8151612e248161323f565b5f806040838503121561344f575f80fd5b82519150602083015169ffffffffffffffffffff8116811461346f575f80fd5b809150509250929050565b8082028115828204841417610d6757610d676133a5565b5f826134ab57634e487b7160e01b5f52601260045260245ffd5b50049056fea26469706673582212207ca66563182a186fed7f0552268b22fce9fdc63629729b87fd34e959112c798664736f6c6343000814003300000000000000000000000000000000000000000000000000000000000002d00000000000000000000000000000000000000000000000000000000000000168000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000de0b6b3a7640000",
    "runtime_bytecode": "",
    "contract_name": "BettingContract",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"in_timeLeap_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"in_timeLeap_pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"in_fee_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"in_range_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"in_ratio_decimails\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bet_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betting_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"rebeted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningsRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningsAmount\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"correctPrice\",\"type\":\"uint256\"}],\"name\":\"BettingClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hadWinner\",\"type\":\"bool\"}],\"name\":\"BettingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle_address\",\"type\":\"address\"}],\"name\":\"SupportedTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WinningClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimails\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle_address\",\"type\":\"address\"}],\"name\":\"AddSupportedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betting_id\",\"type\":\"uint256\"}],\"name\":\"CloseBetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betting_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreateBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"CreateBetting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_originalbetting_bettingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newbetting_bettingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"}],\"name\":\"ReBet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SupportedTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"oracle_address\",\"type\":\"address\"}],\"name\":\"UpdateSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bettingId\",\"type\":\"uint256\"}],\"name\":\"WinningClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bettingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"bet_id_by_user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bettingId\",\"type\":\"uint256\"}],\"name\":\"bet_length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bet_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betting_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rebeted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"winningsRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"better_oracle\",\"outputs\":[{\"internalType\":\"contract BettingOracle_ChainLink\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bettingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creater\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"correctPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum BettingContract.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hadWinner\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"range_percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"render_bets_of_specific_bet_creater\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bet_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betting_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rebeted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"winningsRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningsAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BettingContract.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betting_id\",\"type\":\"uint256\"}],\"name\":\"render_bets_of_specific_betting_id\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bet_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betting_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rebeted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"winningsRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningsAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BettingContract.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betting_id\",\"type\":\"uint256\"}],\"name\":\"render_betting_data_of_specific_betting_id\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creater\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"correctPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum BettingContract.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hadWinner\",\"type\":\"bool\"}],\"internalType\":\"struct BettingContract.Betting[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"render_bettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creater\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"correctPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum BettingContract.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hadWinner\",\"type\":\"bool\"}],\"internalType\":\"struct BettingContract.Betting[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creater\",\"type\":\"address\"}],\"name\":\"render_bettings_of_specific_betting_creater\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creater\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"correctPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum BettingContract.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hadWinner\",\"type\":\"bool\"}],\"internalType\":\"struct BettingContract.Betting[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supported_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimails\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"oracle_address\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLeap_end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLeap_pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"in_timeLeap_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"in_timeLeap_pending\",\"type\":\"uint256\"}],\"name\":\"update_timeLeap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BettingContract_23.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n//version 23.0\\n//0x03eB7Fe6801893F6006127B5248809e8CFbdd89D\\n\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/token/ERC20/ERC20.sol\\\";\\n\\n\\nimport \\\"https://github.com/BetterSmartContract/BetterV0/blob/main/BettingOracle_ChainLink.sol\\\";\\n\\ncontract BettingContract {\\n    address public developer;\\n\\n    BettingOracle_ChainLink public better_oracle;\\n\\n    struct SupportedToken {\\n        uint256 id;\\n        address token;\\n        uint256 decimails;\\n        bool valid;\\n        address oracle_address;\\n    }\\n\\n    struct Bet {\\n        uint256 bet_id;\\n        uint256 betting_id;\\n        address user;\\n        uint256 predictedPrice;\\n        uint256 amount;\\n        bool winner;\\n        bool claimed;\\n        bool rebeted;\\n        uint256 winningsRatio;\\n        uint256 winningsAmount;\\n    }\\n\\n    enum Status {\\n        Open,\\n        Pending,\\n        Closed\\n    }\\n\\n    Status constant default_value = Status.Open;\\n\\n    struct Betting {\\n        uint256 id;\\n        address token;\\n        address creater;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 pendingTime;\\n        uint256 correctPrice;\\n        uint256 totalBets;\\n        uint256 totalAmount;\\n        Status status;\\n        bool hadWinner;\\n    }\\n\\n    uint256 public bettingCount;\\n    uint256 public betCount;\\n    uint256 public SupportedTokenCount;\\n    mapping(uint256 => Betting) public bettings;\\n    mapping(uint256 => Bet) public bets;\\n    mapping(uint256 => SupportedToken) public supported_tokens;\\n\\n    \\n\\n    event SupportedTokenAdded(\\n        uint256 id,\\n        address token,\\n        address oracle_address\\n    );\\n    event BettingCreated(\\n        uint256 id,\\n        address token,\\n        address creater,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 pendingTime,\\n        bool hadWinner\\n    );\\n    event BetPlaced(\\n        uint256 bet_id,\\n        uint256 betting_id,\\n        address user,\\n        uint256 predictedPrice,\\n        uint256 amount,\\n        bool winner,\\n        bool claimed,\\n        bool rebeted,\\n        uint256 winningsRatio,\\n        uint256 winningsAmount\\n    );\\n    event BettingClosed(uint256 id, uint256 correctPrice);\\n    event WinningClaimed(address user, uint256 amount);\\n\\n    //timeLeap\\n    //1209600 = 14 days\\n    //604800 = 7 days\\n    //1080 = 18 minutes\\n    //720 = 12 minutes\\n    //360 = 6 minutes\\n    //60 = 1 minute\\n\\n    uint256 timeLeap_start = 60;\\n    uint256 public timeLeap_end;\\n    uint256 public timeLeap_pending;\\n\\n    uint256 public fee_percentage; // 4 = 4%\\n    uint256 public range_percentage; // 6 = 6%\\n    uint256 ratio_decimails; //10 ** 18 = 1000000000000000000\\n\\n\\n    constructor(uint256 in_timeLeap_end, uint256 in_timeLeap_pending, uint256 in_fee_percentage, uint256 in_range_percentage, uint256 in_ratio_decimails) {\\n\\n        developer = msg.sender;\\n        timeLeap_end = in_timeLeap_end;\\n        timeLeap_pending = in_timeLeap_pending;\\n\\n        fee_percentage = in_fee_percentage;\\n        range_percentage = in_range_percentage;\\n        ratio_decimails = in_ratio_decimails;\\n\\n    }\\n\\n    /**\\n     * to update timeLeap\\n     */\\n    function update_timeLeap(uint256 in_timeLeap_end, uint256 in_timeLeap_pending) public {\\n        require(\\n            developer == msg.sender,\\n            \\\"only developer can update timeLeap\\\"\\n        );\\n        \\n        timeLeap_end = in_timeLeap_end;\\n        timeLeap_pending = in_timeLeap_pending;\\n    }\\n        \\n\\n    /**\\n     * to add supported token for betting\\n     */\\n    function AddSupportedToken(\\n        address token_address,\\n        uint256 decimails,\\n        address oracle_address\\n    ) public returns (bool) {\\n        require(\\n            developer == msg.sender,\\n            \\\"only developer can add supported tokens @ AddSupportedToken()\\\"\\n        );\\n        bool newToken = true;\\n\\n        for (uint256 i = 0; i <= SupportedTokenCount; i++) {\\n            if (supported_tokens[i].token == token_address) {\\n                newToken = false;\\n            }\\n        }\\n\\n        if (newToken) {\\n            SupportedTokenCount++;\\n\\n            SupportedToken storage newSupportedToken = supported_tokens[\\n                SupportedTokenCount\\n            ];\\n            newSupportedToken.id = SupportedTokenCount;\\n            newSupportedToken.token = token_address;\\n            newSupportedToken.decimails = decimails;\\n            newSupportedToken.valid = true;\\n            newSupportedToken.oracle_address = oracle_address;\\n\\n            emit SupportedTokenAdded(\\n                SupportedTokenCount,\\n                token_address,\\n                oracle_address\\n            );\\n        }\\n\\n        return newToken;\\n    }\\n\\n    /**\\n     * to update supported token at supported_tokens[]\\n     */\\n    function UpdateSupportedToken(\\n        uint256 id,\\n        address token_address,\\n        bool valid,\\n        address oracle_address\\n    ) public {\\n        require(\\n            developer == msg.sender,\\n            \\\"only developer can update supported tokens @ UpdateSupportedToken()\\\"\\n        );\\n        require(\\n            supported_tokens[id].token == token_address,\\n            \\\"token address is not matched @ UpdateSupportedToken()\\\"\\n        );\\n\\n        supported_tokens[id].oracle_address = oracle_address;\\n        supported_tokens[id].valid = valid;\\n    }\\n\\n    /**\\n     * main function\\n     * to create Betting for Bet\\n     * endTime means due time of predict price\\n     */\\n    function CreateBetting(\\n        address token_address,\\n        uint256 endTime\\n    ) public returns (uint256) {\\n\\n        uint256 startTime = block.timestamp + timeLeap_start;\\n\\n        require(\\n            startTime >= block.timestamp,\\n            \\\"Betting cannot start in the past @ CreateBetting()\\\"\\n        );\\n\\n        uint256 check_endTime = endTime - timeLeap_end;\\n        require(check_endTime > startTime, \\\"Invalid end time (endTime < startTime) @ CreateBetting()\\\");\\n\\n        uint256 pendingTime = endTime - timeLeap_pending;\\n        require(pendingTime > startTime, \\\"Invalid pending time (pendingTime < startTime) @ CreateBetting()\\\");\\n   \\n\\n        address creater = msg.sender;\\n        bettingCount++;\\n\\n        bool supportedToken = false;\\n\\n        for (uint256 i = 0; i <= SupportedTokenCount; i++) {\\n            if (\\n                supported_tokens[i].token == token_address &&\\n                supported_tokens[i].valid == true\\n            ) {\\n                supportedToken = true;\\n            }\\n        }\\n\\n        require(\\n            supportedToken == true,\\n            \\\"token address not supported! @ CreateBetting()\\\"\\n        );\\n\\n        Betting storage newBetting = bettings[bettingCount];\\n        newBetting.token = token_address;\\n        newBetting.creater = creater;\\n        newBetting.id = bettingCount;\\n        newBetting.startTime = startTime;\\n        newBetting.endTime = endTime;\\n        newBetting.pendingTime = pendingTime;\\n        newBetting.correctPrice = 0;\\n        newBetting.totalBets = 0;\\n        newBetting.totalAmount = 0;\\n        newBetting.status = Status.Open;\\n        newBetting.hadWinner = false;\\n\\n        emit BettingCreated(\\n            bettingCount,\\n            token_address,\\n            creater,\\n            startTime,\\n            endTime,\\n            pendingTime,\\n            false\\n        );\\n\\n        return bettingCount;\\n    }\\n\\n    /**\\n     * main function\\n     * to create Bets\\n     */\\n    function CreateBet(\\n        address token_address,\\n        uint256 betting_id,\\n        uint256 predictedPrice,\\n        uint256 amount\\n    ) public returns (uint256) {\\n        require(\\n            token_address == bettings[betting_id].token,\\n            \\\"incompatible token address @ CreateBet()\\\"\\n        );\\n        require(\\n            betting_id > 0 && betting_id <= bettingCount,\\n            \\\"Invalid betting ID @ CreateBet()\\\"\\n        );\\n        require(\\n            bettings[betting_id].status == Status.Open,\\n            \\\"Betting is not open for bets @ CreateBet()\\\"\\n        );\\n        require(\\n            block.timestamp < bettings[betting_id].pendingTime,\\n            \\\"Betting is closed for new bets @ CreateBet()\\\"\\n        );\\n        require(amount > 0, \\\"Invalid bet amount @ CreateBet()\\\");\\n\\n        (\\n            uint256 bet_id_in_current_betting_id,\\n            uint256 bet_id_in_all_bet_list\\n        ) = bet_id_by_user(betting_id, msg.sender);\\n        require(bet_id_in_all_bet_list == 0, \\\"wrong betting id @ CreateBet()\\\");\\n        require(\\n            bet_id_in_current_betting_id == 0,\\n            \\\"You already bed on this betting! @ CreateBet()\\\"\\n        );\\n\\n        IERC20 token = IERC20(token_address);\\n        require(\\n            token.balanceOf(msg.sender) >= amount,\\n            \\\"Insufficient token balance @ CreateBet()\\\"\\n        );\\n        require(\\n            token.approve(address(this), amount),\\n            \\\"Not approving token transfer! @ CreateBet()\\\"\\n        );\\n        require(\\n            token.transferFrom(msg.sender, address(this), amount),\\n            \\\"Transfer failed @ CreateBet()\\\"\\n        );\\n\\n        uint256 total_fee = FeeCollector(\\n                betting_id,\\n                amount\\n            );\\n\\n        uint256 new_bet_amount = amount - total_fee;\\n\\n        betCount++;\\n\\n        uint256 currrent_bet_length = bet_length(betting_id);\\n        uint256 new_bet_id = currrent_bet_length + 1;\\n\\n        bettings[betting_id].totalBets++;\\n        bettings[betting_id].totalAmount += new_bet_amount;\\n\\n        Bet storage newBet = bets[betCount];\\n        newBet.bet_id = new_bet_id;\\n        newBet.betting_id = betting_id;\\n        newBet.user = msg.sender;\\n        newBet.predictedPrice = predictedPrice;\\n        newBet.amount = new_bet_amount;\\n        newBet.winner = false;\\n        newBet.claimed = false;\\n        newBet.rebeted = false;\\n        newBet.winningsRatio = 0;\\n        newBet.winningsAmount = 0;\\n\\n        emit BetPlaced(\\n            new_bet_id,\\n            betting_id,\\n            msg.sender,\\n            predictedPrice,\\n            amount,\\n            false,\\n            false,\\n            false,\\n            0,\\n            0\\n        );\\n\\n        return betCount;\\n    }\\n\\n    /**\\n     * all betters can close betting if betting is passing pending time\\n     * loop current betting by betting id to calculate winners\\n     */\\n    function CloseBetting(uint256 _betting_id) public {\\n        (\\n            ,\\n            uint256 bet_id_in_all_bet_list\\n        ) = bet_id_by_user(_betting_id, msg.sender);\\n\\n        bool better = false;\\n        Betting storage betting = bettings[_betting_id];\\n\\n        if (bets[bet_id_in_all_bet_list].betting_id == _betting_id && bets[bet_id_in_all_bet_list].amount > 0 ) {\\n            better = true;\\n        }\\n        \\n        if( betting.creater == msg.sender){\\n            better = true;\\n        }\\n\\n        require(\\n            better == true,\\n            \\\"only betters or creater can close betting @ CloseBetting()\\\"\\n        );\\n\\n        require(\\n            betting.status == Status.Open,\\n            \\\"Betting is not open @ CloseBetting()\\\"\\n        );\\n        require(\\n            block.timestamp >= betting.pendingTime,\\n            \\\"Betting pendingTime has not passed yet @ CloseBetting()\\\"\\n        );\\n        require(\\n            block.timestamp >= betting.endTime,\\n            \\\"Betting endTime has not passed yet @ CloseBetting()\\\"\\n        );\\n\\n        uint256 token_decimails;\\n        address oracle_address;\\n\\n        // get token decimals\\n        for (uint256 i = 0; i <= SupportedTokenCount; i++) {\\n            if (\\n                supported_tokens[i].token == betting.token &&\\n                supported_tokens[i].valid == true\\n            ) {\\n                token_decimails = supported_tokens[i].decimails;\\n                oracle_address = supported_tokens[i].oracle_address;\\n            }\\n        }\\n\\n        better_oracle = BettingOracle_ChainLink(oracle_address);\\n\\n        (uint256 _correctPrice, ) = better_oracle\\n            .fetch_closest_price_to_timestamp(\\n                betting.token,\\n                betting.endTime,\\n                token_decimails\\n            );\\n\\n        //to do: use oracle to replace this line\\n        bettings[_betting_id].correctPrice = _correctPrice;\\n\\n        bool hasWinner = false;\\n\\n        uint256 all_winner_bet_amount = 0;\\n\\n        uint256 correct_price_range = (_correctPrice * range_percentage) / 200;\\n\\n        uint256 correct_price_upper_bond = _correctPrice + correct_price_range;\\n\\n        uint256 correct_price_lower_bond = _correctPrice - correct_price_range;\\n\\n        //loop current betting to calculate winners\\n        for (uint256 i = 0; i <= betCount; i++) {\\n            if (bets[i].betting_id == _betting_id) {\\n                if (bets[i].amount != 0) {\\n                    // meet the price range\\n                    if (\\n                        bets[i].predictedPrice >= correct_price_lower_bond &&\\n                        bets[i].predictedPrice <= correct_price_upper_bond\\n                    ) {\\n                        bets[i].winner = true;\\n                        hasWinner = true;\\n\\n                        all_winner_bet_amount += bets[i].amount;\\n                    }\\n                }\\n            }\\n        }\\n\\n        //loop current betting to calculate winning ratio and winning amount\\n        if (hasWinner == true) {\\n            for (uint256 i = 0; i <= betCount; i++) {\\n                if (bets[i].betting_id == _betting_id) {\\n                    if (bets[i].winner == true) {\\n                        //uint256 winnings_ratio = (bets[i].amount * ratio_decimails )/ all_winner_bet_amount;\\n\\n                        //bets[i].winningsRatio = (bets[i].amount * ratio_decimails )/ all_winner_bet_amount;\\n                        //bets[i].winningsAmount = (((bets[i].amount * ratio_decimails )/ all_winner_bet_amount) * (bettings[_betting_id].totalAmount - all_winner_bet_amount)) / ratio_decimails;\\n                        bets[i].winningsRatio = calculate_winningsRatio(\\n                            i,\\n                            all_winner_bet_amount\\n                        );\\n                        bets[i].winningsAmount = calculate_winningsAmount(\\n                            _betting_id,\\n                            i,\\n                            all_winner_bet_amount\\n                        );\\n                    }\\n                }\\n            }\\n        }\\n\\n        //betting is closed, waiting for user to claim winnings\\n        betting.status = Status.Pending;\\n        betting.hadWinner = hasWinner;\\n    }\\n\\n    /**\\n     * calculate_winningsRatio for CloseBetting(uint256 _betting_id)\\n     */\\n    function calculate_winningsRatio(\\n        uint256 bet_id,\\n        uint256 all_winner_bet_amount\\n    ) private view returns (uint256) {\\n        return (bets[bet_id].amount * ratio_decimails) / all_winner_bet_amount;\\n    }\\n\\n    /**\\n     * calculate_winningsAmount for CloseBetting(uint256 _betting_id)\\n     */\\n    function calculate_winningsAmount(\\n        uint256 _betting_id,\\n        uint256 bet_id,\\n        uint256 all_winner_bet_amount\\n    ) private view returns (uint256) {\\n        return\\n            (((bets[bet_id].amount * ratio_decimails) / all_winner_bet_amount) *\\n                (bettings[_betting_id].totalAmount - all_winner_bet_amount)) /\\n            ratio_decimails;\\n    }\\n\\n    /**\\n     * if betting has no winners, all better can not claims\\n     * if betting has winner, only winners can claims\\n     */\\n    function WinningClaims(address token_address, uint256 _bettingId) public {\\n        (\\n            uint256 bet_id_in_current_betting_id,\\n            uint256 bet_id_in_all_bet_list\\n        ) = bet_id_by_user(_bettingId, msg.sender);\\n\\n        require(\\n            bet_id_in_all_bet_list > 0,\\n            \\\"wrong bet id in bet list @ WinningClaims()\\\"\\n        );\\n        require(\\n            bet_id_in_current_betting_id > 0,\\n            \\\"wrong bet id in betting list @ WinningClaims()\\\"\\n        );\\n        require(\\n            bets[bet_id_in_all_bet_list].betting_id == _bettingId,\\n            \\\"wrong betting id @ WinningClaims()\\\"\\n        );\\n\\n        require(\\n            bettings[_bettingId].status == Status.Pending,\\n            \\\"Betting is not pending @ WinningClaims()\\\"\\n        );\\n\\n        require(\\n            bettings[_bettingId].hadWinner == true,\\n            \\\"This betting has no winner. @ WinningClaims()\\\"\\n        );\\n\\n        require(\\n            bets[bet_id_in_all_bet_list].user == msg.sender,\\n            \\\"You did not bet on this betting. @ WinningClaims()\\\"\\n        );\\n        require(\\n            bets[bet_id_in_all_bet_list].winner == true,\\n            \\\"You did not win over this bet. @ WinningClaims()\\\"\\n        );\\n\\n        uint256 winnings = bets[bet_id_in_all_bet_list].winningsAmount;\\n        uint256 bet_amount = bets[bet_id_in_all_bet_list].amount;\\n        uint256 transfer_amount = winnings + bet_amount;\\n\\n        require(\\n            transfer_amount > 0,\\n            \\\"Your winning amount is zero. @ WinningClaims()\\\"\\n        );\\n        require(\\n            bets[bet_id_in_all_bet_list].claimed == false,\\n            \\\"You have already claimed your winnings. @ WinningClaims()\\\"\\n        );\\n        require(\\n            bets[bet_id_in_all_bet_list].rebeted == false,\\n            \\\"You have already rebeted your winnings. @ WinningClaims()\\\"\\n        );\\n\\n        if (transfer_amount > 0) {\\n\\n            IERC20 token = IERC20(token_address);\\n\\n            token.transfer(msg.sender, transfer_amount);\\n\\n            bets[bet_id_in_all_bet_list].claimed = true;\\n\\n            emit WinningClaimed(msg.sender, transfer_amount);\\n        }\\n    }\\n\\n    /**\\n     * if betting has no winners, all better can rebet\\n     * if betting has winner, only winners can rebet\\n     */\\n    function ReBet(\\n        address token_address,\\n        uint256 _originalbetting_bettingId,\\n        uint256 _newbetting_bettingId,\\n        uint256 predictedPrice\\n    ) public returns (bool) {\\n        (\\n            uint256 bet_id_in_current_betting_id,\\n            uint256 bet_id_in_all_bet_list\\n        ) = bet_id_by_user(_originalbetting_bettingId, msg.sender);\\n        require(\\n            bet_id_in_all_bet_list > 0,\\n            \\\"wrong bet id in bet list @ ReBet()\\\"\\n        );\\n        require(\\n            bet_id_in_current_betting_id > 0,\\n            \\\"wrong bet id in betting list @ ReBet()\\\"\\n        );\\n        require(\\n            bets[bet_id_in_all_bet_list].betting_id ==\\n                _originalbetting_bettingId,\\n            \\\"wrong betting id @ ReBet()\\\"\\n        );\\n\\n        require(\\n            bettings[_originalbetting_bettingId].status == Status.Pending,\\n            \\\"Betting is not pending @ ReBet()\\\"\\n        );\\n        require(\\n            bettings[_originalbetting_bettingId].token == token_address,\\n            \\\"incompatible token address for _originalbetting_bettingId @ ReBet()\\\"\\n        );\\n\\n        require(\\n            bets[bet_id_in_all_bet_list].user == msg.sender,\\n            \\\"You did not bet on this betting. @ ReBet()\\\"\\n        );\\n        require(\\n            bets[bet_id_in_all_bet_list].claimed == false,\\n            \\\"You have already claimed your winnings. @ ReBet()\\\"\\n        );\\n        require(\\n            bets[bet_id_in_all_bet_list].rebeted == false,\\n            \\\"You have already rebeted your winnings. @ ReBet()\\\"\\n        );\\n\\n        uint256 rebet_amount = 0;\\n\\n        if (bettings[_originalbetting_bettingId].hadWinner == true) {\\n            require(\\n                bets[bet_id_in_all_bet_list].winner == true,\\n                \\\"Only winner can rebet. @ ReBet()\\\"\\n            );\\n            //only winner can rebet\\n            uint256 winnings = bets[bet_id_in_all_bet_list].winningsAmount;\\n            uint256 bet_amount = bets[bet_id_in_all_bet_list].amount;\\n            rebet_amount = winnings + bet_amount;\\n        } else {\\n            // if betting has no winners, all better can rebet\\n            rebet_amount = bets[bet_id_in_all_bet_list].amount;\\n        }\\n\\n        require(\\n            rebet_amount > 0,\\n            \\\"You don't have enough amount to rebet @ ReBet()\\\"\\n        );\\n\\n        if (rebet_amount > 0) {\\n\\n            uint256 new_bet_length = CreateBet(\\n                token_address,\\n                _newbetting_bettingId,\\n                predictedPrice,\\n                rebet_amount\\n            );\\n\\n            if (new_bet_length > bet_id_in_all_bet_list) {\\n                bets[bet_id_in_all_bet_list].rebeted = true;\\n\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * total fee eaquals 2 times of fee_percentage for betting creater and developer\\n     */\\n    function FeeCollector(\\n        uint256 _bettingId,\\n        uint256 amount\\n    ) private returns (uint256) {\\n       \\n\\n        address token_address = bettings[_bettingId].token;\\n\\n        IERC20 token = IERC20(token_address);\\n\\n        uint256 fee = (amount * fee_percentage) / 100;\\n\\n        address recipient = bettings[_bettingId].creater;\\n\\n        //fee for betting creater\\n        token.transferFrom(msg.sender, recipient, fee/2);\\n\\n        //fee for developer\\n        token.transferFrom(msg.sender, developer, fee/2);\\n\\n        return fee;\\n    }\\n\\n    /**\\n    return last uint256 key index of bet from indicated bettingId\\n    */\\n    function bet_length(uint256 _bettingId) public view returns (uint256) {\\n        uint256 currentBetting_bet_length = bettings[_bettingId].totalBets;\\n\\n        return currentBetting_bet_length;\\n    }\\n\\n    /**\\n    return uint256 key index of specific bet from indicated bettingId\\n    */\\n    function bet_id_by_user(\\n        uint256 _bettingId,\\n        address user\\n    ) public view returns (uint256, uint256) {\\n        uint256 bet_id_in_all_bet_list = 0;\\n        uint256 bet_id_in_current_betting_id = 0;\\n\\n        for (uint256 i = 0; i <= betCount; i++) {\\n            if (bets[i].betting_id == _bettingId) {\\n                if (bets[i].user == user) {\\n                    bet_id_in_all_bet_list = i;\\n                    bet_id_in_current_betting_id = bets[i].bet_id;\\n                    break;\\n                }\\n            }\\n        }\\n        return (bet_id_in_current_betting_id, bet_id_in_all_bet_list);\\n    }\\n    \\n\\n    /**\\n     * to render all bettings\\n     * parameters : uint256 pagetion = page number\\n     * parameters : uint256 bettingPerPage = render how many bettings per page\\n     *\\n     * return Betting [] in reverse index by page\\n     * return Betting [] length\\n     *\\n    function render_bettings(uint256 pagetion, uint256 bettingPerPage ) public view returns (Betting[] memory, uint256, bool) {\\n        \\n\\n        uint256 currentBettingCount = 0;\\n        uint256 currentBettingIndexStart = 0;\\n        uint256 currentBettingIndexEnd = 0;\\n        bool lastPage = true;\\n\\n        //to check if bettingPerPage is suffieient\\n        if(bettingPerPage * pagetion < bettingCount){\\n            currentBettingCount = bettingPerPage;\\n            if (pagetion == 1){\\n                currentBettingIndexStart = bettingCount;\\n                currentBettingIndexEnd = bettingCount - bettingPerPage;\\n            }else {\\n                currentBettingIndexStart = (bettingCount - (bettingPerPage * (pagetion-1))) - 1;\\n                currentBettingIndexEnd = bettingCount - bettingPerPage * pagetion;\\n            }\\n            lastPage = false;\\n        }else if(bettingPerPage * pagetion < (bettingCount + bettingPerPage)){\\n            currentBettingCount = bettingCount - bettingPerPage * (pagetion - 1);\\n            currentBettingIndexStart = (bettingCount - (bettingPerPage * (pagetion-1))) - 1;\\n            currentBettingIndexEnd = 0;\\n            lastPage = true;\\n        }\\n        \\n        Betting[] memory allBettings = new Betting[](currentBettingCount);\\n\\n        uint256 k = 0;\\n\\n        for (uint256 i = currentBettingIndexStart; i > currentBettingIndexEnd; i--) {\\n            allBettings[k] = bettings[i];\\n            k++;\\n        }\\n\\n        return (allBettings, k, lastPage);\\n    }\\n    */\\n\\n    /**\\n     * to render all bettings\\n     *\\n     * return Betting [] in reverse index\\n     * return Betting [] length\\n     */\\n    function render_bettings() public view returns (Betting[] memory, uint256) {\\n        Betting[] memory allBettings = new Betting[](bettingCount);\\n\\n        uint256 k = 0;\\n\\n        for (uint256 i = bettingCount; i > 0; i--) {\\n            allBettings[k] = bettings[i];\\n            k++;\\n        }\\n\\n        return (allBettings, k);\\n    }\\n\\n    /**\\n     * to render betting of specific betting id\\n     * parameter:\\n     * uint256 _betting_id\\n     * return Betting []\\n     */\\n    function render_betting_data_of_specific_betting_id(\\n        uint256 _betting_id\\n    ) public view returns (Betting[] memory) {\\n\\n        Betting[] memory thisBetting = new Betting[](1);\\n\\n        uint _length = bettingCount;\\n\\n        for (uint256 i = _length; i > 0; i--) {\\n\\n            if (bettings[i].id == _betting_id) {\\n                thisBetting[0] = bettings[i];\\n                break;\\n            }\\n\\n        }\\n\\n        return thisBetting;\\n\\n    }\\n\\n     /**\\n     * to render bettings of specific bet creater\\n     * parameter:\\n     * address _user\\n     * return Betting [] in reverse index\\n     * return Betting [] length\\n     */\\n    function render_bettings_of_specific_betting_creater( address _creater ) public view returns (Betting[] memory, uint256) {\\n        uint256 current_bettings_length = 0;\\n\\n        uint _length = bettingCount;\\n\\n        for (uint256 i = 0; i <= _length; i++) {\\n            if (bettings[i].creater == _creater) {\\n                current_bettings_length++;\\n            }\\n        }\\n\\n        Betting[] memory myBettings = new Betting[](current_bettings_length);\\n\\n        uint256 render_count = 0;\\n        uint256 k = 0;\\n\\n        for (uint256 i = _length; i > 0; i--) {\\n            if (bettings[i].creater == _creater) {\\n                myBettings[k] = bettings[i];\\n                render_count++;\\n                k++;\\n            }\\n\\n            if (render_count >= current_bettings_length) {\\n                break;\\n            }\\n        }\\n\\n        return (myBettings, k);\\n    }\\n\\n    /**\\n     * to render bets of specific betting id\\n     * parameter:\\n     * uint256 _betting_id\\n     * return Bet [] in reverse index\\n     * return Bet [] length\\n     */\\n    function render_bets_of_specific_betting_id(\\n        uint256 _betting_id\\n    ) public view returns (Bet[] memory, uint256) {\\n        uint256 current_bets_length = 0;\\n\\n        uint _length = betCount;\\n\\n        for (uint256 i = 0; i <= _length; i++) {\\n            if (bets[i].betting_id == _betting_id) {\\n                current_bets_length++;\\n            }\\n        }\\n\\n        Bet[] memory allBets = new Bet[](current_bets_length);\\n\\n        uint256 render_count = 0;\\n        uint256 k = 0;\\n\\n        //for (uint256 i = _shifts; i < betCount; i++){\\n        for (uint256 i = _length; i > 0; i--) {\\n            if (bets[i].betting_id == _betting_id) {\\n                allBets[k] = bets[i];\\n                render_count++;\\n                k++;\\n            }\\n\\n            if (render_count >= current_bets_length) {\\n                break;\\n            }\\n        }\\n\\n        return (allBets, k);\\n    }\\n\\n    /**\\n     * to render bets of specific bet creater\\n     * parameter:\\n     * address _user\\n     * return Bet [] in reverse index\\n     * return Bet [] length\\n     */\\n    function render_bets_of_specific_bet_creater(\\n        address _user\\n    ) public view returns (Bet[] memory, uint256) {\\n        uint256 current_bets_length = 0;\\n\\n        uint _length = betCount;\\n\\n        for (uint256 i = 0; i <= _length; i++) {\\n            if (bets[i].user == _user) {\\n                current_bets_length++;\\n            }\\n        }\\n\\n        Bet[] memory allBets = new Bet[](current_bets_length);\\n\\n        uint256 render_count = 0;\\n        uint256 k = 0;\\n\\n        //for (uint256 i = _shifts; i < betCount; i++){\\n        for (uint256 i = _length; i > 0; i--) {\\n            if (bets[i].user == _user) {\\n                allBets[k] = bets[i];\\n                render_count++;\\n                k++;\\n            }\\n\\n            if (render_count >= current_bets_length) {\\n                break;\\n            }\\n        }\\n\\n        return (allBets, k);\\n    }\\n\\n    /**\\n     * to render supported token by valid parameter\\n     * parameter:\\n     * bool _valid\\n     * return SupportedToken [] in reverse index\\n     *\\n    function render_supported_tokens_of_valid(\\n        bool _valid\\n    ) public view returns (SupportedToken[] memory) {\\n        uint256 current_supported_tokens_length = 0;\\n\\n        uint _length = SupportedTokenCount;\\n\\n        for (uint256 i = 0; i <= _length; i++) {\\n            if (supported_tokens[i].valid == _valid) {\\n                current_supported_tokens_length++;\\n            }\\n        }\\n\\n        SupportedToken[] memory allSupported_tokens = new SupportedToken[](\\n            current_supported_tokens_length\\n        );\\n\\n        uint256 render_count = 0;\\n        uint256 k = 0;\\n\\n        for (uint256 i = _length; i > 0; i--) {\\n            if (supported_tokens[i].valid == _valid) {\\n                allSupported_tokens[k] = supported_tokens[i];\\n                render_count++;\\n                k++;\\n            }\\n\\n            if (render_count >= current_supported_tokens_length) {\\n                break;\\n            }\\n        }\\n\\n        return allSupported_tokens;\\n    }\\n    */\\n}\"\r\n    },\r\n    \"https://github.com/BetterSmartContract/BetterV0/blob/main/BettingOracle_ChainLink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract BettingOracle_ChainLink {\\n    address public developer;\\n\\n    AggregatorV3Interface internal priceFeed;\\n\\n    struct ChainLink_Price_Feed_Contract_Addresses {\\n        uint256 id;\\n        address token_address;\\n        address ENS_address;\\n        AggregatorV3Interface this_priceFeed;\\n        uint ENS_address_decimails;\\n        bool valid;\\n    }\\n\\n    mapping(uint256 => ChainLink_Price_Feed_Contract_Addresses)\\n        public token_address_in_contract_addresses;\\n\\n    uint256 public ContractAddresses_Id;\\n    uint256 public current_ContractAddresses_Id;\\n\\n    /*\\n    struct TokenPrice {\\n        uint256 id;\\n        address token_address;\\n        address ENS_address;\\n        uint80 roundID;\\n        uint256 Timestamp;\\n        int price;\\n    }\\n\\n    mapping(uint256 => TokenPrice) public Token_Price;  \\n\\n    uint256 public TokenPrice_Id;\\n    */\\n    uint public returned_target_price;\\n    int256 public target_price;\\n    uint80 public target_roundID;\\n\\n    /**\\n     * Network: Sepolia\\n     * Aggregator: ETH/USD\\n     * Address:\\t0x694AA1769357215DE4FAC081bf1f309aDC325306\\n     */\\n    /**\\n     * Network: Sepolia\\n     * Aggregator: BTC/USD\\n     * Address: 0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43\\n     */\\n    /**\\n     * Network: Sepolia\\n     * Aggregator: USDC / USD\\n     * Address: 0xA2F78ab2355fe2f984D808B5CeE7FD0A93D5270E\\n     */\\n    constructor() {\\n        developer = msg.sender;\\n    }\\n\\n    /**\\n     * to add ChainLink ENS address into struct ChainLink_Price_Feed_Contract_Addresses.\\n     * parameters:\\n     * token_address:supported ERC20 token.\\n     * ENS_address: https://docs.chain.link/data-feeds/price-feeds/addresses\\n     */\\n    function add_ENS_address(\\n        address token_address,\\n        address ENS_address\\n    ) public returns (uint256) {\\n        require(developer == msg.sender, \\\"only developer can add ENS address!\\\");\\n\\n        ContractAddresses_Id++;\\n\\n        AggregatorV3Interface this_priceFeed = AggregatorV3Interface(\\n            ENS_address\\n        );\\n\\n        uint ENS_address_decimails = this_priceFeed.decimals();\\n\\n        ChainLink_Price_Feed_Contract_Addresses\\n            storage new_ChainLink_Price_Feed_Contract_Addresses = token_address_in_contract_addresses[\\n                ContractAddresses_Id\\n            ];\\n        new_ChainLink_Price_Feed_Contract_Addresses.id = ContractAddresses_Id;\\n        new_ChainLink_Price_Feed_Contract_Addresses\\n            .token_address = token_address;\\n        new_ChainLink_Price_Feed_Contract_Addresses.ENS_address = ENS_address;\\n        new_ChainLink_Price_Feed_Contract_Addresses\\n            .this_priceFeed = this_priceFeed;\\n        new_ChainLink_Price_Feed_Contract_Addresses\\n            .ENS_address_decimails = ENS_address_decimails;\\n        new_ChainLink_Price_Feed_Contract_Addresses.valid = true;\\n\\n        return ContractAddresses_Id;\\n    }\\n\\n    /**\\n     * to set ChainLink ENS address for current price feed query of indicated token address.\\n     * parameters:\\n     * token_address:supported ERC20 token address in struct ChainLink_Price_Feed_Contract_Addresses.\\n     * returns: AggregatorV3Interface object\\n     */\\n    function set_ENS_address(\\n        address token_address\\n    ) public returns (AggregatorV3Interface) {\\n        if (\\n            current_ContractAddresses_Id != 0 &&\\n            token_address_in_contract_addresses[current_ContractAddresses_Id]\\n                .token_address ==\\n            token_address\\n        ) {\\n            return\\n                token_address_in_contract_addresses[\\n                    current_ContractAddresses_Id\\n                ].this_priceFeed;\\n        } else {\\n            bool priceFeed_exist = false;\\n\\n            for (uint256 i = 0; i <= ContractAddresses_Id; i++) {\\n                if (\\n                    token_address_in_contract_addresses[i].token_address ==\\n                    token_address &&\\n                    token_address_in_contract_addresses[i].valid == true\\n                ) {\\n                    priceFeed = token_address_in_contract_addresses[i]\\n                        .this_priceFeed;\\n                    current_ContractAddresses_Id = i;\\n                    priceFeed_exist = true;\\n                }\\n            }\\n\\n            require(\\n                priceFeed_exist == true,\\n                \\\"token address is not supported @ set_ENS_address()!\\\"\\n            );\\n\\n            return priceFeed;\\n        }\\n    }\\n\\n    /**\\n     * to update ChainLink ENS address in struct ChainLink_Price_Feed_Contract_Addresses.\\n     * parameters:\\n     * id: id of ChainLink_Price_Feed_Contract_Addresses\\n     * token_address:supported ERC20 token in the ChainLink_Price_Feed_Contract_Addresses.\\n     * ENS_address: https://docs.chain.link/data-feeds/price-feeds/addresses\\n     * valid: valid or not for this address in the ChainLink_Price_Feed_Contract_Addresses.\\n     */\\n    function update_ENS_address(\\n        uint256 id,\\n        address token_address,\\n        address ENS_address,\\n        bool valid\\n    ) public {\\n        require(\\n            developer == msg.sender,\\n            \\\"only developer can update ENS address!\\\"\\n        );\\n\\n        AggregatorV3Interface this_priceFeed = AggregatorV3Interface(\\n            ENS_address\\n        );\\n\\n        uint ENS_address_decimails = this_priceFeed.decimals();\\n\\n        token_address_in_contract_addresses[id].token_address = token_address;\\n        token_address_in_contract_addresses[id].ENS_address = ENS_address;\\n        token_address_in_contract_addresses[id].this_priceFeed = this_priceFeed;\\n        token_address_in_contract_addresses[id]\\n            .ENS_address_decimails = ENS_address_decimails;\\n        token_address_in_contract_addresses[id].valid = valid;\\n    }\\n\\n    /**\\n     * Returns the round data.\\n     */\\n    function getRoundData(\\n        uint80 _roundId\\n    ) public view returns (uint80, int256, uint256, uint256, uint80) {\\n        // prettier-ignore\\n        (\\n            uint80 roundID,\\n            int256 answer,\\n            uint startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        ) = priceFeed.getRoundData(_roundId);\\n        return (roundID, answer, startedAt, updatedAt, answeredInRound);\\n    }\\n\\n    /**\\n     * Returns the latest price.\\n     */\\n    function getLatestPrice()\\n        public\\n        view\\n        returns (uint80, int, uint, uint, uint80)\\n    {\\n        // prettier-ignore\\n        (\\n            uint80 roundID,\\n            int price,\\n            uint startedAt,\\n            uint timeStamp,\\n            uint80 answeredInRound\\n        ) = priceFeed.latestRoundData();\\n\\n        return (roundID, price, startedAt, timeStamp, answeredInRound);\\n    }\\n\\n    /**\\n     * to add last price from ChainLink price feed into struct TokenPrice\\n     * parameters:\\n     * token_address:supported ERC20 token in the ChainLink_Price_Feed_Contract_Addresses.\\n     * returns:\\n     * priceFeed.latestRoundData object\\n     * uint80 roundID, int price, uint startedAt,uint timeStamp, uint80 answeredInRound\\n     */\\n    /*\\n    function add_last_token_price(address token_address) public returns (uint80, int, uint, uint,uint80) {\\n\\n        priceFeed = set_ENS_address(token_address);\\n\\n        (\\n            uint80 roundID,\\n            int price,\\n            uint startedAt,\\n            uint timeStamp,\\n            uint80 answeredInRound\\n        ) = getLatestPrice();\\n\\n        bool exist = false;\\n\\n        for (uint256 i = 0; i <= TokenPrice_Id; i++) {\\n            \\n            if( Token_Price[i].token_address == token_address && Token_Price[i].roundID == roundID ) {\\n\\n                exist = true;\\n\\n                break;\\n\\n            }\\n\\n        }\\n\\n        if(exist == false){\\n\\n            TokenPrice_Id++;\\n    \\n\\n            TokenPrice storage new_Token_Price = Token_Price[TokenPrice_Id];\\n            new_Token_Price.id = TokenPrice_Id;\\n            new_Token_Price.token_address = token_address_in_contract_addresses[current_ContractAddresses_Id].token_address;\\n            new_Token_Price.ENS_address = token_address_in_contract_addresses[current_ContractAddresses_Id].ENS_address;\\n            new_Token_Price.roundID = roundID;\\n            new_Token_Price.Timestamp = timeStamp;\\n            new_Token_Price.price = price;\\n\\n\\n        }\\n\\n        return (roundID, price, startedAt,timeStamp, answeredInRound );\\n\\n        \\n\\n    }\\n    */\\n\\n    /**\\n     * Returns historical price for a round id.\\n     * roundId is NOT incremental. Not all roundIds are valid.\\n     * You must know a valid roundId before consuming historical data.\\n     *\\n     * ROUNDID VALUES:\\n     *    InValid:      18446744073709562300\\n     *    Valid:        18446744073709554683\\n     *\\n     * @dev A timestamp with zero value means the round is not complete and should not be used.\\n     */\\n    function getHistoricalPrice(\\n        uint80 roundId\\n    ) public view returns (int256, uint) {\\n        // prettier-ignore\\n        (\\n            /*uint80 roundID*/,\\n            int price,\\n            /*uint startedAt*/,\\n            uint timeStamp,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.getRoundData(roundId);\\n        //require(timeStamp > 0, \\\"Round not complete\\\");\\n        if (timeStamp == 0) {\\n            price = 0;\\n        }\\n        return (price, timeStamp);\\n    }\\n\\n    /**\\n     * to fetch the price from ChainLink price feed of specified timeStamp\\n     * parameters:\\n     * token_address:supported ERC20 token in the ChainLink_Price_Feed_Contract_Addresses.\\n     * timeStamp:preffered timestamp.\\n     * token_decimails:token_decimails of supported ERC20 token\\n     * returns:\\n     * priceFeed.getRoundData() object by roundId\\n     * int256 price.\\n     * uint80 timeStamp.\\n     */\\n    function fetch_closest_price_to_timestamp(\\n        address token_address,\\n        uint timeStamp,\\n        uint token_decimails\\n    ) public returns (uint256, uint80) {\\n        set_ENS_address(token_address);\\n\\n        uint80 roundID;\\n        int price;\\n        uint startedAt;\\n        uint last_timeStamp;\\n        uint80 answeredInRound;\\n\\n        /*first get roundID of last price*/\\n        (\\n            roundID,\\n            price,\\n            startedAt,\\n            last_timeStamp,\\n            answeredInRound\\n        ) = getLatestPrice();\\n\\n        /*use roundID of last price to find old data*/\\n        bool found = false;\\n        uint80 next_roundID = roundID;\\n        uint ENS_address_decimails;\\n\\n        int next_price;\\n        uint next_timeStamp;\\n\\n        while (found == false) {\\n            (next_price, next_timeStamp) = getHistoricalPrice(next_roundID);\\n\\n            target_price = next_price;\\n            target_roundID = next_roundID;\\n\\n            /*find the smallest timestamp_difference, means closest timestamp to the target*/\\n            if (\\n                next_timeStamp <= timeStamp &&\\n                next_timeStamp > 0 &&\\n                next_price > 0\\n            ) {\\n                ENS_address_decimails = token_address_in_contract_addresses[\\n                    current_ContractAddresses_Id\\n                ].ENS_address_decimails;\\n                found = true;\\n                break;\\n            }\\n\\n            next_roundID--;\\n        }\\n\\n        /* calculates correct deciamls */\\n        uint correct_decimals = token_decimails - ENS_address_decimails;\\n        returned_target_price = uint(target_price) * (10 ** correct_decimals);\\n\\n        return (returned_target_price, target_roundID);\\n    }\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}