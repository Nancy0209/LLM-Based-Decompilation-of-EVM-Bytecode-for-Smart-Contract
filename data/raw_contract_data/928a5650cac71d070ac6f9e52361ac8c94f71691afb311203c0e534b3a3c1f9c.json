{
    "address": "0x5a913264FF9a427e0452acB8f522E8202CBB6234",
    "tx_hash": "928a5650cac71d070ac6f9e52361ac8c94f71691afb311203c0e534b3a3c1f9c",
    "block_number": 18007323,
    "timestamp": 1693155323,
    "gas_used_in_creation": 4000578,
    "creation_bytecode": "60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e5576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516147396200011f600039600081816109060152818161099c01528181610f4f01528181610fe501526110e001526147396000f3fe60806040526004361061025f5760003560e01c8063715018a61161013e578063ac905114116100bf578063d9caed1211610079578063e06a1e7e11610061578063e06a1e7e146106c3578063ecb3a34b146106e3578063f2fde38b1461071057005b8063d9caed1214610683578063da64fc27146106a357005b8063b3ab15fb116100a7578063b3ab15fb1461061f578063bed998501461063f578063c17cccc31461065557005b8063ac905114146105e9578063b047fa19146105ff57005b8063866d84281161011057806391c7fdf1116100f857806391c7fdf1146105815780639f1efac0146105a1578063a9e56f3c146105c157005b8063866d84281461054e5780638da5cb5b1461056357005b8063715018a6146104e2578063766cb70c146104f75780637efad8e01461051757806385535cc51461052e57005b80634b0e7216116101e05780635ace58131161019a578063678f3ef311610182578063678f3ef31461048c5780636e3f20df146104ac57806370d5ae05146104c257005b80635ace5813146104445780635cadd08d1461046c57005b80634dd9584a116101c85780634dd9584a146103fc5780634f1ef2861461041c57806352d1902d1461042f57005b80634b0e7216146103c95780634d8b58a9146103e957005b806324558995116102315780633659cfe6116102195780633659cfe6146103655780633a1b629514610385578063430bf08a146103a957005b806324558995146103255780633013ce291461034557005b806308deb7ed14610268578063127effb214610288578063189d165e146102c55780631a3e5457146102e557005b3661026657005b005b34801561027457600080fd5b50610266610283366004613a7e565b610730565b34801561029457600080fd5b5060cb546102a8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102d157600080fd5b506102666102e0366004613a7e565b610862565b3480156102f157600080fd5b50610315610300366004613aac565b60cf6020526000908152604090205460ff1681565b60405190151581526020016102bc565b34801561033157600080fd5b5060ca546102a8906001600160a01b031681565b34801561035157600080fd5b5060c9546102a8906001600160a01b031681565b34801561037157600080fd5b50610266610380366004613aac565b6108fb565b34801561039157600080fd5b5061039b60d15481565b6040519081526020016102bc565b3480156103b557600080fd5b5060cd546102a8906001600160a01b031681565b3480156103d557600080fd5b506102666103e4366004613aac565b610a99565b6102666103f7366004613a7e565b610b05565b34801561040857600080fd5b50610266610417366004613aac565b610ed8565b61026661042a366004613b47565b610f44565b34801561043b57600080fd5b5061039b6110d3565b34801561045057600080fd5b506102a8731111111254eeb25477b68fb85ed929f73a96058281565b34801561047857600080fd5b50610266610487366004613aac565b611198565b34801561049857600080fd5b506102666104a7366004613aac565b6111df565b3480156104b857600080fd5b5061039b60d35481565b3480156104ce57600080fd5b5060cc546102a8906001600160a01b031681565b3480156104ee57600080fd5b50610266611229565b34801561050357600080fd5b50610266610512366004613a7e565b61123d565b34801561052357600080fd5b5061039b620f424081565b34801561053a57600080fd5b50610266610549366004613aac565b6112cd565b34801561055a57600080fd5b5061039b603281565b34801561056f57600080fd5b506097546001600160a01b03166102a8565b34801561058d57600080fd5b5061026661059c366004613a7e565b611339565b3480156105ad57600080fd5b506102666105bc366004613c72565b6113ac565b3480156105cd57600080fd5b506102a8738731d54e9d02c286767d56ac03e8037c07e01e9881565b3480156105f557600080fd5b5061039b61271081565b34801561060b57600080fd5b5061026661061a366004613a7e565b611503565b34801561062b57600080fd5b5061026661063a366004613aac565b611510565b34801561064b57600080fd5b5061039b60ce5481565b34801561066157600080fd5b50610675610670366004613d21565b61157c565b6040516102bc929190613d56565b34801561068f57600080fd5b5061026661069e366004613db2565b611745565b3480156106af57600080fd5b506102666106be366004613df3565b6117ba565b3480156106cf57600080fd5b506102666106de366004613f0e565b611b47565b3480156106ef57600080fd5b506107036106fe366004613f65565b611c04565b6040516102bc9190613fb1565b34801561071c57600080fd5b5061026661072b366004613aac565b612080565b6097546001600160a01b0316331480610753575060cb546001600160a01b031633145b6107a45760405162461bcd60e51b815260206004820152601260248201527f4e6f74206f776e65722f6f70657261746f72000000000000000000000000000060448201526064015b60405180910390fd5b600081116107f45760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e74000000000000000000000000000000000000604482015260640161079b565b6000620f424060ce54836108089190614072565b61081291906140af565b9050600061082082846140ea565b60c95460cc54919250610840916001600160a01b0391821691168461210d565b60c95460cd5461085d916001600160a01b0390811691168361210d565b505050565b61086a6122ae565b620f42408111156108bd5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420726174650000000000000000000000000000000000000000604482015260640161079b565b60ce81905560405181815233907fd9b1e3f01cd661ef953311d34e0a8e755b4b05627773e326bf817585b460d98d906020015b60405180910390a250565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561099a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161079b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109f57f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610a715760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161079b565b610a7a81612308565b60408051600080825260208201909252610a9691839190612310565b50565b610aa16122ae565b60cc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811790915560405133907ffbdfc8456656c11feb91fb8f8a8e98169cbc3ee5c2021c64f30eadc1cc162bfc90600090a350565b6097546001600160a01b0316331480610b28575060cb546001600160a01b031633145b610b745760405162461bcd60e51b815260206004820152601260248201527f4e6f74206f776e65722f6f70657261746f720000000000000000000000000000604482015260640161079b565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152738731d54e9d02c286767d56ac03e8037c07e01e98602482015260009073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb489063dd62ed3e90604401602060405180830381865afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190614101565b905081811015610c7a57610c7a73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48738731d54e9d02c286767d56ac03e8037c07e01e987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124ce565b604080517f0ed943ce24baebf257488771759f9bf482c397060000000000000000000000006020808301919091528251601481840301815260548301845260006034909301838152845160608101865284815280840185905285518087018752600281527f3078000000000000000000000000000000000000000000000000000000000000948101949094528086019390935293517f0a5123690000000000000000000000000000000000000000000000000000000081529293738731d54e9d02c286767d56ac03e8037c07e01e9893630a51236993610d6693606693600193919290916004016141b9565b6040805180830381865afa158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da69190614211565b509050738731d54e9d02c286767d56ac03e8037c07e01e98639fbf10fc826066600160053089610dd58161269a565b604080516060810182526000808252602080830182905283518085018552600281527f3078000000000000000000000000000000000000000000000000000000000000818301528385015283517f0ed943ce24baebf257488771759f9bf482c3970600000000000000000000000091810191909152835160148183030181526054820185526034909101918252925160e08c901b7fffffffff00000000000000000000000000000000000000000000000000000000168152610ea1999897969594939190600401614235565b6000604051808303818588803b158015610eba57600080fd5b505af1158015610ece573d6000803e3d6000fd5b5050505050505050565b610ee06122ae565b60ca80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811790915560405133907f4c1d060969b91afc44ec37769ef9d5ef5d48676aa184be2e3e1db8c22dc8634e90600090a350565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610fe35760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161079b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661103e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146110ba5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161079b565b6110c382612308565b6110cf82826001612310565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111735760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161079b565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6111a06122ae565b6001600160a01b0316600090815260cf6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b6111e76122ae565b6001600160a01b0316600090815260cf6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b6112316122ae565b61123b60006126e5565b565b6112456122ae565b61271081106112965760405162461bcd60e51b815260206004820152601060248201527f696e76616c696420736c69707061676500000000000000000000000000000000604482015260640161079b565b60d381905560405181815233907f1ffad795b81fd50d1c8d2358d2f76b8990007d5ae2a57cbc7c94359adabe4c1c906020016108f0565b6112d56122ae565b60cd80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811790915560405133907f264c87df72775fe58e3c609521a87c6d110905a3c5723cdc64999a965240233d90600090a350565b6113416122ae565b60d1548111156113935760405162461bcd60e51b815260206004820152600860248201527f746f6f206d756368000000000000000000000000000000000000000000000000604482015260640161079b565b60cb54610a96906000906001600160a01b03168361210d565b6097546001600160a01b03163314806113cf575060cb546001600160a01b031633145b61141b5760405162461bcd60e51b815260206004820152601260248201527f4e6f74206f776e65722f6f70657261746f720000000000000000000000000000604482015260640161079b565b60005b848110156114575761144786868381811061143b5761143b6142b3565b9050608002018361274f565b611450816142e2565b905061141e565b5060005b828110156114fb576114eb848483818110611478576114786142b3565b905060200281019061148a919061431b565b3585858481811061149d5761149d6142b3565b90506020028101906114af919061431b565b602001358686858181106114c5576114c56142b3565b90506020028101906114d7919061431b565b6114e5906040810190614359565b86612abe565b6114f4816142e2565b905061145b565b505050505050565b61150b6122ae565b60d155565b6115186122ae565b60cb80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811790915560405133907fc6ff2811ce7460679e9eea69d68b93be8399fc2613c2579c8fdb999c1083272290600090a350565b60606000808590506000816001600160a01b031663574f2ba36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e89190614101565b905084818710611600575060609350915061173d9050565b61160a87836140ea565b81111561161e5761161b87836140ea565b90505b60008167ffffffffffffffff81111561163957611639613ac9565b604051908082528060200260200182016040528015611662578160200160208202803683370190505b50905060005b828110156117285760006001600160a01b038616631e3dd18b61168b848d6143c1565b6040518263ffffffff1660e01b81526004016116a991815260200190565b602060405180830381865afa1580156116c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ea91906143d9565b9050808383815181106116ff576116ff6142b3565b6001600160a01b039092166020928302919091019091015250611721816142e2565b9050611668565b5080611734838a6143c1565b95509550505050505b935093915050565b600160d25414156117985760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161079b565b600160d2556117a56122ae565b6117b083838361210d565b5050600060d25550565b600054610100900460ff16158080156117da5750600054600160ff909116105b806117f45750303b1580156117f4575060005460ff166001145b6118665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161079b565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156118c457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6118cc612e67565b6118d4612eec565b60c980547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b038b81169190911790925560ca805482168a841617905560cb8054821689841617905560cc8054821688841617905560cd8054909116918616919091179055620f42408311156119955760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420726174650000000000000000000000000000000000000000604482015260640161079b565b60ce83905560005b8251811015611a1e57600160cf60008584815181106119be576119be6142b3565b6020908102919091018101516001600160a01b0316825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055611a17816142e2565b905061199d565b5060ca60009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9691906143d9565b60d080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905568056bc75e2d6310000060d1558015610ece57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050505050565b6097546001600160a01b0316331480611b6a575060cb546001600160a01b031633145b611bb65760405162461bcd60e51b815260206004820152601260248201527f4e6f74206f776e65722f6f70657261746f720000000000000000000000000000604482015260640161079b565b60005b82811015611bfe57611bee848483818110611bd657611bd66142b3565b9050602002810190611be891906143f6565b83612f69565b611bf7816142e2565b9050611bb9565b50505050565b606060008367ffffffffffffffff811115611c2157611c21613ac9565b604051908082528060200260200182016040528015611cad57816020015b611c9a6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b815260200190600190039081611c3f5790505b50905060005b84811015612077576000868683818110611ccf57611ccf6142b3565b9050602002016020810190611ce49190613aac565b9050868683818110611cf857611cf86142b3565b9050602002016020810190611d0d9190613aac565b838381518110611d1f57611d1f6142b3565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da591906143d9565b838381518110611db757611db76142b3565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050806001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3d91906143d9565b838381518110611e4f57611e4f6142b3565b6020026020010151606001906001600160a01b031690816001600160a01b031681525050806001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed59190614448565b826dffffffffffffffffffffffffffff169250816dffffffffffffffffffffffffffff16915050848481518110611f0e57611f0e6142b3565b6020026020010151604001858581518110611f2b57611f2b6142b3565b602090810291909101015160800191909152526040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301528216906370a0823190602401602060405180830381865afa158015611f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc19190614101565b838381518110611fd357611fd36142b3565b602002602001015160a0018181525050806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612021573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120459190614101565b838381518110612057576120576142b3565b602090810291909101015160c0015250612070816142e2565b9050611cb3565b50949350505050565b6120886122ae565b6001600160a01b0381166121045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161079b565b610a96816126e5565b6001600160a01b0382166121635760405162461bcd60e51b815260206004820152601160248201527f696e76616c696420726563697069656e74000000000000000000000000000000604482015260640161079b565b8061216d57505050565b6001600160a01b03831661229a5747808211156121f05760d0546001600160a01b0316632e1a7d4d61219f83856140ea565b6040518263ffffffff1660e01b81526004016121bd91815260200190565b600060405180830381600087803b1580156121d757600080fd5b505af11580156121eb573d6000803e3d6000fd5b505050505b6000836001600160a01b03168360405160006040518083038185875af1925050503d806000811461223d576040519150601f19603f3d011682016040523d82523d6000602084013e612242565b606091505b50509050806122935760405162461bcd60e51b815260206004820152600b60248201527f63616c6c206661696c6564000000000000000000000000000000000000000000604482015260640161079b565b5050505050565b61085d6001600160a01b0384168383613465565b6097546001600160a01b0316331461123b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161079b565b610a966122ae565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156123435761085d836134ae565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156123bb575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526123b891810190614101565b60015b61242d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161079b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146124c25760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161079b565b5061085d838383613584565b80158061256157506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561253b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255f9190614101565b155b6125d35760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161079b565b6040516001600160a01b03831660248201526044810182905261085d9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526135a9565b60d354600090156126d25761271060d3546127106126b891906140ea565b6126c29084614072565b6126cc91906140af565b92915050565b6127106126b86032826140ea565b919050565b609780546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061275e6020840184613aac565b60ca546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03918216602482015291169063dd62ed3e90604401602060405180830381865afa1580156127c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ea9190614101565b905082602001358110156128465760ca54612846906001600160a01b03167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6128366020870187613aac565b6001600160a01b031691906124ce565b60006128556020850185613aac565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b691906143d9565b905060006128c76020860186613aac565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612904573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292891906143d9565b60ca54604080517fbaa2abde0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152808516602483015260208a01356044830152918901356064820152606089013560848201523060a48201524260c4820152929350169063baa2abde9060e40160408051808303816000875af19250505080156129f9575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526129f691810190614211565b60015b612ab5577f1f324e03f5e6aa3b12505639715fc0cb03b6565338b75346ea6525b2e8d26f78612a2b6020870187613aac565b604080516001600160a01b0390921682526020808901359083015280880135908201526060808801359082015260800160405180910390a183612ab05760405162461bcd60e51b815260206004820152601760248201527f72656d6f7665206c6971756964697479206661696c6564000000000000000000604482015260640161079b565b612293565b50505050505050565b60018211612b0e5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420706174680000000000000000000000000000000000000000604482015260640161079b565b60cf60008484612b1f6001826140ea565b818110612b2e57612b2e6142b3565b9050602002016020810190612b439190613aac565b6001600160a01b0316815260208101919091526040016000205460ff16612bac5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420706174680000000000000000000000000000000000000000604482015260640161079b565b600083836000818110612bc157612bc16142b3565b9050602002016020810190612bd69190613aac565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5d9190614101565b9050808711612c6c5786612c6e565b805b60ca546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0391821660248201529198506000919084169063dd62ed3e90604401602060405180830381865afa158015612cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d019190614101565b905087811015612d565760ca54612d56906001600160a01b0316612d45837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6140ea565b6001600160a01b0386169190613691565b60ca546040517f5c11d7950000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690635c11d79590612da9908b908b908b908b90309042906004016144d6565b600060405180830381600087803b158015612dc357600080fd5b505af1925050508015612dd4575060015b610ece577fb5e16b423e0c7728af0ee6376462392c8b58d6a715379e33aacedf96d08c824888888888604051612e0d9493929190614514565b60405180910390a183612e625760405162461bcd60e51b815260206004820152600b60248201527f73776170206661696c6564000000000000000000000000000000000000000000604482015260640161079b565b610ece565b600054610100900460ff16612ee45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161079b565b61123b613770565b600054610100900460ff1661123b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161079b565b30612f7a60a0840160808501613aac565b6001600160a01b031614612fd05760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420646573630000000000000000000000000000000000000000604482015260640161079b565b60cf6000612fe46060850160408601613aac565b6001600160a01b0316815260208101919091526040016000205460ff1661304d5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420646573630000000000000000000000000000000000000000604482015260640161079b565b600061305f6040840160208501613aac565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152731111111254eeb25477b68fb85ed929f73a96058260248201526001600160a01b03919091169063dd62ed3e90604401602060405180830381865afa1580156130d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fc9190614101565b905060a083013581101561315057613150731111111254eeb25477b68fb85ed929f73a9605826131308360a08701356140ea565b6131406040870160208801613aac565b6001600160a01b03169190613691565b60006131626060850160408601613aac565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156131c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e59190614101565b6040805160008082526020820190925291925050731111111254eeb25477b68fb85ed929f73a9605826312aa3caf6132206020880188613aac565b60208801846132336101008b018b614534565b6040518663ffffffff1660e01b81526004016132539594939291906145e2565b60408051808303816000875af19250505080156132ab575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526132a891810190614211565b60015b61336e576132bf6060860160408701613aac565b6001600160a01b03166132d86040870160208801613aac565b6001600160a01b03167f5eb8adef58d76642eeabd75ebd0894adbd67509ff7a9db3c4ecef039d524f8fa876020016080013560405161331991815260200190565b60405180910390a383612ab05760405162461bcd60e51b815260206004820152600b60248201527f73776170206661696c6564000000000000000000000000000000000000000000604482015260640161079b565b50600090506133836060870160408801613aac565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156133e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134069190614101565b905060c086013561341784836140ea565b10156114fb5760405162461bcd60e51b815260206004820152601160248201527f72657475726e206e6f7420656e6f756768000000000000000000000000000000604482015260640161079b565b6040516001600160a01b03831660248201526044810182905261085d9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612618565b6001600160a01b0381163b61352b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161079b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61358d836137f6565b60008251118061359a5750805b1561085d57611bfe8383613836565b60006135fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138629092919063ffffffff16565b905080516000148061361f57508080602001905181019061361f919061469a565b61085d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161079b565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156136fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371e9190614101565b9050611bfe847f095ea7b3000000000000000000000000000000000000000000000000000000008561375086866143c1565b6040516001600160a01b0390921660248301526044820152606401612618565b600054610100900460ff166137ed5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161079b565b61123b336126e5565b6137ff816134ae565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061385b83836040518060600160405280602781526020016146dd60279139613879565b9392505050565b606061387184846000856138f1565b949350505050565b6060600080856001600160a01b03168560405161389691906146b7565b600060405180830381855af49150503d80600081146138d1576040519150601f19603f3d011682016040523d82523d6000602084013e6138d6565b606091505b50915091506138e7868383876139e3565b9695505050505050565b6060824710156139695760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161079b565b600080866001600160a01b0316858760405161398591906146b7565b60006040518083038185875af1925050503d80600081146139c2576040519150601f19603f3d011682016040523d82523d6000602084013e6139c7565b606091505b50915091506139d8878383876139e3565b979650505050505050565b60608315613a4f578251613a48576001600160a01b0385163b613a485760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161079b565b5081613871565b6138718383815115613a645781518083602001fd5b8060405162461bcd60e51b815260040161079b91906146c9565b600060208284031215613a9057600080fd5b5035919050565b6001600160a01b0381168114610a9657600080fd5b600060208284031215613abe57600080fd5b813561385b81613a97565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613b3f57613b3f613ac9565b604052919050565b60008060408385031215613b5a57600080fd5b8235613b6581613a97565b915060208381013567ffffffffffffffff80821115613b8357600080fd5b818601915086601f830112613b9757600080fd5b813581811115613ba957613ba9613ac9565b613bd9847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613af8565b91508082528784828501011115613bef57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008083601f840112613c1f57600080fd5b50813567ffffffffffffffff811115613c3757600080fd5b6020830191508360208260051b8501011115613c5257600080fd5b9250929050565b8015158114610a9657600080fd5b80356126e081613c59565b600080600080600060608688031215613c8a57600080fd5b853567ffffffffffffffff80821115613ca257600080fd5b818801915088601f830112613cb657600080fd5b813581811115613cc557600080fd5b8960208260071b8501011115613cda57600080fd5b602092830197509550908701359080821115613cf557600080fd5b50613d0288828901613c0d565b9094509250613d15905060408701613c67565b90509295509295909350565b600080600060608486031215613d3657600080fd5b8335613d4181613a97565b95602085013595506040909401359392505050565b604080825283519082018190526000906020906060840190828701845b82811015613d985781516001600160a01b031684529284019290840190600101613d73565b50505092019290925292915050565b80356126e081613a97565b600080600060608486031215613dc757600080fd5b8335613dd281613a97565b92506020840135613de281613a97565b929592945050506040919091013590565b600080600080600080600060e0888a031215613e0e57600080fd5b8735613e1981613a97565b9650602088810135613e2a81613a97565b96506040890135613e3a81613a97565b95506060890135613e4a81613a97565b94506080890135613e5a81613a97565b935060a0890135925060c089013567ffffffffffffffff80821115613e7e57600080fd5b818b0191508b601f830112613e9257600080fd5b813581811115613ea457613ea4613ac9565b8060051b9150613eb5848301613af8565b818152918301840191848101908e841115613ecf57600080fd5b938501935b83851015613ef95784359250613ee983613a97565b8282529385019390850190613ed4565b80965050505050505092959891949750929550565b600080600060408486031215613f2357600080fd5b833567ffffffffffffffff811115613f3a57600080fd5b613f4686828701613c0d565b9094509250506020840135613f5a81613c59565b809150509250925092565b600080600060408486031215613f7a57600080fd5b833567ffffffffffffffff811115613f9157600080fd5b613f9d86828701613c0d565b9094509250506020840135613f5a81613a97565b602080825282518282018190526000919060409081850190868401855b8281101561403657815180516001600160a01b039081168652878201518116888701528682015187870152606080830151909116908601526080808201519086015260a0808201519086015260c0908101519085015260e09093019290850190600101613fce565b5091979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156140aa576140aa614043565b500290565b6000826140e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000828210156140fc576140fc614043565b500390565b60006020828403121561411357600080fd5b5051919050565b60005b8381101561413557818101518382015260200161411d565b83811115611bfe5750506000910152565b6000815180845261415e81602086016020860161411a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805182526020810151602083015260006040820151606060408501526138716060850182614146565b61ffff8616815260ff8516602082015260a0604082015260006141df60a0830186614146565b82810360608401526141f18186614146565b905082810360808401526142058185614190565b98975050505050505050565b6000806040838503121561422457600080fd5b505080516020909101519092909150565b600061012061ffff8c1683528a60208401528960408401526001600160a01b03891660608401528760808401528660a08401528060c084015261427a81840187614190565b905082810360e084015261428e8186614146565b90508281036101008401526142a38185614146565b9c9b505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561431457614314614043565b5060010190565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261434f57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261438e57600080fd5b83018035915067ffffffffffffffff8211156143a957600080fd5b6020019150600581901b3603821315613c5257600080fd5b600082198211156143d4576143d4614043565b500190565b6000602082840312156143eb57600080fd5b815161385b81613a97565b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee183360301811261434f57600080fd5b80516dffffffffffffffffffffffffffff811681146126e057600080fd5b60008060006060848603121561445d57600080fd5b6144668461442a565b92506144746020850161442a565b9150604084015163ffffffff81168114613f5a57600080fd5b8183526000602080850194508260005b858110156144cb5781356144b081613a97565b6001600160a01b03168752958201959082019060010161449d565b509495945050505050565b86815285602082015260a0604082015260006144f660a08301868861448d565b6001600160a01b039490941660608301525060800152949350505050565b8481528360208201526060604082015260006138e760608301848661448d565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261456957600080fd5b83018035915067ffffffffffffffff82111561458457600080fd5b602001915036819003821315613c5257600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60006101406001600160a01b03808916845287356145ff81613a97565b818116602086015250602088013561461681613a97565b818116604086015250604088013561462d81613a97565b8181166060860152505061464360608801613da7565b6001600160a01b038116608085015250608087013560a084015260a087013560c084015260c087013560e08401528061010084015261468481840187614146565b9050828103610120840152614205818587614599565b6000602082840312156146ac57600080fd5b815161385b81613c59565b6000825161434f81846020870161411a565b60208152600061385b602083018461414656fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b69906d87131c0977064d13fb21763339a0ef83b1c774d960ac9501febe0cbcd64736f6c634300080a0033",
    "runtime_bytecode": "60806040526004361061025f5760003560e01c8063715018a61161013e578063ac905114116100bf578063d9caed1211610079578063e06a1e7e11610061578063e06a1e7e146106c3578063ecb3a34b146106e3578063f2fde38b1461071057005b8063d9caed1214610683578063da64fc27146106a357005b8063b3ab15fb116100a7578063b3ab15fb1461061f578063bed998501461063f578063c17cccc31461065557005b8063ac905114146105e9578063b047fa19146105ff57005b8063866d84281161011057806391c7fdf1116100f857806391c7fdf1146105815780639f1efac0146105a1578063a9e56f3c146105c157005b8063866d84281461054e5780638da5cb5b1461056357005b8063715018a6146104e2578063766cb70c146104f75780637efad8e01461051757806385535cc51461052e57005b80634b0e7216116101e05780635ace58131161019a578063678f3ef311610182578063678f3ef31461048c5780636e3f20df146104ac57806370d5ae05146104c257005b80635ace5813146104445780635cadd08d1461046c57005b80634dd9584a116101c85780634dd9584a146103fc5780634f1ef2861461041c57806352d1902d1461042f57005b80634b0e7216146103c95780634d8b58a9146103e957005b806324558995116102315780633659cfe6116102195780633659cfe6146103655780633a1b629514610385578063430bf08a146103a957005b806324558995146103255780633013ce291461034557005b806308deb7ed14610268578063127effb214610288578063189d165e146102c55780631a3e5457146102e557005b3661026657005b005b34801561027457600080fd5b50610266610283366004613a7e565b610730565b34801561029457600080fd5b5060cb546102a8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102d157600080fd5b506102666102e0366004613a7e565b610862565b3480156102f157600080fd5b50610315610300366004613aac565b60cf6020526000908152604090205460ff1681565b60405190151581526020016102bc565b34801561033157600080fd5b5060ca546102a8906001600160a01b031681565b34801561035157600080fd5b5060c9546102a8906001600160a01b031681565b34801561037157600080fd5b50610266610380366004613aac565b6108fb565b34801561039157600080fd5b5061039b60d15481565b6040519081526020016102bc565b3480156103b557600080fd5b5060cd546102a8906001600160a01b031681565b3480156103d557600080fd5b506102666103e4366004613aac565b610a99565b6102666103f7366004613a7e565b610b05565b34801561040857600080fd5b50610266610417366004613aac565b610ed8565b61026661042a366004613b47565b610f44565b34801561043b57600080fd5b5061039b6110d3565b34801561045057600080fd5b506102a8731111111254eeb25477b68fb85ed929f73a96058281565b34801561047857600080fd5b50610266610487366004613aac565b611198565b34801561049857600080fd5b506102666104a7366004613aac565b6111df565b3480156104b857600080fd5b5061039b60d35481565b3480156104ce57600080fd5b5060cc546102a8906001600160a01b031681565b3480156104ee57600080fd5b50610266611229565b34801561050357600080fd5b50610266610512366004613a7e565b61123d565b34801561052357600080fd5b5061039b620f424081565b34801561053a57600080fd5b50610266610549366004613aac565b6112cd565b34801561055a57600080fd5b5061039b603281565b34801561056f57600080fd5b506097546001600160a01b03166102a8565b34801561058d57600080fd5b5061026661059c366004613a7e565b611339565b3480156105ad57600080fd5b506102666105bc366004613c72565b6113ac565b3480156105cd57600080fd5b506102a8738731d54e9d02c286767d56ac03e8037c07e01e9881565b3480156105f557600080fd5b5061039b61271081565b34801561060b57600080fd5b5061026661061a366004613a7e565b611503565b34801561062b57600080fd5b5061026661063a366004613aac565b611510565b34801561064b57600080fd5b5061039b60ce5481565b34801561066157600080fd5b50610675610670366004613d21565b61157c565b6040516102bc929190613d56565b34801561068f57600080fd5b5061026661069e366004613db2565b611745565b3480156106af57600080fd5b506102666106be366004613df3565b6117ba565b3480156106cf57600080fd5b506102666106de366004613f0e565b611b47565b3480156106ef57600080fd5b506107036106fe366004613f65565b611c04565b6040516102bc9190613fb1565b34801561071c57600080fd5b5061026661072b366004613aac565b612080565b6097546001600160a01b0316331480610753575060cb546001600160a01b031633145b6107a45760405162461bcd60e51b815260206004820152601260248201527f4e6f74206f776e65722f6f70657261746f72000000000000000000000000000060448201526064015b60405180910390fd5b600081116107f45760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e74000000000000000000000000000000000000604482015260640161079b565b6000620f424060ce54836108089190614072565b61081291906140af565b9050600061082082846140ea565b60c95460cc54919250610840916001600160a01b0391821691168461210d565b60c95460cd5461085d916001600160a01b0390811691168361210d565b505050565b61086a6122ae565b620f42408111156108bd5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420726174650000000000000000000000000000000000000000604482015260640161079b565b60ce81905560405181815233907fd9b1e3f01cd661ef953311d34e0a8e755b4b05627773e326bf817585b460d98d906020015b60405180910390a250565b306001600160a01b037f0000000000000000000000005a913264ff9a427e0452acb8f522e8202cbb623416141561099a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161079b565b7f0000000000000000000000005a913264ff9a427e0452acb8f522e8202cbb62346001600160a01b03166109f57f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610a715760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161079b565b610a7a81612308565b60408051600080825260208201909252610a9691839190612310565b50565b610aa16122ae565b60cc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811790915560405133907ffbdfc8456656c11feb91fb8f8a8e98169cbc3ee5c2021c64f30eadc1cc162bfc90600090a350565b6097546001600160a01b0316331480610b28575060cb546001600160a01b031633145b610b745760405162461bcd60e51b815260206004820152601260248201527f4e6f74206f776e65722f6f70657261746f720000000000000000000000000000604482015260640161079b565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152738731d54e9d02c286767d56ac03e8037c07e01e98602482015260009073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb489063dd62ed3e90604401602060405180830381865afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190614101565b905081811015610c7a57610c7a73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48738731d54e9d02c286767d56ac03e8037c07e01e987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124ce565b604080517f0ed943ce24baebf257488771759f9bf482c397060000000000000000000000006020808301919091528251601481840301815260548301845260006034909301838152845160608101865284815280840185905285518087018752600281527f3078000000000000000000000000000000000000000000000000000000000000948101949094528086019390935293517f0a5123690000000000000000000000000000000000000000000000000000000081529293738731d54e9d02c286767d56ac03e8037c07e01e9893630a51236993610d6693606693600193919290916004016141b9565b6040805180830381865afa158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da69190614211565b509050738731d54e9d02c286767d56ac03e8037c07e01e98639fbf10fc826066600160053089610dd58161269a565b604080516060810182526000808252602080830182905283518085018552600281527f3078000000000000000000000000000000000000000000000000000000000000818301528385015283517f0ed943ce24baebf257488771759f9bf482c3970600000000000000000000000091810191909152835160148183030181526054820185526034909101918252925160e08c901b7fffffffff00000000000000000000000000000000000000000000000000000000168152610ea1999897969594939190600401614235565b6000604051808303818588803b158015610eba57600080fd5b505af1158015610ece573d6000803e3d6000fd5b5050505050505050565b610ee06122ae565b60ca80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811790915560405133907f4c1d060969b91afc44ec37769ef9d5ef5d48676aa184be2e3e1db8c22dc8634e90600090a350565b306001600160a01b037f0000000000000000000000005a913264ff9a427e0452acb8f522e8202cbb6234161415610fe35760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161079b565b7f0000000000000000000000005a913264ff9a427e0452acb8f522e8202cbb62346001600160a01b031661103e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146110ba5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161079b565b6110c382612308565b6110cf82826001612310565b5050565b6000306001600160a01b037f0000000000000000000000005a913264ff9a427e0452acb8f522e8202cbb623416146111735760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161079b565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6111a06122ae565b6001600160a01b0316600090815260cf6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b6111e76122ae565b6001600160a01b0316600090815260cf6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b6112316122ae565b61123b60006126e5565b565b6112456122ae565b61271081106112965760405162461bcd60e51b815260206004820152601060248201527f696e76616c696420736c69707061676500000000000000000000000000000000604482015260640161079b565b60d381905560405181815233907f1ffad795b81fd50d1c8d2358d2f76b8990007d5ae2a57cbc7c94359adabe4c1c906020016108f0565b6112d56122ae565b60cd80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811790915560405133907f264c87df72775fe58e3c609521a87c6d110905a3c5723cdc64999a965240233d90600090a350565b6113416122ae565b60d1548111156113935760405162461bcd60e51b815260206004820152600860248201527f746f6f206d756368000000000000000000000000000000000000000000000000604482015260640161079b565b60cb54610a96906000906001600160a01b03168361210d565b6097546001600160a01b03163314806113cf575060cb546001600160a01b031633145b61141b5760405162461bcd60e51b815260206004820152601260248201527f4e6f74206f776e65722f6f70657261746f720000000000000000000000000000604482015260640161079b565b60005b848110156114575761144786868381811061143b5761143b6142b3565b9050608002018361274f565b611450816142e2565b905061141e565b5060005b828110156114fb576114eb848483818110611478576114786142b3565b905060200281019061148a919061431b565b3585858481811061149d5761149d6142b3565b90506020028101906114af919061431b565b602001358686858181106114c5576114c56142b3565b90506020028101906114d7919061431b565b6114e5906040810190614359565b86612abe565b6114f4816142e2565b905061145b565b505050505050565b61150b6122ae565b60d155565b6115186122ae565b60cb80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811790915560405133907fc6ff2811ce7460679e9eea69d68b93be8399fc2613c2579c8fdb999c1083272290600090a350565b60606000808590506000816001600160a01b031663574f2ba36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e89190614101565b905084818710611600575060609350915061173d9050565b61160a87836140ea565b81111561161e5761161b87836140ea565b90505b60008167ffffffffffffffff81111561163957611639613ac9565b604051908082528060200260200182016040528015611662578160200160208202803683370190505b50905060005b828110156117285760006001600160a01b038616631e3dd18b61168b848d6143c1565b6040518263ffffffff1660e01b81526004016116a991815260200190565b602060405180830381865afa1580156116c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ea91906143d9565b9050808383815181106116ff576116ff6142b3565b6001600160a01b039092166020928302919091019091015250611721816142e2565b9050611668565b5080611734838a6143c1565b95509550505050505b935093915050565b600160d25414156117985760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161079b565b600160d2556117a56122ae565b6117b083838361210d565b5050600060d25550565b600054610100900460ff16158080156117da5750600054600160ff909116105b806117f45750303b1580156117f4575060005460ff166001145b6118665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161079b565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156118c457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6118cc612e67565b6118d4612eec565b60c980547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b038b81169190911790925560ca805482168a841617905560cb8054821689841617905560cc8054821688841617905560cd8054909116918616919091179055620f42408311156119955760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420726174650000000000000000000000000000000000000000604482015260640161079b565b60ce83905560005b8251811015611a1e57600160cf60008584815181106119be576119be6142b3565b6020908102919091018101516001600160a01b0316825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055611a17816142e2565b905061199d565b5060ca60009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9691906143d9565b60d080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905568056bc75e2d6310000060d1558015610ece57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050505050565b6097546001600160a01b0316331480611b6a575060cb546001600160a01b031633145b611bb65760405162461bcd60e51b815260206004820152601260248201527f4e6f74206f776e65722f6f70657261746f720000000000000000000000000000604482015260640161079b565b60005b82811015611bfe57611bee848483818110611bd657611bd66142b3565b9050602002810190611be891906143f6565b83612f69565b611bf7816142e2565b9050611bb9565b50505050565b606060008367ffffffffffffffff811115611c2157611c21613ac9565b604051908082528060200260200182016040528015611cad57816020015b611c9a6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b815260200190600190039081611c3f5790505b50905060005b84811015612077576000868683818110611ccf57611ccf6142b3565b9050602002016020810190611ce49190613aac565b9050868683818110611cf857611cf86142b3565b9050602002016020810190611d0d9190613aac565b838381518110611d1f57611d1f6142b3565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da591906143d9565b838381518110611db757611db76142b3565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050806001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3d91906143d9565b838381518110611e4f57611e4f6142b3565b6020026020010151606001906001600160a01b031690816001600160a01b031681525050806001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed59190614448565b826dffffffffffffffffffffffffffff169250816dffffffffffffffffffffffffffff16915050848481518110611f0e57611f0e6142b3565b6020026020010151604001858581518110611f2b57611f2b6142b3565b602090810291909101015160800191909152526040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301528216906370a0823190602401602060405180830381865afa158015611f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc19190614101565b838381518110611fd357611fd36142b3565b602002602001015160a0018181525050806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612021573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120459190614101565b838381518110612057576120576142b3565b602090810291909101015160c0015250612070816142e2565b9050611cb3565b50949350505050565b6120886122ae565b6001600160a01b0381166121045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161079b565b610a96816126e5565b6001600160a01b0382166121635760405162461bcd60e51b815260206004820152601160248201527f696e76616c696420726563697069656e74000000000000000000000000000000604482015260640161079b565b8061216d57505050565b6001600160a01b03831661229a5747808211156121f05760d0546001600160a01b0316632e1a7d4d61219f83856140ea565b6040518263ffffffff1660e01b81526004016121bd91815260200190565b600060405180830381600087803b1580156121d757600080fd5b505af11580156121eb573d6000803e3d6000fd5b505050505b6000836001600160a01b03168360405160006040518083038185875af1925050503d806000811461223d576040519150601f19603f3d011682016040523d82523d6000602084013e612242565b606091505b50509050806122935760405162461bcd60e51b815260206004820152600b60248201527f63616c6c206661696c6564000000000000000000000000000000000000000000604482015260640161079b565b5050505050565b61085d6001600160a01b0384168383613465565b6097546001600160a01b0316331461123b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161079b565b610a966122ae565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156123435761085d836134ae565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156123bb575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526123b891810190614101565b60015b61242d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161079b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146124c25760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161079b565b5061085d838383613584565b80158061256157506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561253b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255f9190614101565b155b6125d35760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161079b565b6040516001600160a01b03831660248201526044810182905261085d9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526135a9565b60d354600090156126d25761271060d3546127106126b891906140ea565b6126c29084614072565b6126cc91906140af565b92915050565b6127106126b86032826140ea565b919050565b609780546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061275e6020840184613aac565b60ca546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03918216602482015291169063dd62ed3e90604401602060405180830381865afa1580156127c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ea9190614101565b905082602001358110156128465760ca54612846906001600160a01b03167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6128366020870187613aac565b6001600160a01b031691906124ce565b60006128556020850185613aac565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b691906143d9565b905060006128c76020860186613aac565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612904573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292891906143d9565b60ca54604080517fbaa2abde0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152808516602483015260208a01356044830152918901356064820152606089013560848201523060a48201524260c4820152929350169063baa2abde9060e40160408051808303816000875af19250505080156129f9575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526129f691810190614211565b60015b612ab5577f1f324e03f5e6aa3b12505639715fc0cb03b6565338b75346ea6525b2e8d26f78612a2b6020870187613aac565b604080516001600160a01b0390921682526020808901359083015280880135908201526060808801359082015260800160405180910390a183612ab05760405162461bcd60e51b815260206004820152601760248201527f72656d6f7665206c6971756964697479206661696c6564000000000000000000604482015260640161079b565b612293565b50505050505050565b60018211612b0e5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420706174680000000000000000000000000000000000000000604482015260640161079b565b60cf60008484612b1f6001826140ea565b818110612b2e57612b2e6142b3565b9050602002016020810190612b439190613aac565b6001600160a01b0316815260208101919091526040016000205460ff16612bac5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420706174680000000000000000000000000000000000000000604482015260640161079b565b600083836000818110612bc157612bc16142b3565b9050602002016020810190612bd69190613aac565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5d9190614101565b9050808711612c6c5786612c6e565b805b60ca546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0391821660248201529198506000919084169063dd62ed3e90604401602060405180830381865afa158015612cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d019190614101565b905087811015612d565760ca54612d56906001600160a01b0316612d45837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6140ea565b6001600160a01b0386169190613691565b60ca546040517f5c11d7950000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690635c11d79590612da9908b908b908b908b90309042906004016144d6565b600060405180830381600087803b158015612dc357600080fd5b505af1925050508015612dd4575060015b610ece577fb5e16b423e0c7728af0ee6376462392c8b58d6a715379e33aacedf96d08c824888888888604051612e0d9493929190614514565b60405180910390a183612e625760405162461bcd60e51b815260206004820152600b60248201527f73776170206661696c6564000000000000000000000000000000000000000000604482015260640161079b565b610ece565b600054610100900460ff16612ee45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161079b565b61123b613770565b600054610100900460ff1661123b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161079b565b30612f7a60a0840160808501613aac565b6001600160a01b031614612fd05760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420646573630000000000000000000000000000000000000000604482015260640161079b565b60cf6000612fe46060850160408601613aac565b6001600160a01b0316815260208101919091526040016000205460ff1661304d5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420646573630000000000000000000000000000000000000000604482015260640161079b565b600061305f6040840160208501613aac565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152731111111254eeb25477b68fb85ed929f73a96058260248201526001600160a01b03919091169063dd62ed3e90604401602060405180830381865afa1580156130d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fc9190614101565b905060a083013581101561315057613150731111111254eeb25477b68fb85ed929f73a9605826131308360a08701356140ea565b6131406040870160208801613aac565b6001600160a01b03169190613691565b60006131626060850160408601613aac565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156131c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e59190614101565b6040805160008082526020820190925291925050731111111254eeb25477b68fb85ed929f73a9605826312aa3caf6132206020880188613aac565b60208801846132336101008b018b614534565b6040518663ffffffff1660e01b81526004016132539594939291906145e2565b60408051808303816000875af19250505080156132ab575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526132a891810190614211565b60015b61336e576132bf6060860160408701613aac565b6001600160a01b03166132d86040870160208801613aac565b6001600160a01b03167f5eb8adef58d76642eeabd75ebd0894adbd67509ff7a9db3c4ecef039d524f8fa876020016080013560405161331991815260200190565b60405180910390a383612ab05760405162461bcd60e51b815260206004820152600b60248201527f73776170206661696c6564000000000000000000000000000000000000000000604482015260640161079b565b50600090506133836060870160408801613aac565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156133e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134069190614101565b905060c086013561341784836140ea565b10156114fb5760405162461bcd60e51b815260206004820152601160248201527f72657475726e206e6f7420656e6f756768000000000000000000000000000000604482015260640161079b565b6040516001600160a01b03831660248201526044810182905261085d9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612618565b6001600160a01b0381163b61352b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161079b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61358d836137f6565b60008251118061359a5750805b1561085d57611bfe8383613836565b60006135fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138629092919063ffffffff16565b905080516000148061361f57508080602001905181019061361f919061469a565b61085d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161079b565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156136fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371e9190614101565b9050611bfe847f095ea7b3000000000000000000000000000000000000000000000000000000008561375086866143c1565b6040516001600160a01b0390921660248301526044820152606401612618565b600054610100900460ff166137ed5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161079b565b61123b336126e5565b6137ff816134ae565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061385b83836040518060600160405280602781526020016146dd60279139613879565b9392505050565b606061387184846000856138f1565b949350505050565b6060600080856001600160a01b03168560405161389691906146b7565b600060405180830381855af49150503d80600081146138d1576040519150601f19603f3d011682016040523d82523d6000602084013e6138d6565b606091505b50915091506138e7868383876139e3565b9695505050505050565b6060824710156139695760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161079b565b600080866001600160a01b0316858760405161398591906146b7565b60006040518083038185875af1925050503d80600081146139c2576040519150601f19603f3d011682016040523d82523d6000602084013e6139c7565b606091505b50915091506139d8878383876139e3565b979650505050505050565b60608315613a4f578251613a48576001600160a01b0385163b613a485760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161079b565b5081613871565b6138718383815115613a645781518083602001fd5b8060405162461bcd60e51b815260040161079b91906146c9565b600060208284031215613a9057600080fd5b5035919050565b6001600160a01b0381168114610a9657600080fd5b600060208284031215613abe57600080fd5b813561385b81613a97565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613b3f57613b3f613ac9565b604052919050565b60008060408385031215613b5a57600080fd5b8235613b6581613a97565b915060208381013567ffffffffffffffff80821115613b8357600080fd5b818601915086601f830112613b9757600080fd5b813581811115613ba957613ba9613ac9565b613bd9847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613af8565b91508082528784828501011115613bef57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008083601f840112613c1f57600080fd5b50813567ffffffffffffffff811115613c3757600080fd5b6020830191508360208260051b8501011115613c5257600080fd5b9250929050565b8015158114610a9657600080fd5b80356126e081613c59565b600080600080600060608688031215613c8a57600080fd5b853567ffffffffffffffff80821115613ca257600080fd5b818801915088601f830112613cb657600080fd5b813581811115613cc557600080fd5b8960208260071b8501011115613cda57600080fd5b602092830197509550908701359080821115613cf557600080fd5b50613d0288828901613c0d565b9094509250613d15905060408701613c67565b90509295509295909350565b600080600060608486031215613d3657600080fd5b8335613d4181613a97565b95602085013595506040909401359392505050565b604080825283519082018190526000906020906060840190828701845b82811015613d985781516001600160a01b031684529284019290840190600101613d73565b50505092019290925292915050565b80356126e081613a97565b600080600060608486031215613dc757600080fd5b8335613dd281613a97565b92506020840135613de281613a97565b929592945050506040919091013590565b600080600080600080600060e0888a031215613e0e57600080fd5b8735613e1981613a97565b9650602088810135613e2a81613a97565b96506040890135613e3a81613a97565b95506060890135613e4a81613a97565b94506080890135613e5a81613a97565b935060a0890135925060c089013567ffffffffffffffff80821115613e7e57600080fd5b818b0191508b601f830112613e9257600080fd5b813581811115613ea457613ea4613ac9565b8060051b9150613eb5848301613af8565b818152918301840191848101908e841115613ecf57600080fd5b938501935b83851015613ef95784359250613ee983613a97565b8282529385019390850190613ed4565b80965050505050505092959891949750929550565b600080600060408486031215613f2357600080fd5b833567ffffffffffffffff811115613f3a57600080fd5b613f4686828701613c0d565b9094509250506020840135613f5a81613c59565b809150509250925092565b600080600060408486031215613f7a57600080fd5b833567ffffffffffffffff811115613f9157600080fd5b613f9d86828701613c0d565b9094509250506020840135613f5a81613a97565b602080825282518282018190526000919060409081850190868401855b8281101561403657815180516001600160a01b039081168652878201518116888701528682015187870152606080830151909116908601526080808201519086015260a0808201519086015260c0908101519085015260e09093019290850190600101613fce565b5091979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156140aa576140aa614043565b500290565b6000826140e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000828210156140fc576140fc614043565b500390565b60006020828403121561411357600080fd5b5051919050565b60005b8381101561413557818101518382015260200161411d565b83811115611bfe5750506000910152565b6000815180845261415e81602086016020860161411a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805182526020810151602083015260006040820151606060408501526138716060850182614146565b61ffff8616815260ff8516602082015260a0604082015260006141df60a0830186614146565b82810360608401526141f18186614146565b905082810360808401526142058185614190565b98975050505050505050565b6000806040838503121561422457600080fd5b505080516020909101519092909150565b600061012061ffff8c1683528a60208401528960408401526001600160a01b03891660608401528760808401528660a08401528060c084015261427a81840187614190565b905082810360e084015261428e8186614146565b90508281036101008401526142a38185614146565b9c9b505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561431457614314614043565b5060010190565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261434f57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261438e57600080fd5b83018035915067ffffffffffffffff8211156143a957600080fd5b6020019150600581901b3603821315613c5257600080fd5b600082198211156143d4576143d4614043565b500190565b6000602082840312156143eb57600080fd5b815161385b81613a97565b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee183360301811261434f57600080fd5b80516dffffffffffffffffffffffffffff811681146126e057600080fd5b60008060006060848603121561445d57600080fd5b6144668461442a565b92506144746020850161442a565b9150604084015163ffffffff81168114613f5a57600080fd5b8183526000602080850194508260005b858110156144cb5781356144b081613a97565b6001600160a01b03168752958201959082019060010161449d565b509495945050505050565b86815285602082015260a0604082015260006144f660a08301868861448d565b6001600160a01b039490941660608301525060800152949350505050565b8481528360208201526060604082015260006138e760608301848661448d565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261456957600080fd5b83018035915067ffffffffffffffff82111561458457600080fd5b602001915036819003821315613c5257600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60006101406001600160a01b03808916845287356145ff81613a97565b818116602086015250602088013561461681613a97565b818116604086015250604088013561462d81613a97565b8181166060860152505061464360608801613da7565b6001600160a01b038116608085015250608087013560a084015260a087013560c084015260c087013560e08401528061010084015261468481840187614146565b9050828103610120840152614205818587614599565b6000602082840312156146ac57600080fd5b815161385b81613c59565b6000825161434f81846020870161411a565b60208152600061385b602083018461414656fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b69906d87131c0977064d13fb21763339a0ef83b1c774d960ac9501febe0cbcd64736f6c634300080a0033",
    "contract_name": "PCSFeeHandlerETH",
    "compiler_version": "v0.8.10+commit.fc410830",
    "optimization_used": "1",
    "runs": "20000",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AggregatorSwapFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"}],\"name\":\"NewBurnAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnRate\",\"type\":\"uint256\"}],\"name\":\"NewBurnRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"NewPancakeSwapRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stargateSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"NewStargateSwapSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"NewVaultAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPancakePair\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"RmoveLiquidityFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_STARGATE_SWAP_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"nextCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lps\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPairTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Amt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token1Amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct PCSFeeHandlerETH.LPData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeSwapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorTopUpLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct PCSFeeHandlerETH.RemoveLiquidityInfo[]\",\"name\":\"liquidityList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct PCSFeeHandlerETH.SwapInfo[]\",\"name\":\"swapList\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"ignoreError\",\"type\":\"bool\"}],\"name\":\"processFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendEthUsdcToBsc\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"}],\"name\":\"setBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorTopUpLimit\",\"type\":\"uint256\"}],\"name\":\"setOperatorTopUpLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeSwapRouter\",\"type\":\"address\"}],\"name\":\"setPancakeSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stargateSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"setStargateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateSwapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct IAggregationRouterV5.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct PCSFeeHandlerETH.AggregatorSwapInfo[]\",\"name\":\"swapList\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"ignoreError\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAggregator\",\"outputs\":[{\"internalType\":\"contract IAggregationRouterV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topUpOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validDestination\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAggregationRouterV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAggregationExecutor {\\n    /// @notice propagates information about original msg.sender and executes arbitrary data\\n    function execute(address msgSender) external payable;  // 0x4b64e492\\n}\\n\\ninterface IAggregationRouterV5 {\\n    struct SwapDescription {\\n        address srcToken;\\n        address dstToken;\\n        address payable srcReceiver;\\n        address payable dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n    }\\n\\n    function swap(\\n        IAggregationExecutor executor,\\n        SwapDescription calldata desc,\\n        bytes calldata permit,\\n        bytes calldata data\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 returnAmount,\\n            uint256 spentAmount\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\nimport './IPancakeRouter01.sol';\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStargateRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(\\n        uint256 _poolId,\\n        uint256 _amountLD,\\n        address _to\\n    ) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(\\n        uint16 _srcPoolId,\\n        uint256 _amountLP,\\n        address _to\\n    ) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/PCSFeeHandlerETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport './interfaces/IWETH.sol';\\nimport './interfaces/IPancakeRouter02.sol';\\nimport './interfaces/IPancakePair.sol';\\nimport './interfaces/IPancakeFactory.sol';\\nimport './interfaces/IStargateRouter.sol';\\nimport './interfaces/IAggregationRouterV5.sol';\\n\\ncontract PCSFeeHandlerETH is UUPSUpgradeable, OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct RemoveLiquidityInfo {\\n        IPancakePair pair;\\n        uint amount;\\n        uint amountAMin;\\n        uint amountBMin;\\n    }\\n\\n    struct AggregatorSwapInfo {\\n        IAggregationExecutor executor;\\n        IAggregationRouterV5.SwapDescription desc;\\n        bytes data;\\n    }\\n\\n    struct SwapInfo {\\n        uint amountIn;\\n        uint amountOutMin;\\n        address[] path;\\n    }\\n\\n    struct LPData {\\n        address lpAddress;\\n        address token0;\\n        uint256 token0Amt;\\n        address token1;\\n        uint256 token1Amt;\\n        uint256 userBalance;\\n        uint256 totalSupply;\\n    }\\n\\n    event SwapFailure(uint amountIn, uint amountOutMin, address[] path);\\n    event RmoveLiquidityFailure(IPancakePair pair, uint amount, uint amountAMin, uint amountBMin);\\n    event NewPancakeSwapRouter(address indexed sender, address indexed router);\\n    event NewOperatorAddress(address indexed sender, address indexed operator);\\n    event NewBurnAddress(address indexed sender, address indexed burnAddress);\\n    event NewVaultAddress(address indexed sender, address indexed vaultAddress);\\n    event NewBurnRate(address indexed sender, uint burnRate);\\n    event NewStargateSwapSlippage(address indexed sender, uint stargateSwapSlippage);\\n    event AggregatorSwapFail(address indexed srcToken, address indexed dstToken, uint256 amount);\\n\\n    // Token address for `payment`, that's our swap `target`.\\n    // On BSC, our `payment` is $CAKE\\n    // On ETH, there is no $CAKE, our `target` is $WETH\\n    address public paymentToken;\\n    IPancakeRouter02 public pancakeSwapRouter;\\n    address public operatorAddress; // address of the operator\\n\\n    address public burnAddress;\\n    address public vaultAddress;\\n\\n    uint public burnRate; // rate for burn (e.g. 718750 means 71.875%)\\n    uint constant public RATE_DENOMINATOR = 1000000;\\n    uint constant UNLIMITED_APPROVAL_AMOUNT = type(uint256).max;\\n    mapping(address => bool) public validDestination;\\n    IWETH WETH;\\n\\n    // Maximum amount of BNB/ETH to top-up operator\\n    uint public operatorTopUpLimit;\\n\\n    // Copied from: @openzeppelin/contracts/security/ReentrancyGuard.sol\\n    // We are not extending from `ReentrancyGuard` for contract storage safety.\\n    // As there were existing old version smart contract when we added this.\\n    uint256 private constant _NOT_ENTERED = 0;\\n    uint256 private constant _ENTERED = 1;\\n\\n    uint256 private _status;\\n\\n    //---------------------------------------------------------------------\\n    uint256 public stargateSwapSlippage;\\n\\n    // following are all constant variables\\n    uint256 public constant DEFAULT_STARGATE_SWAP_SLIPPAGE = 50; //out of 10000. 50 = 0.5%\\n    uint256 public constant SLIPPAGE_DENOMINATOR = 10_000;\\n    // https://stargateprotocol.gitbook.io/stargate/developers/pool-ids\\n    uint256 internal constant stargateUsdcPoolId = 1;\\n    uint256 internal constant stargateBusdPoolId = 5;\\n\\n    // https://etherscan.io/address/0x296F55F8Fb28E498B858d0BcDA06D955B2Cb3f97#code\\n    uint8 internal constant STARGATE_TYPE_SWAP_REMOTE = 1;\\n\\n    // https://stargateprotocol.gitbook.io/stargate/developers/chain-ids\\n    uint16 internal constant stargateBnbChainId = 102; // mainnet\\n    // uint16 internal constant stargateBnbChainId = 10102; // testnet\\n\\n    // https://stargateprotocol.gitbook.io/stargate/developers/official-erc20-addresses\\n    IERC20Upgradeable internal constant ETH_USDC_ADDRESS = IERC20Upgradeable(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); // mainnet\\n    // IERC20Upgradeable internal constant ETH_USDC_ADDRESS = IERC20Upgradeable(0xDf0360Ad8C5ccf25095Aa97ee5F2785c8d848620); // testnet\\n\\n    // https://bscscan.com/address/0x0ED943Ce24BaEBf257488771759F9BF482C39706\\n    address internal constant bscPCSFeeHandler = 0x0ED943Ce24BaEBf257488771759F9BF482C39706; // mainnet\\n    // address internal constant bscPCSFeeHandler = 0xf9578Af957fC6d730844b7DD2Ca1c24eBaD0f98F; // testnet\\n\\n    // https://stargateprotocol.gitbook.io/stargate/developers/contract-addresses/mainnet\\n    IStargateRouter constant public stargateRouter = IStargateRouter(0x8731d54E9D02c286767d56ac03e8037C07e01e98); // mainnet\\n    // IStargateRouter constant public stargateRouter = IStargateRouter(0x7612aE2a34E5A363E137De748801FB4c86499152); // testnet\\n    //---------------------------------------------------------------------\\n    IAggregationRouterV5 public constant swapAggregator = IAggregationRouterV5(0x1111111254EEB25477B68fb85Ed929f73A960582);\\n\\n    modifier nonReentrant() {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier onlyOwnerOrOperator() {\\n        require(msg.sender == owner() || msg.sender == operatorAddress, \\\"Not owner/operator\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _paymentToken,\\n        address _pancakeSwapRouter,\\n        address _operatorAddress,\\n        address _burnAddress,\\n        address _vaultAddress,\\n        uint _burnRate,\\n        address[] memory destinations\\n    )\\n        external\\n        initializer\\n    {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        paymentToken = _paymentToken;\\n        pancakeSwapRouter = IPancakeRouter02(_pancakeSwapRouter);\\n        operatorAddress = _operatorAddress;\\n        burnAddress = _burnAddress;\\n        vaultAddress = _vaultAddress;\\n        require(_burnRate <= RATE_DENOMINATOR, \\\"invalid rate\\\");\\n        burnRate = _burnRate;\\n        for (uint256 i = 0; i < destinations.length; ++i)\\n        {\\n            validDestination[destinations[i]] = true;\\n        }\\n        WETH = IWETH(pancakeSwapRouter.WETH());\\n        operatorTopUpLimit = 100 ether;\\n    }\\n\\n    /**\\n     * @notice Process LP token, `removeLiquidity` and `swap`\\n     * @dev Callable by owner/operator\\n     */\\n    function processFee(\\n        RemoveLiquidityInfo[] calldata liquidityList,\\n        SwapInfo[] calldata swapList,\\n        bool ignoreError\\n    )\\n        external\\n        onlyOwnerOrOperator\\n    {\\n        for (uint256 i = 0; i < liquidityList.length; ++i) {\\n            removeLiquidity(liquidityList[i], ignoreError);\\n        }\\n        for (uint256 i = 0; i < swapList.length; ++i) {\\n            _swap(swapList[i].amountIn, swapList[i].amountOutMin, swapList[i].path, ignoreError);\\n        }\\n    }\\n\\n    /**\\n     * @notice swap tokens\\n     * @dev Callable by owner/operator\\n     */\\n    function swap(\\n        AggregatorSwapInfo[] calldata swapList,\\n        bool ignoreError\\n    )\\n        external\\n        onlyOwnerOrOperator\\n    {\\n        // sell tokens\\n        for (uint256 i = 0; i < swapList.length; ++i) {\\n            _aggragator_swap(swapList[i], ignoreError);\\n        }\\n    }\\n\\n    function _aggragator_swap(\\n        AggregatorSwapInfo calldata swapInfo,\\n        bool ignoreError\\n    )\\n        internal\\n    {\\n        require(swapInfo.desc.dstReceiver == address(this), \\\"invalid desc\\\");\\n        require(validDestination[swapInfo.desc.dstToken], \\\"invalid desc\\\");\\n\\n        uint256 allowance = IERC20Upgradeable(swapInfo.desc.srcToken).allowance(address(this), address(swapAggregator));\\n        if (allowance < swapInfo.desc.amount) {\\n            // can we approve UNLIMITED_APPROVAL_AMOUNT?\\n            IERC20Upgradeable(swapInfo.desc.srcToken).safeIncreaseAllowance(address(swapAggregator), swapInfo.desc.amount - allowance);\\n        }\\n        uint256 dstAmountBefore = IERC20Upgradeable(swapInfo.desc.dstToken).balanceOf(address(this));\\n        bytes memory permit = new bytes(0);\\n        // swap can be `partially successful`\\n        try swapAggregator.swap(swapInfo.executor, swapInfo.desc, permit, swapInfo.data)\\n        {\\n            uint256 dstAmountAfter = IERC20Upgradeable(swapInfo.desc.dstToken).balanceOf(address(this));\\n            // this should never happen, as aggregator already validated this.\\n            require((dstAmountAfter - dstAmountBefore) >= swapInfo.desc.minReturnAmount, \\\"return not enough\\\");\\n        } catch {\\n            emit AggregatorSwapFail(swapInfo.desc.srcToken, swapInfo.desc.dstToken, swapInfo.desc.amount);\\n            require(ignoreError, \\\"swap failed\\\");\\n        }\\n        // do we need to clear allowance?\\n    }\\n\\n    function removeLiquidity(\\n        RemoveLiquidityInfo calldata info,\\n        bool ignoreError\\n    )\\n        internal\\n    {\\n        uint allowance = info.pair.allowance(address(this), address(pancakeSwapRouter));\\n        if (allowance < info.amount) {\\n            // We trust `PancakeSwapRouter` and we approve `MAX` for simplicity and gas-saving.\\n            // `PancakeERC20` only requires `MAX` approval once.\\n            IERC20Upgradeable(address(info.pair)).safeApprove(address(pancakeSwapRouter), UNLIMITED_APPROVAL_AMOUNT);\\n        }\\n        address token0 = info.pair.token0();\\n        address token1 = info.pair.token1();\\n        try pancakeSwapRouter.removeLiquidity(\\n                token0,\\n                token1,\\n                info.amount,\\n                info.amountAMin,\\n                info.amountBMin,\\n                address(this),\\n                block.timestamp\\n            )\\n        {\\n            // do nothing here\\n        } catch {\\n            emit RmoveLiquidityFailure(info.pair, info.amount, info.amountAMin, info.amountBMin);\\n            require(ignoreError, \\\"remove liquidity failed\\\");\\n            // if one of the swap fails, we do NOT revert and carry on\\n        }\\n    }\\n\\n    function _swap(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        bool ignoreError\\n    )\\n        internal\\n    {\\n        require(path.length > 1, \\\"invalid path\\\");\\n        require(validDestination[path[path.length - 1]], \\\"invalid path\\\");\\n        address token = path[0];\\n        uint tokenBalance = IERC20Upgradeable(token).balanceOf(address(this));\\n        amountIn = (amountIn > tokenBalance) ? tokenBalance : amountIn;\\n        // TODO: need to adjust `token0AmountOutMin` ?\\n        uint allowance = IERC20Upgradeable(token).allowance(address(this), address(pancakeSwapRouter));\\n        if (allowance < amountIn) {\\n            IERC20Upgradeable(token).safeIncreaseAllowance(address(pancakeSwapRouter), UNLIMITED_APPROVAL_AMOUNT - allowance);\\n        }\\n        try pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                address(this),\\n                block.timestamp\\n            )\\n        {\\n            // do nothing here\\n        } catch {\\n            emit SwapFailure(amountIn, amountOutMin, path);\\n            require(ignoreError, \\\"swap failed\\\");\\n            // if one of the swap fails, we do NOT revert and carry on\\n        }\\n    }\\n\\n    /**\\n     * @notice Send payment tokens to specified wallets(burn and vault)\\n     * @dev Callable by owner/operator\\n     */\\n    function payTreasury(uint amount)\\n        external\\n        onlyOwnerOrOperator\\n    {\\n        require (amount > 0, \\\"invalid amount\\\");\\n        uint burnAmount = amount * burnRate / RATE_DENOMINATOR;\\n        // The rest goes to the vault wallet.\\n        uint vaultAmount = amount - burnAmount;\\n        _withdraw(paymentToken, burnAddress, burnAmount);\\n        _withdraw(paymentToken, vaultAddress, vaultAmount);\\n    }\\n\\n    /**\\n     * @notice Set PancakeSwapRouter\\n     * @dev Callable by owner\\n     */\\n    function setPancakeSwapRouter(address _pancakeSwapRouter) external onlyOwner {\\n        pancakeSwapRouter = IPancakeRouter02(_pancakeSwapRouter);\\n        emit NewPancakeSwapRouter(msg.sender, _pancakeSwapRouter);\\n    }\\n\\n    /**\\n     * @notice Set operator address\\n     * @dev Callable by owner\\n     */\\n    function setOperator(address _operatorAddress) external onlyOwner {\\n        operatorAddress = _operatorAddress;\\n        emit NewOperatorAddress(msg.sender, _operatorAddress);\\n    }\\n\\n    /**\\n     * @notice Set address for `burn`\\n     * @dev Callable by owner\\n     */\\n    function setBurnAddress(address _burnAddress) external onlyOwner {\\n        burnAddress = _burnAddress;\\n        emit NewBurnAddress(msg.sender, _burnAddress);\\n    }\\n\\n    /**\\n     * @notice Set vault address\\n     * @dev Callable by owner\\n     */\\n    function setVaultAddress(address _vaultAddress) external onlyOwner {\\n        vaultAddress = _vaultAddress;\\n        emit NewVaultAddress(msg.sender, _vaultAddress);\\n    }\\n\\n    /**\\n     * @notice Set percentage of $CAKE being sent for burn\\n     * @dev Callable by owner\\n     */\\n    function setBurnRate(uint _burnRate) external onlyOwner {\\n        require(_burnRate <= RATE_DENOMINATOR, \\\"invalid rate\\\");\\n        burnRate = _burnRate;\\n        emit NewBurnRate(msg.sender, _burnRate);\\n    }\\n\\n    /**\\n     * @notice Withdraw tokens from this smart contract\\n     * @dev Callable by owner\\n     */\\n    function withdraw(address tokenAddr, address payable to, uint amount)\\n        external\\n        nonReentrant\\n        onlyOwner\\n    {\\n        _withdraw(tokenAddr, to, amount);\\n    }\\n\\n    function _withdraw(address tokenAddr, address to, uint amount) internal\\n    {\\n        require(to != address(0), \\\"invalid recipient\\\");\\n        if (amount == 0) {\\n            return;\\n        }\\n        if (tokenAddr == address(0)) {\\n            uint256 bnbBalance = address(this).balance;\\n            if (amount > bnbBalance) {\\n                // BNB/ETH not enough, unwrap WBNB/WETH\\n                // If WBNB/WETH balance is not enough, `withdraw` will `revert`.\\n                WETH.withdraw(amount - bnbBalance);\\n            }\\n            (bool success, ) = payable(to).call{ value: amount }(\\\"\\\");\\n            require(success, \\\"call failed\\\");\\n        }\\n        else {\\n            IERC20Upgradeable(tokenAddr).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice bridge(cross-chain-sending) token.\\n     *         This feature is added to ETH PCS fee to BSC network.\\n     *         Currently, for simplicity, it only supports ETH-USDC -> BSC-BUSD bridging.\\n     * @dev Callable by owner/operator\\n     */\\n    function sendEthUsdcToBsc(uint256 amount) external payable onlyOwnerOrOperator {\\n        uint allowance = ETH_USDC_ADDRESS.allowance(address(this), address(stargateRouter));\\n        if (allowance < amount) {\\n            ETH_USDC_ADDRESS.safeApprove(address(stargateRouter), UNLIMITED_APPROVAL_AMOUNT);\\n        }\\n\\n        uint256 swapFee;\\n        (swapFee,) = stargateRouter.quoteLayerZeroFee(\\n            stargateBnbChainId,\\n            STARGATE_TYPE_SWAP_REMOTE,\\n            abi.encodePacked(bscPCSFeeHandler),\\n            bytes(\\\"\\\"),\\n            IStargateRouter.lzTxObj(0, 0, \\\"0x\\\")\\n        );\\n\\n\\n        // do NOT require `msg.value >= swapFee` because we might want to use ETH in this smart contract.\\n        // require(msg.value >= swapFee, \\\"not enough value\\\");\\n        // https://stargateprotocol.gitbook.io/stargate/developers/how-to-swap\\n        // swap ETH-USDC -> BSC-BUSD\\n        //-------------------------------------------------------------------------------\\n        // For `lzTxObj` paramter:\\n        // We only need `additional gasLimit` if we need to call external smart contract(token swap is not part of external call).\\n        // https://github.com/stargate-protocol/stargate/blob/c647a3a647fc693c38b16ef023c54e518b46e206/contracts/Router.sol#L406\\n        //-------------------------------------------------------------------------------\\n        stargateRouter.swap { value : swapFee } (\\n            stargateBnbChainId,\\n            stargateUsdcPoolId,\\n            stargateBusdPoolId,\\n            payable(address(this)),           // refund adddress. extra gas (if any) is returned to this address\\n            amount,                           // quantity to swap\\n            getStargateMinOut(amount),        // the min qty you would accept on the destination\\n            IStargateRouter.lzTxObj(0, 0, \\\"0x\\\"),  // 0 additional gasLimit increase, 0 airdrop, at 0x address\\n            abi.encodePacked(bscPCSFeeHandler),   // the address to send the tokens to on the destination\\n            bytes(\\\"\\\")                      // bytes param, if you wish to send additional payload you can abi.encode() them here\\n        );\\n    }\\n\\n    function getStargateMinOut(uint256 _amountIn) internal view returns(uint256) {\\n        if (stargateSwapSlippage > 0) {\\n            return (_amountIn * (SLIPPAGE_DENOMINATOR - stargateSwapSlippage)) / SLIPPAGE_DENOMINATOR;\\n        }\\n        else {\\n            // this saves one multi-sig operation\\n            return (_amountIn * (SLIPPAGE_DENOMINATOR - DEFAULT_STARGATE_SWAP_SLIPPAGE)) / SLIPPAGE_DENOMINATOR;\\n        }\\n    }\\n\\n    /**\\n     * @notice Set `stargate swap slipapge`\\n     * @dev Callable by owner\\n     */\\n    function setStargateSwapSlippage(uint _stargateSwapSlippage) external onlyOwner {\\n        require(_stargateSwapSlippage < SLIPPAGE_DENOMINATOR, \\\"invalid slippage\\\");\\n        stargateSwapSlippage = _stargateSwapSlippage;\\n        emit NewStargateSwapSlippage(msg.sender, _stargateSwapSlippage);\\n    }\\n\\n    /**\\n     * @notice transfer some BNB/ETH to the operator as gas fee\\n     * @dev Callable by owner\\n     */\\n    function topUpOperator(uint256 amount) external onlyOwner {\\n        require(amount <= operatorTopUpLimit, \\\"too much\\\");\\n        _withdraw(address(0), operatorAddress, amount);\\n    }\\n\\n    /**\\n     * @notice Set top-up limit\\n     * @dev Callable by owner\\n     */\\n    function setOperatorTopUpLimit(uint256 _operatorTopUpLimit) external onlyOwner {\\n        operatorTopUpLimit = _operatorTopUpLimit;\\n    }\\n\\n    function addDestination(address addr) external onlyOwner {\\n        validDestination[addr] = true;\\n    }\\n\\n    function removeDestination(address addr) external onlyOwner {\\n        validDestination[addr] = false;\\n    }\\n\\n    // Utility for performance improvement, as we can get multiple of `pair addresses`.\\n    function getPairAddress(\\n        address factory,\\n        uint256 cursor,\\n        uint256 size\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory pairs,\\n            uint256 nextCursor\\n        )\\n    {\\n        IPancakeFactory pcsFactory = IPancakeFactory(factory);\\n        uint256 maxLength = pcsFactory.allPairsLength();\\n        uint256 length = size;\\n        if (cursor >= maxLength) {\\n            address[] memory emptyList;\\n            return (emptyList, maxLength);\\n        }\\n        if (length > maxLength - cursor) {\\n            length = maxLength - cursor;\\n        }\\n\\n        address[] memory values = new address[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            address tempAddr = address(pcsFactory.allPairs(cursor+i));\\n            values[i] = tempAddr;\\n        }\\n\\n        return (values, cursor + length);\\n    }\\n\\n    function getPairTokens(\\n        address[] calldata lps,\\n        address account\\n    )\\n        external\\n        view\\n        returns (\\n            LPData[] memory\\n        )\\n    {\\n        LPData[] memory lpListData = new LPData[](lps.length);\\n        for (uint256 i = 0; i < lps.length; ++i) {\\n            IPancakePair pair = IPancakePair(lps[i]);\\n            lpListData[i].lpAddress = lps[i];\\n            lpListData[i].token0 = pair.token0();\\n            lpListData[i].token1 = pair.token1();\\n            (lpListData[i].token0Amt, lpListData[i].token1Amt, ) = pair.getReserves();\\n            lpListData[i].userBalance = pair.balanceOf(account);\\n            lpListData[i].totalSupply = pair.totalSupply();\\n        }\\n        return lpListData;\\n    }\\n\\n    receive() external payable {}\\n    fallback() external payable {}\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
    "etherscan_verified": true
}