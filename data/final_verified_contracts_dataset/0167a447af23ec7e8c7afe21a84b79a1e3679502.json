{
    "address": "0x0167A447Af23ec7E8c7aFE21a84b79A1E3679502",
    "tx_hash": "81a1d2fcfc21cdab47dd912fe1580741094681eac0631df7e5f0c30b843aa13f",
    "block_number": 18000220,
    "timestamp": 1693069547,
    "gas_used_in_creation": 1776326,
    "creation_bytecode": "60806040526006805460ff19166001908117909155601460078190556008556009818155600a9182556019600b556023600c556000600d819055600e556103e8916200004c9190620003c6565b6200005c906327bc86aa620003de565b62000069906014620003de565b62000075919062000400565b600f556103e8620000896009600a620003c6565b62000099906327bc86aa620003de565b620000a6906014620003de565b620000b2919062000400565b6010556103e8620000c66009600a620003c6565b620000d6906327bc86aa620003de565b620000e3906001620003de565b620000ef919062000400565b6011556103e8620001036009600a620003c6565b62000113906327bc86aa620003de565b62000120906014620003de565b6200012c919062000400565b6012556014805461ffff60a81b191690553480156200014a57600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060068054610100600160a81b0319166101003302179055620001b16009600a620003c6565b620001c1906327bc86aa620003de565b336000908152600160208190526040822092909255600390620001ec6000546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182016000908120805495151560ff1996871617905530815260039093528183208054851660019081179091556006546101009004909116835291208054909216179055620002503390565b6001600160a01b031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6200028a6009600a620003c6565b6200029a906327bc86aa620003de565b60405190815260200160405180910390a362000423565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000308578160001904821115620002ec57620002ec620002b1565b80851615620002fa57918102915b93841c9390800290620002cc565b509250929050565b6000826200032157506001620003c0565b816200033057506000620003c0565b8160018114620003495760028114620003545762000374565b6001915050620003c0565b60ff841115620003685762000368620002b1565b50506001821b620003c0565b5060208310610133831016604e8410600b841016171562000399575081810a620003c0565b620003a58383620002c7565b8060001904821115620003bc57620003bc620002b1565b0290505b92915050565b6000620003d760ff84168362000310565b9392505050565b6000816000190483118215151615620003fb57620003fb620002b1565b500290565b6000826200041e57634e487b7160e01b600052601260045260246000fd5b500490565b6118a280620004336000396000f3fe6080604052600436106101185760003560e01c8063751039fc116100a0578063a9059cbb11610064578063a9059cbb1461030b578063bf474bed1461032b578063c876d0b914610341578063c9567bf91461035b578063dd62ed3e1461037057600080fd5b8063751039fc146102715780637d1db4a5146102865780638da5cb5b1461029c5780638f9a55c0146102c457806395d89b41146102da57600080fd5b806323b872dd116100e757806323b872dd146101d3578063313ce567146101f357806351bc3c851461020f57806370a0823114610226578063715018a61461025c57600080fd5b806306fdde0314610124578063095ea7b31461016a5780630faee56f1461019a57806318160ddd146101be57600080fd5b3661011f57005b600080fd5b34801561013057600080fd5b5060408051808201909152600b81526a424947204348554e47555360a81b60208201525b6040516101619190611459565b60405180910390f35b34801561017657600080fd5b5061018a6101853660046114c6565b6103b6565b6040519015158152602001610161565b3480156101a657600080fd5b506101b060125481565b604051908152602001610161565b3480156101ca57600080fd5b506101b06103cd565b3480156101df57600080fd5b5061018a6101ee3660046114f2565b6103ee565b3480156101ff57600080fd5b5060405160098152602001610161565b34801561021b57600080fd5b50610224610457565b005b34801561023257600080fd5b506101b0610241366004611533565b6001600160a01b031660009081526001602052604090205490565b34801561026857600080fd5b506102246104af565b34801561027d57600080fd5b5061022461052c565b34801561029257600080fd5b506101b0600f5481565b3480156102a857600080fd5b506000546040516001600160a01b039091168152602001610161565b3480156102d057600080fd5b506101b060105481565b3480156102e657600080fd5b50604080518082019091526008815267244348554e47555360c01b6020820152610154565b34801561031757600080fd5b5061018a6103263660046114c6565b6105e8565b34801561033757600080fd5b506101b060115481565b34801561034d57600080fd5b5060065461018a9060ff1681565b34801561036757600080fd5b506102246105f5565b34801561037c57600080fd5b506101b061038b366004611550565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b60006103c33384846109b1565b5060015b92915050565b60006103db6009600a611683565b6103e9906327bc86aa611692565b905090565b60006103fb848484610ad5565b61044d843361044885604051806060016040528060288152602001611845602891396001600160a01b038a16600090815260026020908152604080832033845290915290205491906110b8565b6109b1565b5060019392505050565b60065461010090046001600160a01b0316336001600160a01b03161461047c57600080fd5b30600090815260016020526040902054801561049b5761049b816110f2565b4780156104ab576104ab8161126c565b5050565b6000546001600160a01b031633146104e25760405162461bcd60e51b81526004016104d9906116b1565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146105565760405162461bcd60e51b81526004016104d9906116b1565b6105626009600a611683565b610570906327bc86aa611692565b600f5561057f6009600a611683565b61058d906327bc86aa611692565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105c76009600a611683565b6105d5906327bc86aa611692565b60405190815260200160405180910390a1565b60006103c3338484610ad5565b6000546001600160a01b0316331461061f5760405162461bcd60e51b81526004016104d9906116b1565b601454600160a01b900460ff16156106795760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104d9565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106c29030906106b46009600a611683565b610448906327bc86aa611692565b601360009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610715573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073991906116e6565b6001600160a01b031663c9c6539630601360009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf91906116e6565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801561080c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083091906116e6565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d7194730610878816001600160a01b031660009081526001602052604090205490565b60008061088d6000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156108f5573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061091a9190611703565b505060145460135460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af1158015610973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109979190611731565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b038316610a135760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104d9565b6001600160a01b038216610a745760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104d9565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b395760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104d9565b6001600160a01b038216610b9b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104d9565b60008111610bfd5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104d9565b600080546001600160a01b03858116911614801590610c2a57506000546001600160a01b03848116911614155b15610f7557610c5b6064610c55600b54600e5411610c4a57600754610c4e565b6009545b85906112aa565b90611333565b60065490915060ff1615610d43576013546001600160a01b03848116911614801590610c9557506014546001600160a01b03848116911614155b15610d4357326000908152600560205260409020544311610d305760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a4016104d9565b3260009081526005602052604090204390555b6014546001600160a01b038581169116148015610d6e57506013546001600160a01b03848116911614155b8015610d9357506001600160a01b03831660009081526003602052604090205460ff16155b15610e7b57600f54821115610dea5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104d9565b60105482610e0d856001600160a01b031660009081526001602052604090205490565b610e179190611753565b1115610e655760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104d9565b600e8054906000610e758361176b565b91905055505b6014546001600160a01b038481169116148015610ea157506001600160a01b0384163014155b15610ece57610ecb6064610c55600c54600e5411610ec157600854610c4e565b600a5485906112aa565b90505b30600090815260016020526040902054601454600160a81b900460ff16158015610f0557506014546001600160a01b038581169116145b8015610f1a5750601454600160b01b900460ff165b8015610f27575060115481115b8015610f365750600d54600e54115b15610f7357610f58610f5384610f4e84601254611375565b611375565b6110f2565b4766b1a2bc2ec50000811115610f7157610f714761126c565b505b505b8015610fef5730600090815260016020526040902054610f95908261138a565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fe69085815260200190565b60405180910390a35b6001600160a01b03841660009081526001602052604090205461101290836113e9565b6001600160a01b03851660009081526001602052604090205561105761103883836113e9565b6001600160a01b0385166000908152600160205260409020549061138a565b6001600160a01b0380851660008181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110a185856113e9565b60405190815260200160405180910390a350505050565b600081848411156110dc5760405162461bcd60e51b81526004016104d99190611459565b5060006110e98486611784565b95945050505050565b6014805460ff60a81b1916600160a81b179055604080516002808252606082018352600092602083019080368337019050509050308160008151811061113a5761113a61179b565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b791906116e6565b816001815181106111ca576111ca61179b565b6001600160a01b0392831660209182029290920101526013546111f091309116846109b1565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906112299085906000908690309042906004016117b1565b600060405180830381600087803b15801561124357600080fd5b505af1158015611257573d6000803e3d6000fd5b50506014805460ff60a81b1916905550505050565b6006546040516101009091046001600160a01b0316906108fc8315029083906000818181858888f193505050501580156104ab573d6000803e3d6000fd5b6000826000036112bc575060006103c7565b60006112c88385611692565b9050826112d58583611822565b1461132c5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104d9565b9392505050565b600061132c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061142b565b6000818311611384578261132c565b50919050565b6000806113978385611753565b90508381101561132c5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104d9565b600061132c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110b8565b6000818361144c5760405162461bcd60e51b81526004016104d99190611459565b5060006110e98486611822565b600060208083528351808285015260005b818110156114865785810183015185820160400152820161146a565b81811115611498576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146114c357600080fd5b50565b600080604083850312156114d957600080fd5b82356114e4816114ae565b946020939093013593505050565b60008060006060848603121561150757600080fd5b8335611512816114ae565b92506020840135611522816114ae565b929592945050506040919091013590565b60006020828403121561154557600080fd5b813561132c816114ae565b6000806040838503121561156357600080fd5b823561156e816114ae565b9150602083013561157e816114ae565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156115da5781600019048211156115c0576115c0611589565b808516156115cd57918102915b93841c93908002906115a4565b509250929050565b6000826115f1575060016103c7565b816115fe575060006103c7565b8160018114611614576002811461161e5761163a565b60019150506103c7565b60ff84111561162f5761162f611589565b50506001821b6103c7565b5060208310610133831016604e8410600b841016171561165d575081810a6103c7565b611667838361159f565b806000190482111561167b5761167b611589565b029392505050565b600061132c60ff8416836115e2565b60008160001904831182151516156116ac576116ac611589565b500290565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156116f857600080fd5b815161132c816114ae565b60008060006060848603121561171857600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561174357600080fd5b8151801515811461132c57600080fd5b6000821982111561176657611766611589565b500190565b60006001820161177d5761177d611589565b5060010190565b60008282101561179657611796611589565b500390565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156118015784516001600160a01b0316835293830193918301916001016117dc565b50506001600160a01b03969096166060850152505050608001529392505050565b60008261183f57634e487b7160e01b600052601260045260246000fd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220d5765bc7b0427ae09b57173c2a9a41092ddea249659013e9598e75cb08355f3b64736f6c634300080f0033",
    "runtime_bytecode": "",
    "contract_name": "BIGCHUNGUS",
    "compiler_version": "v0.8.15+commit.e14f2714",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\nTelegram: https://t.me/bigChungusentryportal\r\nWebsite: https://chungus.gg \r\nTwitter: https://x.com/bigchungustoken\r\nGame: https://chungus.gg/sfhggames/wgame/\r\n\r\n**/\r\n\r\n\r\npragma solidity ^0.8.15;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract BIGCHUNGUS is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = true;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=20;\r\n    uint256 private _initialSellTax=20;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=25;\r\n    uint256 private _reduceSellTaxAt=35;\r\n    uint256 private _preventSwapBefore=0;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 666666666 * 10**_decimals;\r\n    string private constant _name = unicode\"BIG CHUNGUS\";\r\n    string private constant _symbol = unicode\"$CHUNGUS\";\r\n    uint256 public _maxTxAmount = _tTotal * 20 / 1000;\r\n    uint256 public _maxWalletSize = _tTotal * 20 / 1000;\r\n    uint256 public _taxSwapThreshold= _tTotal * 1 / 1000;\r\n    uint256 public _maxTaxSwap= _tTotal * 20 / 1000;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n\r\n            if (transferDelayEnabled) {\r\n                  if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                      require(\r\n                          _holderLastTransferTimestamp[tx.origin] <\r\n                              block.number,\r\n                          \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                      );\r\n                      _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                  }\r\n              }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                _buyCount++;\r\n            }\r\n\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to   == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 50000000000000000) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        transferDelayEnabled = false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n}",
    "etherscan_verified": true
}