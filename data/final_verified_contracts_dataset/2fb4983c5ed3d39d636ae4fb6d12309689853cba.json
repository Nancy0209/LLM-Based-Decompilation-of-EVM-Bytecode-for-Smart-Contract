{
    "address": "0x2FB4983c5Ed3d39d636aE4fb6D12309689853cbA",
    "tx_hash": "0ffe86e865dcd746d0d12f2dcbb08a880db0333eeeedc53a936cdae2e10c03cd",
    "block_number": 18004565,
    "timestamp": 1693121903,
    "gas_used_in_creation": 1790351,
    "creation_bytecode": "6080604052600160055f6101000a81548160ff0219169083151502179055506012600655601e600755600160085560016009556019600a556019600b556019600c555f600d556200007f60646200007860026009600a6200006191906200047a565b6200007190633b9aca006200048a565b9062000257565b90620002ea565b600e556200009c6064620000786002620000616009600a6200047a565b600f55620000ba612710620000786001620000616009600a6200047a565b601055620000d86103e8620000786012620000616009600a6200047a565b6011556013805461ffff60a81b19169055348015620000f5575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060058054610100600160a81b03191661010033021790556200015b6009600a6200047a565b6200016b90633b9aca006200048a565b335f908152600160208190526040822092909255600390620001945f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556005546101009004909116835291208054909216179055620001f73390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002306009600a6200047a565b6200024090633b9aca006200048a565b60405190815260200160405180910390a362000511565b5f825f036200026857505f620002e4565b5f6200027583856200048a565b905082620002848583620004a4565b14620002e15760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084015b60405180910390fd5b90505b92915050565b5f620002e183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200033360201b60201c565b5f8183620003565760405162461bcd60e51b8152600401620002d89190620004c4565b505f620003648486620004a4565b95945050505050565b634e487b7160e01b5f52601160045260245ffd5b600181815b80851115620003c157815f1904821115620003a557620003a56200036d565b80851615620003b357918102915b93841c939080029062000386565b509250929050565b5f82620003d957506001620002e4565b81620003e757505f620002e4565b81600181146200040057600281146200040b576200042b565b6001915050620002e4565b60ff8411156200041f576200041f6200036d565b50506001821b620002e4565b5060208310610133831016604e8410600b841016171562000450575081810a620002e4565b6200045c838362000381565b805f19048211156200047257620004726200036d565b029392505050565b5f620002e160ff841683620003c9565b8082028115828204841417620002e457620002e46200036d565b5f82620004bf57634e487b7160e01b5f52601260045260245ffd5b500490565b5f6020808352835180828501525f5b81811015620004f157858101830151858201604001528201620004d3565b505f604082860101526040601f19601f8301168501019250505092915050565b611867806200051f5f395ff3fe608060405260043610610113575f3560e01c80637d1db4a51161009d578063bf474bed11610062578063bf474bed14610303578063c876d0b914610318578063c9567bf914610331578063dd62ed3e14610345578063f98b0adb14610389575f80fd5b80637d1db4a5146102675780638da5cb5b1461027c5780638f9a55c0146102a257806395d89b41146102b7578063a9059cbb146102e4575f80fd5b806323b872dd116100e357806323b872dd146101cf578063313ce567146101ee57806370a0823114610209578063715018a61461023d578063751039fc14610253575f80fd5b806306fdde031461011e578063095ea7b3146101695780630faee56f1461019857806318160ddd146101bb575f80fd5b3661011a57005b5f80fd5b348015610129575f80fd5b5060408051808201909152601181527057616c6c2053747265657420576f6a616b60781b60208201525b6040516101609190611443565b60405180910390f35b348015610174575f80fd5b506101886101833660046114a5565b6103a8565b6040519015158152602001610160565b3480156101a3575f80fd5b506101ad60115481565b604051908152602001610160565b3480156101c6575f80fd5b506101ad6103be565b3480156101da575f80fd5b506101886101e93660046114cf565b6103de565b3480156101f9575f80fd5b5060405160098152602001610160565b348015610214575f80fd5b506101ad61022336600461150d565b6001600160a01b03165f9081526001602052604090205490565b348015610248575f80fd5b50610251610445565b005b34801561025e575f80fd5b506102516104bf565b348015610272575f80fd5b506101ad600e5481565b348015610287575f80fd5b505f546040516001600160a01b039091168152602001610160565b3480156102ad575f80fd5b506101ad600f5481565b3480156102c2575f80fd5b50604080518082019091526005815264574f4a414b60d81b6020820152610153565b3480156102ef575f80fd5b506101886102fe3660046114a5565b61057a565b34801561030e575f80fd5b506101ad60105481565b348015610323575f80fd5b506005546101889060ff1681565b34801561033c575f80fd5b50610251610586565b348015610350575f80fd5b506101ad61035f366004611528565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b348015610394575f80fd5b506102516103a336600461155f565b61092f565b5f6103b43384846109cd565b5060015b92915050565b5f6103cb6009600a61166a565b6103d990633b9aca00611678565b905090565b5f6103ea848484610af0565b61043b84336104368560405180606001604052806028815260200161180a602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906110bb565b6109cd565b5060019392505050565b5f546001600160a01b031633146104775760405162461bcd60e51b815260040161046e9061168f565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146104e85760405162461bcd60e51b815260040161046e9061168f565b6104f46009600a61166a565b61050290633b9aca00611678565b600e556105116009600a61166a565b61051f90633b9aca00611678565b600f556005805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105596009600a61166a565b61056790633b9aca00611678565b60405190815260200160405180910390a1565b5f6103b4338484610af0565b5f546001600160a01b031633146105af5760405162461bcd60e51b815260040161046e9061168f565b601354600160a01b900460ff16156106095760405162461bcd60e51b815260206004820152601760248201527f54726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161046e565b601280546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106529030906106446009600a61166a565b61043690633b9aca00611678565b60125f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106a2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106c691906116c4565b6001600160a01b031663c9c653963060125f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610725573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061074991906116c4565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610793573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107b791906116c4565b601380546001600160a01b039283166001600160a01b03199091161790556012541663f305d71947306107fe816001600160a01b03165f9081526001602052604090205490565b5f806108115f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610877573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061089c91906116df565b505060135460125460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156108f1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610915919061170a565b506013805462ff00ff60a01b19166201000160a01b179055565b5f546001600160a01b031633146109585760405162461bcd60e51b815260040161046e9061168f565b8047101561099f5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161046e565b604051339082156108fc029083905f818181858888f193505050501580156109c9573d5f803e3d5ffd5b5050565b6001600160a01b038316610a2f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161046e565b6001600160a01b038216610a905760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161046e565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b545760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161046e565b6001600160a01b038216610bb65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161046e565b5f8111610c175760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161046e565b5f80546001600160a01b03858116911614801590610c4257505f546001600160a01b03848116911614155b15610f7e57610c736064610c6d600a54600d5411610c6257600654610c66565b6008545b85906110f3565b90611178565b60055490915060ff1615610d59576012546001600160a01b03848116911614801590610cad57506013546001600160a01b03848116911614155b15610d5957325f908152600460205260409020544311610d475760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a40161046e565b325f9081526004602052604090204390555b6013546001600160a01b038581169116148015610d8457506012546001600160a01b03848116911614155b8015610da857506001600160a01b0383165f9081526003602052604090205460ff16155b15610e8e57600e54821115610dff5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e00000000000000604482015260640161046e565b600f5482610e21856001600160a01b03165f9081526001602052604090205490565b610e2b9190611729565b1115610e795760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161046e565b600d8054905f610e888361173c565b91905055505b6013546001600160a01b038481169116148015610eb457506001600160a01b0384163014155b15610ee157610ede6064610c6d600b54600d5411610ed457600754610c66565b60095485906110f3565b90505b305f90815260016020526040902054601354600160a81b900460ff16158015610f1757506013546001600160a01b038581169116145b8015610f2c5750601354600160b01b900460ff165b8015610f39575060105481115b8015610f485750600c54600d54115b15610f7c57610f6a610f6584610f60846011546111b9565b6111b9565b6111cd565b478015610f7a57610f7a4761133d565b505b505b8015610ff657305f90815260016020526040902054610f9d9082611378565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fed9085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461101890836113d6565b6001600160a01b0385165f9081526001602052604090205561105b61103d83836113d6565b6001600160a01b0385165f9081526001602052604090205490611378565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110a485856113d6565b60405190815260200160405180910390a350505050565b5f81848411156110de5760405162461bcd60e51b815260040161046e9190611443565b505f6110ea8486611754565b95945050505050565b5f825f0361110257505f6103b8565b5f61110d8385611678565b90508261111a8583611767565b146111715760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161046e565b9392505050565b5f61117183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611417565b5f8183116111c75782611171565b50919050565b6013805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061121357611213611786565b6001600160a01b03928316602091820292909201810191909152601254604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561126a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061128e91906116c4565b816001815181106112a1576112a1611786565b6001600160a01b0392831660209182029290920101526012546112c791309116846109cd565b60125460405163791ac94760e01b81526001600160a01b039091169063791ac947906112ff9085905f9086903090429060040161179a565b5f604051808303815f87803b158015611316575f80fd5b505af1158015611328573d5f803e3d5ffd5b50506013805460ff60a81b1916905550505050565b6005546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156109c9573d5f803e3d5ffd5b5f806113848385611729565b9050838110156111715760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161046e565b5f61117183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110bb565b5f81836114375760405162461bcd60e51b815260040161046e9190611443565b505f6110ea8486611767565b5f6020808352835180828501525f5b8181101561146e57858101830151858201604001528201611452565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146114a2575f80fd5b50565b5f80604083850312156114b6575f80fd5b82356114c18161148e565b946020939093013593505050565b5f805f606084860312156114e1575f80fd5b83356114ec8161148e565b925060208401356114fc8161148e565b929592945050506040919091013590565b5f6020828403121561151d575f80fd5b81356111718161148e565b5f8060408385031215611539575f80fd5b82356115448161148e565b915060208301356115548161148e565b809150509250929050565b5f6020828403121561156f575f80fd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156115c457815f19048211156115aa576115aa611576565b808516156115b757918102915b93841c939080029061158f565b509250929050565b5f826115da575060016103b8565b816115e657505f6103b8565b81600181146115fc576002811461160657611622565b60019150506103b8565b60ff84111561161757611617611576565b50506001821b6103b8565b5060208310610133831016604e8410600b8410161715611645575081810a6103b8565b61164f838361158a565b805f190482111561166257611662611576565b029392505050565b5f61117160ff8416836115cc565b80820281158282048414176103b8576103b8611576565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156116d4575f80fd5b81516111718161148e565b5f805f606084860312156116f1575f80fd5b8351925060208401519150604084015190509250925092565b5f6020828403121561171a575f80fd5b81518015158114611171575f80fd5b808201808211156103b8576103b8611576565b5f6001820161174d5761174d611576565b5060010190565b818103818111156103b8576103b8611576565b5f8261178157634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156117e85784516001600160a01b0316835293830193918301916001016117c3565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220881c647a93601116082594c2864d3d9cb24d01e55b59213d7c0f650bb790ab3164736f6c63430008140033",
    "runtime_bytecode": "608060405260043610610113575f3560e01c80637d1db4a51161009d578063bf474bed11610062578063bf474bed14610303578063c876d0b914610318578063c9567bf914610331578063dd62ed3e14610345578063f98b0adb14610389575f80fd5b80637d1db4a5146102675780638da5cb5b1461027c5780638f9a55c0146102a257806395d89b41146102b7578063a9059cbb146102e4575f80fd5b806323b872dd116100e357806323b872dd146101cf578063313ce567146101ee57806370a0823114610209578063715018a61461023d578063751039fc14610253575f80fd5b806306fdde031461011e578063095ea7b3146101695780630faee56f1461019857806318160ddd146101bb575f80fd5b3661011a57005b5f80fd5b348015610129575f80fd5b5060408051808201909152601181527057616c6c2053747265657420576f6a616b60781b60208201525b6040516101609190611443565b60405180910390f35b348015610174575f80fd5b506101886101833660046114a5565b6103a8565b6040519015158152602001610160565b3480156101a3575f80fd5b506101ad60115481565b604051908152602001610160565b3480156101c6575f80fd5b506101ad6103be565b3480156101da575f80fd5b506101886101e93660046114cf565b6103de565b3480156101f9575f80fd5b5060405160098152602001610160565b348015610214575f80fd5b506101ad61022336600461150d565b6001600160a01b03165f9081526001602052604090205490565b348015610248575f80fd5b50610251610445565b005b34801561025e575f80fd5b506102516104bf565b348015610272575f80fd5b506101ad600e5481565b348015610287575f80fd5b505f546040516001600160a01b039091168152602001610160565b3480156102ad575f80fd5b506101ad600f5481565b3480156102c2575f80fd5b50604080518082019091526005815264574f4a414b60d81b6020820152610153565b3480156102ef575f80fd5b506101886102fe3660046114a5565b61057a565b34801561030e575f80fd5b506101ad60105481565b348015610323575f80fd5b506005546101889060ff1681565b34801561033c575f80fd5b50610251610586565b348015610350575f80fd5b506101ad61035f366004611528565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b348015610394575f80fd5b506102516103a336600461155f565b61092f565b5f6103b43384846109cd565b5060015b92915050565b5f6103cb6009600a61166a565b6103d990633b9aca00611678565b905090565b5f6103ea848484610af0565b61043b84336104368560405180606001604052806028815260200161180a602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906110bb565b6109cd565b5060019392505050565b5f546001600160a01b031633146104775760405162461bcd60e51b815260040161046e9061168f565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146104e85760405162461bcd60e51b815260040161046e9061168f565b6104f46009600a61166a565b61050290633b9aca00611678565b600e556105116009600a61166a565b61051f90633b9aca00611678565b600f556005805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105596009600a61166a565b61056790633b9aca00611678565b60405190815260200160405180910390a1565b5f6103b4338484610af0565b5f546001600160a01b031633146105af5760405162461bcd60e51b815260040161046e9061168f565b601354600160a01b900460ff16156106095760405162461bcd60e51b815260206004820152601760248201527f54726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161046e565b601280546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106529030906106446009600a61166a565b61043690633b9aca00611678565b60125f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106a2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106c691906116c4565b6001600160a01b031663c9c653963060125f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610725573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061074991906116c4565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610793573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107b791906116c4565b601380546001600160a01b039283166001600160a01b03199091161790556012541663f305d71947306107fe816001600160a01b03165f9081526001602052604090205490565b5f806108115f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610877573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061089c91906116df565b505060135460125460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156108f1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610915919061170a565b506013805462ff00ff60a01b19166201000160a01b179055565b5f546001600160a01b031633146109585760405162461bcd60e51b815260040161046e9061168f565b8047101561099f5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161046e565b604051339082156108fc029083905f818181858888f193505050501580156109c9573d5f803e3d5ffd5b5050565b6001600160a01b038316610a2f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161046e565b6001600160a01b038216610a905760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161046e565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b545760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161046e565b6001600160a01b038216610bb65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161046e565b5f8111610c175760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161046e565b5f80546001600160a01b03858116911614801590610c4257505f546001600160a01b03848116911614155b15610f7e57610c736064610c6d600a54600d5411610c6257600654610c66565b6008545b85906110f3565b90611178565b60055490915060ff1615610d59576012546001600160a01b03848116911614801590610cad57506013546001600160a01b03848116911614155b15610d5957325f908152600460205260409020544311610d475760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a40161046e565b325f9081526004602052604090204390555b6013546001600160a01b038581169116148015610d8457506012546001600160a01b03848116911614155b8015610da857506001600160a01b0383165f9081526003602052604090205460ff16155b15610e8e57600e54821115610dff5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e00000000000000604482015260640161046e565b600f5482610e21856001600160a01b03165f9081526001602052604090205490565b610e2b9190611729565b1115610e795760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161046e565b600d8054905f610e888361173c565b91905055505b6013546001600160a01b038481169116148015610eb457506001600160a01b0384163014155b15610ee157610ede6064610c6d600b54600d5411610ed457600754610c66565b60095485906110f3565b90505b305f90815260016020526040902054601354600160a81b900460ff16158015610f1757506013546001600160a01b038581169116145b8015610f2c5750601354600160b01b900460ff165b8015610f39575060105481115b8015610f485750600c54600d54115b15610f7c57610f6a610f6584610f60846011546111b9565b6111b9565b6111cd565b478015610f7a57610f7a4761133d565b505b505b8015610ff657305f90815260016020526040902054610f9d9082611378565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fed9085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461101890836113d6565b6001600160a01b0385165f9081526001602052604090205561105b61103d83836113d6565b6001600160a01b0385165f9081526001602052604090205490611378565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110a485856113d6565b60405190815260200160405180910390a350505050565b5f81848411156110de5760405162461bcd60e51b815260040161046e9190611443565b505f6110ea8486611754565b95945050505050565b5f825f0361110257505f6103b8565b5f61110d8385611678565b90508261111a8583611767565b146111715760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161046e565b9392505050565b5f61117183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611417565b5f8183116111c75782611171565b50919050565b6013805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061121357611213611786565b6001600160a01b03928316602091820292909201810191909152601254604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561126a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061128e91906116c4565b816001815181106112a1576112a1611786565b6001600160a01b0392831660209182029290920101526012546112c791309116846109cd565b60125460405163791ac94760e01b81526001600160a01b039091169063791ac947906112ff9085905f9086903090429060040161179a565b5f604051808303815f87803b158015611316575f80fd5b505af1158015611328573d5f803e3d5ffd5b50506013805460ff60a81b1916905550505050565b6005546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156109c9573d5f803e3d5ffd5b5f806113848385611729565b9050838110156111715760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161046e565b5f61117183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110bb565b5f81836114375760405162461bcd60e51b815260040161046e9190611443565b505f6110ea8486611767565b5f6020808352835180828501525f5b8181101561146e57858101830151858201604001528201611452565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146114a2575f80fd5b50565b5f80604083850312156114b6575f80fd5b82356114c18161148e565b946020939093013593505050565b5f805f606084860312156114e1575f80fd5b83356114ec8161148e565b925060208401356114fc8161148e565b929592945050506040919091013590565b5f6020828403121561151d575f80fd5b81356111718161148e565b5f8060408385031215611539575f80fd5b82356115448161148e565b915060208301356115548161148e565b809150509250929050565b5f6020828403121561156f575f80fd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156115c457815f19048211156115aa576115aa611576565b808516156115b757918102915b93841c939080029061158f565b509250929050565b5f826115da575060016103b8565b816115e657505f6103b8565b81600181146115fc576002811461160657611622565b60019150506103b8565b60ff84111561161757611617611576565b50506001821b6103b8565b5060208310610133831016604e8410600b8410161715611645575081810a6103b8565b61164f838361158a565b805f190482111561166257611662611576565b029392505050565b5f61117160ff8416836115cc565b80820281158282048414176103b8576103b8611576565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156116d4575f80fd5b81516111718161148e565b5f805f606084860312156116f1575f80fd5b8351925060208401519150604084015190509250925092565b5f6020828403121561171a575f80fd5b81518015158114611171575f80fd5b808201808211156103b8576103b8611576565b5f6001820161174d5761174d611576565b5060010190565b818103818111156103b8576103b8611576565b5f8261178157634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156117e85784516001600160a01b0316835293830193918301916001016117c3565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220881c647a93601116082594c2864d3d9cb24d01e55b59213d7c0f650bb790ab3164736f6c63430008140033",
    "contract_name": "WallStreetWojak",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckedBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\nweb: https://wallstreetwojak.com/\r\ntele: https://t.me/wallstreetwojak_portal\r\nx: https://twitter.com/wsWojak\r\n*/\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract WallStreetWojak is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = true;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=18;\r\n    uint256 private _initialSellTax=30;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=25;\r\n    uint256 private _reduceSellTaxAt=25;\r\n    uint256 private _preventSwapBefore=25;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 1000000000 * 10**_decimals;\r\n    string private constant _name = unicode\"Wall Street Wojak\";\r\n    string private constant _symbol = unicode\"WOJAK\";\r\n    uint256 public _maxTxAmount = _tTotal.mul(2).div(100);\r\n    uint256 public _maxWalletSize = _tTotal.mul(2).div(100);\r\n    uint256 public _taxSwapThreshold= _tTotal.mul(1).div(10000);\r\n    uint256 public _maxTaxSwap= _tTotal.mul(18).div(1000);\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n\r\n            if (transferDelayEnabled) {\r\n                  if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                      require(\r\n                          _holderLastTransferTimestamp[tx.origin] <\r\n                              block.number,\r\n                          \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                      );\r\n                      _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                  }\r\n              }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                _buyCount++;\r\n            }\r\n\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"Trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function withdrawStuckedBalance(uint256 mount) external onlyOwner {\r\n        require(address(this).balance >= mount, \"Insufficient balance\");\r\n        payable(_msgSender()).transfer(mount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
    "etherscan_verified": true
}