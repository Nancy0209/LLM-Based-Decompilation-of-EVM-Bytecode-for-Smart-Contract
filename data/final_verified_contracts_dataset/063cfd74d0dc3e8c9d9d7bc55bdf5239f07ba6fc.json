{
    "address": "0x063Cfd74d0DC3e8c9D9D7bC55BDf5239f07ba6fC",
    "tx_hash": "a26cc33551c3babab65998814f1e7c5aab9e207e767684935dc42cabf5d03db9",
    "block_number": 18009986,
    "timestamp": 1693187603,
    "gas_used_in_creation": 1812419,
    "creation_bytecode": "60806040526006805460ff19169055600a6007819055601e60085560016009818155908255600b8290556014600c819055600d555f600e55620000429162000351565b62000054906508159b108e3862000368565b600f55620000656009600a62000351565b62000077906508159b108e3862000368565b601055620000886009600a62000351565b6200009a9065020566c4238e62000368565b601155620000ab6009600a62000351565b620000bd9065040acd88471c62000368565b6012556014805461ffff60a81b19169055348015620000da575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060068054610100600160a81b0319166101003302179055620001406009600a62000351565b620001539066019438493bc71c62000368565b335f9081526001602081905260408220929092556003906200017c5f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556006546101009004909116835291208054909216179055620001df3390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002186009600a62000351565b6200022b9066019438493bc71c62000368565b60405190815260200160405180910390a362000382565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200029657815f19048211156200027a576200027a62000242565b808516156200028857918102915b93841c93908002906200025b565b509250929050565b5f82620002ae575060016200034b565b81620002bc57505f6200034b565b8160018114620002d55760028114620002e05762000300565b60019150506200034b565b60ff841115620002f457620002f462000242565b50506001821b6200034b565b5060208310610133831016604e8410600b841016171562000325575081810a6200034b565b62000331838362000256565b805f190482111562000347576200034762000242565b0290505b92915050565b5f6200036160ff8416836200029e565b9392505050565b80820281158282048414176200034b576200034b62000242565b6118f280620003905f395ff3fe60806040526004361061011e575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb14610348578063bf474bed14610367578063c876d0b91461037c578063c9567bf914610395578063dd62ed3e146103a9575f80fd5b8063751039fc146102b55780637d1db4a5146102c95780638da5cb5b146102de5780638f9a55c01461030457806395d89b4114610319575f80fd5b8063313ce567116100e3578063313ce567146102055780633bbac5791461022057806351bc3c851461025757806370a082311461026d578063715018a6146102a1575f80fd5b806306fdde0314610129578063095ea7b3146101805780630faee56f146101af57806318160ddd146101d257806323b872dd146101e6575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b5060408051808201909152601781527f596f7473756261204b6f69776169206f6620346368616e00000000000000000060208201525b60405161017791906114e5565b60405180910390f35b34801561018b575f80fd5b5061019f61019a366004611547565b6103ed565b6040519015158152602001610177565b3480156101ba575f80fd5b506101c460125481565b604051908152602001610177565b3480156101dd575f80fd5b506101c4610403565b3480156101f1575f80fd5b5061019f610200366004611571565b610426565b348015610210575f80fd5b5060405160098152602001610177565b34801561022b575f80fd5b5061019f61023a3660046115af565b6001600160a01b03165f9081526004602052604090205460ff1690565b348015610262575f80fd5b5061026b61048d565b005b348015610278575f80fd5b506101c46102873660046115af565b6001600160a01b03165f9081526001602052604090205490565b3480156102ac575f80fd5b5061026b6104e3565b3480156102c0575f80fd5b5061026b61055d565b3480156102d4575f80fd5b506101c4600f5481565b3480156102e9575f80fd5b505f546040516001600160a01b039091168152602001610177565b34801561030f575f80fd5b506101c460105481565b348015610324575f80fd5b50604080518082019091526007815266594f545355424160c81b602082015261016a565b348015610353575f80fd5b5061019f610362366004611547565b610621565b348015610372575f80fd5b506101c460115481565b348015610387575f80fd5b5060065461019f9060ff1681565b3480156103a0575f80fd5b5061026b61062d565b3480156103b4575f80fd5b506101c46103c33660046115ca565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103f93384846109d9565b5060015b92915050565b5f6104106009600a6116f5565b6104219066019438493bc71c611703565b905090565b5f610432848484610afc565b610483843361047e85604051806060016040528060288152602001611895602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611144565b6109d9565b5060019392505050565b60065461010090046001600160a01b0316336001600160a01b0316146104b1575f80fd5b305f9081526001602052604090205480156104cf576104cf8161117c565b4780156104df576104df81611305565b5050565b5f546001600160a01b031633146105155760405162461bcd60e51b815260040161050c9061171a565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105865760405162461bcd60e51b815260040161050c9061171a565b6105926009600a6116f5565b6105a39066019438493bc71c611703565b600f556105b26009600a6116f5565b6105c39066019438493bc71c611703565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105fd6009600a6116f5565b61060e9066019438493bc71c611703565b60405190815260200160405180910390a1565b5f6103f9338484610afc565b5f546001600160a01b031633146106565760405162461bcd60e51b815260040161050c9061171a565b601454600160a01b900460ff16156106b05760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161050c565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106fc9030906106eb6009600a6116f5565b61047e9066019438493bc71c611703565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561074c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610770919061174f565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107cf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107f3919061174f565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561083d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610861919061174f565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d71947306108a8816001600160a01b03165f9081526001602052604090205490565b5f806108bb5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610921573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610946919061176a565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af115801561099b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109bf9190611795565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b038316610a3b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161050c565b6001600160a01b038216610a9c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161050c565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b605760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161050c565b6001600160a01b038216610bc25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161050c565b5f8111610c235760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161050c565b5f80546001600160a01b03858116911614801590610c4e57505f546001600160a01b03848116911614155b15611007576001600160a01b0384165f9081526004602052604090205460ff16158015610c9357506001600160a01b0383165f9081526004602052604090205460ff16155b610c9b575f80fd5b60065460ff1615610d52576013546001600160a01b03848116911614801590610cd257506014546001600160a01b03848116911614155b15610d5257325f908152600560205260409020544311610d405760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b606482015260840161050c565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610d7d57506013546001600160a01b03848116911614155b8015610da157506001600160a01b0383165f9081526003602052604090205460ff16155b15610e9a57600f54821115610df45760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161050c565b60105482610e16856001600160a01b03165f9081526001602052604090205490565b610e2091906117b4565b1115610e6e5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161050c565b600d54600e541015610e8557823b15610e85575f80fd5b600e8054905f610e94836117c7565b91905055505b610ec66064610ec0600b54600e5411610eb557600754610eb9565b6009545b8590611340565b906113c5565b6014549091506001600160a01b038481169116148015610eef57506001600160a01b0384163014155b15610f6a57600f54821115610f425760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161050c565b610f676064610ec0600c54600e5411610f5d57600854610eb9565b600a548590611340565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610fa057506014546001600160a01b038581169116145b8015610fb55750601454600160b01b900460ff165b8015610fc2575060115481115b8015610fd15750600d54600e54115b1561100557610ff3610fee84610fe984601254611406565b611406565b61117c565b4780156110035761100347611305565b505b505b801561107f57305f90815260016020526040902054611026908261141a565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110769085815260200190565b60405180910390a35b6001600160a01b0384165f908152600160205260409020546110a19083611478565b6001600160a01b0385165f908152600160205260409020556110e46110c68383611478565b6001600160a01b0385165f908152600160205260409020549061141a565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61112d8585611478565b60405190815260200160405180910390a350505050565b5f81848411156111675760405162461bcd60e51b815260040161050c91906114e5565b505f61117384866117df565b95945050505050565b6014805460ff60a81b1916600160a81b17905580156112f557601454600160a01b900460ff16156112f5576040805160028082526060820183525f9260208301908036833701905050905030815f815181106111da576111da6117f2565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611231573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611255919061174f565b81600181518110611268576112686117f2565b6001600160a01b03928316602091820292909201015260135461128e91309116846109d9565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906112c69085905f90869030904290600401611806565b5f604051808303815f87803b1580156112dd575f80fd5b505af11580156112ef573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104df573d5f803e3d5ffd5b5f825f0361134f57505f6103fd565b5f61135a8385611703565b9050826113678583611875565b146113be5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161050c565b9392505050565b5f6113be83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114b9565b5f81831161141457826113be565b50919050565b5f8061142683856117b4565b9050838110156113be5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161050c565b5f6113be83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611144565b5f81836114d95760405162461bcd60e51b815260040161050c91906114e5565b505f6111738486611875565b5f6020808352835180828501525f5b81811015611510578581018301518582016040015282016114f4565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611544575f80fd5b50565b5f8060408385031215611558575f80fd5b823561156381611530565b946020939093013593505050565b5f805f60608486031215611583575f80fd5b833561158e81611530565b9250602084013561159e81611530565b929592945050506040919091013590565b5f602082840312156115bf575f80fd5b81356113be81611530565b5f80604083850312156115db575f80fd5b82356115e681611530565b915060208301356115f681611530565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561164f57815f190482111561163557611635611601565b8085161561164257918102915b93841c939080029061161a565b509250929050565b5f82611665575060016103fd565b8161167157505f6103fd565b81600181146116875760028114611691576116ad565b60019150506103fd565b60ff8411156116a2576116a2611601565b50506001821b6103fd565b5060208310610133831016604e8410600b84101617156116d0575081810a6103fd565b6116da8383611615565b805f19048211156116ed576116ed611601565b029392505050565b5f6113be60ff841683611657565b80820281158282048414176103fd576103fd611601565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f6020828403121561175f575f80fd5b81516113be81611530565b5f805f6060848603121561177c575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156117a5575f80fd5b815180151581146113be575f80fd5b808201808211156103fd576103fd611601565b5f600182016117d8576117d8611601565b5060010190565b818103818111156103fd576103fd611601565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118545784516001600160a01b03168352938301939183019160010161182f565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261188f57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220a472d7f4baa113d565494c1c28b2c90c9353c65fb29316ff66fa0d00306bd3a264736f6c63430008140033",
    "runtime_bytecode": "60806040526004361061011e575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb14610348578063bf474bed14610367578063c876d0b91461037c578063c9567bf914610395578063dd62ed3e146103a9575f80fd5b8063751039fc146102b55780637d1db4a5146102c95780638da5cb5b146102de5780638f9a55c01461030457806395d89b4114610319575f80fd5b8063313ce567116100e3578063313ce567146102055780633bbac5791461022057806351bc3c851461025757806370a082311461026d578063715018a6146102a1575f80fd5b806306fdde0314610129578063095ea7b3146101805780630faee56f146101af57806318160ddd146101d257806323b872dd146101e6575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b5060408051808201909152601781527f596f7473756261204b6f69776169206f6620346368616e00000000000000000060208201525b60405161017791906114e5565b60405180910390f35b34801561018b575f80fd5b5061019f61019a366004611547565b6103ed565b6040519015158152602001610177565b3480156101ba575f80fd5b506101c460125481565b604051908152602001610177565b3480156101dd575f80fd5b506101c4610403565b3480156101f1575f80fd5b5061019f610200366004611571565b610426565b348015610210575f80fd5b5060405160098152602001610177565b34801561022b575f80fd5b5061019f61023a3660046115af565b6001600160a01b03165f9081526004602052604090205460ff1690565b348015610262575f80fd5b5061026b61048d565b005b348015610278575f80fd5b506101c46102873660046115af565b6001600160a01b03165f9081526001602052604090205490565b3480156102ac575f80fd5b5061026b6104e3565b3480156102c0575f80fd5b5061026b61055d565b3480156102d4575f80fd5b506101c4600f5481565b3480156102e9575f80fd5b505f546040516001600160a01b039091168152602001610177565b34801561030f575f80fd5b506101c460105481565b348015610324575f80fd5b50604080518082019091526007815266594f545355424160c81b602082015261016a565b348015610353575f80fd5b5061019f610362366004611547565b610621565b348015610372575f80fd5b506101c460115481565b348015610387575f80fd5b5060065461019f9060ff1681565b3480156103a0575f80fd5b5061026b61062d565b3480156103b4575f80fd5b506101c46103c33660046115ca565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103f93384846109d9565b5060015b92915050565b5f6104106009600a6116f5565b6104219066019438493bc71c611703565b905090565b5f610432848484610afc565b610483843361047e85604051806060016040528060288152602001611895602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611144565b6109d9565b5060019392505050565b60065461010090046001600160a01b0316336001600160a01b0316146104b1575f80fd5b305f9081526001602052604090205480156104cf576104cf8161117c565b4780156104df576104df81611305565b5050565b5f546001600160a01b031633146105155760405162461bcd60e51b815260040161050c9061171a565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105865760405162461bcd60e51b815260040161050c9061171a565b6105926009600a6116f5565b6105a39066019438493bc71c611703565b600f556105b26009600a6116f5565b6105c39066019438493bc71c611703565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105fd6009600a6116f5565b61060e9066019438493bc71c611703565b60405190815260200160405180910390a1565b5f6103f9338484610afc565b5f546001600160a01b031633146106565760405162461bcd60e51b815260040161050c9061171a565b601454600160a01b900460ff16156106b05760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161050c565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106fc9030906106eb6009600a6116f5565b61047e9066019438493bc71c611703565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561074c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610770919061174f565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107cf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107f3919061174f565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561083d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610861919061174f565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d71947306108a8816001600160a01b03165f9081526001602052604090205490565b5f806108bb5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610921573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610946919061176a565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af115801561099b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109bf9190611795565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b038316610a3b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161050c565b6001600160a01b038216610a9c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161050c565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b605760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161050c565b6001600160a01b038216610bc25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161050c565b5f8111610c235760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161050c565b5f80546001600160a01b03858116911614801590610c4e57505f546001600160a01b03848116911614155b15611007576001600160a01b0384165f9081526004602052604090205460ff16158015610c9357506001600160a01b0383165f9081526004602052604090205460ff16155b610c9b575f80fd5b60065460ff1615610d52576013546001600160a01b03848116911614801590610cd257506014546001600160a01b03848116911614155b15610d5257325f908152600560205260409020544311610d405760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b606482015260840161050c565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610d7d57506013546001600160a01b03848116911614155b8015610da157506001600160a01b0383165f9081526003602052604090205460ff16155b15610e9a57600f54821115610df45760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161050c565b60105482610e16856001600160a01b03165f9081526001602052604090205490565b610e2091906117b4565b1115610e6e5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161050c565b600d54600e541015610e8557823b15610e85575f80fd5b600e8054905f610e94836117c7565b91905055505b610ec66064610ec0600b54600e5411610eb557600754610eb9565b6009545b8590611340565b906113c5565b6014549091506001600160a01b038481169116148015610eef57506001600160a01b0384163014155b15610f6a57600f54821115610f425760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161050c565b610f676064610ec0600c54600e5411610f5d57600854610eb9565b600a548590611340565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610fa057506014546001600160a01b038581169116145b8015610fb55750601454600160b01b900460ff165b8015610fc2575060115481115b8015610fd15750600d54600e54115b1561100557610ff3610fee84610fe984601254611406565b611406565b61117c565b4780156110035761100347611305565b505b505b801561107f57305f90815260016020526040902054611026908261141a565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110769085815260200190565b60405180910390a35b6001600160a01b0384165f908152600160205260409020546110a19083611478565b6001600160a01b0385165f908152600160205260409020556110e46110c68383611478565b6001600160a01b0385165f908152600160205260409020549061141a565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61112d8585611478565b60405190815260200160405180910390a350505050565b5f81848411156111675760405162461bcd60e51b815260040161050c91906114e5565b505f61117384866117df565b95945050505050565b6014805460ff60a81b1916600160a81b17905580156112f557601454600160a01b900460ff16156112f5576040805160028082526060820183525f9260208301908036833701905050905030815f815181106111da576111da6117f2565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611231573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611255919061174f565b81600181518110611268576112686117f2565b6001600160a01b03928316602091820292909201015260135461128e91309116846109d9565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906112c69085905f90869030904290600401611806565b5f604051808303815f87803b1580156112dd575f80fd5b505af11580156112ef573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104df573d5f803e3d5ffd5b5f825f0361134f57505f6103fd565b5f61135a8385611703565b9050826113678583611875565b146113be5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161050c565b9392505050565b5f6113be83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114b9565b5f81831161141457826113be565b50919050565b5f8061142683856117b4565b9050838110156113be5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161050c565b5f6113be83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611144565b5f81836114d95760405162461bcd60e51b815260040161050c91906114e5565b505f6111738486611875565b5f6020808352835180828501525f5b81811015611510578581018301518582016040015282016114f4565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611544575f80fd5b50565b5f8060408385031215611558575f80fd5b823561156381611530565b946020939093013593505050565b5f805f60608486031215611583575f80fd5b833561158e81611530565b9250602084013561159e81611530565b929592945050506040919091013590565b5f602082840312156115bf575f80fd5b81356113be81611530565b5f80604083850312156115db575f80fd5b82356115e681611530565b915060208301356115f681611530565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561164f57815f190482111561163557611635611601565b8085161561164257918102915b93841c939080029061161a565b509250929050565b5f82611665575060016103fd565b8161167157505f6103fd565b81600181146116875760028114611691576116ad565b60019150506103fd565b60ff8411156116a2576116a2611601565b50506001821b6103fd565b5060208310610133831016604e8410600b84101617156116d0575081810a6103fd565b6116da8383611615565b805f19048211156116ed576116ed611601565b029392505050565b5f6113be60ff841683611657565b80820281158282048414176103fd576103fd611601565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f6020828403121561175f575f80fd5b81516113be81611530565b5f805f6060848603121561177c575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156117a5575f80fd5b815180151581146113be575f80fd5b808201808211156103fd576103fd611601565b5f600182016117d8576117d8611601565b5060010190565b818103818111156103fd576103fd611601565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118545784516001600160a01b03168352938301939183019160010161182f565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261188f57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220a472d7f4baa113d565494c1c28b2c90c9353c65fb29316ff66fa0d00306bd3a264736f6c63430008140033",
    "contract_name": "YotsubaKoiwai",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/****\r\n\r\nYotsuba Koiwai, the mascot of 4chan! \ud83c\udf40\r\n\r\n4chan is also known as \u201cYotsuba Channel\u201d in Japanese.\r\n\r\nYotsuba has a clover shaped hairstyle similar to 4chan\u2019s signature clover logo.\r\n\r\nYou can spot Yotsuba everywhere on 4chan, especially on 404 error pages: https://knowyourmeme.com/memes/yotsuba-koiwai-404-girl\r\n\r\nShe is actually woven into the history of 4chan, as the software that 4chan runs on was lovingly code-named \"Yotsuba\"\r\n\r\nhttps://yotsuba4chan.com\r\nhttps://twitter.com/yotsubatoken\r\nhttps://t.me/yotsubatoken \r\n\r\n****/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n\r\ncontract YotsubaKoiwai is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=10;\r\n    uint256 private _initialSellTax=30;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=10;\r\n    uint256 private _reduceSellTaxAt=20;\r\n    uint256 private _preventSwapBefore=20;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 444444444444444 * 10**_decimals;\r\n    string private constant _name = unicode\"Yotsuba Koiwai of 4chan\";\r\n    string private constant _symbol = unicode\"YOTSUBA\";\r\n    uint256 public _maxTxAmount = 8888888888888 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 8888888888888 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 2222222222222 * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 4444444444444 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_buyCount<_preventSwapBefore){\r\n                  require(!isContract(to));\r\n                }\r\n                _buyCount++;\r\n            }\r\n\r\n\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n}",
    "etherscan_verified": true
}