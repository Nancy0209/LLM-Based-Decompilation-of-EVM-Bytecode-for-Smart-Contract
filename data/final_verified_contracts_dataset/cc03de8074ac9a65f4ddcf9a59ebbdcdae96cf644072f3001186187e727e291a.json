{
    "address": "0x8D8695A3Da190f5D1C468FA7018a83F4FFb6c513",
    "tx_hash": "cc03de8074ac9a65f4ddcf9a59ebbdcdae96cf644072f3001186187e727e291a",
    "block_number": 18000008,
    "timestamp": 1693066991,
    "gas_used_in_creation": 2015695,
    "creation_bytecode": "",
    "runtime_bytecode": "6080604052600436106101235760003560e01c8063715018a6116100a057806395d89b411161006457806395d89b41146102ed578063a9059cbb14610302578063bf474bed14610322578063d34628cc14610337578063dd62ed3e146103575761012a565b8063715018a614610277578063751039fc1461028c5780637d1db4a5146102a15780638da5cb5b146102b65780638f9a55c0146102d85761012a565b806323b872dd116100e757806323b872dd146101d5578063313ce567146101f557806331c2d847146102175780633bbac5791461023757806370a08231146102575761012a565b806306fdde031461012f578063095ea7b31461015a5780630faee56f1461018757806318160ddd146101a95780631e616039146101be5761012a565b3661012a57005b600080fd5b34801561013b57600080fd5b50610144610377565b60405161015191906116d7565b60405180910390f35b34801561016657600080fd5b5061017a610175366004611511565b6103ae565b60405161015191906116cc565b34801561019357600080fd5b5061019c6103cc565b60405161015191906119d3565b3480156101b557600080fd5b5061019c6103d2565b3480156101ca57600080fd5b506101d36103f4565b005b3480156101e157600080fd5b5061017a6101f03660046114d1565b6107a1565b34801561020157600080fd5b5061020a610824565b6040516101519190611a4c565b34801561022357600080fd5b506101d361023236600461153c565b610829565b34801561024357600080fd5b5061017a610252366004611461565b6108d8565b34801561026357600080fd5b5061019c610272366004611461565b6108fa565b34801561028357600080fd5b506101d3610915565b34801561029857600080fd5b506101d3610994565b3480156102ad57600080fd5b5061019c610a58565b3480156102c257600080fd5b506102cb610a5e565b604051610151919061164a565b3480156102e457600080fd5b5061019c610a6d565b3480156102f957600080fd5b50610144610a73565b34801561030e57600080fd5b5061017a61031d366004611511565b610a95565b34801561032e57600080fd5b5061019c610aa9565b34801561034357600080fd5b506101d361035236600461153c565b610aaf565b34801561036357600080fd5b5061019c610372366004611499565b610b5a565b60408051808201909152601a81527f4861727279506f74746572456c6f6e536f6e6963343230496e75000000000000602082015290565b60006103c26103bb610b85565b8484610b89565b5060015b92915050565b60125481565b60006103e06012600a611ad8565b6103ef9064174876e800611ba9565b905090565b6103fc610b85565b6000546001600160a01b039081169116146104325760405162461bcd60e51b81526004016104299061185e565b60405180910390fd5b601454600160a01b900460ff161561045c5760405162461bcd60e51b81526004016104299061199c565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d17908190556104b39030906001600160a01b031661049f6012600a611ad8565b6104ae9064174876e800611ba9565b610b89565b601360009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561050157600080fd5b505afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610539919061147d565b6001600160a01b031663c9c6539630601360009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561059657600080fd5b505afa1580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce919061147d565b6040518363ffffffff1660e01b81526004016105eb92919061165e565b602060405180830381600087803b15801561060557600080fd5b505af1158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d919061147d565b601480546001600160a01b0319166001600160a01b039283161790556013541663f305d719473061066d816108fa565b600080610678610a5e565b426040518863ffffffff1660e01b815260040161069a96959493929190611691565b6060604051808303818588803b1580156106b357600080fd5b505af11580156106c7573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106ec919061161d565b505060145460135460405163095ea7b360e01b81526001600160a01b03928316935063095ea7b39261072692169060001990600401611678565b602060405180830381600087803b15801561074057600080fd5b505af1158015610754573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077891906115fd565b506014805460ff60a01b1960ff60b01b19909116600160b01b1716600160a01b17905543600655565b60006107ae848484610c3d565b610819846107ba610b85565b6104ae85604051806060016040528060288152602001611c3f602891396001600160a01b038a166000908152600260205260408120906107f8610b85565b6001600160a01b0316815260208101919091526040016000205491906110fc565b5060015b9392505050565b601290565b610831610b85565b6000546001600160a01b0390811691161461085e5760405162461bcd60e51b81526004016104299061185e565b60005b81518110156108d45760006004600084848151811061089057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806108cc81611bdf565b915050610861565b5050565b6001600160a01b03811660009081526004602052604090205460ff165b919050565b6001600160a01b031660009081526001602052604090205490565b61091d610b85565b6000546001600160a01b0390811691161461094a5760405162461bcd60e51b81526004016104299061185e565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61099c610b85565b6000546001600160a01b039081169116146109c95760405162461bcd60e51b81526004016104299061185e565b6109d56012600a611ad8565b6109e49064174876e800611ba9565b600f556109f36012600a611ad8565b610a029064174876e800611ba9565b6010557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf610a326012600a611ad8565b610a419064174876e800611ba9565b604051610a4e91906119d3565b60405180910390a1565b600f5481565b6000546001600160a01b031690565b60105481565b60408051808201909152600881526729a0a322a6a7a7a760c11b602082015290565b60006103c2610aa2610b85565b8484610c3d565b60115481565b610ab7610b85565b6000546001600160a01b03908116911614610ae45760405162461bcd60e51b81526004016104299061185e565b60005b81518110156108d457600160046000848481518110610b1657634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610b5281611bdf565b915050610ae7565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b3390565b6001600160a01b038316610baf5760405162461bcd60e51b815260040161042990611958565b6001600160a01b038216610bd55760405162461bcd60e51b8152600401610429906117a4565b6001600160a01b0380841660008181526002602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610c309085906119d3565b60405180910390a3505050565b6001600160a01b038316610c635760405162461bcd60e51b8152600401610429906118dc565b6001600160a01b038216610c895760405162461bcd60e51b81526004016104299061172a565b60008111610ca95760405162461bcd60e51b815260040161042990611893565b6000610cb3610a5e565b6001600160a01b0316846001600160a01b031614158015610ced5750610cd7610a5e565b6001600160a01b0316836001600160a01b031614155b15610fb7576001600160a01b03841660009081526004602052604090205460ff16158015610d3457506001600160a01b03831660009081526004602052604090205460ff16155b610d3d57600080fd5b610d696064610d63600b54600e5411610d5857600754610d5c565b6009545b8590611136565b9061117b565b6014549091506001600160a01b038581169116148015610d9757506013546001600160a01b03848116911614155b8015610dbc57506001600160a01b03831660009081526003602052604090205460ff16155b15610e5757600f54821115610de35760405162461bcd60e51b81526004016104299061176d565b60105482610df0856108fa565b610dfa9190611a5a565b1115610e185760405162461bcd60e51b815260040161042990611921565b436006546003610e289190611a5a565b1115610e4157610e37836111bd565b15610e4157600080fd5b600e8054906000610e5183611bdf565b91905055505b6014546001600160a01b03848116911614801590610e8e57506001600160a01b03831660009081526003602052604090205460ff16155b15610ec85760105482610ea0856108fa565b610eaa9190611a5a565b1115610ec85760405162461bcd60e51b815260040161042990611921565b6014546001600160a01b038481169116148015610eee57506001600160a01b0384163014155b15610f1b57610f186064610d63600c54600e5411610f0e57600854610d5c565b600a548590611136565b90505b6000610f26306108fa565b601454909150600160a81b900460ff16158015610f5057506014546001600160a01b038581169116145b8015610f655750601454600160b01b900460ff165b8015610f72575060115481115b8015610f815750600d54600e54115b15610fb557610fa3610f9e84610f99846012546111c3565b6111c3565b6111d8565b478015610fb357610fb34761137d565b505b505b801561102f5730600090815260016020526040902054610fd790826113b7565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110269085906119d3565b60405180910390a35b6001600160a01b03841660009081526001602052604090205461105290836113e6565b6001600160a01b03851660009081526001602052604090205561109761107883836113e6565b6001600160a01b038516600090815260016020526040902054906113b7565b6001600160a01b0380851660008181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110e185856113e6565b6040516110ee91906119d3565b60405180910390a350505050565b600081848411156111205760405162461bcd60e51b815260040161042991906116d7565b50600061112d8486611bc8565b95945050505050565b600082611145575060006103c6565b60006111518385611ba9565b90508261115e8583611a72565b1461081d5760405162461bcd60e51b81526004016104299061181d565b600061081d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611428565b3b151590565b60008183116111d2578261081d565b50919050565b6014805460ff60a81b1916600160a81b179055604080516002808252606082018352600092602083019080368337019050509050308160008151811061122e57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba919061147d565b816001815181106112db57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526013546113019130911684610b89565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac9479061133a9085906000908690309042906004016119dc565b600060405180830381600087803b15801561135457600080fd5b505af1158015611368573d6000803e3d6000fd5b50506014805460ff60a81b1916905550505050565b6005546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156108d4573d6000803e3d6000fd5b6000806113c48385611a5a565b90508381101561081d5760405162461bcd60e51b8152600401610429906117e6565b600061081d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110fc565b600081836114495760405162461bcd60e51b815260040161042991906116d7565b50600061112d8486611a72565b80356108f581611c26565b600060208284031215611472578081fd5b813561081d81611c26565b60006020828403121561148e578081fd5b815161081d81611c26565b600080604083850312156114ab578081fd5b82356114b681611c26565b915060208301356114c681611c26565b809150509250929050565b6000806000606084860312156114e5578081fd5b83356114f081611c26565b9250602084013561150081611c26565b929592945050506040919091013590565b60008060408385031215611523578182fd5b823561152e81611c26565b946020939093013593505050565b6000602080838503121561154e578182fd5b823567ffffffffffffffff80821115611565578384fd5b818501915085601f830112611578578384fd5b81358181111561158a5761158a611c10565b838102604051858282010181811085821117156115a9576115a9611c10565b604052828152858101935084860182860187018a10156115c7578788fd5b8795505b838610156115f0576115dc81611456565b8552600195909501949386019386016115cb565b5098975050505050505050565b60006020828403121561160e578081fd5b8151801515811461081d578182fd5b600080600060608486031215611631578283fd5b8351925060208401519150604084015190509250925092565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b901515815260200190565b6000602080835283518082850152825b81811015611703578581018301518582016040015282016116e7565b818111156117145783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526019908201527f4578636565647320746865205f6d61785478416d6f756e742e00000000000000604082015260600190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206040820152687468616e207a65726f60b81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252601a908201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604082015260600190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526017908201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604082015260600190565b90815260200190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015611a2b5784516001600160a01b031683529383019391830191600101611a06565b50506001600160a01b03969096166060850152505050608001529392505050565b60ff91909116815260200190565b60008219821115611a6d57611a6d611bfa565b500190565b600082611a8d57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611611aa45750611acf565b818704821115611ab657611ab6611bfa565b80861615611ac357918102915b9490941c938002611a95565b94509492505050565b600061081d60001960ff851684600082611af45750600161081d565b81611b015750600061081d565b8160018114611b175760028114611b2157611b4e565b600191505061081d565b60ff841115611b3257611b32611bfa565b6001841b915084821115611b4857611b48611bfa565b5061081d565b5060208310610133831016604e8410600b8410161715611b81575081810a83811115611b7c57611b7c611bfa565b61081d565b611b8e8484846001611a92565b808604821115611ba057611ba0611bfa565b02949350505050565b6000816000190483118215151615611bc357611bc3611bfa565b500290565b600082821015611bda57611bda611bfa565b500390565b6000600019821415611bf357611bf3611bfa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611c3b57600080fd5b5056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122039c49b4b7747e7e71461f9f3c61d912b712b572c4511b15f84dfe00fa3b8767c64736f6c63430008000033",
    "contract_name": "HarryPotterElonSonic420Inu",
    "compiler_version": "v0.8.0+commit.c7dfd78e",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Live_Uniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbot\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/** \r\n\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval (address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract HarryPotterElonSonic420Inu is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    address payable private _taxWallet;\r\n    uint256 firstBlock;\r\n\r\n    uint256 private _initialBuyTax=2;\r\n    uint256 private _initialSellTax=20;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=20;\r\n    uint256 private _reduceSellTaxAt=20;\r\n    uint256 private _preventSwapBefore=10;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _tTotal = 100000000000  * 10**_decimals;\r\n    string private constant _name = unicode\"HarryPotterElonSonic420Inu\";\r\n    string private constant _symbol = unicode\"SAFEMOON\";\r\n    uint256 public _maxTxAmount = 5500000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 55000000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 2000000000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 2000000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n\r\n                if (firstBlock + 3  > block.number) {\r\n                    require(!isContract(to));\r\n                }\r\n                _buyCount++;\r\n            }\r\n\r\n            if (to != uniswapV2Pair && ! _isExcludedFromFee[to]) {\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n            }\r\n\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to   == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function addBots(address[] memory bots_) public onlyOwner {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function delBots(address[] memory notbot) public onlyOwner {\r\n      for (uint i = 0; i < notbot.length; i++) {\r\n          bots[notbot[i]] = false;\r\n      }\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function Live_Uniswap() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        firstBlock = block.number;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}",
    "etherscan_verified": true
}