{
    "address": "0xe2BFF0b8121D4977F0aFd680dB7d3eADDa4Ab3Df",
    "tx_hash": "74b59b23c9b2bdf9e0f48ce3ce8cba9d8ea9e9490cb8cdfec20039bcbf4eac75",
    "block_number": 18001542,
    "timestamp": 1693085471,
    "gas_used_in_creation": 4494189,
    "creation_bytecode": "60806040526200001a67016345785d8a000060001962000392565b6200002890600019620003b5565b600655600060088190556014600955600a819055601e600b819055600c829055600d819055600e91909155600f5560128054732f517f4c06380fa362f2618c0821e0e4c7069feb6001600160a01b031991821681179092556013805490911690911790556015805462ffffff60a01b191661010160a81b17905566071afd498d0000601681905560175564174876e800601855348015620000c857600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506006543360009081526002602090815260409182902092909255601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d908117909155815163c45a015560e01b815291519092839263c45a01559260048083019392829003018186803b1580156200018157600080fd5b505afa15801562000196573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001bc9190620003db565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156200020557600080fd5b505afa1580156200021a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002409190620003db565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b1580156200028957600080fd5b505af11580156200029e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002c49190620003db565b601580546001600160a01b0319166001600160a01b03928316179055600080548216815260056020526040808220805460ff1990811660019081179092553084528284208054821683179055601254851684528284208054821683179055601354909416835291208054909216179055336001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef67016345785d8a00006040516200038391815260200190565b60405180910390a3506200040d565b600082620003b057634e487b7160e01b600052601260045260246000fd5b500690565b600082821015620003d657634e487b7160e01b600052601160045260246000fd5b500390565b600060208284031215620003ee57600080fd5b81516001600160a01b03811681146200040657600080fd5b9392505050565b611c50806200041d6000396000f3fe6080604052600436106101c65760003560e01c80637830b072116100f7578063a9059cbb11610095578063dd62ed3e11610064578063dd62ed3e1461052b578063ea1644d514610571578063f2fde38b14610591578063fbcaa8ed146105b157600080fd5b8063a9059cbb146104a6578063bfd79284146104c6578063c3c8cd80146104f6578063c492f0461461050b57600080fd5b80638da5cb5b116100d15780638da5cb5b1461041d5780638f70ccf71461043b57806395d89b411461045b57806398a5c3151461048657600080fd5b80637830b072146103c45780637f2feddc146103da57806382247ec01461040757600080fd5b8063313ce567116101645780636fc3eaec1161013e5780636fc3eaec1461035a57806370a082311461036f578063715018a61461038f57806374010ece146103a457600080fd5b8063313ce567146102fe57806349bd5a5e1461031a5780636d8aa8f81461033a57600080fd5b806318160ddd116101a057806318160ddd1461028157806320c09a49146102a657806323b872dd146102c85780632fd689e3146102e857600080fd5b806306fdde03146101d2578063095ea7b3146102195780631694505e1461024957600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b5060408051808201909152600c81526b2222a3a2a7102720aa24a7a760a11b60208201525b604051610210919061184c565b60405180910390f35b34801561022557600080fd5b506102396102343660046118b6565b6105c6565b6040519015158152602001610210565b34801561025557600080fd5b50601454610269906001600160a01b031681565b6040516001600160a01b039091168152602001610210565b34801561028d57600080fd5b5067016345785d8a00005b604051908152602001610210565b3480156102b257600080fd5b506102c66102c13660046118e2565b6105dd565b005b3480156102d457600080fd5b506102396102e3366004611914565b610624565b3480156102f457600080fd5b5061029860185481565b34801561030a57600080fd5b5060405160098152602001610210565b34801561032657600080fd5b50601554610269906001600160a01b031681565b34801561034657600080fd5b506102c661035536600461196a565b61068d565b34801561036657600080fd5b506102c66106d5565b34801561037b57600080fd5b5061029861038a366004611985565b610720565b34801561039b57600080fd5b506102c6610742565b3480156103b057600080fd5b506102c66103bf3660046119a2565b6107b6565b3480156103d057600080fd5b5061029860165481565b3480156103e657600080fd5b506102986103f5366004611985565b60116020526000908152604090205481565b34801561041357600080fd5b5061029860175481565b34801561042957600080fd5b506000546001600160a01b0316610269565b34801561044757600080fd5b506102c661045636600461196a565b6107e5565b34801561046757600080fd5b50604080518082019091526002815261222760f11b6020820152610203565b34801561049257600080fd5b506102c66104a13660046119a2565b61082d565b3480156104b257600080fd5b506102396104c13660046118b6565b61085c565b3480156104d257600080fd5b506102396104e1366004611985565b60106020526000908152604090205460ff1681565b34801561050257600080fd5b506102c6610869565b34801561051757600080fd5b506102c66105263660046119bb565b6108bd565b34801561053757600080fd5b50610298610546366004611a3f565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b34801561057d57600080fd5b506102c661058c3660046119a2565b61095e565b34801561059d57600080fd5b506102c66105ac366004611985565b61098d565b3480156105bd57600080fd5b506102c6610a77565b60006105d3338484610ab7565b5060015b92915050565b6000546001600160a01b031633146106105760405162461bcd60e51b815260040161060790611a78565b60405180910390fd5b600893909355600a91909155600955600b55565b6000610631848484610bdb565b610683843361067e85604051806060016040528060288152602001611bf3602891396001600160a01b038a1660009081526004602090815260408083203384529091529020549190611117565b610ab7565b5060019392505050565b6000546001600160a01b031633146106b75760405162461bcd60e51b815260040161060790611a78565b60158054911515600160a81b0260ff60a81b19909216919091179055565b6012546001600160a01b0316336001600160a01b0316148061070a57506013546001600160a01b0316336001600160a01b0316145b61071357600080fd5b4761071d81611151565b50565b6001600160a01b0381166000908152600260205260408120546105d79061118f565b6000546001600160a01b0316331461076c5760405162461bcd60e51b815260040161060790611a78565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146107e05760405162461bcd60e51b815260040161060790611a78565b601655565b6000546001600160a01b0316331461080f5760405162461bcd60e51b815260040161060790611a78565b60158054911515600160b01b0260ff60b01b19909216919091179055565b6000546001600160a01b031633146108575760405162461bcd60e51b815260040161060790611a78565b601855565b60006105d3338484610bdb565b6012546001600160a01b0316336001600160a01b0316148061089e57506013546001600160a01b0316336001600160a01b0316145b6108a757600080fd5b60006108b230610720565b905061071d81611213565b6000546001600160a01b031633146108e75760405162461bcd60e51b815260040161060790611a78565b60005b8281101561095857816005600086868581811061090957610909611aad565b905060200201602081019061091e9190611985565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061095081611ad9565b9150506108ea565b50505050565b6000546001600160a01b031633146109885760405162461bcd60e51b815260040161060790611a78565b601755565b6000546001600160a01b031633146109b75760405162461bcd60e51b815260040161060790611a78565b6001600160a01b038116610a1c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610607565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610aa15760405162461bcd60e51b815260040161060790611a78565b6a52b7d2dcc80cd2e40000006017819055601655565b6001600160a01b038316610b195760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610607565b6001600160a01b038216610b7a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610607565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610c3f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610607565b6001600160a01b038216610ca15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610607565b60008111610d035760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610607565b6000546001600160a01b03848116911614801590610d2f57506000546001600160a01b03838116911614155b1561101057601554600160b01b900460ff16610dc8576000546001600160a01b03848116911614610dc85760405162461bcd60e51b815260206004820152603f60248201527f544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e642060448201527f746f6b656e7320756e74696c2074726164696e6720697320656e61626c6564006064820152608401610607565b601654811115610e1a5760405162461bcd60e51b815260206004820152601c60248201527f544f4b454e3a204d6178205472616e73616374696f6e204c696d6974000000006044820152606401610607565b6001600160a01b03831660009081526010602052604090205460ff16158015610e5c57506001600160a01b03821660009081526010602052604090205460ff16155b610eb45760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a20596f7572206163636f756e7420697320626c61636b6c69737460448201526265642160e81b6064820152608401610607565b6015546001600160a01b03838116911614610f395760175481610ed684610720565b610ee09190611af4565b10610f395760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a2042616c616e636520657863656564732077616c6c65742073696044820152627a652160e81b6064820152608401610607565b6000610f4430610720565b601854601654919250821015908210610f5d5760165491505b808015610f745750601554600160a01b900460ff16155b8015610f8e57506015546001600160a01b03868116911614155b8015610fa35750601554600160a81b900460ff165b8015610fc857506001600160a01b03851660009081526005602052604090205460ff16155b8015610fed57506001600160a01b03841660009081526005602052604090205460ff16155b1561100d57610ffb82611213565b47801561100b5761100b47611151565b505b50505b6001600160a01b03831660009081526005602052604090205460019060ff168061105257506001600160a01b03831660009081526005602052604090205460ff165b8061108457506015546001600160a01b0385811691161480159061108457506015546001600160a01b03848116911614155b156110915750600061110b565b6015546001600160a01b0385811691161480156110bc57506014546001600160a01b03848116911614155b156110ce57600854600c55600954600d555b6015546001600160a01b0384811691161480156110f957506014546001600160a01b03858116911614155b1561110b57600a54600c55600b54600d555b61095884848484611396565b6000818484111561113b5760405162461bcd60e51b8152600401610607919061184c565b5060006111488486611b0c565b95945050505050565b6013546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561118b573d6000803e3d6000fd5b5050565b60006006548211156111f65760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b6064820152608401610607565b60006112006113c4565b905061120c83826113e7565b9392505050565b6015805460ff60a01b19169055604080516002808252606082018352600092602083019080368337019050509050308160008151811061125557611255611aad565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b1580156112a957600080fd5b505afa1580156112bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e19190611b23565b816001815181106112f4576112f4611aad565b6001600160a01b03928316602091820292909201015260145461131a9130911684610ab7565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac94790611353908590600090869030904290600401611b40565b600060405180830381600087803b15801561136d57600080fd5b505af1158015611381573d6000803e3d6000fd5b50506015805460ff60a01b1916905550505050565b806113a3576113a3611429565b6113ae848484611457565b8061095857610958600e54600c55600f54600d55565b60008060006113d161154e565b90925090506113e082826113e7565b9250505090565b600061120c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061158e565b600c541580156114395750600d54155b1561144057565b600c8054600e55600d8054600f5560009182905555565b600080600080600080611469876115bc565b6001600160a01b038f16600090815260026020526040902054959b5093995091975095509350915061149b9087611619565b6001600160a01b03808b1660009081526002602052604080822093909355908a16815220546114ca908661165b565b6001600160a01b0389166000908152600260205260409020556114ec816116ba565b6114f68483611704565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161153b91815260200190565b60405180910390a3505050505050505050565b600654600090819067016345785d8a000061156982826113e7565b8210156115855750506006549267016345785d8a000092509050565b90939092509050565b600081836115af5760405162461bcd60e51b8152600401610607919061184c565b5060006111488486611bb1565b60008060008060008060008060006115d98a600c54600d54611728565b92509250925060006115e96113c4565b905060008060006115fc8e87878761177d565b919e509c509a509598509396509194505050505091939550919395565b600061120c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611117565b6000806116688385611af4565b90508381101561120c5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610607565b60006116c46113c4565b905060006116d283836117cd565b306000908152600260205260409020549091506116ef908261165b565b30600090815260026020526040902055505050565b6006546117119083611619565b600655600754611721908261165b565b6007555050565b6000808080611742606461173c89896117cd565b906113e7565b90506000611755606461173c8a896117cd565b9050600061176d826117678b86611619565b90611619565b9992985090965090945050505050565b600080808061178c88866117cd565b9050600061179a88876117cd565b905060006117a888886117cd565b905060006117ba826117678686611619565b939b939a50919850919650505050505050565b6000826117dc575060006105d7565b60006117e88385611bd3565b9050826117f58583611bb1565b1461120c5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610607565b600060208083528351808285015260005b818110156118795785810183015185820160400152820161185d565b8181111561188b576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461071d57600080fd5b600080604083850312156118c957600080fd5b82356118d4816118a1565b946020939093013593505050565b600080600080608085870312156118f857600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561192957600080fd5b8335611934816118a1565b92506020840135611944816118a1565b929592945050506040919091013590565b8035801515811461196557600080fd5b919050565b60006020828403121561197c57600080fd5b61120c82611955565b60006020828403121561199757600080fd5b813561120c816118a1565b6000602082840312156119b457600080fd5b5035919050565b6000806000604084860312156119d057600080fd5b833567ffffffffffffffff808211156119e857600080fd5b818601915086601f8301126119fc57600080fd5b813581811115611a0b57600080fd5b8760208260051b8501011115611a2057600080fd5b602092830195509350611a369186019050611955565b90509250925092565b60008060408385031215611a5257600080fd5b8235611a5d816118a1565b91506020830135611a6d816118a1565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611aed57611aed611ac3565b5060010190565b60008219821115611b0757611b07611ac3565b500190565b600082821015611b1e57611b1e611ac3565b500390565b600060208284031215611b3557600080fd5b815161120c816118a1565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611b905784516001600160a01b031683529383019391830191600101611b6b565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611bce57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611bed57611bed611ac3565b50029056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212201204780d44c96880a90eedda74985933305013a7dc9db706bae6ec82546542c464736f6c63430008090033",
    "runtime_bytecode": "",
    "contract_name": "DEGENNATION",
    "compiler_version": "v0.8.9+commit.e5eed63a",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTx\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapTokensThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_openTrading\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n\r\n\r\n/*\r\n\r\n\r\n\r\n\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n\u2588\u2584\u2500\u2584\u2584\u2580\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\u2588\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2584\u2500\u2584\u2588\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2580\u2588\u2584\u2500\u2584\u2588\r\n\u2588\u2588\u2500\u2588\u2588\u2500\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2500\u2588\u2588\u2584\u2500\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\u2588\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2500\u2588\u2588\u2500\u2588\u2588\u2500\u2588\u2584\u2580\u2500\u2588\u2588\r\n\u2580\u2584\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\r\n                                                                                                                                                       \r\nhttps://t.me/degennation_eth\r\n\r\n\r\nhttps://degennation.club\r\n\r\n\r\nhttps://twitter.com/DegenNationEth\r\n\r\n\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.9;\r\n\r\n\r\nabstract contract Context {\r\nfunction _msgSender() internal view virtual returns (address) {\r\nreturn msg.sender;\r\n}\r\n}\r\n\r\n\r\ninterface IERC20 {\r\nfunction totalSupply() external view returns (uint256);\r\n\r\n\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\nfunction transferFrom(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) external returns (bool);\r\n\r\n\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Approval(\r\naddress indexed owner,\r\naddress indexed spender,\r\nuint256 value\r\n);\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\naddress private _owner;\r\naddress private _previousOwner;\r\nevent OwnershipTransferred(\r\naddress indexed previousOwner,\r\naddress indexed newOwner\r\n);\r\n\r\n\r\nconstructor() {\r\naddress msgSender = _msgSender();\r\n_owner = msgSender;\r\nemit OwnershipTransferred(address(0), msgSender);\r\n}\r\n\r\n\r\nfunction owner() public view returns (address) {\r\nreturn _owner;\r\n}\r\n\r\n\r\nmodifier onlyOwner() {\r\nrequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n_;\r\n}\r\n\r\n\r\nfunction renounceOwnership() public virtual onlyOwner {\r\nemit OwnershipTransferred(_owner, address(0));\r\n_owner = address(0);\r\n}\r\n\r\n\r\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\nemit OwnershipTransferred(_owner, newOwner);\r\n_owner = newOwner;\r\n}\r\n\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c >= a, \"SafeMath: addition overflow\");\r\nreturn c;\r\n}\r\n\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n}\r\n\r\n\r\nfunction sub(\r\nuint256 a,\r\nuint256 b,\r\nstring memory errorMessage\r\n) internal pure returns (uint256) {\r\nrequire(b <= a, errorMessage);\r\nuint256 c = a - b;\r\nreturn c;\r\n}\r\n\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\nreturn c;\r\n}\r\n\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn div(a, b, \"SafeMath: division by zero\");\r\n}\r\n\r\n\r\nfunction div(\r\nuint256 a,\r\nuint256 b,\r\nstring memory errorMessage\r\n) internal pure returns (uint256) {\r\nrequire(b > 0, errorMessage);\r\nuint256 c = a / b;\r\nreturn c;\r\n}\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\nfunction createPair(address tokenA, address tokenB)\r\nexternal\r\nreturns (address pair);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\nuint256 amountIn,\r\nuint256 amountOutMin,\r\naddress[] calldata path,\r\naddress to,\r\nuint256 deadline\r\n) external;\r\n\r\n\r\nfunction factory() external pure returns (address);\r\n\r\n\r\nfunction WETH() external pure returns (address);\r\n\r\n\r\nfunction addLiquidityETH(\r\naddress token,\r\nuint256 amountTokenDesired,\r\nuint256 amountTokenMin,\r\nuint256 amountETHMin,\r\naddress to,\r\nuint256 deadline\r\n)\r\nexternal\r\npayable\r\nreturns (\r\nuint256 amountToken,\r\nuint256 amountETH,\r\nuint256 liquidity\r\n);\r\n}\r\n\r\n\r\ncontract DEGENNATION is Context, IERC20, Ownable {\r\n\r\n\r\nusing SafeMath for uint256;\r\n\r\n\r\nstring private constant _name = \"DEGEN NATION\";\r\nstring private constant _symbol = \"DN\";\r\nuint8 private constant _decimals = 9;\r\n\r\n\r\nmapping(address => uint256) private _rOwned;\r\nmapping(address => uint256) private _tOwned;\r\nmapping(address => mapping(address => uint256)) private _allowances;\r\nmapping(address => bool) private _isExcludedFromFee;\r\nuint256 private constant MAX = ~uint256(0);\r\nuint256 private constant _tTotal = 100000000 * 10**9;\r\nuint256 private _rTotal = (MAX - (MAX % _tTotal));\r\nuint256 private _totalFee;\r\nuint256 private _initFeeOnBuy = 0;\r\nuint256 private _taxFeeOnBuy = 20;\r\nuint256 private _initFeeOnSell = 0;\r\nuint256 private _taxFeeOnSell = 30;\r\n\r\n\r\n\r\n\r\nuint256 private _initFee = _initFeeOnSell;\r\nuint256 private _taxFee = _taxFeeOnSell;\r\n\r\n\r\nuint256 private _previousInitFee = _initFee;\r\nuint256 private _previoustaxFee = _taxFee;\r\n\r\n\r\nmapping(address => bool) public bots; mapping (address => uint256) public _buyMap;\r\naddress payable private _devWallet = payable(0x2f517f4c06380fA362f2618c0821E0E4C7069fEb);\r\naddress payable private _marketingWallet = payable(0x2f517f4c06380fA362f2618c0821E0E4C7069fEb);\r\n\r\n\r\nIUniswapV2Router02 public uniswapV2Router;\r\naddress public uniswapV2Pair;\r\n\r\n\r\nbool private inSwap = false;\r\nbool private swapEnabled = true;\r\nbool private openTrading = true;\r\n\r\n\r\nuint256 public _maxTx = 2000000 * 10**9;\r\nuint256 public _maxWallet = 2000000 * 10**9;\r\nuint256 public _swapTokensAtAmount = 100 * 10**9;\r\n\r\n\r\nevent MaxTxAmountUpdated(uint256 _maxTx);\r\nmodifier lockTheSwap {\r\ninSwap = false;\r\n_;\r\ninSwap = false;\r\n}\r\n\r\n\r\nconstructor() {\r\n\r\n\r\n_rOwned[_msgSender()] = _rTotal;\r\n\r\n\r\nIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\nuniswapV2Router = _uniswapV2Router;\r\nuniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n.createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n\r\n_isExcludedFromFee[owner()] = true;\r\n_isExcludedFromFee[address(this)] = true;\r\n_isExcludedFromFee[_devWallet] = true;\r\n_isExcludedFromFee[_marketingWallet] = true;\r\n\r\n\r\nemit Transfer(address(0), _msgSender(), _tTotal);\r\n}\r\n\r\n\r\nfunction name() public pure returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\n\r\nfunction symbol() public pure returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\n\r\nfunction decimals() public pure returns (uint8) {\r\nreturn _decimals;\r\n}\r\n\r\n\r\nfunction totalSupply() public pure override returns (uint256) {\r\nreturn _tTotal;\r\n}\r\n\r\n\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\nreturn tokenFromReflection(_rOwned[account]);\r\n}\r\n\r\n\r\nfunction transfer(address recipient, uint256 amount)\r\npublic\r\noverride\r\nreturns (bool)\r\n{\r\n_transfer(_msgSender(), recipient, amount);\r\nreturn true;\r\n}\r\n\r\n\r\nfunction allowance(address owner, address spender)\r\npublic\r\nview\r\noverride\r\nreturns (uint256)\r\n{\r\nreturn _allowances[owner][spender];\r\n}\r\n\r\n\r\nfunction approve(address spender, uint256 amount)\r\npublic\r\noverride\r\nreturns (bool)\r\n{\r\n_approve(_msgSender(), spender, amount);\r\nreturn true;\r\n}\r\n\r\n\r\nfunction transferFrom(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) public override returns (bool) {\r\n_transfer(sender, recipient, amount);\r\n_approve(\r\nsender,\r\n_msgSender(),\r\n_allowances[sender][_msgSender()].sub(\r\namount,\r\n\"ERC20: transfer amount exceeds allowance\"\r\n)\r\n);\r\nreturn true;\r\n}\r\n\r\n\r\nfunction tokenFromReflection(uint256 rAmount)\r\nprivate\r\nview\r\nreturns (uint256)\r\n{\r\nrequire(\r\nrAmount <= _rTotal,\r\n\"Amount must be less than total reflections\"\r\n);\r\nuint256 currentRate = _getRate();\r\nreturn rAmount.div(currentRate);\r\n}\r\n\r\n\r\nfunction removeAllFee() private {\r\nif (_initFee == 0 && _taxFee == 0) return;\r\n\r\n\r\n_previousInitFee = _initFee;\r\n_previoustaxFee = _taxFee;\r\n\r\n\r\n_initFee = 0;\r\n_taxFee = 0;\r\n}\r\n\r\n\r\nfunction restoreAllFee() private {\r\n_initFee = _previousInitFee;\r\n_taxFee = _previoustaxFee;\r\n}\r\n\r\n\r\nfunction _approve(\r\naddress owner,\r\naddress spender,\r\nuint256 amount\r\n) private {\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\n\r\n\r\nfunction _transfer(\r\naddress from,\r\naddress to,\r\nuint256 amount\r\n) private {\r\nrequire(from != address(0), \"ERC20: transfer from the zero address\");\r\nrequire(to != address(0), \"ERC20: transfer to the zero address\");\r\nrequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n\r\nif (from != owner() && to != owner()) {\r\n\r\n\r\n\r\n\r\nif (!openTrading) {\r\nrequire(from == owner(), \"TOKEN: This account cannot send tokens until trading is enabled\");\r\n}\r\n\r\n\r\nrequire(amount <= _maxTx, \"TOKEN: Max Transaction Limit\");\r\nrequire(!bots[from] && !bots[to], \"TOKEN: Your account is blacklisted!\");\r\n\r\n\r\nif(to != uniswapV2Pair) {\r\nrequire(balanceOf(to) + amount < _maxWallet, \"TOKEN: Balance exceeds wallet size!\");\r\n}\r\n\r\n\r\nuint256 contractTokenBalance = balanceOf(address(this));\r\nbool canSwap = contractTokenBalance >= _swapTokensAtAmount;\r\n\r\n\r\nif(contractTokenBalance >= _maxTx)\r\n{\r\ncontractTokenBalance = _maxTx;\r\n}\r\n\r\n\r\nif (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\nswapTokensForEth(contractTokenBalance);\r\nuint256 contractETHBalance = address(this).balance;\r\nif (contractETHBalance > 0) {\r\nsendETHToFee(address(this).balance);\r\n}\r\n}\r\n}\r\n\r\n\r\nbool takeFee = true;\r\n\r\n\r\n//Transfer Tokens\r\nif ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\ntakeFee = false;\r\n} else {\r\n\r\n\r\n//Set Fee for Buys\r\nif(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n_initFee = _initFeeOnBuy;\r\n_taxFee = _taxFeeOnBuy;\r\n}\r\n\r\n\r\n//Set Fee for Sells\r\nif (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n_initFee = _initFeeOnSell;\r\n_taxFee = _taxFeeOnSell;\r\n}\r\n\r\n\r\n}\r\n\r\n\r\n_tokenTransfer(from, to, amount, takeFee);\r\n}\r\n\r\n\r\nfunction swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\naddress[] memory path = new address[](2);\r\npath[0] = address(this);\r\npath[1] = uniswapV2Router.WETH();\r\n_approve(address(this), address(uniswapV2Router), tokenAmount);\r\nuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\ntokenAmount,\r\n0,\r\npath,\r\naddress(this),\r\nblock.timestamp\r\n);\r\n}\r\n\r\n\r\nfunction sendETHToFee(uint256 amount) private {\r\n_marketingWallet.transfer(amount);\r\n}\r\n\r\n\r\nfunction setTrading(bool _openTrading) public onlyOwner {\r\nopenTrading = _openTrading;\r\n}\r\n\r\n\r\nfunction manualswap() external {\r\nrequire(_msgSender() == _devWallet || _msgSender() == _marketingWallet);\r\nuint256 contractBalance = balanceOf(address(this));\r\nswapTokensForEth(contractBalance);\r\n}\r\n\r\n\r\nfunction manualsend() external {\r\nrequire(_msgSender() == _devWallet || _msgSender() == _marketingWallet);\r\nuint256 contractETHBalance = address(this).balance;\r\nsendETHToFee(contractETHBalance);\r\n}\r\n\r\n\r\nfunction _tokenTransfer(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount,\r\nbool takeFee\r\n) private {\r\nif (!takeFee) removeAllFee();\r\n_transferStandard(sender, recipient, amount);\r\nif (!takeFee) restoreAllFee();\r\n}\r\n\r\n\r\nfunction _transferStandard(\r\naddress sender,\r\naddress recipient,\r\nuint256 tAmount\r\n) private {\r\n(\r\nuint256 rAmount,\r\nuint256 rTransferAmount,\r\nuint256 rFee,\r\nuint256 tTransferAmount,\r\nuint256 tFee,\r\nuint256 tTeam\r\n) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeTeam(tTeam);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\n\r\nfunction _takeTeam(uint256 tTeam) private {\r\nuint256 currentRate = _getRate();\r\nuint256 rTeam = tTeam.mul(currentRate);\r\n_rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n}\r\n\r\n\r\nfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n_rTotal = _rTotal.sub(rFee);\r\n_totalFee = _totalFee.add(tFee);\r\n}\r\n\r\n\r\nreceive() external payable {}\r\n\r\n\r\nfunction _getValues(uint256 tAmount)\r\nprivate\r\nview\r\nreturns (\r\nuint256,\r\nuint256,\r\nuint256,\r\nuint256,\r\nuint256,\r\nuint256\r\n)\r\n{\r\n(uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\r\n_getTValues(tAmount, _initFee, _taxFee);\r\nuint256 currentRate = _getRate();\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n_getRValues(tAmount, tFee, tTeam, currentRate);\r\nreturn (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n}\r\n\r\n\r\nfunction _getTValues(\r\nuint256 tAmount,\r\nuint256 redisFee,\r\nuint256 taxFee\r\n)\r\nprivate\r\npure\r\nreturns (\r\nuint256,\r\nuint256,\r\nuint256\r\n)\r\n{\r\nuint256 tFee = tAmount.mul(redisFee).div(100);\r\nuint256 tTeam = tAmount.mul(taxFee).div(100);\r\nuint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\nreturn (tTransferAmount, tFee, tTeam);\r\n}\r\n\r\n\r\nfunction _getRValues(\r\nuint256 tAmount,\r\nuint256 tFee,\r\nuint256 tTeam,\r\nuint256 currentRate\r\n)\r\nprivate\r\npure\r\nreturns (\r\nuint256,\r\nuint256,\r\nuint256\r\n)\r\n{\r\nuint256 rAmount = tAmount.mul(currentRate);\r\nuint256 rFee = tFee.mul(currentRate);\r\nuint256 rTeam = tTeam.mul(currentRate);\r\nuint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\nreturn (rAmount, rTransferAmount, rFee);\r\n}\r\n\r\n\r\nfunction _getRate() private view returns (uint256) {\r\n(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\nreturn rSupply.div(tSupply);\r\n}\r\n\r\n\r\nfunction _getCurrentSupply() private view returns (uint256, uint256) {\r\nuint256 rSupply = _rTotal;\r\nuint256 tSupply = _tTotal;\r\nif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\nreturn (rSupply, tSupply);\r\n}\r\n\r\n\r\nfunction setTax(uint256 initOnBuy, uint256 initOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {\r\n_initFeeOnBuy = initOnBuy;\r\n_initFeeOnSell = initOnSell;\r\n_taxFeeOnBuy = taxFeeOnBuy;\r\n_taxFeeOnSell = taxFeeOnSell;\r\n}\r\n\r\n\r\nfunction setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {\r\n_swapTokensAtAmount = swapTokensAtAmount;\r\n}\r\n\r\n\r\nfunction toggleSwap(bool _swapEnabled) public onlyOwner {\r\nswapEnabled = _swapEnabled;\r\n}\r\n\r\n\r\nfunction setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n_maxTx = maxTxAmount;\r\n}\r\n\r\n\r\nfunction setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n_maxWallet = maxWalletSize;\r\n}\r\n\r\n\r\nfunction excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\nfor(uint256 i = 0; i < accounts.length; i++) {\r\n_isExcludedFromFee[accounts[i]] = excluded;\r\n}\r\n}\r\n\r\n\r\nfunction releaseMax() public onlyOwner {\r\n_maxWallet = 100000000000000000000000000;\r\n_maxTx = 100000000000000000000000000;\r\n}\r\n}",
    "etherscan_verified": true
}