{
    "address": "0x5843ACcF881D401B3AD3D749b96A308Ebb486Cef",
    "tx_hash": "8dc4728e0b2d508b02c65e5c8815db6fd6e504e7b15ea3fd0a5a10b7ac4c4a00",
    "block_number": 18002048,
    "timestamp": 1693091567,
    "gas_used_in_creation": 1999926,
    "creation_bytecode": "",
    "runtime_bytecode": "608060405260043610610134575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb1461037d578063bf474bed1461039c578063c876d0b9146103b1578063c9567bf9146103ca578063d34628cc146103de578063dd62ed3e146103fd575f80fd5b8063751039fc146102ea5780637d1db4a5146102fe5780638da5cb5b146103135780638f9a55c01461033957806395d89b411461034e575f80fd5b8063313ce567116100f9578063313ce5671461021b57806331c2d847146102365780633bbac5791461025757806351bc3c851461028e57806370a08231146102a2578063715018a6146102d6575f80fd5b806306fdde031461013f578063095ea7b3146101965780630faee56f146101c557806318160ddd146101e857806323b872dd146101fc575f80fd5b3661013b57005b5f80fd5b34801561014a575f80fd5b506040805180820190915260208082527f536f6d657468696e6749446f6e74556e6465727374616e644275744941706564908201525b60405161018d919061181c565b60405180910390f35b3480156101a1575f80fd5b506101b56101b036600461188e565b610441565b604051901515815260200161018d565b3480156101d0575f80fd5b506101da60135481565b60405190815260200161018d565b3480156101f3575f80fd5b506101da610457565b348015610207575f80fd5b506101b56102163660046118b8565b610477565b348015610226575f80fd5b506040516008815260200161018d565b348015610241575f80fd5b5061025561025036600461190a565b6104de565b005b348015610262575f80fd5b506101b56102713660046119ca565b6001600160a01b03165f9081526005602052604090205460ff1690565b348015610299575f80fd5b50610255610578565b3480156102ad575f80fd5b506101da6102bc3660046119ca565b6001600160a01b03165f9081526001602052604090205490565b3480156102e1575f80fd5b506102556105ca565b3480156102f5575f80fd5b5061025561063b565b348015610309575f80fd5b506101da60105481565b34801561031e575f80fd5b505f546040516001600160a01b03909116815260200161018d565b348015610344575f80fd5b506101da60115481565b348015610359575f80fd5b506040805180820190915260078152662124aa21a7a4a760c91b6020820152610180565b348015610388575f80fd5b506101b561039736600461188e565b6106f6565b3480156103a7575f80fd5b506101da60125481565b3480156103bc575f80fd5b506007546101b59060ff1681565b3480156103d5575f80fd5b50610255610702565b3480156103e9575f80fd5b506102556103f836600461190a565b610bc5565b348015610408575f80fd5b506101da6104173660046119e5565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f61044d338484610c53565b5060015b92915050565b5f6104646008600a611b10565b610472906301406f40611b1e565b905090565b5f610483848484610d76565b6104d484336104cf85604051806060016040528060288152602001611cb0602891396001600160a01b038a165f908152600260209081526040808320338452909152902054919061147b565b610c53565b5060019392505050565b5f546001600160a01b031633146105105760405162461bcd60e51b815260040161050790611b35565b60405180910390fd5b5f5b8151811015610574575f60055f84848151811061053157610531611b6a565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff19169115159190911790558061056c81611b7e565b915050610512565b5050565b60075461010090046001600160a01b0316336001600160a01b03161461059c575f80fd5b305f9081526001602052604090205480156105ba576105ba816114b3565b478015610574576105748161163c565b5f546001600160a01b031633146105f35760405162461bcd60e51b815260040161050790611b35565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146106645760405162461bcd60e51b815260040161050790611b35565b6106706008600a611b10565b61067e906301406f40611b1e565b60105561068d6008600a611b10565b61069b906301406f40611b1e565b6011556007805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106d56008600a611b10565b6106e3906301406f40611b1e565b60405190815260200160405180910390a1565b5f61044d338484610d76565b5f546001600160a01b0316331461072b5760405162461bcd60e51b815260040161050790611b35565b601554600160a01b900460ff16156107855760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610507565b601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556107ce9030906107c06008600a611b10565b6104cf906301406f40611b1e565b6014546040805163c45a015560e01b815290515f926001600160a01b03169163c45a01559160048083019260209291908290030181865afa158015610815573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108399190611b96565b9050806001600160a01b031663e6a439053060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561089b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108bf9190611b96565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610908573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061092c9190611b96565b601580546001600160a01b0319166001600160a01b03929092169182179055610a6257806001600160a01b031663c9c653963060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109af573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109d39190611b96565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610a1d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a419190611b96565b601580546001600160a01b0319166001600160a01b03929092169190911790555b6014546001600160a01b031663f305d7194730610a93816001600160a01b03165f9081526001602052604090205490565b5f80610aa65f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610b0c573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610b319190611bb1565b505060155460145460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610b86573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610baa9190611bdc565b50506015805462ff00ff60a01b19166201000160a01b179055565b5f546001600160a01b03163314610bee5760405162461bcd60e51b815260040161050790611b35565b5f5b815181101561057457600160055f848481518110610c1057610c10611b6a565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610c4b81611b7e565b915050610bf0565b6001600160a01b038316610cb55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610507565b6001600160a01b038216610d165760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610507565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610dda5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610507565b6001600160a01b038216610e3c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610507565b5f8111610e9d5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610507565b5f80546001600160a01b03858116911614801590610ec857505f546001600160a01b03848116911614155b1561133e576001600160a01b0384165f9081526005602052604090205460ff16158015610f0d57506001600160a01b0383165f9081526005602052604090205460ff16155b610f15575f80fd5b610f486064610f42601560149054906101000a900460ff16610f3957600854610f3b565b5f5b8590611677565b906116fc565b60075490915060ff1615611002576014546001600160a01b03848116911614801590610f8257506015546001600160a01b03848116911614155b1561100257325f908152600660205260409020544311610ff05760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b6064820152608401610507565b325f9081526006602052604090204390555b6015546001600160a01b03858116911614801561102d57506014546001600160a01b03848116911614155b801561105157506001600160a01b0383165f9081526003602052604090205460ff16155b15611196576010548211156110a45760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610507565b601154826110c6856001600160a01b03165f9081526001602052604090205490565b6110d09190611bfb565b111561111e5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e0000000000006044820152606401610507565b600e54600f54101561113557823b15611135575f80fd5b600f8054905f61114483611b7e565b90915550506001600160a01b0383165f908152600460205260409020805460ff19166001179055600c54600f5461119391606491610f42911061118957600854610f3b565b600a548590611677565b90505b6015546001600160a01b0384811691161480156111bc57506001600160a01b0384163014155b156112a15760105482111561120f5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610507565b6112346064610f42600d54600f541161122a57600954610f3b565b600b548590611677565b9050600e54600f54118061125f57506001600160a01b0384165f9081526004602052604090205460ff165b6112a15760405162461bcd60e51b815260206004820152601360248201527229b2b63632b91034b9903737ba10313abcb2b960691b6044820152606401610507565b305f90815260016020526040902054601554600160a81b900460ff161580156112d757506015546001600160a01b038581169116145b80156112ec5750601554600160b01b900460ff165b80156112f9575060125481115b80156113085750600e54600f54115b1561133c5761132a611325846113208460135461173d565b61173d565b6114b3565b47801561133a5761133a4761163c565b505b505b80156113b657305f9081526001602052604090205461135d9082611751565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906113ad9085815260200190565b60405180910390a35b6001600160a01b0384165f908152600160205260409020546113d890836117af565b6001600160a01b0385165f9081526001602052604090205561141b6113fd83836117af565b6001600160a01b0385165f9081526001602052604090205490611751565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61146485856117af565b60405190815260200160405180910390a350505050565b5f818484111561149e5760405162461bcd60e51b8152600401610507919061181c565b505f6114aa8486611c0e565b95945050505050565b6015805460ff60a81b1916600160a81b179055801561162c57601554600160a01b900460ff161561162c576040805160028082526060820183525f9260208301908036833701905050905030815f8151811061151157611511611b6a565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611568573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061158c9190611b96565b8160018151811061159f5761159f611b6a565b6001600160a01b0392831660209182029290920101526014546115c59130911684610c53565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac947906115fd9085905f90869030904290600401611c21565b5f604051808303815f87803b158015611614575f80fd5b505af1158015611626573d5f803e3d5ffd5b50505050505b506015805460ff60a81b19169055565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f19350505050158015610574573d5f803e3d5ffd5b5f825f0361168657505f610451565b5f6116918385611b1e565b90508261169e8583611c90565b146116f55760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610507565b9392505050565b5f6116f583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506117f0565b5f81831161174b57826116f5565b50919050565b5f8061175d8385611bfb565b9050838110156116f55760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610507565b5f6116f583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061147b565b5f81836118105760405162461bcd60e51b8152600401610507919061181c565b505f6114aa8486611c90565b5f6020808352835180828501525f5b818110156118475785810183015185820160400152820161182b565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461187b575f80fd5b50565b803561188981611867565b919050565b5f806040838503121561189f575f80fd5b82356118aa81611867565b946020939093013593505050565b5f805f606084860312156118ca575f80fd5b83356118d581611867565b925060208401356118e581611867565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b5f602080838503121561191b575f80fd5b823567ffffffffffffffff80821115611932575f80fd5b818501915085601f830112611945575f80fd5b813581811115611957576119576118f6565b8060051b604051601f19603f8301168101818110858211171561197c5761197c6118f6565b604052918252848201925083810185019188831115611999575f80fd5b938501935b828510156119be576119af8561187e565b8452938501939285019261199e565b98975050505050505050565b5f602082840312156119da575f80fd5b81356116f581611867565b5f80604083850312156119f6575f80fd5b8235611a0181611867565b91506020830135611a1181611867565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b80851115611a6a57815f1904821115611a5057611a50611a1c565b80851615611a5d57918102915b93841c9390800290611a35565b509250929050565b5f82611a8057506001610451565b81611a8c57505f610451565b8160018114611aa25760028114611aac57611ac8565b6001915050610451565b60ff841115611abd57611abd611a1c565b50506001821b610451565b5060208310610133831016604e8410600b8410161715611aeb575081810a610451565b611af58383611a30565b805f1904821115611b0857611b08611a1c565b029392505050565b5f6116f560ff841683611a72565b808202811582820484141761045157610451611a1c565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b5f60018201611b8f57611b8f611a1c565b5060010190565b5f60208284031215611ba6575f80fd5b81516116f581611867565b5f805f60608486031215611bc3575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611bec575f80fd5b815180151581146116f5575f80fd5b8082018082111561045157610451611a1c565b8181038181111561045157610451611a1c565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015611c6f5784516001600160a01b031683529383019391830191600101611c4a565b50506001600160a01b03969096166060850152505050608001529392505050565b5f82611caa57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220aaef61d75f745f5e4f41fbfd49f7b1a18102f8288c1b161e4e4b706281bc14fa64736f6c63430008140033",
    "contract_name": "SIDUBIA",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbot\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"main\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n\\n\\n\\n**/\\npragma solidity 0.8.20;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ncontract SIDUBIA is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _isExcludedFromFee;\\n    mapping (address => bool) private _buyerMap;\\n    mapping (address => bool) private bots;\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\n    bool public transferDelayEnabled = true;\\n    address payable private _taxWallet;\\n\\n    uint256 private _initialBuyTax=0;\\n    uint256 private _initialSellTax=80;\\n    uint256 private _finalBuyTax=2;\\n    uint256 private _finalSellTax=2;\\n    uint256 private _reduceBuyTaxAt=1;\\n    uint256 private _reduceSellTaxAt=20;\\n    uint256 private _preventSwapBefore=20;\\n    uint256 private _buyCount=0;\\n\\n    uint8 private constant _decimals = 8;\\n    uint256 private constant _tTotal = 21000000 * 10**_decimals;\\n    string private constant _name = unicode\\\"SomethingIDontUnderstandButIAped\\\";\\n    string private constant _symbol = unicode\\\"BITCOIN\\\";\\n    uint256 public _maxTxAmount =   420000 * 10**_decimals;\\n    uint256 public _maxWalletSize = 420000 * 10**_decimals;\\n    uint256 public _taxSwapThreshold=0 * 10**_decimals;\\n    uint256 public _maxTaxSwap=420000 * 10**_decimals;\\n\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address private uniswapV2Pair;\\n    bool private tradingOpen;\\n    bool private inSwap = false;\\n    bool private swapEnabled = false;\\n\\n    event MaxTxAmountUpdated(uint _maxTxAmount);\\n    modifier lockTheSwap {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor () {\\n        _taxWallet = payable(_msgSender());\\n        _balances[_msgSender()] = _tTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_taxWallet] = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        uint256 taxAmount=0;\\n        if (from != owner() && to != owner()) {\\n            require(!bots[from] && !bots[to]);\\n            taxAmount=amount.mul((tradingOpen)?0:_initialBuyTax).div(100);\\n            if (transferDelayEnabled) {\\n              if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\\n                require(_holderLastTransferTimestamp[tx.origin] < block.number,\\\"Only one transfer per block allowed.\\\");\\n                _holderLastTransferTimestamp[tx.origin] = block.number;\\n              }\\n            }\\n\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\n                if(_buyCount<_preventSwapBefore){\\n                  require(!isContract(to));\\n                }\\n                _buyCount++;\\n                _buyerMap[to]=true;\\n                taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\\n            }\\n\\n            if(to == uniswapV2Pair && from!= address(this) ){\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\\n                require(_buyCount>_preventSwapBefore || _buyerMap[from],\\\"Seller is not buyer\\\");\\n            }\\n\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\\n                uint256 contractETHBalance = address(this).balance;\\n                if(contractETHBalance > 0) {\\n                    sendETHToFee(address(this).balance);\\n                }\\n            }\\n        }\\n\\n        if(taxAmount>0){\\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\\n          emit Transfer(from, address(this),taxAmount);\\n        }\\n        _balances[from]=_balances[from].sub(amount);\\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\\n        emit Transfer(from, to, amount.sub(taxAmount));\\n    }\\n\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256){\\n      return (a>b)?b:a;\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        if(tokenAmount==0){return;}\\n        if(!tradingOpen){return;}\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function removeLimits() external onlyOwner{\\n        _maxTxAmount = _tTotal;\\n        _maxWalletSize=_tTotal;\\n        transferDelayEnabled=false;\\n        emit MaxTxAmountUpdated(_tTotal);\\n    }\\n\\n    function sendETHToFee(uint256 amount) private {\\n        _taxWallet.transfer(amount);\\n    }\\n\\n    function isBot(address a) public view returns (bool){\\n      return bots[a];\\n    }\\n\\n    function openTrading() external onlyOwner() {\\n        require(!tradingOpen,\\\"trading is already open\\\");\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        IUniswapV2Factory factory=IUniswapV2Factory(uniswapV2Router.factory());\\n        uniswapV2Pair = factory.getPair(address(this),uniswapV2Router.WETH());\\n        if(uniswapV2Pair==address(0x0)){\\n          uniswapV2Pair = factory.createPair(address(this), uniswapV2Router.WETH());\\n        }\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        swapEnabled = true;\\n        tradingOpen = true;\\n    }\\n\\n    receive() external payable {}\\n\\n    function isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function manualSwap() external {\\n        require(_msgSender()==_taxWallet);\\n        uint256 tokenBalance=balanceOf(address(this));\\n        if(tokenBalance>0){\\n          swapTokensForEth(tokenBalance);\\n        }\\n        uint256 ethBalance=address(this).balance;\\n        if(ethBalance>0){\\n          sendETHToFee(ethBalance);\\n        }\\n    }\\n\\n    \\n    function addBots(address[] memory bots_) public onlyOwner {\\n        for (uint i = 0; i < bots_.length; i++) {\\n            bots[bots_[i]] = true;\\n        }\\n    }\\n\\n    function delBots(address[] memory notbot) public onlyOwner {\\n      for (uint i = 0; i < notbot.length; i++) {\\n          bots[notbot[i]] = false;\\n      }\\n    }\\n    \\n    \\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}