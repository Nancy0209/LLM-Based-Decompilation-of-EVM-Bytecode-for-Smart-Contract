{
    "address": "0x561DeA92170f405c37fD183CAb08E41ea5d3DBEC",
    "tx_hash": "e9abf77226d9c81e73d2f46caf02d37c2d8902f88d7e5e24575475b6e0a318dc",
    "block_number": 18007269,
    "timestamp": 1693154663,
    "gas_used_in_creation": 1845719,
    "creation_bytecode": "60806040526007805460ff19169055600260088190556009818155600a828155600b929092555f600c819055600d8190556078600e55600f5562000043916200033b565b620000529062030d4062000352565b601055620000636009600a6200033b565b620000729062030d4062000352565b601155620000836009600a6200033b565b6200008f905f62000352565b601255620000a06009600a6200033b565b620000af9062030d4062000352565b6013556015805461ffff60a81b19169055348015620000cc575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060078054610100600160a81b0319166101003302179055620001326009600a6200033b565b62000141906298968062000352565b335f9081526001602081905260408220929092556003906200016a5f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556007546101009004909116835291208054909216179055620001cd3390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002066009600a6200033b565b62000215906298968062000352565b60405190815260200160405180910390a36200036c565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200028057815f19048211156200026457620002646200022c565b808516156200027257918102915b93841c939080029062000245565b509250929050565b5f82620002985750600162000335565b81620002a657505f62000335565b8160018114620002bf5760028114620002ca57620002ea565b600191505062000335565b60ff841115620002de57620002de6200022c565b50506001821b62000335565b5060208310610133831016604e8410600b84101617156200030f575081810a62000335565b6200031b838362000240565b805f19048211156200033157620003316200022c565b0290505b92915050565b5f6200034b60ff84168362000288565b9392505050565b80820281158282048414176200033557620003356200022c565b611aa1806200037a5f395ff3fe60806040526004361061011e575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb14610334578063bf474bed14610353578063c876d0b914610368578063c9567bf914610381578063dd62ed3e14610395575f80fd5b8063751039fc146102a05780637d1db4a5146102b45780638da5cb5b146102c95780638f9a55c0146102ef57806395d89b4114610304575f80fd5b8063313ce567116100e3578063313ce567146101f05780633bbac5791461020b57806351bc3c851461024257806370a0823114610258578063715018a61461028c575f80fd5b806306fdde0314610129578063095ea7b31461016b5780630faee56f1461019a57806318160ddd146101bd57806323b872dd146101d1575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b506040805180820190915260088152673832b832a1b7b4b760c11b60208201525b6040516101629190611694565b60405180910390f35b348015610176575f80fd5b5061018a6101853660046116f6565b6103d9565b6040519015158152602001610162565b3480156101a5575f80fd5b506101af60135481565b604051908152602001610162565b3480156101c8575f80fd5b506101af6103ef565b3480156101dc575f80fd5b5061018a6101eb366004611720565b61040e565b3480156101fb575f80fd5b5060405160098152602001610162565b348015610216575f80fd5b5061018a61022536600461175e565b6001600160a01b03165f9081526005602052604090205460ff1690565b34801561024d575f80fd5b50610256610475565b005b348015610263575f80fd5b506101af61027236600461175e565b6001600160a01b03165f9081526001602052604090205490565b348015610297575f80fd5b506102566104cb565b3480156102ab575f80fd5b50610256610545565b3480156102bf575f80fd5b506101af60105481565b3480156102d4575f80fd5b505f546040516001600160a01b039091168152602001610162565b3480156102fa575f80fd5b506101af60115481565b34801561030f575f80fd5b506040805180820190915260088152672822a822a1a7a4a760c11b6020820152610155565b34801561033f575f80fd5b5061018a61034e3660046116f6565b6105fd565b34801561035e575f80fd5b506101af60125481565b348015610373575f80fd5b5060075461018a9060ff1681565b34801561038c575f80fd5b50610256610609565b3480156103a0575f80fd5b506101af6103af366004611779565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103e5338484610acb565b5060015b92915050565b5f6103fc6009600a6118a4565b61040990629896806118b2565b905090565b5f61041a848484610bee565b61046b843361046685604051806060016040528060288152602001611a44602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906112f3565b610acb565b5060019392505050565b60075461010090046001600160a01b0316336001600160a01b031614610499575f80fd5b305f9081526001602052604090205480156104b7576104b78161132b565b4780156104c7576104c7816114b4565b5050565b5f546001600160a01b031633146104fd5760405162461bcd60e51b81526004016104f4906118c9565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b0316331461056e5760405162461bcd60e51b81526004016104f4906118c9565b61057a6009600a6118a4565b61058790629896806118b2565b6010556105966009600a6118a4565b6105a390629896806118b2565b6011556007805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105dd6009600a6118a4565b6105ea90629896806118b2565b60405190815260200160405180910390a1565b5f6103e5338484610bee565b5f546001600160a01b031633146106325760405162461bcd60e51b81526004016104f4906118c9565b601554600160a01b900460ff161561068c5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104f4565b601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106d49030906106c76009600a6118a4565b61046690629896806118b2565b6014546040805163c45a015560e01b815290515f926001600160a01b03169163c45a01559160048083019260209291908290030181865afa15801561071b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061073f91906118fe565b9050806001600160a01b031663e6a439053060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107c591906118fe565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa15801561080e573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061083291906118fe565b601580546001600160a01b0319166001600160a01b0392909216918217905561096857806001600160a01b031663c9c653963060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108d991906118fe565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610923573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061094791906118fe565b601580546001600160a01b0319166001600160a01b03929092169190911790555b6014546001600160a01b031663f305d7194730610999816001600160a01b03165f9081526001602052604090205490565b5f806109ac5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610a12573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610a379190611919565b505060155460145460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610a8c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ab09190611944565b50506015805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b038316610b2d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104f4565b6001600160a01b038216610b8e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104f4565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610c525760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104f4565b6001600160a01b038216610cb45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104f4565b5f8111610d155760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104f4565b5f80546001600160a01b03858116911614801590610d4057505f546001600160a01b03848116911614155b156111b6576001600160a01b0384165f9081526005602052604090205460ff16158015610d8557506001600160a01b0383165f9081526005602052604090205460ff16155b610d8d575f80fd5b610dc06064610dba601560149054906101000a900460ff16610db157600854610db3565b5f5b85906114ef565b90611574565b60075490915060ff1615610e7a576014546001600160a01b03848116911614801590610dfa57506015546001600160a01b03848116911614155b15610e7a57325f908152600660205260409020544311610e685760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b60648201526084016104f4565b325f9081526006602052604090204390555b6015546001600160a01b038581169116148015610ea557506014546001600160a01b03848116911614155b8015610ec957506001600160a01b0383165f9081526003602052604090205460ff16155b1561100e57601054821115610f1c5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104f4565b60115482610f3e856001600160a01b03165f9081526001602052604090205490565b610f489190611963565b1115610f965760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104f4565b600e54600f541015610fad57823b15610fad575f80fd5b600f8054905f610fbc83611976565b90915550506001600160a01b0383165f908152600460205260409020805460ff19166001179055600c54600f5461100b91606491610dba911061100157600854610db3565b600a5485906114ef565b90505b6015546001600160a01b03848116911614801561103457506001600160a01b0384163014155b15611119576010548211156110875760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104f4565b6110ac6064610dba600d54600f54116110a257600954610db3565b600b5485906114ef565b9050600e54600f5411806110d757506001600160a01b0384165f9081526004602052604090205460ff165b6111195760405162461bcd60e51b815260206004820152601360248201527229b2b63632b91034b9903737ba10313abcb2b960691b60448201526064016104f4565b305f90815260016020526040902054601554600160a81b900460ff1615801561114f57506015546001600160a01b038581169116145b80156111645750601554600160b01b900460ff165b8015611171575060125481115b80156111805750600e54600f54115b156111b4576111a261119d84611198846013546115b5565b6115b5565b61132b565b4780156111b2576111b2476114b4565b505b505b801561122e57305f908152600160205260409020546111d590826115c9565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906112259085815260200190565b60405180910390a35b6001600160a01b0384165f908152600160205260409020546112509083611627565b6001600160a01b0385165f908152600160205260409020556112936112758383611627565b6001600160a01b0385165f90815260016020526040902054906115c9565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6112dc8585611627565b60405190815260200160405180910390a350505050565b5f81848411156113165760405162461bcd60e51b81526004016104f49190611694565b505f611322848661198e565b95945050505050565b6015805460ff60a81b1916600160a81b17905580156114a457601554600160a01b900460ff16156114a4576040805160028082526060820183525f9260208301908036833701905050905030815f81518110611389576113896119a1565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156113e0573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061140491906118fe565b81600181518110611417576114176119a1565b6001600160a01b03928316602091820292909201015260145461143d9130911684610acb565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac947906114759085905f908690309042906004016119b5565b5f604051808303815f87803b15801561148c575f80fd5b505af115801561149e573d5f803e3d5ffd5b50505050505b506015805460ff60a81b19169055565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104c7573d5f803e3d5ffd5b5f825f036114fe57505f6103e9565b5f61150983856118b2565b9050826115168583611a24565b1461156d5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104f4565b9392505050565b5f61156d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611668565b5f8183116115c3578261156d565b50919050565b5f806115d58385611963565b90508381101561156d5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104f4565b5f61156d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112f3565b5f81836116885760405162461bcd60e51b81526004016104f49190611694565b505f6113228486611a24565b5f6020808352835180828501525f5b818110156116bf578581018301518582016040015282016116a3565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146116f3575f80fd5b50565b5f8060408385031215611707575f80fd5b8235611712816116df565b946020939093013593505050565b5f805f60608486031215611732575f80fd5b833561173d816116df565b9250602084013561174d816116df565b929592945050506040919091013590565b5f6020828403121561176e575f80fd5b813561156d816116df565b5f806040838503121561178a575f80fd5b8235611795816116df565b915060208301356117a5816116df565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156117fe57815f19048211156117e4576117e46117b0565b808516156117f157918102915b93841c93908002906117c9565b509250929050565b5f82611814575060016103e9565b8161182057505f6103e9565b816001811461183657600281146118405761185c565b60019150506103e9565b60ff841115611851576118516117b0565b50506001821b6103e9565b5060208310610133831016604e8410600b841016171561187f575081810a6103e9565b61188983836117c4565b805f190482111561189c5761189c6117b0565b029392505050565b5f61156d60ff841683611806565b80820281158282048414176103e9576103e96117b0565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f6020828403121561190e575f80fd5b815161156d816116df565b5f805f6060848603121561192b575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611954575f80fd5b8151801515811461156d575f80fd5b808201808211156103e9576103e96117b0565b5f60018201611987576119876117b0565b5060010190565b818103818111156103e9576103e96117b0565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015611a035784516001600160a01b0316835293830193918301916001016119de565b50506001600160a01b03969096166060850152505050608001529392505050565b5f82611a3e57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212205550d7e098f4a28f34519ef197df5caefac58c7d5ce1714cc2e92ec69fb1e54f64736f6c63430008140033",
    "runtime_bytecode": "60806040526004361061011e575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb14610334578063bf474bed14610353578063c876d0b914610368578063c9567bf914610381578063dd62ed3e14610395575f80fd5b8063751039fc146102a05780637d1db4a5146102b45780638da5cb5b146102c95780638f9a55c0146102ef57806395d89b4114610304575f80fd5b8063313ce567116100e3578063313ce567146101f05780633bbac5791461020b57806351bc3c851461024257806370a0823114610258578063715018a61461028c575f80fd5b806306fdde0314610129578063095ea7b31461016b5780630faee56f1461019a57806318160ddd146101bd57806323b872dd146101d1575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b506040805180820190915260088152673832b832a1b7b4b760c11b60208201525b6040516101629190611694565b60405180910390f35b348015610176575f80fd5b5061018a6101853660046116f6565b6103d9565b6040519015158152602001610162565b3480156101a5575f80fd5b506101af60135481565b604051908152602001610162565b3480156101c8575f80fd5b506101af6103ef565b3480156101dc575f80fd5b5061018a6101eb366004611720565b61040e565b3480156101fb575f80fd5b5060405160098152602001610162565b348015610216575f80fd5b5061018a61022536600461175e565b6001600160a01b03165f9081526005602052604090205460ff1690565b34801561024d575f80fd5b50610256610475565b005b348015610263575f80fd5b506101af61027236600461175e565b6001600160a01b03165f9081526001602052604090205490565b348015610297575f80fd5b506102566104cb565b3480156102ab575f80fd5b50610256610545565b3480156102bf575f80fd5b506101af60105481565b3480156102d4575f80fd5b505f546040516001600160a01b039091168152602001610162565b3480156102fa575f80fd5b506101af60115481565b34801561030f575f80fd5b506040805180820190915260088152672822a822a1a7a4a760c11b6020820152610155565b34801561033f575f80fd5b5061018a61034e3660046116f6565b6105fd565b34801561035e575f80fd5b506101af60125481565b348015610373575f80fd5b5060075461018a9060ff1681565b34801561038c575f80fd5b50610256610609565b3480156103a0575f80fd5b506101af6103af366004611779565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103e5338484610acb565b5060015b92915050565b5f6103fc6009600a6118a4565b61040990629896806118b2565b905090565b5f61041a848484610bee565b61046b843361046685604051806060016040528060288152602001611a44602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906112f3565b610acb565b5060019392505050565b60075461010090046001600160a01b0316336001600160a01b031614610499575f80fd5b305f9081526001602052604090205480156104b7576104b78161132b565b4780156104c7576104c7816114b4565b5050565b5f546001600160a01b031633146104fd5760405162461bcd60e51b81526004016104f4906118c9565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b0316331461056e5760405162461bcd60e51b81526004016104f4906118c9565b61057a6009600a6118a4565b61058790629896806118b2565b6010556105966009600a6118a4565b6105a390629896806118b2565b6011556007805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105dd6009600a6118a4565b6105ea90629896806118b2565b60405190815260200160405180910390a1565b5f6103e5338484610bee565b5f546001600160a01b031633146106325760405162461bcd60e51b81526004016104f4906118c9565b601554600160a01b900460ff161561068c5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104f4565b601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106d49030906106c76009600a6118a4565b61046690629896806118b2565b6014546040805163c45a015560e01b815290515f926001600160a01b03169163c45a01559160048083019260209291908290030181865afa15801561071b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061073f91906118fe565b9050806001600160a01b031663e6a439053060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107c591906118fe565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa15801561080e573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061083291906118fe565b601580546001600160a01b0319166001600160a01b0392909216918217905561096857806001600160a01b031663c9c653963060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108d991906118fe565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610923573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061094791906118fe565b601580546001600160a01b0319166001600160a01b03929092169190911790555b6014546001600160a01b031663f305d7194730610999816001600160a01b03165f9081526001602052604090205490565b5f806109ac5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610a12573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610a379190611919565b505060155460145460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610a8c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ab09190611944565b50506015805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b038316610b2d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104f4565b6001600160a01b038216610b8e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104f4565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610c525760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104f4565b6001600160a01b038216610cb45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104f4565b5f8111610d155760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104f4565b5f80546001600160a01b03858116911614801590610d4057505f546001600160a01b03848116911614155b156111b6576001600160a01b0384165f9081526005602052604090205460ff16158015610d8557506001600160a01b0383165f9081526005602052604090205460ff16155b610d8d575f80fd5b610dc06064610dba601560149054906101000a900460ff16610db157600854610db3565b5f5b85906114ef565b90611574565b60075490915060ff1615610e7a576014546001600160a01b03848116911614801590610dfa57506015546001600160a01b03848116911614155b15610e7a57325f908152600660205260409020544311610e685760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b60648201526084016104f4565b325f9081526006602052604090204390555b6015546001600160a01b038581169116148015610ea557506014546001600160a01b03848116911614155b8015610ec957506001600160a01b0383165f9081526003602052604090205460ff16155b1561100e57601054821115610f1c5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104f4565b60115482610f3e856001600160a01b03165f9081526001602052604090205490565b610f489190611963565b1115610f965760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104f4565b600e54600f541015610fad57823b15610fad575f80fd5b600f8054905f610fbc83611976565b90915550506001600160a01b0383165f908152600460205260409020805460ff19166001179055600c54600f5461100b91606491610dba911061100157600854610db3565b600a5485906114ef565b90505b6015546001600160a01b03848116911614801561103457506001600160a01b0384163014155b15611119576010548211156110875760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104f4565b6110ac6064610dba600d54600f54116110a257600954610db3565b600b5485906114ef565b9050600e54600f5411806110d757506001600160a01b0384165f9081526004602052604090205460ff165b6111195760405162461bcd60e51b815260206004820152601360248201527229b2b63632b91034b9903737ba10313abcb2b960691b60448201526064016104f4565b305f90815260016020526040902054601554600160a81b900460ff1615801561114f57506015546001600160a01b038581169116145b80156111645750601554600160b01b900460ff165b8015611171575060125481115b80156111805750600e54600f54115b156111b4576111a261119d84611198846013546115b5565b6115b5565b61132b565b4780156111b2576111b2476114b4565b505b505b801561122e57305f908152600160205260409020546111d590826115c9565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906112259085815260200190565b60405180910390a35b6001600160a01b0384165f908152600160205260409020546112509083611627565b6001600160a01b0385165f908152600160205260409020556112936112758383611627565b6001600160a01b0385165f90815260016020526040902054906115c9565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6112dc8585611627565b60405190815260200160405180910390a350505050565b5f81848411156113165760405162461bcd60e51b81526004016104f49190611694565b505f611322848661198e565b95945050505050565b6015805460ff60a81b1916600160a81b17905580156114a457601554600160a01b900460ff16156114a4576040805160028082526060820183525f9260208301908036833701905050905030815f81518110611389576113896119a1565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156113e0573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061140491906118fe565b81600181518110611417576114176119a1565b6001600160a01b03928316602091820292909201015260145461143d9130911684610acb565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac947906114759085905f908690309042906004016119b5565b5f604051808303815f87803b15801561148c575f80fd5b505af115801561149e573d5f803e3d5ffd5b50505050505b506015805460ff60a81b19169055565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104c7573d5f803e3d5ffd5b5f825f036114fe57505f6103e9565b5f61150983856118b2565b9050826115168583611a24565b1461156d5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104f4565b9392505050565b5f61156d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611668565b5f8183116115c3578261156d565b50919050565b5f806115d58385611963565b90508381101561156d5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104f4565b5f61156d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112f3565b5f81836116885760405162461bcd60e51b81526004016104f49190611694565b505f6113228486611a24565b5f6020808352835180828501525f5b818110156116bf578581018301518582016040015282016116a3565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146116f3575f80fd5b50565b5f8060408385031215611707575f80fd5b8235611712816116df565b946020939093013593505050565b5f805f60608486031215611732575f80fd5b833561173d816116df565b9250602084013561174d816116df565b929592945050506040919091013590565b5f6020828403121561176e575f80fd5b813561156d816116df565b5f806040838503121561178a575f80fd5b8235611795816116df565b915060208301356117a5816116df565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156117fe57815f19048211156117e4576117e46117b0565b808516156117f157918102915b93841c93908002906117c9565b509250929050565b5f82611814575060016103e9565b8161182057505f6103e9565b816001811461183657600281146118405761185c565b60019150506103e9565b60ff841115611851576118516117b0565b50506001821b6103e9565b5060208310610133831016604e8410600b841016171561187f575081810a6103e9565b61188983836117c4565b805f190482111561189c5761189c6117b0565b029392505050565b5f61156d60ff841683611806565b80820281158282048414176103e9576103e96117b0565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f6020828403121561190e575f80fd5b815161156d816116df565b5f805f6060848603121561192b575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611954575f80fd5b8151801515811461156d575f80fd5b808201808211156103e9576103e96117b0565b5f60018201611987576119876117b0565b5060010190565b818103818111156103e9576103e96117b0565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015611a035784516001600160a01b0316835293830193918301916001016119de565b50506001600160a01b03969096166060850152505050608001529392505050565b5f82611a3e57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212205550d7e098f4a28f34519ef197df5caefac58c7d5ce1714cc2e92ec69fb1e54f64736f6c63430008140033",
    "contract_name": "pepecoineth",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"main\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n\\nThe internet's favorite frog becomes a symbol of crypto empowerment and memetic fun.\\n\\n\\nTokenomics:\\n\\nTotal Supply - 1 000 000 \\nMax Tx & Max Wallet - 2% \\nTaxes - 2% [Buy & Sell] \\nOwnership renounced\\n\\n\\nTelegram: Https://t.me/ThePepeCoinPortal\\n\\nWebsite: http://www.pepecoinerc.xyz/\\n\\n**/\\npragma solidity 0.8.20;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ncontract pepecoineth is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _isExcludedFromFee;\\n    mapping (address => bool) private _buyerMap;\\n    mapping (address => bool) private bots;\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\n    bool public transferDelayEnabled = false;\\n    address payable private _taxWallet;\\n\\n    uint256 private _initialBuyTax=2;\\n    uint256 private _initialSellTax=2;\\n    uint256 private _finalBuyTax=2;\\n    uint256 private _finalSellTax=2;\\n    uint256 private _reduceBuyTaxAt=0;\\n    uint256 private _reduceSellTaxAt=0;\\n    uint256 private _preventSwapBefore=120;\\n    uint256 private _buyCount=0;\\n\\n    uint8 private constant _decimals = 9;\\n    uint256 private constant _tTotal = 10000000 * 10**_decimals;\\n    string private constant _name = unicode\\\"pepeCoin\\\";\\n    string private constant _symbol = unicode\\\"PEPECOIN\\\";\\n    uint256 public _maxTxAmount =   200000 * 10**_decimals;\\n    uint256 public _maxWalletSize = 200000 * 10**_decimals;\\n    uint256 public _taxSwapThreshold=0 * 10**_decimals;\\n    uint256 public _maxTaxSwap=200000 * 10**_decimals;\\n\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address private uniswapV2Pair;\\n    bool private tradingOpen;\\n    bool private inSwap = false;\\n    bool private swapEnabled = false;\\n\\n    event MaxTxAmountUpdated(uint _maxTxAmount);\\n    modifier lockTheSwap {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor () {\\n        _taxWallet = payable(_msgSender());\\n        _balances[_msgSender()] = _tTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_taxWallet] = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        uint256 taxAmount=0;\\n        if (from != owner() && to != owner()) {\\n            require(!bots[from] && !bots[to]);\\n            taxAmount=amount.mul((tradingOpen)?0:_initialBuyTax).div(100);\\n            if (transferDelayEnabled) {\\n              if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\\n                require(_holderLastTransferTimestamp[tx.origin] < block.number,\\\"Only one transfer per block allowed.\\\");\\n                _holderLastTransferTimestamp[tx.origin] = block.number;\\n              }\\n            }\\n\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\n                if(_buyCount<_preventSwapBefore){\\n                  require(!isContract(to));\\n                }\\n                _buyCount++;\\n                _buyerMap[to]=true;\\n                taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\\n            }\\n\\n            if(to == uniswapV2Pair && from!= address(this) ){\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\\n                require(_buyCount>_preventSwapBefore || _buyerMap[from],\\\"Seller is not buyer\\\");\\n            }\\n\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\\n                uint256 contractETHBalance = address(this).balance;\\n                if(contractETHBalance > 0) {\\n                    sendETHToFee(address(this).balance);\\n                }\\n            }\\n        }\\n\\n        if(taxAmount>0){\\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\\n          emit Transfer(from, address(this),taxAmount);\\n        }\\n        _balances[from]=_balances[from].sub(amount);\\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\\n        emit Transfer(from, to, amount.sub(taxAmount));\\n    }\\n\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256){\\n      return (a>b)?b:a;\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        if(tokenAmount==0){return;}\\n        if(!tradingOpen){return;}\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function removeLimits() external onlyOwner{\\n        _maxTxAmount = _tTotal;\\n        _maxWalletSize=_tTotal;\\n        transferDelayEnabled=false;\\n        emit MaxTxAmountUpdated(_tTotal);\\n    }\\n\\n    function sendETHToFee(uint256 amount) private {\\n        _taxWallet.transfer(amount);\\n    }\\n\\n    function isBot(address a) public view returns (bool){\\n      return bots[a];\\n    }\\n\\n    function openTrading() external onlyOwner() {\\n        require(!tradingOpen,\\\"trading is already open\\\");\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        IUniswapV2Factory factory=IUniswapV2Factory(uniswapV2Router.factory());\\n        uniswapV2Pair = factory.getPair(address(this),uniswapV2Router.WETH());\\n        if(uniswapV2Pair==address(0x0)){\\n          uniswapV2Pair = factory.createPair(address(this), uniswapV2Router.WETH());\\n        }\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        swapEnabled = true;\\n        tradingOpen = true;\\n    }\\n\\n    receive() external payable {}\\n\\n    function isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function manualSwap() external {\\n        require(_msgSender()==_taxWallet);\\n        uint256 tokenBalance=balanceOf(address(this));\\n        if(tokenBalance>0){\\n          swapTokensForEth(tokenBalance);\\n        }\\n        uint256 ethBalance=address(this).balance;\\n        if(ethBalance>0){\\n          sendETHToFee(ethBalance);\\n        }\\n    }\\n\\n    \\n    \\n    \\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}