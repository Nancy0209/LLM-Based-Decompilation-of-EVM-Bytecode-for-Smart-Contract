{
    "address": "0xa037974C7653cB0ffdA7332E6E96c0C691eBE1F7",
    "tx_hash": "c41d6de1cfe495b540ebf877d1ada783d602f3f40501ad3d2809da020b4a70ce",
    "block_number": 18007181,
    "timestamp": 1693153607,
    "gas_used_in_creation": 1830221,
    "creation_bytecode": "60806040526006805460ff1916905560156007556019600890815560016009819055600a908155600f600b819055600c819055600d555f600e5562000045919062000348565b6200005590633b9aca006200035f565b600f55620000666008600a62000348565b620000769063773594006200035f565b601055620000876008600a62000348565b62000097906305f5e1006200035f565b601155620000a86008600a62000348565b620000b890633b9aca006200035f565b6012556014805461ffff60a81b19169055348015620000d5575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060068054610100600160a81b03191661010033021790556200013b6008600a62000348565b6200014c9064174876e8006200035f565b335f908152600160208190526040822092909255600390620001755f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556006546101009004909116835291208054909216179055620001d83390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002116008600a62000348565b620002229064174876e8006200035f565b60405190815260200160405180910390a362000379565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200028d57815f190482111562000271576200027162000239565b808516156200027f57918102915b93841c939080029062000252565b509250929050565b5f82620002a55750600162000342565b81620002b357505f62000342565b8160018114620002cc5760028114620002d757620002f7565b600191505062000342565b60ff841115620002eb57620002eb62000239565b50506001821b62000342565b5060208310610133831016604e8410600b84101617156200031c575081810a62000342565b6200032883836200024d565b805f19048211156200033e576200033e62000239565b0290505b92915050565b5f6200035860ff84168362000295565b9392505050565b808202811582820484141762000342576200034262000239565b61194580620003875f395ff3fe608060405260043610610129575f3560e01c8063715018a6116100a857806395d89b411161006d57806395d89b411461032f578063a9059cbb1461035b578063bf474bed1461037a578063c876d0b91461038f578063c9567bf9146103a8578063dd62ed3e146103bc575f80fd5b8063715018a6146102b7578063751039fc146102cb5780637d1db4a5146102df5780638da5cb5b146102f45780638f9a55c01461031a575f80fd5b8063313ce567116100ee578063313ce567146101fc5780633bbac579146102175780633f532c0c1461024e57806351bc3c851461026f57806370a0823114610283575f80fd5b806306fdde0314610134578063095ea7b3146101775780630faee56f146101a657806318160ddd146101c957806323b872dd146101dd575f80fd5b3661013057005b5f80fd5b34801561013f575f80fd5b506040805180820190915260098152682733b6b49021b7b4b760b91b60208201525b60405161016e9190611521565b60405180910390f35b348015610182575f80fd5b50610196610191366004611583565b610400565b604051901515815260200161016e565b3480156101b1575f80fd5b506101bb60125481565b60405190815260200161016e565b3480156101d4575f80fd5b506101bb610416565b3480156101e8575f80fd5b506101966101f73660046115ad565b610437565b348015610207575f80fd5b506040516008815260200161016e565b348015610222575f80fd5b506101966102313660046115eb565b6001600160a01b03165f9081526004602052604090205460ff1690565b348015610259575f80fd5b5061026d610268366004611606565b61049e565b005b34801561027a575f80fd5b5061026d6104da565b34801561028e575f80fd5b506101bb61029d3660046115eb565b6001600160a01b03165f9081526001602052604090205490565b3480156102c2575f80fd5b5061026d610530565b3480156102d6575f80fd5b5061026d6105a1565b3480156102ea575f80fd5b506101bb600f5481565b3480156102ff575f80fd5b505f546040516001600160a01b03909116815260200161016e565b348015610325575f80fd5b506101bb60105481565b34801561033a575f80fd5b506040805180820190915260048152634e474d4960e01b6020820152610161565b348015610366575f80fd5b50610196610375366004611583565b61065f565b348015610385575f80fd5b506101bb60115481565b34801561039a575f80fd5b506006546101969060ff1681565b3480156103b3575f80fd5b5061026d61066b565b3480156103c7575f80fd5b506101bb6103d636600461161d565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f61040c338484610a15565b5060015b92915050565b5f6104236008600a611748565b6104329064174876e800611756565b905090565b5f610443848484610b38565b610494843361048f856040518060600160405280602881526020016118e8602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611180565b610a15565b5060019392505050565b5f546001600160a01b031633146104d05760405162461bcd60e51b81526004016104c79061176d565b60405180910390fd5b6008819055600a55565b60065461010090046001600160a01b0316336001600160a01b0316146104fe575f80fd5b305f90815260016020526040902054801561051c5761051c816111b8565b47801561052c5761052c81611341565b5050565b5f546001600160a01b031633146105595760405162461bcd60e51b81526004016104c79061176d565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105ca5760405162461bcd60e51b81526004016104c79061176d565b6105d66008600a611748565b6105e59064174876e800611756565b600f556105f46008600a611748565b6106039064174876e800611756565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf61063d6008600a611748565b61064c9064174876e800611756565b60405190815260200160405180910390a1565b5f61040c338484610b38565b5f546001600160a01b031633146106945760405162461bcd60e51b81526004016104c79061176d565b601454600160a01b900460ff16156106ee5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104c7565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556107389030906107296008600a611748565b61048f9064174876e800611756565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610788573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107ac91906117a2565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061082f91906117a2565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610879573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061089d91906117a2565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d71947306108e4816001600160a01b03165f9081526001602052604090205490565b5f806108f75f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561095d573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061098291906117bd565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156109d7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109fb91906117e8565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b038316610a775760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104c7565b6001600160a01b038216610ad85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104c7565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b9c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104c7565b6001600160a01b038216610bfe5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104c7565b5f8111610c5f5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104c7565b5f80546001600160a01b03858116911614801590610c8a57505f546001600160a01b03848116911614155b15611043576001600160a01b0384165f9081526004602052604090205460ff16158015610ccf57506001600160a01b0383165f9081526004602052604090205460ff16155b610cd7575f80fd5b60065460ff1615610d8e576013546001600160a01b03848116911614801590610d0e57506014546001600160a01b03848116911614155b15610d8e57325f908152600560205260409020544311610d7c5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b60648201526084016104c7565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610db957506013546001600160a01b03848116911614155b8015610ddd57506001600160a01b0383165f9081526003602052604090205460ff16155b15610ed657600f54821115610e305760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104c7565b60105482610e52856001600160a01b03165f9081526001602052604090205490565b610e5c9190611807565b1115610eaa5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104c7565b600d54600e541015610ec157823b15610ec1575f80fd5b600e8054905f610ed08361181a565b91905055505b610f026064610efc600b54600e5411610ef157600754610ef5565b6009545b859061137c565b90611401565b6014549091506001600160a01b038481169116148015610f2b57506001600160a01b0384163014155b15610fa657600f54821115610f7e5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104c7565b610fa36064610efc600c54600e5411610f9957600854610ef5565b600a54859061137c565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610fdc57506014546001600160a01b038581169116145b8015610ff15750601454600160b01b900460ff165b8015610ffe575060115481115b801561100d5750600d54600e54115b156110415761102f61102a8461102584601254611442565b611442565b6111b8565b47801561103f5761103f47611341565b505b505b80156110bb57305f908152600160205260409020546110629082611456565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110b29085815260200190565b60405180910390a35b6001600160a01b0384165f908152600160205260409020546110dd90836114b4565b6001600160a01b0385165f9081526001602052604090205561112061110283836114b4565b6001600160a01b0385165f9081526001602052604090205490611456565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61116985856114b4565b60405190815260200160405180910390a350505050565b5f81848411156111a35760405162461bcd60e51b81526004016104c79190611521565b505f6111af8486611832565b95945050505050565b6014805460ff60a81b1916600160a81b179055801561133157601454600160a01b900460ff1615611331576040805160028082526060820183525f9260208301908036833701905050905030815f8151811061121657611216611845565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561126d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061129191906117a2565b816001815181106112a4576112a4611845565b6001600160a01b0392831660209182029290920101526013546112ca9130911684610a15565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906113029085905f90869030904290600401611859565b5f604051808303815f87803b158015611319575f80fd5b505af115801561132b573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f1935050505015801561052c573d5f803e3d5ffd5b5f825f0361138b57505f610410565b5f6113968385611756565b9050826113a385836118c8565b146113fa5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104c7565b9392505050565b5f6113fa83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114f5565b5f81831161145057826113fa565b50919050565b5f806114628385611807565b9050838110156113fa5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104c7565b5f6113fa83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611180565b5f81836115155760405162461bcd60e51b81526004016104c79190611521565b505f6111af84866118c8565b5f6020808352835180828501525f5b8181101561154c57858101830151858201604001528201611530565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611580575f80fd5b50565b5f8060408385031215611594575f80fd5b823561159f8161156c565b946020939093013593505050565b5f805f606084860312156115bf575f80fd5b83356115ca8161156c565b925060208401356115da8161156c565b929592945050506040919091013590565b5f602082840312156115fb575f80fd5b81356113fa8161156c565b5f60208284031215611616575f80fd5b5035919050565b5f806040838503121561162e575f80fd5b82356116398161156c565b915060208301356116498161156c565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156116a257815f190482111561168857611688611654565b8085161561169557918102915b93841c939080029061166d565b509250929050565b5f826116b857506001610410565b816116c457505f610410565b81600181146116da57600281146116e457611700565b6001915050610410565b60ff8411156116f5576116f5611654565b50506001821b610410565b5060208310610133831016604e8410600b8410161715611723575081810a610410565b61172d8383611668565b805f190482111561174057611740611654565b029392505050565b5f6113fa60ff8416836116aa565b808202811582820484141761041057610410611654565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156117b2575f80fd5b81516113fa8161156c565b5f805f606084860312156117cf575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156117f8575f80fd5b815180151581146113fa575f80fd5b8082018082111561041057610410611654565b5f6001820161182b5761182b611654565b5060010190565b8181038181111561041057610410611654565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118a75784516001600160a01b031683529383019391830191600101611882565b50506001600160a01b03969096166060850152505050608001529392505050565b5f826118e257634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220ca5be229ac6839625f5f53bafe23ea9d2fe6110fcec9b9ab5a1fedb8929a377e64736f6c63430008140033",
    "runtime_bytecode": "608060405260043610610129575f3560e01c8063715018a6116100a857806395d89b411161006d57806395d89b411461032f578063a9059cbb1461035b578063bf474bed1461037a578063c876d0b91461038f578063c9567bf9146103a8578063dd62ed3e146103bc575f80fd5b8063715018a6146102b7578063751039fc146102cb5780637d1db4a5146102df5780638da5cb5b146102f45780638f9a55c01461031a575f80fd5b8063313ce567116100ee578063313ce567146101fc5780633bbac579146102175780633f532c0c1461024e57806351bc3c851461026f57806370a0823114610283575f80fd5b806306fdde0314610134578063095ea7b3146101775780630faee56f146101a657806318160ddd146101c957806323b872dd146101dd575f80fd5b3661013057005b5f80fd5b34801561013f575f80fd5b506040805180820190915260098152682733b6b49021b7b4b760b91b60208201525b60405161016e9190611521565b60405180910390f35b348015610182575f80fd5b50610196610191366004611583565b610400565b604051901515815260200161016e565b3480156101b1575f80fd5b506101bb60125481565b60405190815260200161016e565b3480156101d4575f80fd5b506101bb610416565b3480156101e8575f80fd5b506101966101f73660046115ad565b610437565b348015610207575f80fd5b506040516008815260200161016e565b348015610222575f80fd5b506101966102313660046115eb565b6001600160a01b03165f9081526004602052604090205460ff1690565b348015610259575f80fd5b5061026d610268366004611606565b61049e565b005b34801561027a575f80fd5b5061026d6104da565b34801561028e575f80fd5b506101bb61029d3660046115eb565b6001600160a01b03165f9081526001602052604090205490565b3480156102c2575f80fd5b5061026d610530565b3480156102d6575f80fd5b5061026d6105a1565b3480156102ea575f80fd5b506101bb600f5481565b3480156102ff575f80fd5b505f546040516001600160a01b03909116815260200161016e565b348015610325575f80fd5b506101bb60105481565b34801561033a575f80fd5b506040805180820190915260048152634e474d4960e01b6020820152610161565b348015610366575f80fd5b50610196610375366004611583565b61065f565b348015610385575f80fd5b506101bb60115481565b34801561039a575f80fd5b506006546101969060ff1681565b3480156103b3575f80fd5b5061026d61066b565b3480156103c7575f80fd5b506101bb6103d636600461161d565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f61040c338484610a15565b5060015b92915050565b5f6104236008600a611748565b6104329064174876e800611756565b905090565b5f610443848484610b38565b610494843361048f856040518060600160405280602881526020016118e8602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611180565b610a15565b5060019392505050565b5f546001600160a01b031633146104d05760405162461bcd60e51b81526004016104c79061176d565b60405180910390fd5b6008819055600a55565b60065461010090046001600160a01b0316336001600160a01b0316146104fe575f80fd5b305f90815260016020526040902054801561051c5761051c816111b8565b47801561052c5761052c81611341565b5050565b5f546001600160a01b031633146105595760405162461bcd60e51b81526004016104c79061176d565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105ca5760405162461bcd60e51b81526004016104c79061176d565b6105d66008600a611748565b6105e59064174876e800611756565b600f556105f46008600a611748565b6106039064174876e800611756565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf61063d6008600a611748565b61064c9064174876e800611756565b60405190815260200160405180910390a1565b5f61040c338484610b38565b5f546001600160a01b031633146106945760405162461bcd60e51b81526004016104c79061176d565b601454600160a01b900460ff16156106ee5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104c7565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556107389030906107296008600a611748565b61048f9064174876e800611756565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610788573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107ac91906117a2565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061082f91906117a2565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610879573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061089d91906117a2565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d71947306108e4816001600160a01b03165f9081526001602052604090205490565b5f806108f75f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561095d573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061098291906117bd565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156109d7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109fb91906117e8565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b038316610a775760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104c7565b6001600160a01b038216610ad85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104c7565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b9c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104c7565b6001600160a01b038216610bfe5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104c7565b5f8111610c5f5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104c7565b5f80546001600160a01b03858116911614801590610c8a57505f546001600160a01b03848116911614155b15611043576001600160a01b0384165f9081526004602052604090205460ff16158015610ccf57506001600160a01b0383165f9081526004602052604090205460ff16155b610cd7575f80fd5b60065460ff1615610d8e576013546001600160a01b03848116911614801590610d0e57506014546001600160a01b03848116911614155b15610d8e57325f908152600560205260409020544311610d7c5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b60648201526084016104c7565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610db957506013546001600160a01b03848116911614155b8015610ddd57506001600160a01b0383165f9081526003602052604090205460ff16155b15610ed657600f54821115610e305760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104c7565b60105482610e52856001600160a01b03165f9081526001602052604090205490565b610e5c9190611807565b1115610eaa5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104c7565b600d54600e541015610ec157823b15610ec1575f80fd5b600e8054905f610ed08361181a565b91905055505b610f026064610efc600b54600e5411610ef157600754610ef5565b6009545b859061137c565b90611401565b6014549091506001600160a01b038481169116148015610f2b57506001600160a01b0384163014155b15610fa657600f54821115610f7e5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104c7565b610fa36064610efc600c54600e5411610f9957600854610ef5565b600a54859061137c565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610fdc57506014546001600160a01b038581169116145b8015610ff15750601454600160b01b900460ff165b8015610ffe575060115481115b801561100d5750600d54600e54115b156110415761102f61102a8461102584601254611442565b611442565b6111b8565b47801561103f5761103f47611341565b505b505b80156110bb57305f908152600160205260409020546110629082611456565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110b29085815260200190565b60405180910390a35b6001600160a01b0384165f908152600160205260409020546110dd90836114b4565b6001600160a01b0385165f9081526001602052604090205561112061110283836114b4565b6001600160a01b0385165f9081526001602052604090205490611456565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61116985856114b4565b60405190815260200160405180910390a350505050565b5f81848411156111a35760405162461bcd60e51b81526004016104c79190611521565b505f6111af8486611832565b95945050505050565b6014805460ff60a81b1916600160a81b179055801561133157601454600160a01b900460ff1615611331576040805160028082526060820183525f9260208301908036833701905050905030815f8151811061121657611216611845565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561126d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061129191906117a2565b816001815181106112a4576112a4611845565b6001600160a01b0392831660209182029290920101526013546112ca9130911684610a15565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906113029085905f90869030904290600401611859565b5f604051808303815f87803b158015611319575f80fd5b505af115801561132b573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f1935050505015801561052c573d5f803e3d5ffd5b5f825f0361138b57505f610410565b5f6113968385611756565b9050826113a385836118c8565b146113fa5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104c7565b9392505050565b5f6113fa83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114f5565b5f81831161145057826113fa565b50919050565b5f806114628385611807565b9050838110156113fa5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104c7565b5f6113fa83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611180565b5f81836115155760405162461bcd60e51b81526004016104c79190611521565b505f6111af84866118c8565b5f6020808352835180828501525f5b8181101561154c57858101830151858201604001528201611530565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611580575f80fd5b50565b5f8060408385031215611594575f80fd5b823561159f8161156c565b946020939093013593505050565b5f805f606084860312156115bf575f80fd5b83356115ca8161156c565b925060208401356115da8161156c565b929592945050506040919091013590565b5f602082840312156115fb575f80fd5b81356113fa8161156c565b5f60208284031215611616575f80fd5b5035919050565b5f806040838503121561162e575f80fd5b82356116398161156c565b915060208301356116498161156c565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156116a257815f190482111561168857611688611654565b8085161561169557918102915b93841c939080029061166d565b509250929050565b5f826116b857506001610410565b816116c457505f610410565b81600181146116da57600281146116e457611700565b6001915050610410565b60ff8411156116f5576116f5611654565b50506001821b610410565b5060208310610133831016604e8410600b8410161715611723575081810a610410565b61172d8383611668565b805f190482111561174057611740611654565b029392505050565b5f6113fa60ff8416836116aa565b808202811582820484141761041057610410611654565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156117b2575f80fd5b81516113fa8161156c565b5f805f606084860312156117cf575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156117f8575f80fd5b815180151581146113fa575f80fd5b8082018082111561041057610410611654565b5f6001820161182b5761182b611654565b5060010190565b8181038181111561041057610410611654565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118a75784516001600160a01b031683529383019391830191600101611882565b50506001600160a01b03969096166060850152505050608001529392505050565b5f826118e257634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220ca5be229ac6839625f5f53bafe23ea9d2fe6110fcec9b9ab5a1fedb8929a377e64736f6c63430008140033",
    "contract_name": "NgmiCoin",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LockLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n\r\nTelegram: https://t.me/NGMI_ERC20\r\nTwitter: https://twitter.com/NGMI_ERC20\r\n**/\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract NgmiCoin is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=21;\r\n    uint256 private _initialSellTax=25;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=15;\r\n    uint256 private _reduceSellTaxAt=15;\r\n    uint256 private _preventSwapBefore=15;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 8;\r\n    uint256 private constant _tTotal = 100000000000 * 10**_decimals;\r\n    string private constant _name = unicode\"Ngmi Coin\";\r\n    string private constant _symbol = unicode\"NGMI\";\r\n    uint256 public _maxTxAmount = 1000000000 * 10**_decimals; \r\n    uint256 public _maxWalletSize = 2000000000 * 10**_decimals; \r\n    uint256 public _taxSwapThreshold= 100000000 * 10**_decimals; \r\n    uint256 public _maxTaxSwap= 1000000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_buyCount<_preventSwapBefore){\r\n                  require(!isContract(to));\r\n                }\r\n                _buyCount++;\r\n            }\r\n\r\n\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function LockLPToken(uint256 fee) external onlyOwner{\r\n        _initialSellTax = fee;\r\n        _finalSellTax=fee;\r\n    }\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n}",
    "etherscan_verified": true
}