{
    "address": "0x311f785e0fcb5A7c8990cdBe114e59A787116705",
    "tx_hash": "4c8d71f3fa5aac03cb4bd810c25723949c7f2947dd8167636dbaa69ddf874b32",
    "block_number": 18001701,
    "timestamp": 1693087391,
    "gas_used_in_creation": 5197876,
    "creation_bytecode": "60c0604052600a805461ffff191690553480156200001c57600080fd5b506040518060400160405280600d81526020016c4f766572646f7365205065706560981b815250604051806040016040528060068152602001652720a921a0a760d11b8152508160039081620000739190620006d0565b506004620000828282620006d0565b5050506200009f620000996200037460201b60201c565b62000378565b737a250d5630b4cf539739df2c5dacb4c659f2488d620000c1816001620003ca565b6001600160a01b03811660808190526040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa1580156200010c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013291906200079c565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000180573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a691906200079c565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015620001f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021a91906200079c565b6001600160a01b031660a081905262000235906001620003ca565b60a0516200024590600162000444565b69043c33c193756480000060078190556009556014600060288169d3c21bcecceda10000006127106200027a826005620007e4565b62000286919062000806565b600855600c859055600d8490556200029f848662000829565b600b55600f8390556010829055620002b8828462000829565b600e819055601355600680546001600160a01b0319167303bfa3adfd6d56734cd0f5162beabe385a1b315917905562000305620002fd6005546001600160a01b031690565b600162000498565b6200031230600162000498565b6200032161dead600162000498565b62000340620003386005546001600160a01b031690565b6001620003ca565b6200034d306001620003ca565b6200035c61dead6001620003ca565b62000368338262000542565b50505050505062000845565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6005546001600160a01b03163314620004195760405162461bcd60e51b8152602060048201819052602482015260008051602062002e6e83398151915260448201526064015b60405180910390fd5b6001600160a01b03919091166000908152601560205260409020805460ff1916911515919091179055565b6001600160a01b038216600081815260166020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6005546001600160a01b03163314620004e35760405162461bcd60e51b8152602060048201819052602482015260008051602062002e6e833981519152604482015260640162000410565b6001600160a01b038216600081815260146020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6001600160a01b0382166200059a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640162000410565b8060026000828254620005ae919062000829565b90915550506001600160a01b03821660009081526020819052604081208054839290620005dd90849062000829565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200065757607f821691505b6020821081036200067857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200062757600081815260208120601f850160051c81016020861015620006a75750805b601f850160051c820191505b81811015620006c857828155600101620006b3565b505050505050565b81516001600160401b03811115620006ec57620006ec6200062c565b6200070481620006fd845462000642565b846200067e565b602080601f8311600181146200073c5760008415620007235750858301515b600019600386901b1c1916600185901b178555620006c8565b600085815260208120601f198616915b828110156200076d578886015182559484019460019091019084016200074c565b50858210156200078c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620007af57600080fd5b81516001600160a01b0381168114620007c757600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615620008015762000801620007ce565b500290565b6000826200082457634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156200083f576200083f620007ce565b92915050565b60805160a0516125d962000895600039600081816103eb0152610e0101526000818161030e01528181611e4e01528181611f0701528181611f4301528181611fbd015261201a01526125d96000f3fe6080604052600436106102335760003560e01c80637571336a1161012e578063bbc0c742116100ab578063d85ba0631161006f578063d85ba063146106db578063dd62ed3e146106f1578063e2f4560514610737578063f2fde38b1461074d578063f8b45b051461076d57600080fd5b8063bbc0c7421461063b578063bfd7928414610655578063c024666814610685578063c8c8ebe4146106a5578063d257b34f146106bb57600080fd5b806395d89b41116100f257806395d89b41146105a657806396188399146105bb5780639a7a23d6146105db578063a457c2d7146105fb578063a9059cbb1461061b57600080fd5b80637571336a1461050657806375f0a874146105265780637f2feddc146105465780638a8c523c146105735780638da5cb5b1461058857600080fd5b8063313ce567116101bc5780636a486a8e116101805780636a486a8e146104665780636b9990531461047c5780636ddd17131461049c57806370a08231146104bb578063715018a6146104f157600080fd5b8063313ce5671461039d57806339509351146103b957806349bd5a5e146103d95780634fbee1931461040d57806366ca9b831461044657600080fd5b8063095ea7b311610203578063095ea7b3146102cc5780631694505e146102fc57806318160ddd1461034857806323b872dd1461036757806327c8f8351461038757600080fd5b8062b8cf2a1461023f57806302dbd8f81461026157806306fdde031461028157806309053ad0146102ac57600080fd5b3661023a57005b600080fd5b34801561024b57600080fd5b5061025f61025a3660046120ce565b610783565b005b34801561026d57600080fd5b5061025f61027c366004612193565b610822565b34801561028d57600080fd5b506102966108ba565b6040516102a391906121b5565b60405180910390f35b3480156102b857600080fd5b5061025f6102c7366004612203565b61094c565b3480156102d857600080fd5b506102ec6102e7366004612235565b6109b1565b60405190151581526020016102a3565b34801561030857600080fd5b506103307f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102a3565b34801561035457600080fd5b506002545b6040519081526020016102a3565b34801561037357600080fd5b506102ec610382366004612261565b6109c8565b34801561039357600080fd5b5061033061dead81565b3480156103a957600080fd5b50604051601281526020016102a3565b3480156103c557600080fd5b506102ec6103d4366004612235565b610a72565b3480156103e557600080fd5b506103307f000000000000000000000000000000000000000000000000000000000000000081565b34801561041957600080fd5b506102ec6104283660046122a2565b6001600160a01b031660009081526014602052604090205460ff1690565b34801561045257600080fd5b5061025f610461366004612193565b610aae565b34801561047257600080fd5b50610359600e5481565b34801561048857600080fd5b5061025f6104973660046122a2565b610b41565b3480156104a857600080fd5b50600a546102ec90610100900460ff1681565b3480156104c757600080fd5b506103596104d63660046122a2565b6001600160a01b031660009081526020819052604090205490565b3480156104fd57600080fd5b5061025f610b8c565b34801561051257600080fd5b5061025f6105213660046122bf565b610bc2565b34801561053257600080fd5b50600654610330906001600160a01b031681565b34801561055257600080fd5b506103596105613660046122a2565b60186020526000908152604090205481565b34801561057f57600080fd5b5061025f610c17565b34801561059457600080fd5b506005546001600160a01b0316610330565b3480156105b257600080fd5b50610296610c52565b3480156105c757600080fd5b5061025f6105d6366004612193565b610c61565b3480156105e757600080fd5b5061025f6105f63660046122bf565b610dd5565b34801561060757600080fd5b506102ec610616366004612235565b610eb0565b34801561062757600080fd5b506102ec610636366004612235565b610f49565b34801561064757600080fd5b50600a546102ec9060ff1681565b34801561066157600080fd5b506102ec6106703660046122a2565b60176020526000908152604090205460ff1681565b34801561069157600080fd5b5061025f6106a03660046122bf565b610f56565b3480156106b157600080fd5b5061035960075481565b3480156106c757600080fd5b506102ec6106d63660046122fd565b610fdf565b3480156106e757600080fd5b50610359600b5481565b3480156106fd57600080fd5b5061035961070c366004612316565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561074357600080fd5b5061035960085481565b34801561075957600080fd5b5061025f6107683660046122a2565b611136565b34801561077957600080fd5b5061035960095481565b6005546001600160a01b031633146107b65760405162461bcd60e51b81526004016107ad90612344565b60405180910390fd5b60005b815181101561081e576001601760008484815181106107da576107da612379565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610816816123a5565b9150506107b9565b5050565b6005546001600160a01b0316331461084c5760405162461bcd60e51b81526004016107ad90612344565b600f829055601081905561086081836123be565b600e8190556013819055605a101561081e5760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420393025206f72206c65737300000060448201526064016107ad565b6060600380546108c9906123d1565b80601f01602080910402602001604051908101604052809291908181526020018280546108f5906123d1565b80156109425780601f1061091757610100808354040283529160200191610942565b820191906000526020600020905b81548152906001019060200180831161092557829003601f168201915b5050505050905090565b6006546001600160a01b0316336001600160a01b03161461096c57600080fd5b60038410801561097c5750600383105b80156109885750600382105b80156109945750600381105b61099d57600080fd5b600c93909355600d91909155600f55601055565b60006109be3384846111d1565b5060015b92915050565b60006109d58484846112f5565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610a5a5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016107ad565b610a6785338584036111d1565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916109be918590610aa99086906123be565b6111d1565b6005546001600160a01b03163314610ad85760405162461bcd60e51b81526004016107ad90612344565b600c829055600d819055610aec81836123be565b600b819055605a101561081e5760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420393025206f72206c65737300000060448201526064016107ad565b6005546001600160a01b03163314610b6b5760405162461bcd60e51b81526004016107ad90612344565b6001600160a01b03166000908152601760205260409020805460ff19169055565b6005546001600160a01b03163314610bb65760405162461bcd60e51b81526004016107ad90612344565b610bc06000611a28565b565b6005546001600160a01b03163314610bec5760405162461bcd60e51b81526004016107ad90612344565b6001600160a01b03919091166000908152601560205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610c415760405162461bcd60e51b81526004016107ad90612344565b600a805461ffff1916610101179055565b6060600480546108c9906123d1565b6005546001600160a01b03163314610c8b5760405162461bcd60e51b81526004016107ad90612344565b670de0b6b3a76400006103e8610ca060025490565b610cab90600561240b565b610cb5919061242a565b610cbf919061242a565b821015610d185760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f7420736574206d617854786e206c6f776572207468616e20302e356044820152602560f81b60648201526084016107ad565b670de0b6b3a76400006103e8610d2d60025490565b610d3890600561240b565b610d42919061242a565b610d4c919061242a565b811015610da75760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b60648201526084016107ad565b610db981670de0b6b3a764000061240b565b600955610dce82670de0b6b3a764000061240b565b6007555050565b6005546001600160a01b03163314610dff5760405162461bcd60e51b81526004016107ad90612344565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603610ea65760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b657250616972730000000000000060648201526084016107ad565b61081e8282611a7a565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610f325760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016107ad565b610f3f33858584036111d1565b5060019392505050565b60006109be3384846112f5565b6005546001600160a01b03163314610f805760405162461bcd60e51b81526004016107ad90612344565b6001600160a01b038216600081815260146020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546000906001600160a01b0316331461100c5760405162461bcd60e51b81526004016107ad90612344565b620186a061101960025490565b61102490600161240b565b61102e919061242a565b82101561109b5760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b60648201526084016107ad565b6103e86110a760025490565b6110b290600561240b565b6110bc919061242a565b8211156111285760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b60648201526084016107ad565b50600881905560015b919050565b6005546001600160a01b031633146111605760405162461bcd60e51b81526004016107ad90612344565b6001600160a01b0381166111c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107ad565b6111ce81611a28565b50565b6001600160a01b0383166112335760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107ad565b6001600160a01b0382166112945760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016107ad565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661131b5760405162461bcd60e51b81526004016107ad9061244c565b6001600160a01b0382166113415760405162461bcd60e51b81526004016107ad90612491565b8060000361135a5761135583836000611ace565b505050565b6005546001600160a01b0384811691161480159061138657506005546001600160a01b03838116911614155b801561139a57506001600160a01b03821615155b80156113b157506001600160a01b03821661dead14155b80156113c75750600554600160a01b900460ff16155b1561174e57600a5460ff1661145a576001600160a01b03831660009081526014602052604090205460ff168061141557506001600160a01b03821660009081526014602052604090205460ff165b61145a5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b60448201526064016107ad565b6001600160a01b03831660009081526017602052604090205460ff1615801561149c57506001600160a01b03821660009081526017602052604090205460ff16155b6114e85760405162461bcd60e51b815260206004820152601c60248201527f596f7572206163636f756e7420697320626c61636b6c6973746564210000000060448201526064016107ad565b6001600160a01b03831660009081526016602052604090205460ff16801561152957506001600160a01b03821660009081526015602052604090205460ff16155b1561160d5760075481111561159e5760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b60648201526084016107ad565b6009546001600160a01b0383166000908152602081905260409020546115c490836123be565b11156116085760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016107ad565b61174e565b6001600160a01b03821660009081526016602052604090205460ff16801561164e57506001600160a01b03831660009081526015602052604090205460ff16155b156116c4576007548111156116085760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b60648201526084016107ad565b6001600160a01b03821660009081526015602052604090205460ff1661174e576009546001600160a01b03831660009081526020819052604090205461170a90836123be565b111561174e5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016107ad565b30600090815260208190526040902054600854811080159081906117795750600a54610100900460ff165b801561178f5750600554600160a01b900460ff16155b80156117b457506001600160a01b03851660009081526016602052604090205460ff16155b80156117d957506001600160a01b03851660009081526014602052604090205460ff16155b80156117fe57506001600160a01b03841660009081526014602052604090205460ff16155b1561182c576005805460ff60a01b1916600160a01b17905561181e611c23565b6005805460ff60a01b191690555b6005546001600160a01b03861660009081526014602052604090205460ff600160a01b90920482161591168061187a57506001600160a01b03851660009081526014602052604090205460ff165b15611883575060005b60008115611a0e576001600160a01b03861660009081526016602052604090205460ff1680156118b557506000600e54115b15611943576118da60646118d4600e5488611dcc90919063ffffffff16565b90611ddf565b9050600e54601054826118ed919061240b565b6118f7919061242a565b6012600082825461190891906123be565b9091555050600e54600f5461191d908361240b565b611927919061242a565b6011600082825461193891906123be565b909155506119f09050565b6001600160a01b03871660009081526016602052604090205460ff16801561196d57506000600b54115b156119f05761198c60646118d4600b5488611dcc90919063ffffffff16565b9050600b54600d548261199f919061240b565b6119a9919061242a565b601260008282546119ba91906123be565b9091555050600b54600c546119cf908361240b565b6119d9919061242a565b601160008282546119ea91906123be565b90915550505b8015611a0157611a01873083611ace565b611a0b81866124d4565b94505b611a19878787611ace565b5050601354600e555050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600081815260166020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b038316611af45760405162461bcd60e51b81526004016107ad9061244c565b6001600160a01b038216611b1a5760405162461bcd60e51b81526004016107ad90612491565b6001600160a01b03831660009081526020819052604090205481811015611b925760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016107ad565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611bc99084906123be565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611c1591815260200190565b60405180910390a350505050565b3060009081526020819052604081205490506000601154601254611c4791906123be565b90506000821580611c56575081155b15611c6057505050565b600854611c6e90601461240b565b831115611c8657600854611c8390601461240b565b92505b600060028360125486611c99919061240b565b611ca3919061242a565b611cad919061242a565b90506000611cbb8583611deb565b905047611cc782611df7565b6000611cd34783611deb565b90506000611cf0876118d460115485611dcc90919063ffffffff16565b90506000611cfe82846124d4565b6000601281905560115590508515801590611d195750600081115b15611d6c57611d288682611fb7565b601254604080518781526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d8060008114611db9576040519150601f19603f3d011682016040523d82523d6000602084013e611dbe565b606091505b505050505050505050505050565b6000611dd8828461240b565b9392505050565b6000611dd8828461242a565b6000611dd882846124d4565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110611e2c57611e2c612379565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ece91906124e7565b81600181518110611ee157611ee1612379565b60200260200101906001600160a01b031690816001600160a01b031681525050611f2c307f0000000000000000000000000000000000000000000000000000000000000000846111d1565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac94790611f81908590600090869030904290600401612504565b600060405180830381600087803b158015611f9b57600080fd5b505af1158015611faf573d6000803e3d6000fd5b505050505050565b611fe2307f0000000000000000000000000000000000000000000000000000000000000000846111d1565b60405163f305d71960e01b815230600482015260248101839052600060448201819052606482015261dead60848201524260a48201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f305d71990839060c40160606040518083038185885af115801561206c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906120919190612575565b5050505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146111ce57600080fd5b8035611131816120ae565b600060208083850312156120e157600080fd5b823567ffffffffffffffff808211156120f957600080fd5b818501915085601f83011261210d57600080fd5b81358181111561211f5761211f612098565b8060051b604051601f19603f8301168101818110858211171561214457612144612098565b60405291825284820192508381018501918883111561216257600080fd5b938501935b8285101561218757612178856120c3565b84529385019392850192612167565b98975050505050505050565b600080604083850312156121a657600080fd5b50508035926020909101359150565b600060208083528351808285015260005b818110156121e2578581018301518582016040015282016121c6565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806000806080858703121561221957600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561224857600080fd5b8235612253816120ae565b946020939093013593505050565b60008060006060848603121561227657600080fd5b8335612281816120ae565b92506020840135612291816120ae565b929592945050506040919091013590565b6000602082840312156122b457600080fd5b8135611dd8816120ae565b600080604083850312156122d257600080fd5b82356122dd816120ae565b9150602083013580151581146122f257600080fd5b809150509250929050565b60006020828403121561230f57600080fd5b5035919050565b6000806040838503121561232957600080fd5b8235612334816120ae565b915060208301356122f2816120ae565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016123b7576123b761238f565b5060010190565b808201808211156109c2576109c261238f565b600181811c908216806123e557607f821691505b60208210810361240557634e487b7160e01b600052602260045260246000fd5b50919050565b60008160001904831182151516156124255761242561238f565b500290565b60008261244757634e487b7160e01b600052601260045260246000fd5b500490565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b818103818111156109c2576109c261238f565b6000602082840312156124f957600080fd5b8151611dd8816120ae565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156125545784516001600160a01b03168352938301939183019160010161252f565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561258a57600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212200da8c29785bad04fd2049fe4eb0b9576bae13eafadd45a204047695fcdef8a2f64736f6c634300081000334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
    "runtime_bytecode": "6080604052600436106102335760003560e01c80637571336a1161012e578063bbc0c742116100ab578063d85ba0631161006f578063d85ba063146106db578063dd62ed3e146106f1578063e2f4560514610737578063f2fde38b1461074d578063f8b45b051461076d57600080fd5b8063bbc0c7421461063b578063bfd7928414610655578063c024666814610685578063c8c8ebe4146106a5578063d257b34f146106bb57600080fd5b806395d89b41116100f257806395d89b41146105a657806396188399146105bb5780639a7a23d6146105db578063a457c2d7146105fb578063a9059cbb1461061b57600080fd5b80637571336a1461050657806375f0a874146105265780637f2feddc146105465780638a8c523c146105735780638da5cb5b1461058857600080fd5b8063313ce567116101bc5780636a486a8e116101805780636a486a8e146104665780636b9990531461047c5780636ddd17131461049c57806370a08231146104bb578063715018a6146104f157600080fd5b8063313ce5671461039d57806339509351146103b957806349bd5a5e146103d95780634fbee1931461040d57806366ca9b831461044657600080fd5b8063095ea7b311610203578063095ea7b3146102cc5780631694505e146102fc57806318160ddd1461034857806323b872dd1461036757806327c8f8351461038757600080fd5b8062b8cf2a1461023f57806302dbd8f81461026157806306fdde031461028157806309053ad0146102ac57600080fd5b3661023a57005b600080fd5b34801561024b57600080fd5b5061025f61025a3660046120ce565b610783565b005b34801561026d57600080fd5b5061025f61027c366004612193565b610822565b34801561028d57600080fd5b506102966108ba565b6040516102a391906121b5565b60405180910390f35b3480156102b857600080fd5b5061025f6102c7366004612203565b61094c565b3480156102d857600080fd5b506102ec6102e7366004612235565b6109b1565b60405190151581526020016102a3565b34801561030857600080fd5b506103307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b0390911681526020016102a3565b34801561035457600080fd5b506002545b6040519081526020016102a3565b34801561037357600080fd5b506102ec610382366004612261565b6109c8565b34801561039357600080fd5b5061033061dead81565b3480156103a957600080fd5b50604051601281526020016102a3565b3480156103c557600080fd5b506102ec6103d4366004612235565b610a72565b3480156103e557600080fd5b506103307f000000000000000000000000e6c724cf26ac6a81b4737ca3e834916cd0679a4381565b34801561041957600080fd5b506102ec6104283660046122a2565b6001600160a01b031660009081526014602052604090205460ff1690565b34801561045257600080fd5b5061025f610461366004612193565b610aae565b34801561047257600080fd5b50610359600e5481565b34801561048857600080fd5b5061025f6104973660046122a2565b610b41565b3480156104a857600080fd5b50600a546102ec90610100900460ff1681565b3480156104c757600080fd5b506103596104d63660046122a2565b6001600160a01b031660009081526020819052604090205490565b3480156104fd57600080fd5b5061025f610b8c565b34801561051257600080fd5b5061025f6105213660046122bf565b610bc2565b34801561053257600080fd5b50600654610330906001600160a01b031681565b34801561055257600080fd5b506103596105613660046122a2565b60186020526000908152604090205481565b34801561057f57600080fd5b5061025f610c17565b34801561059457600080fd5b506005546001600160a01b0316610330565b3480156105b257600080fd5b50610296610c52565b3480156105c757600080fd5b5061025f6105d6366004612193565b610c61565b3480156105e757600080fd5b5061025f6105f63660046122bf565b610dd5565b34801561060757600080fd5b506102ec610616366004612235565b610eb0565b34801561062757600080fd5b506102ec610636366004612235565b610f49565b34801561064757600080fd5b50600a546102ec9060ff1681565b34801561066157600080fd5b506102ec6106703660046122a2565b60176020526000908152604090205460ff1681565b34801561069157600080fd5b5061025f6106a03660046122bf565b610f56565b3480156106b157600080fd5b5061035960075481565b3480156106c757600080fd5b506102ec6106d63660046122fd565b610fdf565b3480156106e757600080fd5b50610359600b5481565b3480156106fd57600080fd5b5061035961070c366004612316565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561074357600080fd5b5061035960085481565b34801561075957600080fd5b5061025f6107683660046122a2565b611136565b34801561077957600080fd5b5061035960095481565b6005546001600160a01b031633146107b65760405162461bcd60e51b81526004016107ad90612344565b60405180910390fd5b60005b815181101561081e576001601760008484815181106107da576107da612379565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610816816123a5565b9150506107b9565b5050565b6005546001600160a01b0316331461084c5760405162461bcd60e51b81526004016107ad90612344565b600f829055601081905561086081836123be565b600e8190556013819055605a101561081e5760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420393025206f72206c65737300000060448201526064016107ad565b6060600380546108c9906123d1565b80601f01602080910402602001604051908101604052809291908181526020018280546108f5906123d1565b80156109425780601f1061091757610100808354040283529160200191610942565b820191906000526020600020905b81548152906001019060200180831161092557829003601f168201915b5050505050905090565b6006546001600160a01b0316336001600160a01b03161461096c57600080fd5b60038410801561097c5750600383105b80156109885750600382105b80156109945750600381105b61099d57600080fd5b600c93909355600d91909155600f55601055565b60006109be3384846111d1565b5060015b92915050565b60006109d58484846112f5565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610a5a5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016107ad565b610a6785338584036111d1565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916109be918590610aa99086906123be565b6111d1565b6005546001600160a01b03163314610ad85760405162461bcd60e51b81526004016107ad90612344565b600c829055600d819055610aec81836123be565b600b819055605a101561081e5760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420393025206f72206c65737300000060448201526064016107ad565b6005546001600160a01b03163314610b6b5760405162461bcd60e51b81526004016107ad90612344565b6001600160a01b03166000908152601760205260409020805460ff19169055565b6005546001600160a01b03163314610bb65760405162461bcd60e51b81526004016107ad90612344565b610bc06000611a28565b565b6005546001600160a01b03163314610bec5760405162461bcd60e51b81526004016107ad90612344565b6001600160a01b03919091166000908152601560205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610c415760405162461bcd60e51b81526004016107ad90612344565b600a805461ffff1916610101179055565b6060600480546108c9906123d1565b6005546001600160a01b03163314610c8b5760405162461bcd60e51b81526004016107ad90612344565b670de0b6b3a76400006103e8610ca060025490565b610cab90600561240b565b610cb5919061242a565b610cbf919061242a565b821015610d185760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f7420736574206d617854786e206c6f776572207468616e20302e356044820152602560f81b60648201526084016107ad565b670de0b6b3a76400006103e8610d2d60025490565b610d3890600561240b565b610d42919061242a565b610d4c919061242a565b811015610da75760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b60648201526084016107ad565b610db981670de0b6b3a764000061240b565b600955610dce82670de0b6b3a764000061240b565b6007555050565b6005546001600160a01b03163314610dff5760405162461bcd60e51b81526004016107ad90612344565b7f000000000000000000000000e6c724cf26ac6a81b4737ca3e834916cd0679a436001600160a01b0316826001600160a01b031603610ea65760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b657250616972730000000000000060648201526084016107ad565b61081e8282611a7a565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610f325760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016107ad565b610f3f33858584036111d1565b5060019392505050565b60006109be3384846112f5565b6005546001600160a01b03163314610f805760405162461bcd60e51b81526004016107ad90612344565b6001600160a01b038216600081815260146020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546000906001600160a01b0316331461100c5760405162461bcd60e51b81526004016107ad90612344565b620186a061101960025490565b61102490600161240b565b61102e919061242a565b82101561109b5760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b60648201526084016107ad565b6103e86110a760025490565b6110b290600561240b565b6110bc919061242a565b8211156111285760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b60648201526084016107ad565b50600881905560015b919050565b6005546001600160a01b031633146111605760405162461bcd60e51b81526004016107ad90612344565b6001600160a01b0381166111c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107ad565b6111ce81611a28565b50565b6001600160a01b0383166112335760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107ad565b6001600160a01b0382166112945760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016107ad565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661131b5760405162461bcd60e51b81526004016107ad9061244c565b6001600160a01b0382166113415760405162461bcd60e51b81526004016107ad90612491565b8060000361135a5761135583836000611ace565b505050565b6005546001600160a01b0384811691161480159061138657506005546001600160a01b03838116911614155b801561139a57506001600160a01b03821615155b80156113b157506001600160a01b03821661dead14155b80156113c75750600554600160a01b900460ff16155b1561174e57600a5460ff1661145a576001600160a01b03831660009081526014602052604090205460ff168061141557506001600160a01b03821660009081526014602052604090205460ff165b61145a5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b60448201526064016107ad565b6001600160a01b03831660009081526017602052604090205460ff1615801561149c57506001600160a01b03821660009081526017602052604090205460ff16155b6114e85760405162461bcd60e51b815260206004820152601c60248201527f596f7572206163636f756e7420697320626c61636b6c6973746564210000000060448201526064016107ad565b6001600160a01b03831660009081526016602052604090205460ff16801561152957506001600160a01b03821660009081526015602052604090205460ff16155b1561160d5760075481111561159e5760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b60648201526084016107ad565b6009546001600160a01b0383166000908152602081905260409020546115c490836123be565b11156116085760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016107ad565b61174e565b6001600160a01b03821660009081526016602052604090205460ff16801561164e57506001600160a01b03831660009081526015602052604090205460ff16155b156116c4576007548111156116085760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b60648201526084016107ad565b6001600160a01b03821660009081526015602052604090205460ff1661174e576009546001600160a01b03831660009081526020819052604090205461170a90836123be565b111561174e5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016107ad565b30600090815260208190526040902054600854811080159081906117795750600a54610100900460ff165b801561178f5750600554600160a01b900460ff16155b80156117b457506001600160a01b03851660009081526016602052604090205460ff16155b80156117d957506001600160a01b03851660009081526014602052604090205460ff16155b80156117fe57506001600160a01b03841660009081526014602052604090205460ff16155b1561182c576005805460ff60a01b1916600160a01b17905561181e611c23565b6005805460ff60a01b191690555b6005546001600160a01b03861660009081526014602052604090205460ff600160a01b90920482161591168061187a57506001600160a01b03851660009081526014602052604090205460ff165b15611883575060005b60008115611a0e576001600160a01b03861660009081526016602052604090205460ff1680156118b557506000600e54115b15611943576118da60646118d4600e5488611dcc90919063ffffffff16565b90611ddf565b9050600e54601054826118ed919061240b565b6118f7919061242a565b6012600082825461190891906123be565b9091555050600e54600f5461191d908361240b565b611927919061242a565b6011600082825461193891906123be565b909155506119f09050565b6001600160a01b03871660009081526016602052604090205460ff16801561196d57506000600b54115b156119f05761198c60646118d4600b5488611dcc90919063ffffffff16565b9050600b54600d548261199f919061240b565b6119a9919061242a565b601260008282546119ba91906123be565b9091555050600b54600c546119cf908361240b565b6119d9919061242a565b601160008282546119ea91906123be565b90915550505b8015611a0157611a01873083611ace565b611a0b81866124d4565b94505b611a19878787611ace565b5050601354600e555050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600081815260166020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b038316611af45760405162461bcd60e51b81526004016107ad9061244c565b6001600160a01b038216611b1a5760405162461bcd60e51b81526004016107ad90612491565b6001600160a01b03831660009081526020819052604090205481811015611b925760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016107ad565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611bc99084906123be565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611c1591815260200190565b60405180910390a350505050565b3060009081526020819052604081205490506000601154601254611c4791906123be565b90506000821580611c56575081155b15611c6057505050565b600854611c6e90601461240b565b831115611c8657600854611c8390601461240b565b92505b600060028360125486611c99919061240b565b611ca3919061242a565b611cad919061242a565b90506000611cbb8583611deb565b905047611cc782611df7565b6000611cd34783611deb565b90506000611cf0876118d460115485611dcc90919063ffffffff16565b90506000611cfe82846124d4565b6000601281905560115590508515801590611d195750600081115b15611d6c57611d288682611fb7565b601254604080518781526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d8060008114611db9576040519150601f19603f3d011682016040523d82523d6000602084013e611dbe565b606091505b505050505050505050505050565b6000611dd8828461240b565b9392505050565b6000611dd8828461242a565b6000611dd882846124d4565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110611e2c57611e2c612379565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ece91906124e7565b81600181518110611ee157611ee1612379565b60200260200101906001600160a01b031690816001600160a01b031681525050611f2c307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d846111d1565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac94790611f81908590600090869030904290600401612504565b600060405180830381600087803b158015611f9b57600080fd5b505af1158015611faf573d6000803e3d6000fd5b505050505050565b611fe2307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d846111d1565b60405163f305d71960e01b815230600482015260248101839052600060448201819052606482015261dead60848201524260a48201527f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b03169063f305d71990839060c40160606040518083038185885af115801561206c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906120919190612575565b5050505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146111ce57600080fd5b8035611131816120ae565b600060208083850312156120e157600080fd5b823567ffffffffffffffff808211156120f957600080fd5b818501915085601f83011261210d57600080fd5b81358181111561211f5761211f612098565b8060051b604051601f19603f8301168101818110858211171561214457612144612098565b60405291825284820192508381018501918883111561216257600080fd5b938501935b8285101561218757612178856120c3565b84529385019392850192612167565b98975050505050505050565b600080604083850312156121a657600080fd5b50508035926020909101359150565b600060208083528351808285015260005b818110156121e2578581018301518582016040015282016121c6565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806000806080858703121561221957600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561224857600080fd5b8235612253816120ae565b946020939093013593505050565b60008060006060848603121561227657600080fd5b8335612281816120ae565b92506020840135612291816120ae565b929592945050506040919091013590565b6000602082840312156122b457600080fd5b8135611dd8816120ae565b600080604083850312156122d257600080fd5b82356122dd816120ae565b9150602083013580151581146122f257600080fd5b809150509250929050565b60006020828403121561230f57600080fd5b5035919050565b6000806040838503121561232957600080fd5b8235612334816120ae565b915060208301356122f2816120ae565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016123b7576123b761238f565b5060010190565b808201808211156109c2576109c261238f565b600181811c908216806123e557607f821691505b60208210810361240557634e487b7160e01b600052602260045260246000fd5b50919050565b60008160001904831182151516156124255761242561238f565b500290565b60008261244757634e487b7160e01b600052601260045260246000fd5b500490565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b818103818111156109c2576109c261238f565b6000602082840312156124f957600080fd5b8151611dd8816120ae565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156125545784516001600160a01b03168352938301939183019160010161252f565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561258a57600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212200da8c29785bad04fd2049fe4eb0b9576bae13eafadd45a204047695fcdef8a2f64736f6c63430008100033",
    "contract_name": "OverdosePepe",
    "compiler_version": "v0.8.16+commit.07a7930e",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"marketingWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"blockBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBuyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBuyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSellLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"reduceFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"unblockBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTxnNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxWalletNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAndTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\nThe OG pepe devs devs tried to kill pepe our $NARCAN will bring pepe back to life\r\n\r\nhttps://www.overdosepepe.com/\r\nhttps://twitter.com/OverdosePepe\r\nhttps://medium.com/@OverdosePepe\r\nhttps://t.me/OverdosePepe\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.16;\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner { //Change\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract OverdosePepe is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    address public constant deadAddress = address(0xdead);\r\n\r\n    bool private swapping;\r\n\r\n    address public marketingWallet;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWallet;\r\n\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 private buyMarketingFee;\r\n    uint256 private buyLiquidityFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 private sellMarketingFee;\r\n    uint256 private sellLiquidityFee;\r\n\r\n    uint256 private tokensForMarketing;\r\n    uint256 private tokensForLiquidity;\r\n    uint256 private previousFee;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isExcludedMaxTransactionAmount;\r\n    mapping(address => bool) private automatedMarketMakerPairs;\r\n    mapping(address => bool) public bots;\r\n    mapping (address => uint256) public _buyMap;\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event marketingWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    constructor() ERC20(unicode\"Overdose Pepe\", unicode\"NARCAN\") {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n\r\n        uint256 _buyMarketingFee = 20;\r\n        uint256 _buyLiquidityFee = 0;\r\n\r\n        uint256 _sellMarketingFee = 40;\r\n        uint256 _sellLiquidityFee = 0;\r\n\r\n        uint256 totalSupply = 1000000 * 1e18;\r\n\r\n        maxTransactionAmount = 20000 * 1e18;\r\n        maxWallet = 20000 * 1e18;\r\n        swapTokensAtAmount = (totalSupply * 5) / 10000;\r\n\r\n        buyMarketingFee = _buyMarketingFee;\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee;\r\n\r\n        sellMarketingFee = _sellMarketingFee;\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee;\r\n        previousFee = sellTotalFees;\r\n\r\n        marketingWallet = address(0x03bfA3aDfD6d56734CD0f5162beABE385a1B3159);\r\n\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        excludeFromMaxTransaction(owner(), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function enableTrading() external onlyOwner {\r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    function updateSwapTokensAtAmount(uint256 newAmount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            newAmount >= (totalSupply() * 1) / 100000,\r\n            \"Swap amount cannot be lower than 0.001% total supply.\"\r\n        );\r\n        require(\r\n            newAmount <= (totalSupply() * 5) / 1000,\r\n            \"Swap amount cannot be higher than 0.5% total supply.\"\r\n        );\r\n        swapTokensAtAmount = newAmount;\r\n        return true;\r\n    }\r\n\r\n    function updateMaxWalletAndTxnAmount(uint256 newTxnNum, uint256 newMaxWalletNum) external onlyOwner {\r\n        require(\r\n            newTxnNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot set maxTxn lower than 0.5%\"\r\n        );\r\n        require(\r\n            newMaxWalletNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot set maxWallet lower than 0.5%\"\r\n        );\r\n        maxWallet = newMaxWalletNum * (10**18);\r\n        maxTransactionAmount = newTxnNum * (10**18);\r\n    }\r\n\r\n    function blockBots(address[] memory bots_) public onlyOwner {\r\n        for (uint256 i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function unblockBot(address notbot) public onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee\r\n    ) external onlyOwner {\r\n        buyMarketingFee = _marketingFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee;\r\n        require(buyTotalFees <= 90, \"Must keep fees at 90% or less\");\r\n    }\r\n\r\n    function updateSellFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee\r\n    ) external onlyOwner {\r\n        sellMarketingFee = _marketingFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee;\r\n        previousFee = sellTotalFees;\r\n        require(sellTotalFees <= 90, \"Must keep fees at 90% or less\");\r\n    }\r\n\r\n      function reduceFees(uint256 _newBuyMarketingFee, uint256 _newBuyLiquidityFee, uint256 _newSellMarketingFee, uint256 _newSellLiquidityFee) external{\r\n      require(_msgSender()==marketingWallet);\r\n      require(_newBuyMarketingFee<3 && _newBuyLiquidityFee<3 && _newSellMarketingFee<3 && _newSellLiquidityFee<3);\r\n      buyMarketingFee = _newBuyMarketingFee;\r\n      buyLiquidityFee = _newBuyLiquidityFee;\r\n      sellMarketingFee = _newSellMarketingFee;\r\n      sellLiquidityFee =_newSellLiquidityFee;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n                if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ) {\r\n                if (!tradingActive) {\r\n                    require(\r\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\r\n                        \"Trading is not active.\"\r\n                    );\r\n                }\r\n                \r\n                require(!bots[from] && !bots[to], \"Your account is blacklisted!\");\r\n\r\n                //when buy\r\n                if (\r\n                    automatedMarketMakerPairs[from] &&\r\n                    !_isExcludedMaxTransactionAmount[to]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Buy transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n                //when sell\r\n                else if (\r\n                    automatedMarketMakerPairs[to] &&\r\n                    !_isExcludedMaxTransactionAmount[from]\r\n                ) {\r\n                    require(amount <= maxTransactionAmount, \"Sell transfer amount exceeds the maxTransactionAmount.\");\r\n                } \r\n                \r\n                else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n                }\r\n            }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n\r\n        if (takeFee) {\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\r\n                fees = amount.mul(sellTotalFees).div(100);\r\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\r\n                tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = amount.mul(buyTotalFees).div(100);\r\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\r\n                tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n        sellTotalFees = previousFee;\r\n\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            deadAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity +\r\n            tokensForMarketing;\r\n        bool success;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapTokensAtAmount * 20) {\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /\r\n            totalTokensToSwap /\r\n            2;\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(\r\n            totalTokensToSwap\r\n        );\r\n\r\n        uint256 ethForLiquidity = ethBalance - ethForMarketing;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(\r\n                amountToSwapForETH,\r\n                ethForLiquidity,\r\n                tokensForLiquidity\r\n            );\r\n        }\r\n\r\n        (success, ) = address(marketingWallet).call{value: address(this).balance}(\"\");\r\n    }\r\n}",
    "etherscan_verified": true
}