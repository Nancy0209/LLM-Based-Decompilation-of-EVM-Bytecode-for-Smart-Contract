{
    "address": "0x693E9C1e8935caf91F006bf5a2FF8a1aB2C569c7",
    "tx_hash": "f08eca89f235d20f7d12f68b2ff19fc42a2273b246dcc718133a9815375de302",
    "block_number": 18000194,
    "timestamp": 1693069223,
    "gas_used_in_creation": 6433259,
    "creation_bytecode": "6080604052600280546001600160a01b031990811661dead1790915560038054821690556004805490911673576e2bed8f7b46d34016198911cdf9886f78bea7179055620000506009600a62000692565b620000619064174876e800620006a2565b60058190556064600e55601e600f55600a601055603c601155601960128190556013819055601880546001600160a01b0319167317ae675168475efd02f8c7d6df16ef48209d95b71790558054600162ffff0160a01b03191675010017ae675168475efd02f8c7d6df16ef48209d95b71790555f601b55620000f5906103e890620000ee90601462000461565b90620004f4565b601c5560055462000111906103e890620000ee90601e62000461565b601d55600580546200012c9161271091620000ee9162000461565b601e553480156200013b575f80fd5b5060405162003f8d38038062003f8d8339810160408190526200015e91620006bc565b5f80546001600160a01b03199081166001600160a01b0384161790915560148054737a250d5630b4cf539739df2c5dacb4c659f2488d921682179055604080516315ab88c960e31b8152905163ad5c4648916004808201926020929091908290030181865afa158015620001d4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620001fa9190620006bc565b600180546001600160a01b0319166001600160a01b039283161790556014546040805163c45a015560e01b81529051919092169163c45a01559160048083019260209291908290030181865afa15801562000257573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200027d9190620006bc565b6001546040516364e329cb60e11b81526001600160a01b03918216600482015230602482015291169063c9c65396906044016020604051808303815f875af1158015620002cc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620002f29190620006bc565b601580546001600160a01b0319166001600160a01b03928316179055305f90815260076020908152604080832060145490941683529290528190205f199055516200033d9062000577565b604051809103905ff08015801562000357573d5f803e3d5ffd5b50601a80546001600160a01b0319166001600160a01b039283161790558181165f818152600a60209081526040808320805460ff1990811660019081179092556018548716855282852080548216831790556015805488168652600c85528386208054831684179055308652838620805483168417905560028054891687528487208054841685179055878752600b865284872080548416851790559054881686528386208054831684179055549096168452818420805490961617909455600554838352600682528483208190559351938452919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35062000751565b5f825f036200047257505f620004ee565b5f6200047f8385620006a2565b9050826200048e8583620006e4565b14620004eb5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084015b60405180910390fd5b90505b92915050565b5f620004eb83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200053d60201b60201c565b5f8183620005605760405162461bcd60e51b8152600401620004e2919062000704565b505f6200056e8486620006e4565b95945050505050565b6111bc8062002dd183390190565b634e487b7160e01b5f52601160045260245ffd5b600181815b80851115620005d957815f1904821115620005bd57620005bd62000585565b80851615620005cb57918102915b93841c93908002906200059e565b509250929050565b5f82620005f157506001620004ee565b81620005ff57505f620004ee565b8160018114620006185760028114620006235762000643565b6001915050620004ee565b60ff84111562000637576200063762000585565b50506001821b620004ee565b5060208310610133831016604e8410600b841016171562000668575081810a620004ee565b62000674838362000599565b805f19048211156200068a576200068a62000585565b029392505050565b5f620004eb60ff841683620005e1565b8082028115828204841417620004ee57620004ee62000585565b5f60208284031215620006cd575f80fd5b81516001600160a01b0381168114620004eb575f80fd5b5f82620006ff57634e487b7160e01b5f52601260045260245ffd5b500490565b5f6020808352835180828501525f5b81811015620007315785810183015185820160400152820162000713565b505f604082860101526040601f19601f8301168501019250505092915050565b612672806200075f5f395ff3fe608060405260043610610395575f3560e01c8063751039fc116101de578063b515566a11610108578063dd62ed3e1161009d578063f887ea401161006d578063f887ea4014610a8e578063f8b45b0514610aad578063fabe628314610ac2578063ffb54a9914610ae1575f80fd5b8063dd62ed3e146109f8578063dfbfbc6b14610a3c578063f2fde38b14610a50578063f708a64f14610a6f575f80fd5b8063c8d1293d116100d8578063c8d1293d1461099b578063c9567bf9146109b0578063caa5581b146109c4578063d920334e146109d9575f80fd5b8063b515566a14610929578063bb542ef014610948578063bf56b37114610967578063c45a01551461097c575f80fd5b80638b42507f1161017e578063a3a2e89e1161014e578063a3a2e89e146108ad578063a46730e5146108cc578063a8aa1b31146108eb578063a9059cbb1461090a575f80fd5b80638b42507f1461080d5780638ea5220f1461083b57806395d89b411461085a5780639d3311811461088e575f80fd5b806381934031116101b9578063819340311461079f57806382e7ac2e146107be57806389291a8f146107dd578063893d20e8146107f1575f80fd5b8063751039fc1461075757806375df13051461076b5780637db1342c14610780575f80fd5b80632f54bf6e116102bf578063454343771161025f578063571ac8b01161022f578063571ac8b0146106db57806366eb3785146106fa57806370a082311461070e5780637437681e14610742575f80fd5b80634543437714610672578063468c7ee21461068757806347062402146106a65780634a74bb02146106bb575f80fd5b8063351998411161029a57806335199841146105d85780633dab5269146105f75780633f4218e0146106165780634355855a14610644575f80fd5b80632f54bf6e1461057157806330ca34ee1461059e578063313ce567146105bd575f80fd5b80631f53ac02116103355780632b112e49116103055780632b112e491461050a5780632b14ca561461051e5780632d48e896146105335780632dbea2e114610552575f80fd5b80631f53ac021461049957806323b872dd146104b8578063273123b7146104d7578063284f83d6146104f6575f80fd5b80630cb6b2be116103705780630cb6b2be146104185780630d65df9b1461044f57806311dcaffe1461047057806318160ddd14610485575f80fd5b80630445b667146103a057806306fdde03146103c8578063095ea7b3146103e9575f80fd5b3661039c57005b5f80fd5b3480156103ab575f80fd5b506103b5601e5481565b6040519081526020015b60405180910390f35b3480156103d3575f80fd5b506103dc610b01565b6040516103bf9190612170565b3480156103f4575f80fd5b506104086104033660046121df565b610b21565b60405190151581526020016103bf565b348015610423575f80fd5b50600454610437906001600160a01b031681565b6040516001600160a01b0390911681526020016103bf565b34801561045a575f80fd5b5061046e610469366004612209565b610b8d565b005b34801561047b575f80fd5b506103b5601b5481565b348015610490575f80fd5b506005546103b5565b3480156104a4575f80fd5b5061046e6104b3366004612247565b610c35565b3480156104c3575f80fd5b506104086104d2366004612209565b610c80565b3480156104e2575f80fd5b5061046e6104f1366004612247565b610d3e565b348015610501575f80fd5b5061046e610d87565b348015610515575f80fd5b506103b5610ddb565b348015610529575f80fd5b506103b560135481565b34801561053e575f80fd5b5061046e61054d366004612262565b610e2b565b34801561055d575f80fd5b5061046e61056c366004612282565b610eb9565b34801561057c575f80fd5b5061040861058b366004612247565b5f546001600160a01b0391821691161490565b3480156105a9575f80fd5b5061046e6105b8366004612262565b610ef0565b3480156105c8575f80fd5b50604051600981526020016103bf565b3480156105e3575f80fd5b5061046e6105f2366004612247565b610f24565b348015610602575f80fd5b5061046e6106113660046122b8565b610f74565b348015610621575f80fd5b50610408610630366004612247565b600a6020525f908152604090205460ff1681565b34801561064f575f80fd5b5061040861065e366004612247565b600c6020525f908152604090205460ff1681565b34801561067d575f80fd5b506103b5600e5481565b348015610692575f80fd5b5061046e6106a1366004612247565b610fbf565b3480156106b1575f80fd5b506103b560125481565b3480156106c6575f80fd5b5060195461040890600160a81b900460ff1681565b3480156106e6575f80fd5b506104086106f5366004612247565b61100a565b348015610705575f80fd5b5061046e611016565b348015610719575f80fd5b506103b5610728366004612247565b6001600160a01b03165f9081526006602052604090205490565b34801561074d575f80fd5b506103b5601c5481565b348015610762575f80fd5b5061046e611049565b348015610776575f80fd5b506103b560115481565b34801561078b575f80fd5b5061046e61079a3660046122d4565b61107f565b3480156107aa575f80fd5b5061046e6107b93660046122d4565b6110d4565b3480156107c9575f80fd5b5061046e6107d83660046122d4565b61115d565b3480156107e8575f80fd5b5061046e61118b565b3480156107fc575f80fd5b505f546001600160a01b0316610437565b348015610818575f80fd5b50610408610827366004612247565b600b6020525f908152604090205460ff1681565b348015610846575f80fd5b50601854610437906001600160a01b031681565b348015610865575f80fd5b5060408051808201909152600c81526b5452554d504f4e4f4d49435360a01b60208201526103dc565b348015610899575f80fd5b506103b56108a8366004612247565b6111f6565b3480156108b8575f80fd5b5061046e6108c73660046122eb565b611262565b3480156108d7575f80fd5b50601a54610437906001600160a01b031681565b3480156108f6575f80fd5b50601554610437906001600160a01b031681565b348015610915575f80fd5b506104086109243660046121df565b6112b5565b348015610934575f80fd5b5061046e610943366004612336565b6112c1565b348015610953575f80fd5b5061046e610962366004612247565b61134f565b348015610972575f80fd5b506103b5600d5481565b348015610987575f80fd5b50601654610437906001600160a01b031681565b3480156109a6575f80fd5b506103b560105481565b3480156109bb575f80fd5b5061046e61139a565b3480156109cf575f80fd5b506103b5600f5481565b3480156109e4575f80fd5b5061046e6109f33660046122d4565b6113dc565b348015610a03575f80fd5b506103b5610a123660046123f6565b6001600160a01b039182165f90815260076020908152604080832093909416825291909152205490565b348015610a47575f80fd5b5061046e611431565b348015610a5b575f80fd5b5061046e610a6a366004612247565b6114a6565b348015610a7a575f80fd5b5061046e610a893660046122eb565b611522565b348015610a99575f80fd5b50601454610437906001600160a01b031681565b348015610ab8575f80fd5b506103b5601d5481565b348015610acd575f80fd5b5061046e610adc3660046122eb565b611555565b348015610aec575f80fd5b5060195461040890600160b01b900460ff1681565b60606040518060a00160405280607781526020016125c660779139905090565b335f8181526007602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b7b9086815260200190565b60405180910390a35060015b92915050565b5f546001600160a01b03163314610bbf5760405162461bcd60e51b8152600401610bb690612422565b60405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303815f875af1158015610c0b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c2f9190612442565b50505050565b5f546001600160a01b03163314610c5e5760405162461bcd60e51b8152600401610bb690612422565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383165f9081526007602090815260408083203384529091528120545f1914610d29576040805180820182526016815275496e73756666696369656e7420416c6c6f77616e636560501b6020808301919091526001600160a01b0387165f908152600782528381203382529091529190912054610d059184906115a8565b6001600160a01b0385165f9081526007602090815260408083203384529091529020555b610d348484846115e0565b90505b9392505050565b5f546001600160a01b03163314610d675760405162461bcd60e51b8152600401610bb690612422565b6001600160a01b03165f908152600960205260409020805460ff19169055565b601a5460405163b6f1052760e01b81523360048201526001600160a01b039091169063b6f10527906024015f604051808303815f87803b158015610dc9575f80fd5b505af1158015610c2f573d5f803e3d5ffd5b6003546001600160a01b03165f90815260066020526040812054610e26906002546001600160a01b03165f90815260066020526040902054610e2090600554906119ed565b906119ed565b905090565b5f546001600160a01b03163314610e545760405162461bcd60e51b8152600401610bb690612422565b601a546040516316a4744b60e11b815260048101849052602481018390526001600160a01b0390911690632d48e896906044015b5f604051808303815f87803b158015610e9f575f80fd5b505af1158015610eb1573d5f803e3d5ffd5b505050505050565b5f546001600160a01b03163314610ee25760405162461bcd60e51b8152600401610bb690612422565b600f92909255601055601155565b5f546001600160a01b03163314610f195760405162461bcd60e51b8152600401610bb690612422565b601291909155601355565b5f546001600160a01b03163314610f4d5760405162461bcd60e51b8152600401610bb690612422565b600480546001600160a01b0319166001600160a01b038316179055610f7181611a2e565b50565b5f546001600160a01b03163314610f9d5760405162461bcd60e51b8152600401610bb690612422565b60198054921515600160a81b0260ff60a81b1990931692909217909155601e55565b5f546001600160a01b03163314610fe85760405162461bcd60e51b8152600401610bb690612422565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b5f610b87825f19610b21565b5f546001600160a01b0316331461103f5760405162461bcd60e51b8152600401610bb690612422565b611047611a60565b565b5f546001600160a01b031633146110725760405162461bcd60e51b8152600401610bb690612422565b600554601c819055601d55565b5f546001600160a01b031633146110a85760405162461bcd60e51b8152600401610bb690612422565b600181116110b4575f80fd5b6064816005546110c49190612471565b6110ce9190612488565b601d5550565b5f546001600160a01b031633146110fd5760405162461bcd60e51b8152600401610bb690612422565b601a546040516001624d3b8760e01b03198152600481018390526001600160a01b039091169063ffb2c479906024015b5f604051808303815f87803b158015611144575f80fd5b505af1158015611156573d5f803e3d5ffd5b5050505050565b5f546001600160a01b031633146111865760405162461bcd60e51b8152600401610bb690612422565b601b55565b5f546001600160a01b031633146111b45760405162461bcd60e51b8152600401610bb690612422565b478015610f71576018546040516001600160a01b039091169082156108fc029083905f818181858888f193505050501580156111f2573d5f803e3d5ffd5b5050565b601a5460405163051fa63360e31b81526001600160a01b0383811660048301525f9216906328fd319890602401602060405180830381865afa15801561123e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b8791906124a7565b5f546001600160a01b0316331461128b5760405162461bcd60e51b8152600401610bb690612422565b6001600160a01b03919091165f908152600a60205260409020805460ff1916911515919091179055565b5f610d373384846115e0565b5f546001600160a01b031633146112ea5760405162461bcd60e51b8152600401610bb690612422565b5f5b81518110156111f257600160095f84848151811061130c5761130c6124be565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580611347816124d2565b9150506112ec565b5f546001600160a01b031633146113785760405162461bcd60e51b8152600401610bb690612422565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b5f546001600160a01b031633146113c35760405162461bcd60e51b8152600401610bb690612422565b43600d556019805460ff60b01b1916600160b01b179055565b5f546001600160a01b031633146114055760405162461bcd60e51b8152600401610bb690612422565b60018111611411575f80fd5b6064816005546114219190612471565b61142b9190612488565b601c5550565b5f546001600160a01b0316331461145a5760405162461bcd60e51b8152600401610bb690612422565b601a5f9054906101000a90046001600160a01b03166001600160a01b031663dfbfbc6b6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610dc9575f80fd5b5f546001600160a01b031633146114cf5760405162461bcd60e51b8152600401610bb690612422565b5f80546001600160a01b0319166001600160a01b0383169081179091556040519081527f04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc6861639060200160405180910390a150565b5f546001600160a01b0316331461154b5760405162461bcd60e51b8152600401610bb690612422565b6111f28282611be2565b5f546001600160a01b0316331461157e5760405162461bcd60e51b8152600401610bb690612422565b6001600160a01b03919091165f908152600b60205260409020805460ff1916911515919091179055565b5f81848411156115cb5760405162461bcd60e51b8152600401610bb69190612170565b505f6115d784866124ea565b95945050505050565b5f80546001600160a01b0385811691161480159061160b57505f546001600160a01b03848116911614155b1561166957601954600160b01b900460ff166116695760405162461bcd60e51b815260206004820152601760248201527f686f6c6420757220686f7273657320626967206775792e0000000000000000006044820152606401610bb6565b6001600160a01b0384165f9081526009602052604090205460ff161580156116a957506001600160a01b0383165f9081526009602052604090205460ff16155b6116b1575f80fd5b601954600160a01b900460ff16156116d5576116ce848484611ccf565b9050610d37565b601c54821115806116fd57506001600160a01b0384165f908152600b602052604090205460ff165b61172e5760405162461bcd60e51b81526020600482015260026024820152610e8f60f31b6044820152606401610bb6565b6015546001600160a01b031633148015906117535750601954600160a01b900460ff16155b80156117685750601954600160a81b900460ff165b80156117845750601e54305f9081526006602052604090205410155b1561179157611791611a60565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0387165f908152600690915291909120546117e29184906115a8565b6001600160a01b0385165f90815260066020908152604080832093909355600a90529081205460ff1615801561183057506001600160a01b0384165f908152600a602052604090205460ff16155b61183a5782611845565b611845858585611db2565b6001600160a01b0385165f9081526006602052604090205490915061186a9082611e71565b6001600160a01b038086165f908152600660209081526040808320949094559188168152600c909152205460ff1661190957601a546001600160a01b038681165f8181526006602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca96906044015f604051808303815f87803b1580156118f6575f80fd5b505af1925050508015611907575060015b505b6001600160a01b0384165f908152600c602052604090205460ff1661199557601a546001600160a01b038581165f8181526006602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca96906044015f604051808303815f87803b158015611982575f80fd5b505af1925050508015611993575060015b505b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516119da91815260200190565b60405180910390a3506001949350505050565b5f610d3783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506115a8565b601a54604051633519984160e01b81526001600160a01b0383811660048301529091169063351998419060240161112d565b6019805460ff60a01b1916600160a01b179055305f90815260066020526040812054601054909190611aa590600290611a9f9060649082908790611ecf565b90611f4d565b90505f611ab283836119ed565b9050611abd81611f8e565b5f4790505f611adc6064611a9f600f5485611ecf90919063ffffffff16565b90505f611af96064611a9f60115486611ecf90919063ffffffff16565b90505f611b1b6002611a9f6064611a9f60105489611ecf90919063ffffffff16565b90508315611b5c576018546040516001600160a01b039091169083156108fc029084905f818181858888f19350505050158015611b5a573d5f803e3d5ffd5b505b601a5f9054906101000a90046001600160a01b03166001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004015f604051808303818588803b158015611ba9575f80fd5b505af193505050508015611bbb575060015b508515611bcc57611bcc86826120b2565b50506019805460ff60a01b191690555050505050565b6001600160a01b0382163014801590611c0957506015546001600160a01b03838116911614155b611c11575f80fd5b6001600160a01b0382165f908152600c60205260409020805460ff19168215801591909117909155611c8757601a54604051630a5b654b60e11b81526001600160a01b0384811660048301525f6024830152909116906314b6ca96906044015f604051808303815f87803b158015610e9f575f80fd5b601a546001600160a01b038381165f8181526006602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca9690604401610e88565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0386165f908152600690915291822054611d1f9184906115a8565b6001600160a01b038086165f908152600660205260408082209390935590851681522054611d4d9083611e71565b6001600160a01b038085165f8181526006602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611da09086815260200190565b60405180910390a35060019392505050565b6015545f9081906001600160a01b03858116911614611dd357601254611dd7565b6013545b90505f611de96064611a9f8685611ecf565b305f90815260066020526040902054909150611e059082611e71565b305f81815260066020526040908190209290925590516001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611e559085815260200190565b60405180910390a3611e6784826119ed565b9695505050505050565b5f80611e7d83856124fd565b905083811015610d375760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610bb6565b5f825f03611ede57505f610b87565b5f611ee98385612471565b905082611ef68583612488565b14610d375760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610bb6565b5f610d3783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612144565b6040805160028082526060820183525f9260208301908036833701905050905030815f81518110611fc157611fc16124be565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015612018573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061203c9190612510565b8160018151811061204f5761204f6124be565b60200260200101906001600160a01b031690816001600160a01b0316815250506120793083610b21565b5060145460405163791ac94760e01b81526001600160a01b039091169063791ac94790610e889085905f9086903090429060040161252b565b60145460195460405163f305d71960e01b8152306004820152602481018590525f6044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af115801561211f573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190611156919061259a565b5f81836121645760405162461bcd60e51b8152600401610bb69190612170565b505f6115d78486612488565b5f6020808352835180828501525f5b8181101561219b5785810183015185820160400152820161217f565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610f71575f80fd5b80356121da816121bb565b919050565b5f80604083850312156121f0575f80fd5b82356121fb816121bb565b946020939093013593505050565b5f805f6060848603121561221b575f80fd5b8335612226816121bb565b92506020840135612236816121bb565b929592945050506040919091013590565b5f60208284031215612257575f80fd5b8135610d37816121bb565b5f8060408385031215612273575f80fd5b50508035926020909101359150565b5f805f60608486031215612294575f80fd5b505081359360208301359350604090920135919050565b8015158114610f71575f80fd5b5f80604083850312156122c9575f80fd5b82356121fb816122ab565b5f602082840312156122e4575f80fd5b5035919050565b5f80604083850312156122fc575f80fd5b8235612307816121bb565b91506020830135612317816122ab565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f6020808385031215612347575f80fd5b823567ffffffffffffffff8082111561235e575f80fd5b818501915085601f830112612371575f80fd5b81358181111561238357612383612322565b8060051b604051601f19603f830116810181811085821117156123a8576123a8612322565b6040529182528482019250838101850191888311156123c5575f80fd5b938501935b828510156123ea576123db856121cf565b845293850193928501926123ca565b98975050505050505050565b5f8060408385031215612407575f80fd5b8235612412816121bb565b91506020830135612317816121bb565b60208082526006908201526510a7bbb732b960d11b604082015260600190565b5f60208284031215612452575f80fd5b8151610d37816122ab565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610b8757610b8761245d565b5f826124a257634e487b7160e01b5f52601260045260245ffd5b500490565b5f602082840312156124b7575f80fd5b5051919050565b634e487b7160e01b5f52603260045260245ffd5b5f600182016124e3576124e361245d565b5060010190565b81810381811115610b8757610b8761245d565b80820180821115610b8757610b8761245d565b5f60208284031215612520575f80fd5b8151610d37816121bb565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156125795784516001600160a01b031683529383019391830191600101612554565b50506001600160a01b03969096166060850152505050608001529392505050565b5f805f606084860312156125ac575f80fd5b835192506020840151915060408401519050925092509256fe4675636b4a6f65426964656e4675636b46616e6957696c6c69734675636b426964656e6f6d6963734675636b5765486164456e6f7567684675636b54686544656d6f63726174734d616761576577616e745472756d70496e5468654f6666696365576557616e745452554d504f4e4f4d49435378494e55a2646970667358221220ae4117277deb544d13c54a04c7b3d9a95cd6a48c51e0cb24fd5294d5eaf4e50d64736f6c634300081500336080604052670de0b6b3a7640000600b55610708600c555f600d55348015610025575f80fd5b505f80546001600160a01b03199081163317909155600280548216737a250d5630b4cf539739df2c5dacb4c659f2488d1790556001805490911673576e2bed8f7b46d34016198911cdf9886f78bea7179055611138806100845f395ff3fe608060405260043610610113575f3560e01c80638c21cd521161009d578063dfbfbc6b11610062578063dfbfbc6b14610300578063e2d2e21914610314578063efca2eed14610329578063ffb2c4791461033e578063ffd49c841461035d575f80fd5b80638c21cd5214610240578063997664d71461026f578063b6f1052714610284578063ce7c2ac2146102a3578063d0e30db0146102f8575f80fd5b806328fd3198116100e357806328fd3198146101b95780632d48e896146101d857806335199841146101f75780633a98ef39146102165780634fab0ae81461022b575f80fd5b80630cb6b2be1461012657806311ce023d1461016257806314b6ca961461018557806326987b60146101a4575f80fd5b3661012257610120610372565b005b5f80fd5b348015610131575f80fd5b50600154610145906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016d575f80fd5b50610177600b5481565b604051908152602001610159565b348015610190575f80fd5b5061012061019f366004610ed2565b6105db565b3480156101af575f80fd5b50610177600e5481565b3480156101c4575f80fd5b506101776101d3366004610efc565b610749565b3480156101e3575f80fd5b506101206101f2366004610f17565b6107cf565b348015610202575f80fd5b50610120610211366004610efc565b6107ef565b348015610221575f80fd5b5061017760075481565b348015610236575f80fd5b50610177600d5481565b34801561024b575f80fd5b5061025f61025a366004610efc565b610826565b6040519015158152602001610159565b34801561027a575f80fd5b5061017760085481565b34801561028f575f80fd5b5061012061029e366004610efc565b61086b565b3480156102ae575f80fd5b506102dd6102bd366004610efc565b60066020525f908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610159565b610120610372565b34801561030b575f80fd5b506101206108da565b34801561031f575f80fd5b50610177600a5481565b348015610334575f80fd5b5061017760095481565b348015610349575f80fd5b50610120610358366004610f37565b6109d0565b348015610368575f80fd5b50610177600c5481565b6001546040516370a0823160e01b81523060048201525f916001600160a01b0316906370a0823190602401602060405180830381865afa1580156103b8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103dc9190610f4e565b6040805160028082526060820183529293505f9290916020830190803683375050600254604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015610448573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061046c9190610f65565b815f8151811061047e5761047e610f80565b6001600160a01b03928316602091820292909201015260018054835192169183919081106104ae576104ae610f80565b6001600160a01b03928316602091820292909201015260025460405163b6f9de9560e01b815291169063b6f9de959034906104f3905f90869030904290600401610f94565b5f604051808303818588803b15801561050a575f80fd5b505af115801561051c573d5f803e3d5ffd5b50506001546040516370a0823160e01b81523060048201525f945061059993508692506001600160a01b03909116906370a0823190602401602060405180830381865afa15801561056f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105939190610f4e565b90610ab6565b6008549091506105a99082610afe565b600855600754600b546105d3916105ca916105c49085610b5c565b90610bda565b600a5490610afe565b600a55505050565b5f546001600160a01b031633146105f0575f80fd5b6001600160a01b0382165f90815260066020526040902054156106165761061682610c1b565b5f8111801561063a57506001600160a01b0382165f90815260066020526040902054155b1561069f57600380546001600160a01b0384165f818152600460205260408120839055600183018455929092527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03191690911790556106d1565b801580156106c357506001600160a01b0382165f9081526006602052604090205415155b156106d1576106d182610d2e565b6001600160a01b0382165f908152600660205260409020546007546107019183916106fb91610ab6565b90610afe565b6007556001600160a01b0382165f90815260066020526040902081905561072781610e3e565b6001600160a01b039092165f9081526006602052604090206001019190915550565b6001600160a01b0381165f90815260066020526040812054810361076e57505f919050565b6001600160a01b0382165f9081526006602052604081205461078f90610e3e565b6001600160a01b0384165f908152600660205260409020600101549091508082116107bd57505f9392505050565b6107c78282610ab6565b949350505050565b5f546001600160a01b031633146107e4575f80fd5b600c91909155600d55565b5f546001600160a01b03163314610804575f80fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600c546001600160a01b0382165f908152600560205260408120549091429161084f9190611010565b1080156108655750600d5461086383610749565b115b92915050565b5f546001600160a01b03163314610880575f80fd5b61088933610826565b6108ce5760405162461bcd60e51b81526020600482015260116024820152704d616761206e6f7420726479207965742160781b60448201526064015b60405180910390fd5b6108d733610c1b565b50565b5f546001600160a01b031633146108ef575f80fd5b6001546040516370a0823160e01b81523060048201525f916001600160a01b0316906370a0823190602401602060405180830381865afa158015610935573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109599190610f4e565b60015460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303815f875af11580156109a8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109cc9190611023565b5050565b6003545f8190036109df575050565b5f805f5a90505b84821080156109f457508383105b15610aaf5783600e5410610a07575f600e555b610a386003600e5481548110610a1f57610a1f610f80565b5f918252602090912001546001600160a01b0316610826565b15610a6e57610a6e6003600e5481548110610a5557610a55610f80565b5f918252602090912001546001600160a01b0316610c1b565b610a83610a7c5a8390610ab6565b8390610afe565b91505a600e80549192505f610a9783611042565b91905055508280610aa790611042565b9350506109e6565b5050505050565b5f610af783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610e5a565b9392505050565b5f80610b0a8385611010565b905083811015610af75760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016108c5565b5f825f03610b6b57505f610865565b5f610b76838561105a565b905082610b838583611071565b14610af75760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016108c5565b5f610af783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610e92565b6001600160a01b0381165f908152600660205260408120549003610c3c5750565b5f610c4682610749565b905080156109cc57600954610c5b9082610afe565b60095560015460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303815f875af1158015610cae573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cd29190611023565b506001600160a01b0382165f9081526005602090815260408083204290556006909152902060020154610d059082610afe565b6001600160a01b0383165f90815260066020526040902060028101919091555461072790610e3e565b60038054610d3e90600190611090565b81548110610d4e57610d4e610f80565b5f9182526020808320909101546001600160a01b0384811684526004909252604090922054600380549290931692918110610d8b57610d8b610f80565b5f91825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316815260049182905260408120546003805491939291610dd690600190611090565b81548110610de657610de6610f80565b5f9182526020808320909101546001600160a01b031683528201929092526040019020556003805480610e1b57610e1b6110a3565b5f8281526020902081015f1990810180546001600160a01b031916905501905550565b5f610865600b546105c4600a5485610b5c90919063ffffffff16565b5f8184841115610e7d5760405162461bcd60e51b81526004016108c591906110b7565b505f610e898486611090565b95945050505050565b5f8183610eb25760405162461bcd60e51b81526004016108c591906110b7565b505f610e898486611071565b6001600160a01b03811681146108d7575f80fd5b5f8060408385031215610ee3575f80fd5b8235610eee81610ebe565b946020939093013593505050565b5f60208284031215610f0c575f80fd5b8135610af781610ebe565b5f8060408385031215610f28575f80fd5b50508035926020909101359150565b5f60208284031215610f47575f80fd5b5035919050565b5f60208284031215610f5e575f80fd5b5051919050565b5f60208284031215610f75575f80fd5b8151610af781610ebe565b634e487b7160e01b5f52603260045260245ffd5b5f60808201868352602060808185015281875180845260a08601915082890193505f5b81811015610fdc5784516001600160a01b031683529383019391830191600101610fb7565b50506001600160a01b039690961660408501525050506060015292915050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561086557610865610ffc565b5f60208284031215611033575f80fd5b81518015158114610af7575f80fd5b5f6001820161105357611053610ffc565b5060010190565b808202811582820484141761086557610865610ffc565b5f8261108b57634e487b7160e01b5f52601260045260245ffd5b500490565b8181038181111561086557610865610ffc565b634e487b7160e01b5f52603160045260245ffd5b5f6020808352835180828501525f5b818110156110e2578581018301518582016040015282016110c6565b505f604082860101526040601f19601f830116850101925050509291505056fea264697066735822122043167c109d7637576ac5a5f268b7b9fa33fb29888f7d3c96cde83def140681d064736f6c6343000815003300000000000000000000000017ae675168475efd02f8c7d6df16ef48209d95b7",
    "runtime_bytecode": "608060405260043610610395575f3560e01c8063751039fc116101de578063b515566a11610108578063dd62ed3e1161009d578063f887ea401161006d578063f887ea4014610a8e578063f8b45b0514610aad578063fabe628314610ac2578063ffb54a9914610ae1575f80fd5b8063dd62ed3e146109f8578063dfbfbc6b14610a3c578063f2fde38b14610a50578063f708a64f14610a6f575f80fd5b8063c8d1293d116100d8578063c8d1293d1461099b578063c9567bf9146109b0578063caa5581b146109c4578063d920334e146109d9575f80fd5b8063b515566a14610929578063bb542ef014610948578063bf56b37114610967578063c45a01551461097c575f80fd5b80638b42507f1161017e578063a3a2e89e1161014e578063a3a2e89e146108ad578063a46730e5146108cc578063a8aa1b31146108eb578063a9059cbb1461090a575f80fd5b80638b42507f1461080d5780638ea5220f1461083b57806395d89b411461085a5780639d3311811461088e575f80fd5b806381934031116101b9578063819340311461079f57806382e7ac2e146107be57806389291a8f146107dd578063893d20e8146107f1575f80fd5b8063751039fc1461075757806375df13051461076b5780637db1342c14610780575f80fd5b80632f54bf6e116102bf578063454343771161025f578063571ac8b01161022f578063571ac8b0146106db57806366eb3785146106fa57806370a082311461070e5780637437681e14610742575f80fd5b80634543437714610672578063468c7ee21461068757806347062402146106a65780634a74bb02146106bb575f80fd5b8063351998411161029a57806335199841146105d85780633dab5269146105f75780633f4218e0146106165780634355855a14610644575f80fd5b80632f54bf6e1461057157806330ca34ee1461059e578063313ce567146105bd575f80fd5b80631f53ac02116103355780632b112e49116103055780632b112e491461050a5780632b14ca561461051e5780632d48e896146105335780632dbea2e114610552575f80fd5b80631f53ac021461049957806323b872dd146104b8578063273123b7146104d7578063284f83d6146104f6575f80fd5b80630cb6b2be116103705780630cb6b2be146104185780630d65df9b1461044f57806311dcaffe1461047057806318160ddd14610485575f80fd5b80630445b667146103a057806306fdde03146103c8578063095ea7b3146103e9575f80fd5b3661039c57005b5f80fd5b3480156103ab575f80fd5b506103b5601e5481565b6040519081526020015b60405180910390f35b3480156103d3575f80fd5b506103dc610b01565b6040516103bf9190612170565b3480156103f4575f80fd5b506104086104033660046121df565b610b21565b60405190151581526020016103bf565b348015610423575f80fd5b50600454610437906001600160a01b031681565b6040516001600160a01b0390911681526020016103bf565b34801561045a575f80fd5b5061046e610469366004612209565b610b8d565b005b34801561047b575f80fd5b506103b5601b5481565b348015610490575f80fd5b506005546103b5565b3480156104a4575f80fd5b5061046e6104b3366004612247565b610c35565b3480156104c3575f80fd5b506104086104d2366004612209565b610c80565b3480156104e2575f80fd5b5061046e6104f1366004612247565b610d3e565b348015610501575f80fd5b5061046e610d87565b348015610515575f80fd5b506103b5610ddb565b348015610529575f80fd5b506103b560135481565b34801561053e575f80fd5b5061046e61054d366004612262565b610e2b565b34801561055d575f80fd5b5061046e61056c366004612282565b610eb9565b34801561057c575f80fd5b5061040861058b366004612247565b5f546001600160a01b0391821691161490565b3480156105a9575f80fd5b5061046e6105b8366004612262565b610ef0565b3480156105c8575f80fd5b50604051600981526020016103bf565b3480156105e3575f80fd5b5061046e6105f2366004612247565b610f24565b348015610602575f80fd5b5061046e6106113660046122b8565b610f74565b348015610621575f80fd5b50610408610630366004612247565b600a6020525f908152604090205460ff1681565b34801561064f575f80fd5b5061040861065e366004612247565b600c6020525f908152604090205460ff1681565b34801561067d575f80fd5b506103b5600e5481565b348015610692575f80fd5b5061046e6106a1366004612247565b610fbf565b3480156106b1575f80fd5b506103b560125481565b3480156106c6575f80fd5b5060195461040890600160a81b900460ff1681565b3480156106e6575f80fd5b506104086106f5366004612247565b61100a565b348015610705575f80fd5b5061046e611016565b348015610719575f80fd5b506103b5610728366004612247565b6001600160a01b03165f9081526006602052604090205490565b34801561074d575f80fd5b506103b5601c5481565b348015610762575f80fd5b5061046e611049565b348015610776575f80fd5b506103b560115481565b34801561078b575f80fd5b5061046e61079a3660046122d4565b61107f565b3480156107aa575f80fd5b5061046e6107b93660046122d4565b6110d4565b3480156107c9575f80fd5b5061046e6107d83660046122d4565b61115d565b3480156107e8575f80fd5b5061046e61118b565b3480156107fc575f80fd5b505f546001600160a01b0316610437565b348015610818575f80fd5b50610408610827366004612247565b600b6020525f908152604090205460ff1681565b348015610846575f80fd5b50601854610437906001600160a01b031681565b348015610865575f80fd5b5060408051808201909152600c81526b5452554d504f4e4f4d49435360a01b60208201526103dc565b348015610899575f80fd5b506103b56108a8366004612247565b6111f6565b3480156108b8575f80fd5b5061046e6108c73660046122eb565b611262565b3480156108d7575f80fd5b50601a54610437906001600160a01b031681565b3480156108f6575f80fd5b50601554610437906001600160a01b031681565b348015610915575f80fd5b506104086109243660046121df565b6112b5565b348015610934575f80fd5b5061046e610943366004612336565b6112c1565b348015610953575f80fd5b5061046e610962366004612247565b61134f565b348015610972575f80fd5b506103b5600d5481565b348015610987575f80fd5b50601654610437906001600160a01b031681565b3480156109a6575f80fd5b506103b560105481565b3480156109bb575f80fd5b5061046e61139a565b3480156109cf575f80fd5b506103b5600f5481565b3480156109e4575f80fd5b5061046e6109f33660046122d4565b6113dc565b348015610a03575f80fd5b506103b5610a123660046123f6565b6001600160a01b039182165f90815260076020908152604080832093909416825291909152205490565b348015610a47575f80fd5b5061046e611431565b348015610a5b575f80fd5b5061046e610a6a366004612247565b6114a6565b348015610a7a575f80fd5b5061046e610a893660046122eb565b611522565b348015610a99575f80fd5b50601454610437906001600160a01b031681565b348015610ab8575f80fd5b506103b5601d5481565b348015610acd575f80fd5b5061046e610adc3660046122eb565b611555565b348015610aec575f80fd5b5060195461040890600160b01b900460ff1681565b60606040518060a00160405280607781526020016125c660779139905090565b335f8181526007602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b7b9086815260200190565b60405180910390a35060015b92915050565b5f546001600160a01b03163314610bbf5760405162461bcd60e51b8152600401610bb690612422565b60405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303815f875af1158015610c0b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c2f9190612442565b50505050565b5f546001600160a01b03163314610c5e5760405162461bcd60e51b8152600401610bb690612422565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383165f9081526007602090815260408083203384529091528120545f1914610d29576040805180820182526016815275496e73756666696369656e7420416c6c6f77616e636560501b6020808301919091526001600160a01b0387165f908152600782528381203382529091529190912054610d059184906115a8565b6001600160a01b0385165f9081526007602090815260408083203384529091529020555b610d348484846115e0565b90505b9392505050565b5f546001600160a01b03163314610d675760405162461bcd60e51b8152600401610bb690612422565b6001600160a01b03165f908152600960205260409020805460ff19169055565b601a5460405163b6f1052760e01b81523360048201526001600160a01b039091169063b6f10527906024015f604051808303815f87803b158015610dc9575f80fd5b505af1158015610c2f573d5f803e3d5ffd5b6003546001600160a01b03165f90815260066020526040812054610e26906002546001600160a01b03165f90815260066020526040902054610e2090600554906119ed565b906119ed565b905090565b5f546001600160a01b03163314610e545760405162461bcd60e51b8152600401610bb690612422565b601a546040516316a4744b60e11b815260048101849052602481018390526001600160a01b0390911690632d48e896906044015b5f604051808303815f87803b158015610e9f575f80fd5b505af1158015610eb1573d5f803e3d5ffd5b505050505050565b5f546001600160a01b03163314610ee25760405162461bcd60e51b8152600401610bb690612422565b600f92909255601055601155565b5f546001600160a01b03163314610f195760405162461bcd60e51b8152600401610bb690612422565b601291909155601355565b5f546001600160a01b03163314610f4d5760405162461bcd60e51b8152600401610bb690612422565b600480546001600160a01b0319166001600160a01b038316179055610f7181611a2e565b50565b5f546001600160a01b03163314610f9d5760405162461bcd60e51b8152600401610bb690612422565b60198054921515600160a81b0260ff60a81b1990931692909217909155601e55565b5f546001600160a01b03163314610fe85760405162461bcd60e51b8152600401610bb690612422565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b5f610b87825f19610b21565b5f546001600160a01b0316331461103f5760405162461bcd60e51b8152600401610bb690612422565b611047611a60565b565b5f546001600160a01b031633146110725760405162461bcd60e51b8152600401610bb690612422565b600554601c819055601d55565b5f546001600160a01b031633146110a85760405162461bcd60e51b8152600401610bb690612422565b600181116110b4575f80fd5b6064816005546110c49190612471565b6110ce9190612488565b601d5550565b5f546001600160a01b031633146110fd5760405162461bcd60e51b8152600401610bb690612422565b601a546040516001624d3b8760e01b03198152600481018390526001600160a01b039091169063ffb2c479906024015b5f604051808303815f87803b158015611144575f80fd5b505af1158015611156573d5f803e3d5ffd5b5050505050565b5f546001600160a01b031633146111865760405162461bcd60e51b8152600401610bb690612422565b601b55565b5f546001600160a01b031633146111b45760405162461bcd60e51b8152600401610bb690612422565b478015610f71576018546040516001600160a01b039091169082156108fc029083905f818181858888f193505050501580156111f2573d5f803e3d5ffd5b5050565b601a5460405163051fa63360e31b81526001600160a01b0383811660048301525f9216906328fd319890602401602060405180830381865afa15801561123e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b8791906124a7565b5f546001600160a01b0316331461128b5760405162461bcd60e51b8152600401610bb690612422565b6001600160a01b03919091165f908152600a60205260409020805460ff1916911515919091179055565b5f610d373384846115e0565b5f546001600160a01b031633146112ea5760405162461bcd60e51b8152600401610bb690612422565b5f5b81518110156111f257600160095f84848151811061130c5761130c6124be565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580611347816124d2565b9150506112ec565b5f546001600160a01b031633146113785760405162461bcd60e51b8152600401610bb690612422565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b5f546001600160a01b031633146113c35760405162461bcd60e51b8152600401610bb690612422565b43600d556019805460ff60b01b1916600160b01b179055565b5f546001600160a01b031633146114055760405162461bcd60e51b8152600401610bb690612422565b60018111611411575f80fd5b6064816005546114219190612471565b61142b9190612488565b601c5550565b5f546001600160a01b0316331461145a5760405162461bcd60e51b8152600401610bb690612422565b601a5f9054906101000a90046001600160a01b03166001600160a01b031663dfbfbc6b6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610dc9575f80fd5b5f546001600160a01b031633146114cf5760405162461bcd60e51b8152600401610bb690612422565b5f80546001600160a01b0319166001600160a01b0383169081179091556040519081527f04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc6861639060200160405180910390a150565b5f546001600160a01b0316331461154b5760405162461bcd60e51b8152600401610bb690612422565b6111f28282611be2565b5f546001600160a01b0316331461157e5760405162461bcd60e51b8152600401610bb690612422565b6001600160a01b03919091165f908152600b60205260409020805460ff1916911515919091179055565b5f81848411156115cb5760405162461bcd60e51b8152600401610bb69190612170565b505f6115d784866124ea565b95945050505050565b5f80546001600160a01b0385811691161480159061160b57505f546001600160a01b03848116911614155b1561166957601954600160b01b900460ff166116695760405162461bcd60e51b815260206004820152601760248201527f686f6c6420757220686f7273657320626967206775792e0000000000000000006044820152606401610bb6565b6001600160a01b0384165f9081526009602052604090205460ff161580156116a957506001600160a01b0383165f9081526009602052604090205460ff16155b6116b1575f80fd5b601954600160a01b900460ff16156116d5576116ce848484611ccf565b9050610d37565b601c54821115806116fd57506001600160a01b0384165f908152600b602052604090205460ff165b61172e5760405162461bcd60e51b81526020600482015260026024820152610e8f60f31b6044820152606401610bb6565b6015546001600160a01b031633148015906117535750601954600160a01b900460ff16155b80156117685750601954600160a81b900460ff165b80156117845750601e54305f9081526006602052604090205410155b1561179157611791611a60565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0387165f908152600690915291909120546117e29184906115a8565b6001600160a01b0385165f90815260066020908152604080832093909355600a90529081205460ff1615801561183057506001600160a01b0384165f908152600a602052604090205460ff16155b61183a5782611845565b611845858585611db2565b6001600160a01b0385165f9081526006602052604090205490915061186a9082611e71565b6001600160a01b038086165f908152600660209081526040808320949094559188168152600c909152205460ff1661190957601a546001600160a01b038681165f8181526006602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca96906044015f604051808303815f87803b1580156118f6575f80fd5b505af1925050508015611907575060015b505b6001600160a01b0384165f908152600c602052604090205460ff1661199557601a546001600160a01b038581165f8181526006602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca96906044015f604051808303815f87803b158015611982575f80fd5b505af1925050508015611993575060015b505b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516119da91815260200190565b60405180910390a3506001949350505050565b5f610d3783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506115a8565b601a54604051633519984160e01b81526001600160a01b0383811660048301529091169063351998419060240161112d565b6019805460ff60a01b1916600160a01b179055305f90815260066020526040812054601054909190611aa590600290611a9f9060649082908790611ecf565b90611f4d565b90505f611ab283836119ed565b9050611abd81611f8e565b5f4790505f611adc6064611a9f600f5485611ecf90919063ffffffff16565b90505f611af96064611a9f60115486611ecf90919063ffffffff16565b90505f611b1b6002611a9f6064611a9f60105489611ecf90919063ffffffff16565b90508315611b5c576018546040516001600160a01b039091169083156108fc029084905f818181858888f19350505050158015611b5a573d5f803e3d5ffd5b505b601a5f9054906101000a90046001600160a01b03166001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004015f604051808303818588803b158015611ba9575f80fd5b505af193505050508015611bbb575060015b508515611bcc57611bcc86826120b2565b50506019805460ff60a01b191690555050505050565b6001600160a01b0382163014801590611c0957506015546001600160a01b03838116911614155b611c11575f80fd5b6001600160a01b0382165f908152600c60205260409020805460ff19168215801591909117909155611c8757601a54604051630a5b654b60e11b81526001600160a01b0384811660048301525f6024830152909116906314b6ca96906044015f604051808303815f87803b158015610e9f575f80fd5b601a546001600160a01b038381165f8181526006602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca9690604401610e88565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0386165f908152600690915291822054611d1f9184906115a8565b6001600160a01b038086165f908152600660205260408082209390935590851681522054611d4d9083611e71565b6001600160a01b038085165f8181526006602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611da09086815260200190565b60405180910390a35060019392505050565b6015545f9081906001600160a01b03858116911614611dd357601254611dd7565b6013545b90505f611de96064611a9f8685611ecf565b305f90815260066020526040902054909150611e059082611e71565b305f81815260066020526040908190209290925590516001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611e559085815260200190565b60405180910390a3611e6784826119ed565b9695505050505050565b5f80611e7d83856124fd565b905083811015610d375760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610bb6565b5f825f03611ede57505f610b87565b5f611ee98385612471565b905082611ef68583612488565b14610d375760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610bb6565b5f610d3783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612144565b6040805160028082526060820183525f9260208301908036833701905050905030815f81518110611fc157611fc16124be565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015612018573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061203c9190612510565b8160018151811061204f5761204f6124be565b60200260200101906001600160a01b031690816001600160a01b0316815250506120793083610b21565b5060145460405163791ac94760e01b81526001600160a01b039091169063791ac94790610e889085905f9086903090429060040161252b565b60145460195460405163f305d71960e01b8152306004820152602481018590525f6044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af115801561211f573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190611156919061259a565b5f81836121645760405162461bcd60e51b8152600401610bb69190612170565b505f6115d78486612488565b5f6020808352835180828501525f5b8181101561219b5785810183015185820160400152820161217f565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610f71575f80fd5b80356121da816121bb565b919050565b5f80604083850312156121f0575f80fd5b82356121fb816121bb565b946020939093013593505050565b5f805f6060848603121561221b575f80fd5b8335612226816121bb565b92506020840135612236816121bb565b929592945050506040919091013590565b5f60208284031215612257575f80fd5b8135610d37816121bb565b5f8060408385031215612273575f80fd5b50508035926020909101359150565b5f805f60608486031215612294575f80fd5b505081359360208301359350604090920135919050565b8015158114610f71575f80fd5b5f80604083850312156122c9575f80fd5b82356121fb816122ab565b5f602082840312156122e4575f80fd5b5035919050565b5f80604083850312156122fc575f80fd5b8235612307816121bb565b91506020830135612317816122ab565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f6020808385031215612347575f80fd5b823567ffffffffffffffff8082111561235e575f80fd5b818501915085601f830112612371575f80fd5b81358181111561238357612383612322565b8060051b604051601f19603f830116810181811085821117156123a8576123a8612322565b6040529182528482019250838101850191888311156123c5575f80fd5b938501935b828510156123ea576123db856121cf565b845293850193928501926123ca565b98975050505050505050565b5f8060408385031215612407575f80fd5b8235612412816121bb565b91506020830135612317816121bb565b60208082526006908201526510a7bbb732b960d11b604082015260600190565b5f60208284031215612452575f80fd5b8151610d37816122ab565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610b8757610b8761245d565b5f826124a257634e487b7160e01b5f52601260045260245ffd5b500490565b5f602082840312156124b7575f80fd5b5051919050565b634e487b7160e01b5f52603260045260245ffd5b5f600182016124e3576124e361245d565b5060010190565b81810381811115610b8757610b8761245d565b80820180821115610b8757610b8761245d565b5f60208284031215612520575f80fd5b8151610d37816121bb565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156125795784516001600160a01b031683529383019391830191600101612554565b50506001600160a01b03969096166060850152505050608001529392505050565b5f805f606084860312156125ac575f80fd5b835192506020840151915060408401519050925092509256fe4675636b4a6f65426964656e4675636b46616e6957696c6c69734675636b426964656e6f6d6963734675636b5765486164456e6f7567684675636b54686544656d6f63726174734d616761576577616e745472756d70496e5468654f6666696365576557616e745452554d504f4e4f4d49435378494e55a2646970667358221220ae4117277deb544d13c54a04c7b3d9a95cd6a48c51e0cb24fd5294d5eaf4e50d64736f6c63430008150033",
    "contract_name": "TRUMPONOMICS",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MagaCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"}],\"name\":\"changeFeeAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGas\",\"type\":\"uint256\"}],\"name\":\"changeMagaPrinterGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableSwapBack\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapBackLimit\",\"type\":\"uint256\"}],\"name\":\"changeSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellFee\",\"type\":\"uint256\"}],\"name\":\"changeTotalFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercent\",\"type\":\"uint256\"}],\"name\":\"changeTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercent\",\"type\":\"uint256\"}],\"name\":\"changeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMaga\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"howMuchMAGA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magaPrinter\",\"outputs\":[{\"internalType\":\"contract MagaPrinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magaPrinterGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"manualGas\",\"type\":\"uint256\"}],\"name\":\"manualProcessGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeStuckDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLpWallet\",\"type\":\"address\"}],\"name\":\"setLpWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"magaAddress\",\"type\":\"address\"}],\"name\":\"setMagaCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"setOwnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/*\r\nTRUMPONOMICS IS THE FIRST $MAGA (TRUMP) REFLECTION TOKEN\r\nSIMPLY HOLD TRUMPONOMICS, AND GET REWARDED WITH $MAGA EVERY 30 MINUTES.\r\nhttps://magatrumpeth.com/\r\nhttps://t.me/MAGATrumpPortal\r\nhttps://twitter.com/realDonaldTrump/status/1694886846050771321\r\nMAGA\r\n*/\r\npragma solidity 0.8.21;\r\n// SPDX-License-Identifier: MIT\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!Owner\"); _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IMagaPrinter {\r\n    function setMagaCoin (address magaAddress) external;\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n    function goMAGA(address shareholder) external;\r\n    function removeStuckDividends() external;\r\n}\r\n\r\ncontract MagaPrinter is IMagaPrinter {\r\n\r\n    using SafeMath for uint256;\r\n    address _token;\r\n\r\n    address public MagaCoin;\r\n\r\n    IDEXRouter router;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 18;\r\n\r\n    uint256 public minPeriod = 30 minutes;\r\n    uint256 public minDistribution = 0;\r\n\r\n    uint256 public currentIndex;\r\n    bool initialized;\r\n\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor () {\r\n        _token = msg.sender;\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        MagaCoin = 0x576e2BeD8F7b46D34016198911Cdf9886f78bea7;//MAGA\r\n    }\r\n    \r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n\r\n    function removeStuckDividends() external onlyToken {\r\n        uint256 balance = IERC20(MagaCoin).balanceOf(address(this));\r\n\r\n        IERC20(MagaCoin).transfer(\r\n            address(msg.sender),\r\n            balance\r\n        );\r\n    }\r\n\r\n    function setMagaCoin(address magaAddress) external override onlyToken {\r\n        MagaCoin = magaAddress;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 newMinPeriod, uint256 newMinDistribution) external override onlyToken {\r\n        minPeriod = newMinPeriod;\r\n        minDistribution = newMinDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() public payable override {\r\n\r\n        uint256 balanceBefore = IERC20(MagaCoin).balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(MagaCoin);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = IERC20(MagaCoin).balanceOf(address(this)).sub(balanceBefore);\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n    \r\n    function process(uint256 gas) external override {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 iterations = 0;\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n\r\n            if(currentIndex >= shareholderCount){ currentIndex = 0; }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) public view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            IERC20(MagaCoin).transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n    \r\n    function goMAGA(address) external override onlyToken {\r\n        require(shouldDistribute(msg.sender), \"Maga not rdy yet!\");\r\n        distributeDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract TRUMPONOMICS is IERC20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address private WETH;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    address public MagaCoin = 0x576e2BeD8F7b46D34016198911Cdf9886f78bea7; //MAGA\r\n\r\n    string private constant _name = \"FuckJoeBidenFuckFaniWillisFuckBidenomicsFuckWeHadEnoughFuckTheDemocratsMagaWewantTrumpInTheOfficeWeWantTRUMPONOMICSxINU\";\r\n    string private constant _symbol = \"TRUMPONOMICS\";\r\n    uint8 private constant _decimals = 9;\r\n    \r\n    uint256 private _totalSupply = 100000000000 * (10 ** _decimals);\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => uint256) private cooldown;\r\n\r\n    mapping (address => bool) private bots; \r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isDividendExempt;\r\n\r\n    uint256 public launchedAt;\r\n    \r\n    uint256 public allocationSum = 100;\r\n\r\n    uint256 public toReflections = 30;\r\n    uint256 public toLiquidity = 10;\r\n    uint256 public toMarketing = 60;\r\n\r\n    uint256 public buyFee = 25;\r\n    uint256 public sellFee = 25;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    address public factory;\r\n    address private tokenOwner;\r\n    address public devWallet = 0x17aE675168475EFD02F8c7D6dF16eF48209d95b7;\r\n    address private lpWallet = 0x17aE675168475EFD02F8c7D6dF16eF48209d95b7;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public tradingOpen = false;\r\n    \r\n    MagaPrinter public magaPrinter;\r\n    uint256 public magaPrinterGas = 0;\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    uint256 public maxTx = _totalSupply.mul(20).div(1000);\r\n    uint256 public maxWallet = _totalSupply.mul(30).div(1000);\r\n    uint256 public swapThreshold = _totalSupply.mul(5).div(10000);\r\n\r\n    constructor (\r\n        address _owner        \r\n    ) Auth(_owner) {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            \r\n        WETH = router.WETH();\r\n        \r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        \r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        magaPrinter = new MagaPrinter();\r\n        \r\n        isFeeExempt[_owner] = true;\r\n        isFeeExempt[devWallet] = true;             \r\n\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;    \r\n\r\n        isTxLimitExempt[_owner] = true;\r\n        isTxLimitExempt[pair] = true;\r\n        isTxLimitExempt[DEAD] = true;    \r\n\r\n\r\n        _balances[_owner] = _totalSupply;\r\n    \r\n        emit Transfer(address(0), _owner, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function _setMagaCoin(address magaAddress) internal {\r\n        magaPrinter.setMagaCoin(magaAddress);\r\n    }\r\n\r\n    function setMagaCoin(address magaAddress) external onlyOwner {\r\n        MagaCoin = magaAddress;\r\n        _setMagaCoin(magaAddress);\r\n    }\r\n\r\n    function setBots(address[] memory bots_) external onlyOwner {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function openTrading() external onlyOwner {\r\n        launchedAt = block.number;\r\n        tradingOpen = true;\r\n    } \r\n\r\n    function changeTotalFees(uint256 newBuyFee, uint256 newSellFee) external onlyOwner {\r\n        buyFee = newBuyFee;\r\n        sellFee = newSellFee; \r\n    } \r\n    \r\n    function changeFeeAllocation(uint256 newRewardFee, uint256 newLpFee, uint256 newMarketingFee) external onlyOwner {\r\n        toReflections = newRewardFee;\r\n        toLiquidity = newLpFee;\r\n        toMarketing = newMarketingFee;\r\n    }\r\n\r\n    function changeTxLimit(uint256 amountPercent) external onlyOwner {\r\n        require(amountPercent>1);\r\n        maxTx = (_totalSupply * amountPercent ) / 100;\r\n    }\r\n\r\n    function changeWalletLimit(uint256 amountPercent) external onlyOwner {\r\n        require(amountPercent>1);\r\n        maxWallet = (_totalSupply * amountPercent ) / 100;\r\n    }\r\n\r\n     function removeLimits() external onlyOwner{\r\n        maxTx = _totalSupply;\r\n        maxWallet = _totalSupply;\r\n    }\r\n    \r\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function changeIsTxLimitExempt(address holder, bool exempt) external onlyOwner {      \r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setDevWallet(address payable newDevWallet) external onlyOwner {\r\n        devWallet = payable(newDevWallet);\r\n    }\r\n\r\n    function setLpWallet(address newLpWallet) external onlyOwner {\r\n        lpWallet = newLpWallet;\r\n    }    \r\n\r\n    function setOwnerWallet(address payable newOwnerWallet) external onlyOwner {\r\n        tokenOwner = newOwnerWallet;\r\n    }     \r\n\r\n    function changeSwapBackSettings(bool enableSwapBack, uint256 newSwapBackLimit) external onlyOwner {\r\n        swapAndLiquifyEnabled  = enableSwapBack;\r\n        swapThreshold = newSwapBackLimit;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 newMinPeriod, uint256 newMinDistribution) external onlyOwner {\r\n        magaPrinter.setDistributionCriteria(newMinPeriod, newMinDistribution);        \r\n    }\r\n\r\n    function delBot(address notbot) external onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n\r\n    function _setIsDividendExempt(address holder, bool exempt) internal {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            magaPrinter.setShare(holder, 0);\r\n        }else{\r\n            magaPrinter.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) external onlyOwner {\r\n        _setIsDividendExempt(holder, exempt);\r\n    }\r\n\r\n    function changeMagaPrinterGas(uint256 newGas) external onlyOwner {\r\n        magaPrinterGas = newGas;\r\n    }           \r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if (sender!= owner && recipient!= owner) require(tradingOpen, \"hold ur horses big guy.\"); //transfers disabled before tradingActive\r\n        require(!bots[sender] && !bots[recipient]);\r\n\r\n        if(inSwapAndLiquify){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        require(amount <= maxTx || isTxLimitExempt[sender], \"tx\");\r\n\r\n        if(msg.sender != pair && !inSwapAndLiquify && swapAndLiquifyEnabled && _balances[address(this)] >= swapThreshold){ swapBack(); }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        \r\n        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient] ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n        // Dividend tracker\r\n        if(!isDividendExempt[sender]) {\r\n            try magaPrinter.setShare(sender, _balances[sender]) {} catch {}\r\n        }\r\n\r\n        if(!isDividendExempt[recipient]) {\r\n            try magaPrinter.setShare(recipient, _balances[recipient]) {} catch {} \r\n        }\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }    \r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }  \r\n    \r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        uint256 feeApplicable = pair == recipient ? sellFee : buyFee;\r\n        uint256 feeAmount = amount.mul(feeApplicable).div(100);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n    \r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        approve(address(this), tokenAmount);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            lpWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() internal lockTheSwap {\r\n    \r\n        uint256 tokenBalance = _balances[address(this)]; \r\n        uint256 tokensForLiquidity = tokenBalance.mul(toLiquidity).div(100).div(2);     \r\n        uint256 amountToSwap = tokenBalance.sub(tokensForLiquidity);\r\n\r\n        swapTokensForEth(amountToSwap);\r\n\r\n        uint256 totalEthBalance = address(this).balance;\r\n        uint256 ethForMagaCoin = totalEthBalance.mul(toReflections).div(100);\r\n        uint256 ethForMarketing = totalEthBalance.mul(toMarketing).div(100);\r\n        uint256 ethForLiquidity = totalEthBalance.mul(toLiquidity).div(100).div(2);\r\n      \r\n        if (totalEthBalance > 0){\r\n            payable(devWallet).transfer(ethForMarketing);\r\n        }\r\n        \r\n        try magaPrinter.deposit{value: ethForMagaCoin}() {} catch {}\r\n        \r\n        if (tokensForLiquidity > 0){\r\n            addLiquidity(tokensForLiquidity, ethForLiquidity);\r\n        }\r\n    }\r\n\r\n    function manualSwapBack() external onlyOwner {\r\n        swapBack();\r\n    }\r\n\r\n    function clearStuckEth() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if(contractETHBalance > 0){          \r\n            payable(devWallet).transfer(contractETHBalance);\r\n        }\r\n    }\r\n\r\n    function rescueAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n        IERC20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n    function manualProcessGas(uint256 manualGas) external onlyOwner {\r\n        magaPrinter.process(manualGas);\r\n    }\r\n\r\n    function howMuchMAGA(address shareholder) external view returns (uint256) {\r\n        return magaPrinter.getUnpaidEarnings(shareholder);\r\n    }\r\n\r\n    function claimMaga() external {\r\n        magaPrinter.goMAGA(msg.sender);\r\n    }\r\n\r\n    function removeStuckDividends() external onlyOwner {\r\n     magaPrinter.removeStuckDividends();\r\n    }\r\n}",
    "etherscan_verified": true
}