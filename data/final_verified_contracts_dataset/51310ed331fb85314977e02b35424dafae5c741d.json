{
    "address": "0x51310eD331fB85314977E02B35424dafAe5c741d",
    "tx_hash": "b71a4d4702b956a044e63ce7c4a7daf71a2d07b4ffdfe8afe64557d12c04570d",
    "block_number": 18006665,
    "timestamp": 1693147343,
    "gas_used_in_creation": 1348750,
    "creation_bytecode": "",
    "runtime_bytecode": "6080604052600436106100ab5760003560e01c8063715018a611610064578063715018a6146103485780637cb549be1461035f5780638da5cb5b1461038a578063ce7c2ac2146103b5578063f2fde38b146103f4578063fc0c546a1461041d5761025b565b8063144fa6d71461026057806336bdee74146102895780633ccfd60b146102b457806347e7ef24146102cb5780634e71d92d146102f45780635eebea201461030b5761025b565b3661025b5760003414156100be57610259565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161011b91906110fc565b60206040518083038186803b15801561013357600080fd5b505afa158015610147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016b9190610f79565b905060008114156101a8576101a2600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610448565b50610259565b60006002346101b791906112ff565b9050600082670de0b6b3a7640000836101d09190611330565b6101da91906112ff565b905080600360008282546101ee91906112a9565b92505081905550816005600082825461020791906112a9565b925050819055506000823461021c919061138a565b9050600081111561025457610253600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682610448565b5b505050505b005b600080fd5b34801561026c57600080fd5b5061028760048036038101906102829190610f50565b61053c565b005b34801561029557600080fd5b5061029e610590565b6040516102ab919061123b565b60405180910390f35b3480156102c057600080fd5b506102c9610596565b005b3480156102d757600080fd5b506102f260048036038101906102ed9190610eeb565b610762565b005b34801561030057600080fd5b506103096108b6565b005b34801561031757600080fd5b50610332600480360381019061032d9190610ec2565b61097d565b60405161033f919061123b565b60405180910390f35b34801561035457600080fd5b5061035d610a26565b005b34801561036b57600080fd5b50610374610a3a565b604051610381919061123b565b60405180910390f35b34801561039657600080fd5b5061039f610a40565b6040516103ac91906110fc565b60405180910390f35b3480156103c157600080fd5b506103dc60048036038101906103d79190610ec2565b610a69565b6040516103eb93929190611256565b60405180910390f35b34801561040057600080fd5b5061041b60048036038101906104169190610ec2565b610a93565b005b34801561042957600080fd5b50610432610b17565b60405161043f9190611140565b60405180910390f35b8047101561048b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610482906111bb565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516104b1906110e7565b60006040518083038185875af1925050503d80600081146104ee576040519150601f19603f3d011682016040523d82523d6000602084013e6104f3565b606091505b5050905080610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052e9061119b565b60405180910390fd5b505050565b610544610b3d565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061058d610a26565b50565b60055481565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090506000816020015111610649576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610640906111fb565b60405180910390fd5b4262093a80826000015161065d91906112a9565b1061069d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106949061121b565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3383602001516040518363ffffffff1660e01b81526004016106fe929190611117565b602060405180830381600087803b15801561071857600080fd5b505af115801561072c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107509190610f27565b5061075f338260006001610bbb565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60008111610829576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108209061117b565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090506108b183828484602001516108aa91906112a9565b6001610bbb565b505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090506000816020015111610969576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610960906111fb565b60405180910390fd5b61097a338283602001516000610bbb565b50565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050670de0b6b3a76400008160400151600354610a05919061138a565b8260200151610a149190611330565b610a1e91906112ff565b915050919050565b610a2e610b3d565b610a386000610d8d565b565b60035481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60016020528060005260406000206000915090508060000154908060010154908060020154905083565b610a9b610b3d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b029061115b565b60405180910390fd5b610b1481610d8d565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b45610e51565b73ffffffffffffffffffffffffffffffffffffffff16610b63610a40565b73ffffffffffffffffffffffffffffffffffffffff1614610bb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb0906111db565b60405180910390fd5b565b600080846020015114610bff57670de0b6b3a76400008460400151600354610be3919061138a565b8560200151610bf29190611330565b610bfc91906112ff565b90505b6000831415610c6757600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090555050610d72565b8115610cef576040518060600160405280428152602001848152602001600354815250600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050610d71565b604051806060016040528085600001518152602001848152602001600354815250600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050505b5b6000811115610d8657610d858582610448565b5b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081359050610e6881611608565b92915050565b600081519050610e7d8161161f565b92915050565b600081359050610e9281611636565b92915050565b600081359050610ea78161164d565b92915050565b600081519050610ebc8161164d565b92915050565b600060208284031215610ed457600080fd5b6000610ee284828501610e59565b91505092915050565b60008060408385031215610efe57600080fd5b6000610f0c85828601610e59565b9250506020610f1d85828601610e98565b9150509250929050565b600060208284031215610f3957600080fd5b6000610f4784828501610e6e565b91505092915050565b600060208284031215610f6257600080fd5b6000610f7084828501610e83565b91505092915050565b600060208284031215610f8b57600080fd5b6000610f9984828501610ead565b91505092915050565b610fab816113be565b82525050565b610fba81611418565b82525050565b6000610fcd602683611298565b9150610fd88261149a565b604082019050919050565b6000610ff0602083611298565b9150610ffb826114e9565b602082019050919050565b6000611013603a83611298565b915061101e82611512565b604082019050919050565b6000611036601d83611298565b915061104182611561565b602082019050919050565b6000611059602083611298565b91506110648261158a565b602082019050919050565b600061107c601283611298565b9150611087826115b3565b602082019050919050565b600061109f60008361128d565b91506110aa826115dc565b600082019050919050565b60006110c2601783611298565b91506110cd826115df565b602082019050919050565b6110e18161140e565b82525050565b60006110f282611092565b9150819050919050565b60006020820190506111116000830184610fa2565b92915050565b600060408201905061112c6000830185610fa2565b61113960208301846110d8565b9392505050565b60006020820190506111556000830184610fb1565b92915050565b6000602082019050818103600083015261117481610fc0565b9050919050565b6000602082019050818103600083015261119481610fe3565b9050919050565b600060208201905081810360008301526111b481611006565b9050919050565b600060208201905081810360008301526111d481611029565b9050919050565b600060208201905081810360008301526111f48161104c565b9050919050565b600060208201905081810360008301526112148161106f565b9050919050565b60006020820190508181036000830152611234816110b5565b9050919050565b600060208201905061125060008301846110d8565b92915050565b600060608201905061126b60008301866110d8565b61127860208301856110d8565b61128560408301846110d8565b949350505050565b600081905092915050565b600082825260208201905092915050565b60006112b48261140e565b91506112bf8361140e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112f4576112f361143c565b5b828201905092915050565b600061130a8261140e565b91506113158361140e565b9250826113255761132461146b565b5b828204905092915050565b600061133b8261140e565b91506113468361140e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561137f5761137e61143c565b5b828202905092915050565b60006113958261140e565b91506113a08361140e565b9250828210156113b3576113b261143c565b5b828203905092915050565b60006113c9826113ee565b9050919050565b60008115159050919050565b60006113e7826113be565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006114238261142a565b9050919050565b6000611435826113ee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f20696e697469616c206465706f7369740000000000000000000000000000600082015250565b50565b7f7769746864726177206166746572206f6e65207765656b000000000000000000600082015250565b611611816113be565b811461161c57600080fd5b50565b611628816113d0565b811461163357600080fd5b50565b61163f816113dc565b811461164a57600080fd5b50565b6116568161140e565b811461166157600080fd5b5056fea264697066735822122099cdb51e1b8de5ece492da08540baf09f9e2c2b89f8c0604120520f3ef2ca3c464736f6c63430008010033",
    "contract_name": "Staking",
    "compiler_version": "v0.8.1+commit.df193b15",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Staking is Ownable {\\n\\tstruct Share {\\n\\t\\tuint depositTime;\\n\\t\\tuint initialDeposit;\\n\\t\\tuint sumETH;\\n\\t}\\n\\n\\tmapping(address => Share) public shares;\\n\\tIERC20 public token;\\n\\tuint public sumETH;\\n\\tuint private constant PRECISION = 1e18;\\n\\taddress private _taxWallet;\\n\\tuint public totalETH;\\n\\n\\tmodifier onlyToken() {\\n\\t\\tassert(msg.sender == address(token));\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor() {\\n\\t\\t_taxWallet = msg.sender;\\n\\t}\\n\\n\\tfunction setToken(IERC20 token_) external onlyOwner {\\n\\t\\ttoken = token_;\\n\\t\\tsuper.renounceOwnership();\\n\\t}\\n\\n\\tfunction deposit(address who, uint amount) external onlyToken {\\n\\t\\trequire(amount > 0, \\\"Amount must be greater than zero\\\");\\n\\t\\tShare memory share = shares[who];\\n\\t\\t_payoutGainsUpdateShare(who, share, share.initialDeposit + amount, true);\\n\\t}\\n\\n\\tfunction withdraw() external {\\n\\t\\tShare memory share = shares[msg.sender];\\n\\t\\trequire(share.initialDeposit > 0, \\\"No initial deposit\\\");\\n\\t\\trequire(share.depositTime + 1 weeks < block.timestamp, \\\"withdraw after one week\\\");\\n\\t\\ttoken.transfer(msg.sender, share.initialDeposit);\\n\\t\\t_payoutGainsUpdateShare(msg.sender, share, 0, true);\\n\\t}\\n\\n\\tfunction claim() external {\\n\\t\\tShare memory share = shares[msg.sender];\\n\\t\\trequire(share.initialDeposit > 0, \\\"No initial deposit\\\");\\n\\t\\t_payoutGainsUpdateShare(msg.sender, share, share.initialDeposit, false);\\n\\t}\\n\\n\\tfunction _payoutGainsUpdateShare(address who, Share memory share, uint newAmount, bool resetTimer) private {\\n\\t\\tuint gains;\\n\\t\\tif (share.initialDeposit != 0) gains = share.initialDeposit * (sumETH - share.sumETH) / PRECISION;\\n\\n\\t\\tif (newAmount == 0) delete shares[who];\\n\\t\\telse if (resetTimer) shares[who] = Share(block.timestamp, newAmount, sumETH);\\n\\t\\telse shares[who] = Share(share.depositTime, newAmount, sumETH);\\n\\n\\t\\tif (gains > 0) Address.sendValue(payable(who), gains);\\n\\t}\\n\\n\\tfunction pending(address who) external view returns (uint) {\\n\\t\\tShare memory share = shares[who];\\n\\t\\treturn share.initialDeposit * (sumETH - share.sumETH) / PRECISION;\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\tif (msg.value == 0) return;\\n\\n\\t\\tuint balance = token.balanceOf(address(this));\\n\\t\\tif (balance == 0) return Address.sendValue(payable(_taxWallet), msg.value);\\n\\n\\t\\tuint amount = msg.value / 2;\\n\\t\\tuint gpus = amount * PRECISION / balance;\\n\\t\\tsumETH += gpus;\\n\\t\\ttotalETH += amount;\\n\\n\\t\\tuint taxAmount = msg.value - amount;\\n\\t\\tif (taxAmount > 0) Address.sendValue(payable(_taxWallet), taxAmount);\\n\\t}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
    "etherscan_verified": true
}