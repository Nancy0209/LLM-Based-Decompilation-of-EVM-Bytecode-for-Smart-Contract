{
    "address": "0x9BF903014c2dbD36f8818eBfc7D840B2cDB6A25b",
    "tx_hash": "63c05ece978c75b7201707d3067f92dc533cdad1baa7593336997a46366bb39f",
    "block_number": 18000027,
    "timestamp": 1693067219,
    "gas_used_in_creation": 5839433,
    "creation_bytecode": "60c0604052600680546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d179055600e805462ffffff191660019081179091556010805460ff191690911790553480156200005657600080fd5b50604080518082018252601f81527f4861727279506f747465724f62616d61506f6c697469636f73363636496e750060208083019182528351808501909452600884526748504f503636364960c01b908401528151919291620000bc9160039162000718565b508051620000d290600490602084019062000718565b505050620000ef620000e96200046560201b60201c565b62000469565b6006546001600160a01b031662000108816001620004bb565b6001600160a01b03811660808190526040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa15801562000153573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001799190620007be565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ed9190620007be565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af11580156200023b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002619190620007be565b6001600160a01b031660a08190526200027c906001620004bb565b60a0516200028c90600162000535565b6a108b2a2c28029094000000600b819055600d556000808080808080806b033b2e3c9fd0803ce8000000612710620002c682600a62000806565b620002d2919062000828565b600c5560158990556016889055601787905560188690558587620002f78a8c6200084b565b6200030391906200084b565b6200030f91906200084b565b601455601a859055601b849055601c839055601d82905581836200033486886200084b565b6200034091906200084b565b6200034c91906200084b565b601955600780546001600160a01b0319908116730c01e8cf492b611adfad67a05700db7cc40b47f91790915560088054821673ddee196b5a8e4d03a2414d58783ba183f9da114c179055600980548216734959f31cb2f640a013ba464a9e44c5858bf5be98179055600a805490911673786e4107773d0ddc67cd0bfae4e9cffa80df5d6e179055620003f2620003ea6005546001600160a01b031690565b600162000589565b620003ff30600162000589565b6200040e61dead600162000589565b6200042d620004256005546001600160a01b031690565b6001620004bb565b6200043a306001620004bb565b6200044961dead6001620004bb565b62000455338262000633565b50505050505050505050620008a3565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6005546001600160a01b031633146200050a5760405162461bcd60e51b81526020600482018190526024820152600080516020620039d883398151915260448201526064015b60405180910390fd5b6001600160a01b03919091166000908152602360205260409020805460ff1916911515919091179055565b6001600160a01b038216600081815260246020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6005546001600160a01b03163314620005d45760405162461bcd60e51b81526020600482018190526024820152600080516020620039d8833981519152604482015260640162000501565b6001600160a01b038216600081815260226020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6001600160a01b0382166200068b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640162000501565b80600260008282546200069f91906200084b565b90915550506001600160a01b03821660009081526020819052604081208054839290620006ce9084906200084b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620007269062000866565b90600052602060002090601f0160209004810192826200074a576000855562000795565b82601f106200076557805160ff191683800117855562000795565b8280016001018555821562000795579182015b828111156200079557825182559160200191906001019062000778565b50620007a3929150620007a7565b5090565b5b80821115620007a35760008155600101620007a8565b600060208284031215620007d157600080fd5b81516001600160a01b0381168114620007e957600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615620008235762000823620007f0565b500290565b6000826200084657634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115620008615762000861620007f0565b500190565b600181811c908216806200087b57607f821691505b602082108114156200089d57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a0516130c262000916600039600081816105c5015281816112160152818161140001528181611bfe01528181611c6a0152611d5201526000818161047001528181611d140152818161297601528181612a2f01528181612a6b01528181612ae50152612b4d01526130c26000f3fe6080604052600436106103c75760003560e01c80638ea5220f116101f2578063c876d0b91161010d578063e884f260116100a0578063f63743421161006f578063f637434214610b5f578063f8b45b0514610b75578063fb002c9714610b8b578063fd72e22a14610ba157600080fd5b8063e884f26014610afe578063f11a24d314610b13578063f1c1c14f14610b29578063f2fde38b14610b3f57600080fd5b8063dd62ed3e116100dc578063dd62ed3e14610a52578063e2f4560514610a98578063e596219514610aae578063e7ad9fcd14610ade57600080fd5b8063c876d0b9146109ec578063c8c8ebe414610a06578063d257b34f14610a1c578063d85ba06314610a3c57600080fd5b8063a9059cbb11610185578063bbc0c74211610154578063bbc0c7421461096d578063c02466681461098c578063c18bc195146109ac578063c5b52609146109cc57600080fd5b8063a9059cbb146108dd578063ad68ff72146108fd578063ae303d071461091d578063b62496f51461093d57600080fd5b80639c3b4fdc116101c15780639c3b4fdc1461087b5780639fccce3214610891578063a0d82dc5146108a7578063a457c2d7146108bd57600080fd5b80638ea5220f14610806578063924de9b71461082657806395d89b41146108465780639a7a23d61461085b57600080fd5b80634f77f6c0116102e2578063715018a6116102755780637f5d4ab7116102445780637f5d4ab71461079c57806382aa7c68146107b257806386871050146107d25780638da5cb5b146107e857600080fd5b8063715018a61461073257806373dd858c14610747578063751039fc146107675780637571336a1461077c57600080fd5b80636a486a8e116102b15780636a486a8e146106a65780636aebf627146106bc5780636ddd1713146106dc57806370a08231146106fc57600080fd5b80634f77f6c0146106215780634fbee19314610637578063534c0906146106705780635a139dd41461069057600080fd5b806323b872dd1161035a5780633950935111610329578063395093511461059357806349bd5a5e146105b35780634a62bb65146105e75780634ec39ba91461060157600080fd5b806323b872dd1461052157806327c8f835146105415780632e6ed7ef14610557578063313ce5671461057757600080fd5b806318160ddd1161039657806318160ddd146104aa5780631816467f146104c95780631a8145bb146104eb578063203e727e1461050157600080fd5b806306fdde03146103d3578063095ea7b3146103fe57806310d5de531461042e5780631694505e1461045e57600080fd5b366103ce57005b600080fd5b3480156103df57600080fd5b506103e8610bc1565b6040516103f59190612bc5565b60405180910390f35b34801561040a57600080fd5b5061041e610419366004612c2f565b610c53565b60405190151581526020016103f5565b34801561043a57600080fd5b5061041e610449366004612c5b565b60236020526000908152604090205460ff1681565b34801561046a57600080fd5b506104927f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016103f5565b3480156104b657600080fd5b506002545b6040519081526020016103f5565b3480156104d557600080fd5b506104e96104e4366004612c5b565b610c69565b005b3480156104f757600080fd5b506104bb601f5481565b34801561050d57600080fd5b506104e961051c366004612c78565b610cf9565b34801561052d57600080fd5b5061041e61053c366004612c91565b610dd6565b34801561054d57600080fd5b5061049261dead81565b34801561056357600080fd5b506104e9610572366004612cd2565b610e80565b34801561058357600080fd5b50604051601281526020016103f5565b34801561059f57600080fd5b5061041e6105ae366004612c2f565b610ef6565b3480156105bf57600080fd5b506104927f000000000000000000000000000000000000000000000000000000000000000081565b3480156105f357600080fd5b50600e5461041e9060ff1681565b34801561060d57600080fd5b50600954610492906001600160a01b031681565b34801561062d57600080fd5b506104bb601d5481565b34801561064357600080fd5b5061041e610652366004612c5b565b6001600160a01b031660009081526022602052604090205460ff1690565b34801561067c57600080fd5b50600654610492906001600160a01b031681565b34801561069c57600080fd5b506104bb60185481565b3480156106b257600080fd5b506104bb60195481565b3480156106c857600080fd5b506104e96106d7366004612c5b565b610f32565b3480156106e857600080fd5b50600e5461041e9062010000900460ff1681565b34801561070857600080fd5b506104bb610717366004612c5b565b6001600160a01b031660009081526020819052604090205490565b34801561073e57600080fd5b506104e9610fb9565b34801561075357600080fd5b506104e9610762366004612c5b565b610fef565b34801561077357600080fd5b5061041e611076565b34801561078857600080fd5b506104e9610797366004612d14565b6110b3565b3480156107a857600080fd5b506104bb601e5481565b3480156107be57600080fd5b506104e96107cd366004612c78565b611108565b3480156107de57600080fd5b506104bb601a5481565b3480156107f457600080fd5b506005546001600160a01b0316610492565b34801561081257600080fd5b50600854610492906001600160a01b031681565b34801561083257600080fd5b506104e9610841366004612d49565b611195565b34801561085257600080fd5b506103e86111db565b34801561086757600080fd5b506104e9610876366004612d14565b6111ea565b34801561088757600080fd5b506104bb60175481565b34801561089d57600080fd5b506104bb60205481565b3480156108b357600080fd5b506104bb601c5481565b3480156108c957600080fd5b5061041e6108d8366004612c2f565b6112ca565b3480156108e957600080fd5b5061041e6108f8366004612c2f565b611363565b34801561090957600080fd5b50600754610492906001600160a01b031681565b34801561092957600080fd5b506104e9610938366004612d64565b611370565b34801561094957600080fd5b5061041e610958366004612c5b565b60246020526000908152604090205460ff1681565b34801561097957600080fd5b50600e5461041e90610100900460ff1681565b34801561099857600080fd5b506104e96109a7366004612d14565b611472565b3480156109b857600080fd5b506104e96109c7366004612c78565b6114fb565b3480156109d857600080fd5b506104e96109e7366004612c5b565b6115cc565b3480156109f857600080fd5b5060105461041e9060ff1681565b348015610a1257600080fd5b506104bb600b5481565b348015610a2857600080fd5b5061041e610a37366004612c78565b611653565b348015610a4857600080fd5b506104bb60145481565b348015610a5e57600080fd5b506104bb610a6d366004612de8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610aa457600080fd5b506104bb600c5481565b348015610aba57600080fd5b5061041e610ac9366004612c5b565b60136020526000908152604090205460ff1681565b348015610aea57600080fd5b506104e9610af9366004612cd2565b6117aa565b348015610b0a57600080fd5b5061041e61181a565b348015610b1f57600080fd5b506104bb60165481565b348015610b3557600080fd5b506104bb60155481565b348015610b4b57600080fd5b506104e9610b5a366004612c5b565b611857565b348015610b6b57600080fd5b506104bb601b5481565b348015610b8157600080fd5b506104bb600d5481565b348015610b9757600080fd5b506104bb60215481565b348015610bad57600080fd5b50600a54610492906001600160a01b031681565b606060038054610bd090612e21565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfc90612e21565b8015610c495780601f10610c1e57610100808354040283529160200191610c49565b820191906000526020600020905b815481529060010190602001808311610c2c57829003601f168201915b5050505050905090565b6000610c603384846118f2565b50600192915050565b6005546001600160a01b03163314610c9c5760405162461bcd60e51b8152600401610c9390612e5c565b60405180910390fd5b6008546040516001600160a01b03918216918316907f90b8024c4923d3873ff5b9fcb43d0360d4b9217fa41225d07ba379993552e74390600090a3600880546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610d235760405162461bcd60e51b8152600401610c9390612e5c565b670de0b6b3a76400006103e8610d3860025490565b610d43906001612ea7565b610d4d9190612ec6565b610d579190612ec6565b811015610dbe5760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526e6c6f776572207468616e20302e312560881b6064820152608401610c93565b610dd081670de0b6b3a7640000612ea7565b600b5550565b6000610de3848484611a16565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610e685760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610c93565b610e7585338584036118f2565b506001949350505050565b6005546001600160a01b03163314610eaa5760405162461bcd60e51b8152600401610c9390612e5c565b60158490556016839055601782905560188190558082610eca8587612ee8565b610ed49190612ee8565b610ede9190612ee8565b601481905560631015610ef057600080fd5b50505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610c60918590610f2d908690612ee8565b6118f2565b6005546001600160a01b03163314610f5c5760405162461bcd60e51b8152600401610c9390612e5c565b600a546040516001600160a01b03918216918316907fe1bb4a3e2b2b99353f84d73df9e136cfe17627ed07083a649101dfa6bde8459c90600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610fe35760405162461bcd60e51b8152600401610c9390612e5c565b610fed6000612430565b565b6005546001600160a01b031633146110195760405162461bcd60e51b8152600401610c9390612e5c565b6009546040516001600160a01b03918216918316907f0308c4544315dbf7c7c2fdbcdf1dd8a57df22fddf234ee3c941eefec5c2287ba90600090a3600980546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031633146110a35760405162461bcd60e51b8152600401610c9390612e5c565b50600e805460ff19169055600190565b6005546001600160a01b031633146110dd5760405162461bcd60e51b8152600401610c9390612e5c565b6001600160a01b03919091166000908152602360205260409020805460ff1916911515919091179055565b6005546001600160a01b031633146111325760405162461bcd60e51b8152600401610c9390612e5c565b600e54610100900460ff161561117b5760405162461bcd60e51b815260206004820152600e60248201526d151bdad95b881b185d5b98da195960921b6044820152606401610c93565b600e80544360115562ffff00191662010100179055601255565b6005546001600160a01b031633146111bf5760405162461bcd60e51b8152600401610c9390612e5c565b600e8054911515620100000262ff000019909216919091179055565b606060048054610bd090612e21565b6005546001600160a01b031633146112145760405162461bcd60e51b8152600401610c9390612e5c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156112bc5760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610c93565b6112c68282612482565b5050565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561134c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c93565b61135933858584036118f2565b5060019392505050565b6000610c60338484611a16565b6005546001600160a01b0316331461139a5760405162461bcd60e51b8152600401610c9390612e5c565b60005b82811015610ef05760008484838181106113b9576113b9612f00565b90506020020160208101906113ce9190612c5b565b90506001600160a01b03811630148015906113f757506006546001600160a01b03828116911614155b801561143557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614155b1561145f576001600160a01b0381166000908152601360205260409020805460ff19168415151790555b508061146a81612f16565b91505061139d565b6005546001600160a01b0316331461149c5760405162461bcd60e51b8152600401610c9390612e5c565b6001600160a01b038216600081815260226020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b031633146115255760405162461bcd60e51b8152600401610c9390612e5c565b670de0b6b3a76400006103e861153a60025490565b611545906005612ea7565b61154f9190612ec6565b6115599190612ec6565b8110156115b45760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b6064820152608401610c93565b6115c681670de0b6b3a7640000612ea7565b600d5550565b6005546001600160a01b031633146115f65760405162461bcd60e51b8152600401610c9390612e5c565b6007546040516001600160a01b03918216918316907fe398a51ced37c654eb1ea08be0948c549e0001c9574663816242517334bd004890600090a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031633146116805760405162461bcd60e51b8152600401610c9390612e5c565b620186a061168d60025490565b611698906001612ea7565b6116a29190612ec6565b82101561170f5760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610c93565b6103e861171b60025490565b611726906005612ea7565b6117309190612ec6565b82111561179c5760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610c93565b50600c81905560015b919050565b6005546001600160a01b031633146117d45760405162461bcd60e51b8152600401610c9390612e5c565b601a849055601b839055601c829055601d81905580826117f48587612ee8565b6117fe9190612ee8565b6118089190612ee8565b601981905560631015610ef057600080fd5b6005546000906001600160a01b031633146118475760405162461bcd60e51b8152600401610c9390612e5c565b506010805460ff19169055600190565b6005546001600160a01b031633146118815760405162461bcd60e51b8152600401610c9390612e5c565b6001600160a01b0381166118e65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c93565b6118ef81612430565b50565b6001600160a01b0383166119545760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c93565b6001600160a01b0382166119b55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c93565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611a3c5760405162461bcd60e51b8152600401610c9390612f31565b6001600160a01b038216611a625760405162461bcd60e51b8152600401610c9390612f76565b6001600160a01b03831660009081526013602052604090205460ff1615611abc5760405162461bcd60e51b815260206004820152600e60248201526d14db9a5c195c88189b1bd8dad95960921b6044820152606401610c93565b80611ad257611acd838360006124d6565b505050565b600e5460ff161561209b576005546001600160a01b03848116911614801590611b0957506005546001600160a01b03838116911614155b8015611b1d57506001600160a01b03821615155b8015611b3457506001600160a01b03821661dead14155b8015611b4a5750600654600160a01b900460ff16155b1561209b57600e54610100900460ff16611be2576001600160a01b03831660009081526022602052604090205460ff1680611b9d57506001600160a01b03821660009081526022602052604090205460ff165b611be25760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610c93565b601254601154611bf29190612ee8565b4311158015611c3257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b8015611c4c57506006546001600160a01b03838116911614155b8015611c6157506001600160a01b0382163014155b8015611c9f57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15611cee576001600160a01b038216600081815260136020526040808220805460ff19166001179055517fb90badc1cf1c52268f4fa9afb5276aebf640bcca3300cdfc9cf37db17daa13e29190a25b60105460ff1615611e35576005546001600160a01b03838116911614801590611d4957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b8015611d8757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15611e3557326000908152600f60205260409020544311611e225760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610c93565b326000908152600f602052604090204390555b6001600160a01b03831660009081526024602052604090205460ff168015611e7657506001600160a01b03821660009081526023602052604090205460ff16155b15611f5a57600b54811115611eeb5760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610c93565b600d546001600160a01b038316600090815260208190526040902054611f119083612ee8565b1115611f555760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610c93565b61209b565b6001600160a01b03821660009081526024602052604090205460ff168015611f9b57506001600160a01b03831660009081526023602052604090205460ff16155b1561201157600b54811115611f555760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610c93565b6001600160a01b03821660009081526023602052604090205460ff1661209b57600d546001600160a01b0383166000908152602081905260409020546120579083612ee8565b111561209b5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610c93565b30600090815260208190526040902054600c54811080159081906120c75750600e5462010000900460ff165b80156120dd5750600654600160a01b900460ff16155b801561210257506001600160a01b03851660009081526024602052604090205460ff16155b801561212757506001600160a01b03851660009081526022602052604090205460ff16155b801561214c57506001600160a01b03841660009081526022602052604090205460ff16155b1561217a576006805460ff60a01b1916600160a01b17905561216c61262a565b6006805460ff60a01b191690555b6006546001600160a01b03861660009081526022602052604090205460ff600160a01b9092048216159116806121c857506001600160a01b03851660009081526022602052604090205460ff165b156121d1575060005b6000811561241c576001600160a01b03861660009081526024602052604090205460ff16801561220357506000601954115b156122f1576122286064612222601954886128f490919063ffffffff16565b90612907565b9050601954601b548261223b9190612ea7565b6122459190612ec6565b601f60008282546122569190612ee8565b9091555050601954601c5461226b9083612ea7565b6122759190612ec6565b602060008282546122869190612ee8565b9091555050601954601a5461229b9083612ea7565b6122a59190612ec6565b601e60008282546122b69190612ee8565b9091555050601954601d546122cb9083612ea7565b6122d59190612ec6565b602160008282546122e69190612ee8565b909155506123fe9050565b6001600160a01b03871660009081526024602052604090205460ff16801561231b57506000601454115b156123fe5761233a6064612222601454886128f490919063ffffffff16565b90506014546016548261234d9190612ea7565b6123579190612ec6565b601f60008282546123689190612ee8565b909155505060145460175461237d9083612ea7565b6123879190612ec6565b602060008282546123989190612ee8565b90915550506014546015546123ad9083612ea7565b6123b79190612ec6565b601e60008282546123c89190612ee8565b90915550506014546018546123dd9083612ea7565b6123e79190612ec6565b602160008282546123f89190612ee8565b90915550505b801561240f5761240f8730836124d6565b6124198186612fb9565b94505b6124278787876124d6565b50505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600081815260246020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b0383166124fc5760405162461bcd60e51b8152600401610c9390612f31565b6001600160a01b0382166125225760405162461bcd60e51b8152600401610c9390612f76565b6001600160a01b0383166000908152602081905260409020548181101561259a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c93565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906125d1908490612ee8565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161261d91815260200190565b60405180910390a3610ef0565b3060009081526020819052604081205490506000602154602054601e54601f546126549190612ee8565b61265e9190612ee8565b6126689190612ee8565b90506000821580612677575081155b1561268157505050565b600c5461268f906014612ea7565b8311156126a757600c546126a4906014612ea7565b92505b6000600283601f54866126ba9190612ea7565b6126c49190612ec6565b6126ce9190612ec6565b905060006126dc8583612913565b9050476126e88261291f565b60006126f44783612913565b9050600061271187612222601e54856128f490919063ffffffff16565b9050600061272e88612222602054866128f490919063ffffffff16565b9050600061274b89612222602154876128f490919063ffffffff16565b90506000818361275b8688612fb9565b6127659190612fb9565b61276f9190612fb9565b6000601f819055601e819055602081905560218190556008546040519293506001600160a01b031691859181818185875af1925050503d80600081146127d1576040519150601f19603f3d011682016040523d82523d6000602084013e6127d6565b606091505b509099505087158015906127ea5750600081115b1561283d576127f98882612adf565b601f54604080518981526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b600a546040516001600160a01b03909116908390600081818185875af1925050503d806000811461288a576040519150601f19603f3d011682016040523d82523d6000602084013e61288f565b606091505b5050600754604051919a506001600160a01b0316904790600081818185875af1925050503d80600081146128df576040519150601f19603f3d011682016040523d82523d6000602084013e6128e4565b606091505b5050505050505050505050505050565b60006129008284612ea7565b9392505050565b60006129008284612ec6565b60006129008284612fb9565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061295457612954612f00565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f69190612fd0565b81600181518110612a0957612a09612f00565b60200260200101906001600160a01b031690816001600160a01b031681525050612a54307f0000000000000000000000000000000000000000000000000000000000000000846118f2565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac94790612aa9908590600090869030904290600401612fed565b600060405180830381600087803b158015612ac357600080fd5b505af1158015612ad7573d6000803e3d6000fd5b505050505050565b612b0a307f0000000000000000000000000000000000000000000000000000000000000000846118f2565b60095460405163f305d71960e01b81523060048201526024810184905260006044820181905260648201526001600160a01b0391821660848201524260a48201527f00000000000000000000000000000000000000000000000000000000000000009091169063f305d71990839060c40160606040518083038185885af1158015612b99573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612bbe919061305e565b5050505050565b600060208083528351808285015260005b81811015612bf257858101830151858201604001528201612bd6565b81811115612c04576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146118ef57600080fd5b60008060408385031215612c4257600080fd5b8235612c4d81612c1a565b946020939093013593505050565b600060208284031215612c6d57600080fd5b813561290081612c1a565b600060208284031215612c8a57600080fd5b5035919050565b600080600060608486031215612ca657600080fd5b8335612cb181612c1a565b92506020840135612cc181612c1a565b929592945050506040919091013590565b60008060008060808587031215612ce857600080fd5b5050823594602084013594506040840135936060013592509050565b803580151581146117a557600080fd5b60008060408385031215612d2757600080fd5b8235612d3281612c1a565b9150612d4060208401612d04565b90509250929050565b600060208284031215612d5b57600080fd5b61290082612d04565b600080600060408486031215612d7957600080fd5b833567ffffffffffffffff80821115612d9157600080fd5b818601915086601f830112612da557600080fd5b813581811115612db457600080fd5b8760208260051b8501011115612dc957600080fd5b602092830195509350612ddf9186019050612d04565b90509250925092565b60008060408385031215612dfb57600080fd5b8235612e0681612c1a565b91506020830135612e1681612c1a565b809150509250929050565b600181811c90821680612e3557607f821691505b60208210811415612e5657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612ec157612ec1612e91565b500290565b600082612ee357634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612efb57612efb612e91565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612f2a57612f2a612e91565b5060010190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b600082821015612fcb57612fcb612e91565b500390565b600060208284031215612fe257600080fd5b815161290081612c1a565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561303d5784516001600160a01b031683529383019391830191600101613018565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561307357600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212204a281f3f42b0feb28b9bd862d620603ee1e99875d0b604f8b3ddfa918d5a1f5264736f6c634300080a00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
    "runtime_bytecode": "6080604052600436106103c75760003560e01c80638ea5220f116101f2578063c876d0b91161010d578063e884f260116100a0578063f63743421161006f578063f637434214610b5f578063f8b45b0514610b75578063fb002c9714610b8b578063fd72e22a14610ba157600080fd5b8063e884f26014610afe578063f11a24d314610b13578063f1c1c14f14610b29578063f2fde38b14610b3f57600080fd5b8063dd62ed3e116100dc578063dd62ed3e14610a52578063e2f4560514610a98578063e596219514610aae578063e7ad9fcd14610ade57600080fd5b8063c876d0b9146109ec578063c8c8ebe414610a06578063d257b34f14610a1c578063d85ba06314610a3c57600080fd5b8063a9059cbb11610185578063bbc0c74211610154578063bbc0c7421461096d578063c02466681461098c578063c18bc195146109ac578063c5b52609146109cc57600080fd5b8063a9059cbb146108dd578063ad68ff72146108fd578063ae303d071461091d578063b62496f51461093d57600080fd5b80639c3b4fdc116101c15780639c3b4fdc1461087b5780639fccce3214610891578063a0d82dc5146108a7578063a457c2d7146108bd57600080fd5b80638ea5220f14610806578063924de9b71461082657806395d89b41146108465780639a7a23d61461085b57600080fd5b80634f77f6c0116102e2578063715018a6116102755780637f5d4ab7116102445780637f5d4ab71461079c57806382aa7c68146107b257806386871050146107d25780638da5cb5b146107e857600080fd5b8063715018a61461073257806373dd858c14610747578063751039fc146107675780637571336a1461077c57600080fd5b80636a486a8e116102b15780636a486a8e146106a65780636aebf627146106bc5780636ddd1713146106dc57806370a08231146106fc57600080fd5b80634f77f6c0146106215780634fbee19314610637578063534c0906146106705780635a139dd41461069057600080fd5b806323b872dd1161035a5780633950935111610329578063395093511461059357806349bd5a5e146105b35780634a62bb65146105e75780634ec39ba91461060157600080fd5b806323b872dd1461052157806327c8f835146105415780632e6ed7ef14610557578063313ce5671461057757600080fd5b806318160ddd1161039657806318160ddd146104aa5780631816467f146104c95780631a8145bb146104eb578063203e727e1461050157600080fd5b806306fdde03146103d3578063095ea7b3146103fe57806310d5de531461042e5780631694505e1461045e57600080fd5b366103ce57005b600080fd5b3480156103df57600080fd5b506103e8610bc1565b6040516103f59190612bc5565b60405180910390f35b34801561040a57600080fd5b5061041e610419366004612c2f565b610c53565b60405190151581526020016103f5565b34801561043a57600080fd5b5061041e610449366004612c5b565b60236020526000908152604090205460ff1681565b34801561046a57600080fd5b506104927f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b0390911681526020016103f5565b3480156104b657600080fd5b506002545b6040519081526020016103f5565b3480156104d557600080fd5b506104e96104e4366004612c5b565b610c69565b005b3480156104f757600080fd5b506104bb601f5481565b34801561050d57600080fd5b506104e961051c366004612c78565b610cf9565b34801561052d57600080fd5b5061041e61053c366004612c91565b610dd6565b34801561054d57600080fd5b5061049261dead81565b34801561056357600080fd5b506104e9610572366004612cd2565b610e80565b34801561058357600080fd5b50604051601281526020016103f5565b34801561059f57600080fd5b5061041e6105ae366004612c2f565b610ef6565b3480156105bf57600080fd5b506104927f000000000000000000000000a8c1ee98a3c52dd5d672dd5b40f3dcb3e2fabe4181565b3480156105f357600080fd5b50600e5461041e9060ff1681565b34801561060d57600080fd5b50600954610492906001600160a01b031681565b34801561062d57600080fd5b506104bb601d5481565b34801561064357600080fd5b5061041e610652366004612c5b565b6001600160a01b031660009081526022602052604090205460ff1690565b34801561067c57600080fd5b50600654610492906001600160a01b031681565b34801561069c57600080fd5b506104bb60185481565b3480156106b257600080fd5b506104bb60195481565b3480156106c857600080fd5b506104e96106d7366004612c5b565b610f32565b3480156106e857600080fd5b50600e5461041e9062010000900460ff1681565b34801561070857600080fd5b506104bb610717366004612c5b565b6001600160a01b031660009081526020819052604090205490565b34801561073e57600080fd5b506104e9610fb9565b34801561075357600080fd5b506104e9610762366004612c5b565b610fef565b34801561077357600080fd5b5061041e611076565b34801561078857600080fd5b506104e9610797366004612d14565b6110b3565b3480156107a857600080fd5b506104bb601e5481565b3480156107be57600080fd5b506104e96107cd366004612c78565b611108565b3480156107de57600080fd5b506104bb601a5481565b3480156107f457600080fd5b506005546001600160a01b0316610492565b34801561081257600080fd5b50600854610492906001600160a01b031681565b34801561083257600080fd5b506104e9610841366004612d49565b611195565b34801561085257600080fd5b506103e86111db565b34801561086757600080fd5b506104e9610876366004612d14565b6111ea565b34801561088757600080fd5b506104bb60175481565b34801561089d57600080fd5b506104bb60205481565b3480156108b357600080fd5b506104bb601c5481565b3480156108c957600080fd5b5061041e6108d8366004612c2f565b6112ca565b3480156108e957600080fd5b5061041e6108f8366004612c2f565b611363565b34801561090957600080fd5b50600754610492906001600160a01b031681565b34801561092957600080fd5b506104e9610938366004612d64565b611370565b34801561094957600080fd5b5061041e610958366004612c5b565b60246020526000908152604090205460ff1681565b34801561097957600080fd5b50600e5461041e90610100900460ff1681565b34801561099857600080fd5b506104e96109a7366004612d14565b611472565b3480156109b857600080fd5b506104e96109c7366004612c78565b6114fb565b3480156109d857600080fd5b506104e96109e7366004612c5b565b6115cc565b3480156109f857600080fd5b5060105461041e9060ff1681565b348015610a1257600080fd5b506104bb600b5481565b348015610a2857600080fd5b5061041e610a37366004612c78565b611653565b348015610a4857600080fd5b506104bb60145481565b348015610a5e57600080fd5b506104bb610a6d366004612de8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610aa457600080fd5b506104bb600c5481565b348015610aba57600080fd5b5061041e610ac9366004612c5b565b60136020526000908152604090205460ff1681565b348015610aea57600080fd5b506104e9610af9366004612cd2565b6117aa565b348015610b0a57600080fd5b5061041e61181a565b348015610b1f57600080fd5b506104bb60165481565b348015610b3557600080fd5b506104bb60155481565b348015610b4b57600080fd5b506104e9610b5a366004612c5b565b611857565b348015610b6b57600080fd5b506104bb601b5481565b348015610b8157600080fd5b506104bb600d5481565b348015610b9757600080fd5b506104bb60215481565b348015610bad57600080fd5b50600a54610492906001600160a01b031681565b606060038054610bd090612e21565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfc90612e21565b8015610c495780601f10610c1e57610100808354040283529160200191610c49565b820191906000526020600020905b815481529060010190602001808311610c2c57829003601f168201915b5050505050905090565b6000610c603384846118f2565b50600192915050565b6005546001600160a01b03163314610c9c5760405162461bcd60e51b8152600401610c9390612e5c565b60405180910390fd5b6008546040516001600160a01b03918216918316907f90b8024c4923d3873ff5b9fcb43d0360d4b9217fa41225d07ba379993552e74390600090a3600880546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610d235760405162461bcd60e51b8152600401610c9390612e5c565b670de0b6b3a76400006103e8610d3860025490565b610d43906001612ea7565b610d4d9190612ec6565b610d579190612ec6565b811015610dbe5760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526e6c6f776572207468616e20302e312560881b6064820152608401610c93565b610dd081670de0b6b3a7640000612ea7565b600b5550565b6000610de3848484611a16565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610e685760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610c93565b610e7585338584036118f2565b506001949350505050565b6005546001600160a01b03163314610eaa5760405162461bcd60e51b8152600401610c9390612e5c565b60158490556016839055601782905560188190558082610eca8587612ee8565b610ed49190612ee8565b610ede9190612ee8565b601481905560631015610ef057600080fd5b50505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610c60918590610f2d908690612ee8565b6118f2565b6005546001600160a01b03163314610f5c5760405162461bcd60e51b8152600401610c9390612e5c565b600a546040516001600160a01b03918216918316907fe1bb4a3e2b2b99353f84d73df9e136cfe17627ed07083a649101dfa6bde8459c90600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610fe35760405162461bcd60e51b8152600401610c9390612e5c565b610fed6000612430565b565b6005546001600160a01b031633146110195760405162461bcd60e51b8152600401610c9390612e5c565b6009546040516001600160a01b03918216918316907f0308c4544315dbf7c7c2fdbcdf1dd8a57df22fddf234ee3c941eefec5c2287ba90600090a3600980546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031633146110a35760405162461bcd60e51b8152600401610c9390612e5c565b50600e805460ff19169055600190565b6005546001600160a01b031633146110dd5760405162461bcd60e51b8152600401610c9390612e5c565b6001600160a01b03919091166000908152602360205260409020805460ff1916911515919091179055565b6005546001600160a01b031633146111325760405162461bcd60e51b8152600401610c9390612e5c565b600e54610100900460ff161561117b5760405162461bcd60e51b815260206004820152600e60248201526d151bdad95b881b185d5b98da195960921b6044820152606401610c93565b600e80544360115562ffff00191662010100179055601255565b6005546001600160a01b031633146111bf5760405162461bcd60e51b8152600401610c9390612e5c565b600e8054911515620100000262ff000019909216919091179055565b606060048054610bd090612e21565b6005546001600160a01b031633146112145760405162461bcd60e51b8152600401610c9390612e5c565b7f000000000000000000000000a8c1ee98a3c52dd5d672dd5b40f3dcb3e2fabe416001600160a01b0316826001600160a01b031614156112bc5760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610c93565b6112c68282612482565b5050565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561134c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c93565b61135933858584036118f2565b5060019392505050565b6000610c60338484611a16565b6005546001600160a01b0316331461139a5760405162461bcd60e51b8152600401610c9390612e5c565b60005b82811015610ef05760008484838181106113b9576113b9612f00565b90506020020160208101906113ce9190612c5b565b90506001600160a01b03811630148015906113f757506006546001600160a01b03828116911614155b801561143557507f000000000000000000000000a8c1ee98a3c52dd5d672dd5b40f3dcb3e2fabe416001600160a01b0316816001600160a01b031614155b1561145f576001600160a01b0381166000908152601360205260409020805460ff19168415151790555b508061146a81612f16565b91505061139d565b6005546001600160a01b0316331461149c5760405162461bcd60e51b8152600401610c9390612e5c565b6001600160a01b038216600081815260226020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b031633146115255760405162461bcd60e51b8152600401610c9390612e5c565b670de0b6b3a76400006103e861153a60025490565b611545906005612ea7565b61154f9190612ec6565b6115599190612ec6565b8110156115b45760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b6064820152608401610c93565b6115c681670de0b6b3a7640000612ea7565b600d5550565b6005546001600160a01b031633146115f65760405162461bcd60e51b8152600401610c9390612e5c565b6007546040516001600160a01b03918216918316907fe398a51ced37c654eb1ea08be0948c549e0001c9574663816242517334bd004890600090a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031633146116805760405162461bcd60e51b8152600401610c9390612e5c565b620186a061168d60025490565b611698906001612ea7565b6116a29190612ec6565b82101561170f5760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610c93565b6103e861171b60025490565b611726906005612ea7565b6117309190612ec6565b82111561179c5760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610c93565b50600c81905560015b919050565b6005546001600160a01b031633146117d45760405162461bcd60e51b8152600401610c9390612e5c565b601a849055601b839055601c829055601d81905580826117f48587612ee8565b6117fe9190612ee8565b6118089190612ee8565b601981905560631015610ef057600080fd5b6005546000906001600160a01b031633146118475760405162461bcd60e51b8152600401610c9390612e5c565b506010805460ff19169055600190565b6005546001600160a01b031633146118815760405162461bcd60e51b8152600401610c9390612e5c565b6001600160a01b0381166118e65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c93565b6118ef81612430565b50565b6001600160a01b0383166119545760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c93565b6001600160a01b0382166119b55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c93565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611a3c5760405162461bcd60e51b8152600401610c9390612f31565b6001600160a01b038216611a625760405162461bcd60e51b8152600401610c9390612f76565b6001600160a01b03831660009081526013602052604090205460ff1615611abc5760405162461bcd60e51b815260206004820152600e60248201526d14db9a5c195c88189b1bd8dad95960921b6044820152606401610c93565b80611ad257611acd838360006124d6565b505050565b600e5460ff161561209b576005546001600160a01b03848116911614801590611b0957506005546001600160a01b03838116911614155b8015611b1d57506001600160a01b03821615155b8015611b3457506001600160a01b03821661dead14155b8015611b4a5750600654600160a01b900460ff16155b1561209b57600e54610100900460ff16611be2576001600160a01b03831660009081526022602052604090205460ff1680611b9d57506001600160a01b03821660009081526022602052604090205460ff165b611be25760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610c93565b601254601154611bf29190612ee8565b4311158015611c3257507f000000000000000000000000a8c1ee98a3c52dd5d672dd5b40f3dcb3e2fabe416001600160a01b0316836001600160a01b0316145b8015611c4c57506006546001600160a01b03838116911614155b8015611c6157506001600160a01b0382163014155b8015611c9f57507f000000000000000000000000a8c1ee98a3c52dd5d672dd5b40f3dcb3e2fabe416001600160a01b0316826001600160a01b031614155b15611cee576001600160a01b038216600081815260136020526040808220805460ff19166001179055517fb90badc1cf1c52268f4fa9afb5276aebf640bcca3300cdfc9cf37db17daa13e29190a25b60105460ff1615611e35576005546001600160a01b03838116911614801590611d4957507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b0316826001600160a01b031614155b8015611d8757507f000000000000000000000000a8c1ee98a3c52dd5d672dd5b40f3dcb3e2fabe416001600160a01b0316826001600160a01b031614155b15611e3557326000908152600f60205260409020544311611e225760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610c93565b326000908152600f602052604090204390555b6001600160a01b03831660009081526024602052604090205460ff168015611e7657506001600160a01b03821660009081526023602052604090205460ff16155b15611f5a57600b54811115611eeb5760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610c93565b600d546001600160a01b038316600090815260208190526040902054611f119083612ee8565b1115611f555760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610c93565b61209b565b6001600160a01b03821660009081526024602052604090205460ff168015611f9b57506001600160a01b03831660009081526023602052604090205460ff16155b1561201157600b54811115611f555760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610c93565b6001600160a01b03821660009081526023602052604090205460ff1661209b57600d546001600160a01b0383166000908152602081905260409020546120579083612ee8565b111561209b5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610c93565b30600090815260208190526040902054600c54811080159081906120c75750600e5462010000900460ff165b80156120dd5750600654600160a01b900460ff16155b801561210257506001600160a01b03851660009081526024602052604090205460ff16155b801561212757506001600160a01b03851660009081526022602052604090205460ff16155b801561214c57506001600160a01b03841660009081526022602052604090205460ff16155b1561217a576006805460ff60a01b1916600160a01b17905561216c61262a565b6006805460ff60a01b191690555b6006546001600160a01b03861660009081526022602052604090205460ff600160a01b9092048216159116806121c857506001600160a01b03851660009081526022602052604090205460ff165b156121d1575060005b6000811561241c576001600160a01b03861660009081526024602052604090205460ff16801561220357506000601954115b156122f1576122286064612222601954886128f490919063ffffffff16565b90612907565b9050601954601b548261223b9190612ea7565b6122459190612ec6565b601f60008282546122569190612ee8565b9091555050601954601c5461226b9083612ea7565b6122759190612ec6565b602060008282546122869190612ee8565b9091555050601954601a5461229b9083612ea7565b6122a59190612ec6565b601e60008282546122b69190612ee8565b9091555050601954601d546122cb9083612ea7565b6122d59190612ec6565b602160008282546122e69190612ee8565b909155506123fe9050565b6001600160a01b03871660009081526024602052604090205460ff16801561231b57506000601454115b156123fe5761233a6064612222601454886128f490919063ffffffff16565b90506014546016548261234d9190612ea7565b6123579190612ec6565b601f60008282546123689190612ee8565b909155505060145460175461237d9083612ea7565b6123879190612ec6565b602060008282546123989190612ee8565b90915550506014546015546123ad9083612ea7565b6123b79190612ec6565b601e60008282546123c89190612ee8565b90915550506014546018546123dd9083612ea7565b6123e79190612ec6565b602160008282546123f89190612ee8565b90915550505b801561240f5761240f8730836124d6565b6124198186612fb9565b94505b6124278787876124d6565b50505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600081815260246020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b0383166124fc5760405162461bcd60e51b8152600401610c9390612f31565b6001600160a01b0382166125225760405162461bcd60e51b8152600401610c9390612f76565b6001600160a01b0383166000908152602081905260409020548181101561259a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c93565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906125d1908490612ee8565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161261d91815260200190565b60405180910390a3610ef0565b3060009081526020819052604081205490506000602154602054601e54601f546126549190612ee8565b61265e9190612ee8565b6126689190612ee8565b90506000821580612677575081155b1561268157505050565b600c5461268f906014612ea7565b8311156126a757600c546126a4906014612ea7565b92505b6000600283601f54866126ba9190612ea7565b6126c49190612ec6565b6126ce9190612ec6565b905060006126dc8583612913565b9050476126e88261291f565b60006126f44783612913565b9050600061271187612222601e54856128f490919063ffffffff16565b9050600061272e88612222602054866128f490919063ffffffff16565b9050600061274b89612222602154876128f490919063ffffffff16565b90506000818361275b8688612fb9565b6127659190612fb9565b61276f9190612fb9565b6000601f819055601e819055602081905560218190556008546040519293506001600160a01b031691859181818185875af1925050503d80600081146127d1576040519150601f19603f3d011682016040523d82523d6000602084013e6127d6565b606091505b509099505087158015906127ea5750600081115b1561283d576127f98882612adf565b601f54604080518981526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b600a546040516001600160a01b03909116908390600081818185875af1925050503d806000811461288a576040519150601f19603f3d011682016040523d82523d6000602084013e61288f565b606091505b5050600754604051919a506001600160a01b0316904790600081818185875af1925050503d80600081146128df576040519150601f19603f3d011682016040523d82523d6000602084013e6128e4565b606091505b5050505050505050505050505050565b60006129008284612ea7565b9392505050565b60006129008284612ec6565b60006129008284612fb9565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061295457612954612f00565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f69190612fd0565b81600181518110612a0957612a09612f00565b60200260200101906001600160a01b031690816001600160a01b031681525050612a54307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d846118f2565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac94790612aa9908590600090869030904290600401612fed565b600060405180830381600087803b158015612ac357600080fd5b505af1158015612ad7573d6000803e3d6000fd5b505050505050565b612b0a307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d846118f2565b60095460405163f305d71960e01b81523060048201526024810184905260006044820181905260648201526001600160a01b0391821660848201524260a48201527f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d9091169063f305d71990839060c40160606040518083038185885af1158015612b99573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612bbe919061305e565b5050505050565b600060208083528351808285015260005b81811015612bf257858101830151858201604001528201612bd6565b81811115612c04576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146118ef57600080fd5b60008060408385031215612c4257600080fd5b8235612c4d81612c1a565b946020939093013593505050565b600060208284031215612c6d57600080fd5b813561290081612c1a565b600060208284031215612c8a57600080fd5b5035919050565b600080600060608486031215612ca657600080fd5b8335612cb181612c1a565b92506020840135612cc181612c1a565b929592945050506040919091013590565b60008060008060808587031215612ce857600080fd5b5050823594602084013594506040840135936060013592509050565b803580151581146117a557600080fd5b60008060408385031215612d2757600080fd5b8235612d3281612c1a565b9150612d4060208401612d04565b90509250929050565b600060208284031215612d5b57600080fd5b61290082612d04565b600080600060408486031215612d7957600080fd5b833567ffffffffffffffff80821115612d9157600080fd5b818601915086601f830112612da557600080fd5b813581811115612db457600080fd5b8760208260051b8501011115612dc957600080fd5b602092830195509350612ddf9186019050612d04565b90509250925092565b60008060408385031215612dfb57600080fd5b8235612e0681612c1a565b91506020830135612e1681612c1a565b809150509250929050565b600181811c90821680612e3557607f821691505b60208210811415612e5657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612ec157612ec1612e91565b500290565b600082612ee357634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612efb57612efb612e91565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612f2a57612f2a612e91565b5060010190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b600082821015612fcb57612fcb612e91565b500390565b600060208284031215612fe257600080fd5b815161290081612c1a565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561303d5784516001600160a01b031683529383019391830191600101613018565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561307357600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212204a281f3f42b0feb28b9bd862d620603ee1e99875d0b604f8b3ddfa918d5a1f5264736f6c634300080a0033",
    "contract_name": "HPOP666I",
    "compiler_version": "v0.8.10+commit.fc410830",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"BoughtEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"devWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"liqWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"mktWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"operationsWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyOperationsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"blockees\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"shouldBlock\",\"type\":\"bool\"}],\"name\":\"multiBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mwallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerCA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellOperationsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_markFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operationsFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiqWallet\",\"type\":\"address\"}],\"name\":\"updateLiqWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_markFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operationsFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newmktWallet\",\"type\":\"address\"}],\"name\":\"updatemktWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateoperationsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\nTelegram: http://t.me/HPOP666I\r\nWebsite: https://hpop666i.com/\r\nTwitter: https://twitter.com/HPOP666I\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.10 >=0.8.10 >=0.8.0 <0.9.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract HPOP666I is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    address public constant deadAddress = address(0xdead);\r\n    address public routerCA = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D uniswap\r\n\r\n    bool private swapping;\r\n\r\n    address public mwallet;\r\n    address public devWallet;\r\n    address public liqWallet;\r\n    address public operationsWallet;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWallet;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n\r\n    // Anti-bot and anti-whale mappings and variables\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = true;\r\n    uint256 private launchBlock;\r\n    uint256 private deadBlocks;\r\n    mapping(address => bool) public blocked;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyMarkFee;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyDevFee;\r\n    uint256 public buyOperationsFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 public sellMarkFee;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public sellDevFee;\r\n    uint256 public sellOperationsFee;\r\n\r\n    uint256 public tokensForMark;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForDev;\r\n    uint256 public tokensForOperations;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event mktWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event devWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event liqWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event operationsWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    constructor() ERC20(\"HarryPotterObamaPoliticos666Inu\", \"HPOP666I\") {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerCA); \r\n\r\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n\r\n        // launch buy fees\r\n        uint256 _buyMarkFee = 0;\r\n        uint256 _buyLiquidityFee = 0;\r\n        uint256 _buyDevFee = 0;\r\n        uint256 _buyOperationsFee = 0;\r\n        \r\n        // launch sell fees\r\n        uint256 _sellMarkFee = 0;\r\n        uint256 _sellLiquidityFee = 0;\r\n        uint256 _sellDevFee = 0;\r\n        uint256 _sellOperationsFee = 0;\r\n\r\n        uint256 totalSupply = 1_000_000_000 * 1e18;\r\n\r\n        maxTransactionAmount = 20_000_000 * 1e18; // 2% max txn at launch\r\n        maxWallet = 20_000_000 * 1e18; // 2% max wallet at launch\r\n        swapTokensAtAmount = (totalSupply * 10) / 10000; // 0.01% swap wallet\r\n\r\n        buyMarkFee = _buyMarkFee;\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        buyDevFee = _buyDevFee;\r\n        buyOperationsFee = _buyOperationsFee;\r\n        buyTotalFees = buyMarkFee + buyLiquidityFee + buyDevFee + buyOperationsFee;\r\n\r\n        sellMarkFee = _sellMarkFee;\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellDevFee = _sellDevFee;\r\n        sellOperationsFee = _sellOperationsFee;\r\n        sellTotalFees = sellMarkFee + sellLiquidityFee + sellDevFee + sellOperationsFee;\r\n\r\n        mwallet = address(0x0C01E8cf492b611AdfAD67A05700db7cc40B47f9); \r\n        devWallet = address(0xDdEE196b5a8E4D03a2414d58783BA183F9da114c); \r\n        liqWallet = address(0x4959F31CB2f640a013BA464A9e44C5858bf5be98); \r\n        operationsWallet = address(0x786E4107773d0ddc67Cd0bfae4E9CFfa80df5d6e);\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        excludeFromMaxTransaction(owner(), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function enableTrading(uint256 _deadBlocks) external onlyOwner {\r\n        require(!tradingActive, \"Token launched\");\r\n        tradingActive = true;\r\n        launchBlock = block.number;\r\n        swapEnabled = true;\r\n        deadBlocks = _deadBlocks;\r\n    }\r\n\r\n    // remove limits after token is stable\r\n    function removeLimits() external onlyOwner returns (bool) {\r\n        limitsInEffect = false;\r\n        return true;\r\n    }\r\n\r\n    // disable Transfer delay - cannot be reenabled\r\n    function disableTransferDelay() external onlyOwner returns (bool) {\r\n        transferDelayEnabled = false;\r\n        return true;\r\n    }\r\n\r\n    // change the minimum amount of tokens to sell from fees\r\n    function updateSwapTokensAtAmount(uint256 newAmount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            newAmount >= (totalSupply() * 1) / 100000,\r\n            \"Swap amount cannot be lower than 0.001% total supply.\"\r\n        );\r\n        require(\r\n            newAmount <= (totalSupply() * 5) / 1000,\r\n            \"Swap amount cannot be higher than 0.5% total supply.\"\r\n        );\r\n        swapTokensAtAmount = newAmount;\r\n        return true;\r\n    }\r\n\r\n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 1) / 1000) / 1e18,\r\n            \"Cannot set maxTransactionAmount lower than 0.1%\"\r\n        );\r\n        maxTransactionAmount = newNum * (10**18);\r\n    }\r\n\r\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot set maxWallet lower than 0.5%\"\r\n        );\r\n        maxWallet = newNum * (10**18);\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    // only use to disable contract sales if absolutely necessary (emergency use only)\r\n    function updateSwapEnabled(bool enabled) external onlyOwner {\r\n        swapEnabled = enabled;\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint256 _markFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _devFee,\r\n        uint256 _operationsFee\r\n    ) external onlyOwner {\r\n        buyMarkFee = _markFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyDevFee = _devFee;\r\n        buyOperationsFee = _operationsFee;\r\n        buyTotalFees = buyMarkFee + buyLiquidityFee + buyDevFee + buyOperationsFee;\r\n        require(buyTotalFees <= 99);\r\n    }\r\n\r\n    function updateSellFees(\r\n        uint256 _markFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _devFee,\r\n        uint256 _operationsFee\r\n    ) external onlyOwner {\r\n        sellMarkFee = _markFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellDevFee = _devFee;\r\n        sellOperationsFee = _operationsFee;\r\n        sellTotalFees = sellMarkFee + sellLiquidityFee + sellDevFee + sellOperationsFee;\r\n        require(sellTotalFees <= 99); \r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updatemktWallet(address newmktWallet) external onlyOwner {\r\n        emit mktWalletUpdated(newmktWallet, mwallet);\r\n        mwallet = newmktWallet;\r\n    }\r\n\r\n    function updateDevWallet(address newWallet) external onlyOwner {\r\n        emit devWalletUpdated(newWallet, devWallet);\r\n        devWallet = newWallet;\r\n    }\r\n\r\n    function updateoperationsWallet(address newWallet) external onlyOwner{\r\n        emit operationsWalletUpdated(newWallet, operationsWallet);\r\n        operationsWallet = newWallet;\r\n    }\r\n\r\n    function updateLiqWallet(address newLiqWallet) external onlyOwner {\r\n        emit liqWalletUpdated(newLiqWallet, liqWallet);\r\n        liqWallet = newLiqWallet;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    event BoughtEarly(address indexed sniper);\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!blocked[from], \"Sniper blocked\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ) {\r\n                if (!tradingActive) {\r\n                    require(\r\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\r\n                        \"Trading is not active.\"\r\n                    );\r\n                }\r\n\r\n                if(block.number <= launchBlock + deadBlocks && from == address(uniswapV2Pair) &&  \r\n                to != routerCA && to != address(this) && to != address(uniswapV2Pair)){\r\n                    blocked[to] = true;\r\n                    emit BoughtEarly(to);\r\n                }\r\n\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\r\n                if (transferDelayEnabled) {\r\n                    if (\r\n                        to != owner() &&\r\n                        to != address(uniswapV2Router) &&\r\n                        to != address(uniswapV2Pair)\r\n                    ) {\r\n                        require(\r\n                            _holderLastTransferTimestamp[tx.origin] <\r\n                                block.number,\r\n                            \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                        );\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                    }\r\n                }\r\n\r\n                //when buy\r\n                if (\r\n                    automatedMarketMakerPairs[from] &&\r\n                    !_isExcludedMaxTransactionAmount[to]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Buy transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n                //when sell\r\n                else if (\r\n                    automatedMarketMakerPairs[to] &&\r\n                    !_isExcludedMaxTransactionAmount[from]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Sell transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if (takeFee) {\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\r\n                fees = amount.mul(sellTotalFees).div(100);\r\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\r\n                tokensForDev += (fees * sellDevFee) / sellTotalFees;\r\n                tokensForMark += (fees * sellMarkFee) / sellTotalFees;\r\n                tokensForOperations += (fees * sellOperationsFee) / sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = amount.mul(buyTotalFees).div(100);\r\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\r\n                tokensForDev += (fees * buyDevFee) / buyTotalFees;\r\n                tokensForMark += (fees * buyMarkFee) / buyTotalFees;\r\n                tokensForOperations += (fees * buyOperationsFee) / buyTotalFees;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function multiBlock(address[] calldata blockees, bool shouldBlock) external onlyOwner {\r\n        for(uint256 i = 0;i<blockees.length;i++){\r\n            address blockee = blockees[i];\r\n            if(blockee != address(this) && \r\n               blockee != routerCA && \r\n               blockee != address(uniswapV2Pair))\r\n                blocked[blockee] = shouldBlock;\r\n        }\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liqWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity +\r\n            tokensForMark +\r\n            tokensForDev +\r\n            tokensForOperations;\r\n        bool success;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapTokensAtAmount * 20) {\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) / totalTokensToSwap / 2;\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForMark = ethBalance.mul(tokensForMark).div(totalTokensToSwap);\r\n        uint256 ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap);\r\n        uint256 ethForOperations = ethBalance.mul(tokensForOperations).div(totalTokensToSwap);\r\n\r\n        uint256 ethForLiquidity = ethBalance - ethForMark - ethForDev - ethForOperations;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMark = 0;\r\n        tokensForDev = 0;\r\n        tokensForOperations = 0;\r\n\r\n        (success, ) = address(devWallet).call{value: ethForDev}(\"\");\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(\r\n                amountToSwapForETH,\r\n                ethForLiquidity,\r\n                tokensForLiquidity\r\n            );\r\n        }\r\n        (success, ) = address(operationsWallet).call{value: ethForOperations}(\"\");\r\n        (success, ) = address(mwallet).call{value: address(this).balance}(\"\");\r\n    }\r\n}",
    "etherscan_verified": true
}