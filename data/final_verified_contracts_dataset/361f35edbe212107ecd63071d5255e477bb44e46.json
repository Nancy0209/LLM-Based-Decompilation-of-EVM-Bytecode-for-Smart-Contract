{
    "address": "0x361F35EDbe212107EcD63071D5255e477BB44e46",
    "tx_hash": "896fed51233ca1244188f655dfaa0d920bb835fc64b8ae6aad91e2195eac55b6",
    "block_number": 18009245,
    "timestamp": 1693178591,
    "gas_used_in_creation": 799230,
    "creation_bytecode": "608060405234801561000f575f80fd5b505f80546001600160a01b03191633179055610d128061002e5f395ff3fe608060405234801561000f575f80fd5b50600436106100e5575f3560e01c8063af20a37411610088578063cbbfe17311610063578063cbbfe17314610292578063cc2aca00146102a5578063eec377c0146102ba578063f4f3641e146102e2575f80fd5b8063af20a37414610247578063b09a57a914610250578063ca4b208b14610280575f80fd5b80637c511a68116100c35780637c511a68146101c45780638e15f473146101cd578063904a54f5146102095780639a6fc8f514610234575f80fd5b806309fa67d0146100e957806335f4ed5e1461010557806375e19a1114610199575b5f80fd5b6100f260035481565b6040519081526020015b60405180910390f35b61015a6101133660046109d6565b600260208190525f918252604090912080546001820154928201546003830154600484015460059094015492946001600160a01b0390811694928116939116919060ff1686565b604080519687526001600160a01b03958616602088015293851693860193909352921660608401526080830191909152151560a082015260c0016100fc565b6007546101ac906001600160501b031681565b6040516001600160501b0390911681526020016100fc565b6100f260055481565b6101d56102eb565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a0016100fc565b61021c610217366004610a03565b61037f565b6040516001600160a01b0390911681526020016100fc565b6101d5610242366004610a3a565b6104fe565b6100f260045481565b61026361025e366004610a55565b61059c565b604080519283526001600160501b039091166020830152016100fc565b5f5461021c906001600160a01b031681565b6100f26102a0366004610a85565b61069e565b6102b86102b3366004610ab6565b6107fd565b005b6102cd6102c8366004610a3a565b61093f565b604080519283526020830191909152016100fc565b6100f260065481565b5f805f805f805f805f8060015f9054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610345573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103699190610b06565b939e929d50909b50995090975095505050505050565b5f6004545f141580156103b057506004545f908152600260205260409020600101546001600160a01b038381169116145b156103d75750506004545f908152600260205260409020600301546001600160a01b031690565b5f805b6003548111610472575f818152600260205260409020600101546001600160a01b03858116911614801561042357505f8181526002602052604090206005015460ff1615156001145b15610460575f81815260026020526040902060030154600180546001600160a01b0319166001600160a01b03909216919091178155600482905591505b8061046a81610b6e565b9150506103da565b506001811515146104e65760405162461bcd60e51b815260206004820152603360248201527f746f6b656e2061646472657373206973206e6f7420737570706f727465642040604482015272207365745f454e535f6164647265737328292160681b60648201526084015b60405180910390fd5b50506001546001600160a01b0316919050565b919050565b600154604051639a6fc8f560e01b81526001600160501b03831660048201525f918291829182918291829182918291829182916001600160a01b0390911690639a6fc8f59060240160a060405180830381865afa158015610561573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105859190610b06565b939f929e50909c509a509098509650505050505050565b5f806105a78561037f565b505f805f805f6105b56102eb565b9398509196509450925090505f858180805b8415155f03610650576105d98461093f565b60068290556007805469ffffffffffffffffffff19166001600160501b03881617905590925090508d811180159061061057505f81115b801561061b57505f82135b1561063e57600480545f9081526002602052604090200154600195509250610650565b8361064881610b86565b9450506105c7565b5f61065b848f610ba7565b905061066881600a610c9a565b6006546106759190610ca5565b6005819055600754909d506001600160501b03169b505050505050505050505050935093915050565b5f80546001600160a01b031633146107045760405162461bcd60e51b815260206004820152602360248201527f6f6e6c7920646576656c6f7065722063616e2061646420454e5320616464726560448201526273732160e81b60648201526084016104dd565b60038054905f61071383610b6e565b91905055505f8290505f816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610759573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061077d9190610cbc565b600380545f818152600260208190526040909120918255600180830180546001600160a01b03199081166001600160a01b038d811691909117909255928401805484168b83161790558385018054909316971696909617905560ff9290921660048301556005909101805460ff1916909317909255505490505b92915050565b5f546001600160a01b031633146108655760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7920646576656c6f7065722063616e2075706461746520454e5320616460448201526564726573732160d01b60648201526084016104dd565b5f8290505f816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108ca9190610cbc565b5f9687526002602081905260409097206001810180546001600160a01b03199081166001600160a01b03998a16179091559781018054891696881696909617909555600385018054909716929095169190911790945560ff9092166004820155600501805460ff191691151591909117905550565b600154604051639a6fc8f560e01b81526001600160501b03831660048201525f918291829182916001600160a01b0390911690639a6fc8f59060240160a060405180830381865afa158015610996573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ba9190610b06565b50935050925050805f036109cc575f91505b9094909350915050565b5f602082840312156109e6575f80fd5b5035919050565b80356001600160a01b03811681146104f9575f80fd5b5f60208284031215610a13575f80fd5b610a1c826109ed565b9392505050565b6001600160501b0381168114610a37575f80fd5b50565b5f60208284031215610a4a575f80fd5b8135610a1c81610a23565b5f805f60608486031215610a67575f80fd5b610a70846109ed565b95602085013595506040909401359392505050565b5f8060408385031215610a96575f80fd5b610a9f836109ed565b9150610aad602084016109ed565b90509250929050565b5f805f8060808587031215610ac9575f80fd5b84359350610ad9602086016109ed565b9250610ae7604086016109ed565b915060608501358015158114610afb575f80fd5b939692955090935050565b5f805f805f60a08688031215610b1a575f80fd5b8551610b2581610a23565b809550506020860151935060408601519250606086015191506080860151610b4c81610a23565b809150509295509295909350565b634e487b7160e01b5f52601160045260245ffd5b5f60018201610b7f57610b7f610b5a565b5060010190565b5f6001600160501b03821680610b9e57610b9e610b5a565b5f190192915050565b818103818111156107f7576107f7610b5a565b600181815b80851115610bf457815f1904821115610bda57610bda610b5a565b80851615610be757918102915b93841c9390800290610bbf565b509250929050565b5f82610c0a575060016107f7565b81610c1657505f6107f7565b8160018114610c2c5760028114610c3657610c52565b60019150506107f7565b60ff841115610c4757610c47610b5a565b50506001821b6107f7565b5060208310610133831016604e8410600b8410161715610c75575081810a6107f7565b610c7f8383610bba565b805f1904821115610c9257610c92610b5a565b029392505050565b5f610a1c8383610bfc565b80820281158282048414176107f7576107f7610b5a565b5f60208284031215610ccc575f80fd5b815160ff81168114610a1c575f80fdfea2646970667358221220f2361892bc48c28c342708e18d76bb15990dce0b71fb501999b5e597b5aa9eec64736f6c63430008140033",
    "runtime_bytecode": "608060405234801561000f575f80fd5b50600436106100e5575f3560e01c8063af20a37411610088578063cbbfe17311610063578063cbbfe17314610292578063cc2aca00146102a5578063eec377c0146102ba578063f4f3641e146102e2575f80fd5b8063af20a37414610247578063b09a57a914610250578063ca4b208b14610280575f80fd5b80637c511a68116100c35780637c511a68146101c45780638e15f473146101cd578063904a54f5146102095780639a6fc8f514610234575f80fd5b806309fa67d0146100e957806335f4ed5e1461010557806375e19a1114610199575b5f80fd5b6100f260035481565b6040519081526020015b60405180910390f35b61015a6101133660046109d6565b600260208190525f918252604090912080546001820154928201546003830154600484015460059094015492946001600160a01b0390811694928116939116919060ff1686565b604080519687526001600160a01b03958616602088015293851693860193909352921660608401526080830191909152151560a082015260c0016100fc565b6007546101ac906001600160501b031681565b6040516001600160501b0390911681526020016100fc565b6100f260055481565b6101d56102eb565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a0016100fc565b61021c610217366004610a03565b61037f565b6040516001600160a01b0390911681526020016100fc565b6101d5610242366004610a3a565b6104fe565b6100f260045481565b61026361025e366004610a55565b61059c565b604080519283526001600160501b039091166020830152016100fc565b5f5461021c906001600160a01b031681565b6100f26102a0366004610a85565b61069e565b6102b86102b3366004610ab6565b6107fd565b005b6102cd6102c8366004610a3a565b61093f565b604080519283526020830191909152016100fc565b6100f260065481565b5f805f805f805f805f8060015f9054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610345573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103699190610b06565b939e929d50909b50995090975095505050505050565b5f6004545f141580156103b057506004545f908152600260205260409020600101546001600160a01b038381169116145b156103d75750506004545f908152600260205260409020600301546001600160a01b031690565b5f805b6003548111610472575f818152600260205260409020600101546001600160a01b03858116911614801561042357505f8181526002602052604090206005015460ff1615156001145b15610460575f81815260026020526040902060030154600180546001600160a01b0319166001600160a01b03909216919091178155600482905591505b8061046a81610b6e565b9150506103da565b506001811515146104e65760405162461bcd60e51b815260206004820152603360248201527f746f6b656e2061646472657373206973206e6f7420737570706f727465642040604482015272207365745f454e535f6164647265737328292160681b60648201526084015b60405180910390fd5b50506001546001600160a01b0316919050565b919050565b600154604051639a6fc8f560e01b81526001600160501b03831660048201525f918291829182918291829182918291829182916001600160a01b0390911690639a6fc8f59060240160a060405180830381865afa158015610561573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105859190610b06565b939f929e50909c509a509098509650505050505050565b5f806105a78561037f565b505f805f805f6105b56102eb565b9398509196509450925090505f858180805b8415155f03610650576105d98461093f565b60068290556007805469ffffffffffffffffffff19166001600160501b03881617905590925090508d811180159061061057505f81115b801561061b57505f82135b1561063e57600480545f9081526002602052604090200154600195509250610650565b8361064881610b86565b9450506105c7565b5f61065b848f610ba7565b905061066881600a610c9a565b6006546106759190610ca5565b6005819055600754909d506001600160501b03169b505050505050505050505050935093915050565b5f80546001600160a01b031633146107045760405162461bcd60e51b815260206004820152602360248201527f6f6e6c7920646576656c6f7065722063616e2061646420454e5320616464726560448201526273732160e81b60648201526084016104dd565b60038054905f61071383610b6e565b91905055505f8290505f816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610759573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061077d9190610cbc565b600380545f818152600260208190526040909120918255600180830180546001600160a01b03199081166001600160a01b038d811691909117909255928401805484168b83161790558385018054909316971696909617905560ff9290921660048301556005909101805460ff1916909317909255505490505b92915050565b5f546001600160a01b031633146108655760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7920646576656c6f7065722063616e2075706461746520454e5320616460448201526564726573732160d01b60648201526084016104dd565b5f8290505f816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108ca9190610cbc565b5f9687526002602081905260409097206001810180546001600160a01b03199081166001600160a01b03998a16179091559781018054891696881696909617909555600385018054909716929095169190911790945560ff9092166004820155600501805460ff191691151591909117905550565b600154604051639a6fc8f560e01b81526001600160501b03831660048201525f918291829182916001600160a01b0390911690639a6fc8f59060240160a060405180830381865afa158015610996573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ba9190610b06565b50935050925050805f036109cc575f91505b9094909350915050565b5f602082840312156109e6575f80fd5b5035919050565b80356001600160a01b03811681146104f9575f80fd5b5f60208284031215610a13575f80fd5b610a1c826109ed565b9392505050565b6001600160501b0381168114610a37575f80fd5b50565b5f60208284031215610a4a575f80fd5b8135610a1c81610a23565b5f805f60608486031215610a67575f80fd5b610a70846109ed565b95602085013595506040909401359392505050565b5f8060408385031215610a96575f80fd5b610a9f836109ed565b9150610aad602084016109ed565b90509250929050565b5f805f8060808587031215610ac9575f80fd5b84359350610ad9602086016109ed565b9250610ae7604086016109ed565b915060608501358015158114610afb575f80fd5b939692955090935050565b5f805f805f60a08688031215610b1a575f80fd5b8551610b2581610a23565b809550506020860151935060408601519250606086015191506080860151610b4c81610a23565b809150509295509295909350565b634e487b7160e01b5f52601160045260245ffd5b5f60018201610b7f57610b7f610b5a565b5060010190565b5f6001600160501b03821680610b9e57610b9e610b5a565b5f190192915050565b818103818111156107f7576107f7610b5a565b600181815b80851115610bf457815f1904821115610bda57610bda610b5a565b80851615610be757918102915b93841c9390800290610bbf565b509250929050565b5f82610c0a575060016107f7565b81610c1657505f6107f7565b8160018114610c2c5760028114610c3657610c52565b60019150506107f7565b60ff841115610c4757610c47610b5a565b50506001821b6107f7565b5060208310610133831016604e8410600b8410161715610c75575081810a6107f7565b610c7f8383610bba565b805f1904821115610c9257610c92610b5a565b029392505050565b5f610a1c8383610bfc565b80820281158282048414176107f7576107f7610b5a565b5f60208284031215610ccc575f80fd5b815160ff81168114610a1c575f80fdfea2646970667358221220f2361892bc48c28c342708e18d76bb15990dce0b71fb501999b5e597b5aa9eec64736f6c63430008140033",
    "contract_name": "BettingOracle_ChainLink",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ContractAddresses_Id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ENS_address\",\"type\":\"address\"}],\"name\":\"add_ENS_address\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current_ContractAddresses_Id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_decimails\",\"type\":\"uint256\"}],\"name\":\"fetch_closest_price_to_timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"name\":\"getHistoricalPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returned_target_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"set_ENS_address\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target_price\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target_roundID\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token_address_in_contract_addresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ENS_address\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"this_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ENS_address_decimails\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ENS_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"update_ENS_address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BettingOracle_ChainLink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n//0x3e05F982b2C85dD787b6f6d0652724a6791b87B0\\n//0x6f5Fa8eAe31C5b6c63014042dc1B120987BdbcD2\\n\\n//main contract for oracle\\n//0x361F35EDbe212107EcD63071D5255e477BB44e46\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract BettingOracle_ChainLink {\\n    address public developer;\\n\\n    AggregatorV3Interface internal priceFeed;\\n\\n    struct ChainLink_Price_Feed_Contract_Addresses {\\n        uint256 id;\\n        address token_address;\\n        address ENS_address;\\n        AggregatorV3Interface this_priceFeed;\\n        uint ENS_address_decimails;\\n        bool valid;\\n    }\\n\\n    mapping(uint256 => ChainLink_Price_Feed_Contract_Addresses)\\n        public token_address_in_contract_addresses;\\n\\n    uint256 public ContractAddresses_Id;\\n    uint256 public current_ContractAddresses_Id;\\n\\n    /*\\n    struct TokenPrice {\\n        uint256 id;\\n        address token_address;\\n        address ENS_address;\\n        uint80 roundID;\\n        uint256 Timestamp;\\n        int price;\\n    }\\n\\n    mapping(uint256 => TokenPrice) public Token_Price;  \\n\\n    uint256 public TokenPrice_Id;\\n    */\\n    uint public returned_target_price;\\n    int256 public target_price;\\n    uint80 public target_roundID;\\n\\n    /**\\n     * Network: Sepolia\\n     * Aggregator: ETH/USD\\n     * Address:\\t0x694AA1769357215DE4FAC081bf1f309aDC325306\\n     */\\n    /**\\n     * Network: Sepolia\\n     * Aggregator: BTC/USD\\n     * Address: 0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43\\n     */\\n    /**\\n     * Network: Sepolia\\n     * Aggregator: USDC / USD\\n     * Address: 0xA2F78ab2355fe2f984D808B5CeE7FD0A93D5270E\\n     */\\n    constructor() {\\n        developer = msg.sender;\\n    }\\n\\n    /**\\n     * to add ChainLink ENS address into struct ChainLink_Price_Feed_Contract_Addresses.\\n     * parameters:\\n     * token_address:supported ERC20 token.\\n     * ENS_address: https://docs.chain.link/data-feeds/price-feeds/addresses\\n     */\\n    function add_ENS_address(\\n        address token_address,\\n        address ENS_address\\n    ) public returns (uint256) {\\n        require(developer == msg.sender, \\\"only developer can add ENS address!\\\");\\n\\n        ContractAddresses_Id++;\\n\\n        AggregatorV3Interface this_priceFeed = AggregatorV3Interface(\\n            ENS_address\\n        );\\n\\n        uint ENS_address_decimails = this_priceFeed.decimals();\\n\\n        ChainLink_Price_Feed_Contract_Addresses\\n            storage new_ChainLink_Price_Feed_Contract_Addresses = token_address_in_contract_addresses[\\n                ContractAddresses_Id\\n            ];\\n        new_ChainLink_Price_Feed_Contract_Addresses.id = ContractAddresses_Id;\\n        new_ChainLink_Price_Feed_Contract_Addresses\\n            .token_address = token_address;\\n        new_ChainLink_Price_Feed_Contract_Addresses.ENS_address = ENS_address;\\n        new_ChainLink_Price_Feed_Contract_Addresses\\n            .this_priceFeed = this_priceFeed;\\n        new_ChainLink_Price_Feed_Contract_Addresses\\n            .ENS_address_decimails = ENS_address_decimails;\\n        new_ChainLink_Price_Feed_Contract_Addresses.valid = true;\\n\\n        return ContractAddresses_Id;\\n    }\\n\\n    /**\\n     * to set ChainLink ENS address for current price feed query of indicated token address.\\n     * parameters:\\n     * token_address:supported ERC20 token address in struct ChainLink_Price_Feed_Contract_Addresses.\\n     * returns: AggregatorV3Interface object\\n     */\\n    function set_ENS_address(\\n        address token_address\\n    ) public returns (AggregatorV3Interface) {\\n        if (\\n            current_ContractAddresses_Id != 0 &&\\n            token_address_in_contract_addresses[current_ContractAddresses_Id]\\n                .token_address ==\\n            token_address\\n        ) {\\n            return\\n                token_address_in_contract_addresses[\\n                    current_ContractAddresses_Id\\n                ].this_priceFeed;\\n        } else {\\n            bool priceFeed_exist = false;\\n\\n            for (uint256 i = 0; i <= ContractAddresses_Id; i++) {\\n                if (\\n                    token_address_in_contract_addresses[i].token_address ==\\n                    token_address &&\\n                    token_address_in_contract_addresses[i].valid == true\\n                ) {\\n                    priceFeed = token_address_in_contract_addresses[i]\\n                        .this_priceFeed;\\n                    current_ContractAddresses_Id = i;\\n                    priceFeed_exist = true;\\n                }\\n            }\\n\\n            require(\\n                priceFeed_exist == true,\\n                \\\"token address is not supported @ set_ENS_address()!\\\"\\n            );\\n\\n            return priceFeed;\\n        }\\n    }\\n\\n    /**\\n     * to update ChainLink ENS address in struct ChainLink_Price_Feed_Contract_Addresses.\\n     * parameters:\\n     * id: id of ChainLink_Price_Feed_Contract_Addresses\\n     * token_address:supported ERC20 token in the ChainLink_Price_Feed_Contract_Addresses.\\n     * ENS_address: https://docs.chain.link/data-feeds/price-feeds/addresses\\n     * valid: valid or not for this address in the ChainLink_Price_Feed_Contract_Addresses.\\n     */\\n    function update_ENS_address(\\n        uint256 id,\\n        address token_address,\\n        address ENS_address,\\n        bool valid\\n    ) public {\\n        require(\\n            developer == msg.sender,\\n            \\\"only developer can update ENS address!\\\"\\n        );\\n\\n        AggregatorV3Interface this_priceFeed = AggregatorV3Interface(\\n            ENS_address\\n        );\\n\\n        uint ENS_address_decimails = this_priceFeed.decimals();\\n\\n        token_address_in_contract_addresses[id].token_address = token_address;\\n        token_address_in_contract_addresses[id].ENS_address = ENS_address;\\n        token_address_in_contract_addresses[id].this_priceFeed = this_priceFeed;\\n        token_address_in_contract_addresses[id]\\n            .ENS_address_decimails = ENS_address_decimails;\\n        token_address_in_contract_addresses[id].valid = valid;\\n    }\\n\\n    /**\\n     * Returns the round data.\\n     */\\n    function getRoundData(\\n        uint80 _roundId\\n    ) public view returns (uint80, int256, uint256, uint256, uint80) {\\n        // prettier-ignore\\n        (\\n            uint80 roundID,\\n            int256 answer,\\n            uint startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        ) = priceFeed.getRoundData(_roundId);\\n        return (roundID, answer, startedAt, updatedAt, answeredInRound);\\n    }\\n\\n    /**\\n     * Returns the latest price.\\n     */\\n    function getLatestPrice()\\n        public\\n        view\\n        returns (uint80, int, uint, uint, uint80)\\n    {\\n        // prettier-ignore\\n        (\\n            uint80 roundID,\\n            int price,\\n            uint startedAt,\\n            uint timeStamp,\\n            uint80 answeredInRound\\n        ) = priceFeed.latestRoundData();\\n\\n        return (roundID, price, startedAt, timeStamp, answeredInRound);\\n    }\\n\\n    /**\\n     * to add last price from ChainLink price feed into struct TokenPrice\\n     * parameters:\\n     * token_address:supported ERC20 token in the ChainLink_Price_Feed_Contract_Addresses.\\n     * returns:\\n     * priceFeed.latestRoundData object\\n     * uint80 roundID, int price, uint startedAt,uint timeStamp, uint80 answeredInRound\\n     */\\n    /*\\n    function add_last_token_price(address token_address) public returns (uint80, int, uint, uint,uint80) {\\n\\n        priceFeed = set_ENS_address(token_address);\\n\\n        (\\n            uint80 roundID,\\n            int price,\\n            uint startedAt,\\n            uint timeStamp,\\n            uint80 answeredInRound\\n        ) = getLatestPrice();\\n\\n        bool exist = false;\\n\\n        for (uint256 i = 0; i <= TokenPrice_Id; i++) {\\n            \\n            if( Token_Price[i].token_address == token_address && Token_Price[i].roundID == roundID ) {\\n\\n                exist = true;\\n\\n                break;\\n\\n            }\\n\\n        }\\n\\n        if(exist == false){\\n\\n            TokenPrice_Id++;\\n    \\n\\n            TokenPrice storage new_Token_Price = Token_Price[TokenPrice_Id];\\n            new_Token_Price.id = TokenPrice_Id;\\n            new_Token_Price.token_address = token_address_in_contract_addresses[current_ContractAddresses_Id].token_address;\\n            new_Token_Price.ENS_address = token_address_in_contract_addresses[current_ContractAddresses_Id].ENS_address;\\n            new_Token_Price.roundID = roundID;\\n            new_Token_Price.Timestamp = timeStamp;\\n            new_Token_Price.price = price;\\n\\n\\n        }\\n\\n        return (roundID, price, startedAt,timeStamp, answeredInRound );\\n\\n        \\n\\n    }\\n    */\\n\\n    /**\\n     * Returns historical price for a round id.\\n     * roundId is NOT incremental. Not all roundIds are valid.\\n     * You must know a valid roundId before consuming historical data.\\n     *\\n     * ROUNDID VALUES:\\n     *    InValid:      18446744073709562300\\n     *    Valid:        18446744073709554683\\n     *\\n     * @dev A timestamp with zero value means the round is not complete and should not be used.\\n     */\\n    function getHistoricalPrice(\\n        uint80 roundId\\n    ) public view returns (int256, uint) {\\n        // prettier-ignore\\n        (\\n            /*uint80 roundID*/,\\n            int price,\\n            /*uint startedAt*/,\\n            uint timeStamp,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.getRoundData(roundId);\\n        //require(timeStamp > 0, \\\"Round not complete\\\");\\n        if (timeStamp == 0) {\\n            price = 0;\\n        }\\n        return (price, timeStamp);\\n    }\\n\\n    /**\\n     * to fetch the price from ChainLink price feed of specified timeStamp\\n     * parameters:\\n     * token_address:supported ERC20 token in the ChainLink_Price_Feed_Contract_Addresses.\\n     * timeStamp:preffered timestamp.\\n     * token_decimails:token_decimails of supported ERC20 token\\n     * returns:\\n     * priceFeed.getRoundData() object by roundId\\n     * int256 price.\\n     * uint80 timeStamp.\\n     */\\n    function fetch_closest_price_to_timestamp(\\n        address token_address,\\n        uint timeStamp,\\n        uint token_decimails\\n    ) public returns (uint256, uint80) {\\n        set_ENS_address(token_address);\\n\\n        uint80 roundID;\\n        int price;\\n        uint startedAt;\\n        uint last_timeStamp;\\n        uint80 answeredInRound;\\n\\n        /*first get roundID of last price*/\\n        (\\n            roundID,\\n            price,\\n            startedAt,\\n            last_timeStamp,\\n            answeredInRound\\n        ) = getLatestPrice();\\n\\n        /*use roundID of last price to find old data*/\\n        bool found = false;\\n        uint80 next_roundID = roundID;\\n        uint ENS_address_decimails;\\n\\n        int next_price;\\n        uint next_timeStamp;\\n\\n        while (found == false) {\\n            (next_price, next_timeStamp) = getHistoricalPrice(next_roundID);\\n\\n            target_price = next_price;\\n            target_roundID = next_roundID;\\n\\n            /*find the smallest timestamp_difference, means closest timestamp to the target*/\\n            if (\\n                next_timeStamp <= timeStamp &&\\n                next_timeStamp > 0 &&\\n                next_price > 0\\n            ) {\\n                ENS_address_decimails = token_address_in_contract_addresses[\\n                    current_ContractAddresses_Id\\n                ].ENS_address_decimails;\\n                found = true;\\n                break;\\n            }\\n\\n            next_roundID--;\\n        }\\n\\n        /* calculates correct deciamls */\\n        uint correct_decimals = token_decimails - ENS_address_decimails;\\n        returned_target_price = uint(target_price) * (10 ** correct_decimals);\\n\\n        return (returned_target_price, target_roundID);\\n    }\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}