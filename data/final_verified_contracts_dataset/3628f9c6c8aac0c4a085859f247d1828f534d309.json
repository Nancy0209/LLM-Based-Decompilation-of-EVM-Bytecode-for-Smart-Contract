{
    "address": "0x3628F9C6c8AAC0c4A085859F247D1828F534D309",
    "tx_hash": "7db630989bf61aa27db0a069d3768a87c5be83128ed986a2383fe0d1c2478d62",
    "block_number": 18009163,
    "timestamp": 1693177607,
    "gas_used_in_creation": 4458274,
    "creation_bytecode": "60806040526200001a67016345785d8a000060001962000361565b620000289060001962000384565b600655600060088190556014600955600a8190556028600b819055600d829055600e819055600f91909155601055601280546001600160a01b031990811673ad3f77464adca4b0dbbe3cee9774259ff8e7ceae9081179092556013805490911690911790556015805461ffff60a81b1916600160b01b1790556601c6bf52634000601681905560175564174876e800601855348015620000c757600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506006543360009081526002602090815260409182902092909255601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d908117909155815163c45a015560e01b815291519092839263c45a015592600480830193928290030181865afa15801562000185573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ab9190620003aa565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021f9190620003aa565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af11580156200026d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002939190620003aa565b601580546001600160a01b0319166001600160a01b03928316179055600080548216815260056020526040808220805460ff1990811660019081179092553084528284208054821683179055601254851684528284208054821683179055601354909416835291208054909216179055336001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef67016345785d8a00006040516200035291815260200190565b60405180910390a350620003dc565b6000826200037f57634e487b7160e01b600052601260045260246000fd5b500690565b600082821015620003a557634e487b7160e01b600052601160045260246000fd5b500390565b600060208284031215620003bd57600080fd5b81516001600160a01b0381168114620003d557600080fd5b9392505050565b611baf80620003ec6000396000f3fe6080604052600436106101a05760003560e01c806374010ece116100ec578063a2a957bb1161008a578063c492f04611610064578063c492f046146104a2578063dd62ed3e146104c2578063ea1644d514610508578063f2fde38b1461052857600080fd5b8063a2a957bb1461044d578063a9059cbb1461046d578063c3c8cd801461048d57600080fd5b80638f70ccf7116100c65780638f70ccf7146103ca5780638f9a55c0146103ea57806395d89b411461040057806398a5c3151461042d57600080fd5b806374010ece146103765780637d1db4a5146103965780638da5cb5b146103ac57600080fd5b80632fd689e3116101595780636d8aa8f8116101335780636d8aa8f81461030a5780636fc3eaec1461032c57806370a0823114610341578063715018a61461036157600080fd5b80632fd689e3146102b8578063313ce567146102ce57806349bd5a5e146102ea57600080fd5b806306fdde03146101ac578063095ea7b3146101f157806313114a9d146102215780631694505e1461024557806318160ddd1461027d57806323b872dd1461029857600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b5060408051808201909152600a8152694c6f7720547820496e7560b01b60208201525b6040516101e891906117ab565b60405180910390f35b3480156101fd57600080fd5b5061021161020c366004611815565b610548565b60405190151581526020016101e8565b34801561022d57600080fd5b50610237600c5481565b6040519081526020016101e8565b34801561025157600080fd5b50601454610265906001600160a01b031681565b6040516001600160a01b0390911681526020016101e8565b34801561028957600080fd5b5067016345785d8a0000610237565b3480156102a457600080fd5b506102116102b3366004611841565b61055f565b3480156102c457600080fd5b5061023760185481565b3480156102da57600080fd5b50604051600981526020016101e8565b3480156102f657600080fd5b50601554610265906001600160a01b031681565b34801561031657600080fd5b5061032a610325366004611897565b6105c8565b005b34801561033857600080fd5b5061032a610619565b34801561034d57600080fd5b5061023761035c3660046118b2565b610664565b34801561036d57600080fd5b5061032a610686565b34801561038257600080fd5b5061032a6103913660046118cf565b6106fa565b3480156103a257600080fd5b5061023760165481565b3480156103b857600080fd5b506000546001600160a01b0316610265565b3480156103d657600080fd5b5061032a6103e5366004611897565b610729565b3480156103f657600080fd5b5061023760175481565b34801561040c57600080fd5b506040805180820190915260048152634c494e5560e01b60208201526101db565b34801561043957600080fd5b5061032a6104483660046118cf565b610771565b34801561045957600080fd5b5061032a6104683660046118e8565b6107a0565b34801561047957600080fd5b50610211610488366004611815565b610859565b34801561049957600080fd5b5061032a610866565b3480156104ae57600080fd5b5061032a6104bd36600461191a565b6108ba565b3480156104ce57600080fd5b506102376104dd36600461199e565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b34801561051457600080fd5b5061032a6105233660046118cf565b610955565b34801561053457600080fd5b5061032a6105433660046118b2565b610984565b6000610555338484610a6e565b5060015b92915050565b600061056c848484610b92565b6105be84336105b985604051806060016040528060288152602001611b52602891396001600160a01b038a1660009081526004602090815260408083203384529091529020549190611034565b610a6e565b5060019392505050565b6000546001600160a01b031633146105fb5760405162461bcd60e51b81526004016105f2906119d7565b60405180910390fd5b60158054911515600160b01b0260ff60b01b19909216919091179055565b6012546001600160a01b0316336001600160a01b0316148061064e57506013546001600160a01b0316336001600160a01b0316145b61065757600080fd5b476106618161106e565b50565b6001600160a01b038116600090815260026020526040812054610559906110f7565b6000546001600160a01b031633146106b05760405162461bcd60e51b81526004016105f2906119d7565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146107245760405162461bcd60e51b81526004016105f2906119d7565b601655565b6000546001600160a01b031633146107535760405162461bcd60e51b81526004016105f2906119d7565b60158054911515600160a01b0260ff60a01b19909216919091179055565b6000546001600160a01b0316331461079b5760405162461bcd60e51b81526004016105f2906119d7565b601855565b6000546001600160a01b031633146107ca5760405162461bcd60e51b81526004016105f2906119d7565b6008849055600a8390556009829055600b81905580826107ea8587611a22565b6107f49190611a22565b6107fe9190611a22565b600c819055606410156108535760405162461bcd60e51b815260206004820152601e60248201527f4d757374206b65657020666565732061742031303025206f72206c657373000060448201526064016105f2565b50505050565b6000610555338484610b92565b6012546001600160a01b0316336001600160a01b0316148061089b57506013546001600160a01b0316336001600160a01b0316145b6108a457600080fd5b60006108af30610664565b90506106618161117b565b6000546001600160a01b031633146108e45760405162461bcd60e51b81526004016105f2906119d7565b60005b8281101561085357816005600086868581811061090657610906611a3a565b905060200201602081019061091b91906118b2565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061094d81611a50565b9150506108e7565b6000546001600160a01b0316331461097f5760405162461bcd60e51b81526004016105f2906119d7565b601755565b6000546001600160a01b031633146109ae5760405162461bcd60e51b81526004016105f2906119d7565b6001600160a01b038116610a135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105f2565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316610ad05760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105f2565b6001600160a01b038216610b315760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105f2565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610bf65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105f2565b6001600160a01b038216610c585760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105f2565b60008111610cba5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016105f2565b6000546001600160a01b03848116911614801590610ce657506000546001600160a01b03838116911614155b15610f2d57601554600160a01b900460ff16610d7f576000546001600160a01b03848116911614610d7f5760405162461bcd60e51b815260206004820152603f60248201527f544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e642060448201527f746f6b656e7320756e74696c2074726164696e6720697320656e61626c65640060648201526084016105f2565b601654811115610dd15760405162461bcd60e51b815260206004820152601c60248201527f544f4b454e3a204d6178205472616e73616374696f6e204c696d69740000000060448201526064016105f2565b6015546001600160a01b03838116911614610e565760175481610df384610664565b610dfd9190611a22565b10610e565760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a2042616c616e636520657863656564732077616c6c65742073696044820152627a652160e81b60648201526084016105f2565b6000610e6130610664565b601854601654919250821015908210610e7a5760165491505b808015610e915750601554600160a81b900460ff16155b8015610eab57506015546001600160a01b03868116911614155b8015610ec05750601554600160b01b900460ff165b8015610ee557506001600160a01b03851660009081526005602052604090205460ff16155b8015610f0a57506001600160a01b03841660009081526005602052604090205460ff16155b15610f2a57610f188261117b565b478015610f2857610f284761106e565b505b50505b6001600160a01b03831660009081526005602052604090205460019060ff1680610f6f57506001600160a01b03831660009081526005602052604090205460ff165b80610fa157506015546001600160a01b03858116911614801590610fa157506015546001600160a01b03848116911614155b15610fae57506000611028565b6015546001600160a01b038581169116148015610fd957506014546001600160a01b03848116911614155b15610feb57600854600d55600954600e555b6015546001600160a01b03848116911614801561101657506014546001600160a01b03858116911614155b1561102857600a54600d55600b54600e555b610853848484846112f5565b600081848411156110585760405162461bcd60e51b81526004016105f291906117ab565b5060006110658486611a6b565b95945050505050565b6012546001600160a01b03166108fc611088836002611323565b6040518115909202916000818181858888f193505050501580156110b0573d6000803e3d6000fd5b506013546001600160a01b03166108fc6110cb836002611323565b6040518115909202916000818181858888f193505050501580156110f3573d6000803e3d6000fd5b5050565b600060065482111561115e5760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b60648201526084016105f2565b6000611168611365565b90506111748382611323565b9392505050565b6015805460ff60a81b1916600160a81b17905560408051600280825260608201835260009260208301908036833701905050905030816000815181106111c3576111c3611a3a565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561121c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112409190611a82565b8160018151811061125357611253611a3a565b6001600160a01b0392831660209182029290920101526014546112799130911684610a6e565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac947906112b2908590600090869030904290600401611a9f565b600060405180830381600087803b1580156112cc57600080fd5b505af11580156112e0573d6000803e3d6000fd5b50506015805460ff60a81b1916905550505050565b8061130257611302611388565b61130d8484846113b6565b8061085357610853600f54600d55601054600e55565b600061117483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114ad565b60008060006113726114db565b90925090506113818282611323565b9250505090565b600d541580156113985750600e54155b1561139f57565b600d8054600f55600e805460105560009182905555565b6000806000806000806113c88761151b565b6001600160a01b038f16600090815260026020526040902054959b509399509197509550935091506113fa9087611578565b6001600160a01b03808b1660009081526002602052604080822093909355908a168152205461142990866115ba565b6001600160a01b03891660009081526002602052604090205561144b81611619565b6114558483611663565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161149a91815260200190565b60405180910390a3505050505050505050565b600081836114ce5760405162461bcd60e51b81526004016105f291906117ab565b5060006110658486611b10565b600654600090819067016345785d8a00006114f68282611323565b8210156115125750506006549267016345785d8a000092509050565b90939092509050565b60008060008060008060008060006115388a600d54600e54611687565b9250925092506000611548611365565b9050600080600061155b8e8787876116dc565b919e509c509a509598509396509194505050505091939550919395565b600061117483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611034565b6000806115c78385611a22565b9050838110156111745760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016105f2565b6000611623611365565b90506000611631838361172c565b3060009081526002602052604090205490915061164e90826115ba565b30600090815260026020526040902055505050565b6006546116709083611578565b60065560075461168090826115ba565b6007555050565b60008080806116a1606461169b898961172c565b90611323565b905060006116b4606461169b8a8961172c565b905060006116cc826116c68b86611578565b90611578565b9992985090965090945050505050565b60008080806116eb888661172c565b905060006116f9888761172c565b90506000611707888861172c565b90506000611719826116c68686611578565b939b939a50919850919650505050505050565b60008261173b57506000610559565b60006117478385611b32565b9050826117548583611b10565b146111745760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016105f2565b600060208083528351808285015260005b818110156117d8578581018301518582016040015282016117bc565b818111156117ea576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461066157600080fd5b6000806040838503121561182857600080fd5b823561183381611800565b946020939093013593505050565b60008060006060848603121561185657600080fd5b833561186181611800565b9250602084013561187181611800565b929592945050506040919091013590565b8035801515811461189257600080fd5b919050565b6000602082840312156118a957600080fd5b61117482611882565b6000602082840312156118c457600080fd5b813561117481611800565b6000602082840312156118e157600080fd5b5035919050565b600080600080608085870312156118fe57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006040848603121561192f57600080fd5b833567ffffffffffffffff8082111561194757600080fd5b818601915086601f83011261195b57600080fd5b81358181111561196a57600080fd5b8760208260051b850101111561197f57600080fd5b6020928301955093506119959186019050611882565b90509250925092565b600080604083850312156119b157600080fd5b82356119bc81611800565b915060208301356119cc81611800565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611a3557611a35611a0c565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611a6457611a64611a0c565b5060010190565b600082821015611a7d57611a7d611a0c565b500390565b600060208284031215611a9457600080fd5b815161117481611800565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611aef5784516001600160a01b031683529383019391830191600101611aca565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611b2d57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611b4c57611b4c611a0c565b50029056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220e5fb9aa70cf99d054e4df960b309e330e5f90ecaa246a0146e49fc9bea01d01664736f6c634300080c0033",
    "runtime_bytecode": "",
    "contract_name": "LINU",
    "compiler_version": "v0.8.12+commit.f00d7308",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redisFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redisFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapTokensThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n\r\n*/\r\n\r\n// LOW TX INU\r\n// $LINU\r\n\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.12;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n \r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n \r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n \r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n \r\n    function balanceOf(address account) external view returns (uint256);\r\n \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n \r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n \r\n    function factory() external pure returns (address);\r\n \r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n \r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n \r\n\r\n \r\ncontract LINU is Context, IERC20, Ownable {\r\n \r\n    using SafeMath for uint256;\r\n \r\n    string private constant _name = unicode\"Low Tx Inu\";\r\n    string private constant _symbol = unicode\"LINU\";\r\n    uint8 private constant _decimals = 9;\r\n \r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private constant _tTotal = 100000000 * 10**9; \r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n \r\n    //Buy Fee\r\n    uint256 private _feeOnBuy = 0;  \r\n    uint256 private _taxOnBuy = 20;   \r\n \r\n    //Sell Fee\r\n    uint256 private _feeOnSell = 0; \r\n    uint256 private _taxOnSell = 40;  \r\n\r\n    uint256 public totalFees;\r\n \r\n    //Original Fee\r\n    uint256 private _redisFee = _feeOnSell;\r\n    uint256 private _taxFee = _taxOnSell;\r\n \r\n    uint256 private _previousredisFee = _redisFee;\r\n    uint256 private _previoustaxFee = _taxFee;\r\n \r\n    mapping(address => uint256) private cooldown;\r\n \r\n    address payable private _developmentWalletAddress = payable(0xAD3F77464AdCA4b0dBbe3ceE9774259FF8E7ceaE);\r\n    address payable private _marketingWalletAddress = payable(0xAD3F77464AdCA4b0dBbe3ceE9774259FF8E7ceaE);\r\n \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n \r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n \r\n    uint256 public _maxTxAmount = 500000 * 10**9;\r\n    uint256 public _maxWalletSize = 500000 * 10**9; \r\n    uint256 public _swapTokensAtAmount = 100 * 10**9; \r\n \r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n \r\n    constructor() {\r\n \r\n        _rOwned[_msgSender()] = _rTotal;\r\n \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_developmentWalletAddress] = true;\r\n        _isExcludedFromFee[_marketingWalletAddress] = true;\r\n \r\n \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n \r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n \r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n \r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n \r\n    function tokenFromReflection(uint256 rAmount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n \r\n    function removeAllFee() private {\r\n        if (_redisFee == 0 && _taxFee == 0) return;\r\n \r\n        _previousredisFee = _redisFee;\r\n        _previoustaxFee = _taxFee;\r\n \r\n        _redisFee = 0;\r\n        _taxFee = 0;\r\n    }\r\n \r\n    function restoreAllFee() private {\r\n        _redisFee = _previousredisFee;\r\n        _taxFee = _previoustaxFee;\r\n    }\r\n \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n \r\n        if (from != owner() && to != owner()) {\r\n \r\n            //Trade start check\r\n            if (!tradingOpen) {\r\n                require(from == owner(), \"TOKEN: This account cannot send tokens until trading is enabled\");\r\n            }\r\n \r\n            require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n \r\n            if(to != uniswapV2Pair) {\r\n                require(balanceOf(to) + amount < _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");\r\n            }\r\n \r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\r\n \r\n            if(contractTokenBalance >= _maxTxAmount)\r\n            {\r\n                contractTokenBalance = _maxTxAmount;\r\n            }\r\n \r\n            if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n \r\n        bool takeFee = true;\r\n \r\n        //Transfer Tokens\r\n        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n            takeFee = false;\r\n        } else {\r\n \r\n            //Set Fee for Buys\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                _redisFee = _feeOnBuy;\r\n                _taxFee = _taxOnBuy;\r\n            }\r\n \r\n            //Set Fee for Sells\r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                _redisFee = _feeOnSell;\r\n                _taxFee = _taxOnSell;\r\n            }\r\n \r\n        }\r\n \r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n \r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n \r\n    function sendETHToFee(uint256 amount) private {\r\n        _developmentWalletAddress.transfer(amount.div(2));\r\n        _marketingWalletAddress.transfer(amount.div(2));\r\n    }\r\n \r\n    function setTrading(bool _tradingOpen) public onlyOwner {\r\n        tradingOpen = _tradingOpen;\r\n    }\r\n \r\n    function manualswap() external {\r\n        require(_msgSender() == _developmentWalletAddress || _msgSender() == _marketingWalletAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n \r\n    function manualsend() external {\r\n        require(_msgSender() == _developmentWalletAddress || _msgSender() == _marketingWalletAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n \r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n \r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n \r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n \r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n \r\n    receive() external payable {}\r\n \r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\r\n            _getTValues(tAmount, _redisFee, _taxFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n            _getRValues(tAmount, tFee, tTeam, currentRate);\r\n \r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n \r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        uint256 redisFee,\r\n        uint256 taxFee\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = tAmount.mul(redisFee).div(100);\r\n        uint256 tTeam = tAmount.mul(taxFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n \r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n \r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTeam,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n \r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n \r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n \r\n        return rSupply.div(tSupply);\r\n    }\r\n \r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n \r\n        return (rSupply, tSupply);\r\n    }\r\n \r\n    function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {\r\n        _feeOnBuy = redisFeeOnBuy;\r\n        _feeOnSell = redisFeeOnSell;\r\n        _taxOnBuy = taxFeeOnBuy;\r\n        _taxOnSell = taxFeeOnSell;\r\n        totalFees = _feeOnBuy + _feeOnSell + _taxOnBuy + _taxOnSell;\r\n        require(totalFees <= 100, \"Must keep fees at 100% or less\");\r\n    }\r\n \r\n    //Set minimum tokens required to swap.\r\n    function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {\r\n        _swapTokensAtAmount = swapTokensAtAmount;\r\n    }\r\n \r\n    //Set minimum tokens required to swap.\r\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n \r\n \r\n    //Set max buy amount \r\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n\r\n    //Set max wallet amount \r\n    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n        _maxWalletSize = maxWalletSize;\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n}",
    "etherscan_verified": true
}