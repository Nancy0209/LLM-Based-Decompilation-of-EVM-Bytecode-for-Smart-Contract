{
    "address": "0x46c4C3ef9A1557017955E74D4F3550971C2700A3",
    "tx_hash": "d3c73ab965ea1601cd1552ffe324b664a6f5f02b5675ae03b62db4b5dd2c2be6",
    "block_number": 18006619,
    "timestamp": 1693146767,
    "gas_used_in_creation": 5087322,
    "creation_bytecode": "6080604052620000126004600a6200064f565b620000239064174876e8006200065f565b600381905562000044906064906200003d9060016200042c565b90620004bf565b6004556003546200005f906064906200003d9060016200042c565b6005556001600a819055600b819055600c8190555f600d819055600e81905590806200008c818462000679565b62000098919062000679565b620000a4919062000679565b620000b0919062000679565b600f5560646010819055600560118190556012819055601355601e601955601a55601d805461ffff60a01b1916600160a81b1790556003546103e890620000f990604b6200065f565b6200010591906200068f565b601e5534801562000114575f80fd5b505f80546001600160a01b031916339081178255808252600160208190526040808420805460ff191690921790915551909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350601b80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d908117909155604080516315ab88c960e31b8152905163ad5c4648916004808201926020929091908290030181865afa158015620001d1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620001f79190620006af565b600280546001600160a01b0319166001600160a01b03928316179055601b546040805163c45a015560e01b81529051919092169163c45a01559160048083019260209291908290030181865afa15801562000254573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200027a9190620006af565b6002546040516364e329cb60e11b81526001600160a01b03918216600482015230602482015291169063c9c65396906044016020604051808303815f875af1158015620002c9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620002ef9190620006af565b601d80546001600160a01b039283166001600160a01b031991821681178355601c805483169091179055305f818152600760209081526040808320601b548816845282528083205f1990553380845260088352818420805460ff1990811660019081179092556009855283862080548216831790559754891685528285208054891682179055601580549099168552828520805489168217905594845281842080549097169094179095556014805485168417905585548416733e0b2a2c81232b0c587d64b24d971c53a73a805b1790955560168054841683179055601780548416831790556018805490931661dead179092556003548183526006855283832081905592519283529290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a362000724565b5f825f036200043d57505f620004b9565b5f6200044a83856200065f565b9050826200045985836200068f565b14620004b65760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084015b60405180910390fd5b90505b92915050565b5f620004b683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200050860201b60201c565b5f81836200052b5760405162461bcd60e51b8152600401620004ad9190620006d7565b505f6200053984866200068f565b95945050505050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200059657815f19048211156200057a576200057a62000542565b808516156200058857918102915b93841c93908002906200055b565b509250929050565b5f82620005ae57506001620004b9565b81620005bc57505f620004b9565b8160018114620005d55760028114620005e05762000600565b6001915050620004b9565b60ff841115620005f457620005f462000542565b50506001821b620004b9565b5060208310610133831016604e8410600b841016171562000625575081810a620004b9565b62000631838362000556565b805f190482111562000647576200064762000542565b029392505050565b5f620004b660ff8416836200059e565b8082028115828204841417620004b957620004b962000542565b80820180821115620004b957620004b962000542565b5f82620006aa57634e487b7160e01b5f52601260045260245ffd5b500490565b5f60208284031215620006c0575f80fd5b81516001600160a01b0381168114620004b6575f80fd5b5f6020808352835180828501525f5b818110156200070457858101830151858201604001528201620006e6565b505f604082860101526040601f19601f8301168501019250505092915050565b61206d80620007325f395ff3fe608060405260043610610215575f3560e01c806378109e541161011e578063a8aa1b31116100a8578063dd62ed3e1161006d578063dd62ed3e146105f1578063ded1e43814610635578063f2b82e0a14610654578063f2fde38b14610673578063f887ea4014610692575f80fd5b8063a8aa1b3114610557578063a9059cbb14610576578063b2bdfa7b14610595578063ca3e4d05146105b3578063cec10c11146105d2575f80fd5b80638a4068dd116100ee5780638a4068dd146104c65780638a8c523c146104da5780638da5cb5b146104ee57806395d89b411461050a57806397613b2814610538575f80fd5b806378109e54146104585780637c519ffb1461046d5780637d1db4a514610481578063893d20e814610496575f80fd5b8063313ce5671161019f57806370a082311161016f57806370a08231146103be578063715018a6146103f257806372a2f35214610406578063751039fc1461042557806377b54bad14610439575f80fd5b8063313ce56714610350578063552656691461036b578063571ac8b01461037f5780636ddd17131461039e575f80fd5b80630b3cbe36116101e55780630b3cbe36146102d357806318160ddd146102e95780631df4ccfc146102fd57806323b872dd1461031257806330c9a6a014610331575f80fd5b80630445b6671461022057806306fdde031461024857806308fd3d0514610284578063095ea7b3146102b4575f80fd5b3661021c57005b5f80fd5b34801561022b575f80fd5b50610235601e5481565b6040519081526020015b60405180910390f35b348015610253575f80fd5b5060408051808201909152600b81526a426f76696e69547269626560a81b60208201525b60405161023f9190611c58565b34801561028f575f80fd5b50601d546102a490600160a01b900460ff1681565b604051901515815260200161023f565b3480156102bf575f80fd5b506102a46102ce366004611cbe565b6106b1565b3480156102de575f80fd5b506102e761071d565b005b3480156102f4575f80fd5b50600354610235565b348015610308575f80fd5b50610235600f5481565b34801561031d575f80fd5b506102a461032c366004611ce6565b610762565b34801561033c575f80fd5b5061023561034b366004611d1f565b610820565b34801561035b575f80fd5b506040516004815260200161023f565b348015610376575f80fd5b50610235610865565b34801561038a575f80fd5b506102a4610399366004611d36565b6108d5565b3480156103a9575f80fd5b50601d546102a490600160a81b900460ff1681565b3480156103c9575f80fd5b506102356103d8366004611d36565b6001600160a01b03165f9081526006602052604090205490565b3480156103fd575f80fd5b506102e76108e1565b348015610411575f80fd5b506102e7610420366004611d1f565b610952565b348015610430575f80fd5b506102e76109de565b348015610444575f80fd5b506102a4610453366004611cbe565b610a14565b348015610463575f80fd5b5061023560055481565b348015610478575f80fd5b506102e7610ba4565b34801561048c575f80fd5b5061023560045481565b3480156104a1575f80fd5b505f546001600160a01b03165b6040516001600160a01b03909116815260200161023f565b3480156104d1575f80fd5b506102e7610be0565b3480156104e5575f80fd5b506102e7610c19565b3480156104f9575f80fd5b505f546001600160a01b03166104ae565b348015610515575f80fd5b50604080518082019091526006815265424f56494e4960d01b6020820152610277565b348015610543575f80fd5b506102e7610552366004611d5c565b610c57565b348015610562575f80fd5b50601d546104ae906001600160a01b031681565b348015610581575f80fd5b506102a4610590366004611cbe565b610ce9565b3480156105a0575f80fd5b505f546104ae906001600160a01b031681565b3480156105be575f80fd5b506102e76105cd366004611d78565b610cf5565b3480156105dd575f80fd5b506102e76105ec366004611dd9565b610dcc565b3480156105fc575f80fd5b5061023561060b366004611e02565b6001600160a01b039182165f90815260076020908152604080832093909416825291909152205490565b348015610640575f80fd5b506102a461064f366004611e33565b610e06565b34801561065f575f80fd5b506102e761066e366004611e53565b610e19565b34801561067e575f80fd5b506102e761068d366004611d36565b610ee6565b34801561069d575f80fd5b50601b546104ae906001600160a01b031681565b335f8181526007602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061070b9086815260200190565b60405180910390a35060015b92915050565b5f546001600160a01b0316331461074f5760405162461bcd60e51b815260040161074690611e92565b60405180910390fd5b61019060115561015e6012556064601355565b6001600160a01b0383165f9081526007602090815260408083203384529091528120545f191461080b576040805180820182526016815275496e73756666696369656e7420416c6c6f77616e636560501b6020808301919091526001600160a01b0387165f9081526007825283812033825290915291909120546107e7918490610fcd565b6001600160a01b0385165f9081526007602090815260408083203384529091529020555b610816848484611005565b90505b9392505050565b5f61071761082c610865565b601d546001600160a01b03165f9081526006602052604090205461085f90610858906002905b9061135c565b859061135c565b906113da565b60066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f85461dead5f9081527f1aecba4ebe7a4e0673e4891b2b092b2228e4322380b579fb494fad3da8586e225460035491926108d09290916108ca919061141b565b9061141b565b905090565b5f610717825f196106b1565b5f546001600160a01b0316331461090a5760405162461bcd60e51b815260040161074690611e92565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b0316331461097b5760405162461bcd60e51b815260040161074690611e92565b6001811015610988575f80fd5b6103e8816003546109999190611edb565b6109a39190611ef2565b60058190556040519081527f1273be876d6df5e39545188e5f5d2d930e30e383f2fb2dc9dfaae2643901be519060200160405180910390a150565b5f546001600160a01b03163314610a075760405162461bcd60e51b815260040161074690611e92565b6003546004819055600555565b5f306001600160a01b03841603610a7e5760405162461bcd60e51b815260206004820152602860248201527f746f6b656e416464726573732063616e206e6f7420626520746865206e6174696044820152673b32903a37b5b2b760c11b6064820152608401610746565b815f03610aee576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610ac7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aeb9190611f11565b91505b604080516001600160a01b0385168152602081018490527fda2bc2bedd1f85b5a59d5dbbd6684ff877ef916994a16ec08813101e99ace65f910160405180910390a160145460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529084169063a9059cbb906044016020604051808303815f875af1158015610b80573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108199190611f28565b5f546001600160a01b03163314610bcd5760405162461bcd60e51b815260040161074690611e92565b61028a6011556103e86012556064601355565b6014546040516001600160a01b03909116904780156108fc02915f818181858888f19350505050158015610c16573d5f803e3d5ffd5b50565b5f546001600160a01b03163314610c425760405162461bcd60e51b815260040161074690611e92565b601d805460ff60a01b1916600160a01b179055565b5f546001600160a01b03163314610c805760405162461bcd60e51b815260040161074690611e92565b601d805460ff60a81b1916600160a81b84151581029190911791829055601e8390556040805184815260ff9290930491909116151560208301527f519582fd959400ab5e398f78c2768dea99251e8e26aed5578213b059ce4cee60910160405180910390a15050565b5f610819338484611005565b5f546001600160a01b03163314610d1e5760405162461bcd60e51b815260040161074690611e92565b601480546001600160a01b038781166001600160a01b031992831617909255601580548784169083168117909155601680548785169084168117909155601880548786169085168117909155601780549587169590941685179093556040805192835260208301949094529281019190915260608101919091527f06cd79b5e338fdebb51e28f829f3333e4fda9663d4732f262d97dbbacf748b159060800160405180910390a15050505050565b5f546001600160a01b03163314610df55760405162461bcd60e51b815260040161074690611e92565b601191909155601291909155601355565b5f82610e1183610820565b119392505050565b5f546001600160a01b03163314610e425760405162461bcd60e51b815260040161074690611e92565b600a869055600d859055600b849055600c839055600e829055610e7382610e6d858188818c8c61145c565b9061145c565b600f556010819055610e86600282611ef2565b600f5410610ed65760405162461bcd60e51b815260206004820152601d60248201527f466565732063616e206e6f74206265206d6f7265207468616e203130250000006044820152606401610746565b610ede6114ba565b505050505050565b5f546001600160a01b03163314610f0f5760405162461bcd60e51b815260040161074690611e92565b6001600160a01b038116610f745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610746565b5f80546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35f80546001600160a01b0319166001600160a01b0392909216919091179055565b5f8184841115610ff05760405162461bcd60e51b81526004016107469190611c58565b505f610ffc8486611f43565b95945050505050565b601f545f9060ff16156110245761101d848484611555565b9050610819565b6001600160a01b0384165f9081526001602052604090205460ff1615801561106457506001600160a01b0383165f9081526001602052604090205460ff16155b156110b957601d54600160a01b900460ff166110b95760405162461bcd60e51b8152602060048201526014602482015273151c98591a5b99c81b9bdd081bdc195b881e595d60621b6044820152606401610746565b6001600160a01b0384165f9081526001602052604090205460ff161580156110ea57506001600160a01b0383163014155b801561110157506001600160a01b03831661dead14155b801561111b5750601d546001600160a01b03848116911614155b801561113557506018546001600160a01b03848116911614155b801561114f57506015546001600160a01b03848116911614155b801561117357506001600160a01b0383165f9081526009602052604090205460ff16155b15611213576001600160a01b0383165f9081526006602052604090205460055461119d8483611f56565b11156112115760405162461bcd60e51b815260206004820152603e60248201527f546f74616c20486f6c64696e672069732063757272656e746c79206c696d697460448201527f65642c20796f752063616e206e6f74206275792074686174206d7563682e00006064820152608401610746565b505b61121d8483611625565b611225611691565b15611232576112326116e5565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0387165f90815260069091529190912054611283918490610fcd565b6001600160a01b0385165f90815260066020908152604080832093909355600890529081205460ff16806112ce57506001600160a01b0384165f9081526008602052604090205460ff165b6112e2576112dd858486611aad565b6112e4565b825b6001600160a01b0385165f90815260066020526040902054909150611309908261145c565b6001600160a01b038086165f8181526006602052604090819020939093559151908716905f80516020612018833981519152906113499085815260200190565b60405180910390a3506001949350505050565b5f825f0361136b57505f610717565b5f6113768385611edb565b9050826113838583611ef2565b146108195760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610746565b5f61081983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611c2c565b5f61081983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610fcd565b5f806114688385611f56565b9050838110156108195760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610746565b7f8cc651ceed4360bdb07d4dfc17daa4a6fa17092a313d2464a582a73e9b9328006114f7606461085f601254600f5461135c90919063ffffffff16565b611513606461085f601154600f5461135c90919063ffffffff16565b61152f606461085f601354600f5461135c90919063ffffffff16565b6040805160ff9485168152928416602084015292168183015290519081900360600190a1565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0386165f9081526006909152918220546115a5918490610fcd565b6001600160a01b038086165f9081526006602052604080822093909355908516815220546115d3908361145c565b6001600160a01b038085165f8181526006602052604090819020939093559151908616905f80516020612018833981519152906116139086815260200190565b60405180910390a35060019392505050565b6004548111158061164d57506001600160a01b0382165f9081526009602052604090205460ff165b61168d5760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b6044820152606401610746565b5050565b601d545f906001600160a01b031633148015906116b15750601f5460ff16155b80156116c65750601d54600160a81b900460ff165b80156108d0575050601e54305f90815260066020526040902054101590565b601f805460ff19166001179055601954601a545f9161170391610e06565b61170f57600a54611711565b5f5b90505f611734600261085f600f5461085f86601e5461135c90919063ffffffff16565b90505f61174c82601e5461141b90919063ffffffff16565b6040805160028082526060820183529293505f92909160208301908036833701905050905030815f8151811061178457611784611f69565b6001600160a01b0392831660209182029290920101526002548251911690829060019081106117b5576117b5611f69565b6001600160a01b039283166020918202929092010152601b5460405163791ac94760e01b81524792919091169063791ac947906117fe9086905f90879030904290600401611f7d565b5f604051808303815f87803b158015611815575f80fd5b505af1158015611827573d5f803e3d5ffd5b505050505f61183f824761141b90919063ffffffff16565b90505f6118596118508860026113da565b600f549061141b565b90505f61186d600261085f8481878d61135c565b90505f6118898361085f600b548761135c90919063ffffffff16565b90505f6118a58461085f600d548861135c90919063ffffffff16565b90505f6118c18561085f600c548961135c90919063ffffffff16565b6015546040519192505f916001600160a01b039091169085908381818185875af1925050503d805f8114611910576040519150601f19603f3d011682016040523d82523d5f602084013e611915565b606091505b50506016546040519192506001600160a01b03169083905f81818185875af1925050503d805f8114611962576040519150601f19603f3d011682016040523d82523d5f602084013e611967565b606091505b50506017546040519192506001600160a01b03169084905f81818185875af1925050503d805f81146119b4576040519150601f19603f3d011682016040523d82523d5f602084013e6119b9565b606091505b505f9250508b159050611a9557601b5460145460405163f305d71960e01b8152306004820152602481018e90525f6044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990879060c40160606040518083038185885af1158015611a33573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190611a589190611fec565b505060408051878152602081018e90527f424db2872186fa7e7afa7a5e902ed3b49a2ef19c2f5431e672462495dd6b450692500160405180910390a15b5050601f805460ff1916905550505050505050505050565b601354601d545f91906001600160a01b0390811690841603611ad25750601154611aed565b601d546001600160a01b0390811690861603611aed57506012545b5f611b196010546064611b009190611edb565b61085f84610852600f548a61135c90919063ffffffff16565b90505f611b37600f5461085f600e548561135c90919063ffffffff16565b90505f611b44838361141b565b305f90815260066020526040902054909150611b60908261145c565b305f90815260066020526040808220929092556018546001600160a01b031681522054611b8d908361145c565b6018546001600160a01b039081165f9081526006602090815260409182902093909355518381523092918b16915f80516020612018833981519152910160405180910390a38115611c1657600354611be5908361141b565b6003556040518281525f906001600160a01b038a16905f805160206120188339815191529060200160405180910390a35b611c20878461141b565b98975050505050505050565b5f8183611c4c5760405162461bcd60e51b81526004016107469190611c58565b505f610ffc8486611ef2565b5f6020808352835180828501525f5b81811015611c8357858101830151858201604001528201611c67565b505f604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114611cb9575f80fd5b919050565b5f8060408385031215611ccf575f80fd5b611cd883611ca3565b946020939093013593505050565b5f805f60608486031215611cf8575f80fd5b611d0184611ca3565b9250611d0f60208501611ca3565b9150604084013590509250925092565b5f60208284031215611d2f575f80fd5b5035919050565b5f60208284031215611d46575f80fd5b61081982611ca3565b8015158114610c16575f80fd5b5f8060408385031215611d6d575f80fd5b8235611cd881611d4f565b5f805f805f60a08688031215611d8c575f80fd5b611d9586611ca3565b9450611da360208701611ca3565b9350611db160408701611ca3565b9250611dbf60608701611ca3565b9150611dcd60808701611ca3565b90509295509295909350565b5f805f60608486031215611deb575f80fd5b505081359360208301359350604090920135919050565b5f8060408385031215611e13575f80fd5b611e1c83611ca3565b9150611e2a60208401611ca3565b90509250929050565b5f8060408385031215611e44575f80fd5b50508035926020909101359150565b5f805f805f8060c08789031215611e68575f80fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761071757610717611ec7565b5f82611f0c57634e487b7160e01b5f52601260045260245ffd5b500490565b5f60208284031215611f21575f80fd5b5051919050565b5f60208284031215611f38575f80fd5b815161081981611d4f565b8181038181111561071757610717611ec7565b8082018082111561071757610717611ec7565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015611fcb5784516001600160a01b031683529383019391830191600101611fa6565b50506001600160a01b03969096166060850152505050608001529392505050565b5f805f60608486031215611ffe575f80fd5b835192506020840151915060408401519050925092509256feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202dd29669b3c7e6a22f5121248925773c09a76259b332d63501a3e190e9ffcd3f64736f6c63430008140033",
    "runtime_bytecode": "608060405260043610610215575f3560e01c806378109e541161011e578063a8aa1b31116100a8578063dd62ed3e1161006d578063dd62ed3e146105f1578063ded1e43814610635578063f2b82e0a14610654578063f2fde38b14610673578063f887ea4014610692575f80fd5b8063a8aa1b3114610557578063a9059cbb14610576578063b2bdfa7b14610595578063ca3e4d05146105b3578063cec10c11146105d2575f80fd5b80638a4068dd116100ee5780638a4068dd146104c65780638a8c523c146104da5780638da5cb5b146104ee57806395d89b411461050a57806397613b2814610538575f80fd5b806378109e54146104585780637c519ffb1461046d5780637d1db4a514610481578063893d20e814610496575f80fd5b8063313ce5671161019f57806370a082311161016f57806370a08231146103be578063715018a6146103f257806372a2f35214610406578063751039fc1461042557806377b54bad14610439575f80fd5b8063313ce56714610350578063552656691461036b578063571ac8b01461037f5780636ddd17131461039e575f80fd5b80630b3cbe36116101e55780630b3cbe36146102d357806318160ddd146102e95780631df4ccfc146102fd57806323b872dd1461031257806330c9a6a014610331575f80fd5b80630445b6671461022057806306fdde031461024857806308fd3d0514610284578063095ea7b3146102b4575f80fd5b3661021c57005b5f80fd5b34801561022b575f80fd5b50610235601e5481565b6040519081526020015b60405180910390f35b348015610253575f80fd5b5060408051808201909152600b81526a426f76696e69547269626560a81b60208201525b60405161023f9190611c58565b34801561028f575f80fd5b50601d546102a490600160a01b900460ff1681565b604051901515815260200161023f565b3480156102bf575f80fd5b506102a46102ce366004611cbe565b6106b1565b3480156102de575f80fd5b506102e761071d565b005b3480156102f4575f80fd5b50600354610235565b348015610308575f80fd5b50610235600f5481565b34801561031d575f80fd5b506102a461032c366004611ce6565b610762565b34801561033c575f80fd5b5061023561034b366004611d1f565b610820565b34801561035b575f80fd5b506040516004815260200161023f565b348015610376575f80fd5b50610235610865565b34801561038a575f80fd5b506102a4610399366004611d36565b6108d5565b3480156103a9575f80fd5b50601d546102a490600160a81b900460ff1681565b3480156103c9575f80fd5b506102356103d8366004611d36565b6001600160a01b03165f9081526006602052604090205490565b3480156103fd575f80fd5b506102e76108e1565b348015610411575f80fd5b506102e7610420366004611d1f565b610952565b348015610430575f80fd5b506102e76109de565b348015610444575f80fd5b506102a4610453366004611cbe565b610a14565b348015610463575f80fd5b5061023560055481565b348015610478575f80fd5b506102e7610ba4565b34801561048c575f80fd5b5061023560045481565b3480156104a1575f80fd5b505f546001600160a01b03165b6040516001600160a01b03909116815260200161023f565b3480156104d1575f80fd5b506102e7610be0565b3480156104e5575f80fd5b506102e7610c19565b3480156104f9575f80fd5b505f546001600160a01b03166104ae565b348015610515575f80fd5b50604080518082019091526006815265424f56494e4960d01b6020820152610277565b348015610543575f80fd5b506102e7610552366004611d5c565b610c57565b348015610562575f80fd5b50601d546104ae906001600160a01b031681565b348015610581575f80fd5b506102a4610590366004611cbe565b610ce9565b3480156105a0575f80fd5b505f546104ae906001600160a01b031681565b3480156105be575f80fd5b506102e76105cd366004611d78565b610cf5565b3480156105dd575f80fd5b506102e76105ec366004611dd9565b610dcc565b3480156105fc575f80fd5b5061023561060b366004611e02565b6001600160a01b039182165f90815260076020908152604080832093909416825291909152205490565b348015610640575f80fd5b506102a461064f366004611e33565b610e06565b34801561065f575f80fd5b506102e761066e366004611e53565b610e19565b34801561067e575f80fd5b506102e761068d366004611d36565b610ee6565b34801561069d575f80fd5b50601b546104ae906001600160a01b031681565b335f8181526007602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061070b9086815260200190565b60405180910390a35060015b92915050565b5f546001600160a01b0316331461074f5760405162461bcd60e51b815260040161074690611e92565b60405180910390fd5b61019060115561015e6012556064601355565b6001600160a01b0383165f9081526007602090815260408083203384529091528120545f191461080b576040805180820182526016815275496e73756666696369656e7420416c6c6f77616e636560501b6020808301919091526001600160a01b0387165f9081526007825283812033825290915291909120546107e7918490610fcd565b6001600160a01b0385165f9081526007602090815260408083203384529091529020555b610816848484611005565b90505b9392505050565b5f61071761082c610865565b601d546001600160a01b03165f9081526006602052604090205461085f90610858906002905b9061135c565b859061135c565b906113da565b60066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f85461dead5f9081527f1aecba4ebe7a4e0673e4891b2b092b2228e4322380b579fb494fad3da8586e225460035491926108d09290916108ca919061141b565b9061141b565b905090565b5f610717825f196106b1565b5f546001600160a01b0316331461090a5760405162461bcd60e51b815260040161074690611e92565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b0316331461097b5760405162461bcd60e51b815260040161074690611e92565b6001811015610988575f80fd5b6103e8816003546109999190611edb565b6109a39190611ef2565b60058190556040519081527f1273be876d6df5e39545188e5f5d2d930e30e383f2fb2dc9dfaae2643901be519060200160405180910390a150565b5f546001600160a01b03163314610a075760405162461bcd60e51b815260040161074690611e92565b6003546004819055600555565b5f306001600160a01b03841603610a7e5760405162461bcd60e51b815260206004820152602860248201527f746f6b656e416464726573732063616e206e6f7420626520746865206e6174696044820152673b32903a37b5b2b760c11b6064820152608401610746565b815f03610aee576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610ac7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aeb9190611f11565b91505b604080516001600160a01b0385168152602081018490527fda2bc2bedd1f85b5a59d5dbbd6684ff877ef916994a16ec08813101e99ace65f910160405180910390a160145460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529084169063a9059cbb906044016020604051808303815f875af1158015610b80573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108199190611f28565b5f546001600160a01b03163314610bcd5760405162461bcd60e51b815260040161074690611e92565b61028a6011556103e86012556064601355565b6014546040516001600160a01b03909116904780156108fc02915f818181858888f19350505050158015610c16573d5f803e3d5ffd5b50565b5f546001600160a01b03163314610c425760405162461bcd60e51b815260040161074690611e92565b601d805460ff60a01b1916600160a01b179055565b5f546001600160a01b03163314610c805760405162461bcd60e51b815260040161074690611e92565b601d805460ff60a81b1916600160a81b84151581029190911791829055601e8390556040805184815260ff9290930491909116151560208301527f519582fd959400ab5e398f78c2768dea99251e8e26aed5578213b059ce4cee60910160405180910390a15050565b5f610819338484611005565b5f546001600160a01b03163314610d1e5760405162461bcd60e51b815260040161074690611e92565b601480546001600160a01b038781166001600160a01b031992831617909255601580548784169083168117909155601680548785169084168117909155601880548786169085168117909155601780549587169590941685179093556040805192835260208301949094529281019190915260608101919091527f06cd79b5e338fdebb51e28f829f3333e4fda9663d4732f262d97dbbacf748b159060800160405180910390a15050505050565b5f546001600160a01b03163314610df55760405162461bcd60e51b815260040161074690611e92565b601191909155601291909155601355565b5f82610e1183610820565b119392505050565b5f546001600160a01b03163314610e425760405162461bcd60e51b815260040161074690611e92565b600a869055600d859055600b849055600c839055600e829055610e7382610e6d858188818c8c61145c565b9061145c565b600f556010819055610e86600282611ef2565b600f5410610ed65760405162461bcd60e51b815260206004820152601d60248201527f466565732063616e206e6f74206265206d6f7265207468616e203130250000006044820152606401610746565b610ede6114ba565b505050505050565b5f546001600160a01b03163314610f0f5760405162461bcd60e51b815260040161074690611e92565b6001600160a01b038116610f745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610746565b5f80546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35f80546001600160a01b0319166001600160a01b0392909216919091179055565b5f8184841115610ff05760405162461bcd60e51b81526004016107469190611c58565b505f610ffc8486611f43565b95945050505050565b601f545f9060ff16156110245761101d848484611555565b9050610819565b6001600160a01b0384165f9081526001602052604090205460ff1615801561106457506001600160a01b0383165f9081526001602052604090205460ff16155b156110b957601d54600160a01b900460ff166110b95760405162461bcd60e51b8152602060048201526014602482015273151c98591a5b99c81b9bdd081bdc195b881e595d60621b6044820152606401610746565b6001600160a01b0384165f9081526001602052604090205460ff161580156110ea57506001600160a01b0383163014155b801561110157506001600160a01b03831661dead14155b801561111b5750601d546001600160a01b03848116911614155b801561113557506018546001600160a01b03848116911614155b801561114f57506015546001600160a01b03848116911614155b801561117357506001600160a01b0383165f9081526009602052604090205460ff16155b15611213576001600160a01b0383165f9081526006602052604090205460055461119d8483611f56565b11156112115760405162461bcd60e51b815260206004820152603e60248201527f546f74616c20486f6c64696e672069732063757272656e746c79206c696d697460448201527f65642c20796f752063616e206e6f74206275792074686174206d7563682e00006064820152608401610746565b505b61121d8483611625565b611225611691565b15611232576112326116e5565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0387165f90815260069091529190912054611283918490610fcd565b6001600160a01b0385165f90815260066020908152604080832093909355600890529081205460ff16806112ce57506001600160a01b0384165f9081526008602052604090205460ff165b6112e2576112dd858486611aad565b6112e4565b825b6001600160a01b0385165f90815260066020526040902054909150611309908261145c565b6001600160a01b038086165f8181526006602052604090819020939093559151908716905f80516020612018833981519152906113499085815260200190565b60405180910390a3506001949350505050565b5f825f0361136b57505f610717565b5f6113768385611edb565b9050826113838583611ef2565b146108195760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610746565b5f61081983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611c2c565b5f61081983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610fcd565b5f806114688385611f56565b9050838110156108195760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610746565b7f8cc651ceed4360bdb07d4dfc17daa4a6fa17092a313d2464a582a73e9b9328006114f7606461085f601254600f5461135c90919063ffffffff16565b611513606461085f601154600f5461135c90919063ffffffff16565b61152f606461085f601354600f5461135c90919063ffffffff16565b6040805160ff9485168152928416602084015292168183015290519081900360600190a1565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0386165f9081526006909152918220546115a5918490610fcd565b6001600160a01b038086165f9081526006602052604080822093909355908516815220546115d3908361145c565b6001600160a01b038085165f8181526006602052604090819020939093559151908616905f80516020612018833981519152906116139086815260200190565b60405180910390a35060019392505050565b6004548111158061164d57506001600160a01b0382165f9081526009602052604090205460ff165b61168d5760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b6044820152606401610746565b5050565b601d545f906001600160a01b031633148015906116b15750601f5460ff16155b80156116c65750601d54600160a81b900460ff165b80156108d0575050601e54305f90815260066020526040902054101590565b601f805460ff19166001179055601954601a545f9161170391610e06565b61170f57600a54611711565b5f5b90505f611734600261085f600f5461085f86601e5461135c90919063ffffffff16565b90505f61174c82601e5461141b90919063ffffffff16565b6040805160028082526060820183529293505f92909160208301908036833701905050905030815f8151811061178457611784611f69565b6001600160a01b0392831660209182029290920101526002548251911690829060019081106117b5576117b5611f69565b6001600160a01b039283166020918202929092010152601b5460405163791ac94760e01b81524792919091169063791ac947906117fe9086905f90879030904290600401611f7d565b5f604051808303815f87803b158015611815575f80fd5b505af1158015611827573d5f803e3d5ffd5b505050505f61183f824761141b90919063ffffffff16565b90505f6118596118508860026113da565b600f549061141b565b90505f61186d600261085f8481878d61135c565b90505f6118898361085f600b548761135c90919063ffffffff16565b90505f6118a58461085f600d548861135c90919063ffffffff16565b90505f6118c18561085f600c548961135c90919063ffffffff16565b6015546040519192505f916001600160a01b039091169085908381818185875af1925050503d805f8114611910576040519150601f19603f3d011682016040523d82523d5f602084013e611915565b606091505b50506016546040519192506001600160a01b03169083905f81818185875af1925050503d805f8114611962576040519150601f19603f3d011682016040523d82523d5f602084013e611967565b606091505b50506017546040519192506001600160a01b03169084905f81818185875af1925050503d805f81146119b4576040519150601f19603f3d011682016040523d82523d5f602084013e6119b9565b606091505b505f9250508b159050611a9557601b5460145460405163f305d71960e01b8152306004820152602481018e90525f6044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990879060c40160606040518083038185885af1158015611a33573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190611a589190611fec565b505060408051878152602081018e90527f424db2872186fa7e7afa7a5e902ed3b49a2ef19c2f5431e672462495dd6b450692500160405180910390a15b5050601f805460ff1916905550505050505050505050565b601354601d545f91906001600160a01b0390811690841603611ad25750601154611aed565b601d546001600160a01b0390811690861603611aed57506012545b5f611b196010546064611b009190611edb565b61085f84610852600f548a61135c90919063ffffffff16565b90505f611b37600f5461085f600e548561135c90919063ffffffff16565b90505f611b44838361141b565b305f90815260066020526040902054909150611b60908261145c565b305f90815260066020526040808220929092556018546001600160a01b031681522054611b8d908361145c565b6018546001600160a01b039081165f9081526006602090815260409182902093909355518381523092918b16915f80516020612018833981519152910160405180910390a38115611c1657600354611be5908361141b565b6003556040518281525f906001600160a01b038a16905f805160206120188339815191529060200160405180910390a35b611c20878461141b565b98975050505050505050565b5f8183611c4c5760405162461bcd60e51b81526004016107469190611c58565b505f610ffc8486611ef2565b5f6020808352835180828501525f5b81811015611c8357858101830151858201604001528201611c67565b505f604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114611cb9575f80fd5b919050565b5f8060408385031215611ccf575f80fd5b611cd883611ca3565b946020939093013593505050565b5f805f60608486031215611cf8575f80fd5b611d0184611ca3565b9250611d0f60208501611ca3565b9150604084013590509250925092565b5f60208284031215611d2f575f80fd5b5035919050565b5f60208284031215611d46575f80fd5b61081982611ca3565b8015158114610c16575f80fd5b5f8060408385031215611d6d575f80fd5b8235611cd881611d4f565b5f805f805f60a08688031215611d8c575f80fd5b611d9586611ca3565b9450611da360208701611ca3565b9350611db160408701611ca3565b9250611dbf60608701611ca3565b9150611dcd60808701611ca3565b90509295509295909350565b5f805f60608486031215611deb575f80fd5b505081359360208301359350604090920135919050565b5f8060408385031215611e13575f80fd5b611e1c83611ca3565b9150611e2a60208401611ca3565b90509250929050565b5f8060408385031215611e44575f80fd5b50508035926020909101359150565b5f805f805f8060c08789031215611e68575f80fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761071757610717611ec7565b5f82611f0c57634e487b7160e01b5f52601260045260245ffd5b500490565b5f60208284031215611f21575f80fd5b5051919050565b5f60208284031215611f38575f80fd5b815161081981611d4f565b8181038181111561071757610717611ec7565b8082018082111561071757610717611ec7565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015611fcb5784516001600160a01b031683529383019391830191600101611fa6565b50506001600160a01b03969096166060850152505050608001529392505050565b5f805f60608486031215611ffe575f80fd5b835192506020840151915060408401519050925092509256feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202dd29669b3c7e6a22f5121248925773c09a76259b332d63501a3e190e9ffcd3f64736f6c63430008140033",
    "contract_name": "BoviniTribe",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClearStuck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"TokenAddressCleared\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"ClearToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Buy\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Sell\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Transfer\",\"type\":\"uint8\"}],\"name\":\"EditTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTX\",\"type\":\"uint256\"}],\"name\":\"set_MaxTX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"set_MaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketingFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"devFeeReceiver\",\"type\":\"address\"}],\"name\":\"set_Receivers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Enabled\",\"type\":\"bool\"}],\"name\":\"set_SwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Exempt\",\"type\":\"bool\"}],\"name\":\"user_TxExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Exempt\",\"type\":\"bool\"}],\"name\":\"user_exemptfromfees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"checkRatio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearStuckToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setBreakdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentonbuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentonsell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallettransfer\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxBag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"showBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stepOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingFeeReceiver\",\"type\":\"address\"}],\"name\":\"updateTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n\r\n// pragma solidity 0.8.20;\"\r\n\r\n/*\r\n\r\n01101000 01110100 01110100 01110000 01110011 00111010 00101111 00101111 01100010 01101111 01110110 \r\n01101001 01101110 01101001 01110100 01110010 01101001 01100010 01100101 00101110 01100011 01101111 \r\n01101101 00001010 01101000 01110100 01110100 01110000 01110011 00111010 00101111 00101111 01100100 \r\n01101001 01110011 01100011 01101111 01110010 01100100 00101110 01100111 01100111 00101111 01010010 \r\n01110000 01111001 01110110 01010100 01001010 01010001 01111010 01110111 00110100 00001010 01101000 \r\n01110100 01110100 01110000 01110011 00111010 00101111 00101111 01110100 01110111 01101001 01110100 \r\n01110100 01100101 01110010 00101110 01100011 01101111 01101101 00101111 01000010 01101111 01110110 \r\n01101001 01101110 01101001 01010100 01110010 01101001 01100010 01100101\r\n\r\n\r\n*/\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\nabstract contract Context {\r\n    \r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        authorizations[_owner] = true;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract BoviniTribe is Ownable, ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    address WETH;\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n    \r\n\r\n    string constant _name = \"BoviniTribe\";\r\n    string constant _symbol = \"BOVINI\";\r\n    uint8 constant _decimals = 4; \r\n\r\n\r\n    event AutoLiquify(uint256 amountETH, uint256 amountTokens);\r\n    event EditTax(uint8 Buy, uint8 Sell, uint8 Transfer);\r\n    event user_exemptfromfees(address Wallet, bool Exempt);\r\n    event user_TxExempt(address Wallet, bool Exempt);\r\n    event ClearStuck(uint256 amount);\r\n    event ClearToken(address TokenAddressCleared, uint256 Amount);\r\n    event set_Receivers(address marketingFeeReceiver, address stakingFeeReceiver,address burnFeeReceiver,address devFeeReceiver);\r\n    event set_MaxWallet(uint256 maxWallet);\r\n    event set_MaxTX(uint256 maxTX);\r\n    event set_SwapBack(uint256 Amount, bool Enabled);\r\n  \r\n    uint256 _totalSupply =  100000000000 * 10**_decimals; \r\n\r\n    uint256 public _maxTxAmount = _totalSupply.mul(1).div(100);\r\n    uint256 public _maxWalletToken = _totalSupply.mul(1).div(100);\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;  \r\n    mapping (address => bool) isexemptfromfees;\r\n    mapping (address => bool) isexemptfrommaxTX;\r\n\r\n    uint256 private liquidityFee    = 1;\r\n    uint256 private marketingFee    = 1;\r\n    uint256 private devFee          = 1;\r\n    uint256 private stakingFee      = 0; \r\n    uint256 private burnFee         = 0;\r\n    uint256 public totalFee         = stakingFee + marketingFee + liquidityFee + devFee + burnFee;\r\n    uint256 private feeDenominator  = 100;\r\n\r\n    uint256 sellpercent = 5;\r\n    uint256 buypercent = 5;\r\n    uint256 transferpercent = 5; \r\n\r\n    address private autoLiquidityReceiver;\r\n    address private marketingFeeReceiver;\r\n    address private devFeeReceiver;\r\n    address private stakingFeeReceiver;\r\n    address private burnFeeReceiver;\r\n\r\n    uint256 setRatio = 30;\r\n    uint256 setRatioDenominator = 100;\r\n    \r\n\r\n    IDEXRouter public router;\r\n    InterfaceLP private pairContract;\r\n    address public pair;\r\n    \r\n    bool public TradingOpen = false; \r\n\r\n   \r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply * 75 / 1000; \r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n    \r\n    constructor () {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        WETH = router.WETH();\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        pairContract = InterfaceLP(pair);\r\n       \r\n        \r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        isexemptfromfees[msg.sender] = true;            \r\n        isexemptfrommaxTX[msg.sender] = true;\r\n        isexemptfrommaxTX[pair] = true;\r\n        isexemptfrommaxTX[marketingFeeReceiver] = true;\r\n        isexemptfrommaxTX[address(this)] = true;\r\n        \r\n        autoLiquidityReceiver = msg.sender;\r\n        marketingFeeReceiver = 0x3E0B2a2c81232B0C587d64b24d971C53a73A805B;\r\n        devFeeReceiver = msg.sender;\r\n        stakingFeeReceiver = msg.sender;\r\n        burnFeeReceiver = DEAD; \r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) {return owner();}\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n        function setMaxBag(uint256 maxWallPercent) external onlyOwner {\r\n         require(maxWallPercent >= 1); \r\n        _maxWalletToken = (_totalSupply * maxWallPercent ) / 1000;\r\n        emit set_MaxWallet(_maxWalletToken);\r\n                \r\n    }\r\n\r\n      function removeLimits () external onlyOwner {\r\n            _maxTxAmount = _totalSupply;\r\n            _maxWalletToken = _totalSupply;\r\n         \r\n    }\r\n\r\n      function setTrading() external onlyOwner {\r\n        sellpercent = 650;\r\n        buypercent = 1000;\r\n        transferpercent = 100; \r\n         \r\n    }\r\n\r\n       function stepOne() external onlyOwner {\r\n        sellpercent = 400;\r\n        buypercent = 350;\r\n        transferpercent = 100; \r\n         \r\n    }\r\n\r\n      \r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(!authorizations[sender] && !authorizations[recipient]){\r\n            require(TradingOpen,\"Trading not open yet\");\r\n        \r\n          }\r\n        \r\n               \r\n        if (!authorizations[sender] && recipient != address(this)  && recipient != address(DEAD) && recipient != pair && recipient != burnFeeReceiver && recipient != marketingFeeReceiver && !isexemptfrommaxTX[recipient]){\r\n            uint256 heldTokens = balanceOf(recipient);\r\n            require((heldTokens + amount) <= _maxWalletToken,\"Total Holding is currently limited, you can not buy that much.\");}\r\n\r\n        checkTxLimit(sender, amount);  \r\n\r\n        if(shouldSwapBack()){ swapBack(); }\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 amountReceived = (isexemptfromfees[sender] || isexemptfromfees[recipient]) ? amount : takeFee(sender, amount, recipient);\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isexemptfrommaxTX[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isexemptfromfees[sender];\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount, address recipient) internal returns (uint256) {\r\n        \r\n        uint256 percent = transferpercent;\r\n        if(recipient == pair) {\r\n            percent = sellpercent;\r\n        } else if(sender == pair) {\r\n            percent = buypercent;\r\n        }\r\n\r\n        uint256 feeAmount = amount.mul(totalFee).mul(percent).div(feeDenominator * 100);\r\n        uint256 burnTokens = feeAmount.mul(burnFee).div(totalFee);\r\n        uint256 contractTokens = feeAmount.sub(burnTokens);\r\n        _balances[address(this)] = _balances[address(this)].add(contractTokens);\r\n        _balances[burnFeeReceiver] = _balances[burnFeeReceiver].add(burnTokens);\r\n        emit Transfer(sender, address(this), contractTokens);\r\n        \r\n        \r\n        if(burnTokens > 0){\r\n            _totalSupply = _totalSupply.sub(burnTokens);\r\n            emit Transfer(sender, ZERO, burnTokens);  \r\n        \r\n        }\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n  \r\n     function transfer() external { \r\n             payable(autoLiquidityReceiver).transfer(address(this).balance);\r\n            \r\n    }\r\n\r\n   function clearStuckToken(address tokenAddress, uint256 tokens) external returns (bool success) {\r\n        require(tokenAddress != address(this), \"tokenAddress can not be the native token\");\r\n             if(tokens == 0){\r\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\r\n        }\r\n        emit ClearToken(tokenAddress, tokens);\r\n        return ERC20(tokenAddress).transfer(autoLiquidityReceiver, tokens);\r\n    }\r\n\r\n    function setFees(uint256 _percentonbuy, uint256 _percentonsell, uint256 _wallettransfer) external onlyOwner {\r\n        sellpercent = _percentonsell;\r\n        buypercent = _percentonbuy;\r\n        transferpercent = _wallettransfer;    \r\n          \r\n    }\r\n       \r\n    function enableTrading() public onlyOwner {\r\n        TradingOpen = true;\r\n                                            \r\n    }\r\n    \r\n                   \r\n    function swapBack() internal swapping {\r\n        uint256 dynamicLiquidityFee = checkRatio(setRatio, setRatioDenominator) ? 0 : liquidityFee;\r\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 totalETHFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n        \r\n        uint256 amountETHLiquidity = amountETH.mul(dynamicLiquidityFee).div(totalETHFee).div(2);\r\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);\r\n        uint256 amountETHstaking = amountETH.mul(stakingFee).div(totalETHFee);\r\n        uint256 amountETHdev = amountETH.mul(devFee).div(totalETHFee);\r\n\r\n        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountETHMarketing}(\"\");\r\n        (tmpSuccess,) = payable(devFeeReceiver).call{value: amountETHdev}(\"\");\r\n        (tmpSuccess,) = payable(stakingFeeReceiver).call{value: amountETHstaking}(\"\");\r\n        \r\n        tmpSuccess = false;\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountETHLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n    \r\n  \r\n    function set_fees() internal {\r\n      \r\n        emit EditTax( uint8(totalFee.mul(buypercent).div(100)),\r\n            uint8(totalFee.mul(sellpercent).div(100)),\r\n            uint8(totalFee.mul(transferpercent).div(100))\r\n            );\r\n    }\r\n    \r\n    function setBreakdown(uint256 _liquidityFee, uint256 _stakingFee, uint256 _marketingFee, uint256 _devFee, uint256 _burnFee, uint256 _feeDenominator) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        stakingFee = _stakingFee;\r\n        marketingFee = _marketingFee;\r\n        devFee = _devFee;\r\n        burnFee = _burnFee;\r\n        totalFee = _liquidityFee.add(_stakingFee).add(_marketingFee).add(_devFee).add(_burnFee);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee < feeDenominator / 2, \"Fees can not be more than 10%\"); \r\n        set_fees();\r\n    }\r\n\r\n   \r\n    function updateTaxWallets(address _autoLiquidityReceiver, address _marketingFeeReceiver, address _devFeeReceiver, address _burnFeeReceiver, address _stakingFeeReceiver) external onlyOwner {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n        devFeeReceiver = _devFeeReceiver;\r\n        burnFeeReceiver = _burnFeeReceiver;\r\n        stakingFeeReceiver = _stakingFeeReceiver;\r\n\r\n        emit set_Receivers(marketingFeeReceiver, stakingFeeReceiver, burnFeeReceiver, devFeeReceiver);\r\n    }\r\n\r\n    function setSwapBack(bool _enabled, uint256 _amount) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n        emit set_SwapBack(swapThreshold, swapEnabled);\r\n    }\r\n\r\n    function checkRatio(uint256 ratio, uint256 accuracy) public view returns (bool) {\r\n        return showBacking(accuracy) > ratio;\r\n    }\r\n\r\n    function showBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(showSupply());\r\n    }\r\n    \r\n    function showSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n\r\n}",
    "etherscan_verified": true
}