{
    "address": "0x912Abb1B9600d25937CAb8797A3CD5235bf2aAd5",
    "tx_hash": "fd778938f0ccc20c4097457bae925fcc10eb31cd23ba5cf4ef10d68efa50497a",
    "block_number": 18001812,
    "timestamp": 1693088735,
    "gas_used_in_creation": 2438249,
    "creation_bytecode": "60e06040526001600c556001600d553480156200001b57600080fd5b5060405162002ad638038062002ad68339810160408190526200003e9162000623565b338a8a8a600062000050848262000786565b5060016200005f838262000786565b5060ff81166080524660a052620000756200040f565b60c0525050600680546001600160a01b0319166001600160a01b0384169081179091556040519091506000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350601e841115620001115760405162461bcd60e51b815260206004820152601060248201526f0c4eaf240e8c2f040e8dede40d0d2ced60831b60448201526064015b60405180910390fd5b601e831115620001585760405162461bcd60e51b81526020600482015260116024820152700e6cad8d840e8c2f040e8dede40d0d2ced607b1b604482015260640162000108565b85600003620001675760001995505b84600003620001765760001994505b62000183876064620004ab565b861015620001fa5760405162461bcd60e51b815260206004820152603860248201527f4d617820486f6c64696e67204c696d69742063616e6e6f74206265206c65737360448201527f207468616e203125206f6620746f74616c20737570706c790000000000000000606482015260840162000108565b62000207876064620004ab565b8510156200027e5760405162461bcd60e51b815260206004820152603960248201527f4d6178205472616e73666572204c696d69742063616e6e6f74206265206c657360448201527f73207468616e203125206f6620746f74616c20737570706c7900000000000000606482015260840162000108565b600786905560088590556200029560648862000852565b600955600a849055600b8390553060009081526011602090815260408083208054600160ff19918216811790925533855293829020805490941617909255601480546001600160a01b0319166001600160a01b038616908117909155825163c45a015560e01b81529251909263c45a01559260048083019391928290030181865afa15801562000329573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034f919062000875565b601580546001600160a01b039283166001600160a01b031991821617909155601380548484169083161790558382166000818152601060209081526040808320805460ff199081166001908117909255308086526004808652848720978752968552838620600019908190556011865284872080549093169093179091553380865295845282852090855290925290912055600654600e80549093169316929092179055620003ff9088620004c2565b5050505050505050505062000933565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f600060405162000443919062000893565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000620004b9828462000852565b90505b92915050565b8060026000828254620004d6919062000911565b90915550506001600160a01b0382166000818152600360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200055757600080fd5b81516001600160401b03808211156200057457620005746200052f565b604051601f8301601f19908116603f011681019082821181831017156200059f576200059f6200052f565b81604052838152602092508683858801011115620005bc57600080fd5b600091505b83821015620005e05785820183015181830184015290820190620005c1565b600093810190920192909252949350505050565b805160ff811681146200060657600080fd5b919050565b80516001600160a01b03811681146200060657600080fd5b6000806000806000806000806000806101408b8d0312156200064457600080fd5b8a516001600160401b03808211156200065c57600080fd5b6200066a8e838f0162000545565b9b5060208d01519150808211156200068157600080fd5b50620006908d828e0162000545565b995050620006a160408c01620005f4565b975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b01519250620006d56101008c016200060b565b9150620006e66101208c016200060b565b90509295989b9194979a5092959850565b600181811c908216806200070c57607f821691505b6020821081036200072d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200078157600081815260208120601f850160051c810160208610156200075c5750805b601f850160051c820191505b818110156200077d5782815560010162000768565b5050505b505050565b81516001600160401b03811115620007a257620007a26200052f565b620007ba81620007b38454620006f7565b8462000733565b602080601f831160018114620007f25760008415620007d95750858301515b600019600386901b1c1916600185901b1785556200077d565b600085815260208120601f198616915b82811015620008235788860151825594840194600190910190840162000802565b5085821015620008425787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000826200087057634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156200088857600080fd5b620004b9826200060b565b6000808354620008a381620006f7565b60018281168015620008be5760018114620008d45762000905565b60ff198416875282151583028701945062000905565b8760005260208060002060005b85811015620008fc5781548a820152908401908201620008e1565b50505082870194505b50929695505050505050565b80820180821115620004bc57634e487b7160e01b600052601160045260246000fd5b60805160a05160c051612173620009636000396000610b8c01526000610b57015260006103f501526121736000f3fe60806040526004361061026b5760003560e01c806388a3dae911610144578063c647b20e116100b6578063d505accf1161007a578063d505accf1461075a578063d702ffd01461077a578063db3abb4f1461079a578063dd62ed3e146107af578063f2fde38b146107e7578063fc70e44f1461080757600080fd5b8063c647b20e146106b4578063c83dd19a146106d4578063ccb3e399146106ea578063cd8de42c1461070a578063d12e73321461072a57600080fd5b806395d89b411161010857806395d89b41146105ff5780639d0014b114610614578063a9059cbb14610634578063af9549e014610654578063bc102db714610674578063c4590d3f1461069457600080fd5b806388a3dae91461057f5780638a8c523c1461059f5780638bcea939146105b45780638da5cb5b146105c957806393505052146105e957600080fd5b80633644e515116101dd57806354fd4d50116101a157806354fd4d50146104b557806370a08231146104c957806375b34196146104f65780637ecebe001461050c57806380dd9a1f1461053957806384849fae1461056957600080fd5b80633644e5151461043f5780633ccfd60b146104545780633fc8cef3146104695780634147c6a7146104895780634b7692361461049f57600080fd5b806324839e951161022f57806324839e951461034e57806324ca984e1461037e57806325266e9b146103a057806326a7c195146103b3578063313ce567146103e357806332125e221461042957600080fd5b806306fdde0314610277578063095ea7b3146102a25780631249ae19146102d257806318160ddd1461030a57806323b872dd1461032e57600080fd5b3661027257005b600080fd5b34801561028357600080fd5b5061028c610827565b6040516102999190611cd0565b60405180910390f35b3480156102ae57600080fd5b506102c26102bd366004611d3a565b6108b5565b6040519015158152602001610299565b3480156102de57600080fd5b506014546102f2906001600160a01b031681565b6040516001600160a01b039091168152602001610299565b34801561031657600080fd5b5061032060025481565b604051908152602001610299565b34801561033a57600080fd5b506102c2610349366004611d64565b610922565b34801561035a57600080fd5b506102c2610369366004611da0565b60116020526000908152604090205460ff1681565b34801561038a57600080fd5b5061039e610399366004611da0565b6109d8565b005b61039e6103ae366004611dbb565b610a55565b3480156103bf57600080fd5b506102c26103ce366004611da0565b60126020526000908152604090205460ff1681565b3480156103ef57600080fd5b506104177f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610299565b34801561043557600080fd5b50610320600d5481565b34801561044b57600080fd5b50610320610b53565b34801561046057600080fd5b5061039e610bae565b34801561047557600080fd5b506013546102f2906001600160a01b031681565b34801561049557600080fd5b50610320600a5481565b3480156104ab57600080fd5b5061032060075481565b3480156104c157600080fd5b506002610320565b3480156104d557600080fd5b506103206104e4366004611da0565b60036020526000908152604090205481565b34801561050257600080fd5b5061032060085481565b34801561051857600080fd5b50610320610527366004611da0565b60056020526000908152604090205481565b34801561054557600080fd5b506102c2610554366004611da0565b60106020526000908152604090205460ff1681565b34801561057557600080fd5b5061032060095481565b34801561058b57600080fd5b5061039e61059a366004611dd4565b610c75565b3480156105ab57600080fd5b5061039e610cca565b3480156105c057600080fd5b506102f2610cfb565b3480156105d557600080fd5b506006546102f2906001600160a01b031681565b3480156105f557600080fd5b50610320600b5481565b34801561060b57600080fd5b5061028c610d14565b34801561062057600080fd5b5061039e61062f366004611dbb565b610d21565b34801561064057600080fd5b506102c261064f366004611d3a565b610d50565b34801561066057600080fd5b5061039e61066f366004611dd4565b610d66565b34801561068057600080fd5b50600e546102f2906001600160a01b031681565b3480156106a057600080fd5b5061039e6106af366004611e10565b610dbb565b3480156106c057600080fd5b5061039e6106cf366004611e10565b610f11565b3480156106e057600080fd5b50610320600c5481565b3480156106f657600080fd5b5061039e610705366004611e32565b610fcf565b34801561071657600080fd5b5061039e610725366004611da0565b611071565b34801561073657600080fd5b506102c2610745366004611da0565b600f6020526000908152604090205460ff1681565b34801561076657600080fd5b5061039e610775366004611e65565b6110bd565b34801561078657600080fd5b506015546102f2906001600160a01b031681565b3480156107a657600080fd5b506102c2611301565b3480156107bb57600080fd5b506103206107ca366004611e32565b600460209081526000928352604080842090915290825290205481565b3480156107f357600080fd5b5061039e610802366004611da0565b611319565b34801561081357600080fd5b5061039e610822366004611da0565b61138f565b6000805461083490611ed8565b80601f016020809104026020016040519081016040528092919081815260200182805461086090611ed8565b80156108ad5780601f10610882576101008083540402835291602001916108ad565b820191906000526020600020905b81548152906001019060200180831161089057829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906109109086815260200190565b60405180910390a35060015b92915050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146109c257828110156109935760405162461bcd60e51b815260206004820152600c60248201526b6e6f20616c6c6f77616e636560a01b60448201526064015b60405180910390fd5b61099d8382611f28565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6109cd8585856113f5565b506001949350505050565b6006546001600160a01b03163314610a025760405162461bcd60e51b815260040161098a90611f3b565b6001600160a01b031660008181526010602090815260408083208054600160ff19918216811790925530855260048452828520958552948352818420600019905560119092529091208054909216179055565b6006546001600160a01b03163314610a7f5760405162461bcd60e51b815260040161098a90611f3b565b6002600d55600654610a9b906001600160a01b031630836113f5565b476000610aa6610cfb565b60145460065460405163f305d71960e01b81523060048201526024810187905260448101879052606481018690526001600160a01b0391821660848201524260a4820152929350169063f305d71990849060c40160606040518083038185885af1158015610b18573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b3d9190611f61565b505050610b498161138f565b50506001600d5550565b60007f00000000000000000000000000000000000000000000000000000000000000004614610b8957610b846119a7565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b6006546001600160a01b03163314610bd85760405162461bcd60e51b815260040161098a90611f3b565b6006546040516000916001600160a01b03169047908381818185875af1925050503d8060008114610c25576040519150601f19603f3d011682016040523d82523d6000602084013e610c2a565b606091505b5050905080610c725760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640161098a565b50565b6006546001600160a01b03163314610c9f5760405162461bcd60e51b815260040161098a90611f3b565b6001600160a01b03919091166000908152601160205260409020805460ff1916911515919091179055565b6006546001600160a01b03163314610cf45760405162461bcd60e51b815260040161098a90611f3b565b6002600d55565b601354600090610b84906001600160a01b031630611a41565b6001805461083490611ed8565b6006546001600160a01b03163314610d4b5760405162461bcd60e51b815260040161098a90611f3b565b600955565b6000610d5d3384846113f5565b50600192915050565b6006546001600160a01b03163314610d905760405162461bcd60e51b815260040161098a90611f3b565b6001600160a01b03919091166000908152601260205260409020805460ff1916911515919091179055565b6006546001600160a01b03163314610de55760405162461bcd60e51b815260040161098a90611f3b565b81600003610df35760001991505b80600003610e0057506000195b600254610e0e906064611b25565b821015610e835760405162461bcd60e51b815260206004820152603860248201527f4d617820486f6c64696e67204c696d69742063616e6e6f74206265206c65737360448201527f207468616e203125206f6620746f74616c20737570706c790000000000000000606482015260840161098a565b600254610e91906064611b25565b811015610f065760405162461bcd60e51b815260206004820152603960248201527f4d6178205472616e73666572204c696d69742063616e6e6f74206265206c657360448201527f73207468616e203125206f6620746f74616c20737570706c7900000000000000606482015260840161098a565b600791909155600855565b6006546001600160a01b03163314610f3b5760405162461bcd60e51b815260040161098a90611f3b565b601e821115610f7f5760405162461bcd60e51b815260206004820152601060248201526f0c4eaf240e8c2f040e8dede40d0d2ced60831b604482015260640161098a565b601e811115610fc45760405162461bcd60e51b81526020600482015260116024820152700e6cad8d840e8c2f040e8dede40d0d2ced607b1b604482015260640161098a565b600a91909155600b55565b6006546001600160a01b03163314610ff95760405162461bcd60e51b815260040161098a90611f3b565b601580546001600160a01b039283166001600160a01b03199182161790915560148054939092169216821790556000818152601060209081526040808320805460ff19908116600190811790925530855260048452828520958552948352818420600019905560119092529091208054909216179055565b6006546001600160a01b0316331461109b5760405162461bcd60e51b815260040161098a90611f3b565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b4284101561110d5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161098a565b60006001611119610b53565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611225573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061125b5750876001600160a01b0316816001600160a01b0316145b6112985760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161098a565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60006007546000141580610b84575050600854151590565b6006546001600160a01b031633146113435760405162461bcd60e51b815260040161098a90611f3b565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6006546001600160a01b031633146113b95760405162461bcd60e51b815260040161098a90611f3b565b6001600160a01b03166000908152600f602090815260408083208054600160ff1991821681179092556011909352922080549091169091179055565b600d546002148061141057506006546001600160a01b031632145b6114505760405162461bcd60e51b815260206004820152601160248201527074726164696e672069736e74206c69766560781b604482015260640161098a565b6001600160a01b0383166114b45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161098a565b6001600160a01b0382166115165760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161098a565b600081116115785760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161098a565b6006546000906001600160a01b038581169116148015906115a757506006546001600160a01b03848116911614155b80156115be57506006546001600160a01b03163214155b15611794576001600160a01b0384166000908152600f602052604081205460ff16801561160457506001600160a01b03841660009081526010602052604090205460ff16155b801561162957506001600160a01b03841660009081526012602052604090205460ff16155b15611696578260085410158061165757506001600160a01b03841660009081526011602052604090205460ff165b6116735760405162461bcd60e51b815260040161098a90611f8f565b611693606461168d600a5486611b3890919063ffffffff16565b90611b25565b91505b6001600160a01b0384166000908152600f602052604090205460ff1680156116c757506001600160a01b0385163014155b80156116ec57506001600160a01b03851660009081526012602052604090205460ff16155b1561175757600190508260085410158061171e57506001600160a01b03851660009081526011602052604090205460ff165b61173a5760405162461bcd60e51b815260040161098a90611f8f565b611754606461168d600b5486611b3890919063ffffffff16565b91505b30600090815260036020526040902054600c5460011480156117765750815b8015611783575060095481115b156117915761179181611b6e565b50505b801561181257306000908152600360205260409020546117b49082611c65565b30600081815260036020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906118059085815260200190565b60405180910390a3611857565b8160085410158061183b57506001600160a01b03841660009081526011602052604090205460ff165b6118575760405162461bcd60e51b815260040161098a90611f8f565b6001600160a01b03841660009081526003602052604090205461187a9083611c83565b6001600160a01b0385166000908152600360205260409020556118bf6118a08383611c83565b6001600160a01b03851660009081526003602052604090205490611c65565b6001600160a01b038416600090815260036020526040902081905560075410158061190257506001600160a01b03831660009081526011602052604090205460ff165b8061191757506006546001600160a01b031632145b6119575760405162461bcd60e51b81526020600482015260116024820152701b585e081a1bdb191a5b99c81b1a5b5a5d607a1b604482015260640161098a565b6001600160a01b038084169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6119908585611c83565b60405190815260200160405180910390a350505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516119d99190611fb5565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000806000611a508585611c9f565b6015546040516bffffffffffffffffffffffff19606085811b8216602084015284901b1660348201529294509092506001600160a01b03169060480160405160208183030381529060405280519060200120604051602001611b049291906001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b60408051601f19818403018152919052805160209091012095945050505050565b6000611b318284612054565b9392505050565b600082600003611b4a5750600061091c565b611b548284612076565b905081611b618483612054565b1461091c5761091c61208d565b6002600c8190556040805182815260608101825260009290916020830190803683370190505090503081600081518110611baa57611baa6120a3565b6001600160a01b039283166020918202929092010152601354825191169082906001908110611bdb57611bdb6120a3565b6001600160a01b039283166020918202929092010152601454600e5460405163791ac94760e01b81529183169263791ac94792611c3092879260009288929091169068056bc75e2d630fffff906004016120b9565b600060405180830381600087803b158015611c4a57600080fd5b505af1925050508015611c5b575060015b5050506001600c55565b6000611c71828461212a565b90508281101561091c5761091c61208d565b600082821115611c9557611c9561208d565b611b318284611f28565b600080826001600160a01b0316846001600160a01b031610611cc2578284611cc5565b83835b909590945092505050565b600060208083528351808285015260005b81811015611cfd57858101830151858201604001528201611ce1565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114611d3557600080fd5b919050565b60008060408385031215611d4d57600080fd5b611d5683611d1e565b946020939093013593505050565b600080600060608486031215611d7957600080fd5b611d8284611d1e565b9250611d9060208501611d1e565b9150604084013590509250925092565b600060208284031215611db257600080fd5b611b3182611d1e565b600060208284031215611dcd57600080fd5b5035919050565b60008060408385031215611de757600080fd5b611df083611d1e565b915060208301358015158114611e0557600080fd5b809150509250929050565b60008060408385031215611e2357600080fd5b50508035926020909101359150565b60008060408385031215611e4557600080fd5b611e4e83611d1e565b9150611e5c60208401611d1e565b90509250929050565b600080600080600080600060e0888a031215611e8057600080fd5b611e8988611d1e565b9650611e9760208901611d1e565b95506040880135945060608801359350608088013560ff81168114611ebb57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600181811c90821680611eec57607f821691505b602082108103611f0c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561091c5761091c611f12565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b600080600060608486031215611f7657600080fd5b8351925060208401519150604084015190509250925092565b6020808252600c908201526b1b585e081d1e081b1a5b5a5d60a21b604082015260600190565b600080835481600182811c915080831680611fd157607f831692505b60208084108203611ff057634e487b7160e01b86526022600452602486fd5b818015612004576001811461201957612046565b60ff1986168952841515850289019650612046565b60008a81526020902060005b8681101561203e5781548b820152908501908301612025565b505084890196505b509498975050505050505050565b60008261207157634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761091c5761091c611f12565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156121095784516001600160a01b0316835293830193918301916001016120e4565b50506001600160a01b03969096166060850152505050608001529392505050565b8082018082111561091c5761091c611f1256fea264697066735822122020cd3d01418159894b4171f35056ccb9ab66d6c602bacdbee85eacbac445cd6f64736f6c6343000813003300000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000001027e72f1f128130880000000000000000000000000000000000000000000000014adf4b7320334b90000000000000000000000000000000000000000000000000a56fa5b99019a5c8000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000190000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000006506572704149000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065045525041490000000000000000000000000000000000000000000000000000",
    "runtime_bytecode": "60806040526004361061026b5760003560e01c806388a3dae911610144578063c647b20e116100b6578063d505accf1161007a578063d505accf1461075a578063d702ffd01461077a578063db3abb4f1461079a578063dd62ed3e146107af578063f2fde38b146107e7578063fc70e44f1461080757600080fd5b8063c647b20e146106b4578063c83dd19a146106d4578063ccb3e399146106ea578063cd8de42c1461070a578063d12e73321461072a57600080fd5b806395d89b411161010857806395d89b41146105ff5780639d0014b114610614578063a9059cbb14610634578063af9549e014610654578063bc102db714610674578063c4590d3f1461069457600080fd5b806388a3dae91461057f5780638a8c523c1461059f5780638bcea939146105b45780638da5cb5b146105c957806393505052146105e957600080fd5b80633644e515116101dd57806354fd4d50116101a157806354fd4d50146104b557806370a08231146104c957806375b34196146104f65780637ecebe001461050c57806380dd9a1f1461053957806384849fae1461056957600080fd5b80633644e5151461043f5780633ccfd60b146104545780633fc8cef3146104695780634147c6a7146104895780634b7692361461049f57600080fd5b806324839e951161022f57806324839e951461034e57806324ca984e1461037e57806325266e9b146103a057806326a7c195146103b3578063313ce567146103e357806332125e221461042957600080fd5b806306fdde0314610277578063095ea7b3146102a25780631249ae19146102d257806318160ddd1461030a57806323b872dd1461032e57600080fd5b3661027257005b600080fd5b34801561028357600080fd5b5061028c610827565b6040516102999190611cd0565b60405180910390f35b3480156102ae57600080fd5b506102c26102bd366004611d3a565b6108b5565b6040519015158152602001610299565b3480156102de57600080fd5b506014546102f2906001600160a01b031681565b6040516001600160a01b039091168152602001610299565b34801561031657600080fd5b5061032060025481565b604051908152602001610299565b34801561033a57600080fd5b506102c2610349366004611d64565b610922565b34801561035a57600080fd5b506102c2610369366004611da0565b60116020526000908152604090205460ff1681565b34801561038a57600080fd5b5061039e610399366004611da0565b6109d8565b005b61039e6103ae366004611dbb565b610a55565b3480156103bf57600080fd5b506102c26103ce366004611da0565b60126020526000908152604090205460ff1681565b3480156103ef57600080fd5b506104177f000000000000000000000000000000000000000000000000000000000000001281565b60405160ff9091168152602001610299565b34801561043557600080fd5b50610320600d5481565b34801561044b57600080fd5b50610320610b53565b34801561046057600080fd5b5061039e610bae565b34801561047557600080fd5b506013546102f2906001600160a01b031681565b34801561049557600080fd5b50610320600a5481565b3480156104ab57600080fd5b5061032060075481565b3480156104c157600080fd5b506002610320565b3480156104d557600080fd5b506103206104e4366004611da0565b60036020526000908152604090205481565b34801561050257600080fd5b5061032060085481565b34801561051857600080fd5b50610320610527366004611da0565b60056020526000908152604090205481565b34801561054557600080fd5b506102c2610554366004611da0565b60106020526000908152604090205460ff1681565b34801561057557600080fd5b5061032060095481565b34801561058b57600080fd5b5061039e61059a366004611dd4565b610c75565b3480156105ab57600080fd5b5061039e610cca565b3480156105c057600080fd5b506102f2610cfb565b3480156105d557600080fd5b506006546102f2906001600160a01b031681565b3480156105f557600080fd5b50610320600b5481565b34801561060b57600080fd5b5061028c610d14565b34801561062057600080fd5b5061039e61062f366004611dbb565b610d21565b34801561064057600080fd5b506102c261064f366004611d3a565b610d50565b34801561066057600080fd5b5061039e61066f366004611dd4565b610d66565b34801561068057600080fd5b50600e546102f2906001600160a01b031681565b3480156106a057600080fd5b5061039e6106af366004611e10565b610dbb565b3480156106c057600080fd5b5061039e6106cf366004611e10565b610f11565b3480156106e057600080fd5b50610320600c5481565b3480156106f657600080fd5b5061039e610705366004611e32565b610fcf565b34801561071657600080fd5b5061039e610725366004611da0565b611071565b34801561073657600080fd5b506102c2610745366004611da0565b600f6020526000908152604090205460ff1681565b34801561076657600080fd5b5061039e610775366004611e65565b6110bd565b34801561078657600080fd5b506015546102f2906001600160a01b031681565b3480156107a657600080fd5b506102c2611301565b3480156107bb57600080fd5b506103206107ca366004611e32565b600460209081526000928352604080842090915290825290205481565b3480156107f357600080fd5b5061039e610802366004611da0565b611319565b34801561081357600080fd5b5061039e610822366004611da0565b61138f565b6000805461083490611ed8565b80601f016020809104026020016040519081016040528092919081815260200182805461086090611ed8565b80156108ad5780601f10610882576101008083540402835291602001916108ad565b820191906000526020600020905b81548152906001019060200180831161089057829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906109109086815260200190565b60405180910390a35060015b92915050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146109c257828110156109935760405162461bcd60e51b815260206004820152600c60248201526b6e6f20616c6c6f77616e636560a01b60448201526064015b60405180910390fd5b61099d8382611f28565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6109cd8585856113f5565b506001949350505050565b6006546001600160a01b03163314610a025760405162461bcd60e51b815260040161098a90611f3b565b6001600160a01b031660008181526010602090815260408083208054600160ff19918216811790925530855260048452828520958552948352818420600019905560119092529091208054909216179055565b6006546001600160a01b03163314610a7f5760405162461bcd60e51b815260040161098a90611f3b565b6002600d55600654610a9b906001600160a01b031630836113f5565b476000610aa6610cfb565b60145460065460405163f305d71960e01b81523060048201526024810187905260448101879052606481018690526001600160a01b0391821660848201524260a4820152929350169063f305d71990849060c40160606040518083038185885af1158015610b18573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b3d9190611f61565b505050610b498161138f565b50506001600d5550565b60007f00000000000000000000000000000000000000000000000000000000000000014614610b8957610b846119a7565b905090565b507f6e72074a1553456b93820048b03b5a6efdd62ad73f3ae3f4555987c46e9808d490565b6006546001600160a01b03163314610bd85760405162461bcd60e51b815260040161098a90611f3b565b6006546040516000916001600160a01b03169047908381818185875af1925050503d8060008114610c25576040519150601f19603f3d011682016040523d82523d6000602084013e610c2a565b606091505b5050905080610c725760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640161098a565b50565b6006546001600160a01b03163314610c9f5760405162461bcd60e51b815260040161098a90611f3b565b6001600160a01b03919091166000908152601160205260409020805460ff1916911515919091179055565b6006546001600160a01b03163314610cf45760405162461bcd60e51b815260040161098a90611f3b565b6002600d55565b601354600090610b84906001600160a01b031630611a41565b6001805461083490611ed8565b6006546001600160a01b03163314610d4b5760405162461bcd60e51b815260040161098a90611f3b565b600955565b6000610d5d3384846113f5565b50600192915050565b6006546001600160a01b03163314610d905760405162461bcd60e51b815260040161098a90611f3b565b6001600160a01b03919091166000908152601260205260409020805460ff1916911515919091179055565b6006546001600160a01b03163314610de55760405162461bcd60e51b815260040161098a90611f3b565b81600003610df35760001991505b80600003610e0057506000195b600254610e0e906064611b25565b821015610e835760405162461bcd60e51b815260206004820152603860248201527f4d617820486f6c64696e67204c696d69742063616e6e6f74206265206c65737360448201527f207468616e203125206f6620746f74616c20737570706c790000000000000000606482015260840161098a565b600254610e91906064611b25565b811015610f065760405162461bcd60e51b815260206004820152603960248201527f4d6178205472616e73666572204c696d69742063616e6e6f74206265206c657360448201527f73207468616e203125206f6620746f74616c20737570706c7900000000000000606482015260840161098a565b600791909155600855565b6006546001600160a01b03163314610f3b5760405162461bcd60e51b815260040161098a90611f3b565b601e821115610f7f5760405162461bcd60e51b815260206004820152601060248201526f0c4eaf240e8c2f040e8dede40d0d2ced60831b604482015260640161098a565b601e811115610fc45760405162461bcd60e51b81526020600482015260116024820152700e6cad8d840e8c2f040e8dede40d0d2ced607b1b604482015260640161098a565b600a91909155600b55565b6006546001600160a01b03163314610ff95760405162461bcd60e51b815260040161098a90611f3b565b601580546001600160a01b039283166001600160a01b03199182161790915560148054939092169216821790556000818152601060209081526040808320805460ff19908116600190811790925530855260048452828520958552948352818420600019905560119092529091208054909216179055565b6006546001600160a01b0316331461109b5760405162461bcd60e51b815260040161098a90611f3b565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b4284101561110d5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161098a565b60006001611119610b53565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611225573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061125b5750876001600160a01b0316816001600160a01b0316145b6112985760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161098a565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60006007546000141580610b84575050600854151590565b6006546001600160a01b031633146113435760405162461bcd60e51b815260040161098a90611f3b565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6006546001600160a01b031633146113b95760405162461bcd60e51b815260040161098a90611f3b565b6001600160a01b03166000908152600f602090815260408083208054600160ff1991821681179092556011909352922080549091169091179055565b600d546002148061141057506006546001600160a01b031632145b6114505760405162461bcd60e51b815260206004820152601160248201527074726164696e672069736e74206c69766560781b604482015260640161098a565b6001600160a01b0383166114b45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161098a565b6001600160a01b0382166115165760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161098a565b600081116115785760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161098a565b6006546000906001600160a01b038581169116148015906115a757506006546001600160a01b03848116911614155b80156115be57506006546001600160a01b03163214155b15611794576001600160a01b0384166000908152600f602052604081205460ff16801561160457506001600160a01b03841660009081526010602052604090205460ff16155b801561162957506001600160a01b03841660009081526012602052604090205460ff16155b15611696578260085410158061165757506001600160a01b03841660009081526011602052604090205460ff165b6116735760405162461bcd60e51b815260040161098a90611f8f565b611693606461168d600a5486611b3890919063ffffffff16565b90611b25565b91505b6001600160a01b0384166000908152600f602052604090205460ff1680156116c757506001600160a01b0385163014155b80156116ec57506001600160a01b03851660009081526012602052604090205460ff16155b1561175757600190508260085410158061171e57506001600160a01b03851660009081526011602052604090205460ff165b61173a5760405162461bcd60e51b815260040161098a90611f8f565b611754606461168d600b5486611b3890919063ffffffff16565b91505b30600090815260036020526040902054600c5460011480156117765750815b8015611783575060095481115b156117915761179181611b6e565b50505b801561181257306000908152600360205260409020546117b49082611c65565b30600081815260036020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906118059085815260200190565b60405180910390a3611857565b8160085410158061183b57506001600160a01b03841660009081526011602052604090205460ff165b6118575760405162461bcd60e51b815260040161098a90611f8f565b6001600160a01b03841660009081526003602052604090205461187a9083611c83565b6001600160a01b0385166000908152600360205260409020556118bf6118a08383611c83565b6001600160a01b03851660009081526003602052604090205490611c65565b6001600160a01b038416600090815260036020526040902081905560075410158061190257506001600160a01b03831660009081526011602052604090205460ff165b8061191757506006546001600160a01b031632145b6119575760405162461bcd60e51b81526020600482015260116024820152701b585e081a1bdb191a5b99c81b1a5b5a5d607a1b604482015260640161098a565b6001600160a01b038084169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6119908585611c83565b60405190815260200160405180910390a350505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516119d99190611fb5565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000806000611a508585611c9f565b6015546040516bffffffffffffffffffffffff19606085811b8216602084015284901b1660348201529294509092506001600160a01b03169060480160405160208183030381529060405280519060200120604051602001611b049291906001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b60408051601f19818403018152919052805160209091012095945050505050565b6000611b318284612054565b9392505050565b600082600003611b4a5750600061091c565b611b548284612076565b905081611b618483612054565b1461091c5761091c61208d565b6002600c8190556040805182815260608101825260009290916020830190803683370190505090503081600081518110611baa57611baa6120a3565b6001600160a01b039283166020918202929092010152601354825191169082906001908110611bdb57611bdb6120a3565b6001600160a01b039283166020918202929092010152601454600e5460405163791ac94760e01b81529183169263791ac94792611c3092879260009288929091169068056bc75e2d630fffff906004016120b9565b600060405180830381600087803b158015611c4a57600080fd5b505af1925050508015611c5b575060015b5050506001600c55565b6000611c71828461212a565b90508281101561091c5761091c61208d565b600082821115611c9557611c9561208d565b611b318284611f28565b600080826001600160a01b0316846001600160a01b031610611cc2578284611cc5565b83835b909590945092505050565b600060208083528351808285015260005b81811015611cfd57858101830151858201604001528201611ce1565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114611d3557600080fd5b919050565b60008060408385031215611d4d57600080fd5b611d5683611d1e565b946020939093013593505050565b600080600060608486031215611d7957600080fd5b611d8284611d1e565b9250611d9060208501611d1e565b9150604084013590509250925092565b600060208284031215611db257600080fd5b611b3182611d1e565b600060208284031215611dcd57600080fd5b5035919050565b60008060408385031215611de757600080fd5b611df083611d1e565b915060208301358015158114611e0557600080fd5b809150509250929050565b60008060408385031215611e2357600080fd5b50508035926020909101359150565b60008060408385031215611e4557600080fd5b611e4e83611d1e565b9150611e5c60208401611d1e565b90509250929050565b600080600080600080600060e0888a031215611e8057600080fd5b611e8988611d1e565b9650611e9760208901611d1e565b95506040880135945060608801359350608088013560ff81168114611ebb57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600181811c90821680611eec57607f821691505b602082108103611f0c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561091c5761091c611f12565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b600080600060608486031215611f7657600080fd5b8351925060208401519150604084015190509250925092565b6020808252600c908201526b1b585e081d1e081b1a5b5a5d60a21b604082015260600190565b600080835481600182811c915080831680611fd157607f831692505b60208084108203611ff057634e487b7160e01b86526022600452602486fd5b818015612004576001811461201957612046565b60ff1986168952841515850289019650612046565b60008a81526020902060005b8681101561203e5781548b820152908501908301612025565b505084890196505b509498975050505050505050565b60008261207157634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761091c5761091c611f12565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156121095784516001600160a01b0316835293830193918301916001016120e4565b50506001600160a01b03969096166060850152505050608001529392505050565b8082018082111561091c5761091c611f1256fea264697066735822122020cd3d01418159894b4171f35056ccb9ab66d6c602bacdbee85eacbac445cd6f64736f6c63430008130033",
    "contract_name": "EmberERC20",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_holding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buy_tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell_tax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uni_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"addRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"anti_whale_exceptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy_tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"in_swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAntiWhaleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_trading_enabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_holding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_transfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell_tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell_tax_threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"setAmm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setAntiWhaleException\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max_holding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_transfer\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tax_receiver\",\"type\":\"address\"}],\"name\":\"setTaxReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy_tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell_tax\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setUniRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tax_exceptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax_receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uni_factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uni_router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/FreeErc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport \\\"solmate/tokens/ERC20.sol\\\";\\nimport \\\"solmate/auth/Owned.sol\\\";\\nimport \\\"./IUniswapV2Router01.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract EmberERC20 is ERC20, Owned {\\n    using SafeMath for uint256;\\n\\n    uint public max_holding;\\n    uint public max_transfer;\\n    uint public sell_tax_threshold;\\n    uint public buy_tax;\\n    uint public sell_tax;\\n    uint public in_swap = 1; // 1 is false, 2 is true\\n    uint public is_trading_enabled = 1; // 1 is false, 2 is true\\n\\n    address public tax_receiver;\\n\\n    mapping(address => bool) public lps;\\n    mapping(address => bool) public routers;\\n    mapping(address => bool) public anti_whale_exceptions;\\n    mapping(address => bool) public tax_exceptions;\\n\\n    address public weth;\\n    address public uni_router;\\n    address public uni_factory;\\n\\n    constructor(\\n        string memory name,\\n        string memory ticker,\\n        uint8 decimals,\\n        uint _totalSupply,\\n        uint _max_holding,\\n        uint _max_transfer,\\n        uint _buy_tax,\\n        uint _sell_tax,\\n\\n        address _uni_router,\\n        address _weth\\n    ) ERC20(name, ticker, decimals) Owned(msg.sender) {\\n        require(_buy_tax <= 30, \\\"buy tax too high\\\");\\n        require(_sell_tax <= 30, \\\"sell tax too high\\\");\\n\\n        if (_max_holding == 0) {\\n            _max_holding = type(uint256).max;\\n        }\\n\\n        if (_max_transfer == 0) {\\n            _max_transfer = type(uint256).max;\\n        }\\n\\n        require(\\n            _max_holding >= _totalSupply.div(100),\\n            \\\"Max Holding Limit cannot be less than 1% of total supply\\\"\\n        );\\n        require(\\n            _max_transfer >= _totalSupply.div(100),\\n            \\\"Max Transfer Limit cannot be less than 1% of total supply\\\"\\n        );\\n\\n        max_holding = _max_holding;\\n        max_transfer = _max_transfer;\\n\\n        sell_tax_threshold = _totalSupply / 100;\\n        buy_tax = _buy_tax;\\n        sell_tax = _sell_tax;\\n\\n        anti_whale_exceptions[address(this)] = true;\\n        anti_whale_exceptions[msg.sender] = true;\\n\\n        uni_router = _uni_router;\\n        uni_factory = IUniswapV2Router01(uni_router).factory();\\n        weth = _weth;\\n\\n        routers[_uni_router] = true;\\n        allowance[address(this)][_uni_router] = type(uint256).max;\\n        anti_whale_exceptions[_uni_router] = true;\\n        allowance[msg.sender][address(this)] = type(uint256).max;\\n\\n        tax_receiver = owner;\\n\\n        _mint(msg.sender, _totalSupply);\\n    }\\n\\n    modifier lockTheSwap() {\\n        in_swap = 2;\\n        _;\\n        in_swap = 1;\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) {\\n            require(allowed >= amount, \\\"no allowance\\\");\\n            allowance[from][msg.sender] = allowed - amount;\\n        }\\n\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function _transfer(address from, address to, uint amount) private {\\n        require(\\n            is_trading_enabled == 2 || tx.origin == owner,\\n            \\\"trading isnt live\\\"\\n        );\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        uint256 taxAmount = 0;\\n        if (from != owner && to != owner && tx.origin != owner) {\\n            bool isSelling;\\n            if (lps[from] && !routers[to] && !tax_exceptions[to]) {\\n                require(\\n                    max_transfer >= amount || anti_whale_exceptions[to],\\n                    \\\"max tx limit\\\"\\n                );\\n\\n                taxAmount = amount.mul(buy_tax).div(100);\\n            }\\n\\n            if (lps[to] && from != address(this) && !tax_exceptions[from]) {\\n                isSelling = true;\\n                require(\\n                    max_transfer >= amount || anti_whale_exceptions[from],\\n                    \\\"max tx limit\\\"\\n                );\\n\\n                taxAmount = amount.mul(sell_tax).div(100);\\n            }\\n\\n            uint256 contractTokenBalance = balanceOf[address(this)];\\n            if (\\n                in_swap == 1 &&\\n                isSelling &&\\n                contractTokenBalance > sell_tax_threshold\\n            ) {\\n                swapTokensForEth(contractTokenBalance);\\n            }\\n        }\\n\\n        if (taxAmount > 0) {\\n            balanceOf[address(this)] = balanceOf[address(this)].add(taxAmount);\\n            emit Transfer(from, address(this), taxAmount);\\n        } else {\\n            require(\\n                max_transfer >= amount || anti_whale_exceptions[from],\\n                \\\"max tx limit\\\"\\n            );\\n        }\\n\\n        balanceOf[from] = balanceOf[from].sub(amount);\\n        balanceOf[to] = balanceOf[to].add(amount.sub(taxAmount));\\n\\n        require(\\n            balanceOf[to] <= max_holding ||\\n                anti_whale_exceptions[to] ||\\n                tx.origin == owner,\\n            \\\"max holding limit\\\"\\n        );\\n\\n        emit Transfer(from, to, amount.sub(taxAmount));\\n    }\\n\\n    function swapTokensForEth(uint amount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = weth;\\n\\n        try\\n            IUniswapV2Router01(uni_router)\\n                .swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                    amount,\\n                    0,\\n                    path,\\n                    tax_receiver,\\n                    99999999999999999999\\n                )\\n        {\\n            //\\n        } catch {\\n            // Ignore, to prevent calls from failing if owner sets invalid router\\n        }\\n    }\\n\\n    function isAntiWhaleEnabled() external view returns (bool) {\\n        return max_holding != 0 || max_transfer != 0;\\n    }\\n\\n    function setLimits(\\n        uint _max_holding,\\n        uint _max_transfer\\n    ) external onlyOwner {\\n        if (_max_holding == 0) {\\n            _max_holding = type(uint256).max;\\n        }\\n\\n        if (_max_transfer == 0) {\\n            _max_transfer = type(uint256).max;\\n        }\\n\\n        require(\\n            _max_holding >= totalSupply.div(100),\\n            \\\"Max Holding Limit cannot be less than 1% of total supply\\\"\\n        );\\n        require(\\n            _max_transfer >= totalSupply.div(100),\\n            \\\"Max Transfer Limit cannot be less than 1% of total supply\\\"\\n        );\\n\\n        max_holding = _max_holding;\\n        max_transfer = _max_transfer;\\n    }\\n\\n    function setAntiWhaleException(address user, bool val) external onlyOwner {\\n        anti_whale_exceptions[user] = val;\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        is_trading_enabled = 2;\\n    }\\n\\n    function setUniRouter(address newRouter, address newFactory) external onlyOwner {\\n        uni_factory = newFactory;\\n        uni_router = newRouter;\\n        routers[newRouter] = true;\\n        allowance[address(this)][newRouter] = type(uint256).max;\\n        anti_whale_exceptions[newRouter] = true;\\n    }\\n\\n    function setAmm(address lp) public onlyOwner {\\n        lps[lp] = true;\\n        anti_whale_exceptions[lp] = true;\\n    }\\n\\n    function addRouter(address router) external onlyOwner {\\n        routers[router] = true;\\n        allowance[address(this)][router] = type(uint256).max;\\n        anti_whale_exceptions[router] = true;\\n    }\\n\\n    function setExcludeFromFee(address addy, bool val) external onlyOwner {\\n        tax_exceptions[addy] = val;\\n    }\\n\\n    function setSwapThreshold(uint newThreshold) external onlyOwner {\\n        sell_tax_threshold = newThreshold;\\n    }\\n\\n    function setTaxes(uint _buy_tax, uint _sell_tax) external onlyOwner {\\n        require(_buy_tax <= 30, \\\"buy tax too high\\\");\\n        require(_sell_tax <= 30, \\\"sell tax too high\\\");\\n\\n        buy_tax = _buy_tax;\\n        sell_tax = _sell_tax;\\n    }\\n\\n    function setTaxReceiver(address _tax_receiver) external onlyOwner {\\n        tax_receiver = _tax_receiver;\\n    }\\n\\n    function addLp(uint amount) external payable onlyOwner {\\n        is_trading_enabled = 2;\\n        _transfer(owner, address(this), amount);\\n        uint balance = address(this).balance;\\n        address pair = uniV2Pair();\\n        IUniswapV2Router01(uni_router).addLiquidityETH{value: balance}(\\n            address(this),\\n            amount,\\n            amount,\\n            balance,\\n            owner,\\n            block.timestamp\\n        );\\n        setAmm(pair);\\n        is_trading_enabled = 1;\\n    }\\n\\n    function uniV2Pair() public view returns (address pair) {\\n        pair = pairFor(weth, address(this));\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            uni_factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function sortTokens(\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address token0, address token1) {\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() external onlyOwner {\\n        (bool sent, ) = owner.call{value: address(this).balance}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function version() public pure returns (uint) {\\n        return 2;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\n// https://uniswap.org/docs/v2/smart-contracts/router01/\\n// https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/UniswapV2Router01.sol implementation\\n// UniswapV2Router01 is deployed at 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a on the Ethereum mainnet, and the Ropsten, Rinkeby, G\u00f6rli, and Kovan testnets\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n      address tokenA,\\n      address tokenB,\\n      uint amountADesired,\\n      uint amountBDesired,\\n      uint amountAMin,\\n      uint amountBMin,\\n      address to,\\n      uint deadline\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\n  function addLiquidityETH(\\n      address token,\\n      uint amountTokenDesired,\\n      uint amountTokenMin,\\n      uint amountETHMin,\\n      address to,\\n      uint deadline\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n  function removeLiquidity(\\n      address tokenA,\\n      address tokenB,\\n      uint liquidity,\\n      uint amountAMin,\\n      uint amountBMin,\\n      address to,\\n      uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n  function removeLiquidityETH(\\n      address token,\\n      uint liquidity,\\n      uint amountTokenMin,\\n      uint amountETHMin,\\n      address to,\\n      uint deadline\\n  ) external returns (uint amountToken, uint amountETH);\\n  function removeLiquidityWithPermit(\\n      address tokenA,\\n      address tokenB,\\n      uint liquidity,\\n      uint amountAMin,\\n      uint amountBMin,\\n      address to,\\n      uint deadline,\\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountA, uint amountB);\\n  function removeLiquidityETHWithPermit(\\n      address token,\\n      uint liquidity,\\n      uint amountTokenMin,\\n      uint amountETHMin,\\n      address to,\\n      uint deadline,\\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountToken, uint amountETH);\\n  function swapExactTokensForTokens(\\n      uint amountIn,\\n      uint amountOutMin,\\n      address[] calldata path,\\n      address to,\\n      uint deadline\\n  ) external returns (uint[] memory amounts);\\n  function swapTokensForExactTokens(\\n      uint amountOut,\\n      uint amountInMax,\\n      address[] calldata path,\\n      address to,\\n      uint deadline\\n  ) external returns (uint[] memory amounts);\\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n      external\\n      payable\\n      returns (uint[] memory amounts);\\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n      external\\n      returns (uint[] memory amounts);\\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n      external\\n      returns (uint[] memory amounts);\\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n      external\\n      payable\\n      returns (uint[] memory amounts);\\n\\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"src/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    function allPairs(uint256) external view returns (address);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n    external\\n    returns (address pair);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address, address) external view returns (address);\\n\\n    function setFeeTo(address _feeTo) external;\\n\\n    function setFeeToSetter(address _feeToSetter) external;\\n}\"\r\n    },\r\n    \"src/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.19;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return a / b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/solady/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solady/=lib/solady/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}",
    "etherscan_verified": true
}