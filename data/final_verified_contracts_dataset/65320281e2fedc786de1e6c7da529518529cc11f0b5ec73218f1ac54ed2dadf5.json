{
    "address": "0xeffb5Ed8242e5270aD662C82EfcA97aDAdE27dFD",
    "tx_hash": "65320281e2fedc786de1e6c7da529518529cc11f0b5ec73218f1ac54ed2dadf5",
    "block_number": 18002400,
    "timestamp": 1693095803,
    "gas_used_in_creation": 4574136,
    "creation_bytecode": "60806040526200001a670de0b6b3a764000060001962000364565b620000289060001962000387565b60065560006008819055601e600955600a8190556028600b819055600c829055600d819055600e91909155600f556012805473420cba3c1cee8447b6f856e4b13ebf498eb47dfa6001600160a01b031991821681179092556013805490911690911790556015805462ffffff60a01b19166201000160a01b17905566470de4df82000060168190556017556509184e72a000601855348015620000ca57600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506006543360009081526002602090815260409182902092909255601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d908117909155815163c45a015560e01b815291519092839263c45a015592600480830193928290030181865afa15801562000188573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ae9190620003ad565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002229190620003ad565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801562000270573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002969190620003ad565b601580546001600160a01b0319166001600160a01b03928316179055600080548216815260056020526040808220805460ff1990811660019081179092553084528284208054821683179055601254851684528284208054821683179055601354909416835291208054909216179055336001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef670de0b6b3a76400006040516200035591815260200190565b60405180910390a350620003df565b6000826200038257634e487b7160e01b600052601260045260246000fd5b500690565b600082821015620003a857634e487b7160e01b600052601160045260246000fd5b500390565b600060208284031215620003c057600080fd5b81516001600160a01b0381168114620003d857600080fd5b9392505050565b611dc780620003ef6000396000f3fe6080604052600436106101d05760003560e01c80637d1db4a5116100f7578063a2a957bb11610095578063c492f04611610064578063c492f0461461051c578063dd62ed3e1461053c578063ea1644d514610582578063f2fde38b146105a257600080fd5b8063a2a957bb14610497578063a9059cbb146104b7578063bfd79284146104d7578063c3c8cd801461050757600080fd5b80638f70ccf7116100d15780638f70ccf7146104415780638f9a55c01461046157806395d89b41146101fe57806398a5c3151461047757600080fd5b80637d1db4a5146103e05780637f2feddc146103f65780638da5cb5b1461042357600080fd5b8063313ce5671161016f5780636fc3eaec1161013e5780636fc3eaec1461037657806370a082311461038b578063715018a6146103ab57806374010ece146103c057600080fd5b8063313ce567146102fa57806349bd5a5e146103165780636b999053146103365780636d8aa8f81461035657600080fd5b80631694505e116101ab5780631694505e1461026757806318160ddd1461029f57806323b872dd146102c45780632fd689e3146102e457600080fd5b8062b8cf2a146101dc57806306fdde03146101fe578063095ea7b31461023757600080fd5b366101d757005b600080fd5b3480156101e857600080fd5b506101fc6101f736600461191a565b6105c2565b005b34801561020a57600080fd5b5060408051808201825260018152603f60f81b6020820152905161022e91906119df565b60405180910390f35b34801561024357600080fd5b50610257610252366004611a34565b610661565b604051901515815260200161022e565b34801561027357600080fd5b50601454610287906001600160a01b031681565b6040516001600160a01b03909116815260200161022e565b3480156102ab57600080fd5b50670de0b6b3a76400005b60405190815260200161022e565b3480156102d057600080fd5b506102576102df366004611a60565b610678565b3480156102f057600080fd5b506102b660185481565b34801561030657600080fd5b506040516009815260200161022e565b34801561032257600080fd5b50601554610287906001600160a01b031681565b34801561034257600080fd5b506101fc610351366004611aa1565b6106e1565b34801561036257600080fd5b506101fc610371366004611ace565b61072c565b34801561038257600080fd5b506101fc610774565b34801561039757600080fd5b506102b66103a6366004611aa1565b6107bf565b3480156103b757600080fd5b506101fc6107e1565b3480156103cc57600080fd5b506101fc6103db366004611ae9565b610855565b3480156103ec57600080fd5b506102b660165481565b34801561040257600080fd5b506102b6610411366004611aa1565b60116020526000908152604090205481565b34801561042f57600080fd5b506000546001600160a01b0316610287565b34801561044d57600080fd5b506101fc61045c366004611ace565b610884565b34801561046d57600080fd5b506102b660175481565b34801561048357600080fd5b506101fc610492366004611ae9565b6108cc565b3480156104a357600080fd5b506101fc6104b2366004611b02565b6108fb565b3480156104c357600080fd5b506102576104d2366004611a34565b610939565b3480156104e357600080fd5b506102576104f2366004611aa1565b60106020526000908152604090205460ff1681565b34801561051357600080fd5b506101fc610946565b34801561052857600080fd5b506101fc610537366004611b34565b61099a565b34801561054857600080fd5b506102b6610557366004611bb8565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b34801561058e57600080fd5b506101fc61059d366004611ae9565b610a3b565b3480156105ae57600080fd5b506101fc6105bd366004611aa1565b610a6a565b6000546001600160a01b031633146105f55760405162461bcd60e51b81526004016105ec90611bf1565b60405180910390fd5b60005b815181101561065d5760016010600084848151811061061957610619611c26565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061065581611c52565b9150506105f8565b5050565b600061066e338484610b54565b5060015b92915050565b6000610685848484610c78565b6106d784336106d285604051806060016040528060288152602001611d6a602891396001600160a01b038a16600090815260046020908152604080832033845290915290205491906111b4565b610b54565b5060019392505050565b6000546001600160a01b0316331461070b5760405162461bcd60e51b81526004016105ec90611bf1565b6001600160a01b03166000908152601060205260409020805460ff19169055565b6000546001600160a01b031633146107565760405162461bcd60e51b81526004016105ec90611bf1565b60158054911515600160b01b0260ff60b01b19909216919091179055565b6012546001600160a01b0316336001600160a01b031614806107a957506013546001600160a01b0316336001600160a01b0316145b6107b257600080fd5b476107bc816111ee565b50565b6001600160a01b03811660009081526002602052604081205461067290611228565b6000546001600160a01b0316331461080b5760405162461bcd60e51b81526004016105ec90611bf1565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b0316331461087f5760405162461bcd60e51b81526004016105ec90611bf1565b601655565b6000546001600160a01b031633146108ae5760405162461bcd60e51b81526004016105ec90611bf1565b60158054911515600160a01b0260ff60a01b19909216919091179055565b6000546001600160a01b031633146108f65760405162461bcd60e51b81526004016105ec90611bf1565b601855565b6000546001600160a01b031633146109255760405162461bcd60e51b81526004016105ec90611bf1565b600893909355600a91909155600955600b55565b600061066e338484610c78565b6012546001600160a01b0316336001600160a01b0316148061097b57506013546001600160a01b0316336001600160a01b0316145b61098457600080fd5b600061098f306107bf565b90506107bc816112ac565b6000546001600160a01b031633146109c45760405162461bcd60e51b81526004016105ec90611bf1565b60005b82811015610a355781600560008686858181106109e6576109e6611c26565b90506020020160208101906109fb9190611aa1565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610a2d81611c52565b9150506109c7565b50505050565b6000546001600160a01b03163314610a655760405162461bcd60e51b81526004016105ec90611bf1565b601755565b6000546001600160a01b03163314610a945760405162461bcd60e51b81526004016105ec90611bf1565b6001600160a01b038116610af95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ec565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316610bb65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105ec565b6001600160a01b038216610c175760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105ec565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610cdc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105ec565b6001600160a01b038216610d3e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105ec565b60008111610da05760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016105ec565b6000546001600160a01b03848116911614801590610dcc57506000546001600160a01b03838116911614155b156110ad57601554600160a01b900460ff16610e65576000546001600160a01b03848116911614610e655760405162461bcd60e51b815260206004820152603f60248201527f544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e642060448201527f746f6b656e7320756e74696c2074726164696e6720697320656e61626c65640060648201526084016105ec565b601654811115610eb75760405162461bcd60e51b815260206004820152601c60248201527f544f4b454e3a204d6178205472616e73616374696f6e204c696d69740000000060448201526064016105ec565b6001600160a01b03831660009081526010602052604090205460ff16158015610ef957506001600160a01b03821660009081526010602052604090205460ff16155b610f515760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a20596f7572206163636f756e7420697320626c61636b6c69737460448201526265642160e81b60648201526084016105ec565b6015546001600160a01b03838116911614610fd65760175481610f73846107bf565b610f7d9190611c6b565b10610fd65760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a2042616c616e636520657863656564732077616c6c65742073696044820152627a652160e81b60648201526084016105ec565b6000610fe1306107bf565b601854601654919250821015908210610ffa5760165491505b8080156110115750601554600160a81b900460ff16155b801561102b57506015546001600160a01b03868116911614155b80156110405750601554600160b01b900460ff165b801561106557506001600160a01b03851660009081526005602052604090205460ff16155b801561108a57506001600160a01b03841660009081526005602052604090205460ff16155b156110aa57611098826112ac565b4780156110a8576110a8476111ee565b505b50505b6001600160a01b03831660009081526005602052604090205460019060ff16806110ef57506001600160a01b03831660009081526005602052604090205460ff165b8061112157506015546001600160a01b0385811691161480159061112157506015546001600160a01b03848116911614155b1561112e575060006111a8565b6015546001600160a01b03858116911614801561115957506014546001600160a01b03848116911614155b1561116b57600854600c55600954600d555b6015546001600160a01b03848116911614801561119657506014546001600160a01b03858116911614155b156111a857600a54600c55600b54600d555b610a3584848484611426565b600081848411156111d85760405162461bcd60e51b81526004016105ec91906119df565b5060006111e58486611c83565b95945050505050565b6013546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561065d573d6000803e3d6000fd5b600060065482111561128f5760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b60648201526084016105ec565b6000611299611454565b90506112a58382611477565b9392505050565b6015805460ff60a81b1916600160a81b17905560408051600280825260608201835260009260208301908036833701905050905030816000815181106112f4576112f4611c26565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113719190611c9a565b8160018151811061138457611384611c26565b6001600160a01b0392831660209182029290920101526014546113aa9130911684610b54565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac947906113e3908590600090869030904290600401611cb7565b600060405180830381600087803b1580156113fd57600080fd5b505af1158015611411573d6000803e3d6000fd5b50506015805460ff60a81b1916905550505050565b80611433576114336114b9565b61143e8484846114e7565b80610a3557610a35600e54600c55600f54600d55565b60008060006114616115de565b90925090506114708282611477565b9250505090565b60006112a583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061161e565b600c541580156114c95750600d54155b156114d057565b600c8054600e55600d8054600f5560009182905555565b6000806000806000806114f98761164c565b6001600160a01b038f16600090815260026020526040902054959b5093995091975095509350915061152b90876116a9565b6001600160a01b03808b1660009081526002602052604080822093909355908a168152205461155a90866116eb565b6001600160a01b03891660009081526002602052604090205561157c8161174a565b6115868483611794565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516115cb91815260200190565b60405180910390a3505050505050505050565b6006546000908190670de0b6b3a76400006115f98282611477565b82101561161557505060065492670de0b6b3a764000092509050565b90939092509050565b6000818361163f5760405162461bcd60e51b81526004016105ec91906119df565b5060006111e58486611d28565b60008060008060008060008060006116698a600c54600d546117b8565b9250925092506000611679611454565b9050600080600061168c8e87878761180d565b919e509c509a509598509396509194505050505091939550919395565b60006112a583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111b4565b6000806116f88385611c6b565b9050838110156112a55760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016105ec565b6000611754611454565b90506000611762838361185d565b3060009081526002602052604090205490915061177f90826116eb565b30600090815260026020526040902055505050565b6006546117a190836116a9565b6006556007546117b190826116eb565b6007555050565b60008080806117d260646117cc898961185d565b90611477565b905060006117e560646117cc8a8961185d565b905060006117fd826117f78b866116a9565b906116a9565b9992985090965090945050505050565b600080808061181c888661185d565b9050600061182a888761185d565b90506000611838888861185d565b9050600061184a826117f786866116a9565b939b939a50919850919650505050505050565b60008260000361186f57506000610672565b600061187b8385611d4a565b9050826118888583611d28565b146112a55760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016105ec565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146107bc57600080fd5b8035611915816118f5565b919050565b6000602080838503121561192d57600080fd5b823567ffffffffffffffff8082111561194557600080fd5b818501915085601f83011261195957600080fd5b81358181111561196b5761196b6118df565b8060051b604051601f19603f83011681018181108582111715611990576119906118df565b6040529182528482019250838101850191888311156119ae57600080fd5b938501935b828510156119d3576119c48561190a565b845293850193928501926119b3565b98975050505050505050565b600060208083528351808285015260005b81811015611a0c578581018301518582016040015282016119f0565b81811115611a1e576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215611a4757600080fd5b8235611a52816118f5565b946020939093013593505050565b600080600060608486031215611a7557600080fd5b8335611a80816118f5565b92506020840135611a90816118f5565b929592945050506040919091013590565b600060208284031215611ab357600080fd5b81356112a5816118f5565b8035801515811461191557600080fd5b600060208284031215611ae057600080fd5b6112a582611abe565b600060208284031215611afb57600080fd5b5035919050565b60008060008060808587031215611b1857600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060408486031215611b4957600080fd5b833567ffffffffffffffff80821115611b6157600080fd5b818601915086601f830112611b7557600080fd5b813581811115611b8457600080fd5b8760208260051b8501011115611b9957600080fd5b602092830195509350611baf9186019050611abe565b90509250925092565b60008060408385031215611bcb57600080fd5b8235611bd6816118f5565b91506020830135611be6816118f5565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611c6457611c64611c3c565b5060010190565b60008219821115611c7e57611c7e611c3c565b500190565b600082821015611c9557611c95611c3c565b500390565b600060208284031215611cac57600080fd5b81516112a5816118f5565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611d075784516001600160a01b031683529383019391830191600101611ce2565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611d4557634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611d6457611d64611c3c565b50029056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212203651a072dc73c200f8cb7ce796984cab83d4222b0be5453a204c26dce38998a364736f6c634300080f0033",
    "runtime_bytecode": "6080604052600436106101d05760003560e01c80637d1db4a5116100f7578063a2a957bb11610095578063c492f04611610064578063c492f0461461051c578063dd62ed3e1461053c578063ea1644d514610582578063f2fde38b146105a257600080fd5b8063a2a957bb14610497578063a9059cbb146104b7578063bfd79284146104d7578063c3c8cd801461050757600080fd5b80638f70ccf7116100d15780638f70ccf7146104415780638f9a55c01461046157806395d89b41146101fe57806398a5c3151461047757600080fd5b80637d1db4a5146103e05780637f2feddc146103f65780638da5cb5b1461042357600080fd5b8063313ce5671161016f5780636fc3eaec1161013e5780636fc3eaec1461037657806370a082311461038b578063715018a6146103ab57806374010ece146103c057600080fd5b8063313ce567146102fa57806349bd5a5e146103165780636b999053146103365780636d8aa8f81461035657600080fd5b80631694505e116101ab5780631694505e1461026757806318160ddd1461029f57806323b872dd146102c45780632fd689e3146102e457600080fd5b8062b8cf2a146101dc57806306fdde03146101fe578063095ea7b31461023757600080fd5b366101d757005b600080fd5b3480156101e857600080fd5b506101fc6101f736600461191a565b6105c2565b005b34801561020a57600080fd5b5060408051808201825260018152603f60f81b6020820152905161022e91906119df565b60405180910390f35b34801561024357600080fd5b50610257610252366004611a34565b610661565b604051901515815260200161022e565b34801561027357600080fd5b50601454610287906001600160a01b031681565b6040516001600160a01b03909116815260200161022e565b3480156102ab57600080fd5b50670de0b6b3a76400005b60405190815260200161022e565b3480156102d057600080fd5b506102576102df366004611a60565b610678565b3480156102f057600080fd5b506102b660185481565b34801561030657600080fd5b506040516009815260200161022e565b34801561032257600080fd5b50601554610287906001600160a01b031681565b34801561034257600080fd5b506101fc610351366004611aa1565b6106e1565b34801561036257600080fd5b506101fc610371366004611ace565b61072c565b34801561038257600080fd5b506101fc610774565b34801561039757600080fd5b506102b66103a6366004611aa1565b6107bf565b3480156103b757600080fd5b506101fc6107e1565b3480156103cc57600080fd5b506101fc6103db366004611ae9565b610855565b3480156103ec57600080fd5b506102b660165481565b34801561040257600080fd5b506102b6610411366004611aa1565b60116020526000908152604090205481565b34801561042f57600080fd5b506000546001600160a01b0316610287565b34801561044d57600080fd5b506101fc61045c366004611ace565b610884565b34801561046d57600080fd5b506102b660175481565b34801561048357600080fd5b506101fc610492366004611ae9565b6108cc565b3480156104a357600080fd5b506101fc6104b2366004611b02565b6108fb565b3480156104c357600080fd5b506102576104d2366004611a34565b610939565b3480156104e357600080fd5b506102576104f2366004611aa1565b60106020526000908152604090205460ff1681565b34801561051357600080fd5b506101fc610946565b34801561052857600080fd5b506101fc610537366004611b34565b61099a565b34801561054857600080fd5b506102b6610557366004611bb8565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b34801561058e57600080fd5b506101fc61059d366004611ae9565b610a3b565b3480156105ae57600080fd5b506101fc6105bd366004611aa1565b610a6a565b6000546001600160a01b031633146105f55760405162461bcd60e51b81526004016105ec90611bf1565b60405180910390fd5b60005b815181101561065d5760016010600084848151811061061957610619611c26565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061065581611c52565b9150506105f8565b5050565b600061066e338484610b54565b5060015b92915050565b6000610685848484610c78565b6106d784336106d285604051806060016040528060288152602001611d6a602891396001600160a01b038a16600090815260046020908152604080832033845290915290205491906111b4565b610b54565b5060019392505050565b6000546001600160a01b0316331461070b5760405162461bcd60e51b81526004016105ec90611bf1565b6001600160a01b03166000908152601060205260409020805460ff19169055565b6000546001600160a01b031633146107565760405162461bcd60e51b81526004016105ec90611bf1565b60158054911515600160b01b0260ff60b01b19909216919091179055565b6012546001600160a01b0316336001600160a01b031614806107a957506013546001600160a01b0316336001600160a01b0316145b6107b257600080fd5b476107bc816111ee565b50565b6001600160a01b03811660009081526002602052604081205461067290611228565b6000546001600160a01b0316331461080b5760405162461bcd60e51b81526004016105ec90611bf1565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b0316331461087f5760405162461bcd60e51b81526004016105ec90611bf1565b601655565b6000546001600160a01b031633146108ae5760405162461bcd60e51b81526004016105ec90611bf1565b60158054911515600160a01b0260ff60a01b19909216919091179055565b6000546001600160a01b031633146108f65760405162461bcd60e51b81526004016105ec90611bf1565b601855565b6000546001600160a01b031633146109255760405162461bcd60e51b81526004016105ec90611bf1565b600893909355600a91909155600955600b55565b600061066e338484610c78565b6012546001600160a01b0316336001600160a01b0316148061097b57506013546001600160a01b0316336001600160a01b0316145b61098457600080fd5b600061098f306107bf565b90506107bc816112ac565b6000546001600160a01b031633146109c45760405162461bcd60e51b81526004016105ec90611bf1565b60005b82811015610a355781600560008686858181106109e6576109e6611c26565b90506020020160208101906109fb9190611aa1565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610a2d81611c52565b9150506109c7565b50505050565b6000546001600160a01b03163314610a655760405162461bcd60e51b81526004016105ec90611bf1565b601755565b6000546001600160a01b03163314610a945760405162461bcd60e51b81526004016105ec90611bf1565b6001600160a01b038116610af95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ec565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316610bb65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105ec565b6001600160a01b038216610c175760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105ec565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610cdc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105ec565b6001600160a01b038216610d3e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105ec565b60008111610da05760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016105ec565b6000546001600160a01b03848116911614801590610dcc57506000546001600160a01b03838116911614155b156110ad57601554600160a01b900460ff16610e65576000546001600160a01b03848116911614610e655760405162461bcd60e51b815260206004820152603f60248201527f544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e642060448201527f746f6b656e7320756e74696c2074726164696e6720697320656e61626c65640060648201526084016105ec565b601654811115610eb75760405162461bcd60e51b815260206004820152601c60248201527f544f4b454e3a204d6178205472616e73616374696f6e204c696d69740000000060448201526064016105ec565b6001600160a01b03831660009081526010602052604090205460ff16158015610ef957506001600160a01b03821660009081526010602052604090205460ff16155b610f515760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a20596f7572206163636f756e7420697320626c61636b6c69737460448201526265642160e81b60648201526084016105ec565b6015546001600160a01b03838116911614610fd65760175481610f73846107bf565b610f7d9190611c6b565b10610fd65760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a2042616c616e636520657863656564732077616c6c65742073696044820152627a652160e81b60648201526084016105ec565b6000610fe1306107bf565b601854601654919250821015908210610ffa5760165491505b8080156110115750601554600160a81b900460ff16155b801561102b57506015546001600160a01b03868116911614155b80156110405750601554600160b01b900460ff165b801561106557506001600160a01b03851660009081526005602052604090205460ff16155b801561108a57506001600160a01b03841660009081526005602052604090205460ff16155b156110aa57611098826112ac565b4780156110a8576110a8476111ee565b505b50505b6001600160a01b03831660009081526005602052604090205460019060ff16806110ef57506001600160a01b03831660009081526005602052604090205460ff165b8061112157506015546001600160a01b0385811691161480159061112157506015546001600160a01b03848116911614155b1561112e575060006111a8565b6015546001600160a01b03858116911614801561115957506014546001600160a01b03848116911614155b1561116b57600854600c55600954600d555b6015546001600160a01b03848116911614801561119657506014546001600160a01b03858116911614155b156111a857600a54600c55600b54600d555b610a3584848484611426565b600081848411156111d85760405162461bcd60e51b81526004016105ec91906119df565b5060006111e58486611c83565b95945050505050565b6013546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561065d573d6000803e3d6000fd5b600060065482111561128f5760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b60648201526084016105ec565b6000611299611454565b90506112a58382611477565b9392505050565b6015805460ff60a81b1916600160a81b17905560408051600280825260608201835260009260208301908036833701905050905030816000815181106112f4576112f4611c26565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113719190611c9a565b8160018151811061138457611384611c26565b6001600160a01b0392831660209182029290920101526014546113aa9130911684610b54565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac947906113e3908590600090869030904290600401611cb7565b600060405180830381600087803b1580156113fd57600080fd5b505af1158015611411573d6000803e3d6000fd5b50506015805460ff60a81b1916905550505050565b80611433576114336114b9565b61143e8484846114e7565b80610a3557610a35600e54600c55600f54600d55565b60008060006114616115de565b90925090506114708282611477565b9250505090565b60006112a583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061161e565b600c541580156114c95750600d54155b156114d057565b600c8054600e55600d8054600f5560009182905555565b6000806000806000806114f98761164c565b6001600160a01b038f16600090815260026020526040902054959b5093995091975095509350915061152b90876116a9565b6001600160a01b03808b1660009081526002602052604080822093909355908a168152205461155a90866116eb565b6001600160a01b03891660009081526002602052604090205561157c8161174a565b6115868483611794565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516115cb91815260200190565b60405180910390a3505050505050505050565b6006546000908190670de0b6b3a76400006115f98282611477565b82101561161557505060065492670de0b6b3a764000092509050565b90939092509050565b6000818361163f5760405162461bcd60e51b81526004016105ec91906119df565b5060006111e58486611d28565b60008060008060008060008060006116698a600c54600d546117b8565b9250925092506000611679611454565b9050600080600061168c8e87878761180d565b919e509c509a509598509396509194505050505091939550919395565b60006112a583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111b4565b6000806116f88385611c6b565b9050838110156112a55760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016105ec565b6000611754611454565b90506000611762838361185d565b3060009081526002602052604090205490915061177f90826116eb565b30600090815260026020526040902055505050565b6006546117a190836116a9565b6006556007546117b190826116eb565b6007555050565b60008080806117d260646117cc898961185d565b90611477565b905060006117e560646117cc8a8961185d565b905060006117fd826117f78b866116a9565b906116a9565b9992985090965090945050505050565b600080808061181c888661185d565b9050600061182a888761185d565b90506000611838888861185d565b9050600061184a826117f786866116a9565b939b939a50919850919650505050505050565b60008260000361186f57506000610672565b600061187b8385611d4a565b9050826118888583611d28565b146112a55760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016105ec565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146107bc57600080fd5b8035611915816118f5565b919050565b6000602080838503121561192d57600080fd5b823567ffffffffffffffff8082111561194557600080fd5b818501915085601f83011261195957600080fd5b81358181111561196b5761196b6118df565b8060051b604051601f19603f83011681018181108582111715611990576119906118df565b6040529182528482019250838101850191888311156119ae57600080fd5b938501935b828510156119d3576119c48561190a565b845293850193928501926119b3565b98975050505050505050565b600060208083528351808285015260005b81811015611a0c578581018301518582016040015282016119f0565b81811115611a1e576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215611a4757600080fd5b8235611a52816118f5565b946020939093013593505050565b600080600060608486031215611a7557600080fd5b8335611a80816118f5565b92506020840135611a90816118f5565b929592945050506040919091013590565b600060208284031215611ab357600080fd5b81356112a5816118f5565b8035801515811461191557600080fd5b600060208284031215611ae057600080fd5b6112a582611abe565b600060208284031215611afb57600080fd5b5035919050565b60008060008060808587031215611b1857600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060408486031215611b4957600080fd5b833567ffffffffffffffff80821115611b6157600080fd5b818601915086601f830112611b7557600080fd5b813581811115611b8457600080fd5b8760208260051b8501011115611b9957600080fd5b602092830195509350611baf9186019050611abe565b90509250925092565b60008060408385031215611bcb57600080fd5b8235611bd6816118f5565b91506020830135611be6816118f5565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611c6457611c64611c3c565b5060010190565b60008219821115611c7e57611c7e611c3c565b500190565b600082821015611c9557611c95611c3c565b500390565b600060208284031215611cac57600080fd5b81516112a5816118f5565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611d075784516001600160a01b031683529383019391830191600101611ce2565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611d4557634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611d6457611d64611c3c565b50029056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212203651a072dc73c200f8cb7ce796984cab83d4222b0be5453a204c26dce38998a364736f6c634300080f0033",
    "contract_name": "mysterious",
    "compiler_version": "v0.8.15+commit.e14f2714",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"blockBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redisFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redisFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapTokensThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"unblockBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n?????????????????????????????????????????\r\n?????????????????????????????????????????\r\n?????????????????????????????????????????\r\n?????????????????????????????????????????\r\n?????????????????????????????????????????\r\nW: https://themysteriouswayofliving.xyz/\r\nT: https://t.me/mysteriousERC20\r\nT: https://twitter.com/mysteriousERC20\r\n?????????????????????????????????????????\r\n?????????????????????????????????????????\r\n?????????????????????????????????????????\r\n?????????????????????????????????????????\r\n?????????????????????????????????????????\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.15;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract mysterious is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"?\";\r\n    string private constant _symbol = \"?\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1000000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _redisFeeOnBuy = 0;\r\n    uint256 private _taxFeeOnBuy = 30;\r\n    uint256 private _redisFeeOnSell = 0;\r\n    uint256 private _taxFeeOnSell = 40;\r\n\r\n    //Original Fee\r\n    uint256 private _redisFee = _redisFeeOnSell;\r\n    uint256 private _taxFee = _taxFeeOnSell;\r\n\r\n    uint256 private _previousredisFee = _redisFee;\r\n    uint256 private _previoustaxFee = _taxFee;\r\n\r\n    mapping(address => bool) public bots; mapping (address => uint256) public _buyMap;\r\n    address payable private _developmentAddress = payable(0x420CBa3C1cEe8447B6f856e4b13EBf498Eb47dFa);\r\n    address payable private _marketingAddress = payable(0x420CBa3C1cEe8447B6f856e4b13EBf498Eb47dFa);\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private tradingOpen = true;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n\r\n    uint256 public _maxTxAmount = 20000000 * 10**9;\r\n    uint256 public _maxWalletSize = 20000000 * 10**9;\r\n    uint256 public _swapTokensAtAmount = 10000 * 10**9;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);//\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_developmentAddress] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_redisFee == 0 && _taxFee == 0) return;\r\n\r\n        _previousredisFee = _redisFee;\r\n        _previoustaxFee = _taxFee;\r\n\r\n        _redisFee = 0;\r\n        _taxFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _redisFee = _previousredisFee;\r\n        _taxFee = _previoustaxFee;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (from != owner() && to != owner()) {\r\n\r\n            //Trade start check\r\n            if (!tradingOpen) {\r\n                require(from == owner(), \"TOKEN: This account cannot send tokens until trading is enabled\");\r\n            }\r\n\r\n            require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n            require(!bots[from] && !bots[to], \"TOKEN: Your account is blacklisted!\");\r\n\r\n            if(to != uniswapV2Pair) {\r\n                require(balanceOf(to) + amount < _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\r\n\r\n            if(contractTokenBalance >= _maxTxAmount)\r\n            {\r\n                contractTokenBalance = _maxTxAmount;\r\n            }\r\n\r\n            if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        //Transfer Tokens\r\n        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n            takeFee = false;\r\n        } else {\r\n\r\n            //Set Fee for Buys\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                _redisFee = _redisFeeOnBuy;\r\n                _taxFee = _taxFeeOnBuy;\r\n            }\r\n\r\n            //Set Fee for Sells\r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                _redisFee = _redisFeeOnSell;\r\n                _taxFee = _taxFeeOnSell;\r\n            }\r\n\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _marketingAddress.transfer(amount);\r\n    }\r\n\r\n    function setTrading(bool _tradingOpen) public onlyOwner {\r\n        tradingOpen = _tradingOpen;\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function manualsend() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function blockBots(address[] memory bots_) public onlyOwner {\r\n        for (uint256 i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function unblockBot(address notbot) public onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\r\n            _getTValues(tAmount, _redisFee, _taxFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n            _getRValues(tAmount, tFee, tTeam, currentRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        uint256 redisFee,\r\n        uint256 taxFee\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = tAmount.mul(redisFee).div(100);\r\n        uint256 tTeam = tAmount.mul(taxFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTeam,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {\r\n        _redisFeeOnBuy = redisFeeOnBuy;\r\n        _redisFeeOnSell = redisFeeOnSell;\r\n        _taxFeeOnBuy = taxFeeOnBuy;\r\n        _taxFeeOnSell = taxFeeOnSell;\r\n    }\r\n\r\n    //Set minimum tokens required to swap.\r\n    function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {\r\n        _swapTokensAtAmount = swapTokensAtAmount;\r\n    }\r\n\r\n    //Set minimum tokens required to swap.\r\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n\r\n    //Set maximum transaction\r\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n        _maxWalletSize = maxWalletSize;\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n}",
    "etherscan_verified": true
}