{
    "address": "0x369881c25713474CFe200dE23E54C6f19a707cDB",
    "tx_hash": "8973bc35dd92bee90d036812c77e9baec67c703cb547ecb19885b4cd908e27a1",
    "block_number": 18000135,
    "timestamp": 1693068515,
    "gas_used_in_creation": 1787926,
    "creation_bytecode": "608060405234801562000010575f80fd5b506040518060400160405280601181526020017f426c6f636b426f742020202020202020200000000000000000000000000000008152506040518060400160405280600981526020017f20424f542020202020000000000000000000000000000000000000000000000081525081600390816200008e919062000890565b508060049081620000a0919062000890565b505050620000c3620000b7620000e360201b60201c565b620000ea60201b60201c565b620000dd33670de0b6b3a7640000620001ad60201b60201c565b62000c49565b5f33905090565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200021e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200021590620009d2565b60405180910390fd5b620002315f83836200031d60201b60201c565b8060025f82825462000244919062000a1f565b92505081905550805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825462000298919062000a1f565b925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002fe919062000a6a565b60405180910390a3620003195f83836200050c60201b60201c565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff1660075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036200043e57620003826200051160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480620003f65750620003c76200051160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b62000438576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200042f9062000ad3565b60405180910390fd5b62000507565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146200050657620004a36200053960201b60201c565b81620004b584620005de60201b60201c565b620004c1919062000a1f565b111562000505576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004fc9062000b41565b60405180910390fd5b5b5b505050565b505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f80600654036200055c57620005546200062360201b60201c565b9050620005db565b5f603c662386f26fc100006006544262000577919062000b61565b62000583919062000b9b565b6200058f919062000c12565b66470de4df820000620005a3919062000a1f565b9050620005b56200062360201b60201c565b811115620005d657620005cd6200062360201b60201c565b915050620005db565b809150505b90565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f600254905090565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680620006a857607f821691505b602082108103620006be57620006bd62000663565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620007227fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620006e5565b6200072e8683620006e5565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f62000778620007726200076c8462000746565b6200074f565b62000746565b9050919050565b5f819050919050565b620007938362000758565b620007ab620007a2826200077f565b848454620006f1565b825550505050565b5f90565b620007c1620007b3565b620007ce81848462000788565b505050565b5b81811015620007f557620007e95f82620007b7565b600181019050620007d4565b5050565b601f82111562000844576200080e81620006c4565b6200081984620006d6565b8101602085101562000829578190505b620008416200083885620006d6565b830182620007d3565b50505b505050565b5f82821c905092915050565b5f620008665f198460080262000849565b1980831691505092915050565b5f62000880838362000855565b9150826002028217905092915050565b6200089b826200062c565b67ffffffffffffffff811115620008b757620008b662000636565b5b620008c3825462000690565b620008d0828285620007f9565b5f60209050601f83116001811462000906575f8415620008f1578287015190505b620008fd858262000873565b8655506200096c565b601f1984166200091686620006c4565b5f5b828110156200093f5784890151825560018201915060208501945060208101905062000918565b868310156200095f57848901516200095b601f89168262000855565b8355505b6001600288020188555050505b505050505050565b5f82825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f620009ba601f8362000974565b9150620009c78262000984565b602082019050919050565b5f6020820190508181035f830152620009eb81620009ac565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f62000a2b8262000746565b915062000a388362000746565b925082820190508082111562000a535762000a52620009f2565b5b92915050565b62000a648162000746565b82525050565b5f60208201905062000a7f5f83018462000a59565b92915050565b7f74726164696e67206973206e6f742073746172746564000000000000000000005f82015250565b5f62000abb60168362000974565b915062000ac88262000a85565b602082019050919050565b5f6020820190508181035f83015262000aec8162000aad565b9050919050565b7f77616c6c6574206d6178696d756d0000000000000000000000000000000000005f82015250565b5f62000b29600e8362000974565b915062000b368262000af3565b602082019050919050565b5f6020820190508181035f83015262000b5a8162000b1b565b9050919050565b5f62000b6d8262000746565b915062000b7a8362000746565b925082820390508181111562000b955762000b94620009f2565b5b92915050565b5f62000ba78262000746565b915062000bb48362000746565b925082820262000bc48162000746565b9150828204841483151762000bde5762000bdd620009f2565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f62000c1e8262000746565b915062000c2b8362000746565b92508262000c3e5762000c3d62000be5565b5b828204905092915050565b611c878062000c575f395ff3fe608060405234801561000f575f80fd5b5060043610610114575f3560e01c8063715018a6116100a0578063a457c2d71161006f578063a457c2d7146102d0578063a9059cbb14610300578063dd62ed3e14610330578063f2fde38b14610360578063f8b45b051461037c57610114565b8063715018a61461026c57806375a50dae146102765780638da5cb5b1461029457806395d89b41146102b257610114565b806323b872dd116100e757806323b872dd146101a2578063313ce567146101d257806339509351146101f05780636b0ec5b61461022057806370a082311461023c57610114565b806306fdde0314610118578063095ea7b31461013657806316f0115b1461016657806318160ddd14610184575b5f80fd5b61012061039a565b60405161012d91906112bc565b60405180910390f35b610150600480360381019061014b919061136d565b61042a565b60405161015d91906113c5565b60405180910390f35b61016e610447565b60405161017b91906113ed565b60405180910390f35b61018c61046c565b6040516101999190611415565b60405180910390f35b6101bc60048036038101906101b7919061142e565b610475565b6040516101c991906113c5565b60405180910390f35b6101da610567565b6040516101e79190611499565b60405180910390f35b61020a6004803603810190610205919061136d565b61056f565b60405161021791906113c5565b60405180910390f35b61023a600480360381019061023591906114b2565b610616565b005b610256600480360381019061025191906114b2565b6106dc565b6040516102639190611415565b60405180910390f35b610274610721565b005b61027e6107a8565b60405161028b9190611415565b60405180910390f35b61029c6107b4565b6040516102a991906113ed565b60405180910390f35b6102ba6107dc565b6040516102c791906112bc565b60405180910390f35b6102ea60048036038101906102e5919061136d565b61086c565b6040516102f791906113c5565b60405180910390f35b61031a6004803603810190610315919061136d565b610952565b60405161032791906113c5565b60405180910390f35b61034a600480360381019061034591906114dd565b61096f565b6040516103579190611415565b60405180910390f35b61037a600480360381019061037591906114b2565b6109f1565b005b610384610ae7565b6040516103919190611415565b60405180910390f35b6060600380546103a990611548565b80601f01602080910402602001604051908101604052809291908181526020018280546103d590611548565b80156104205780601f106103f757610100808354040283529160200191610420565b820191905f5260205f20905b81548152906001019060200180831161040357829003601f168201915b5050505050905090565b5f61043d610436610b68565b8484610b6f565b6001905092915050565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f600254905090565b5f610481848484610d32565b5f60015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6104c8610b68565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053e906115e8565b60405180910390fd5b61055b85610553610b68565b858403610b6f565b60019150509392505050565b5f6009905090565b5f61060c61057b610b68565b848460015f610588610b68565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546106079190611633565b610b6f565b6001905092915050565b61061e610b68565b73ffffffffffffffffffffffffffffffffffffffff1661063c6107b4565b73ffffffffffffffffffffffffffffffffffffffff1614610692576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610689906116b0565b60405180910390fd5b426006819055508060075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610729610b68565b73ffffffffffffffffffffffffffffffffffffffff166107476107b4565b73ffffffffffffffffffffffffffffffffffffffff161461079d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906116b0565b60405180910390fd5b6107a65f610fa7565b565b670de0b6b3a764000081565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546107eb90611548565b80601f016020809104026020016040519081016040528092919081815260200182805461081790611548565b80156108625780601f1061083957610100808354040283529160200191610862565b820191905f5260205f20905b81548152906001019060200180831161084557829003601f168201915b5050505050905090565b5f8060015f610879610b68565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092a9061173e565b60405180910390fd5b61094761093e610b68565b85858403610b6f565b600191505092915050565b5f61096561095e610b68565b8484610d32565b6001905092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b6109f9610b68565b73ffffffffffffffffffffffffffffffffffffffff16610a176107b4565b73ffffffffffffffffffffffffffffffffffffffff1614610a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a64906116b0565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610adb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad2906117cc565b60405180910390fd5b610ae481610fa7565b50565b5f8060065403610b0057610af961046c565b9050610b65565b5f603c662386f26fc1000060065442610b1991906117ea565b610b23919061181d565b610b2d919061188b565b66470de4df820000610b3f9190611633565b9050610b4961046c565b811115610b6057610b5861046c565b915050610b65565b809150505b90565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd49061192b565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c42906119b9565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610d259190611415565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610da0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9790611a47565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0590611ad5565b60405180910390fd5b610e1983838361106a565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610e9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9390611b63565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610f2a9190611633565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f8e9190611415565b60405180910390a3610fa184848461122d565b50505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff1660075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611175576110c66107b4565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061113157506111026107b4565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b611170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116790611bcb565b60405180910390fd5b611228565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611227576111d1610ae7565b816111db846106dc565b6111e59190611633565b1115611226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121d90611c33565b60405180910390fd5b5b5b505050565b505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561126957808201518184015260208101905061124e565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61128e82611232565b611298818561123c565b93506112a881856020860161124c565b6112b181611274565b840191505092915050565b5f6020820190508181035f8301526112d48184611284565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611309826112e0565b9050919050565b611319816112ff565b8114611323575f80fd5b50565b5f8135905061133481611310565b92915050565b5f819050919050565b61134c8161133a565b8114611356575f80fd5b50565b5f8135905061136781611343565b92915050565b5f8060408385031215611383576113826112dc565b5b5f61139085828601611326565b92505060206113a185828601611359565b9150509250929050565b5f8115159050919050565b6113bf816113ab565b82525050565b5f6020820190506113d85f8301846113b6565b92915050565b6113e7816112ff565b82525050565b5f6020820190506114005f8301846113de565b92915050565b61140f8161133a565b82525050565b5f6020820190506114285f830184611406565b92915050565b5f805f60608486031215611445576114446112dc565b5b5f61145286828701611326565b935050602061146386828701611326565b925050604061147486828701611359565b9150509250925092565b5f60ff82169050919050565b6114938161147e565b82525050565b5f6020820190506114ac5f83018461148a565b92915050565b5f602082840312156114c7576114c66112dc565b5b5f6114d484828501611326565b91505092915050565b5f80604083850312156114f3576114f26112dc565b5b5f61150085828601611326565b925050602061151185828601611326565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061155f57607f821691505b6020821081036115725761157161151b565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320615f8201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b5f6115d260288361123c565b91506115dd82611578565b604082019050919050565b5f6020820190508181035f8301526115ff816115c6565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61163d8261133a565b91506116488361133a565b92508282019050808211156116605761165f611606565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f61169a60208361123c565b91506116a582611666565b602082019050919050565b5f6020820190508181035f8301526116c78161168e565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f61172860258361123c565b9150611733826116ce565b604082019050919050565b5f6020820190508181035f8301526117558161171c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f6117b660268361123c565b91506117c18261175c565b604082019050919050565b5f6020820190508181035f8301526117e3816117aa565b9050919050565b5f6117f48261133a565b91506117ff8361133a565b925082820390508181111561181757611816611606565b5b92915050565b5f6118278261133a565b91506118328361133a565b92508282026118408161133a565b9150828204841483151761185757611856611606565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6118958261133a565b91506118a08361133a565b9250826118b0576118af61185e565b5b828204905092915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f61191560248361123c565b9150611920826118bb565b604082019050919050565b5f6020820190508181035f83015261194281611909565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f6119a360228361123c565b91506119ae82611949565b604082019050919050565b5f6020820190508181035f8301526119d081611997565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f611a3160258361123c565b9150611a3c826119d7565b604082019050919050565b5f6020820190508181035f830152611a5e81611a25565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f611abf60238361123c565b9150611aca82611a65565b604082019050919050565b5f6020820190508181035f830152611aec81611ab3565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f611b4d60268361123c565b9150611b5882611af3565b604082019050919050565b5f6020820190508181035f830152611b7a81611b41565b9050919050565b7f74726164696e67206973206e6f742073746172746564000000000000000000005f82015250565b5f611bb560168361123c565b9150611bc082611b81565b602082019050919050565b5f6020820190508181035f830152611be281611ba9565b9050919050565b7f77616c6c6574206d6178696d756d0000000000000000000000000000000000005f82015250565b5f611c1d600e8361123c565b9150611c2882611be9565b602082019050919050565b5f6020820190508181035f830152611c4a81611c11565b905091905056fea26469706673582212207386016e1aaa9da297bf4ff048e2438a6060ab77a75524d79f488f8246e359f964736f6c63430008140033",
    "runtime_bytecode": "608060405234801561000f575f80fd5b5060043610610114575f3560e01c8063715018a6116100a0578063a457c2d71161006f578063a457c2d7146102d0578063a9059cbb14610300578063dd62ed3e14610330578063f2fde38b14610360578063f8b45b051461037c57610114565b8063715018a61461026c57806375a50dae146102765780638da5cb5b1461029457806395d89b41146102b257610114565b806323b872dd116100e757806323b872dd146101a2578063313ce567146101d257806339509351146101f05780636b0ec5b61461022057806370a082311461023c57610114565b806306fdde0314610118578063095ea7b31461013657806316f0115b1461016657806318160ddd14610184575b5f80fd5b61012061039a565b60405161012d91906112bc565b60405180910390f35b610150600480360381019061014b919061136d565b61042a565b60405161015d91906113c5565b60405180910390f35b61016e610447565b60405161017b91906113ed565b60405180910390f35b61018c61046c565b6040516101999190611415565b60405180910390f35b6101bc60048036038101906101b7919061142e565b610475565b6040516101c991906113c5565b60405180910390f35b6101da610567565b6040516101e79190611499565b60405180910390f35b61020a6004803603810190610205919061136d565b61056f565b60405161021791906113c5565b60405180910390f35b61023a600480360381019061023591906114b2565b610616565b005b610256600480360381019061025191906114b2565b6106dc565b6040516102639190611415565b60405180910390f35b610274610721565b005b61027e6107a8565b60405161028b9190611415565b60405180910390f35b61029c6107b4565b6040516102a991906113ed565b60405180910390f35b6102ba6107dc565b6040516102c791906112bc565b60405180910390f35b6102ea60048036038101906102e5919061136d565b61086c565b6040516102f791906113c5565b60405180910390f35b61031a6004803603810190610315919061136d565b610952565b60405161032791906113c5565b60405180910390f35b61034a600480360381019061034591906114dd565b61096f565b6040516103579190611415565b60405180910390f35b61037a600480360381019061037591906114b2565b6109f1565b005b610384610ae7565b6040516103919190611415565b60405180910390f35b6060600380546103a990611548565b80601f01602080910402602001604051908101604052809291908181526020018280546103d590611548565b80156104205780601f106103f757610100808354040283529160200191610420565b820191905f5260205f20905b81548152906001019060200180831161040357829003601f168201915b5050505050905090565b5f61043d610436610b68565b8484610b6f565b6001905092915050565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f600254905090565b5f610481848484610d32565b5f60015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6104c8610b68565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053e906115e8565b60405180910390fd5b61055b85610553610b68565b858403610b6f565b60019150509392505050565b5f6009905090565b5f61060c61057b610b68565b848460015f610588610b68565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546106079190611633565b610b6f565b6001905092915050565b61061e610b68565b73ffffffffffffffffffffffffffffffffffffffff1661063c6107b4565b73ffffffffffffffffffffffffffffffffffffffff1614610692576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610689906116b0565b60405180910390fd5b426006819055508060075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610729610b68565b73ffffffffffffffffffffffffffffffffffffffff166107476107b4565b73ffffffffffffffffffffffffffffffffffffffff161461079d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906116b0565b60405180910390fd5b6107a65f610fa7565b565b670de0b6b3a764000081565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546107eb90611548565b80601f016020809104026020016040519081016040528092919081815260200182805461081790611548565b80156108625780601f1061083957610100808354040283529160200191610862565b820191905f5260205f20905b81548152906001019060200180831161084557829003601f168201915b5050505050905090565b5f8060015f610879610b68565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092a9061173e565b60405180910390fd5b61094761093e610b68565b85858403610b6f565b600191505092915050565b5f61096561095e610b68565b8484610d32565b6001905092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b6109f9610b68565b73ffffffffffffffffffffffffffffffffffffffff16610a176107b4565b73ffffffffffffffffffffffffffffffffffffffff1614610a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a64906116b0565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610adb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad2906117cc565b60405180910390fd5b610ae481610fa7565b50565b5f8060065403610b0057610af961046c565b9050610b65565b5f603c662386f26fc1000060065442610b1991906117ea565b610b23919061181d565b610b2d919061188b565b66470de4df820000610b3f9190611633565b9050610b4961046c565b811115610b6057610b5861046c565b915050610b65565b809150505b90565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd49061192b565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c42906119b9565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610d259190611415565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610da0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9790611a47565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0590611ad5565b60405180910390fd5b610e1983838361106a565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610e9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9390611b63565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610f2a9190611633565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f8e9190611415565b60405180910390a3610fa184848461122d565b50505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff1660075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611175576110c66107b4565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061113157506111026107b4565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b611170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116790611bcb565b60405180910390fd5b611228565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611227576111d1610ae7565b816111db846106dc565b6111e59190611633565b1115611226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121d90611c33565b60405180910390fd5b5b5b505050565b505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561126957808201518184015260208101905061124e565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61128e82611232565b611298818561123c565b93506112a881856020860161124c565b6112b181611274565b840191505092915050565b5f6020820190508181035f8301526112d48184611284565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611309826112e0565b9050919050565b611319816112ff565b8114611323575f80fd5b50565b5f8135905061133481611310565b92915050565b5f819050919050565b61134c8161133a565b8114611356575f80fd5b50565b5f8135905061136781611343565b92915050565b5f8060408385031215611383576113826112dc565b5b5f61139085828601611326565b92505060206113a185828601611359565b9150509250929050565b5f8115159050919050565b6113bf816113ab565b82525050565b5f6020820190506113d85f8301846113b6565b92915050565b6113e7816112ff565b82525050565b5f6020820190506114005f8301846113de565b92915050565b61140f8161133a565b82525050565b5f6020820190506114285f830184611406565b92915050565b5f805f60608486031215611445576114446112dc565b5b5f61145286828701611326565b935050602061146386828701611326565b925050604061147486828701611359565b9150509250925092565b5f60ff82169050919050565b6114938161147e565b82525050565b5f6020820190506114ac5f83018461148a565b92915050565b5f602082840312156114c7576114c66112dc565b5b5f6114d484828501611326565b91505092915050565b5f80604083850312156114f3576114f26112dc565b5b5f61150085828601611326565b925050602061151185828601611326565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061155f57607f821691505b6020821081036115725761157161151b565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320615f8201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b5f6115d260288361123c565b91506115dd82611578565b604082019050919050565b5f6020820190508181035f8301526115ff816115c6565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61163d8261133a565b91506116488361133a565b92508282019050808211156116605761165f611606565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f61169a60208361123c565b91506116a582611666565b602082019050919050565b5f6020820190508181035f8301526116c78161168e565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f61172860258361123c565b9150611733826116ce565b604082019050919050565b5f6020820190508181035f8301526117558161171c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f6117b660268361123c565b91506117c18261175c565b604082019050919050565b5f6020820190508181035f8301526117e3816117aa565b9050919050565b5f6117f48261133a565b91506117ff8361133a565b925082820390508181111561181757611816611606565b5b92915050565b5f6118278261133a565b91506118328361133a565b92508282026118408161133a565b9150828204841483151761185757611856611606565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6118958261133a565b91506118a08361133a565b9250826118b0576118af61185e565b5b828204905092915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f61191560248361123c565b9150611920826118bb565b604082019050919050565b5f6020820190508181035f83015261194281611909565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f6119a360228361123c565b91506119ae82611949565b604082019050919050565b5f6020820190508181035f8301526119d081611997565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f611a3160258361123c565b9150611a3c826119d7565b604082019050919050565b5f6020820190508181035f830152611a5e81611a25565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f611abf60238361123c565b9150611aca82611a65565b604082019050919050565b5f6020820190508181035f830152611aec81611ab3565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f611b4d60268361123c565b9150611b5882611af3565b604082019050919050565b5f6020820190508181035f830152611b7a81611b41565b9050919050565b7f74726164696e67206973206e6f742073746172746564000000000000000000005f82015250565b5f611bb560168361123c565b9150611bc082611b81565b602082019050919050565b5f6020820190508181035f830152611be281611ba9565b9050919050565b7f77616c6c6574206d6178696d756d0000000000000000000000000000000000005f82015250565b5f611c1d600e8361123c565b9150611c2882611be9565b602082019050919050565b5f6020820190508181035f830152611c4a81611c11565b905091905056fea26469706673582212207386016e1aaa9da297bf4ff048e2438a6060ab77a75524d79f488f8246e359f964736f6c63430008140033",
    "contract_name": "BlockBot",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyOnStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "/**\r\n\r\nTelegram: https://t.me/BlockBotETH\r\nTwitter: https://twitter.com/BlockBotErc\r\nWebsite: https://blockboterc.com/\r\nAi Platform: https://www.blockbot.chat/\r\n\r\n*/\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n\r\n\r\n\r\n**/\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract BlockBot                      is ERC20, Ownable {\r\n    uint256 constant maxWalletStart = 2e16;\r\n    uint256 constant addMaxWalletPerMinute = 1e16;\r\n    uint256 public constant totalSupplyOnStart = 1e18;\r\n    uint256 tradingStartTime;\r\n    address public pool;\r\n\r\n    constructor() ERC20(\"BlockBot         \", \" BOT     \") {\r\n        _mint(msg.sender, totalSupplyOnStart);\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function maxWallet() public view returns (uint256) {\r\n        if (tradingStartTime == 0) return totalSupply();\r\n        uint256 res = maxWalletStart +\r\n            ((block.timestamp - tradingStartTime) * addMaxWalletPerMinute) /\r\n            (1 minutes);\r\n        if (res > totalSupply()) return totalSupply();\r\n        return res;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        // before start trading only owner can manipulate the token\r\n        if (pool == address(0)) {\r\n            require(from == owner() || to == owner(), \"trading is not started\");\r\n            return;\r\n        }\r\n\r\n        // check max wallet\r\n        if (to != pool)\r\n            require(balanceOf(to) + amount <= maxWallet(), \"wallet maximum\");\r\n    }\r\n\r\n    function startTrade(address poolAddress) public onlyOwner {\r\n        tradingStartTime = block.timestamp;\r\n        pool = poolAddress;\r\n    }\r\n}",
    "etherscan_verified": true
}