{
    "address": "0xAB17E21aaAaF60C9022E34e3AcdBC73EEeb0f880",
    "tx_hash": "a1fc1e20bc6fd2ea0e039694464690be1206c2172ff67882402400d27d88c176",
    "block_number": 18007449,
    "timestamp": 1693156859,
    "gas_used_in_creation": 5796993,
    "creation_bytecode": "60c06040525f600b55600c805460ff19908116909155612328600d55610e10600f556011805462ffffff1916600117905560138054909116905534801562000045575f80fd5b50604051806040016040528060048152602001634e656b6f60e01b815250604051806040016040528060048152602001634e454b4f60e01b8152508160039081620000919190620006ff565b506004620000a08282620006ff565b505050620000bd620000b7620003b260201b60201c565b620003b6565b737a250d5630b4cf539739df2c5dacb4c659f2488d620000df81600162000407565b6001600160a01b03811660808190526040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa15801562000128573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200014e9190620007c7565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200019a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620001c09190620007c7565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156200020b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620002319190620007c7565b6001600160a01b031660a08190526200024c9060016200047e565b6b014adf4b7320334b900000006008819055600a5560145f80601e81806c01431e0fae6d7217caa0000000612710620002878260056200080a565b6200029391906200082a565b60095560158790556016869055601785905584620002b287896200084a565b620002be91906200084a565b6014556019849055601a839055601b82905581620002dd84866200084a565b620002e991906200084a565b601855600780547328c046ef1b8e2a494972a7d691019256ae9e2b226001600160a01b0319918216811790925560068054909116909117905562000341620003396005546001600160a01b031690565b6001620004d1565b6200034e306001620004d1565b6200035d61dead6001620004d1565b6200037c620003746005546001600160a01b031690565b600162000407565b6200038930600162000407565b6200039861dead600162000407565b620003a4338262000579565b505050505050505062000860565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6005546001600160a01b03163314620004555760405162461bcd60e51b815260206004820181905260248201525f805160206200389683398151915260448201526064015b60405180910390fd5b6001600160a01b03919091165f9081526020805260409020805460ff1916911515919091179055565b6001600160a01b0382165f81815260216020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6005546001600160a01b031633146200051b5760405162461bcd60e51b815260206004820181905260248201525f805160206200389683398151915260448201526064016200044c565b6001600160a01b0382165f818152601f6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6001600160a01b038216620005d15760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016200044c565b8060025f828254620005e491906200084a565b90915550506001600160a01b0382165f9081526020819052604081208054839290620006129084906200084a565b90915550506040518181526001600160a01b038316905f907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200068957607f821691505b602082108103620006a857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200065b575f81815260208120601f850160051c81016020861015620006d65750805b601f850160051c820191505b81811015620006f757828155600101620006e2565b505050505050565b81516001600160401b038111156200071b576200071b62000660565b62000733816200072c845462000674565b84620006ae565b602080601f83116001811462000769575f8415620007515750858301515b5f19600386901b1c1916600185901b178555620006f7565b5f85815260208120601f198616915b82811015620007995788860151825594840194600190910190840162000778565b5085821015620007b757878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f60208284031215620007d8575f80fd5b81516001600160a01b0381168114620007ef575f80fd5b9392505050565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417620008245762000824620007f6565b92915050565b5f826200084557634e487b7160e01b5f52601260045260245ffd5b500490565b80820180821115620008245762000824620007f6565b60805160a051612fb2620008e45f395f81816105ef015281816110ba015281816117ca015281816118610152818161188c01528181611c2101528181612761015281816127ff015261282a01525f818161043701528181611be30152818161292b015281816129e201528181612a1e01528181612a920152612aee0152612fb25ff3fe608060405260043610610395575f3560e01c80638a8c523c116101de578063afa4f3b211610108578063e2f456051161009d578063f2fde38b1161006d578063f2fde38b14610a4e578063f637434214610a6d578063f8b45b0514610a82578063fe72b27a14610a97575f80fd5b8063e2f45605146109f1578063e884f26014610a06578063ea1644d514610a1a578063f11a24d314610a39575f80fd5b8063c876d0b9116100d8578063c876d0b91461096a578063c8c8ebe414610983578063d85ba06314610998578063dd62ed3e146109ad575f80fd5b8063afa4f3b2146108df578063b62496f5146108fe578063c02466681461092c578063c17b5b8c1461094b575f80fd5b80639ec22c0e1161017e578063a4c82a001161014e578063a4c82a001461086e578063a61ef01e14610883578063a9059cbb146108a1578063aacebbe3146108c0575f80fd5b80639ec22c0e146108105780639fccce3214610825578063a0d82dc51461083a578063a457c2d71461084f575f80fd5b806392136913116101b957806392136913146107b357806395d89b41146107c85780639a7a23d6146107dc5780639c3b4fdc146107fb575f80fd5b80638a8c523c146107635780638da5cb5b146107775780638ea5220f14610794575f80fd5b80632e82f1a0116102bf5780636a486a8e1161025f578063751039fc1161022f578063751039fc146106fc5780637571336a146107105780637bce5a041461072f5780638095d56414610744575f80fd5b80636a486a8e1461068057806370a0823114610695578063715018a6146106c957806374010ece146106dd575f80fd5b806349bd5a5e1161029a57806349bd5a5e146105de5780634a62bb65146106115780634fbee1931461062a5780636440f71914610661575f80fd5b80632e82f1a01461058b578063313ce567146105a457806339509351146105bf575f80fd5b8063199ffc721161033557806323b872dd1161030557806323b872dd146105235780632598cdb21461054257806327c8f835146105615780632c3e486c14610576575f80fd5b8063199ffc72146104c55780631a8145bb146104da5780631f3fed8f146104ef578063220efbd814610504575f80fd5b80631694505e116103705780631694505e1461042657806318160ddd146104715780631816467f1461048f578063184c16c5146104b0575f80fd5b806306fdde03146103a0578063095ea7b3146103ca57806310d5de53146103f9575f80fd5b3661039c57005b5f80fd5b3480156103ab575f80fd5b506103b4610ab6565b6040516103c19190612b6a565b60405180910390f35b3480156103d5575f80fd5b506103e96103e4366004612bc9565b610b46565b60405190151581526020016103c1565b348015610404575f80fd5b506103e9610413366004612bf3565b602080525f908152604090205460ff1681565b348015610431575f80fd5b506104597f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016103c1565b34801561047c575f80fd5b506002545b6040519081526020016103c1565b34801561049a575f80fd5b506104ae6104a9366004612bf3565b610b5c565b005b3480156104bb575f80fd5b50610481600f5481565b3480156104d0575f80fd5b50610481600b5481565b3480156104e5575f80fd5b50610481601d5481565b3480156104fa575f80fd5b50610481601c5481565b34801561050f575f80fd5b506011546103e99062010000900460ff1681565b34801561052e575f80fd5b506103e961053d366004612c0e565b610beb565b34801561054d575f80fd5b50600654610459906001600160a01b031681565b34801561056c575f80fd5b5061045961dead81565b348015610581575f80fd5b50610481600d5481565b348015610596575f80fd5b50600c546103e99060ff1681565b3480156105af575f80fd5b50604051601281526020016103c1565b3480156105ca575f80fd5b506103e96105d9366004612bc9565b610c93565b3480156105e9575f80fd5b506104597f000000000000000000000000000000000000000000000000000000000000000081565b34801561061c575f80fd5b506011546103e99060ff1681565b348015610635575f80fd5b506103e9610644366004612bf3565b6001600160a01b03165f908152601f602052604090205460ff1690565b34801561066c575f80fd5b506104ae61067b366004612c5b565b610cce565b34801561068b575f80fd5b5061048160185481565b3480156106a0575f80fd5b506104816106af366004612bf3565b6001600160a01b03165f9081526020819052604090205490565b3480156106d4575f80fd5b506104ae610df6565b3480156106e8575f80fd5b506104ae6106f7366004612c8d565b610e2b565b348015610707575f80fd5b506104ae610f0b565b34801561071b575f80fd5b506104ae61072a366004612ca4565b610f43565b34801561073a575f80fd5b5061048160155481565b34801561074f575f80fd5b506104ae61075e366004612cd7565b610f96565b34801561076e575f80fd5b506104ae61103e565b348015610782575f80fd5b506005546001600160a01b0316610459565b34801561079f575f80fd5b50600754610459906001600160a01b031681565b3480156107be575f80fd5b5061048160195481565b3480156107d3575f80fd5b506103b461107f565b3480156107e7575f80fd5b506104ae6107f6366004612ca4565b61108e565b348015610806575f80fd5b5061048160175481565b34801561081b575f80fd5b5061048160105481565b348015610830575f80fd5b50610481601e5481565b348015610845575f80fd5b50610481601b5481565b34801561085a575f80fd5b506103e9610869366004612bc9565b61116d565b348015610879575f80fd5b50610481600e5481565b34801561088e575f80fd5b506011546103e990610100900460ff1681565b3480156108ac575f80fd5b506103e96108bb366004612bc9565b611205565b3480156108cb575f80fd5b506104ae6108da366004612bf3565b611211565b3480156108ea575f80fd5b506103e96108f9366004612c8d565b611297565b348015610909575f80fd5b506103e9610918366004612bf3565b60216020525f908152604090205460ff1681565b348015610937575f80fd5b506104ae610946366004612ca4565b6113ec565b348015610956575f80fd5b506104ae610965366004612cd7565b611474565b348015610975575f80fd5b506013546103e99060ff1681565b34801561098e575f80fd5b5061048160085481565b3480156109a3575f80fd5b5061048160145481565b3480156109b8575f80fd5b506104816109c7366004612d00565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b3480156109fc575f80fd5b5061048160095481565b348015610a11575f80fd5b506103e9611517565b348015610a25575f80fd5b506104ae610a34366004612c8d565b611553565b348015610a44575f80fd5b5061048160165481565b348015610a59575f80fd5b506104ae610a68366004612bf3565b611626565b348015610a78575f80fd5b50610481601a5481565b348015610a8d575f80fd5b50610481600a5481565b348015610aa2575f80fd5b506103e9610ab1366004612c8d565b6116c1565b606060038054610ac590612d37565b80601f0160208091040260200160405190810160405280929190818152602001828054610af190612d37565b8015610b3c5780601f10610b1357610100808354040283529160200191610b3c565b820191905f5260205f20905b815481529060010190602001808311610b1f57829003601f168201915b5050505050905090565b5f610b5233848461192e565b5060015b92915050565b6005546001600160a01b03163314610b8f5760405162461bcd60e51b8152600401610b8690612d6f565b60405180910390fd5b6007546040516001600160a01b03918216918316907f90b8024c4923d3873ff5b9fcb43d0360d4b9217fa41225d07ba379993552e743905f90a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b5f610bf7848484611a51565b6001600160a01b0384165f90815260016020908152604080832033845290915290205482811015610c7b5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610b86565b610c88853385840361192e565b506001949350505050565b335f8181526001602090815260408083206001600160a01b03871684529091528120549091610b52918590610cc9908690612db8565b61192e565b6005546001600160a01b03163314610cf85760405162461bcd60e51b8152600401610b8690612d6f565b6104b0831015610d665760405162461bcd60e51b815260206004820152603360248201527f63616e6e6f7420736574206275796261636b206d6f7265206f6674656e207468604482015272616e206576657279203130206d696e7574657360681b6064820152608401610b86565b60648211158015610d75575060015b610dda5760405162461bcd60e51b815260206004820152603060248201527f4d75737420736574206175746f204c50206275726e2070657263656e7420626560448201526f747765656e20302520616e642031302560801b6064820152608401610b86565b600d92909255600b55600c805460ff1916911515919091179055565b6005546001600160a01b03163314610e205760405162461bcd60e51b8152600401610b8690612d6f565b610e295f612308565b565b6005546001600160a01b03163314610e555760405162461bcd60e51b8152600401610b8690612d6f565b670de0b6b3a76400006103e8610e6a60025490565b610e75906005612dcb565b610e7f9190612de2565b610e899190612de2565b811015610ef35760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f74206368616e6765206d61785472616e73616374696f6e416d6f756044820152716e74206c6f776572207468616e20302e322560701b6064820152608401610b86565b610f0581670de0b6b3a7640000612dcb565b60085550565b6005546001600160a01b03163314610f355760405162461bcd60e51b8152600401610b8690612d6f565b600254600855600254600a55565b6005546001600160a01b03163314610f6d5760405162461bcd60e51b8152600401610b8690612d6f565b6001600160a01b03919091165f9081526020805260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610fc05760405162461bcd60e51b8152600401610b8690612d6f565b60158390556016829055601781905580610fda8385612db8565b610fe49190612db8565b6014819055602710156110395760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420333525206f72206c6573730000006044820152606401610b86565b505050565b6005546001600160a01b031633146110685760405162461bcd60e51b8152600401610b8690612d6f565b6011805462ffff0019166201010017905542600e55565b606060048054610ac590612d37565b6005546001600160a01b031633146110b85760405162461bcd60e51b8152600401610b8690612d6f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03160361115f5760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610b86565b6111698282612359565b5050565b335f9081526001602090815260408083206001600160a01b0386168452909152812054828110156111ee5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610b86565b6111fb338585840361192e565b5060019392505050565b5f610b52338484611a51565b6005546001600160a01b0316331461123b5760405162461bcd60e51b8152600401610b8690612d6f565b6006546040516001600160a01b03918216918316907f8616c7a330e3cf61290821331585511f1e2778171e2b005fb5ec60cfe874dc67905f90a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005545f906001600160a01b031633146112c35760405162461bcd60e51b8152600401610b8690612d6f565b6127106112cf60025490565b6112da906001612dcb565b6112e49190612de2565b8210156113515760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610b86565b6103e861135d60025490565b611368906005612dcb565b6113729190612de2565b8211156113de5760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610b86565b50600981905560015b919050565b6005546001600160a01b031633146114165760405162461bcd60e51b8152600401610b8690612d6f565b6001600160a01b0382165f818152601f6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b0316331461149e5760405162461bcd60e51b8152600401610b8690612d6f565b6019839055601a829055601b819055806114b88385612db8565b6114c29190612db8565b6018819055606310156110395760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420393925206f72206c6573730000006044820152606401610b86565b6005545f906001600160a01b031633146115435760405162461bcd60e51b8152600401610b8690612d6f565b506013805460ff19169055600190565b6005546001600160a01b0316331461157d5760405162461bcd60e51b8152600401610b8690612d6f565b670de0b6b3a76400006103e861159260025490565b61159d906005612dcb565b6115a79190612de2565b6115b19190612de2565b81101561160e5760405162461bcd60e51b815260206004820152602560248201527f43616e6e6f74206368616e6765206d617857616c6c6574206c6f776572207468604482015264616e20312560d81b6064820152608401610b86565b61162081670de0b6b3a7640000612dcb565b600a5550565b6005546001600160a01b031633146116505760405162461bcd60e51b8152600401610b8690612d6f565b6001600160a01b0381166116b55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b86565b6116be81612308565b50565b6005545f906001600160a01b031633146116ed5760405162461bcd60e51b8152600401610b8690612d6f565b600f546010546116fd9190612db8565b421161174b5760405162461bcd60e51b815260206004820181905260248201527f4d757374207761697420666f7220636f6f6c646f776e20746f2066696e6973686044820152606401610b86565b60648211156117af5760405162461bcd60e51b815260206004820152602a60248201527f4d6179206e6f74206e756b65206d6f7265207468616e20313025206f6620746f60448201526906b656e7320696e204c560b41b6064820152608401610b86565b426010556040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201525f9030906370a0823190602401602060405180830381865afa158015611817573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061183b9190612e01565b90505f6118546103e861184e84876123ac565b906123be565b90508015611889576118897f000000000000000000000000000000000000000000000000000000000000000061dead836123c9565b5f7f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663fff6cae96040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156118e5575f80fd5b505af11580156118f7573d5f803e3d5ffd5b50506040517f8462566617872a3fbab94534675218431ff9e204063ee3f4f43d965626a39abb92505f9150a1506001949350505050565b6001600160a01b0383166119905760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610b86565b6001600160a01b0382166119f15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610b86565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611a775760405162461bcd60e51b8152600401610b8690612e18565b6001600160a01b038216611a9d5760405162461bcd60e51b8152600401610b8690612e5d565b805f03611aaf5761103983835f6123c9565b60115460ff1615611f5e576005546001600160a01b03848116911614801590611ae657506005546001600160a01b03838116911614155b8015611afa57506001600160a01b03821615155b8015611b1157506001600160a01b03821661dead14155b8015611b275750600554600160a01b900460ff16155b15611f5e57601154610100900460ff16611bbd576001600160a01b0383165f908152601f602052604090205460ff1680611b7857506001600160a01b0382165f908152601f602052604090205460ff165b611bbd5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610b86565b60135460ff1615611d02576005546001600160a01b03838116911614801590611c1857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b8015611c5657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15611d0257325f908152601260205260409020544311611cf05760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610b86565b325f9081526012602052604090204390555b6001600160a01b0383165f9081526021602052604090205460ff168015611d4057506001600160a01b0382165f90815260208052604090205460ff16155b15611e2357600854811115611db55760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610b86565b600a546001600160a01b0383165f90815260208190526040902054611dda9083612db8565b1115611e1e5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610b86565b611f5e565b6001600160a01b0382165f9081526021602052604090205460ff168015611e6157506001600160a01b0383165f90815260208052604090205460ff16155b15611ed757600854811115611e1e5760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610b86565b6001600160a01b0382165f90815260208052604090205460ff16611f5e57600a546001600160a01b0383165f90815260208190526040902054611f1a9083612db8565b1115611f5e5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610b86565b305f9081526020819052604090205460095481108015908190611f89575060115462010000900460ff165b8015611f9f5750600554600160a01b900460ff16155b8015611fc357506001600160a01b0385165f9081526021602052604090205460ff16155b8015611fe757506001600160a01b0385165f908152601f602052604090205460ff16155b801561200b57506001600160a01b0384165f908152601f602052604090205460ff16155b15612039576005805460ff60a01b1916600160a01b17905561202b61251c565b6005805460ff60a01b191690555b600554600160a01b900460ff1615801561206a57506001600160a01b0384165f9081526021602052604090205460ff165b80156120785750600c5460ff165b80156120935750600d54600e5461208f9190612db8565b4210155b80156120b757506001600160a01b0385165f908152601f602052604090205460ff16155b156120c6576120c4612746565b505b6005546001600160a01b0386165f908152601f602052604090205460ff600160a01b90920482161591168061211257506001600160a01b0385165f908152601f602052604090205460ff165b1561211a57505f5b5f81156122f4576001600160a01b0386165f9081526021602052604090205460ff16801561214957505f601854115b156121fe57612168606461184e601854886123ac90919063ffffffff16565b9050601854601a548261217b9190612dcb565b6121859190612de2565b601d5f8282546121959190612db8565b9091555050601854601b546121aa9083612dcb565b6121b49190612de2565b601e5f8282546121c49190612db8565b90915550506018546019546121d99083612dcb565b6121e39190612de2565b601c5f8282546121f39190612db8565b909155506122d69050565b6001600160a01b0387165f9081526021602052604090205460ff16801561222657505f601454115b156122d657612245606461184e601454886123ac90919063ffffffff16565b9050601454601654826122589190612dcb565b6122629190612de2565b601d5f8282546122729190612db8565b90915550506014546017546122879083612dcb565b6122919190612de2565b601e5f8282546122a19190612db8565b90915550506014546015546122b69083612dcb565b6122c09190612de2565b601c5f8282546122d09190612db8565b90915550505b80156122e7576122e78730836123c9565b6122f18186612ea0565b94505b6122ff8787876123c9565b50505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382165f81815260216020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b5f6123b78284612dcb565b9392505050565b5f6123b78284612de2565b6001600160a01b0383166123ef5760405162461bcd60e51b8152600401610b8690612e18565b6001600160a01b0382166124155760405162461bcd60e51b8152600401610b8690612e5d565b6001600160a01b0383165f908152602081905260409020548181101561248c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610b86565b6001600160a01b038085165f908152602081905260408082208585039055918516815290812080548492906124c2908490612db8565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161250e91815260200190565b60405180910390a350505050565b305f9081526020819052604081205490505f601e54601c54601d546125419190612db8565b61254b9190612db8565b90505f821580612559575081155b1561256357505050565b600954612571906014612dcb565b83111561258957600954612586906014612dcb565b92505b5f600283601d548661259b9190612dcb565b6125a59190612de2565b6125af9190612de2565b90505f6125bc85836128cb565b9050476125c8826128d6565b5f6125d347836128cb565b90505f6125ef8761184e601c54856123ac90919063ffffffff16565b90505f61260b8861184e601e54866123ac90919063ffffffff16565b90505f816126198486612ea0565b6126239190612ea0565b5f601d819055601c819055601e8190556007546040519293506001600160a01b031691849181818185875af1925050503d805f811461267d576040519150601f19603f3d011682016040523d82523d5f602084013e612682565b606091505b5090985050861580159061269557505f81115b156126e8576126a48782612a8c565b601d54604080518881526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b039091169047905f81818185875af1925050503d805f8114612732576040519150601f19603f3d011682016040523d82523d5f602084013e612737565b606091505b50505050505050505050505050565b42600e556040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201525f90819030906370a0823190602401602060405180830381865afa1580156127b0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127d49190612e01565b90505f6127f26103e861184e600b54856123ac90919063ffffffff16565b90508015612827576128277f000000000000000000000000000000000000000000000000000000000000000061dead836123c9565b5f7f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663fff6cae96040518163ffffffff1660e01b81526004015f604051808303815f87803b158015612883575f80fd5b505af1158015612895573d5f803e3d5ffd5b50506040517f454c91ae84fcc766ddda0dcb289f26b3d0176efeacf4061fc219fa6ca8c3048d92505f9150a16001935050505090565b5f6123b78284612ea0565b6040805160028082526060820183525f9260208301908036833701905050905030815f8151811061290957612909612eb3565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612985573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129a99190612ec7565b816001815181106129bc576129bc612eb3565b60200260200101906001600160a01b031690816001600160a01b031681525050612a07307f00000000000000000000000000000000000000000000000000000000000000008461192e565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac94790612a5b9085905f90869030904290600401612ee2565b5f604051808303815f87803b158015612a72575f80fd5b505af1158015612a84573d5f803e3d5ffd5b505050505050565b612ab7307f00000000000000000000000000000000000000000000000000000000000000008461192e565b60405163f305d71960e01b8152306004820152602481018390525f60448201819052606482015261dead60848201524260a48201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f305d71990839060c40160606040518083038185885af1158015612b3e573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190612b639190612f51565b5050505050565b5f6020808352835180828501525f5b81811015612b9557858101830151858201604001528201612b79565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146116be575f80fd5b5f8060408385031215612bda575f80fd5b8235612be581612bb5565b946020939093013593505050565b5f60208284031215612c03575f80fd5b81356123b781612bb5565b5f805f60608486031215612c20575f80fd5b8335612c2b81612bb5565b92506020840135612c3b81612bb5565b929592945050506040919091013590565b803580151581146113e7575f80fd5b5f805f60608486031215612c6d575f80fd5b8335925060208401359150612c8460408501612c4c565b90509250925092565b5f60208284031215612c9d575f80fd5b5035919050565b5f8060408385031215612cb5575f80fd5b8235612cc081612bb5565b9150612cce60208401612c4c565b90509250929050565b5f805f60608486031215612ce9575f80fd5b505081359360208301359350604090920135919050565b5f8060408385031215612d11575f80fd5b8235612d1c81612bb5565b91506020830135612d2c81612bb5565b809150509250929050565b600181811c90821680612d4b57607f821691505b602082108103612d6957634e487b7160e01b5f52602260045260245ffd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610b5657610b56612da4565b8082028115828204841417610b5657610b56612da4565b5f82612dfc57634e487b7160e01b5f52601260045260245ffd5b500490565b5f60208284031215612e11575f80fd5b5051919050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b81810381811115610b5657610b56612da4565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215612ed7575f80fd5b81516123b781612bb5565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015612f305784516001600160a01b031683529383019391830191600101612f0b565b50506001600160a01b03969096166060850152505050608001529392505050565b5f805f60608486031215612f63575f80fd5b835192506020840151915060408401519050925092509256fea2646970667358221220a2750083b17f2390b613de90665a867605eec087445719adfd4a5d61d6586ffb64736f6c634300081400334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
    "runtime_bytecode": "608060405260043610610395575f3560e01c80638a8c523c116101de578063afa4f3b211610108578063e2f456051161009d578063f2fde38b1161006d578063f2fde38b14610a4e578063f637434214610a6d578063f8b45b0514610a82578063fe72b27a14610a97575f80fd5b8063e2f45605146109f1578063e884f26014610a06578063ea1644d514610a1a578063f11a24d314610a39575f80fd5b8063c876d0b9116100d8578063c876d0b91461096a578063c8c8ebe414610983578063d85ba06314610998578063dd62ed3e146109ad575f80fd5b8063afa4f3b2146108df578063b62496f5146108fe578063c02466681461092c578063c17b5b8c1461094b575f80fd5b80639ec22c0e1161017e578063a4c82a001161014e578063a4c82a001461086e578063a61ef01e14610883578063a9059cbb146108a1578063aacebbe3146108c0575f80fd5b80639ec22c0e146108105780639fccce3214610825578063a0d82dc51461083a578063a457c2d71461084f575f80fd5b806392136913116101b957806392136913146107b357806395d89b41146107c85780639a7a23d6146107dc5780639c3b4fdc146107fb575f80fd5b80638a8c523c146107635780638da5cb5b146107775780638ea5220f14610794575f80fd5b80632e82f1a0116102bf5780636a486a8e1161025f578063751039fc1161022f578063751039fc146106fc5780637571336a146107105780637bce5a041461072f5780638095d56414610744575f80fd5b80636a486a8e1461068057806370a0823114610695578063715018a6146106c957806374010ece146106dd575f80fd5b806349bd5a5e1161029a57806349bd5a5e146105de5780634a62bb65146106115780634fbee1931461062a5780636440f71914610661575f80fd5b80632e82f1a01461058b578063313ce567146105a457806339509351146105bf575f80fd5b8063199ffc721161033557806323b872dd1161030557806323b872dd146105235780632598cdb21461054257806327c8f835146105615780632c3e486c14610576575f80fd5b8063199ffc72146104c55780631a8145bb146104da5780631f3fed8f146104ef578063220efbd814610504575f80fd5b80631694505e116103705780631694505e1461042657806318160ddd146104715780631816467f1461048f578063184c16c5146104b0575f80fd5b806306fdde03146103a0578063095ea7b3146103ca57806310d5de53146103f9575f80fd5b3661039c57005b5f80fd5b3480156103ab575f80fd5b506103b4610ab6565b6040516103c19190612b6a565b60405180910390f35b3480156103d5575f80fd5b506103e96103e4366004612bc9565b610b46565b60405190151581526020016103c1565b348015610404575f80fd5b506103e9610413366004612bf3565b602080525f908152604090205460ff1681565b348015610431575f80fd5b506104597f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b0390911681526020016103c1565b34801561047c575f80fd5b506002545b6040519081526020016103c1565b34801561049a575f80fd5b506104ae6104a9366004612bf3565b610b5c565b005b3480156104bb575f80fd5b50610481600f5481565b3480156104d0575f80fd5b50610481600b5481565b3480156104e5575f80fd5b50610481601d5481565b3480156104fa575f80fd5b50610481601c5481565b34801561050f575f80fd5b506011546103e99062010000900460ff1681565b34801561052e575f80fd5b506103e961053d366004612c0e565b610beb565b34801561054d575f80fd5b50600654610459906001600160a01b031681565b34801561056c575f80fd5b5061045961dead81565b348015610581575f80fd5b50610481600d5481565b348015610596575f80fd5b50600c546103e99060ff1681565b3480156105af575f80fd5b50604051601281526020016103c1565b3480156105ca575f80fd5b506103e96105d9366004612bc9565b610c93565b3480156105e9575f80fd5b506104597f000000000000000000000000f82cf8e4225ebbea534c3ac06db0c1254160a11181565b34801561061c575f80fd5b506011546103e99060ff1681565b348015610635575f80fd5b506103e9610644366004612bf3565b6001600160a01b03165f908152601f602052604090205460ff1690565b34801561066c575f80fd5b506104ae61067b366004612c5b565b610cce565b34801561068b575f80fd5b5061048160185481565b3480156106a0575f80fd5b506104816106af366004612bf3565b6001600160a01b03165f9081526020819052604090205490565b3480156106d4575f80fd5b506104ae610df6565b3480156106e8575f80fd5b506104ae6106f7366004612c8d565b610e2b565b348015610707575f80fd5b506104ae610f0b565b34801561071b575f80fd5b506104ae61072a366004612ca4565b610f43565b34801561073a575f80fd5b5061048160155481565b34801561074f575f80fd5b506104ae61075e366004612cd7565b610f96565b34801561076e575f80fd5b506104ae61103e565b348015610782575f80fd5b506005546001600160a01b0316610459565b34801561079f575f80fd5b50600754610459906001600160a01b031681565b3480156107be575f80fd5b5061048160195481565b3480156107d3575f80fd5b506103b461107f565b3480156107e7575f80fd5b506104ae6107f6366004612ca4565b61108e565b348015610806575f80fd5b5061048160175481565b34801561081b575f80fd5b5061048160105481565b348015610830575f80fd5b50610481601e5481565b348015610845575f80fd5b50610481601b5481565b34801561085a575f80fd5b506103e9610869366004612bc9565b61116d565b348015610879575f80fd5b50610481600e5481565b34801561088e575f80fd5b506011546103e990610100900460ff1681565b3480156108ac575f80fd5b506103e96108bb366004612bc9565b611205565b3480156108cb575f80fd5b506104ae6108da366004612bf3565b611211565b3480156108ea575f80fd5b506103e96108f9366004612c8d565b611297565b348015610909575f80fd5b506103e9610918366004612bf3565b60216020525f908152604090205460ff1681565b348015610937575f80fd5b506104ae610946366004612ca4565b6113ec565b348015610956575f80fd5b506104ae610965366004612cd7565b611474565b348015610975575f80fd5b506013546103e99060ff1681565b34801561098e575f80fd5b5061048160085481565b3480156109a3575f80fd5b5061048160145481565b3480156109b8575f80fd5b506104816109c7366004612d00565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b3480156109fc575f80fd5b5061048160095481565b348015610a11575f80fd5b506103e9611517565b348015610a25575f80fd5b506104ae610a34366004612c8d565b611553565b348015610a44575f80fd5b5061048160165481565b348015610a59575f80fd5b506104ae610a68366004612bf3565b611626565b348015610a78575f80fd5b50610481601a5481565b348015610a8d575f80fd5b50610481600a5481565b348015610aa2575f80fd5b506103e9610ab1366004612c8d565b6116c1565b606060038054610ac590612d37565b80601f0160208091040260200160405190810160405280929190818152602001828054610af190612d37565b8015610b3c5780601f10610b1357610100808354040283529160200191610b3c565b820191905f5260205f20905b815481529060010190602001808311610b1f57829003601f168201915b5050505050905090565b5f610b5233848461192e565b5060015b92915050565b6005546001600160a01b03163314610b8f5760405162461bcd60e51b8152600401610b8690612d6f565b60405180910390fd5b6007546040516001600160a01b03918216918316907f90b8024c4923d3873ff5b9fcb43d0360d4b9217fa41225d07ba379993552e743905f90a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b5f610bf7848484611a51565b6001600160a01b0384165f90815260016020908152604080832033845290915290205482811015610c7b5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610b86565b610c88853385840361192e565b506001949350505050565b335f8181526001602090815260408083206001600160a01b03871684529091528120549091610b52918590610cc9908690612db8565b61192e565b6005546001600160a01b03163314610cf85760405162461bcd60e51b8152600401610b8690612d6f565b6104b0831015610d665760405162461bcd60e51b815260206004820152603360248201527f63616e6e6f7420736574206275796261636b206d6f7265206f6674656e207468604482015272616e206576657279203130206d696e7574657360681b6064820152608401610b86565b60648211158015610d75575060015b610dda5760405162461bcd60e51b815260206004820152603060248201527f4d75737420736574206175746f204c50206275726e2070657263656e7420626560448201526f747765656e20302520616e642031302560801b6064820152608401610b86565b600d92909255600b55600c805460ff1916911515919091179055565b6005546001600160a01b03163314610e205760405162461bcd60e51b8152600401610b8690612d6f565b610e295f612308565b565b6005546001600160a01b03163314610e555760405162461bcd60e51b8152600401610b8690612d6f565b670de0b6b3a76400006103e8610e6a60025490565b610e75906005612dcb565b610e7f9190612de2565b610e899190612de2565b811015610ef35760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f74206368616e6765206d61785472616e73616374696f6e416d6f756044820152716e74206c6f776572207468616e20302e322560701b6064820152608401610b86565b610f0581670de0b6b3a7640000612dcb565b60085550565b6005546001600160a01b03163314610f355760405162461bcd60e51b8152600401610b8690612d6f565b600254600855600254600a55565b6005546001600160a01b03163314610f6d5760405162461bcd60e51b8152600401610b8690612d6f565b6001600160a01b03919091165f9081526020805260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610fc05760405162461bcd60e51b8152600401610b8690612d6f565b60158390556016829055601781905580610fda8385612db8565b610fe49190612db8565b6014819055602710156110395760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420333525206f72206c6573730000006044820152606401610b86565b505050565b6005546001600160a01b031633146110685760405162461bcd60e51b8152600401610b8690612d6f565b6011805462ffff0019166201010017905542600e55565b606060048054610ac590612d37565b6005546001600160a01b031633146110b85760405162461bcd60e51b8152600401610b8690612d6f565b7f000000000000000000000000f82cf8e4225ebbea534c3ac06db0c1254160a1116001600160a01b0316826001600160a01b03160361115f5760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610b86565b6111698282612359565b5050565b335f9081526001602090815260408083206001600160a01b0386168452909152812054828110156111ee5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610b86565b6111fb338585840361192e565b5060019392505050565b5f610b52338484611a51565b6005546001600160a01b0316331461123b5760405162461bcd60e51b8152600401610b8690612d6f565b6006546040516001600160a01b03918216918316907f8616c7a330e3cf61290821331585511f1e2778171e2b005fb5ec60cfe874dc67905f90a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005545f906001600160a01b031633146112c35760405162461bcd60e51b8152600401610b8690612d6f565b6127106112cf60025490565b6112da906001612dcb565b6112e49190612de2565b8210156113515760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610b86565b6103e861135d60025490565b611368906005612dcb565b6113729190612de2565b8211156113de5760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610b86565b50600981905560015b919050565b6005546001600160a01b031633146114165760405162461bcd60e51b8152600401610b8690612d6f565b6001600160a01b0382165f818152601f6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b0316331461149e5760405162461bcd60e51b8152600401610b8690612d6f565b6019839055601a829055601b819055806114b88385612db8565b6114c29190612db8565b6018819055606310156110395760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420393925206f72206c6573730000006044820152606401610b86565b6005545f906001600160a01b031633146115435760405162461bcd60e51b8152600401610b8690612d6f565b506013805460ff19169055600190565b6005546001600160a01b0316331461157d5760405162461bcd60e51b8152600401610b8690612d6f565b670de0b6b3a76400006103e861159260025490565b61159d906005612dcb565b6115a79190612de2565b6115b19190612de2565b81101561160e5760405162461bcd60e51b815260206004820152602560248201527f43616e6e6f74206368616e6765206d617857616c6c6574206c6f776572207468604482015264616e20312560d81b6064820152608401610b86565b61162081670de0b6b3a7640000612dcb565b600a5550565b6005546001600160a01b031633146116505760405162461bcd60e51b8152600401610b8690612d6f565b6001600160a01b0381166116b55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b86565b6116be81612308565b50565b6005545f906001600160a01b031633146116ed5760405162461bcd60e51b8152600401610b8690612d6f565b600f546010546116fd9190612db8565b421161174b5760405162461bcd60e51b815260206004820181905260248201527f4d757374207761697420666f7220636f6f6c646f776e20746f2066696e6973686044820152606401610b86565b60648211156117af5760405162461bcd60e51b815260206004820152602a60248201527f4d6179206e6f74206e756b65206d6f7265207468616e20313025206f6620746f60448201526906b656e7320696e204c560b41b6064820152608401610b86565b426010556040516370a0823160e01b81526001600160a01b037f000000000000000000000000f82cf8e4225ebbea534c3ac06db0c1254160a1111660048201525f9030906370a0823190602401602060405180830381865afa158015611817573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061183b9190612e01565b90505f6118546103e861184e84876123ac565b906123be565b90508015611889576118897f000000000000000000000000f82cf8e4225ebbea534c3ac06db0c1254160a11161dead836123c9565b5f7f000000000000000000000000f82cf8e4225ebbea534c3ac06db0c1254160a1119050806001600160a01b031663fff6cae96040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156118e5575f80fd5b505af11580156118f7573d5f803e3d5ffd5b50506040517f8462566617872a3fbab94534675218431ff9e204063ee3f4f43d965626a39abb92505f9150a1506001949350505050565b6001600160a01b0383166119905760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610b86565b6001600160a01b0382166119f15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610b86565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611a775760405162461bcd60e51b8152600401610b8690612e18565b6001600160a01b038216611a9d5760405162461bcd60e51b8152600401610b8690612e5d565b805f03611aaf5761103983835f6123c9565b60115460ff1615611f5e576005546001600160a01b03848116911614801590611ae657506005546001600160a01b03838116911614155b8015611afa57506001600160a01b03821615155b8015611b1157506001600160a01b03821661dead14155b8015611b275750600554600160a01b900460ff16155b15611f5e57601154610100900460ff16611bbd576001600160a01b0383165f908152601f602052604090205460ff1680611b7857506001600160a01b0382165f908152601f602052604090205460ff165b611bbd5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610b86565b60135460ff1615611d02576005546001600160a01b03838116911614801590611c1857507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b0316826001600160a01b031614155b8015611c5657507f000000000000000000000000f82cf8e4225ebbea534c3ac06db0c1254160a1116001600160a01b0316826001600160a01b031614155b15611d0257325f908152601260205260409020544311611cf05760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610b86565b325f9081526012602052604090204390555b6001600160a01b0383165f9081526021602052604090205460ff168015611d4057506001600160a01b0382165f90815260208052604090205460ff16155b15611e2357600854811115611db55760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610b86565b600a546001600160a01b0383165f90815260208190526040902054611dda9083612db8565b1115611e1e5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610b86565b611f5e565b6001600160a01b0382165f9081526021602052604090205460ff168015611e6157506001600160a01b0383165f90815260208052604090205460ff16155b15611ed757600854811115611e1e5760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610b86565b6001600160a01b0382165f90815260208052604090205460ff16611f5e57600a546001600160a01b0383165f90815260208190526040902054611f1a9083612db8565b1115611f5e5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610b86565b305f9081526020819052604090205460095481108015908190611f89575060115462010000900460ff165b8015611f9f5750600554600160a01b900460ff16155b8015611fc357506001600160a01b0385165f9081526021602052604090205460ff16155b8015611fe757506001600160a01b0385165f908152601f602052604090205460ff16155b801561200b57506001600160a01b0384165f908152601f602052604090205460ff16155b15612039576005805460ff60a01b1916600160a01b17905561202b61251c565b6005805460ff60a01b191690555b600554600160a01b900460ff1615801561206a57506001600160a01b0384165f9081526021602052604090205460ff165b80156120785750600c5460ff165b80156120935750600d54600e5461208f9190612db8565b4210155b80156120b757506001600160a01b0385165f908152601f602052604090205460ff16155b156120c6576120c4612746565b505b6005546001600160a01b0386165f908152601f602052604090205460ff600160a01b90920482161591168061211257506001600160a01b0385165f908152601f602052604090205460ff165b1561211a57505f5b5f81156122f4576001600160a01b0386165f9081526021602052604090205460ff16801561214957505f601854115b156121fe57612168606461184e601854886123ac90919063ffffffff16565b9050601854601a548261217b9190612dcb565b6121859190612de2565b601d5f8282546121959190612db8565b9091555050601854601b546121aa9083612dcb565b6121b49190612de2565b601e5f8282546121c49190612db8565b90915550506018546019546121d99083612dcb565b6121e39190612de2565b601c5f8282546121f39190612db8565b909155506122d69050565b6001600160a01b0387165f9081526021602052604090205460ff16801561222657505f601454115b156122d657612245606461184e601454886123ac90919063ffffffff16565b9050601454601654826122589190612dcb565b6122629190612de2565b601d5f8282546122729190612db8565b90915550506014546017546122879083612dcb565b6122919190612de2565b601e5f8282546122a19190612db8565b90915550506014546015546122b69083612dcb565b6122c09190612de2565b601c5f8282546122d09190612db8565b90915550505b80156122e7576122e78730836123c9565b6122f18186612ea0565b94505b6122ff8787876123c9565b50505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382165f81815260216020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b5f6123b78284612dcb565b9392505050565b5f6123b78284612de2565b6001600160a01b0383166123ef5760405162461bcd60e51b8152600401610b8690612e18565b6001600160a01b0382166124155760405162461bcd60e51b8152600401610b8690612e5d565b6001600160a01b0383165f908152602081905260409020548181101561248c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610b86565b6001600160a01b038085165f908152602081905260408082208585039055918516815290812080548492906124c2908490612db8565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161250e91815260200190565b60405180910390a350505050565b305f9081526020819052604081205490505f601e54601c54601d546125419190612db8565b61254b9190612db8565b90505f821580612559575081155b1561256357505050565b600954612571906014612dcb565b83111561258957600954612586906014612dcb565b92505b5f600283601d548661259b9190612dcb565b6125a59190612de2565b6125af9190612de2565b90505f6125bc85836128cb565b9050476125c8826128d6565b5f6125d347836128cb565b90505f6125ef8761184e601c54856123ac90919063ffffffff16565b90505f61260b8861184e601e54866123ac90919063ffffffff16565b90505f816126198486612ea0565b6126239190612ea0565b5f601d819055601c819055601e8190556007546040519293506001600160a01b031691849181818185875af1925050503d805f811461267d576040519150601f19603f3d011682016040523d82523d5f602084013e612682565b606091505b5090985050861580159061269557505f81115b156126e8576126a48782612a8c565b601d54604080518881526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b039091169047905f81818185875af1925050503d805f8114612732576040519150601f19603f3d011682016040523d82523d5f602084013e612737565b606091505b50505050505050505050505050565b42600e556040516370a0823160e01b81526001600160a01b037f000000000000000000000000f82cf8e4225ebbea534c3ac06db0c1254160a1111660048201525f90819030906370a0823190602401602060405180830381865afa1580156127b0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127d49190612e01565b90505f6127f26103e861184e600b54856123ac90919063ffffffff16565b90508015612827576128277f000000000000000000000000f82cf8e4225ebbea534c3ac06db0c1254160a11161dead836123c9565b5f7f000000000000000000000000f82cf8e4225ebbea534c3ac06db0c1254160a1119050806001600160a01b031663fff6cae96040518163ffffffff1660e01b81526004015f604051808303815f87803b158015612883575f80fd5b505af1158015612895573d5f803e3d5ffd5b50506040517f454c91ae84fcc766ddda0dcb289f26b3d0176efeacf4061fc219fa6ca8c3048d92505f9150a16001935050505090565b5f6123b78284612ea0565b6040805160028082526060820183525f9260208301908036833701905050905030815f8151811061290957612909612eb3565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612985573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129a99190612ec7565b816001815181106129bc576129bc612eb3565b60200260200101906001600160a01b031690816001600160a01b031681525050612a07307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d8461192e565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac94790612a5b9085905f90869030904290600401612ee2565b5f604051808303815f87803b158015612a72575f80fd5b505af1158015612a84573d5f803e3d5ffd5b505050505050565b612ab7307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d8461192e565b60405163f305d71960e01b8152306004820152602481018390525f60448201819052606482015261dead60848201524260a48201527f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b03169063f305d71990839060c40160606040518083038185885af1158015612b3e573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190612b639190612f51565b5050505050565b5f6020808352835180828501525f5b81811015612b9557858101830151858201604001528201612b79565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146116be575f80fd5b5f8060408385031215612bda575f80fd5b8235612be581612bb5565b946020939093013593505050565b5f60208284031215612c03575f80fd5b81356123b781612bb5565b5f805f60608486031215612c20575f80fd5b8335612c2b81612bb5565b92506020840135612c3b81612bb5565b929592945050506040919091013590565b803580151581146113e7575f80fd5b5f805f60608486031215612c6d575f80fd5b8335925060208401359150612c8460408501612c4c565b90509250925092565b5f60208284031215612c9d575f80fd5b5035919050565b5f8060408385031215612cb5575f80fd5b8235612cc081612bb5565b9150612cce60208401612c4c565b90509250929050565b5f805f60608486031215612ce9575f80fd5b505081359360208301359350604090920135919050565b5f8060408385031215612d11575f80fd5b8235612d1c81612bb5565b91506020830135612d2c81612bb5565b809150509250929050565b600181811c90821680612d4b57607f821691505b602082108103612d6957634e487b7160e01b5f52602260045260245ffd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610b5657610b56612da4565b8082028115828204841417610b5657610b56612da4565b5f82612dfc57634e487b7160e01b5f52601260045260245ffd5b500490565b5f60208284031215612e11575f80fd5b5051919050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b81810381811115610b5657610b56612da4565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215612ed7575f80fd5b81516123b781612bb5565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015612f305784516001600160a01b031683529383019391830191600101612f0b565b50506001600160a01b03969096166060850152505050608001529392505050565b5f805f60608486031215612f63575f80fd5b835192506020840151915060408401519050925092509256fea2646970667358221220a2750083b17f2390b613de90665a867605eec087445719adfd4a5d61d6586ffb64736f6c63430008140033",
    "contract_name": "Neko",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AutoNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ManualNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"devWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"isbot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MarketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastManualLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"manualBurnLiquidityPairTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForLPBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swappingStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeActivate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frequencyInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_Enabled\",\"type\":\"bool\"}],\"name\":\"updateAutoLPBurnSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/*\r\n\r\n                  ;,_            ,\r\n                 _uP~\"b          d\"u,\r\n                dP'   \"b       ,d\"  \"o\r\n               d\"    , `b     d\"'    \"b\r\n              l] [    \" `l,  d\"       lb\r\n              Ol ?     \"  \"b`\"=uoqo,_  \"l\r\n            ,dBb \"b        \"b,    `\"~~TObup,_\r\n          ,d\" (db.`\"         \"\"     \"tbc,_ `~\"Yuu,_\r\n        .d\" l`T'  '=                      ~     `\"\"Yu,\r\n      ,dO` gP,                           `u,   b,_  \"b7\r\n     d?' ,d\" l,                           `\"b,_ `~b  \"1\r\n   ,8i' dl   `l                 ,ggQOV\",dbgq,._\"  `l  lb\r\n  .df' (O,    \"             ,ggQY\"~  , @@@@@d\"bd~  `b \"1\r\n .df'   `\"           -=@QgpOY\"\"     (b  @@@@P db    `Lp\"b,\r\n.d(                  _               \"ko \"=d_,Q`  ,_  \"  \"b,\r\nQl         .         `\"qo,._          \"tQo,_`\"\"bo ;tb,    `\"b,\r\nqQ         |L           ~\"QQQgggc,_.,dObc,opooO  `\"~~\";.   __,7,\r\nqp         t\\io,_           `~\"TOOggQV\"\"\"\"        _,dg,_ =PIQHib.\r\n`qp        `Q[\"tQQQo,_                          ,pl{QOP\"'   7AFR`\r\n  `         `tb  '\"\"tQQQg,_             p\" \"b   `       .;-.`Vl'\r\n             \"Yb      `\"tQOOo,__    _,edb    ` .__   /`/'|  |b;=;.__\r\n                           `\"tQQQOOOOP\"\"`\"\\QV;qQObob\"`-._`\\_~~-._\r\n                                \"\"\"\"    ._        /   | |oP\"\\_   ~\\ ~\\_~\\\r\n                                        `~\"\\ic,qggddOOP\"|  |  ~\\   `\\~-._\r\n                                          ,qP`\"\"\"|\"   | `\\ `;   `\\   `\\\r\n                               _        _,p\"     |    |   `\\`;    |    |\r\n          NEKO                   \"boo,._dP\"       `\\_  `\\    `\\|   `\\   ;\r\n                                 `\"7tY~'            `\\  `\\    `|_   |\r\n                                                      `~\\  |\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.10 >=0.8.0 <0.9.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n  \r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n    \r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n   \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n   \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n   \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n   \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n   \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n  \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n  \r\n    function name() external view returns (string memory);\r\n\r\n    \r\n    function symbol() external view returns (string memory);\r\n\r\n   \r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    \r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    \r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n   \r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n  \r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n  \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n  \r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0x000000000000000000000000000000000000dEaD), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n \r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract Neko is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    address public constant deadAddress = address(0xdead);\r\n\r\n    bool private swapping;\r\n\r\n    address public MarketingWallet;\r\n    address public devWallet;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWallet;\r\n\r\n    uint256 public percentForLPBurn = 0; // 25 = .25%\r\n    bool public lpBurnEnabled = false;\r\n    uint256 public lpBurnFrequency = 9000 seconds;\r\n    uint256 public lastLpBurnTime;\r\n\r\n    uint256 public manualBurnFrequency = 60 minutes;\r\n    uint256 public lastManualLpBurnTime;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradeActivate = false;\r\n    bool public swappingStart = false;\r\n\r\n\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n    bool public transferDelayEnabled = false;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyMarketingFee;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyDevFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 public sellMarketingFee;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public sellDevFee;\r\n\r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForDev;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\r\n\r\n\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event MarketingWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event devWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    event AutoNukeLP();\r\n\r\n    event ManualNukeLP();\r\n\r\n    constructor() ERC20(\"Neko\", \"NEKO\") {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n\r\n        uint256 _buyMarketingFee = 20;\r\n        uint256 _buyLiquidityFee = 0;\r\n        uint256 _buydevfee = 0;\r\n\r\n        uint256 _sellMarketingFee = 30;  \r\n        uint256 _sellLiquidityFee = 0;\r\n        uint256 _selldevfee = 0;\r\n\r\n        uint256 totalSupply = 100_000_000_000 * 1e18;\r\n\r\n        maxTransactionAmount =  400_000_000 * 1e18; // 0.3% from total supply maxTransactionAmountTxn\r\n        maxWallet = 400_000_000 * 1e18; // 1.5% from total supply maxWallet\r\n        swapTokensAtAmount = (totalSupply * 5) / 10000; // 0.05% swap wallet\r\n\r\n        buyMarketingFee = _buyMarketingFee;\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        buyDevFee = _buydevfee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\r\n\r\n        sellMarketingFee = _sellMarketingFee;\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellDevFee = _selldevfee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\r\n\r\n        devWallet = address(0x28C046ef1b8e2A494972A7D691019256aE9E2B22); // set as dev wallet\r\n        MarketingWallet = address(0x28C046ef1b8e2A494972A7D691019256aE9E2B22); // set as mkt wallet\r\n        \r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n       \r\n\r\n        excludeFromMaxTransaction(owner(), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n        \r\n\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // once enabled, can never be turned off\r\n    function enableTrading() external onlyOwner {\r\n        swappingStart = true;\r\n        tradeActivate = true;\r\n        lastLpBurnTime = block.timestamp;\r\n    }\r\n\r\n    // disable Transfer delay - cannot be reenabled\r\n    function disableTransferDelay() external onlyOwner returns (bool) {\r\n        transferDelayEnabled = false;\r\n        return true;\r\n    }\r\n\r\n    // change the minimum amount of tokens to sell from fees\r\n    function setSwapTokensAtAmount(uint256 newAmount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            newAmount >= (totalSupply() * 1) / 10000,\r\n            \"Swap amount cannot be lower than 0.001% total supply.\"\r\n        );\r\n        require(\r\n            newAmount <= (totalSupply() * 5) / 1000,\r\n            \"Swap amount cannot be higher than 0.5% total supply.\"\r\n        );\r\n        swapTokensAtAmount = newAmount;\r\n        return true;\r\n    }\r\n\r\n    function setMaxTxnAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot change maxTransactionAmount lower than 0.2%\"\r\n        );\r\n        maxTransactionAmount = newNum * (10**18);\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot change maxWallet lower than 1%\"\r\n        );\r\n        maxWallet = newNum * (10**18);\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        maxTransactionAmount = totalSupply();\r\n        maxWallet = totalSupply();\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        buyMarketingFee = _marketingFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyDevFee = _devFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\r\n        require(buyTotalFees <= 39, \"Must keep fees at 35% or less\");\r\n    }\r\n\r\n    function updateSellFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        sellMarketingFee = _marketingFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellDevFee = _devFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\r\n        require(sellTotalFees <= 99, \"Must keep fees at 99% or less\");\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateMarketingWallet(address newMarketingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit MarketingWalletUpdated(newMarketingWallet, MarketingWallet);\r\n        MarketingWallet = newMarketingWallet;\r\n    }\r\n\r\n    function updateDevWallet(address newWallet) external onlyOwner {\r\n        emit devWalletUpdated(newWallet, devWallet);\r\n        devWallet = newWallet;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    event isbot(address indexed sniper);\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ) {\r\n                if (!tradeActivate) {\r\n                    require(\r\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\r\n                        \"Trading is not active.\"\r\n                    );\r\n                }\r\n\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\r\n                if (transferDelayEnabled) {\r\n                    if (\r\n                        to != owner() &&\r\n                        to != address(uniswapV2Router) &&\r\n                        to != address(uniswapV2Pair)\r\n                    ) {\r\n                        require(\r\n                            _holderLastTransferTimestamp[tx.origin] <\r\n                                block.number,\r\n                            \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                        );\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                    }\r\n                }\r\n\r\n                //when buy\r\n                if (\r\n                    automatedMarketMakerPairs[from] &&\r\n                    !_isExcludedMaxTransactionAmount[to]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Buy transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n                //when sell\r\n                else if (\r\n                    automatedMarketMakerPairs[to] &&\r\n                    !_isExcludedMaxTransactionAmount[from]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Sell transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swappingStart &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        if (\r\n            !swapping &&\r\n            automatedMarketMakerPairs[to] &&\r\n            lpBurnEnabled &&\r\n            block.timestamp >= lastLpBurnTime + lpBurnFrequency &&\r\n            !_isExcludedFromFees[from]\r\n        ) {\r\n            autoBurnLiquidityPairTokens();\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if (takeFee) {\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\r\n                fees = amount.mul(sellTotalFees).div(100);\r\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\r\n                tokensForDev += (fees * sellDevFee) / sellTotalFees;\r\n                tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = amount.mul(buyTotalFees).div(100);\r\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\r\n                tokensForDev += (fees * buyDevFee) / buyTotalFees;\r\n                tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            deadAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity +\r\n            tokensForMarketing +\r\n            tokensForDev;\r\n        bool success;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapTokensAtAmount * 20) {\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /\r\n            totalTokensToSwap /\r\n            2;\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(\r\n            totalTokensToSwap\r\n        );\r\n        uint256 ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap);\r\n\r\n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForDev;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n        tokensForDev = 0;\r\n\r\n        (success, ) = address(devWallet).call{value: ethForDev}(\"\");\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(\r\n                amountToSwapForETH,\r\n                ethForLiquidity,\r\n                tokensForLiquidity\r\n            );\r\n        }\r\n\r\n        (success, ) = address(MarketingWallet).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n\r\n    function updateAutoLPBurnSettings(\r\n        uint256 _frequencyInSeconds,\r\n        uint256 _percent,\r\n        bool _Enabled\r\n    ) external onlyOwner {\r\n        require(\r\n            _frequencyInSeconds >= 1200,\r\n            \"cannot set buyback more often than every 10 minutes\"\r\n        );\r\n        require(\r\n            _percent <= 100 && _percent >= 0,\r\n            \"Must set auto LP burn percent between 0% and 10%\"\r\n        );\r\n        lpBurnFrequency = _frequencyInSeconds;\r\n        percentForLPBurn = _percent;\r\n        lpBurnEnabled = _Enabled;\r\n    }\r\n\r\n    function autoBurnLiquidityPairTokens() internal returns (bool) {\r\n        lastLpBurnTime = block.timestamp;\r\n\r\n        // get balance of liquidity pair\r\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\r\n\r\n        // calculate amount to burn\r\n        uint256 amountToBurn = liquidityPairBalance.mul(percentForLPBurn).div(\r\n            1000\r\n        );\r\n\r\n        // pull tokens from pancakePair liquidity and move to dead address permanently\r\n        if (amountToBurn > 0) {\r\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\r\n        }\r\n\r\n        //sync price since this is not in a swap transaction!\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        pair.sync();\r\n        emit AutoNukeLP();\r\n        return true;\r\n    }\r\n\r\n    function manualBurnLiquidityPairTokens(uint256 percent)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            block.timestamp > lastManualLpBurnTime + manualBurnFrequency,\r\n            \"Must wait for cooldown to finish\"\r\n        );\r\n        require(percent <= 100, \"May not nuke more than 10% of tokens in LP\");\r\n        lastManualLpBurnTime = block.timestamp;\r\n\r\n        // get balance of liquidity pair\r\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\r\n\r\n        // calculate amount to burn\r\n        uint256 amountToBurn = liquidityPairBalance.mul(percent).div(1000);\r\n\r\n        // pull tokens from pancakePair liquidity and move to dead address permanently\r\n        if (amountToBurn > 0) {\r\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\r\n        }\r\n\r\n        //sync price since this is not in a swap transaction!\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        pair.sync();\r\n        emit ManualNukeLP();\r\n        return true;\r\n    }\r\n}",
    "etherscan_verified": true
}