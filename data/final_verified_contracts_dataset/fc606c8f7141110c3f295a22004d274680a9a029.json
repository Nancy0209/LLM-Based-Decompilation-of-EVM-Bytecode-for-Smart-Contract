{
    "address": "0xfc606C8F7141110c3f295a22004D274680A9A029",
    "tx_hash": "21b5b1b55f1e6d5d420c8eb9ac62f3d88298ac20ac00b04799d3a31ed63032a9",
    "block_number": 18002905,
    "timestamp": 1693101899,
    "gas_used_in_creation": 815806,
    "creation_bytecode": "608060405234801561001057600080fd5b50604051610d60380380610d6083398101604081905261002f9161009b565b6001600081905580546001600160a01b039485166001600160a01b03199091161790556003805460029290925560ff199290931661010002919091166001600160a81b03199091161790556100d7565b80516001600160a01b038116811461009657600080fd5b919050565b6000806000606084860312156100b057600080fd5b6100b98461007f565b92506100c76020850161007f565b9150604084015190509250925092565b610c7a806100e66000396000f3fe6080604052600436106100e85760003560e01c80638da5cb5b1161008a578063bc58d4cb11610059578063bc58d4cb14610278578063bc6e6604146102a2578063c33930ac146102b8578063fe10d774146102ea57600080fd5b80638da5cb5b146101ca578063a6f9dae114610202578063ae124d3314610222578063b0b3322e1461024257600080fd5b806315d6dae9116100c657806315d6dae91461014f578063247ce85b1461018257806325e16063146101955780638d8f2adb146101b557600080fd5b806303f891bd146100ed578063096ff3f71461010f57806310be8f341461012f575b600080fd5b3480156100f957600080fd5b5061010d610108366004610ae7565b610353565b005b34801561011b57600080fd5b5061010d61012a366004610b0e565b61038b565b34801561013b57600080fd5b5061010d61014a366004610b47565b6103c8565b34801561015b57600080fd5b5061016f61016a366004610ae7565b6104b7565b6040519081526020015b60405180910390f35b61010d610190366004610b73565b6104dc565b3480156101a157600080fd5b5061010d6101b0366004610b73565b61068d565b3480156101c157600080fd5b5061010d610758565b3480156101d657600080fd5b506001546101ea906001600160a01b031681565b6040516001600160a01b039091168152602001610179565b34801561020e57600080fd5b5061010d61021d366004610b73565b6109c8565b34801561022e57600080fd5b5061016f61023d366004610ae7565b610a14565b34801561024e57600080fd5b5061016f61025d366004610b73565b6001600160a01b031660009081526006602052604090205490565b34801561028457600080fd5b506003546102929060ff1681565b6040519015158152602001610179565b3480156102ae57600080fd5b5061016f60025481565b3480156102c457600080fd5b506102cd610a2f565b604080519315158452602084019290925290820152606001610179565b3480156102f657600080fd5b5061032f610305366004610b73565b6004602052600090815260409020805460018201546002909201549091906001600160a01b031683565b6040805193845260208401929092526001600160a01b031690820152606001610179565b6001546001600160a01b031633146103865760405162461bcd60e51b815260040161037d90610b90565b60405180910390fd5b600255565b6001546001600160a01b031633146103b55760405162461bcd60e51b815260040161037d90610b90565b6003805460ff1916911515919091179055565b6001546001600160a01b031633146103f25760405162461bcd60e51b815260040161037d90610b90565b60035460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490526101009092049091169063a9059cbb906044016020604051808303816000875af115801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190610bc5565b6104b35760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604482015260640161037d565b5050565b6000816000036104c957506000919050565b6002546104d69083610bf8565b92915050565b6104e4610a8e565b60035460ff166104f357600080fd5b67016345785d8a00003410156105415760405162461bcd60e51b815260206004820152601360248201527209ad2dc40c4dedcc840d2e640605c6240cae8d606b1b604482015260640161037d565b336001600160a01b038216036105905760405162461bcd60e51b815260206004820152601460248201527321b0b73737ba103932b332b9103a379039b2b63360611b604482015260640161037d565b33600090815260046020908152604080832081516060810183528154815260018201549381018490526002909101546001600160a01b0316918101919091529103610649576000604051806060016040528034815260200142610e106105f69190610c0f565b81526001600160a01b0385811660209283015233600090815260048352604090819020845181559284015160018401559290920151600290910180546001600160a01b031916919092161790555061067f565b348160000181815161065b9190610c0f565b90525061066a42610e10610c0f565b60208201526001600160a01b03821660408201525b5061068a6001600055565b50565b6001546001600160a01b031633146106b75760405162461bcd60e51b815260040161037d90610b90565b600080826001600160a01b03164760405160006040518083038185875af1925050503d8060008114610705576040519150601f19603f3d011682016040523d82523d6000602084013e61070a565b606091505b5091509150816107535760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640161037d565b505050565b610760610a8e565b60035460ff1661076f57600080fd5b336000908152600460205260409020546107cb5760405162461bcd60e51b815260206004820152601760248201527f6d757374206861766520626f6e64656420616d6f756e74000000000000000000604482015260640161037d565b33600090815260046020526040902060010154421161082c5760405162461bcd60e51b815260206004820152601860248201527f6d7573742062652061626c6520746f2077697468647261770000000000000000604482015260640161037d565b33600090815260046020526040812054610845906104b7565b336000908152600460205260409020600201549091506001600160a01b03161561093157600061087482610a14565b6003543360009081526004602081905260409182902060020154915163a9059cbb60e01b81526001600160a01b039283169181019190915260248101849052929350610100909104169063a9059cbb906044016020604051808303816000875af11580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a9190610bc5565b50336000908152600660205260408120805483929061092a908490610c0f565b9091555050505b60035460405163a9059cbb60e01b8152336004820152602481018390526101009091046001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa9190610bc5565b5050336000908152600460205260408120556109c66001600055565b565b6001546001600160a01b031633146109f25760405162461bcd60e51b815260040161037d90610b90565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000612710610a25836101f4610bf8565b6104d69190610c22565b3360009081526004602090815260408083208151606081018352815480825260018301549482018590526002909201546001600160a01b03169281019290925283928392918115159190610a82906104b7565b93509350935050909192565b600260005403610ae05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161037d565b6002600055565b600060208284031215610af957600080fd5b5035919050565b801515811461068a57600080fd5b600060208284031215610b2057600080fd5b8135610b2b81610b00565b9392505050565b6001600160a01b038116811461068a57600080fd5b60008060408385031215610b5a57600080fd5b8235610b6581610b32565b946020939093013593505050565b600060208284031215610b8557600080fd5b8135610b2b81610b32565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610bd757600080fd5b8151610b2b81610b00565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104d6576104d6610be2565b808201808211156104d6576104d6610be2565b600082610c3f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c3a622f22a75b583775edd4846e809214a70330eecdb763ff44396e3b5743e7b64736f6c63430008130033000000000000000000000000bf417f03b6b563cf5bbb3469010ca2301e707d1400000000000000000000000036bc1b8d0b24a89c6f6583c4ab18faf79af3fbe50000000000000000000000000000000000000000000000000000000000000000",
    "runtime_bytecode": "6080604052600436106100e85760003560e01c80638da5cb5b1161008a578063bc58d4cb11610059578063bc58d4cb14610278578063bc6e6604146102a2578063c33930ac146102b8578063fe10d774146102ea57600080fd5b80638da5cb5b146101ca578063a6f9dae114610202578063ae124d3314610222578063b0b3322e1461024257600080fd5b806315d6dae9116100c657806315d6dae91461014f578063247ce85b1461018257806325e16063146101955780638d8f2adb146101b557600080fd5b806303f891bd146100ed578063096ff3f71461010f57806310be8f341461012f575b600080fd5b3480156100f957600080fd5b5061010d610108366004610ae7565b610353565b005b34801561011b57600080fd5b5061010d61012a366004610b0e565b61038b565b34801561013b57600080fd5b5061010d61014a366004610b47565b6103c8565b34801561015b57600080fd5b5061016f61016a366004610ae7565b6104b7565b6040519081526020015b60405180910390f35b61010d610190366004610b73565b6104dc565b3480156101a157600080fd5b5061010d6101b0366004610b73565b61068d565b3480156101c157600080fd5b5061010d610758565b3480156101d657600080fd5b506001546101ea906001600160a01b031681565b6040516001600160a01b039091168152602001610179565b34801561020e57600080fd5b5061010d61021d366004610b73565b6109c8565b34801561022e57600080fd5b5061016f61023d366004610ae7565b610a14565b34801561024e57600080fd5b5061016f61025d366004610b73565b6001600160a01b031660009081526006602052604090205490565b34801561028457600080fd5b506003546102929060ff1681565b6040519015158152602001610179565b3480156102ae57600080fd5b5061016f60025481565b3480156102c457600080fd5b506102cd610a2f565b604080519315158452602084019290925290820152606001610179565b3480156102f657600080fd5b5061032f610305366004610b73565b6004602052600090815260409020805460018201546002909201549091906001600160a01b031683565b6040805193845260208401929092526001600160a01b031690820152606001610179565b6001546001600160a01b031633146103865760405162461bcd60e51b815260040161037d90610b90565b60405180910390fd5b600255565b6001546001600160a01b031633146103b55760405162461bcd60e51b815260040161037d90610b90565b6003805460ff1916911515919091179055565b6001546001600160a01b031633146103f25760405162461bcd60e51b815260040161037d90610b90565b60035460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490526101009092049091169063a9059cbb906044016020604051808303816000875af115801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190610bc5565b6104b35760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604482015260640161037d565b5050565b6000816000036104c957506000919050565b6002546104d69083610bf8565b92915050565b6104e4610a8e565b60035460ff166104f357600080fd5b67016345785d8a00003410156105415760405162461bcd60e51b815260206004820152601360248201527209ad2dc40c4dedcc840d2e640605c6240cae8d606b1b604482015260640161037d565b336001600160a01b038216036105905760405162461bcd60e51b815260206004820152601460248201527321b0b73737ba103932b332b9103a379039b2b63360611b604482015260640161037d565b33600090815260046020908152604080832081516060810183528154815260018201549381018490526002909101546001600160a01b0316918101919091529103610649576000604051806060016040528034815260200142610e106105f69190610c0f565b81526001600160a01b0385811660209283015233600090815260048352604090819020845181559284015160018401559290920151600290910180546001600160a01b031916919092161790555061067f565b348160000181815161065b9190610c0f565b90525061066a42610e10610c0f565b60208201526001600160a01b03821660408201525b5061068a6001600055565b50565b6001546001600160a01b031633146106b75760405162461bcd60e51b815260040161037d90610b90565b600080826001600160a01b03164760405160006040518083038185875af1925050503d8060008114610705576040519150601f19603f3d011682016040523d82523d6000602084013e61070a565b606091505b5091509150816107535760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640161037d565b505050565b610760610a8e565b60035460ff1661076f57600080fd5b336000908152600460205260409020546107cb5760405162461bcd60e51b815260206004820152601760248201527f6d757374206861766520626f6e64656420616d6f756e74000000000000000000604482015260640161037d565b33600090815260046020526040902060010154421161082c5760405162461bcd60e51b815260206004820152601860248201527f6d7573742062652061626c6520746f2077697468647261770000000000000000604482015260640161037d565b33600090815260046020526040812054610845906104b7565b336000908152600460205260409020600201549091506001600160a01b03161561093157600061087482610a14565b6003543360009081526004602081905260409182902060020154915163a9059cbb60e01b81526001600160a01b039283169181019190915260248101849052929350610100909104169063a9059cbb906044016020604051808303816000875af11580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a9190610bc5565b50336000908152600660205260408120805483929061092a908490610c0f565b9091555050505b60035460405163a9059cbb60e01b8152336004820152602481018390526101009091046001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa9190610bc5565b5050336000908152600460205260408120556109c66001600055565b565b6001546001600160a01b031633146109f25760405162461bcd60e51b815260040161037d90610b90565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000612710610a25836101f4610bf8565b6104d69190610c22565b3360009081526004602090815260408083208151606081018352815480825260018301549482018590526002909201546001600160a01b03169281019290925283928392918115159190610a82906104b7565b93509350935050909192565b600260005403610ae05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161037d565b6002600055565b600060208284031215610af957600080fd5b5035919050565b801515811461068a57600080fd5b600060208284031215610b2057600080fd5b8135610b2b81610b00565b9392505050565b6001600160a01b038116811461068a57600080fd5b60008060408385031215610b5a57600080fd5b8235610b6581610b32565b946020939093013593505050565b600060208284031215610b8557600080fd5b8135610b2b81610b32565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610bd757600080fd5b8151610b2b81610b00565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104d6576104d6610be2565b808201808211156104d6576104d6610be2565b600082610c3f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c3a622f22a75b583775edd4846e809214a70330eecdb763ff44396e3b5743e7b64736f6c63430008130033",
    "contract_name": "Bonding",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens_per_eth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TOKENS_PER_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"bond\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canBond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canBond\",\"type\":\"bool\"}],\"name\":\"changeBondingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens_per_eth\",\"type\":\"uint256\"}],\"name\":\"changeTokensPerEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawTokensToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getRefAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokenOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalReferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/FriendFundTechBonding.sol\r\n\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\ncontract Bonding is ReentrancyGuard {\r\n\r\n    address public owner;\r\n    uint256 public TOKENS_PER_ETH;\r\n    bool public canBond;\r\n    IERC20 token;\r\n\r\n    struct BondEntry {\r\n        uint256 ethAmount;\r\n        uint256 withdrawTime;\r\n        address referrer;\r\n    }\r\n    mapping (address => BondEntry) public bonds;\r\n    mapping (address => address) refers;\r\n    mapping (address => uint256) totalReferred;\r\n\r\n    constructor(address _owner, address _token, uint256 _tokens_per_eth) {\r\n        owner = _owner;\r\n        token = IERC20(_token);\r\n        TOKENS_PER_ETH = _tokens_per_eth;\r\n        canBond = false;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    function changeTokensPerEth(uint256 _tokens_per_eth) public onlyOwner {\r\n        TOKENS_PER_ETH = _tokens_per_eth;\r\n    }\r\n\r\n    function changeBondingStatus(bool _canBond) public onlyOwner {\r\n        canBond = _canBond;\r\n    }\r\n\r\n    function bond(address ref) public payable nonReentrant {\r\n        require(canBond);\r\n        require(msg.value >= 0.1 ether, \"Min bond is 0.1 eth\");\r\n        require(ref != msg.sender, \"Cannot refer to self\");\r\n        BondEntry memory currentBond = bonds[msg.sender];\r\n        if(currentBond.withdrawTime == 0) {\r\n            BondEntry memory b = BondEntry(\r\n                msg.value,\r\n                block.timestamp + 1 hours,\r\n                ref\r\n            );\r\n            bonds[msg.sender] = b;\r\n        } else {\r\n            currentBond.ethAmount += msg.value;\r\n            currentBond.withdrawTime = block.timestamp + 1 hours;\r\n            currentBond.referrer = ref;\r\n        }\r\n        \r\n    }\r\n\r\n    function withdrawTokens() public nonReentrant {\r\n        require(canBond);\r\n        require(bonds[msg.sender].ethAmount > 0, \"must have bonded amount\");\r\n        require(block.timestamp > bonds[msg.sender].withdrawTime, \"must be able to withdraw\");\r\n        uint256 bondAmount = getTokenOut(\r\n            bonds[msg.sender].ethAmount\r\n        );\r\n        if(bonds[msg.sender].referrer != address(0)) {\r\n            uint256 refAmount = getRefAmount(bondAmount);\r\n            token.transfer(bonds[msg.sender].referrer, refAmount);\r\n            totalReferred[msg.sender] += refAmount;\r\n        }\r\n        token.transfer(msg.sender, bondAmount);\r\n        bonds[msg.sender].ethAmount = 0;\r\n    }\r\n\r\n    function withdrawEth(address payable _to) public onlyOwner {\r\n        (bool sent, bytes memory data) = _to.call{value: address(this).balance}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n    function emergencyWithdrawTokensToOwner(address to, uint256 amount) public onlyOwner {\r\n        require(token.transfer(to, amount), \"Token transfer failed\");\r\n    }\r\n\r\n    function getRefAmount(uint256 _amount) public pure returns (uint256) {\r\n        return _amount * 500 / 10_000;\r\n    }\r\n    function getTokenOut(uint256 _amount) public view returns(uint256) {\r\n        if(_amount == 0) {\r\n            return 0;\r\n        }\r\n        return (_amount * TOKENS_PER_ETH);\r\n    }\r\n\r\n    function getTotalReferred(address _address) public view returns (uint256) {\r\n        return totalReferred[_address];\r\n    }\r\n    function getWithdrawInfo() public view  returns(bool, uint256, uint256) {\r\n        BondEntry memory currentBond = bonds[msg.sender];\r\n        return (currentBond.withdrawTime > 0 ,currentBond.withdrawTime, getTokenOut(currentBond.ethAmount));\r\n    }\r\n}",
    "etherscan_verified": true
}