{
    "address": "0x10A7A2212f6b6ffE22d339D8Aa6e89a17ad8b1ad",
    "tx_hash": "3632289af947f4e1e3fe3cf0ea9470adbc4d87e669af6961df3d88bac95f32cf",
    "block_number": 18000365,
    "timestamp": 1693071287,
    "gas_used_in_creation": 4251535,
    "creation_bytecode": "60a06040526000600660146101000a81548160ff0219169083151502179055506001600c60006101000a81548160ff0219169083151502179055506000600c60016101000a81548160ff021916908315150217905550604051620059a5380380620059a583398181016040528101906200007a919062000e70565b80600001518160200151816003908162000095919062001117565b508060049081620000a7919062001117565b505050620000ca620000be620005d860201b60201c565b620005e060201b60201c565b60008290508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508160400151600560146101000a81548160ff021916908360ff1602179055506000600560149054906101000a900460ff16600a62000142919062001381565b8360600151620001539190620013d2565b90506127108360c00151826200016a9190620013d2565b6200017691906200144c565b600a81905550612710836080015182620001919190620013d2565b6200019d91906200144c565b6009819055506127108360a0015182620001b89190620013d2565b620001c491906200144c565b600b81905550826101200151600f81905550826101400151601081905550826101600151601181905550826101800151601281905550601254601154601054600f5462000212919062001484565b6200021e919062001484565b6200022a919062001484565b601481905550600073ffffffffffffffffffffffffffffffffffffffff16836101c0015173ffffffffffffffffffffffffffffffffffffffff16146200027657826101c0015162000278565b335b600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101f48360e0015111158015620002d657506101f483610100015111155b62000318576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200030f9062001520565b60405180910390fd5b8260e00151600d81905550826101000151600e81905550601e600d5410156200035857601e600d600082825462000350919062001484565b925050819055505b601e600e5410156200038157601e600e600082825462000379919062001484565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff16836101a0015173ffffffffffffffffffffffffffffffffffffffff1614620003c757826101a00151620003c9565b335b600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601660006200041f620006a660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001601660003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016016600061dead73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612710836101e0015111156200053757600080fd5b6000612710846101e00151836200054f9190620013d2565b6200055b91906200144c565b90506200056f3082620006d060201b60201c565b818110156200059857620005973382846200058b919062001542565b620006d060201b60201c565b5b620005cd306080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6200083d60201b60201c565b50505050506200174d565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000742576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200073990620015cd565b60405180910390fd5b620007566000838362000a0e60201b60201c565b80600260008282546200076a919062001484565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200081d919062001600565b60405180910390a3620008396000838362000a1360201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603620008af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008a69062001693565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000918906200172b565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405162000a01919062001600565b60405180910390a3505050565b505050565b505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000a598262000a2c565b9050919050565b62000a6b8162000a4c565b811462000a7757600080fd5b50565b60008151905062000a8b8162000a60565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000ae18262000a96565b810181811067ffffffffffffffff8211171562000b035762000b0262000aa7565b5b80604052505050565b600062000b1862000a18565b905062000b26828262000ad6565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111562000b585762000b5762000aa7565b5b62000b638262000a96565b9050602081019050919050565b60005b8381101562000b9057808201518184015260208101905062000b73565b60008484015250505050565b600062000bb362000bad8462000b3a565b62000b0c565b90508281526020810184848401111562000bd25762000bd162000b35565b5b62000bdf84828562000b70565b509392505050565b600082601f83011262000bff5762000bfe62000b30565b5b815162000c1184826020860162000b9c565b91505092915050565b600060ff82169050919050565b62000c328162000c1a565b811462000c3e57600080fd5b50565b60008151905062000c528162000c27565b92915050565b6000819050919050565b62000c6d8162000c58565b811462000c7957600080fd5b50565b60008151905062000c8d8162000c62565b92915050565b6000610200828403121562000cad5762000cac62000a91565b5b62000cba61020062000b0c565b9050600082015167ffffffffffffffff81111562000cdd5762000cdc62000b2b565b5b62000ceb8482850162000be7565b600083015250602082015167ffffffffffffffff81111562000d125762000d1162000b2b565b5b62000d208482850162000be7565b602083015250604062000d368482850162000c41565b604083015250606062000d4c8482850162000c7c565b606083015250608062000d628482850162000c7c565b60808301525060a062000d788482850162000c7c565b60a08301525060c062000d8e8482850162000c7c565b60c08301525060e062000da48482850162000c7c565b60e08301525061010062000dbb8482850162000c7c565b6101008301525061012062000dd38482850162000c7c565b6101208301525061014062000deb8482850162000c7c565b6101408301525061016062000e038482850162000c7c565b6101608301525061018062000e1b8482850162000c7c565b610180830152506101a062000e338482850162000a7a565b6101a0830152506101c062000e4b8482850162000a7a565b6101c0830152506101e062000e638482850162000c7c565b6101e08301525092915050565b6000806040838503121562000e8a5762000e8962000a22565b5b600062000e9a8582860162000a7a565b925050602083015167ffffffffffffffff81111562000ebe5762000ebd62000a27565b5b62000ecc8582860162000c93565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000f2957607f821691505b60208210810362000f3f5762000f3e62000ee1565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000fa97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000f6a565b62000fb5868362000f6a565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000ff862000ff262000fec8462000c58565b62000fcd565b62000c58565b9050919050565b6000819050919050565b620010148362000fd7565b6200102c620010238262000fff565b84845462000f77565b825550505050565b600090565b6200104362001034565b6200105081848462001009565b505050565b5b8181101562001078576200106c60008262001039565b60018101905062001056565b5050565b601f821115620010c757620010918162000f45565b6200109c8462000f5a565b81016020851015620010ac578190505b620010c4620010bb8562000f5a565b83018262001055565b50505b505050565b600082821c905092915050565b6000620010ec60001984600802620010cc565b1980831691505092915050565b6000620011078383620010d9565b9150826002028217905092915050565b620011228262000ed6565b67ffffffffffffffff8111156200113e576200113d62000aa7565b5b6200114a825462000f10565b620011578282856200107c565b600060209050601f8311600181146200118f57600084156200117a578287015190505b620011868582620010f9565b865550620011f6565b601f1984166200119f8662000f45565b60005b82811015620011c957848901518255600182019150602085019450602081019050620011a2565b86831015620011e95784890151620011e5601f891682620010d9565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200128c57808604811115620012645762001263620011fe565b5b6001851615620012745780820291505b808102905062001284856200122d565b945062001244565b94509492505050565b600082620012a757600190506200137a565b81620012b757600090506200137a565b8160018114620012d05760028114620012db5762001311565b60019150506200137a565b60ff841115620012f057620012ef620011fe565b5b8360020a9150848211156200130a5762001309620011fe565b5b506200137a565b5060208310610133831016604e8410600b84101617156200134b5782820a905083811115620013455762001344620011fe565b5b6200137a565b6200135a84848460016200123a565b92509050818404811115620013745762001373620011fe565b5b81810290505b9392505050565b60006200138e8262000c58565b91506200139b8362000c1a565b9250620013ca7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462001295565b905092915050565b6000620013df8262000c58565b9150620013ec8362000c58565b9250828202620013fc8162000c58565b91508282048414831517620014165762001415620011fe565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620014598262000c58565b9150620014668362000c58565b9250826200147957620014786200141d565b5b828204905092915050565b6000620014918262000c58565b91506200149e8362000c58565b9250828201905080821115620014b957620014b8620011fe565b5b92915050565b600082825260208201905092915050565b7f4275792f73656c6c2066656573206d757374206265203c3d2035250000000000600082015250565b600062001508601b83620014bf565b91506200151582620014d0565b602082019050919050565b600060208201905081810360008301526200153b81620014f9565b9050919050565b60006200154f8262000c58565b91506200155c8362000c58565b9250828203905081811115620015775762001576620011fe565b5b92915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000620015b5601f83620014bf565b9150620015c2826200157d565b602082019050919050565b60006020820190508181036000830152620015e881620015a6565b9050919050565b620015fa8162000c58565b82525050565b6000602082019050620016176000830184620015ef565b92915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006200167b602483620014bf565b915062001688826200161d565b604082019050919050565b60006020820190508181036000830152620016ae816200166c565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600062001713602283620014bf565b91506200172082620016b5565b604082019050919050565b60006020820190508181036000830152620017468162001704565b9050919050565b6080516142196200178c60003960008181610b3a01528181610c1201528181610cc0015281816124ec01528181612d8e0152612e6b01526142196000f3fe6080604052600436106102765760003560e01c80638da5cb5b1161014f578063ad05a7b5116100c1578063d85ba0631161007a578063d85ba06314610920578063dd62ed3e1461094b578063df376d0b14610988578063e2f45605146109c5578063f2fde38b146109f0578063fce589d814610a195761027d565b8063ad05a7b51461081d578063b62496f514610848578063bbc0c74214610885578063bc205ad3146108b0578063c9567bf9146108d9578063d257b34f146108e35761027d565b806398118cb41161011357806398118cb4146106f95780639a7a23d6146107245780639ee708ff1461074d578063a457c2d714610778578063a9059cbb146107b5578063aa4bde28146107f25761027d565b80638da5cb5b146106245780638ea5220f1461064f578063924de9b71461067a57806395d89b41146106a357806396ea32da146106ce5761027d565b80634e6fd6c4116101e8578063715018a6116101ac578063715018a614610559578063751039fc14610570578063782c4e991461059b5780637ca8448a146105c657806381efb72d146105ef5780638a8c523c1461061a5761027d565b80634e6fd6c4146104705780636827e7641461049b5780636a486a8e146104c65780636ddd1713146104f157806370a082311461051c5761027d565b806327dce8471161023a57806327dce8471461037d578063313ce567146103a857806339509351146103d357806344f8ffd214610410578063470caeb51461043b5780634a62bb65146104455761027d565b806306fdde0314610282578063095ea7b3146102ad57806313114a9d146102ea57806318160ddd1461031557806323b872dd146103405761027d565b3661027d57005b600080fd5b34801561028e57600080fd5b50610297610a44565b6040516102a49190612f91565b60405180910390f35b3480156102b957600080fd5b506102d460048036038101906102cf919061304c565b610ad6565b6040516102e191906130a7565b60405180910390f35b3480156102f657600080fd5b506102ff610af9565b60405161030c91906130d1565b60405180910390f35b34801561032157600080fd5b5061032a610aff565b60405161033791906130d1565b60405180910390f35b34801561034c57600080fd5b50610367600480360381019061036291906130ec565b610b09565b60405161037491906130a7565b60405180910390f35b34801561038957600080fd5b50610392610b38565b60405161039f919061319e565b60405180910390f35b3480156103b457600080fd5b506103bd610b5c565b6040516103ca91906131d5565b60405180910390f35b3480156103df57600080fd5b506103fa60048036038101906103f5919061304c565b610b73565b60405161040791906130a7565b60405180910390f35b34801561041c57600080fd5b50610425610baa565b60405161043291906130d1565b60405180910390f35b610443610bb0565b005b34801561045157600080fd5b5061045a610e30565b60405161046791906130a7565b60405180910390f35b34801561047c57600080fd5b50610485610e43565b60405161049291906131ff565b60405180910390f35b3480156104a757600080fd5b506104b0610e49565b6040516104bd91906130d1565b60405180910390f35b3480156104d257600080fd5b506104db610e4f565b6040516104e891906130d1565b60405180910390f35b3480156104fd57600080fd5b50610506610e55565b60405161051391906130a7565b60405180910390f35b34801561052857600080fd5b50610543600480360381019061053e919061321a565b610e68565b60405161055091906130d1565b60405180910390f35b34801561056557600080fd5b5061056e610eb0565b005b34801561057c57600080fd5b50610585610ec4565b60405161059291906130a7565b60405180910390f35b3480156105a757600080fd5b506105b0610ef0565b6040516105bd91906131ff565b60405180910390f35b3480156105d257600080fd5b506105ed60048036038101906105e8919061321a565b610f16565b005b3480156105fb57600080fd5b50610604610fea565b60405161061191906131ff565b60405180910390f35b610622611010565b005b34801561063057600080fd5b506106396110a7565b60405161064691906131ff565b60405180910390f35b34801561065b57600080fd5b506106646110d1565b60405161067191906131ff565b60405180910390f35b34801561068657600080fd5b506106a1600480360381019061069c9190613273565b6110f7565b005b3480156106af57600080fd5b506106b861116e565b6040516106c59190612f91565b60405180910390f35b3480156106da57600080fd5b506106e3611200565b6040516106f091906130d1565b60405180910390f35b34801561070557600080fd5b5061070e611206565b60405161071b91906130d1565b60405180910390f35b34801561073057600080fd5b5061074b600480360381019061074691906132a0565b61120c565b005b34801561075957600080fd5b50610762611304565b60405161076f91906130d1565b60405180910390f35b34801561078457600080fd5b5061079f600480360381019061079a919061304c565b61130a565b6040516107ac91906130a7565b60405180910390f35b3480156107c157600080fd5b506107dc60048036038101906107d7919061304c565b611381565b6040516107e991906130a7565b60405180910390f35b3480156107fe57600080fd5b506108076113a4565b60405161081491906130d1565b60405180910390f35b34801561082957600080fd5b506108326113aa565b60405161083f91906130d1565b60405180910390f35b34801561085457600080fd5b5061086f600480360381019061086a919061321a565b6113b0565b60405161087c91906130a7565b60405180910390f35b34801561089157600080fd5b5061089a6113d0565b6040516108a791906130a7565b60405180910390f35b3480156108bc57600080fd5b506108d760048036038101906108d291906132e0565b6113e3565b005b6108e16115ae565b005b3480156108ef57600080fd5b5061090a60048036038101906109059190613320565b6115c8565b60405161091791906130a7565b60405180910390f35b34801561092c57600080fd5b506109356116fb565b60405161094291906130d1565b60405180910390f35b34801561095757600080fd5b50610972600480360381019061096d91906132e0565b611701565b60405161097f91906130d1565b60405180910390f35b34801561099457600080fd5b506109af60048036038101906109aa919061321a565b611788565b6040516109bc91906130a7565b60405180910390f35b3480156109d157600080fd5b506109da6117a8565b6040516109e791906130d1565b60405180910390f35b3480156109fc57600080fd5b50610a176004803603810190610a12919061321a565b6117ae565b005b348015610a2557600080fd5b50610a2e6117e9565b604051610a3b91906130d1565b60405180910390f35b606060038054610a539061337c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7f9061337c565b8015610acc5780601f10610aa157610100808354040283529160200191610acc565b820191906000526020600020905b815481529060010190602001808311610aaf57829003601f168201915b5050505050905090565b600080610ae16117ef565b9050610aee8185856117f7565b600191505092915050565b60145481565b6000600254905090565b600080610b146117ef565b9050610b218582856119c0565b610b2c858585611a4c565b60019150509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560149054906101000a900460ff16905090565b600080610b7e6117ef565b9050610b9f818585610b908589611701565b610b9a91906133dc565b6117f7565b600191505092915050565b60155481565b610bb86123cb565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610def5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9f9190613425565b90508073ffffffffffffffffffffffffffffffffffffffff1663c9c65396307f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4d9190613425565b6040518363ffffffff1660e01b8152600401610d6a929190613452565b6020604051808303816000875af1158015610d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dad9190613425565b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b610e1c600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001612449565b610e2e610e2830610e68565b476124ea565b565b600c60009054906101000a900460ff1681565b61dead81565b60115481565b600e5481565b600660149054906101000a900460ff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610eb86123cb565b610ec260006125a0565b565b6000610ece6123cb565b6000600c60006101000a81548160ff0219169083151502179055506001905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f7057600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1647604051610f96906134ac565b60006040518083038185875af1925050503d8060008114610fd3576040519150601f19603f3d011682016040523d82523d6000602084013e610fd8565b606091505b5050905080610fe657600080fd5b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6110186123cb565b600c60019054906101000a900460ff1615611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105f9061350d565b60405180910390fd5b6001600c60016101000a81548160ff0219169083151502179055506001600660146101000a81548160ff02191690831515021790555043601881905550565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461115157600080fd5b80600660146101000a81548160ff02191690831515021790555050565b60606004805461117d9061337c565b80601f01602080910402602001604051908101604052809291908181526020018280546111a99061337c565b80156111f65780601f106111cb576101008083540402835291602001916111f6565b820191906000526020600020905b8154815290600101906020018083116111d957829003601f168201915b5050505050905090565b60095481565b60105481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461126657600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ed9061359f565b60405180910390fd5b6113008282612449565b5050565b60135481565b6000806113156117ef565b905060006113238286611701565b905083811015611368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135f90613631565b60405180910390fd5b61137582868684036117f7565b60019250505092915050565b60008061138c6117ef565b9050611399818585611a4c565b600191505092915050565b600b5481565b60125481565b60176020528060005260406000206000915054906101000a900460ff1681565b600c60019054906101000a900460ff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461143d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a39061369d565b60405180910390fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb838373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161150791906131ff565b602060405180830381865afa158015611524573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154891906136d2565b6040518363ffffffff1660e01b81526004016115659291906136ff565b6020604051808303816000875af1158015611584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a8919061373d565b50505050565b6115b66123cb565b6115be610bb0565b6115c6611010565b565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461162457600080fd5b620186a06001611632610aff565b61163c919061376a565b61164691906137db565b821015611688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167f9061387e565b60405180910390fd5b6103e86005611695610aff565b61169f919061376a565b6116a991906137db565b8211156116eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e290613910565b60405180910390fd5b81600a8190555060019050919050565b600d5481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60166020528060005260406000206000915054906101000a900460ff1681565b600a5481565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e09061397c565b60405180910390fd5b600f5481565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185d90613a0e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cc90613aa0565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516119b391906130d1565b60405180910390a3505050565b60006119cc8484611701565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611a465781811015611a38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2f90613b0c565b60405180910390fd5b611a4584848484036117f7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab290613b9e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2190613c30565b60405180910390fd5b60008103611b4357611b3e83836000612666565b6123c6565b600c60009054906101000a900460ff168015611ba95750601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b8015611bff5750601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15611f5c57600c60019054906101000a900460ff16158015611cbe5750601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680611cbd5750601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b5b15611da457601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680611d645750601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611da3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9a90613c9c565b60405180910390fd5b5b601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611ec257600954811115611e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3290613d2e565b60405180910390fd5b600b54611e4783610e68565b82611e5291906133dc565b1115611e93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8a90613d9a565b60405180910390fd5b436003601854611ea391906133dc565b1115611ebd57611eb2826128dc565b15611ebc57600080fd5b5b611f5b565b601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611f5a57600954811115611f59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5090613e2c565b60405180910390fd5b5b5b5b6000600a5460155410159050808015611f815750600660149054906101000a900460ff165b8015611f9a5750600660159054906101000a900460ff16155b8015611ff05750601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b80156120465750601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b801561209c5750601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156120e0576001600660156101000a81548160ff0219169083151502179055506120c46128ef565b6000600660156101000a81548160ff0219169083151502179055505b6000600660159054906101000a900460ff1615801561219c5750601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061219b5750601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b5b9050601660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061223f5750601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561224957600090505b600081156123b757601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156122c557612710600e54856122b4919061376a565b6122be91906137db565b9050612336565b601760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561233557612710600d5485612328919061376a565b61233291906137db565b90505b5b60008111156123b65761234a863083612666565b6000612710601e8661235c919061376a565b61236691906137db565b905081811115612374578190505b806013600082825461238691906133dc565b9250508190555081856123999190613e4c565b945081601560008282546123ad91906133dc565b92505081905550505b5b6123c2868686612666565b5050505b505050565b6123d36117ef565b73ffffffffffffffffffffffffffffffffffffffff166123f16110a7565b73ffffffffffffffffffffffffffffffffffffffff1614612447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243e90613ecc565b60405180910390fd5b565b80601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508015158273ffffffffffffffffffffffffffffffffffffffff167fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab60405160405180910390a35050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f305d7198230856000806125346110a7565b426040518863ffffffff1660e01b815260040161255696959493929190613f27565b60606040518083038185885af1158015612574573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906125999190613f88565b5050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036126d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126cc90613b9e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273b90613c30565b60405180910390fd5b61274f838383612ce5565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156127d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127cc9061404d565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516128c391906130d1565b60405180910390a36128d6848484612cea565b50505050565b600080823b905060008111915050919050565b60006128fa30610e68565b90506014600a5461290b919061376a565b811115612924576014600a54612921919061376a565b90505b600081036129325750612ce3565b80601354111561294457806013819055505b60006013546015546129569190613e4c565b905060008060008060006014541115612a0257601454600f548661297a919061376a565b61298491906137db565b935060145460105486612997919061376a565b6129a191906137db565b9250601454601254866129b4919061376a565b6129be91906137db565b9150601454601154866129d1919061376a565b6129db91906137db565b9050808284866129eb91906133dc565b6129f591906133dc565b6129ff91906133dc565b94505b85851115612a0e578594505b8486612a1a9190613e4c565b6013819055506000600284612a2f91906137db565b90506000858289612a409190613e4c565b612a4a9190613e4c565b90506000861115612a6357612a623061dead88612666565b5b6000811115612cca576000479050612a7a82612cef565b60008147612a889190613e4c565b905060008360135483612a9b919061376a565b612aa591906137db565b90506000848884612ab6919061376a565b612ac091906137db565b9050600085878b612ad19190613e4c565b85612adc919061376a565b612ae691906137db565b9050600080841115612b73577391fead7f2b2172e75ffcf4cadff5049c9270ee4173ffffffffffffffffffffffffffffffffffffffff1684604051612b2a906134ac565b60006040518083038185875af1925050503d8060008114612b67576040519150601f19603f3d011682016040523d82523d6000602084013e612b6c565b606091505b5050809150505b6000831115612c0b57600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051612bc2906134ac565b60006040518083038185875af1925050503d8060008114612bff576040519150601f19603f3d011682016040523d82523d6000602084013e612c04565b606091505b5050809150505b600088118015612c1b5750600082115b15612c2b57612c2a88836124ea565b5b6000471115612cc357600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051612c7a906134ac565b60006040518083038185875af1925050503d8060008114612cb7576040519150601f19603f3d011682016040523d82523d6000602084013e612cbc565b606091505b5050809150505b5050505050505b6000601381905550600060158190555050505050505050505b565b505050565b505050565b6000600267ffffffffffffffff811115612d0c57612d0b61406d565b5b604051908082528060200260200182016040528015612d3a5781602001602082028036833780820191505090505b5090503081600081518110612d5257612d5161409c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1b9190613425565b81600181518110612e2f57612e2e61409c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b8152600401612ecb959493929190614189565b600060405180830381600087803b158015612ee557600080fd5b505af1158015612ef9573d6000803e3d6000fd5b505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f3b578082015181840152602081019050612f20565b60008484015250505050565b6000601f19601f8301169050919050565b6000612f6382612f01565b612f6d8185612f0c565b9350612f7d818560208601612f1d565b612f8681612f47565b840191505092915050565b60006020820190508181036000830152612fab8184612f58565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612fe382612fb8565b9050919050565b612ff381612fd8565b8114612ffe57600080fd5b50565b60008135905061301081612fea565b92915050565b6000819050919050565b61302981613016565b811461303457600080fd5b50565b60008135905061304681613020565b92915050565b6000806040838503121561306357613062612fb3565b5b600061307185828601613001565b925050602061308285828601613037565b9150509250929050565b60008115159050919050565b6130a18161308c565b82525050565b60006020820190506130bc6000830184613098565b92915050565b6130cb81613016565b82525050565b60006020820190506130e660008301846130c2565b92915050565b60008060006060848603121561310557613104612fb3565b5b600061311386828701613001565b935050602061312486828701613001565b925050604061313586828701613037565b9150509250925092565b6000819050919050565b600061316461315f61315a84612fb8565b61313f565b612fb8565b9050919050565b600061317682613149565b9050919050565b60006131888261316b565b9050919050565b6131988161317d565b82525050565b60006020820190506131b3600083018461318f565b92915050565b600060ff82169050919050565b6131cf816131b9565b82525050565b60006020820190506131ea60008301846131c6565b92915050565b6131f981612fd8565b82525050565b600060208201905061321460008301846131f0565b92915050565b6000602082840312156132305761322f612fb3565b5b600061323e84828501613001565b91505092915050565b6132508161308c565b811461325b57600080fd5b50565b60008135905061326d81613247565b92915050565b60006020828403121561328957613288612fb3565b5b60006132978482850161325e565b91505092915050565b600080604083850312156132b7576132b6612fb3565b5b60006132c585828601613001565b92505060206132d68582860161325e565b9150509250929050565b600080604083850312156132f7576132f6612fb3565b5b600061330585828601613001565b925050602061331685828601613001565b9150509250929050565b60006020828403121561333657613335612fb3565b5b600061334484828501613037565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061339457607f821691505b6020821081036133a7576133a661334d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006133e782613016565b91506133f283613016565b925082820190508082111561340a576134096133ad565b5b92915050565b60008151905061341f81612fea565b92915050565b60006020828403121561343b5761343a612fb3565b5b600061344984828501613410565b91505092915050565b600060408201905061346760008301856131f0565b61347460208301846131f0565b9392505050565b600081905092915050565b50565b600061349660008361347b565b91506134a182613486565b600082019050919050565b60006134b782613489565b9150819050919050565b7f54726164696e6720697320616c7265616479206f70656e000000000000000000600082015250565b60006134f7601783612f0c565b9150613502826134c1565b602082019050919050565b60006020820190508181036000830152613526816134ea565b9050919050565b7f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060008201527f6175746f6d617465644d61726b65744d616b6572506169727300000000000000602082015250565b6000613589603983612f0c565b91506135948261352d565b604082019050919050565b600060208201905081810360008301526135b88161357c565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061361b602583612f0c565b9150613626826135bf565b604082019050919050565b6000602082019050818103600083015261364a8161360e565b9050919050565b7f5f746f6b656e20616464726573732063616e6e6f742062652030000000000000600082015250565b6000613687601a83612f0c565b915061369282613651565b602082019050919050565b600060208201905081810360008301526136b68161367a565b9050919050565b6000815190506136cc81613020565b92915050565b6000602082840312156136e8576136e7612fb3565b5b60006136f6848285016136bd565b91505092915050565b600060408201905061371460008301856131f0565b61372160208301846130c2565b9392505050565b60008151905061373781613247565b92915050565b60006020828403121561375357613752612fb3565b5b600061376184828501613728565b91505092915050565b600061377582613016565b915061378083613016565b925082820261378e81613016565b915082820484148315176137a5576137a46133ad565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006137e682613016565b91506137f183613016565b925082613801576138006137ac565b5b828204905092915050565b7f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60008201527f20302e3030312520746f74616c20737570706c792e0000000000000000000000602082015250565b6000613868603583612f0c565b91506138738261380c565b604082019050919050565b600060208201905081810360008301526138978161385b565b9050919050565b7f5377617020616d6f756e742063616e6e6f74206265206869676865722074686160008201527f6e20302e352520746f74616c20737570706c792e000000000000000000000000602082015250565b60006138fa603483612f0c565b91506139058261389e565b604082019050919050565b60006020820190508181036000830152613929816138ed565b9050919050565b7f4e6f7420416c6c6f77205472616e73666572204f776e6572736869702e000000600082015250565b6000613966601d83612f0c565b915061397182613930565b602082019050919050565b6000602082019050818103600083015261399581613959565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006139f8602483612f0c565b9150613a038261399c565b604082019050919050565b60006020820190508181036000830152613a27816139eb565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613a8a602283612f0c565b9150613a9582613a2e565b604082019050919050565b60006020820190508181036000830152613ab981613a7d565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000613af6601d83612f0c565b9150613b0182613ac0565b602082019050919050565b60006020820190508181036000830152613b2581613ae9565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613b88602583612f0c565b9150613b9382613b2c565b604082019050919050565b60006020820190508181036000830152613bb781613b7b565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000613c1a602383612f0c565b9150613c2582613bbe565b604082019050919050565b60006020820190508181036000830152613c4981613c0d565b9050919050565b7f54726164696e67206973206e6f74206163746976652e00000000000000000000600082015250565b6000613c86601683612f0c565b9150613c9182613c50565b602082019050919050565b60006020820190508181036000830152613cb581613c79565b9050919050565b7f427579207472616e7366657220616d6f756e742065786365656473207468652060008201527f6d617854726164696e67416d6f756e742e000000000000000000000000000000602082015250565b6000613d18603183612f0c565b9150613d2382613cbc565b604082019050919050565b60006020820190508181036000830152613d4781613d0b565b9050919050565b7f4d61782077616c6c657420657863656564656400000000000000000000000000600082015250565b6000613d84601383612f0c565b9150613d8f82613d4e565b602082019050919050565b60006020820190508181036000830152613db381613d77565b9050919050565b7f53656c6c207472616e7366657220616d6f756e7420657863656564732074686560008201527f206d617854726164696e67416d6f756e742e0000000000000000000000000000602082015250565b6000613e16603283612f0c565b9150613e2182613dba565b604082019050919050565b60006020820190508181036000830152613e4581613e09565b9050919050565b6000613e5782613016565b9150613e6283613016565b9250828203905081811115613e7a57613e796133ad565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613eb6602083612f0c565b9150613ec182613e80565b602082019050919050565b60006020820190508181036000830152613ee581613ea9565b9050919050565b6000819050919050565b6000613f11613f0c613f0784613eec565b61313f565b613016565b9050919050565b613f2181613ef6565b82525050565b600060c082019050613f3c60008301896131f0565b613f4960208301886130c2565b613f566040830187613f18565b613f636060830186613f18565b613f7060808301856131f0565b613f7d60a08301846130c2565b979650505050505050565b600080600060608486031215613fa157613fa0612fb3565b5b6000613faf868287016136bd565b9350506020613fc0868287016136bd565b9250506040613fd1868287016136bd565b9150509250925092565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000614037602683612f0c565b915061404282613fdb565b604082019050919050565b600060208201905081810360008301526140668161402a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61410081612fd8565b82525050565b600061411283836140f7565b60208301905092915050565b6000602082019050919050565b6000614136826140cb565b61414081856140d6565b935061414b836140e7565b8060005b8381101561417c5781516141638882614106565b975061416e8361411e565b92505060018101905061414f565b5085935050505092915050565b600060a08201905061419e60008301886130c2565b6141ab6020830187613f18565b81810360408301526141bd818661412b565b90506141cc60608301856131f0565b6141d960808301846130c2565b969550505050505056fea26469706673582212205c596e6fa312bf2d0630b1041a88b9e577fa70517129d023984b8579548ab9c464736f6c634300081300330000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488dd00000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002feaae5984fb96d9c05206223ae9e33f426f3400000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000d486f6d656c657373205065706500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a504550454e4f484f4d4500000000000000000000000000000000000000000000",
    "runtime_bytecode": "6080604052600436106102765760003560e01c80638da5cb5b1161014f578063ad05a7b5116100c1578063d85ba0631161007a578063d85ba06314610920578063dd62ed3e1461094b578063df376d0b14610988578063e2f45605146109c5578063f2fde38b146109f0578063fce589d814610a195761027d565b8063ad05a7b51461081d578063b62496f514610848578063bbc0c74214610885578063bc205ad3146108b0578063c9567bf9146108d9578063d257b34f146108e35761027d565b806398118cb41161011357806398118cb4146106f95780639a7a23d6146107245780639ee708ff1461074d578063a457c2d714610778578063a9059cbb146107b5578063aa4bde28146107f25761027d565b80638da5cb5b146106245780638ea5220f1461064f578063924de9b71461067a57806395d89b41146106a357806396ea32da146106ce5761027d565b80634e6fd6c4116101e8578063715018a6116101ac578063715018a614610559578063751039fc14610570578063782c4e991461059b5780637ca8448a146105c657806381efb72d146105ef5780638a8c523c1461061a5761027d565b80634e6fd6c4146104705780636827e7641461049b5780636a486a8e146104c65780636ddd1713146104f157806370a082311461051c5761027d565b806327dce8471161023a57806327dce8471461037d578063313ce567146103a857806339509351146103d357806344f8ffd214610410578063470caeb51461043b5780634a62bb65146104455761027d565b806306fdde0314610282578063095ea7b3146102ad57806313114a9d146102ea57806318160ddd1461031557806323b872dd146103405761027d565b3661027d57005b600080fd5b34801561028e57600080fd5b50610297610a44565b6040516102a49190612f91565b60405180910390f35b3480156102b957600080fd5b506102d460048036038101906102cf919061304c565b610ad6565b6040516102e191906130a7565b60405180910390f35b3480156102f657600080fd5b506102ff610af9565b60405161030c91906130d1565b60405180910390f35b34801561032157600080fd5b5061032a610aff565b60405161033791906130d1565b60405180910390f35b34801561034c57600080fd5b50610367600480360381019061036291906130ec565b610b09565b60405161037491906130a7565b60405180910390f35b34801561038957600080fd5b50610392610b38565b60405161039f919061319e565b60405180910390f35b3480156103b457600080fd5b506103bd610b5c565b6040516103ca91906131d5565b60405180910390f35b3480156103df57600080fd5b506103fa60048036038101906103f5919061304c565b610b73565b60405161040791906130a7565b60405180910390f35b34801561041c57600080fd5b50610425610baa565b60405161043291906130d1565b60405180910390f35b610443610bb0565b005b34801561045157600080fd5b5061045a610e30565b60405161046791906130a7565b60405180910390f35b34801561047c57600080fd5b50610485610e43565b60405161049291906131ff565b60405180910390f35b3480156104a757600080fd5b506104b0610e49565b6040516104bd91906130d1565b60405180910390f35b3480156104d257600080fd5b506104db610e4f565b6040516104e891906130d1565b60405180910390f35b3480156104fd57600080fd5b50610506610e55565b60405161051391906130a7565b60405180910390f35b34801561052857600080fd5b50610543600480360381019061053e919061321a565b610e68565b60405161055091906130d1565b60405180910390f35b34801561056557600080fd5b5061056e610eb0565b005b34801561057c57600080fd5b50610585610ec4565b60405161059291906130a7565b60405180910390f35b3480156105a757600080fd5b506105b0610ef0565b6040516105bd91906131ff565b60405180910390f35b3480156105d257600080fd5b506105ed60048036038101906105e8919061321a565b610f16565b005b3480156105fb57600080fd5b50610604610fea565b60405161061191906131ff565b60405180910390f35b610622611010565b005b34801561063057600080fd5b506106396110a7565b60405161064691906131ff565b60405180910390f35b34801561065b57600080fd5b506106646110d1565b60405161067191906131ff565b60405180910390f35b34801561068657600080fd5b506106a1600480360381019061069c9190613273565b6110f7565b005b3480156106af57600080fd5b506106b861116e565b6040516106c59190612f91565b60405180910390f35b3480156106da57600080fd5b506106e3611200565b6040516106f091906130d1565b60405180910390f35b34801561070557600080fd5b5061070e611206565b60405161071b91906130d1565b60405180910390f35b34801561073057600080fd5b5061074b600480360381019061074691906132a0565b61120c565b005b34801561075957600080fd5b50610762611304565b60405161076f91906130d1565b60405180910390f35b34801561078457600080fd5b5061079f600480360381019061079a919061304c565b61130a565b6040516107ac91906130a7565b60405180910390f35b3480156107c157600080fd5b506107dc60048036038101906107d7919061304c565b611381565b6040516107e991906130a7565b60405180910390f35b3480156107fe57600080fd5b506108076113a4565b60405161081491906130d1565b60405180910390f35b34801561082957600080fd5b506108326113aa565b60405161083f91906130d1565b60405180910390f35b34801561085457600080fd5b5061086f600480360381019061086a919061321a565b6113b0565b60405161087c91906130a7565b60405180910390f35b34801561089157600080fd5b5061089a6113d0565b6040516108a791906130a7565b60405180910390f35b3480156108bc57600080fd5b506108d760048036038101906108d291906132e0565b6113e3565b005b6108e16115ae565b005b3480156108ef57600080fd5b5061090a60048036038101906109059190613320565b6115c8565b60405161091791906130a7565b60405180910390f35b34801561092c57600080fd5b506109356116fb565b60405161094291906130d1565b60405180910390f35b34801561095757600080fd5b50610972600480360381019061096d91906132e0565b611701565b60405161097f91906130d1565b60405180910390f35b34801561099457600080fd5b506109af60048036038101906109aa919061321a565b611788565b6040516109bc91906130a7565b60405180910390f35b3480156109d157600080fd5b506109da6117a8565b6040516109e791906130d1565b60405180910390f35b3480156109fc57600080fd5b50610a176004803603810190610a12919061321a565b6117ae565b005b348015610a2557600080fd5b50610a2e6117e9565b604051610a3b91906130d1565b60405180910390f35b606060038054610a539061337c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7f9061337c565b8015610acc5780601f10610aa157610100808354040283529160200191610acc565b820191906000526020600020905b815481529060010190602001808311610aaf57829003601f168201915b5050505050905090565b600080610ae16117ef565b9050610aee8185856117f7565b600191505092915050565b60145481565b6000600254905090565b600080610b146117ef565b9050610b218582856119c0565b610b2c858585611a4c565b60019150509392505050565b7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6000600560149054906101000a900460ff16905090565b600080610b7e6117ef565b9050610b9f818585610b908589611701565b610b9a91906133dc565b6117f7565b600191505092915050565b60155481565b610bb86123cb565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610def5760007f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9f9190613425565b90508073ffffffffffffffffffffffffffffffffffffffff1663c9c65396307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4d9190613425565b6040518363ffffffff1660e01b8152600401610d6a929190613452565b6020604051808303816000875af1158015610d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dad9190613425565b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b610e1c600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001612449565b610e2e610e2830610e68565b476124ea565b565b600c60009054906101000a900460ff1681565b61dead81565b60115481565b600e5481565b600660149054906101000a900460ff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610eb86123cb565b610ec260006125a0565b565b6000610ece6123cb565b6000600c60006101000a81548160ff0219169083151502179055506001905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f7057600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1647604051610f96906134ac565b60006040518083038185875af1925050503d8060008114610fd3576040519150601f19603f3d011682016040523d82523d6000602084013e610fd8565b606091505b5050905080610fe657600080fd5b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6110186123cb565b600c60019054906101000a900460ff1615611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105f9061350d565b60405180910390fd5b6001600c60016101000a81548160ff0219169083151502179055506001600660146101000a81548160ff02191690831515021790555043601881905550565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461115157600080fd5b80600660146101000a81548160ff02191690831515021790555050565b60606004805461117d9061337c565b80601f01602080910402602001604051908101604052809291908181526020018280546111a99061337c565b80156111f65780601f106111cb576101008083540402835291602001916111f6565b820191906000526020600020905b8154815290600101906020018083116111d957829003601f168201915b5050505050905090565b60095481565b60105481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461126657600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ed9061359f565b60405180910390fd5b6113008282612449565b5050565b60135481565b6000806113156117ef565b905060006113238286611701565b905083811015611368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135f90613631565b60405180910390fd5b61137582868684036117f7565b60019250505092915050565b60008061138c6117ef565b9050611399818585611a4c565b600191505092915050565b600b5481565b60125481565b60176020528060005260406000206000915054906101000a900460ff1681565b600c60019054906101000a900460ff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461143d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a39061369d565b60405180910390fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb838373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161150791906131ff565b602060405180830381865afa158015611524573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154891906136d2565b6040518363ffffffff1660e01b81526004016115659291906136ff565b6020604051808303816000875af1158015611584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a8919061373d565b50505050565b6115b66123cb565b6115be610bb0565b6115c6611010565b565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461162457600080fd5b620186a06001611632610aff565b61163c919061376a565b61164691906137db565b821015611688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167f9061387e565b60405180910390fd5b6103e86005611695610aff565b61169f919061376a565b6116a991906137db565b8211156116eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e290613910565b60405180910390fd5b81600a8190555060019050919050565b600d5481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60166020528060005260406000206000915054906101000a900460ff1681565b600a5481565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e09061397c565b60405180910390fd5b600f5481565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185d90613a0e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cc90613aa0565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516119b391906130d1565b60405180910390a3505050565b60006119cc8484611701565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611a465781811015611a38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2f90613b0c565b60405180910390fd5b611a4584848484036117f7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab290613b9e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2190613c30565b60405180910390fd5b60008103611b4357611b3e83836000612666565b6123c6565b600c60009054906101000a900460ff168015611ba95750601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b8015611bff5750601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15611f5c57600c60019054906101000a900460ff16158015611cbe5750601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680611cbd5750601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b5b15611da457601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680611d645750601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611da3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9a90613c9c565b60405180910390fd5b5b601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611ec257600954811115611e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3290613d2e565b60405180910390fd5b600b54611e4783610e68565b82611e5291906133dc565b1115611e93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8a90613d9a565b60405180910390fd5b436003601854611ea391906133dc565b1115611ebd57611eb2826128dc565b15611ebc57600080fd5b5b611f5b565b601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611f5a57600954811115611f59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5090613e2c565b60405180910390fd5b5b5b5b6000600a5460155410159050808015611f815750600660149054906101000a900460ff165b8015611f9a5750600660159054906101000a900460ff16155b8015611ff05750601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b80156120465750601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b801561209c5750601660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156120e0576001600660156101000a81548160ff0219169083151502179055506120c46128ef565b6000600660156101000a81548160ff0219169083151502179055505b6000600660159054906101000a900460ff1615801561219c5750601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061219b5750601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b5b9050601660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061223f5750601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561224957600090505b600081156123b757601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156122c557612710600e54856122b4919061376a565b6122be91906137db565b9050612336565b601760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561233557612710600d5485612328919061376a565b61233291906137db565b90505b5b60008111156123b65761234a863083612666565b6000612710601e8661235c919061376a565b61236691906137db565b905081811115612374578190505b806013600082825461238691906133dc565b9250508190555081856123999190613e4c565b945081601560008282546123ad91906133dc565b92505081905550505b5b6123c2868686612666565b5050505b505050565b6123d36117ef565b73ffffffffffffffffffffffffffffffffffffffff166123f16110a7565b73ffffffffffffffffffffffffffffffffffffffff1614612447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243e90613ecc565b60405180910390fd5b565b80601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508015158273ffffffffffffffffffffffffffffffffffffffff167fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab60405160405180910390a35050565b7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663f305d7198230856000806125346110a7565b426040518863ffffffff1660e01b815260040161255696959493929190613f27565b60606040518083038185885af1158015612574573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906125999190613f88565b5050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036126d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126cc90613b9e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273b90613c30565b60405180910390fd5b61274f838383612ce5565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156127d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127cc9061404d565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516128c391906130d1565b60405180910390a36128d6848484612cea565b50505050565b600080823b905060008111915050919050565b60006128fa30610e68565b90506014600a5461290b919061376a565b811115612924576014600a54612921919061376a565b90505b600081036129325750612ce3565b80601354111561294457806013819055505b60006013546015546129569190613e4c565b905060008060008060006014541115612a0257601454600f548661297a919061376a565b61298491906137db565b935060145460105486612997919061376a565b6129a191906137db565b9250601454601254866129b4919061376a565b6129be91906137db565b9150601454601154866129d1919061376a565b6129db91906137db565b9050808284866129eb91906133dc565b6129f591906133dc565b6129ff91906133dc565b94505b85851115612a0e578594505b8486612a1a9190613e4c565b6013819055506000600284612a2f91906137db565b90506000858289612a409190613e4c565b612a4a9190613e4c565b90506000861115612a6357612a623061dead88612666565b5b6000811115612cca576000479050612a7a82612cef565b60008147612a889190613e4c565b905060008360135483612a9b919061376a565b612aa591906137db565b90506000848884612ab6919061376a565b612ac091906137db565b9050600085878b612ad19190613e4c565b85612adc919061376a565b612ae691906137db565b9050600080841115612b73577391fead7f2b2172e75ffcf4cadff5049c9270ee4173ffffffffffffffffffffffffffffffffffffffff1684604051612b2a906134ac565b60006040518083038185875af1925050503d8060008114612b67576040519150601f19603f3d011682016040523d82523d6000602084013e612b6c565b606091505b5050809150505b6000831115612c0b57600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051612bc2906134ac565b60006040518083038185875af1925050503d8060008114612bff576040519150601f19603f3d011682016040523d82523d6000602084013e612c04565b606091505b5050809150505b600088118015612c1b5750600082115b15612c2b57612c2a88836124ea565b5b6000471115612cc357600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051612c7a906134ac565b60006040518083038185875af1925050503d8060008114612cb7576040519150601f19603f3d011682016040523d82523d6000602084013e612cbc565b606091505b5050809150505b5050505050505b6000601381905550600060158190555050505050505050505b565b505050565b505050565b6000600267ffffffffffffffff811115612d0c57612d0b61406d565b5b604051908082528060200260200182016040528015612d3a5781602001602082028036833780820191505090505b5090503081600081518110612d5257612d5161409c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1b9190613425565b81600181518110612e2f57612e2e61409c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b8152600401612ecb959493929190614189565b600060405180830381600087803b158015612ee557600080fd5b505af1158015612ef9573d6000803e3d6000fd5b505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f3b578082015181840152602081019050612f20565b60008484015250505050565b6000601f19601f8301169050919050565b6000612f6382612f01565b612f6d8185612f0c565b9350612f7d818560208601612f1d565b612f8681612f47565b840191505092915050565b60006020820190508181036000830152612fab8184612f58565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612fe382612fb8565b9050919050565b612ff381612fd8565b8114612ffe57600080fd5b50565b60008135905061301081612fea565b92915050565b6000819050919050565b61302981613016565b811461303457600080fd5b50565b60008135905061304681613020565b92915050565b6000806040838503121561306357613062612fb3565b5b600061307185828601613001565b925050602061308285828601613037565b9150509250929050565b60008115159050919050565b6130a18161308c565b82525050565b60006020820190506130bc6000830184613098565b92915050565b6130cb81613016565b82525050565b60006020820190506130e660008301846130c2565b92915050565b60008060006060848603121561310557613104612fb3565b5b600061311386828701613001565b935050602061312486828701613001565b925050604061313586828701613037565b9150509250925092565b6000819050919050565b600061316461315f61315a84612fb8565b61313f565b612fb8565b9050919050565b600061317682613149565b9050919050565b60006131888261316b565b9050919050565b6131988161317d565b82525050565b60006020820190506131b3600083018461318f565b92915050565b600060ff82169050919050565b6131cf816131b9565b82525050565b60006020820190506131ea60008301846131c6565b92915050565b6131f981612fd8565b82525050565b600060208201905061321460008301846131f0565b92915050565b6000602082840312156132305761322f612fb3565b5b600061323e84828501613001565b91505092915050565b6132508161308c565b811461325b57600080fd5b50565b60008135905061326d81613247565b92915050565b60006020828403121561328957613288612fb3565b5b60006132978482850161325e565b91505092915050565b600080604083850312156132b7576132b6612fb3565b5b60006132c585828601613001565b92505060206132d68582860161325e565b9150509250929050565b600080604083850312156132f7576132f6612fb3565b5b600061330585828601613001565b925050602061331685828601613001565b9150509250929050565b60006020828403121561333657613335612fb3565b5b600061334484828501613037565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061339457607f821691505b6020821081036133a7576133a661334d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006133e782613016565b91506133f283613016565b925082820190508082111561340a576134096133ad565b5b92915050565b60008151905061341f81612fea565b92915050565b60006020828403121561343b5761343a612fb3565b5b600061344984828501613410565b91505092915050565b600060408201905061346760008301856131f0565b61347460208301846131f0565b9392505050565b600081905092915050565b50565b600061349660008361347b565b91506134a182613486565b600082019050919050565b60006134b782613489565b9150819050919050565b7f54726164696e6720697320616c7265616479206f70656e000000000000000000600082015250565b60006134f7601783612f0c565b9150613502826134c1565b602082019050919050565b60006020820190508181036000830152613526816134ea565b9050919050565b7f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060008201527f6175746f6d617465644d61726b65744d616b6572506169727300000000000000602082015250565b6000613589603983612f0c565b91506135948261352d565b604082019050919050565b600060208201905081810360008301526135b88161357c565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061361b602583612f0c565b9150613626826135bf565b604082019050919050565b6000602082019050818103600083015261364a8161360e565b9050919050565b7f5f746f6b656e20616464726573732063616e6e6f742062652030000000000000600082015250565b6000613687601a83612f0c565b915061369282613651565b602082019050919050565b600060208201905081810360008301526136b68161367a565b9050919050565b6000815190506136cc81613020565b92915050565b6000602082840312156136e8576136e7612fb3565b5b60006136f6848285016136bd565b91505092915050565b600060408201905061371460008301856131f0565b61372160208301846130c2565b9392505050565b60008151905061373781613247565b92915050565b60006020828403121561375357613752612fb3565b5b600061376184828501613728565b91505092915050565b600061377582613016565b915061378083613016565b925082820261378e81613016565b915082820484148315176137a5576137a46133ad565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006137e682613016565b91506137f183613016565b925082613801576138006137ac565b5b828204905092915050565b7f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60008201527f20302e3030312520746f74616c20737570706c792e0000000000000000000000602082015250565b6000613868603583612f0c565b91506138738261380c565b604082019050919050565b600060208201905081810360008301526138978161385b565b9050919050565b7f5377617020616d6f756e742063616e6e6f74206265206869676865722074686160008201527f6e20302e352520746f74616c20737570706c792e000000000000000000000000602082015250565b60006138fa603483612f0c565b91506139058261389e565b604082019050919050565b60006020820190508181036000830152613929816138ed565b9050919050565b7f4e6f7420416c6c6f77205472616e73666572204f776e6572736869702e000000600082015250565b6000613966601d83612f0c565b915061397182613930565b602082019050919050565b6000602082019050818103600083015261399581613959565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006139f8602483612f0c565b9150613a038261399c565b604082019050919050565b60006020820190508181036000830152613a27816139eb565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613a8a602283612f0c565b9150613a9582613a2e565b604082019050919050565b60006020820190508181036000830152613ab981613a7d565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000613af6601d83612f0c565b9150613b0182613ac0565b602082019050919050565b60006020820190508181036000830152613b2581613ae9565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613b88602583612f0c565b9150613b9382613b2c565b604082019050919050565b60006020820190508181036000830152613bb781613b7b565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000613c1a602383612f0c565b9150613c2582613bbe565b604082019050919050565b60006020820190508181036000830152613c4981613c0d565b9050919050565b7f54726164696e67206973206e6f74206163746976652e00000000000000000000600082015250565b6000613c86601683612f0c565b9150613c9182613c50565b602082019050919050565b60006020820190508181036000830152613cb581613c79565b9050919050565b7f427579207472616e7366657220616d6f756e742065786365656473207468652060008201527f6d617854726164696e67416d6f756e742e000000000000000000000000000000602082015250565b6000613d18603183612f0c565b9150613d2382613cbc565b604082019050919050565b60006020820190508181036000830152613d4781613d0b565b9050919050565b7f4d61782077616c6c657420657863656564656400000000000000000000000000600082015250565b6000613d84601383612f0c565b9150613d8f82613d4e565b602082019050919050565b60006020820190508181036000830152613db381613d77565b9050919050565b7f53656c6c207472616e7366657220616d6f756e7420657863656564732074686560008201527f206d617854726164696e67416d6f756e742e0000000000000000000000000000602082015250565b6000613e16603283612f0c565b9150613e2182613dba565b604082019050919050565b60006020820190508181036000830152613e4581613e09565b9050919050565b6000613e5782613016565b9150613e6283613016565b9250828203905081811115613e7a57613e796133ad565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613eb6602083612f0c565b9150613ec182613e80565b602082019050919050565b60006020820190508181036000830152613ee581613ea9565b9050919050565b6000819050919050565b6000613f11613f0c613f0784613eec565b61313f565b613016565b9050919050565b613f2181613ef6565b82525050565b600060c082019050613f3c60008301896131f0565b613f4960208301886130c2565b613f566040830187613f18565b613f636060830186613f18565b613f7060808301856131f0565b613f7d60a08301846130c2565b979650505050505050565b600080600060608486031215613fa157613fa0612fb3565b5b6000613faf868287016136bd565b9350506020613fc0868287016136bd565b9250506040613fd1868287016136bd565b9150509250925092565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000614037602683612f0c565b915061404282613fdb565b604082019050919050565b600060208201905081810360008301526140668161402a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61410081612fd8565b82525050565b600061411283836140f7565b60208301905092915050565b6000602082019050919050565b6000614136826140cb565b61414081856140d6565b935061414b836140e7565b8060005b8381101561417c5781516141638882614106565b975061416e8361411e565b92505060018101905061414f565b5085935050505092915050565b600060a08201905061419e60008301886130c2565b6141ab6020830187613f18565b81810360408301526141bd818661412b565b90506141cc60608301856131f0565b6141d960808301846130c2565b969550505050505056fea26469706673582212205c596e6fa312bf2d0630b1041a88b9e577fa70517129d023984b8579548ab9c464736f6c63430008130033",
    "contract_name": "GenesisToken",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTradingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTotalFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTotalFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revshareFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"revshareWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct GenesisToken.InitParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPairAndAddLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTradingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revShareWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revshareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForGen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTaxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"}],\"name\":\"withdrawStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// Sources flattened with hardhat v2.17.1 https://hardhat.org\n\n// SPDX-License-Identifier: GenesisBot.xyz AND MIT\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n\n\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.9.3\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\n\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\n// File contracts/Token/GenesisToken.sol\n\n// Original license: SPDX_License_Identifier: GenesisBot.xyz\npragma solidity ^0.8.19;\n\n\n\n\n\ncontract GenesisToken is ERC20, Ownable {\n    struct InitParams {\n        string name;\n        string symbol;\n        uint8 decimals;\n        uint256 totalSupply;\n        uint256 maxTradingAmount;\n        uint256 maxWalletAmount;\n        uint256 swapTokensAtAmount;\n        uint256 buyTotalFees;\n        uint256 sellTotalFees;\n        uint256 burnFee;\n        uint256 liquidityFee;\n        uint256 devFee;\n        uint256 revshareFee;\n        address devWallet;\n        address revshareWallet;\n        uint256 liquidityAmount;\n    }\n\n    uint8 private _decimals;\n\n    IUniswapV2Router02 public immutable swapV2Router;\n    //ITurnstile public immutable turnstile;\n    address public swapV2Pair;\n    address public constant DEAD_ADDRESS = address(0xdead);\n\n    bool public swapEnabled = false;\n    bool private swapping;\n\n    address public revShareWallet;\n    address public devWallet;\n\n    uint256 public maxTradingAmount;\n    uint256 public swapTokensAtAmount;\n    uint256 public maxWalletAmount;\n\n    bool public limitsInEffect = true;\n    bool public tradingActive = false;\n\n    uint256 constant PERCENTAGE_BASE = 10000; //\n    uint256 constant GEN_FEE = 30; // fee for GEN Bot: 0.3%\n    address constant GEN_WALLET = 0x91FEad7F2B2172e75FfCf4cAdFF5049c9270EE41;\n\n    uint256 public buyTotalFees; // buy fee\n    uint256 public sellTotalFees; // sell fee\n\n    // Tax distribution\n    uint256 public burnFee;\n    uint256 public liquidityFee;\n    uint256 public devFee;\n    uint256 public revshareFee;\n\n    uint256 public tokensForGen;\n    uint256 public totalFees;\n    uint256 public totalTaxTokens;\n    /******************/\n\n    // exclude from fees and max transaction amount\n    mapping(address => bool) public excludeFromLimits;\n\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    mapping(address => bool) public automatedMarketMakerPairs;\n\n    // Trading start at\n    uint256 block0;\n    uint256 constant NO_SMC_TRADE_BLOCKS = 3;\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiquidity\n    );\n\n    modifier onlyDev() {\n        require(msg.sender == devWallet);\n        _;\n    }\n\n    constructor(\n        address routerAddress,\n        InitParams memory params\n    ) payable ERC20(params.name, params.symbol) {\n        // amm swap init\n        IUniswapV2Router02 router = IUniswapV2Router02(routerAddress);\n\n        swapV2Router = router;\n\n        // Token parameters\n        _decimals = params.decimals;\n        uint256 totalSupply_ = params.totalSupply * (10 ** _decimals);\n        swapTokensAtAmount =\n            (totalSupply_ * params.swapTokensAtAmount) /\n            PERCENTAGE_BASE; // 0.05%\n\n        maxTradingAmount =\n            (totalSupply_ * params.maxTradingAmount) /\n            PERCENTAGE_BASE; // 0.1%\n        maxWalletAmount =\n            (totalSupply_ * params.maxWalletAmount) /\n            PERCENTAGE_BASE; // 1%\n\n        // Fee distribute: burn: 1, dev: 4\n        // tax distribution\n        burnFee = params.burnFee;\n        liquidityFee = params.liquidityFee;\n        devFee = params.devFee;\n        revshareFee = params.revshareFee;\n\n        totalFees = burnFee + liquidityFee + devFee + revshareFee;\n        // update revshare wallet\n        revShareWallet = params.revshareWallet == address(0)\n            ? msg.sender\n            : params.revshareWallet;\n\n        // 5% fee for buy/sell\n        require(\n            params.buyTotalFees <= 500 && params.sellTotalFees <= 500,\n            \"Buy/sell fees must be <= 5%\"\n        );\n        buyTotalFees = params.buyTotalFees;\n        sellTotalFees = params.sellTotalFees;\n        if (buyTotalFees < GEN_FEE) buyTotalFees += GEN_FEE;\n        if (sellTotalFees < GEN_FEE) sellTotalFees += GEN_FEE;\n\n        devWallet = params.devWallet == address(0)\n            ? msg.sender\n            : params.devWallet;\n\n        // exclude from paying fees or having max transaction amount\n        excludeFromLimits[owner()] = true;\n        excludeFromLimits[address(this)] = true;\n        excludeFromLimits[DEAD_ADDRESS] = true;\n        /*\n            mint & add liquidity\n        */\n        // add liquidity\n        require(params.liquidityAmount <= PERCENTAGE_BASE);\n        uint256 liquidityAmount = (totalSupply_ * params.liquidityAmount) /\n            PERCENTAGE_BASE;\n\n        _mint(address(this), liquidityAmount);\n        // mint left\n        if (liquidityAmount < totalSupply_) {\n            _mint(msg.sender, totalSupply_ - liquidityAmount);\n        }\n\n        // Approve infinite spending by DEX, to sell tokens collected via tax.\n        _approve(address(this), address(swapV2Router), type(uint256).max);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    receive() external payable {}\n\n    // remove limits after token is stable\n    function removeLimits() external onlyOwner returns (bool) {\n        limitsInEffect = false;\n        return true;\n    }\n\n    // change the minimum amount of tokens to sell from fees\n    function updateSwapTokensAtAmount(\n        uint256 newAmount\n    ) external onlyDev returns (bool) {\n        require(\n            newAmount >= (totalSupply() * 1) / 100000,\n            \"Swap amount cannot be lower than 0.001% total supply.\"\n        );\n        require(\n            newAmount <= (totalSupply() * 5) / 1000,\n            \"Swap amount cannot be higher than 0.5% total supply.\"\n        );\n        swapTokensAtAmount = newAmount;\n        return true;\n    }\n\n    // only use to disable contract sales if absolutely necessary (emergency use only)\n    function updateSwapEnabled(bool enabled) external onlyDev {\n        swapEnabled = enabled;\n    }\n\n    function setAutomatedMarketMakerPair(\n        address pair,\n        bool value\n    ) public onlyDev {\n        require(\n            pair != swapV2Pair,\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\n        );\n\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        automatedMarketMakerPairs[pair] = value;\n\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        if (amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n        // only limit for trading\n        if (\n            limitsInEffect && !excludeFromLimits[from] && !excludeFromLimits[to]\n        ) {\n            if (\n                !tradingActive &&\n                (automatedMarketMakerPairs[from] ||\n                    automatedMarketMakerPairs[to])\n            ) {\n                require(\n                    excludeFromLimits[from] || excludeFromLimits[to],\n                    \"Trading is not active.\"\n                );\n            }\n\n            if (automatedMarketMakerPairs[from]) {\n                //when buy\n                require(\n                    amount <= maxTradingAmount,\n                    \"Buy transfer amount exceeds the maxTradingAmount.\"\n                );\n                require(\n                    amount + balanceOf(to) <= maxWalletAmount,\n                    \"Max wallet exceeded\"\n                );\n\n                if (block0 + NO_SMC_TRADE_BLOCKS > block.number) {\n                    require(!isContract(to));\n                }\n            } else if (automatedMarketMakerPairs[to]) {\n                //when sell\n                require(\n                    amount <= maxTradingAmount,\n                    \"Sell transfer amount exceeds the maxTradingAmount.\"\n                );\n            }\n        }\n        // uint256 contractTokenBalance = balanceOf(address(this));\n        bool canSwap = totalTaxTokens >= swapTokensAtAmount;\n\n        if (\n            canSwap &&\n            swapEnabled &&\n            !swapping &&\n            !automatedMarketMakerPairs[from] &&\n            !excludeFromLimits[from] &&\n            !excludeFromLimits[to]\n        ) {\n            swapping = true;\n\n            swapBack();\n\n            swapping = false;\n        }\n        // only take free for trading\n        bool takeFee = !swapping &&\n            (automatedMarketMakerPairs[to] || automatedMarketMakerPairs[from]);\n\n        if (excludeFromLimits[from] || excludeFromLimits[to]) {\n            takeFee = false;\n        }\n        uint256 fees = 0;\n        // only take fees on buys/sells, do not take on wallet transfers\n        if (takeFee) {\n            // on sell\n            if (automatedMarketMakerPairs[to]) {\n                fees = (amount * sellTotalFees) / PERCENTAGE_BASE;\n            }\n            // on buy\n            else if (automatedMarketMakerPairs[from]) {\n                fees = (amount * buyTotalFees) / PERCENTAGE_BASE;\n            }\n            if (fees > 0) {\n                super._transfer(from, address(this), fees);\n                // token distribution\n                uint256 tokensForGen_ = (amount * GEN_FEE) / PERCENTAGE_BASE;\n                if (tokensForGen_ > fees) tokensForGen_ = fees;\n                // uint256 tokensForFees = fees.sub(tokensForGen_);\n                tokensForGen += tokensForGen_;\n                amount -= fees;\n                totalTaxTokens += fees;\n            }\n        }\n        super._transfer(from, to, amount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) internal {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = swapV2Router.WETH();\n\n        // make the swap\n        swapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal {\n        // add the liquidity\n        swapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    function createPairAndAddLP() public payable onlyOwner {\n        // create pair This:ETH\n        if (swapV2Pair == address(0)) {\n            IUniswapV2Factory factory = IUniswapV2Factory(\n                swapV2Router.factory()\n            );\n            swapV2Pair = factory.createPair(address(this), swapV2Router.WETH());\n        }\n        _setAutomatedMarketMakerPair(address(swapV2Pair), true);\n\n        addLiquidity(balanceOf(address(this)), address(this).balance);\n    }\n\n    function enableTrading() public payable onlyOwner {\n        require(!tradingActive, \"Trading is already open\");\n        // enable trading\n        tradingActive = true;\n        swapEnabled = true;\n        // block zero\n        block0 = block.number;\n    }\n\n    function openTrading() external payable onlyOwner {\n        createPairAndAddLP();\n        enableTrading();\n    }\n\n    function swapBack() internal virtual {\n        uint256 contractBalance = balanceOf(address(this));\n        if (contractBalance > swapTokensAtAmount * 20) {\n            contractBalance = swapTokensAtAmount * 20;\n        }\n        if (contractBalance == 0) return;\n\n        if (tokensForGen > contractBalance) tokensForGen = contractBalance;\n\n        uint256 tokensForFees = totalTaxTokens - tokensForGen;\n        // split tokens for benificiers\n        uint256 tokensBurn_;\n        uint256 tokensLiquid_;\n        uint256 tokensRevshare_;\n        uint256 tokensDev_;\n\n        if (totalFees > 0) {\n            tokensBurn_ = (tokensForFees * burnFee) / totalFees;\n            tokensLiquid_ = (tokensForFees * liquidityFee) / totalFees;\n            tokensRevshare_ = (tokensForFees * revshareFee) / totalFees;\n            tokensDev_ = (tokensForFees * devFee) / totalFees;\n            tokensForFees =\n                tokensBurn_ +\n                tokensLiquid_ +\n                tokensRevshare_ +\n                tokensDev_;\n        }\n\n        if (tokensForFees > contractBalance) {\n            tokensForFees = contractBalance;\n        }\n        tokensForGen = contractBalance - tokensForFees;\n\n        uint256 tokensForAddLiquidity = tokensLiquid_ / 2;\n\n        // swap all token except for Tokens to Add Liquidity and Burnt\n        uint256 totalTokensToSwap = contractBalance -\n            tokensForAddLiquidity -\n            tokensBurn_;\n\n        if (tokensBurn_ > 0) {\n            // transfer to dead\n            super._transfer(address(this), DEAD_ADDRESS, tokensBurn_);\n        }\n\n        if (totalTokensToSwap > 0) {\n            uint256 initEthBalance = address(this).balance;\n            swapTokensForEth(totalTokensToSwap);\n            uint256 ethBalance = address(this).balance - initEthBalance;\n\n            uint256 ethForGen = (ethBalance * tokensForGen) / totalTokensToSwap;\n            uint256 ethForRevshare = (ethBalance * tokensRevshare_) /\n                totalTokensToSwap;\n            uint256 ethForAddLiquidity = (ethBalance *\n                (tokensLiquid_ - tokensForAddLiquidity)) / totalTokensToSwap;\n\n            // send eth to benificiers\n            bool success;\n            if (ethForGen > 0) {\n                (success, ) = address(GEN_WALLET).call{value: ethForGen}(\"\");\n            }\n            if (ethForRevshare > 0) {\n                (success, ) = address(revShareWallet).call{\n                    value: ethForRevshare\n                }(\"\");\n            }\n            if (tokensForAddLiquidity > 0 && ethForAddLiquidity > 0) {\n                addLiquidity(tokensForAddLiquidity, ethForAddLiquidity);\n            }\n            if (address(this).balance > 0) {\n                (success, ) = address(devWallet).call{\n                    value: address(this).balance\n                }(\"\");\n            }\n        }\n        // reset token for GEN\n        tokensForGen = 0;\n        totalTaxTokens = 0;\n    }\n\n    function withdrawStuckToken(address _token, address _to) external onlyDev {\n        require(_token != address(0), \"_token address cannot be 0\");\n        ERC20 token = ERC20(_token);\n        token.transfer(_to, token.balanceOf(address(this)));\n    }\n\n    function withdrawStuckEth(address toAddr) external onlyDev {\n        (bool success, ) = toAddr.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    /************************************************************************/\n    function isContract(address account) private view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /** Not allow transfer owner */\n    function transferOwnership(address) public pure override {\n        revert(\"Not Allow Transfer Ownership.\");\n    }\n}\n",
    "etherscan_verified": true
}