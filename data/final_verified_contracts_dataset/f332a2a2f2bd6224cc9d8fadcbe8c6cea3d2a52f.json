{
    "address": "0xF332a2A2f2bD6224cC9D8FADCBE8C6Cea3d2a52f",
    "tx_hash": "b9010177362440552844042a7ed49decfd61792fa65c737e13adf4f6617f6100",
    "block_number": 18007234,
    "timestamp": 1693154243,
    "gas_used_in_creation": 1866890,
    "creation_bytecode": "60806040526007805460ff191690556014600881905560098181556004600a818155600b91909155600c839055600d839055600e929092555f600f55620000469162000346565b62000056906301312d006200035d565b601055620000676009600a62000346565b62000077906301312d006200035d565b601155620000886009600a62000346565b62000098906301312d006200035d565b601255620000a96009600a62000346565b620000b890624c4b406200035d565b6013556015805461ffff60a81b19169055348015620000d5575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060078054610100600160a81b03191661010033021790556200013b6009600a62000346565b6200014b90633b9aca006200035d565b335f908152600160208190526040822092909255600390620001745f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556007546101009004909116835291208054909216179055620001d73390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002106009600a62000346565b6200022090633b9aca006200035d565b60405190815260200160405180910390a362000377565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200028b57815f19048211156200026f576200026f62000237565b808516156200027d57918102915b93841c939080029062000250565b509250929050565b5f82620002a35750600162000340565b81620002b157505f62000340565b8160018114620002ca5760028114620002d557620002f5565b600191505062000340565b60ff841115620002e957620002e962000237565b50506001821b62000340565b5060208310610133831016604e8410600b84101617156200031a575081810a62000340565b6200032683836200024b565b805f19048211156200033c576200033c62000237565b0290505b92915050565b5f6200035660ff84168362000293565b9392505050565b808202811582820484141762000340576200034062000237565b6119ef80620003855f395ff3fe608060405260043610610129575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb14610348578063bf474bed14610367578063c876d0b91461037c578063c9567bf914610395578063dd62ed3e146103a9578063ec1f3f63146103ed575f80fd5b8063751039fc146102b85780637d1db4a5146102cc5780638da5cb5b146102e15780638f9a55c01461030757806395d89b411461031c575f80fd5b8063313ce567116100ee578063313ce567146102085780633bbac5791461022357806351bc3c851461025a57806370a0823114610270578063715018a6146102a4575f80fd5b806306fdde0314610134578063095ea7b3146101835780630faee56f146101b257806318160ddd146101d557806323b872dd146101e9575f80fd5b3661013057005b5f80fd5b34801561013f575f80fd5b5060408051808201909152601581527415d85c9b1d5cc813d98815d85b1b0814dd1c99595d605a1b60208201525b60405161017a91906115cb565b60405180910390f35b34801561018e575f80fd5b506101a261019d36600461162d565b61040c565b604051901515815260200161017a565b3480156101bd575f80fd5b506101c760135481565b60405190815260200161017a565b3480156101e0575f80fd5b506101c7610422565b3480156101f4575f80fd5b506101a2610203366004611657565b610442565b348015610213575f80fd5b506040516009815260200161017a565b34801561022e575f80fd5b506101a261023d366004611695565b6001600160a01b03165f9081526005602052604090205460ff1690565b348015610265575f80fd5b5061026e6104a9565b005b34801561027b575f80fd5b506101c761028a366004611695565b6001600160a01b03165f9081526001602052604090205490565b3480156102af575f80fd5b5061026e6104ff565b3480156102c3575f80fd5b5061026e610579565b3480156102d7575f80fd5b506101c760105481565b3480156102ec575f80fd5b505f546040516001600160a01b03909116815260200161017a565b348015610312575f80fd5b506101c760115481565b348015610327575f80fd5b50604080518082019091526004815263574f575360e01b602082015261016d565b348015610353575f80fd5b506101a261036236600461162d565b610634565b348015610372575f80fd5b506101c760125481565b348015610387575f80fd5b506007546101a29060ff1681565b3480156103a0575f80fd5b5061026e610640565b3480156103b4575f80fd5b506101c76103c33660046116b0565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b3480156103f8575f80fd5b5061026e6104073660046116e7565b6109e9565b5f610418338484610a33565b5060015b92915050565b5f61042f6009600a6117f2565b61043d90633b9aca00611800565b905090565b5f61044e848484610b56565b61049f843361049a85604051806060016040528060288152602001611992602891396001600160a01b038a165f908152600260209081526040808320338452909152902054919061122a565b610a33565b5060019392505050565b60075461010090046001600160a01b0316336001600160a01b0316146104cd575f80fd5b305f9081526001602052604090205480156104eb576104eb81611262565b4780156104fb576104fb816113eb565b5050565b5f546001600160a01b031633146105315760405162461bcd60e51b815260040161052890611817565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105a25760405162461bcd60e51b815260040161052890611817565b6105ae6009600a6117f2565b6105bc90633b9aca00611800565b6010556105cb6009600a6117f2565b6105d990633b9aca00611800565b6011556007805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106136009600a6117f2565b61062190633b9aca00611800565b60405190815260200160405180910390a1565b5f610418338484610b56565b5f546001600160a01b031633146106695760405162461bcd60e51b815260040161052890611817565b601554600160a01b900460ff16156106c35760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610528565b601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561070c9030906106fe6009600a6117f2565b61049a90633b9aca00611800565b60145f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561075c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610780919061184c565b6001600160a01b031663c9c653963060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107df573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610803919061184c565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561084d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610871919061184c565b601580546001600160a01b039283166001600160a01b03199091161790556014541663f305d71947306108b8816001600160a01b03165f9081526001602052604090205490565b5f806108cb5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610931573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906109569190611867565b505060155460145460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156109ab573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109cf9190611892565b506015805462ff00ff60a01b19166201000160a01b179055565b60075461010090046001600160a01b0316336001600160a01b031614610a0d575f80fd5b600a548111158015610a215750600b548111155b610a29575f80fd5b600a819055600b55565b6001600160a01b038316610a955760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610528565b6001600160a01b038216610af65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610528565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610bba5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610528565b6001600160a01b038216610c1c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610528565b5f8111610c7d5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610528565b5f80546001600160a01b03858116911614801590610ca857505f546001600160a01b03848116911614155b156110ed576001600160a01b0384165f9081526005602052604090205460ff16158015610ced57506001600160a01b0383165f9081526005602052604090205460ff16155b610cf5575f80fd5b60075460ff1615610dac576014546001600160a01b03848116911614801590610d2c57506015546001600160a01b03848116911614155b15610dac57325f908152600660205260409020544311610d9a5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b6064820152608401610528565b325f9081526006602052604090204390555b6015546001600160a01b038581169116148015610dd757506014546001600160a01b03848116911614155b8015610dfb57506001600160a01b0383165f9081526003602052604090205460ff16155b15610f1657601054821115610e4e5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610528565b60115482610e70856001600160a01b03165f9081526001602052604090205490565b610e7a91906118b1565b1115610ec85760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e0000000000006044820152606401610528565b600e54600f541015610edf57823b15610edf575f80fd5b600f8054905f610eee836118c4565b90915550506001600160a01b0383165f908152600460205260409020805460ff191660011790555b610f426064610f3c600c54600f5411610f3157600854610f35565b600a545b8590611426565b906114ab565b6015549091506001600160a01b038481169116148015610f6b57506001600160a01b0384163014155b1561105057601054821115610fbe5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610528565b610fe36064610f3c600d54600f5411610fd957600954610f35565b600b548590611426565b9050600e54600f54118061100e57506001600160a01b0384165f9081526004602052604090205460ff165b6110505760405162461bcd60e51b815260206004820152601360248201527229b2b63632b91034b9903737ba10313abcb2b960691b6044820152606401610528565b305f90815260016020526040902054601554600160a81b900460ff1615801561108657506015546001600160a01b038581169116145b801561109b5750601554600160b01b900460ff165b80156110a8575060125481115b80156110b75750600e54600f54115b156110eb576110d96110d4846110cf846013546114ec565b6114ec565b611262565b4780156110e9576110e9476113eb565b505b505b801561116557305f9081526001602052604090205461110c9082611500565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061115c9085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054611187908361155e565b6001600160a01b0385165f908152600160205260409020556111ca6111ac838361155e565b6001600160a01b0385165f9081526001602052604090205490611500565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef611213858561155e565b60405190815260200160405180910390a350505050565b5f818484111561124d5760405162461bcd60e51b815260040161052891906115cb565b505f61125984866118dc565b95945050505050565b6015805460ff60a81b1916600160a81b17905580156113db57601554600160a01b900460ff16156113db576040805160028082526060820183525f9260208301908036833701905050905030815f815181106112c0576112c06118ef565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611317573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061133b919061184c565b8160018151811061134e5761134e6118ef565b6001600160a01b0392831660209182029290920101526014546113749130911684610a33565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac947906113ac9085905f90869030904290600401611903565b5f604051808303815f87803b1580156113c3575f80fd5b505af11580156113d5573d5f803e3d5ffd5b50505050505b506015805460ff60a81b19169055565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104fb573d5f803e3d5ffd5b5f825f0361143557505f61041c565b5f6114408385611800565b90508261144d8583611972565b146114a45760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610528565b9392505050565b5f6114a483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061159f565b5f8183116114fa57826114a4565b50919050565b5f8061150c83856118b1565b9050838110156114a45760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610528565b5f6114a483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061122a565b5f81836115bf5760405162461bcd60e51b815260040161052891906115cb565b505f6112598486611972565b5f6020808352835180828501525f5b818110156115f6578581018301518582016040015282016115da565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461162a575f80fd5b50565b5f806040838503121561163e575f80fd5b823561164981611616565b946020939093013593505050565b5f805f60608486031215611669575f80fd5b833561167481611616565b9250602084013561168481611616565b929592945050506040919091013590565b5f602082840312156116a5575f80fd5b81356114a481611616565b5f80604083850312156116c1575f80fd5b82356116cc81611616565b915060208301356116dc81611616565b809150509250929050565b5f602082840312156116f7575f80fd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561174c57815f1904821115611732576117326116fe565b8085161561173f57918102915b93841c9390800290611717565b509250929050565b5f826117625750600161041c565b8161176e57505f61041c565b8160018114611784576002811461178e576117aa565b600191505061041c565b60ff84111561179f5761179f6116fe565b50506001821b61041c565b5060208310610133831016604e8410600b84101617156117cd575081810a61041c565b6117d78383611712565b805f19048211156117ea576117ea6116fe565b029392505050565b5f6114a460ff841683611754565b808202811582820484141761041c5761041c6116fe565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f6020828403121561185c575f80fd5b81516114a481611616565b5f805f60608486031215611879575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156118a2575f80fd5b815180151581146114a4575f80fd5b8082018082111561041c5761041c6116fe565b5f600182016118d5576118d56116fe565b5060010190565b8181038181111561041c5761041c6116fe565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156119515784516001600160a01b03168352938301939183019160010161192c565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261198c57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220caac5d0ee15e5cdbcd8613df8f54a5f5155cacb39f076868b203dc44d52458c564736f6c63430008140033",
    "runtime_bytecode": "608060405260043610610129575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb14610348578063bf474bed14610367578063c876d0b91461037c578063c9567bf914610395578063dd62ed3e146103a9578063ec1f3f63146103ed575f80fd5b8063751039fc146102b85780637d1db4a5146102cc5780638da5cb5b146102e15780638f9a55c01461030757806395d89b411461031c575f80fd5b8063313ce567116100ee578063313ce567146102085780633bbac5791461022357806351bc3c851461025a57806370a0823114610270578063715018a6146102a4575f80fd5b806306fdde0314610134578063095ea7b3146101835780630faee56f146101b257806318160ddd146101d557806323b872dd146101e9575f80fd5b3661013057005b5f80fd5b34801561013f575f80fd5b5060408051808201909152601581527415d85c9b1d5cc813d98815d85b1b0814dd1c99595d605a1b60208201525b60405161017a91906115cb565b60405180910390f35b34801561018e575f80fd5b506101a261019d36600461162d565b61040c565b604051901515815260200161017a565b3480156101bd575f80fd5b506101c760135481565b60405190815260200161017a565b3480156101e0575f80fd5b506101c7610422565b3480156101f4575f80fd5b506101a2610203366004611657565b610442565b348015610213575f80fd5b506040516009815260200161017a565b34801561022e575f80fd5b506101a261023d366004611695565b6001600160a01b03165f9081526005602052604090205460ff1690565b348015610265575f80fd5b5061026e6104a9565b005b34801561027b575f80fd5b506101c761028a366004611695565b6001600160a01b03165f9081526001602052604090205490565b3480156102af575f80fd5b5061026e6104ff565b3480156102c3575f80fd5b5061026e610579565b3480156102d7575f80fd5b506101c760105481565b3480156102ec575f80fd5b505f546040516001600160a01b03909116815260200161017a565b348015610312575f80fd5b506101c760115481565b348015610327575f80fd5b50604080518082019091526004815263574f575360e01b602082015261016d565b348015610353575f80fd5b506101a261036236600461162d565b610634565b348015610372575f80fd5b506101c760125481565b348015610387575f80fd5b506007546101a29060ff1681565b3480156103a0575f80fd5b5061026e610640565b3480156103b4575f80fd5b506101c76103c33660046116b0565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b3480156103f8575f80fd5b5061026e6104073660046116e7565b6109e9565b5f610418338484610a33565b5060015b92915050565b5f61042f6009600a6117f2565b61043d90633b9aca00611800565b905090565b5f61044e848484610b56565b61049f843361049a85604051806060016040528060288152602001611992602891396001600160a01b038a165f908152600260209081526040808320338452909152902054919061122a565b610a33565b5060019392505050565b60075461010090046001600160a01b0316336001600160a01b0316146104cd575f80fd5b305f9081526001602052604090205480156104eb576104eb81611262565b4780156104fb576104fb816113eb565b5050565b5f546001600160a01b031633146105315760405162461bcd60e51b815260040161052890611817565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105a25760405162461bcd60e51b815260040161052890611817565b6105ae6009600a6117f2565b6105bc90633b9aca00611800565b6010556105cb6009600a6117f2565b6105d990633b9aca00611800565b6011556007805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106136009600a6117f2565b61062190633b9aca00611800565b60405190815260200160405180910390a1565b5f610418338484610b56565b5f546001600160a01b031633146106695760405162461bcd60e51b815260040161052890611817565b601554600160a01b900460ff16156106c35760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610528565b601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561070c9030906106fe6009600a6117f2565b61049a90633b9aca00611800565b60145f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561075c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610780919061184c565b6001600160a01b031663c9c653963060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107df573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610803919061184c565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561084d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610871919061184c565b601580546001600160a01b039283166001600160a01b03199091161790556014541663f305d71947306108b8816001600160a01b03165f9081526001602052604090205490565b5f806108cb5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610931573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906109569190611867565b505060155460145460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156109ab573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109cf9190611892565b506015805462ff00ff60a01b19166201000160a01b179055565b60075461010090046001600160a01b0316336001600160a01b031614610a0d575f80fd5b600a548111158015610a215750600b548111155b610a29575f80fd5b600a819055600b55565b6001600160a01b038316610a955760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610528565b6001600160a01b038216610af65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610528565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610bba5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610528565b6001600160a01b038216610c1c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610528565b5f8111610c7d5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610528565b5f80546001600160a01b03858116911614801590610ca857505f546001600160a01b03848116911614155b156110ed576001600160a01b0384165f9081526005602052604090205460ff16158015610ced57506001600160a01b0383165f9081526005602052604090205460ff16155b610cf5575f80fd5b60075460ff1615610dac576014546001600160a01b03848116911614801590610d2c57506015546001600160a01b03848116911614155b15610dac57325f908152600660205260409020544311610d9a5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b6064820152608401610528565b325f9081526006602052604090204390555b6015546001600160a01b038581169116148015610dd757506014546001600160a01b03848116911614155b8015610dfb57506001600160a01b0383165f9081526003602052604090205460ff16155b15610f1657601054821115610e4e5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610528565b60115482610e70856001600160a01b03165f9081526001602052604090205490565b610e7a91906118b1565b1115610ec85760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e0000000000006044820152606401610528565b600e54600f541015610edf57823b15610edf575f80fd5b600f8054905f610eee836118c4565b90915550506001600160a01b0383165f908152600460205260409020805460ff191660011790555b610f426064610f3c600c54600f5411610f3157600854610f35565b600a545b8590611426565b906114ab565b6015549091506001600160a01b038481169116148015610f6b57506001600160a01b0384163014155b1561105057601054821115610fbe5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b6044820152606401610528565b610fe36064610f3c600d54600f5411610fd957600954610f35565b600b548590611426565b9050600e54600f54118061100e57506001600160a01b0384165f9081526004602052604090205460ff165b6110505760405162461bcd60e51b815260206004820152601360248201527229b2b63632b91034b9903737ba10313abcb2b960691b6044820152606401610528565b305f90815260016020526040902054601554600160a81b900460ff1615801561108657506015546001600160a01b038581169116145b801561109b5750601554600160b01b900460ff165b80156110a8575060125481115b80156110b75750600e54600f54115b156110eb576110d96110d4846110cf846013546114ec565b6114ec565b611262565b4780156110e9576110e9476113eb565b505b505b801561116557305f9081526001602052604090205461110c9082611500565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061115c9085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054611187908361155e565b6001600160a01b0385165f908152600160205260409020556111ca6111ac838361155e565b6001600160a01b0385165f9081526001602052604090205490611500565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef611213858561155e565b60405190815260200160405180910390a350505050565b5f818484111561124d5760405162461bcd60e51b815260040161052891906115cb565b505f61125984866118dc565b95945050505050565b6015805460ff60a81b1916600160a81b17905580156113db57601554600160a01b900460ff16156113db576040805160028082526060820183525f9260208301908036833701905050905030815f815181106112c0576112c06118ef565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611317573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061133b919061184c565b8160018151811061134e5761134e6118ef565b6001600160a01b0392831660209182029290920101526014546113749130911684610a33565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac947906113ac9085905f90869030904290600401611903565b5f604051808303815f87803b1580156113c3575f80fd5b505af11580156113d5573d5f803e3d5ffd5b50505050505b506015805460ff60a81b19169055565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104fb573d5f803e3d5ffd5b5f825f0361143557505f61041c565b5f6114408385611800565b90508261144d8583611972565b146114a45760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610528565b9392505050565b5f6114a483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061159f565b5f8183116114fa57826114a4565b50919050565b5f8061150c83856118b1565b9050838110156114a45760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610528565b5f6114a483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061122a565b5f81836115bf5760405162461bcd60e51b815260040161052891906115cb565b505f6112598486611972565b5f6020808352835180828501525f5b818110156115f6578581018301518582016040015282016115da565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461162a575f80fd5b50565b5f806040838503121561163e575f80fd5b823561164981611616565b946020939093013593505050565b5f805f60608486031215611669575f80fd5b833561167481611616565b9250602084013561168481611616565b929592945050506040919091013590565b5f602082840312156116a5575f80fd5b81356114a481611616565b5f80604083850312156116c1575f80fd5b82356116cc81611616565b915060208301356116dc81611616565b809150509250929050565b5f602082840312156116f7575f80fd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561174c57815f1904821115611732576117326116fe565b8085161561173f57918102915b93841c9390800290611717565b509250929050565b5f826117625750600161041c565b8161176e57505f61041c565b8160018114611784576002811461178e576117aa565b600191505061041c565b60ff84111561179f5761179f6116fe565b50506001821b61041c565b5060208310610133831016604e8410600b84101617156117cd575081810a61041c565b6117d78383611712565b805f19048211156117ea576117ea6116fe565b029392505050565b5f6114a460ff841683611754565b808202811582820484141761041c5761041c6116fe565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f6020828403121561185c575f80fd5b81516114a481611616565b5f805f60608486031215611879575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156118a2575f80fd5b815180151581146114a4575f80fd5b8082018082111561041c5761041c6116fe565b5f600182016118d5576118d56116fe565b5060010190565b8181038181111561041c5761041c6116fe565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156119515784516001600160a01b03168352938301939183019160010161192c565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261198c57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220caac5d0ee15e5cdbcd8613df8f54a5f5155cacb39f076868b203dc44d52458c564736f6c63430008140033",
    "contract_name": "WOWS",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"reduceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n/**\r\n\r\n$WOWS\r\n\r\nMEET THE LEGENDARY\r\n\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\r\n\r\nWALRUS OF WALL STREET\r\n\r\nHey there, thrill-seeking traders and finance enthusiasts! Welcome aboard the wildest ride on Wall Street - the one and only Walrus of Wall Street (WOWS)! Grab your snorkels and join me, the legendary walrus who went from flipping fish to flipping fortunes. Ready to dive in?\r\n\r\nTG: https://t.me/WOWSPORTAL\r\n\r\nWEB: walrusofwallstreet.com\r\n\r\nTwitter: https://twitter.com/walrus_Erc\r\n\r\n**/\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract WOWS is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _buyerMap;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=20;\r\n    uint256 private _initialSellTax=20;\r\n    uint256 private _finalBuyTax=4;\r\n    uint256 private _finalSellTax=4;\r\n    uint256 private _reduceBuyTaxAt=20;\r\n    uint256 private _reduceSellTaxAt=20;\r\n    uint256 private _preventSwapBefore=20;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 1000000000 * 10**_decimals;\r\n    string private constant _name = unicode\"Warlus Of Wall Street\";\r\n    string private constant _symbol = unicode\"WOWS\";\r\n    uint256 public _maxTxAmount =   20000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 20000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold=20000000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap=5000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_buyCount<_preventSwapBefore){\r\n                  require(!isContract(to));\r\n                }\r\n                _buyCount++;\r\n                _buyerMap[to]=true;\r\n            }\r\n\r\n\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n                require(_buyCount>_preventSwapBefore || _buyerMap[from],\"Seller is not buyer\");\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    function reduceFee(uint256 _newFee) external{\r\n      require(_msgSender()==_taxWallet);\r\n      require(_newFee<=_finalBuyTax && _newFee<=_finalSellTax);\r\n      _finalBuyTax=_newFee;\r\n      _finalSellTax=_newFee;\r\n    }\r\n    \r\n}",
    "etherscan_verified": true
}