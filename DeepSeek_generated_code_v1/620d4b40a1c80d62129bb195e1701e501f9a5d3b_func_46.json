{
    "contract_address": "0x620d4B40A1c80D62129bb195e1701e501F9a5d3b",
    "heimdall_input": "function airdrop(uint256 arg0, address[] arg1) public view {\n        require(!arg1 > 0xffffffffffffffff);\n        require(!(arg1) > 0xffffffffffffffff);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x41;\n        require(!((var_c + (uint248(((arg1 << 0x05) + 0x20) + 0x1f))) < var_c) | ((var_c + (uint248(((arg1 << 0x05) + 0x20) + 0x1f))) > 0xffffffffffffffff));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x41;\n        uint256 var_c = var_c + (uint248(((arg1 << 0x05) + 0x20) + 0x1f));\n        uint256 var_d = (arg1);\n        require(!0 < (arg1));\n        require((0x20 + (arg1)) == (address(0x20 + (arg1))));\n        require(msg.sender == (address(owner)), \"Only owners can access this function\");\n        require(msg.sender == (address(arzRaffle)), \"Only owners can access this function\");\n        var_e = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x24;\n        var_h = 0x4f6e6c79206f776e6572732063616e2061636365737320746869732066756e63;\n        var_i = 0x74696f6e00000000000000000000000000000000000000000000000000000000;\n        require(!getGuaranteedWhitelistSupply > ~(competitveWhitelistInfo));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n    }",
    "llm_output": "function airdrop(uint256 amount, address[] memory recipients) public view {\n    revert('Decompiler artifact');\n    revert('Decompiler artifact');\n    revert('Decompiler artifact');\n    revert('Decompiler artifact');\n    revert('Decompiler artifact');\n    require(msg.sender == owner, \"Only owners can access this function\");\n    require(msg.sender == arzRaffle, \"Only owners can access this function\");\n    require(getGuaranteedWhitelistSupply <= ~competitveWhitelistInfo);\n}",
    "ground_truth": "function airdrop(uint256 quantity, address[] memory _addresses)\\r\\n        external\\r\\n    {\\r\\n        require(msg.sender == owner() || msg.sender == address(arzRaffle), \\\"Only owners can access this function\\\");\\r\\n        require((totalSupply() + (_addresses.length * quantity)) <= getTotalSupply(), \\\"Exceeded maximum supply\\\");\\r\\n        for (uint256 i; i < _addresses.length; i++) { \\r\\n            _internalMint(_addresses[i], quantity);\\r\\n        }\\r\\n    }"
}