{
    "contract_address": "0x78D08E5831eeA6c6c6Af34d700F79A5b00873efE",
    "heimdall_input": "function openTrading() public {\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(store_g / 0x010000000000000000000000000000000000000000)), \"trading is already open\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x17;\n        var_e = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n        store_f = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_f));\n        require(0x09, \"ERC20: approve to the zero address\");\n        require(!0x174876e800 | (0x01 == 0x01), \"ERC20: approve to the zero address\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(address(this) - 0, \"ERC20: approve to the zero address\");\n        require(address(store_f / 0x01) - 0, \"ERC20: approve to the zero address\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x22;\n        var_e = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_h = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        address var_f = address(this);\n        var_i = 0x02;\n        var_f = address(store_f / 0x01);\n        address var_i = keccak256(var_f);\n        storage_map_n[var_f] = 0x174876e800;\n        var_a = 0x174876e800;\n        emit Approval(address(this), address(store_f / 0x01), 0x174876e800);\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f / 0x01).factory(var_b); // staticcall\n        uint256 var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_j == (address(var_j)));\n        var_k = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f / 0x01).WETH(var_d); // staticcall\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_j == (address(var_j)));\n        var_l = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_e = address(this);\n        address var_h = address(var_j);\n        (bool success, bytes memory ret0) = address(var_j).Unresolved_c9c65396(var_e); // call\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x24;\n        var_e = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_h = 0x7265737300000000000000000000000000000000000000000000000000000000;\n        if (0x0a) {\n            if (0x0a == 0x01) {\n                if (0x0a == 0x02) {\n                    if (!0x09 > 0xff) {\n                        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_g = 0x11;\n                        if (!0x0200 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                            var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_g = 0x11;\n                            if (!((0x0a < 0x0b) & (0x09 < 0x4e)) | ((0x0a < 0x0133) & (0x09 < 0x20))) {\n                                if (!0x09 > 0x01) {\n                                    if (!0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        var_g = 0x11;\n                                        if (!0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                            var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                            var_g = 0x11;\n                                            if (!0x01) {\n                                            }\n                                            if (!0x3b9aca00 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                                                var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                                var_g = 0x11;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function openTrading() public {\n    require(address(owner / 0x01) == address(msg.sender), \"Ownable: caller is not the owner\");\n    bytes32 errorSig = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 errorLength = ((0x04 + memPtr) + 0x20) - (0x04 + memPtr);\n    uint256 errorStringLength = 0x20;\n    bytes32 errorPart1 = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n    require(!bytes1(_tradingOpenFlag / 0x010000000000000000000000000000000000000000), \"trading is already open\");\n    errorSig = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorLength = ((0x04 + memPtr) + 0x20) - (0x04 + memPtr);\n    errorStringLength = 0x17;\n    errorPart1 = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n    _uniswapRouterAndValue = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D | uint96(_uniswapRouterAndValue);\n    require(true, \"ERC20: approve to the zero address\");\n    require(!0x174876e800 | (0x01 == 0x01), \"ERC20: approve to the zero address\");\n    bytes32 temp1 = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 temp2 = 0x11;\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(address(_uniswapRouterAndValue) != address(0), \"ERC20: approve to the zero address\");\n    errorSig = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorLength = ((0x04 + memPtr) + 0x20) - (0x04 + memPtr);\n    errorStringLength = 0x22;\n    errorPart1 = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    bytes32 errorPart2 = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    address spender = address(this);\n    uint256 amount = 0x02;\n    spender = address(_uniswapRouterAndValue);\n    address owner = keccak256(abi.encode(spender));\n    _allowances[spender] = 0x174876e800;\n    uint256 approvalAmount = 0x174876e800;\n    emit Approval(address(this), address(_uniswapRouterAndValue), 0x174876e800);\n    bytes4 selector1 = 0xc45a0155;\n    (bool success1, bytes memory ret1) = address(_uniswapRouterAndValue).staticcall(abi.encodeWithSelector(selector1, errorLength));\n    memPtr = memPtr + uint248(ret1.length + 0x1f);\n    require(ret1.length >= 0x20);\n    require(factoryAddress == address(factoryAddress));\n    bytes4 selector2 = 0xad5c4648;\n    (bool success2, bytes memory ret2) = address(_uniswapRouterAndValue).staticcall(abi.encodeWithSelector(selector2, errorStringLength));\n    memPtr = memPtr + uint248(ret2.length + 0x1f);\n    require(ret2.length >= 0x20);\n    require(wethAddress == address(wethAddress));\n    bytes4 selector3 = 0xc9c65396;\n    address tokenA = address(this);\n    address tokenB = address(wethAddress);\n    (bool success3, bytes memory ret3) = address(factoryAddress).call(abi.encodeWithSelector(selector3, tokenA));\n    errorSig = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorLength = ((0x04 + memPtr) + 0x20) - (0x04 + memPtr);\n    errorStringLength = 0x24;\n    errorPart1 = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    errorPart2 = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    if (0x0a != 0) {\n        if (0x0a == 0x01) {\n            if (0x0a == 0x02) {\n                if (!(0x09 > 0xff)) {\n                    temp1 = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    temp2 = 0x11;\n                    if (!(0x0200 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) {\n                        temp1 = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        temp2 = 0x11;\n                        if (!((0x0a < 0x0b) & (0x09 < 0x4e)) | ((0x0a < 0x0133) & (0x09 < 0x20))) {\n                            if (!(0x09 > 0x01)) {\n                                if (!(0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999)) {\n                                    temp1 = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                    temp2 = 0x11;\n                                    if (!(0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999)) {\n                                        temp1 = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        temp2 = 0x11;\n                                        if (!0x01) {\n                                        }\n                                        if (!(0x3b9aca00 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) {\n                                            temp1 = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                            temp2 = 0x11;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "ground_truth": "function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }"
}