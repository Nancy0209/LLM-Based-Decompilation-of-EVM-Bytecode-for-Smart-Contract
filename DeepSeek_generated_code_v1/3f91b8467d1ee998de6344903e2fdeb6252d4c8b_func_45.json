{
    "contract_address": "0x3f91B8467d1eE998DE6344903e2fDEB6252d4c8b",
    "heimdall_input": "function ManualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_i[var_a] > 0);\n        store_h = (0x01 * 0x01000000000000000000000000000000000000000000) | (uint248(store_h));\n        require(!0x02 > 0xffffffffffffffff);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x41;\n        var_d = 0x02;\n        uint256 var_e = var_e + 0x60;\n        require(!0x02);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        address var_f = address(this);\n        var_g = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_g / 0x01).WETH(var_h); // staticcall\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!(((var_e + ret0.length) - var_e) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_i == (address(var_i)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        address var_j = address(var_i);\n        require(address(this) - 0, \"ERC20: approve to the zero address\");\n        require(address(store_g / 0x01) - 0, \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_l = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_g / 0x01);\n        address var_b = keccak256(var_a);\n        storage_map_i[var_a] = storage_map_i[var_a];\n        address var_k = storage_map_i[var_a];\n        emit Approval(address(this), address(store_g / 0x01), storage_map_i[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        var_l = storage_map_i[var_a];\n        uint256 var_m = 0;\n        uint256 var_n = ((0x04 + var_e) + 0xa0) - (0x04 + var_e);\n        uint256 var_p = var_e.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_g / 0x01).code.length);\n        (bool success, bytes memory ret0) = address(store_g / 0x01).Unresolved_791ac947(var_l); // call\n        store_h = (0 * 0x01000000000000000000000000000000000000000000) | (uint248(store_h));\n        require(!address(this).balance > 0);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function ManualSwap() public {\n    address owner = address(uint160(transferDelayEnabled / 0x0100));\n    require(msg.sender == owner);\n\n    address tokenAddress = address(this);\n    revert('Decompiler artifact');\n\n    flags = (0x01 * 0x01000000000000000000000000000000000000000000) | uint248(flags);\n    revert('Decompiler artifact');\n\n    tokenAddress = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 errorCode = 0x41;\n    uint256 errorArg = 0x02;\n    uint256 memPointer = memPointer + 0x60;\n    revert('Decompiler artifact');\n\n    tokenAddress = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorCode = 0x32;\n    address spender = address(this);\n    bytes4 wethSelector = 0xad5c4648;\n    (bool success, bytes memory retData) = router.staticcall(abi.encodeWithSelector(wethSelector));\n    memPointer = memPointer + (uint248(retData.length + 0x1f));\n    require(retData.length >= 32, \"ERC20: approve to the zero address\");\n    require(spender == address(spender), \"ERC20: approve to the zero address\");\n\n    tokenAddress = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorCode = 0x32;\n    address approvalAddress = address(spender);\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(router != address(0), \"ERC20: approve to the zero address\");\n\n    bytes4 errorSelector = 0x08c379a0;\n    uint256 errorLength = ((0x04 + memPointer) + 0x20) - (0x04 + memPointer);\n    uint256 errorMessagePtr = 0x22;\n    bytes32 errorPart1 = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    bytes32 errorPart2 = 0x7373000000000000000000000000000000000000000000000000000000000000;\n\n    tokenAddress = address(this);\n    uint256 approvalFlag = 0x02;\n    tokenAddress = router;\n    bytes32 storageSlot = keccak256(abi.encode(address(this), uint256(3));\n    allowances[tokenAddress] = allowances[tokenAddress];\n    address allowanceOwner = allowances[tokenAddress];\n    emit Approval(address(this), router, allowances[tokenAddress]);\n\n    bytes4 swapSelector = 0x791ac947;\n    uint256 amountIn = allowances[tokenAddress];\n    uint256 amountOutMin = 0;\n    uint256 pathLength = ((0x04 + memPointer) + 0xa0) - (0x04 + memPointer);\n    uint256 pathOffset;\n    address recipient = address(this);\n    uint256 deadline = block.timestamp;\n    require(router.code.length > 0);\n    (success, retData) = router.call(abi.encodeWithSelector(swapSelector, amountIn, amountOutMin, pathOffset, recipient, deadline));\n    flags = (0 * 0x01000000000000000000000000000000000000000000) | uint248(flags);\n    revert('Decompiler artifact');\n\n    (success, retData) = owner.call{value: address(this).balance}(\"\");\n    errorSelector = 0x08c379a0;\n    errorLength = ((0x04 + memPointer) + 0x20) - (0x04 + memPointer);\n    errorMessagePtr = 0x24;\n    errorPart1 = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    errorPart2 = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function ManualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}