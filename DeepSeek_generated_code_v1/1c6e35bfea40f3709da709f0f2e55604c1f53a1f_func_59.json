{
    "contract_address": "0x1c6e35bFEA40f3709DA709f0f2e55604C1F53a1f",
    "heimdall_input": "function transferFrom(address arg0, address arg1, uint256 arg2) public payable returns (bool) {\n        address var_a = address(arg0);\n        var_b = 0x05;\n        var_a = address(msg.sender);\n        address var_b = keccak256(var_a);\n        require(storage_map_a[var_a] == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \"ERC20: transfer amount exceeds balance\");\n        require(address(arg0), \"ERC20: transfer amount exceeds balance\");\n        require(address(arg1), \"ERC20: transfer amount exceeds balance\");\n        var_a = address(arg0);\n        var_b = 0x04;\n        require(!(storage_map_a[var_a] < arg2), \"ERC20: transfer amount exceeds balance\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_d = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        var_f = 0x26;\n        var_g = this.code[5182:5220];\n        require(!(arg2 > storage_map_a[var_a]), \"SafeMath: subtraction overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_f = 0x1e;\n        var_h = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        var_a = address(arg0);\n        var_b = 0x04;\n        storage_map_a[var_a] = storage_map_a[var_a] - arg2;\n        var_a = address(arg1);\n        require(!((arg2 + storage_map_a[var_a]) < storage_map_a[var_a]), \"SafeMath: addition overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_f = 0x1b;\n        var_h = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(arg1);\n        var_b = 0x04;\n        storage_map_a[var_a] = arg2 + storage_map_a[var_a];\n        uint256 var_c = arg2;\n        emit Transfer(address(arg0), address(arg1), arg2);\n        var_c = 0x01;\n        return 0x01;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        var_f = 0x23;\n        var_g = this.code[5113:5148];\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        var_f = 0x25;\n        var_g = this.code[5220:5257];\n        require(!(storage_map_a[var_a] < arg2), \"ERC20: insufficient allowance\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_f = 0x1d;\n        var_h = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n        require(address(arg0), \"ERC20: approve to the zero address\");\n        require(address(msg.sender), \"ERC20: approve to the zero address\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        var_f = 0x22;\n        var_g = this.code[5148:5182];\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        var_f = 0x24;\n        var_g = this.code[5257:5293];\n    }",
    "llm_output": "function transferFrom(address from, address to, uint256 amount) public payable returns (bool) {\n    require(_allowances[from][msg.sender] == type(uint256).max, \"ERC20: transfer amount exceeds balance\");\n    require(from != address(0), \"ERC20: transfer amount exceeds balance\");\n    require(to != address(0), \"ERC20: transfer amount exceeds balance\");\n    require(_balances[from] >= amount, \"ERC20: transfer amount exceeds balance\");\n    \n    require(amount <= _balances[from], \"SafeMath: subtraction overflow\");\n    _balances[from] -= amount;\n    \n    uint256 newBalance = _balances[to] + amount;\n    require(newBalance >= _balances[to], \"SafeMath: addition overflow\");\n    _balances[to] = newBalance;\n    \n    emit Transfer(from, to, amount);\n    return true;\n}",
    "ground_truth": "function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _spendAllowance(from, msg.sender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }"
}