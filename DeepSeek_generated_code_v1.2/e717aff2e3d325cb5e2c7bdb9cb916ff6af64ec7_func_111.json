{
    "contract_address": "0xE717AFf2e3d325cb5E2c7bdB9CB916ff6AF64ec7",
    "heimdall_input": "function decreaseAllowance(address arg0, uint256 arg1) public payable returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(arg1 == arg1);\n        address var_a = address(msg.sender);\n        var_b = 0x01;\n        var_a = address(arg0);\n        address var_b = keccak256(var_a);\n        require(!(arg1 > storage_map_b[var_a]), \"SafeMath: subtraction overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x1e;\n        var_g = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(storage_map_b[var_a] - arg1) > storage_map_b[var_a]);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(address(msg.sender) - (address(msg.sender)));\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        var_a = address(arg0);\n        var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        uint256 var_c = storage_map_b[var_a] - arg1;\n        emit Approval(address(msg.sender), address(arg0), storage_map_b[var_a] - arg1);\n        var_c = 0x01;\n        return 0x01;\n        var_a = address(arg0);\n        var_b = 0x01;\n        var_a = address(msg.sender);\n        var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        var_c = storage_map_b[var_a] - arg1;\n        emit Approval(address(arg0), address(msg.sender), storage_map_b[var_a] - arg1);\n        var_c = 0x01;\n        return 0x01;\n    }",
    "llm_output": "function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender == address(spender));\n    require(subtractedValue == subtractedValue);\n    address owner = msg.sender;\n    uint256 unused1 = 0x01;\n    address spenderAddress = spender;\n    bytes32 allowanceKey = keccak256(abi.encodePacked(spenderAddress));\n    require(_allowances[allowanceKey] >= subtractedValue, \"SafeMath: subtraction overflow\");\n    uint256 errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 stringOffset = ((0x04 + 0x20) - 0x04);\n    uint256 stringLength = 0x1e;\n    uint256 errorString = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n    require(!(uint256(_allowances[allowanceKey] - subtractedValue) > _allowances[allowanceKey]);\n    uint256 panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 panicCode = 0x11;\n    revert('Decompiler artifact');\n    if (false) {\n        address owner1 = msg.sender;\n        uint256 unused2 = 0x01;\n        address spenderAddress1 = spender;\n        bytes32 key1 = keccak256(abi.encodePacked(spenderAddress1));\n        _allowances[key1] = _allowances[key1] - subtractedValue;\n        uint256 newAllowance = _allowances[key1] - subtractedValue;\n        emit Approval(owner1, spenderAddress1, newAllowance);\n        return true;\n    }\n    if (false) {\n        address spenderAddress2 = spender;\n        uint256 unused3 = 0x01;\n        address owner2 = msg.sender;\n        bytes32 key2 = keccak256(abi.encodePacked(owner2));\n        _allowances[key2] = _allowances[key2] - subtractedValue;\n        uint256 newAllowance2 = _allowances[key2] - subtractedValue;\n        emit Approval(spenderAddress2, owner2, newAllowance2);\n        return true;\n    }\n}",
    "ground_truth": "function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }"
}