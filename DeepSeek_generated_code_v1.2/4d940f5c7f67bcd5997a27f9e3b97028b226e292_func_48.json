{
    "contract_address": "0x4d940f5C7f67BcD5997a27F9E3b97028B226e292",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (!(store_a) == ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (!(store_a) == ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    if (!0 > var_c.length) {\n                                        uint256 var_g = 0;\n                                        return abi.encodePacked(0x20, var_c.length);\n                                        return abi.encodePacked(0x20, var_c.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory) {\n    if (conditionFlag) {\n        if (!conditionFlag == (conditionFlag / 2 < 32)) {\n            uint256 errorSig = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            uint256 errorCode = 0x22;\n            uint256 memPointer = memPointer + (32 + ((31 + conditionFlag / 2) / 32 * 32));\n            uint256 strLength = conditionFlag / 2;\n            if (conditionFlag) {\n                if (!conditionFlag == (conditionFlag / 2 < 32)) {\n                    errorSig = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    errorCode = 0x22;\n                    if (conditionFlag / 2 == 0) {\n                        if (31 < conditionFlag / 2) {\n                            errorSig = 4;\n                            bytes32 storedData = nameStorage[errorSig];\n                            if (32 + memPointer + strLength > 32 + (32 + memPointer)) {\n                                storedData = bytes32(32);\n                                uint256 actualLength = strLength;\n                                if (0 > actualLength) {\n                                    uint256 zeroVar = 0;\n                                    return string(abi.encodePacked(uint256(32), actualLength));\n                                }\n                                return string(abi.encodePacked(uint256(32), actualLength));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }"
}