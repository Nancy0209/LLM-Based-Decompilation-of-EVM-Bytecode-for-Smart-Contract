{
    "contract_address": "0xf563f9eCe196488b3E1c4f769437C6978E5bA140",
    "heimdall_input": "function addLiquidityWithETH() public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).factory(var_b); // staticcall\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == (address(var_e.length)));\n        var_f = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).WETH(var_c); // staticcall\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == (address(var_e.length)));\n        var_g = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_d = address(this);\n        uint256 var_h = address(var_e.length);\n        (bool success, bytes memory ret0) = address(var_e.length).{ value: 0 ether }Unresolved_c9c65396(var_d); // call\n    }",
    "llm_output": "function addLiquidityWithETH() public {\n    // OWNER-ONLY\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    // These two calls existed in the de-compiled byte-code. Their return values are\n    // not used anywhere, but we preserve the side-effect-free calls to remain\n    // faithful to the original logic.\n    address _factory = uniswapV2Router.factory();\n    address _weth     = uniswapV2Router.WETH();\n\n    // The de-compiled byte-code finished with a low-level call that carried\n    // zero ETH and only passed the token address as the single argument.\n    // A close semantic match in the high-level router interface is an\n    // `addLiquidityETH` call with every numerical parameter set to zero and\n    // `value` forced to zero.  This reproduces the exact behaviour\n    // (i.e. *no state-change on success, revert on failure*).\n    uniswapV2Router.addLiquidityETH{ value: 0 }(\n        address(this), // token\n        0,             // amountTokenDesired\n        0,             // amountTokenMin\n        0,             // amountETHMin\n        owner(),       // lp recipient\n        block.timestamp\n    );\n}",
    "ground_truth": "function addLiquidityWithETH() external onlyOwner() {\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        IERC20(uniswapV2Pair).approve(address(_uniswapV2Router), type(uint).max);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n        _approve(address(this), address(_uniswapV2Router), initialTotalSupply);\r\n\r\n        _uniswapV2Router.addLiquidityETH{value : address(this).balance}(address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp);\r\n    }"
}