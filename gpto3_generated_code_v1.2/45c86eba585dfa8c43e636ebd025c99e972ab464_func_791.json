{
    "contract_address": "0x45c86eBa585dfA8C43E636EBd025C99E972aB464",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(arg1 == arg1);\n        require(address(msg.sender) - 0, \"SafeMath: multiplication overflow\");\n        require(address(arg0) - 0, \"SafeMath: multiplication overflow\");\n        require(arg1 > 0, \"SafeMath: multiplication overflow\");\n        require(!(!(address(msg.sender)) == (address(owner / 0x01))), \"SafeMath: multiplication overflow\");\n        require(!(!(address(arg0)) == (address(owner / 0x01))), \"SafeMath: multiplication overflow\");\n        require(store_b > store_c, \"SafeMath: multiplication overflow\");\n        require(arg1 - 0, \"SafeMath: multiplication overflow\");\n        require(!arg1 | (store_d == ((arg1 * store_d) / arg1)), \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((arg1 * store_d) / arg1) == store_d, \"SafeMath: multiplication overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x21;\n        var_g = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_h = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        uint256 var_e = 0x40 + var_e;\n        var_c = 0x1a;\n        var_i = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x64 > 0, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_g = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        uint256 var_h = var_e.length;\n        uint256 var_k = 0;\n        var_l = var_m;\n        var_k = 0;\n        require(0x64, \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        require(!(bytes1(transferDelayEnabled / 0x01)), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        require(!(!(address(arg0)) == (address(store_f / 0x01))), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        require(!(!(address(arg0)) == (address(store_g / 0x01))), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        address var_a = address(tx.origin);\n        var_n = 0x05;\n        require(storage_map_h[var_a] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_h = 0x49;\n        var_l = 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c;\n        var_o = 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b;\n        var_p = 0x20616c6c6f7765642e0000000000000000000000000000000000000000000000;\n        var_a = address(tx.origin);\n        var_n = 0x05;\n        storage_map_h[var_a] = block.number;\n        require(!(address(msg.sender)) == (address(store_g / 0x01)));\n        require(!(address(msg.sender)) == (address(store_g / 0x01)));\n        require(!(address(msg.sender)) == (address(store_g / 0x01)));\n        require(!(address(arg0)) == (address(store_g / 0x01)));\n        require(!(address(arg0)) == (address(store_g / 0x01)));\n        var_a = address(this);\n        var_n = 0x01;\n        require(bytes1(store_i));\n        require(bytes1(store_i) - ((store_i / 0x02) < 0x20));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x22;\n        var_e = var_e + (0x20 + (((0x1f + (store_i / 0x02)) / 0x20) * 0x20));\n        uint256 var_j = store_i / 0x02;\n        require(bytes1(store_i));\n        require(bytes1(store_i) - ((store_i / 0x02) < 0x20));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x22;\n        require(!store_i / 0x02);\n        require(0x1f < (store_i / 0x02));\n        var_a = 0x06;\n        address var_q = storage_map_h[var_a];\n        require((0x20 + var_e) + (store_i / 0x02) > (0x20 + (0x20 + var_e)));\n        require(!(((0x20 + var_e) + var_e.length) - (0x20 + var_e)) < 0x20);\n        require(var_r == (address(var_r)));\n        var_q = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var_h = address(msg.sender);\n        (bool success, bytes memory ret0) = address(var_r).Unresolved_70a08231(var_h); // staticcall\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_s == (var_s));\n        require(var_s - 0, \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_g / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_g / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_g / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_g / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_g / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(((arg1 * store_d) / 0x64) > 0), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_n = 0x01;\n        require(!(storage_map_h[var_a] > (storage_map_h[var_a] + ((arg1 * store_d) / 0x64))), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        require(!(storage_map_h[var_a] + ((arg1 * store_d) / 0x64) < storage_map_h[var_a]), \"SafeMath: addition overflow\");\n        var_t = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_l = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_o = 0x1b;\n        var_p = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(this);\n        var_n = 0x01;\n        storage_map_h[var_a] = storage_map_h[var_a] + ((arg1 * store_d) / 0x64);\n        uint256 var_t = (arg1 * store_d) / 0x64;\n        emit Transfer(address(msg.sender), address(this), (arg1 * store_d) / 0x64);\n        var_a = address(msg.sender);\n        var_n = 0x01;\n        var_e = 0x40 + var_e;\n        var_t = 0x1e;\n        var_u = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(0 > storage_map_h[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!((storage_map_h[var_a] - 0) > storage_map_h[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        var_a = address(msg.sender);\n        var_n = 0x01;\n        storage_map_h[var_a] = storage_map_h[var_a] - 0;\n        var_e = 0x40 + var_e;\n        var_v = 0x1e;\n        var_w = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(((arg1 * store_d) / 0x64) > arg1), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_x = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_y = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        uint256 var_z = var_e.length;\n        address var_aa = 0;\n        address var_ab = var_m;\n        var_aa = 0;\n        if (!(arg1 - ((arg1 * store_d) / 0x64)) > arg1) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_b = 0x11;\n            if (storage_map_h[var_a] > _maxTaxSwap) {\n            }\n            if (!store_b > store_k) {\n            }\n            if (!storage_map_h[var_a] > _taxSwapThreshold) {\n            }\n            if (!store_g / 0x0100000000000000000000000000000000000000000000) {\n            }\n            require(!(arg1 - ((arg1 * store_d) / 0x64)) > arg1);\n        }\n        if (store_b > store_m) {\n            if (arg1 - 0) {\n            }\n            if (arg1 - 0) {\n            }\n            require(store_b > store_m, \"Exceeds the _maxTxAmount.\");\n        }\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_h = 0x19;\n        var_l = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (address(arg0) == (address(store_f / 0x01))) {\n            if (address(arg0) == (address(store_f / 0x01))) {\n            }\n        }\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x29;\n        var_g = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_h = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x23;\n        var_g = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_h = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_h = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}