{
    "contract_address": "0xaEAD18A6f788fb7460aDA9fDFf4C4Cd6Ba72dDBE",
    "heimdall_input": "function royaltyInfo(uint256 arg0, uint256 arg1) public view returns (bytes memory) {\n        uint256 var_a = arg0;\n        var_b = 0x6b;\n        require(address(storage_map_b[var_a]));\n        var_a = arg0;\n        var_b = 0x6b;\n        uint256 var_c = 0x40 + var_c;\n        uint256 var_d = address(storage_map_b[var_a]);\n        uint256 var_e = uint24(storage_map_b[var_a] / 0x010000000000000000000000000000000000000000);\n        require(!(arg1) & (uint24(storage_map_b[var_a] / 0x010000000000000000000000000000000000000000) > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        uint256 var_g = address(storage_map_b[var_a]);\n        uint256 var_h = (arg1 * (uint24(storage_map_b[var_a] / 0x010000000000000000000000000000000000000000))) / 0x2710;\n        return abi.encodePacked(address(storage_map_b[var_a]), (arg1 * (uint24(storage_map_b[var_a] / 0x010000000000000000000000000000000000000000))) / 0x2710);\n    }",
    "llm_output": "mapping(uint256 => uint256) private _tokenRoyaltyData; // [lower 160 bits: receiver | next 24 bits: royalty BPS]\n\nfunction royaltyInfo(uint256 tokenId, uint256 salePrice)\n    public\n    view\n    returns (address receiver, uint256 royaltyAmount)\n{\n    uint256 packed = _tokenRoyaltyData[tokenId];\n\n    // Extract receiver (lower 160 bits)\n    receiver = address(uint160(packed));\n\n    // Extract royalty fraction (next 24 bits)\n    uint256 royaltyFraction = uint256(uint24(packed >> 160));\n\n    // Overflow-protection check kept from original byte-code\n    require(\n        salePrice == 0 || royaltyFraction <= type(uint256).max / salePrice,\n        \"Decompiler artifact\"\n    );\n\n    // Denominator check retained from original byte-code\n    require(10000 != 0, \"Decompiler artifact\");\n\n    royaltyAmount = (salePrice * royaltyFraction) / 10000;\n}",
    "ground_truth": "function royaltyInfo(uint256 tokenId, uint256 value) public view override returns (address receiver, uint256 royaltyAmount) {\\n        RoyaltyInfo memory royalties = _individualRoyalties[tokenId].recipient != address(0)? _individualRoyalties[tokenId]: _contractRoyalties;\\n        \\n        receiver = royalties.recipient;\\n        royaltyAmount = (value * royalties.amount) / 10000;\\n    }"
}