{
    "contract_address": "0x46062Bb908158b945803Df5E5233c10240269C09",
    "heimdall_input": "function openTrading() public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(store_g / 0x010000000000000000000000000000000000000000)), \"trading is already open\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x17;\n        var_d = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n        store_f = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_f));\n        require(0x09, \"ERC20: approve to the zero address\");\n        require((0x01 == 0x01) | !0x05f5e100, \"ERC20: approve to the zero address\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(0x7a250d5630b4cf539739df2c5dacb4c659f2488d, \"ERC20: approve to the zero address\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x22;\n        var_d = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_g = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        address var_e = address(this);\n        var_h = 0x02;\n        var_e = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n        address var_h = keccak256(var_e);\n        storage_map_n[var_e] = 0x05f5e100;\n        var_a = 0x05f5e100;\n        emit Approval(address(this), 0x7a250d5630b4cf539739df2c5dacb4c659f2488d, 0x05f5e100);\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f / 0x01).factory(var_b); // staticcall\n        uint256 var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x20);\n        require(var_i.length == (address(var_i.length)));\n        var_j = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f / 0x01).WETH(var_c); // staticcall\n        var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x20);\n        require(var_i.length == (address(var_i.length)));\n        var_k = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_d = address(this);\n        uint256 var_g = address(var_i.length);\n        (bool success, bytes memory ret0) = address(var_i.length).Unresolved_c9c65396(var_d); // call\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x24;\n        var_d = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_g = 0x7265737300000000000000000000000000000000000000000000000000000000;\n        if (0x0a) {\n            if (0x0a == 0x01) {\n                if (0x0a == 0x02) {\n                    if (!0x09 > 0xff) {\n                        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_f = 0x11;\n                        if (!((0x0a < 0x0b) & (0x09 < 0x4e)) | ((0x0a < 0x0133) & (0x09 < 0x20))) {\n                            if (!0x09 > 0x01) {\n                                if (!0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                    var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                    var_f = 0x11;\n                                    if (!0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        var_f = 0x11;\n                                        if (!0x01) {\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function openTrading() public {\n    /*--------------------------------------------------------------------*/\n    /*  Ownership check \u2013\u2013 mirrors `require(msg.sender == owner)`         */\n    /*--------------------------------------------------------------------*/\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    /*--------------------------------------------------------------------*/\n    /*  Prevent reopening trading                                          */\n    /*--------------------------------------------------------------------*/\n    require(!_tradingOpen, \"trading is already open\");\n\n    /*--------------------------------------------------------------------*/\n    /*  Redundant-but-original sanity checks preserved verbatim            */\n    /*--------------------------------------------------------------------*/\n    require(uint256(0x09) != 0,                  \"ERC20: approve to the zero address\");\n    require((1 == 1) || !(0x05f5e100 != 0),      \"ERC20: approve to the zero address\");\n    require(address(this) != address(0),         \"ERC20: approve to the zero address\");\n    require(\n        address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) != address(0),\n        \"ERC20: approve to the zero address\"\n    );\n\n    /*--------------------------------------------------------------------*/\n    /*  Initialise Uniswap V2 router                                       */\n    /*--------------------------------------------------------------------*/\n    uniswapV2Router = IUniswapV2Router02(\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n    );\n\n    /*--------------------------------------------------------------------*/\n    /*  Give the router an allowance equal to 0x05f5e100 (100 000 000)     */\n    /*--------------------------------------------------------------------*/\n    _approve(address(this), address(uniswapV2Router), 0x05f5e100);\n    emit Approval(address(this), address(uniswapV2Router), 0x05f5e100);\n\n    /*--------------------------------------------------------------------*/\n    /*  Fetch factory & WETH addresses via low-level calls                 */\n    /*--------------------------------------------------------------------*/\n    (bool factorySuccess, bytes memory factoryData) =\n        address(uniswapV2Router).staticcall(abi.encodeWithSignature(\"factory()\"));\n    require(factorySuccess,                      \"Router: factory() call failed\");\n    require(factoryData.length >= 32,            \"Router: invalid factory() return\");\n    address factory = abi.decode(factoryData, (address));\n\n    (bool wethSuccess, bytes memory wethData) =\n        address(uniswapV2Router).staticcall(abi.encodeWithSignature(\"WETH()\"));\n    require(wethSuccess,                         \"Router: WETH() call failed\");\n    require(wethData.length >= 32,               \"Router: invalid WETH() return\");\n    address weth = abi.decode(wethData, (address));\n\n    /*--------------------------------------------------------------------*/\n    /*  Create the main trading pair                                       */\n    /*--------------------------------------------------------------------*/\n    uniswapV2Pair = IUniswapV2Factory(factory).createPair(address(this), weth);\n\n    /*--------------------------------------------------------------------*/\n    /*  Preservation of the original, effectively-dead, nested logic       */\n    /*--------------------------------------------------------------------*/\n    uint256 _constA = 0x0a;\n    if (_constA != 0) {\n        if (_constA == 0x01) {\n            if (_constA == 0x02) {\n                if (!(uint256(0x09) > 0xff)) {\n                    if (!(uint256(0x09) > 1)) {\n                        if (!(uint256(0x01) >\n                              0x1999999999999999999999999999999999999999999999999999999999999999)) {\n                            if (!(_constA >\n                                  0x1999999999999999999999999999999999999999999999999999999999999999)) {\n                                if (uint256(0x01) == 0) {\n                                    /* no-op \u2013 intentionally left blank */\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /*--------------------------------------------------------------------*/\n    /*  Enable trading and swapping                                        */\n    /*--------------------------------------------------------------------*/\n    _swapEnabled = true;\n    _tradingOpen = true;\n}",
    "ground_truth": "function openTrading() external onlyOwner {\\n        require(!tradingOpen, \\\"trading is already open\\\");\\n        uniswapV2Router = IUniswapV2Router02(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\\n            address(this),\\n            uniswapV2Router.WETH()\\n        );\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\\n            address(this),\\n            balanceOf(address(this)),\\n            0,\\n            0,\\n            owner(),\\n            block.timestamp\\n        );\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        swapEnabled = true;\\n        tradingOpen = true;\\n    }"
}