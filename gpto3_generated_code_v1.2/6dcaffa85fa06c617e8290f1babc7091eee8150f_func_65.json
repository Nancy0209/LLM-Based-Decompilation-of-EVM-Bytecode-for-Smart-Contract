{
    "contract_address": "0x6dcAfFa85fA06C617E8290f1BABC7091eEE8150f",
    "heimdall_input": "function openTrading() public {\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(address(this) - 0, \"ERC20: approve to the zero address\");\n        require(0x7a250d5630b4cf539739df2c5dacb4c659f2488d, \"ERC20: approve to the zero address\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x22;\n        var_e = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_f = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        address var_g = address(this);\n        var_h = 0x01;\n        var_g = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n        address var_h = keccak256(var_g);\n        storage_map_f[var_g] = 0x52b7d2dcc80cd2e4000000;\n        var_a = 0x52b7d2dcc80cd2e4000000;\n        emit Approval(address(this), 0x7a250d5630b4cf539739df2c5dacb4c659f2488d, 0x52b7d2dcc80cd2e4000000);\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).factory(var_b); // staticcall\n        uint256 var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_i == (address(var_i)));\n        var_j = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).WETH(var_d); // staticcall\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_i == (address(var_i)));\n        var_k = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_e = address(this);\n        address var_f = address(var_i);\n        (bool success, bytes memory ret0) = address(var_i).{ value: 0 ether }Unresolved_c9c65396(var_e); // call\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x24;\n        var_e = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_f = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function openTrading() public {\n    /* -------------------------------------------------------------------------- */\n    /*                                  Checks                                    */\n    /* -------------------------------------------------------------------------- */\n\n    // Only the contract owner can open trading\n    require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n\n    // Redundant zero\u2013address checks kept to mirror original byte-code logic\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(uniswapV2Router != address(0), \"ERC20: approve to the zero address\");\n\n    /* -------------------------------------------------------------------------- */\n    /*                          Router Allowance Grant                            */\n    /* -------------------------------------------------------------------------- */\n\n    // Hard-coded max allowance exactly as found on\u2013chain\n    uint256 maxRouterAllowance = 0x52b7d2dcc80cd2e4000000;\n    _allowances[address(this)][uniswapV2Router] = maxRouterAllowance;\n    emit Approval(address(this), uniswapV2Router, maxRouterAllowance);\n\n    /* -------------------------------------------------------------------------- */\n    /*                       Fetch Factory & WETH Addresses                       */\n    /* -------------------------------------------------------------------------- */\n\n    address factory = IUniswapV2Router02(uniswapV2Router).factory();\n    require(factory == factory); // meaningless equality check preserved\n\n    address weth = IUniswapV2Router02(uniswapV2Router).WETH();\n    require(weth == weth);       // meaningless equality check preserved\n\n    /* -------------------------------------------------------------------------- */\n    /*                              Pair Creation                                 */\n    /* -------------------------------------------------------------------------- */\n\n    // createPair(address tokenA, address tokenB) selector = 0xc9c65396\n    bytes memory createPairCalldata = abi.encodeWithSelector(\n        bytes4(0xc9c65396), // createPair selector\n        address(this),\n        weth\n    );\n\n    (bool success, ) = factory.call(createPairCalldata);\n    success; // suppress unused-variable warning\n\n    /* -------------------------------------------------------------------------- */\n    /*                         Final Redundant Check                              */\n    /* -------------------------------------------------------------------------- */\n\n    require(address(this) != address(0), \"ERC20: approve from the zero address\");\n}",
    "ground_truth": "function openTrading() external onlyOwner {\\n        _approve(address(this), address(uniswapV2Router), TOTAL_SUPPLY);\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\\n                address(this),\\n                uniswapV2Router.WETH()\\n            );\\n        IERC20(uniswapV2Pair).approve(\\n            address(uniswapV2Router),\\n            type(uint256).max\\n        );\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\\n            address(this),\\n            balanceOf(address(this)),\\n            0,\\n            0,\\n            owner(),\\n            block.timestamp\\n        );\\n        IERC20(uniswapV2Pair).transfer(\\n            owner(),\\n            IERC20(uniswapV2Pair).balanceOf(address(this))\\n        );\\n        _exempt[address(uniswapV2Router)] = true;\\n    }"
}