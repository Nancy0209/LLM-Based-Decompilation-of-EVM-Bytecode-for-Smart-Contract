{
    "contract_address": "0x4d940f5C7f67BcD5997a27F9E3b97028B226e292",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender));\n        require(!arg1 < arg1);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        require(!0x64 > (~(arg1 - arg1)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        var_c = 0x194a51d800000000000000000000000000000000000000000000000000000000;\n        address var_d = address(msg.sender);\n        address var_e = address(arg0);\n        require(address(store_d).code.length);\n        (bool success, bytes memory ret0) = address(store_d).{ value: 0 ether }Unresolved_194a51d8(var_d); // call\n        uint256 var_f = var_f + (uint248(ret0.length + 0x1f));\n        require(!((var_f + ret0.length) - var_f) < 0x20);\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_h = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address to, uint256 amount) public returns (bool) {\n    /* --- Trivial identity/zero-address style checks kept exactly as in the\n       decompiled byte-code to preserve semantics. --- */\n    require(to == address(to), \"decompiler check 1\");\n    require(address(msg.sender) != address(0), \"decompiler check 2\");\n    require(!(amount < amount), \"decompiler check 3\");\n    require(!(uint256(0x64) > (~(amount - amount))), \"decompiler check 4\");\n\n    /* --- External call preserved --- */\n    require(address(_vp).code.length > 0, \"decompiler check 5\");\n\n    (bool success, bytes memory ret0) =\n        _vp.call(abi.encodeWithSelector(bytes4(0x194a51d8), msg.sender));\n\n    // Silence \u201cunused variable\u201d warning \u2013 original logic does not check `success`.\n    success;\n\n    uint256 offset = ret0.length + 31; // equivalent to `+ 0x1f`\n    require(!((offset + ret0.length) - offset < 0x20), \"decompiler check 6\");\n\n    /* --- Original byte-code ends in an unconditional revert with this message --- */\n    revert(\"ERC20: transfer from the zero address\");\n}",
    "ground_truth": "function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }"
}