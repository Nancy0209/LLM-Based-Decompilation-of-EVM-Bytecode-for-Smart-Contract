{
    "contract_address": "0x0571e4201619916DB35214e935F0E46F037BBd2D",
    "heimdall_input": "function setTransactionLimits(uint256 arg0, uint256 arg1, uint256 arg2) public {\n        require(msg.sender == (address(getOwner)), \"!OWNER\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x06;\n        var_d = 0x214f574e45520000000000000000000000000000000000000000000000000000;\n        require((arg0 == ((arg0 * store_c) / store_c)) | !store_c);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        require((arg1 == ((arg1 * store_c) / store_c)) | !store_c);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        require((arg2 == ((arg2 * store_c) / store_c)) | !store_c);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        _maxTxAmount = (arg0 * store_c) / 0x2710;\n        _maxSellAmount = (arg1 * store_c) / 0x2710;\n        _maxWalletToken = (arg2 * store_c) / 0x2710;\n        var_g = 0x02;\n        var_e = 0xdead;\n        require(!(store_c - store_s) > store_c);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n    }",
    "llm_output": "function setTransactionLimits(\n    uint256 buyPercent,     // percentage basis points (out of 10,000) for max buy tx\n    uint256 sellPercent,    // percentage basis points (out of 10,000) for max sell tx\n    uint256 walletPercent   // percentage basis points (out of 10,000) for max wallet\n) public {\n    // Only owner\n    require(msg.sender == getOwner(), \"!OWNER\");\n\n    // --- Re-implemented SafeMath-style overflow checks (mirrors decompiled logic) ---\n    if (_totalSupply != 0) {\n        require(\n            buyPercent == (buyPercent * _totalSupply) / _totalSupply,\n            \"SafeMath: multiplication overflow\"\n        );\n    }\n    require(10000 != 0, \"\"); // decompiler artifact (always true)\n\n    if (_totalSupply != 0) {\n        require(\n            sellPercent == (sellPercent * _totalSupply) / _totalSupply,\n            \"SafeMath: multiplication overflow\"\n        );\n    }\n    require(10000 != 0, \"\"); // decompiler artifact (always true)\n\n    if (_totalSupply != 0) {\n        require(\n            walletPercent == (walletPercent * _totalSupply) / _totalSupply,\n            \"SafeMath: multiplication overflow\"\n        );\n    }\n    require(10000 != 0, \"\"); // decompiler artifact (always true)\n\n    // --- Apply the new limits ---\n    _maxTxAmount    = (buyPercent    * _totalSupply) / 10000;\n    _maxSellAmount  = (sellPercent   * _totalSupply) / 10000;\n    _maxWalletToken = (walletPercent * _totalSupply) / 10000;\n\n    // Final subtraction check from original bytecode\n    require(_maxWalletToken <= _totalSupply, \"SafeMath: subtraction overflow\");\n}",
    "ground_truth": "function setTransactionLimits(uint256 _buy, uint256 _sell, uint256 _wallet) external onlyOwner {\r\n        uint256 newTx = _totalSupply.mul(_buy).div(10000); uint256 newTransfer = _totalSupply.mul(_sell).div(10000); uint256 newWallet = _totalSupply.mul(_wallet).div(10000);\r\n        _maxTxAmount = newTx; _maxSellAmount = newTransfer; _maxWalletToken = newWallet;\r\n        uint256 limit = totalSupply().mul(5).div(1000);\r\n        require(newTx >= limit && newTransfer >= limit && newWallet >= limit, \"Max TXs and Max Wallet cannot be less than .5%\");\r\n    }"
}