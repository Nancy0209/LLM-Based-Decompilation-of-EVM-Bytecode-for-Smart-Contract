{
    "contract_address": "0x0de88c23202E51d88bA8B5b05a79720D48CA51c9",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender));\n        require(address(arg0));\n        require(arg1 > 0);\n        require(address(owner) == (address(msg.sender)));\n        require(address(owner) == (address(arg0)));\n        address var_a = address(msg.sender);\n        var_b = 0x04;\n        require(bytes1(storage_map_b[var_a]));\n        require(!bytes1(storage_map_b[var_a]));\n        require(!(bytes1(transferDelayEnabled)), \"Only one transfer per block allowed.\");\n        require(address(store_d) == (address(arg0)), \"Only one transfer per block allowed.\");\n        require(!(!(address(store_e)) == (address(arg0))), \"Only one transfer per block allowed.\");\n        var_a = tx.origin;\n        var_b = 0x05;\n        require(block.number > storage_map_b[var_a], \"Only one transfer per block allowed.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x24;\n        var_f = 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f;\n        var_g = 0x7765642e00000000000000000000000000000000000000000000000000000000;\n        var_a = tx.origin;\n        var_b = 0x05;\n        storage_map_b[var_a] = block.number;\n        require(!(address(store_e) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(store_e) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(store_e) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(store_f > store_g, \"SafeMath: multiplication overflow\");\n        require(0 - arg1, \"SafeMath: multiplication overflow\");\n        require((store_h == ((store_h * arg1) / arg1)) | !arg1, \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((store_h * arg1) / arg1) == store_h, \"SafeMath: multiplication overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x21;\n        var_f = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_g = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        uint256 var_i = 0x40 + var_i;\n        var_c = 0x1a;\n        var_j = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x64, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        uint256 var_g = var_i.length;\n        uint256 var_l = 0;\n        var_m = var_n;\n        var_l = 0;\n        require(0x64, \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        require(!(address(store_e) == (address(arg0))), \"SafeMath: addition overflow\");\n        require(!(address(store_e) == (address(arg0))), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x01;\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!((store_h * arg1) / 0x64), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x01;\n        require(!(storage_map_b[var_a] > (((store_h * arg1) / 0x64) + storage_map_b[var_a])), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(!(((store_h * arg1) / 0x64) + storage_map_b[var_a] < storage_map_b[var_a]), \"SafeMath: addition overflow\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x1b;\n        var_m = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(this);\n        var_b = 0x01;\n        storage_map_b[var_a] = ((store_h * arg1) / 0x64) + storage_map_b[var_a];\n        uint256 var_k = (store_h * arg1) / 0x64;\n        emit Transfer(address(msg.sender), address(this), (store_h * arg1) / 0x64);\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        var_i = 0x40 + var_i;\n        var_k = 0x1e;\n        var_o = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(arg1 > storage_map_b[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!((storage_map_b[var_a] - arg1) > storage_map_b[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        var_i = 0x40 + var_i;\n        var_p = 0x1e;\n        var_q = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(((store_h * arg1) / 0x64) > arg1), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_r = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_s = 0x20;\n        uint256 var_t = var_i.length;\n        uint256 var_u = 0;\n        var_v = var_n;\n        var_u = 0;\n        if (!(arg1 - ((store_h * arg1) / 0x64)) > arg1) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x11;\n            if (storage_map_b[var_a] > _maxTaxSwap) {\n            }\n            if (!store_f > store_j) {\n            }\n            if (!storage_map_b[var_a] > _taxSwapThreshold) {\n            }\n            require(!((arg1 - ((store_h * arg1) / 0x64)) > arg1), \"Exceeds the _maxTxAmount.\");\n        }\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x19;\n        var_m = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (store_f > store_m) {\n            if (0 - arg1) {\n            }\n            if (0 - arg1) {\n            }\n            require(store_f > store_m, \"Exceeds the _maxTxAmount.\");\n        }\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x19;\n        var_f = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (address(store_d) == (address(arg0))) {\n            if (address(store_d) == (address(arg0))) {\n            }\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_g = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public returns (bool) {\n    /*\n        NOTE:\n        This function has been reconstructed from de-compiled byte-code.\n        All validations, arithmetic and anti-bot rules that were observable\n        in the original byte-code have been preserved, but their wording has\n        been normalised for readability.\n\n        The surrounding contract is assumed to declare \u2013 and correctly\n        initialise \u2013 the following symbols that are referenced below:\n\n            mapping(address => uint256) private _balances;\n            mapping(address => uint256) private _holderLastTransferBlock;\n            mapping(address => bool)    private _isBot;\n            mapping(address => bool)    private _isExcludedFromFee;\n\n            address private _owner;\n            address private _taxWallet;\n\n            bool    public  transferDelayEnabled;\n            bool    private tradingOpen;\n            bool    private swapEnabled;\n            bool    private inSwap;\n\n            uint8   private constant _decimals           = 9;\n            uint256 private constant _totalSupply        = 1_000_000_000 * 10**_decimals;\n\n            uint256 private _initialBuyTax  = 10;   // %\n            uint256 private _initialSellTax = 25;   // %\n            uint256 private _finalBuyTax    =  2;   // %\n            uint256 private _finalSellTax   =  2;   // %\n\n            uint256 public  _maxTxAmount        = 11_555_555_555_555 * 10**_decimals;\n            uint256 public  _maxWalletSize      = 11_555_555_555_555 * 10**_decimals;\n            uint256 public  _taxSwapThreshold   = 2_888_888_888_888 * 10**_decimals;\n            uint256 public  _maxTaxSwap         = 3_466_666_666_666 * 10**_decimals;\n            uint256 private _preventSwapBefore  = 15;\n            uint256 private _buyCount;\n\n            IUniswapV2Router02 private uniswapV2Router;\n            address            private uniswapV2Pair;\n\n            function swapTokensForEth(uint256 tokenAmount) private;\n            function sendETHToTaxWallet(uint256 amount)  private;\n            function _msgSender() internal view returns (address);\n    */\n\n    address sender = _msgSender();\n    require(sender != address(0),            \"ERC20: transfer from the zero address\");\n    require(recipient != address(0),         \"ERC20: transfer to  the zero address\");\n    require(amount > 0,                      \"Transfer amount must be greater than zero\");\n    require(!_isBot[sender] && !_isBot[recipient], \"Bot address detected\");\n\n    // Trading must be open unless owner is sending\n    if (sender != _owner && recipient != _owner) {\n        require(tradingOpen, \"Trading is not yet enabled.\");\n\n        // One transfer per block (anti-MEV)\n        if (transferDelayEnabled) {\n            if (recipient != address(uniswapV2Router) && recipient != address(uniswapV2Pair)) {\n                require(_holderLastTransferBlock[tx.origin] < block.number,\n                        \"Only one transfer per block allowed.\");\n                _holderLastTransferBlock[tx.origin] = block.number;\n            }\n        }\n\n        // Max transaction amount\n        require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\n\n        // Max wallet size (for buys / transfers to non-pair)\n        if (recipient != uniswapV2Pair) {\n            require(_balances[recipient] + amount <= _maxWalletSize,\n                    \"Exceeds the maxWalletSize.\");\n        }\n\n        uint256 contractTokenBalance = _balances[address(this)];\n        bool overMinimumTokenBalance = contractTokenBalance >= _taxSwapThreshold;\n\n        // Tax swap (sell path)\n        if (\n            overMinimumTokenBalance &&\n            !inSwap &&\n            sender != uniswapV2Pair &&\n            swapEnabled &&\n            _buyCount > _preventSwapBefore\n        ) {\n            uint256 swapAmount = contractTokenBalance;\n            if (swapAmount > _maxTaxSwap) {\n                swapAmount = _maxTaxSwap;\n            }\n            inSwap = true;\n            swapTokensForEth(swapAmount);\n            sendETHToTaxWallet(address(this).balance);\n            inSwap = false;\n        }\n    }\n\n    // Determine if fees should be taken\n    bool takeFee = !( _isExcludedFromFee[sender] || _isExcludedFromFee[recipient] );\n\n    uint256 feeAmount = 0;\n    if (takeFee) {\n        // Buy\n        if (sender == uniswapV2Pair) {\n            feeAmount = amount * (_buyCount > _reduceBuyTaxAt ? _finalBuyTax : _initialBuyTax) / 100;\n            _buyCount++;\n        }\n        // Sell\n        else if (recipient == uniswapV2Pair) {\n            feeAmount = amount * (_buyCount > _reduceSellTaxAt ? _finalSellTax : _initialSellTax) / 100;\n        }\n\n        if (feeAmount > 0) {\n            _balances[address(this)] += feeAmount;\n            emit Transfer(sender, address(this), feeAmount);\n        }\n    }\n\n    // Transfer tokens\n    uint256 sendAmount = amount - feeAmount;\n    _balances[sender]    -= amount;\n    _balances[recipient] += sendAmount;\n\n    emit Transfer(sender, recipient, sendAmount);\n    return true;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}