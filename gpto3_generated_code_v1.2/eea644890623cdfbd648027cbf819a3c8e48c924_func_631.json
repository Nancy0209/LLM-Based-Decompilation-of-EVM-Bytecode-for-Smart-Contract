{
    "contract_address": "0xEea644890623CdfBD648027cbf819A3C8e48C924",
    "heimdall_input": "function setRouterAddress(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(manager)), \"Manageable: caller is not the manager\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x25;\n        var_d = 0x4d616e61676561626c653a2063616c6c6572206973206e6f7420746865206d61;\n        var_e = 0x6e61676572000000000000000000000000000000000000000000000000000000;\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        require(address(arg0).code.length);\n        (bool success, bytes memory ret0) = address(arg0).factory(var_b); // staticcall\n        uint256 var_f = var_f + (uint248(ret0.length + 0x1f));\n        require(!((var_f + ret0.length) - var_f) < 0x20);\n        require(var_f.length == (address(var_f.length)));\n        var_g = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        require(address(arg0).code.length);\n        (bool success, bytes memory ret0) = address(arg0).WETH(var_c); // staticcall\n        var_f = var_f + (uint248(ret0.length + 0x1f));\n        require(!((var_f + ret0.length) - var_f) < 0x20);\n        require(var_f.length == (address(var_f.length)));\n        var_h = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_d = address(this);\n        uint256 var_e = address(var_f.length);\n        require(address(var_f.length).code.length);\n        (bool success, bytes memory ret0) = address(var_f.length).{ value: 0 ether }Unresolved_c9c65396(var_d); // call\n    }",
    "llm_output": "function setRouterAddress(address routerAddress) external {\n    // Redundant self-equality check kept to preserve decompiled semantics\n    require(routerAddress == address(routerAddress), \"Decompiler artifact\");\n\n    // Only the manager can call this function\n    require(msg.sender == _manager, \"Manageable: caller is not the manager\");\n\n    // Ensure the router address contains contract code\n    require(routerAddress.code.length > 0, \"Decompiler artifact\");\n\n    IPancakeV2Router newRouter = IPancakeV2Router(routerAddress);\n\n    // Fetch factory and WETH addresses from the router\n    address factoryAddress = newRouter.factory();\n    address wethAddress     = newRouter.WETH();\n\n    // Ensure the factory address contains contract code\n    require(factoryAddress.code.length > 0, \"Decompiler artifact\");\n\n    // Create a new pair for this token and WETH\n    address pairAddress = IUniswapV2Factory(factoryAddress).createPair(\n        address(this),\n        wethAddress\n    );\n\n    // Persist router and pair references\n    _router = newRouter;\n    _pair   = pairAddress;\n}",
    "ground_truth": "function setRouterAddress(address router) external onlyManager {\r\n        _setRouterAddress(router);\r\n    }"
}