{
    "contract_address": "0x6dcAfFa85fA06C617E8290f1BABC7091eEE8150f",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(arg1 == arg1);\n        require(arg1 - 0, \"ERC20: transfer amount exceeds balance\");\n        uint256 var_a = arg1;\n        address var_b = address(msg.sender);\n        address var_c = address(arg0);\n        emit SwapEvent(arg1, address(msg.sender), address(arg0));\n        require(!(address(arg0) == (address(sniperTaxEnabled / 0x01))), \"ERC20: transfer amount exceeds balance\");\n        require(!(address(arg0) == (address(sniperTaxEnabled / 0x01))), \"ERC20: transfer amount exceeds balance\");\n        require(!(address(arg0) == (address(sniperTaxEnabled / 0x01))), \"ERC20: transfer amount exceeds balance\");\n        require(!(address(msg.sender) == (address(sniperTaxEnabled / 0x01))), \"ERC20: transfer amount exceeds balance\");\n        require(!(address(msg.sender) == (address(sniperTaxEnabled / 0x01))), \"ERC20: transfer amount exceeds balance\");\n        address var_d = address(msg.sender);\n        var_e = 0x14;\n        require(bytes1(storage_map_t[var_d] / 0x01), \"ERC20: transfer amount exceeds balance\");\n        require(!(bytes1(storage_map_t[var_d] / 0x01)), \"ERC20: transfer amount exceeds balance\");\n        require(address(msg.sender) - 0, \"ERC20: transfer amount exceeds balance\");\n        require(address(arg0) - 0, \"ERC20: transfer amount exceeds balance\");\n        var_d = address(msg.sender);\n        uint256 var_e = 0;\n        require(!(storage_map_t[var_d] < arg1), \"ERC20: transfer amount exceeds balance\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x26;\n        var_i = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        var_j = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n        var_d = address(msg.sender);\n        var_e = 0;\n        storage_map_t[var_d] = storage_map_t[var_d] - arg1;\n        var_d = address(arg0);\n        var_e = 0;\n        storage_map_t[var_d] = storage_map_t[var_d] + arg1;\n        var_a = arg1;\n        emit Transfer(address(msg.sender), address(arg0), arg1);\n        var_a = 0x01;\n        return 0x01;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x23;\n        var_i = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_j = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x25;\n        var_i = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_j = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        require(!penalty | (0x64 == ((penalty * 0x64) / penalty)), \"ERC20: transfer amount exceeds balance\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x11;\n        require(!arg1 | ((penalty * 0x64) == ((arg1 * (penalty * 0x64)) / arg1)), \"ERC20: transfer amount exceeds balance\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x11;\n        require(0x2710, \"ERC20: transfer amount exceeds balance\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x12;\n        require(address(msg.sender) - 0x7a250d5630b4cf539739df2c5dacb4c659f2488d, \"ERC20: transfer amount exceeds balance\");\n        require(!(bytes1(sniperTaxEnabled / 0x01000000000000000000000000000000000000000000)), \"ERC20: transfer amount exceeds balance\");\n        require(!(bytes1(sniperTaxEnabled / 0x010000000000000000000000000000000000000000)), \"ERC20: transfer amount exceeds balance\");\n        require(!((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) > arg1), \"ERC20: transfer amount exceeds balance\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x11;\n        require(!((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) > tradeLimit), \"ERC20: transfer amount exceeds balance\");\n        require(!(((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) - tradeLimit) > (arg1 - ((arg1 * (penalty * 0x64)) / 0x2710))), \"ERC20: transfer amount exceeds balance\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x11;\n        require(!(((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) - tradeLimit) > (((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) - tradeLimit) + ((arg1 * (penalty * 0x64)) / 0x2710))), \"ERC20: transfer amount exceeds balance\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x11;\n        var_a = ((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) - tradeLimit) + ((arg1 * (penalty * 0x64)) / 0x2710);\n        var_b = address(msg.sender);\n        var_c = address(arg0);\n        emit ChargePenalty(((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) - tradeLimit) + ((arg1 * (penalty * 0x64)) / 0x2710), address(msg.sender), address(arg0));\n        require(address(msg.sender) - 0, \"ERC20: transfer amount exceeds balance\");\n        require(address(this) - 0, \"ERC20: transfer amount exceeds balance\");\n        var_d = address(msg.sender);\n        var_e = 0;\n        require(!(storage_map_t[var_d] < (((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) - tradeLimit) + ((arg1 * (penalty * 0x64)) / 0x2710))), \"ERC20: transfer amount exceeds balance\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x26;\n        var_i = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        var_j = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x23;\n        var_i = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_j = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x25;\n        var_i = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_j = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        var_a = (arg1 * (penalty * 0x64)) / 0x2710;\n        var_b = address(msg.sender);\n        var_c = address(arg0);\n        emit ChargePenalty((arg1 * (penalty * 0x64)) / 0x2710, address(msg.sender), address(arg0));\n        require(address(msg.sender) - 0, \"ERC20: transfer to the zero address\");\n        require(address(this) - 0, \"ERC20: transfer to the zero address\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x23;\n        var_i = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_j = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x25;\n        var_i = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_j = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address to, uint256 amount) public returns (bool) {\n    /* --------------------------------------------------------------------- */\n    /*  Decompiler sanity-checks (kept exactly as in byte-code for fidelity)  */\n    /* --------------------------------------------------------------------- */\n    require(to == address(to), \"Invariant (decompiler artefact)\");\n    require(amount == amount, \"Invariant (decompiler artefact)\");\n    require(amount > 0, \"ERC20: transfer amount exceeds balance\");\n\n    /* ----------------------------  Swap notice  --------------------------- */\n    emit SwapEvent(amount, msg.sender, to);\n\n    /* --------------------------------------------------------------------- */\n    /*  Odd `sniperTaxEnabled` guards \u2013 preserved exactly as decompiled       */\n    /* --------------------------------------------------------------------- */\n    address sniperFlagAddr = address(uint160(uint256(sniperTaxEnabled))); // bool \u2192 uint \u2192 address\n    require(to         != sniperFlagAddr, \"ERC20: transfer amount exceeds balance\");\n    require(to         != sniperFlagAddr, \"ERC20: transfer amount exceeds balance\");\n    require(to         != sniperFlagAddr, \"ERC20: transfer amount exceeds balance\");\n    require(msg.sender != sniperFlagAddr, \"ERC20: transfer amount exceeds balance\");\n    require(msg.sender != sniperFlagAddr, \"ERC20: transfer amount exceeds balance\");\n\n    /* --------------------------------------------------------------------- */\n    /*  Mutually-exclusive flag checks (obviously contradictory,              */\n    /*  but kept verbatim for byte-code fidelity).                            */\n    /* --------------------------------------------------------------------- */\n    require((_balances[msg.sender] & 0x01) != 0, \"ERC20: transfer amount exceeds balance\");\n    require((_balances[msg.sender] & 0x01) == 0, \"ERC20: transfer amount exceeds balance\");\n\n    /* -----------------------  Zero-address guards  ------------------------ */\n    require(msg.sender != address(0), \"ERC20: transfer amount exceeds balance\");\n    require(to         != address(0), \"ERC20: transfer amount exceeds balance\");\n\n    /* ----------------------  Balance availability  ----------------------- */\n    require(_balances[msg.sender] >= amount, \"ERC20: transfer amount exceeds balance\");\n\n    /* --------------------------------------------------------------------- */\n    /*  Penalty & trade-limit arithmetic (kept as faithfully as possible)     */\n    /* --------------------------------------------------------------------- */\n    require(!penalty || (100 == ((penalty * 100) / penalty)), \"ERC20: transfer amount exceeds balance\");\n    require(!amount  || ((penalty * 100) == ((amount * (penalty * 100)) / amount)), \"ERC20: transfer amount exceeds balance\");\n    require(10000 > 0, \"ERC20: transfer amount exceeds balance\");                       // 0x2710 == 10_000\n\n    /*  Uniswap Router hard-coded exclusion                                  */\n    require(msg.sender != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, \"ERC20: transfer amount exceeds balance\");\n\n    /*  More `sniperTaxEnabled` related guards                                */\n    require(!sniperTaxEnabled, \"ERC20: transfer amount exceeds balance\");\n    require(!sniperTaxEnabled, \"ERC20: transfer amount exceeds balance\");\n\n    /*  Penalty calculations                                                 */\n    uint256 penaltyValue      = (amount * (penalty * 100)) / 10000;        // (amount * penalty * 100) / 10_000\n    uint256 afterPenalty      = amount - penaltyValue;\n\n    require(afterPenalty <= amount,        \"ERC20: transfer amount exceeds balance\");\n    require(afterPenalty <= tradeLimit,    \"ERC20: transfer amount exceeds balance\");\n\n    uint256 excessOverLimit   = afterPenalty - tradeLimit;\n\n    require(excessOverLimit <= afterPenalty,                       \"ERC20: transfer amount exceeds balance\");\n    require(excessOverLimit <= (afterPenalty + penaltyValue),      \"ERC20: transfer amount exceeds balance\");\n\n    /*  First penalty event (combined amount)                               */\n    emit ChargePenalty(excessOverLimit + penaltyValue, msg.sender, to);\n\n    /*  Deduct combined penalty from sender and move to contract            */\n    require(_balances[msg.sender] >= excessOverLimit + penaltyValue, \"ERC20: transfer amount exceeds balance\");\n    _balances[msg.sender] -= (excessOverLimit + penaltyValue);\n    _balances[address(this)] += (excessOverLimit + penaltyValue);\n\n    /*  Second penalty event (explicit penalty component)                   */\n    emit ChargePenalty(penaltyValue, msg.sender, to);\n\n    /* -------------------------  Final transfer  -------------------------- */\n    _balances[msg.sender] -= amount;\n    _balances[to]         += amount;\n\n    emit Transfer(msg.sender, to, amount);\n    return true;\n}",
    "ground_truth": "function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}"
}