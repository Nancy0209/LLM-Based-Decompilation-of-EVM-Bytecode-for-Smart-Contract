{
    "contract_address": "0x9cE4E67bFC441B766d43D1C2C8929A281E35A294",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender), \"SafeMath: multiplication overflow\");\n        require(address(arg0), \"SafeMath: multiplication overflow\");\n        require(arg1 > 0, \"SafeMath: multiplication overflow\");\n        require(address(owner) == (address(msg.sender)), \"SafeMath: multiplication overflow\");\n        require(!(!(address(owner)) == (address(arg0))), \"SafeMath: multiplication overflow\");\n        require(store_b > store_c, \"SafeMath: multiplication overflow\");\n        require(0 - arg1, \"SafeMath: multiplication overflow\");\n        require((store_d == ((store_d * arg1) / arg1)) | !arg1, \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((store_d * arg1) / arg1) == store_d, \"SafeMath: multiplication overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x21;\n        var_f = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_g = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        uint256 var_h = 0x40 + var_h;\n        var_c = 0x1a;\n        var_i = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x64, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        uint256 var_g = var_h.length;\n        uint256 var_k = 0;\n        var_l = var_m;\n        var_k = 0;\n        require(0x64, \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        require(!(bytes1(transferDelayEnabled)), \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\n        require(address(store_f) == (address(arg0)), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        require(!(!(address(store_g)) == (address(arg0))), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        address var_a = tx.origin;\n        var_n = 0x05;\n        require(block.number > storage_map_h[var_a], \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x49;\n        var_l = 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c;\n        var_o = 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b;\n        var_p = 0x20616c6c6f7765642e0000000000000000000000000000000000000000000000;\n        var_a = tx.origin;\n        var_n = 0x05;\n        storage_map_h[var_a] = block.number;\n        require(!(address(store_g) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_g) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_g) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_g) == (address(arg0))), \"SafeMath: addition overflow\");\n        require(!(address(store_g) == (address(arg0))), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_n = 0x01;\n        require(!(!bytes1(store_g / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_g / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_g / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_g / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_g / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!((store_d * arg1) / 0x64), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_n = 0x01;\n        require(!(storage_map_h[var_a] > (((store_d * arg1) / 0x64) + storage_map_h[var_a])), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        require(!(((store_d * arg1) / 0x64) + storage_map_h[var_a] < storage_map_h[var_a]), \"SafeMath: addition overflow\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x1b;\n        var_l = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(this);\n        var_n = 0x01;\n        storage_map_h[var_a] = ((store_d * arg1) / 0x64) + storage_map_h[var_a];\n        uint256 var_j = (store_d * arg1) / 0x64;\n        emit Transfer(address(msg.sender), address(this), (store_d * arg1) / 0x64);\n        var_a = address(msg.sender);\n        var_n = 0x01;\n        var_h = 0x40 + var_h;\n        var_j = 0x1e;\n        var_q = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(arg1 > storage_map_h[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!((storage_map_h[var_a] - arg1) > storage_map_h[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        var_a = address(msg.sender);\n        var_n = 0x01;\n        storage_map_h[var_a] = storage_map_h[var_a] - arg1;\n        var_h = 0x40 + var_h;\n        var_r = 0x1e;\n        var_s = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(((store_d * arg1) / 0x64) > arg1), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_t = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        uint256 var_u = var_h.length;\n        uint256 var_v = 0;\n        var_w = var_m;\n        var_v = 0;\n        if (!(arg1 - ((store_d * arg1) / 0x64)) > arg1) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_b = 0x11;\n            if (storage_map_h[var_a] > _maxTaxSwap) {\n            }\n            if (!store_b > store_j) {\n            }\n            if (!storage_map_h[var_a] > _taxSwapThreshold) {\n            }\n            if (!store_g / 0x0100000000000000000000000000000000000000000000) {\n            }\n            if (store_b > store_l) {\n                if (0 - arg1) {\n                }\n                require(!((arg1 - ((store_d * arg1) / 0x64)) > arg1), \"Exceeds the _maxTxAmount.\");\n            }\n            require(store_b > store_l, \"Exceeds the _maxTxAmount.\");\n        }\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x19;\n        var_l = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (address(store_f) == (address(arg0))) {\n            if (address(store_f) == (address(arg0))) {\n            }\n        }\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_g = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public override returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n}\n\nfunction _transfer(address from, address to, uint256 amount) private {\n    require(from != address(0), \"ERC20: transfer from the zero address\");\n    require(to != address(0),   \"ERC20: transfer to the zero address\");\n    require(amount > 0,         \"Transfer amount must be greater than zero\");\n\n    /* -------------------------------------------------------------------------- */\n    /*                                TX LIMITS                                   */\n    /* -------------------------------------------------------------------------- */\n    if (from != _owner && to != _owner) {\n        /*  Transfer delay \u2013 one purchase per block (anti-bot) */\n        if (transferDelayEnabled) {\n            if (to != address(uniswapV2Router) && to != uniswapV2Pair) {\n                require(\n                    _holderLastTransferTimestamp[tx.origin] < block.number,\n                    \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\n                );\n                _holderLastTransferTimestamp[tx.origin] = block.number;\n            }\n        }\n\n        /* Max transaction & max wallet size checks */\n        require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\n        if (to != uniswapV2Pair) {\n            require(\n                balanceOf(to) + amount <= _maxWalletSize,\n                \"Exceeds the _maxWalletSize.\"\n            );\n        }\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                SWAP LOGIC                                  */\n    /* -------------------------------------------------------------------------- */\n    uint256 contractTokenBalance = balanceOf(address(this));\n    bool canSwap = contractTokenBalance >= _taxSwapThreshold;\n\n    if (\n        canSwap &&\n        !inSwap &&\n        from != uniswapV2Pair &&\n        swapEnabled &&\n        _buyCount > _preventSwapBefore\n    ) {\n        inSwap = true;\n\n        uint256 swapAmount = contractTokenBalance;\n        if (swapAmount > _maxTaxSwap) {\n            swapAmount = _maxTaxSwap;\n        }\n\n        _swapTokensForEth(swapAmount);\n\n        uint256 contractETHBalance = address(this).balance;\n        if (contractETHBalance > 0) {\n            _sendETHToFee(_owner, contractETHBalance);\n        }\n\n        inSwap = false;\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   TAXES                                    */\n    /* -------------------------------------------------------------------------- */\n    bool takeFee = true;\n\n    if (from == _owner || to == _owner) {\n        takeFee = false;\n    }\n\n    uint256 taxAmount = 0;\n\n    if (takeFee) {\n        // Buy\n        if (from == uniswapV2Pair && to != address(uniswapV2Router)) {\n            uint256 taxRate = _buyCount > _reduceBuyTaxAt ? _finalBuyTax : _initialBuyTax;\n            taxAmount = amount * taxRate / 100;\n            _buyCount++;\n        }\n        // Sell\n        else if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\n            uint256 taxRate = _buyCount > _reduceSellTaxAt ? _finalSellTax : _initialSellTax;\n            taxAmount = amount * taxRate / 100;\n        }\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                              BALANCE UPDATES                               */\n    /* -------------------------------------------------------------------------- */\n    if (taxAmount > 0) {\n        _balances[address(this)] += taxAmount;\n        emit Transfer(from, address(this), taxAmount);\n    }\n\n    uint256 transferAmount = amount - taxAmount;\n\n    _balances[from]  -= amount;\n    _balances[to]    += transferAmount;\n\n    emit Transfer(from, to, transferAmount);\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}