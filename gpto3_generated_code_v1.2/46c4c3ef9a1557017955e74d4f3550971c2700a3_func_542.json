{
    "contract_address": "0x46c4C3ef9A1557017955E74D4F3550971C2700A3",
    "heimdall_input": "function clearStuckToken(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(address(arg0) - address(this));\n        require(0 - arg1);\n        address var_a = address(arg0);\n        uint256 var_b = arg1;\n        emit ClearToken(address(arg0), arg1);\n        var_a = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        address var_c = address(store_n);\n        uint256 var_d = arg1;\n        (bool success, bytes memory ret0) = address(arg0).many_msg_babbage(var_c); // call\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == var_e.length);\n        var_b = var_e.length;\n        return var_e.length;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var_c = address(this);\n        (bool success, bytes memory ret0) = address(arg0).balanceOf(var_c); // staticcall\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        var_b = address(arg0);\n        uint256 var_f = var_e.length;\n        emit ClearToken(address(arg0), var_e.length);\n        var_b = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        var_d = address(store_n);\n        uint256 var_g = var_e.length;\n        (bool success, bytes memory ret0) = address(arg0).many_msg_babbage(var_d); // call\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x20;\n        var_d = 0x28;\n        var_g = 0x746f6b656e416464726573732063616e206e6f7420626520746865206e617469;\n        var_h = 0x766520746f6b656e000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function clearStuckToken(address tokenAddress, uint256 amount) public returns (bool success) {\n    // Redundant self-check preserved from decompiled source\n    require(tokenAddress == tokenAddress, \"\"); \n\n    // Prevent attempting to move this contract\u2019s own token\n    require(tokenAddress != address(this), \"tokenAddress can not be the native token\");\n    \n    // Mirror original arithmetic-based underflow guard (amount must be > 0)\n    require(amount > 0, \"Nothing to transfer\");\n\n    emit ClearToken(tokenAddress, amount);\n\n    success = IERC20(tokenAddress).transfer(msg.sender, amount);\n}",
    "ground_truth": "function clearStuckToken(address tokenAddress, uint256 tokens) external returns (bool success) {\r\n        require(tokenAddress != address(this), \"tokenAddress can not be the native token\");\r\n             if(tokens == 0){\r\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\r\n        }\r\n        emit ClearToken(tokenAddress, tokens);\r\n        return ERC20(tokenAddress).transfer(autoLiquidityReceiver, tokens);\r\n    }"
}