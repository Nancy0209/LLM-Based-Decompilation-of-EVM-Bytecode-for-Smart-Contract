{
    "contract_address": "0xEA00f45b33879A1D55f91ff260C20c96a577E566",
    "heimdall_input": "function updateMarketingWalletInfo(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        emit marketingWalletUpdated(address(arg0), address(store_v));\n        store_v = (address(arg0)) | (uint96(store_v));\n    }",
    "llm_output": "function updateMarketingWalletInfo(address newMarketingWallet) public {\n    // Redundant self-equality check preserved for logical fidelity\n    require(newMarketingWallet == address(newMarketingWallet));\n\n    // Owner check (mirrors original `require(msg.sender == owner, ...)`)\n    require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n\n    // Emit event with (newWallet, oldWallet)\n    emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\n\n    // Original decompiler showed a bit-wise OR with the lower 96 bits of the\n    // previous wallet; we preserve that exact operation here.\n    marketingWallet = address(\n        uint160(uint256(newMarketingWallet) | uint96(uint160(marketingWallet)))\n    );\n}",
    "ground_truth": "function updateMarketingWalletInfo(address newMarketingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\r\n        marketingWallet = newMarketingWallet;\r\n    }"
}