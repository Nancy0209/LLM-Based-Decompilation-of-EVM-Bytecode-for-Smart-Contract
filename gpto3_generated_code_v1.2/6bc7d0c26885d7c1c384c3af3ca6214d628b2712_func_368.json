{
    "contract_address": "0x6BC7d0c26885D7c1C384c3aF3CA6214D628B2712",
    "heimdall_input": "function manualswap(uint256 arg0) public {\n        require(address(msg.sender) == (address(store_e)));\n        address var_a = address(this);\n        uint256 var_b = 0;\n        require(!(!arg0 > storage_map_b[var_a]), \"Wrong amount\");\n        require(!(arg0 > storage_map_b[var_a]), \"Wrong amount\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x0c;\n        var_f = 0x57726f6e6720616d6f756e740000000000000000000000000000000000000000;\n        var_c = 0x02;\n        uint256 var_g = var_g + 0x60;\n        var_h = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_i = 0x32;\n        address var_j = address(this);\n        var_k = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).WETH(var_l); // staticcall\n        var_g = var_g + (uint248(ret0.length + 0x1f));\n        require(!(((var_g + ret0.length) - var_g) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_g.length == (address(var_g.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_i = 0x32;\n        uint256 var_m = address(var_g.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(0x7a250d5630b4cf539739df2c5dacb4c659f2488d, \"ERC20: approve to the zero address\");\n        var_n = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_o = 0x20;\n        var_p = 0x22;\n        var_q = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_r = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x01;\n        var_a = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n        var_b = keccak256(var_a);\n        storage_map_b[var_a] = arg0;\n        uint256 var_n = arg0;\n        emit Approval(address(this), 0x7a250d5630b4cf539739df2c5dacb4c659f2488d, arg0);\n        var_n = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        uint256 var_o = arg0;\n        uint256 var_p = 0;\n        var_q = 0xa0;\n        uint256 var_s = var_g.length;\n        address var_r = address(this);\n        uint256 var_t = block.timestamp;\n        require(address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).code.length);\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).Unresolved_791ac947(var_o); // call\n        var_n = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_o = 0x20;\n        var_p = 0x24;\n        var_q = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_r = 0x7265737300000000000000000000000000000000000000000000000000000000;\n        require(arg0 > 0, \"Wrong amount\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x0c;\n        var_f = 0x57726f6e6720616d6f756e740000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualswap(uint256 amount) public {\n    // Only the contract owner can call this function\n    require(msg.sender == owner(), \"manualswap: caller is not authorized\");\n\n    // The contract must have enough tokens to perform the swap\n    require(!(amount > _balances[address(this)]), \"Wrong amount\");\n    require(!(amount > _balances[address(this)]), \"Wrong amount\"); // duplicated on purpose to preserve original logic\n\n    // Approve the Uniswap router to spend the specified `amount`\n    _approve(address(this), address(uniswapV2Router), amount);\n\n    // Prepare the swap path: token -> WETH\n    address[] memory path = new address[](2);\n    path[0] = address(this);\n    path[1] = uniswapV2Router.WETH();\n\n    // Execute the swap, receiving ETH in this contract\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n        amount,\n        0,                // accept any amount of ETH\n        path,\n        address(this),    // receive ETH in this contract\n        block.timestamp\n    );\n\n    // Redundant check kept to match original behaviour\n    require(amount > 0, \"Wrong amount\");\n}",
    "ground_truth": "function manualswap(uint256 amount) external {\\n        require(_msgSender() == marketingWallet);\\n        require(amount <= balanceOf(address(this)) && amount > 0, \\\"Wrong amount\\\");\\n        swapTokensForEth(amount);\\n    }"
}