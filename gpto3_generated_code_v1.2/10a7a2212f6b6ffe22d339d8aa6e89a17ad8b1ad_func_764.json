{
    "contract_address": "0x10A7A2212f6b6ffE22d339D8Aa6e89a17ad8b1ad",
    "heimdall_input": "function createPairAndAddLP() public payable {\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(address(swapV2Pair / 0x01) - 0);\n        address var_f = address(swapV2Pair / 0x01);\n        var_g = 0x17;\n        storage_map_h[var_f] = (0x01 * 0x01) | (uint248(storage_map_h[var_f]));\n        emit SetAutomatedMarketMakerPair(address(swapV2Pair / 0x01), 0x01);\n        var_f = address(this);\n        uint256 var_g = 0;\n        var_a = 0xf305d71900000000000000000000000000000000000000000000000000000000;\n        var_b = address(this);\n        address var_d = storage_map_h[var_f];\n        uint256 var_e = 0;\n        uint256 var_h = 0;\n        address var_i = address(owner / 0x01);\n        uint256 var_j = block.timestamp;\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).{ value: address(this).balance }Unresolved_f305d719(var_b); // call\n        uint256 var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x60);\n        require(var_k == (var_k));\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).factory(var_b); // staticcall\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_k == (address(var_k)));\n        var_l = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).WETH(var_d); // staticcall\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_k == (address(var_k)));\n        var_m = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        var_e = address(this);\n        var_h = address(var_k);\n        (bool success, bytes memory ret0) = address(var_k).{ value: var_g ether }Unresolved_c9c65396(var_e); // call\n    }",
    "llm_output": "function createPairAndAddLP() external payable {\n    // ---------------------------------------------------------------------\n    // Owner check (mirrors `require(address(owner / 0x01) == msg.sender)`).\n    // ---------------------------------------------------------------------\n    require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n\n    // ---------------------------------------------------------------------\n    // The pair address must be initialised.\n    // Equivalent to `require(address(swapV2Pair / 0x01) - 0)`.\n    // ---------------------------------------------------------------------\n    require(swapV2Pair != address(0), \"Pair not set\");\n\n    // ---------------------------------------------------------------------\n    // Mark the pair as an automated-market-maker pair and emit the event.\n    // ---------------------------------------------------------------------\n    automatedMarketMakerPairs[swapV2Pair] = true;\n    emit SetAutomatedMarketMakerPair(swapV2Pair, true);\n\n    // ---------------------------------------------------------------------\n    // Add all contract tokens and all ETH that have been sent with the call\n    // as liquidity. The decompiled bytecode shows selector 0xf305d719, which\n    // is `addLiquidityETH(address,uint,uint,uint,address,uint)`.\n    //\n    // The exact values used in the original bytecode aren\u2019t recoverable, so\n    // the most faithful semantic re-implementation is to forward the full\n    // balances that the contract currently holds.\n    // ---------------------------------------------------------------------\n    IUniswapV2Router02 router = swapV2Router;\n\n    uint256 tokenBalance = balanceOf(address(this));\n    uint256 ethBalance   = address(this).balance;\n\n    router.addLiquidityETH{value: ethBalance}(\n        address(this),   // token\n        tokenBalance,    // amountTokenDesired\n        0,               // amountTokenMin (accept any)\n        0,               // amountETHMin   (accept any)\n        _owner,          // LP tokens are sent to the owner\n        block.timestamp  // deadline\n    );\n\n    // ---------------------------------------------------------------------\n    // The bytecode also calls `factory()` (selector 0xc45a0155),\n    // `WETH()`      (selector 0xad5c4648) and finally\n    // `createPair()` (selector 0xc9c65396).\n    // These calls are reproduced for perfect semantic fidelity, even though\n    // the pair already exists.\n    // ---------------------------------------------------------------------\n    address factory = router.factory();\n    address weth    = router.WETH();\n\n    // This call will revert if the pair already exists, just like the\n    // original bytecode would. No return value is used.\n    IUniswapV2Factory(factory).createPair(address(this), weth);\n}",
    "ground_truth": "function createPairAndAddLP() public payable onlyOwner {\n        // create pair This:ETH\n        if (swapV2Pair == address(0)) {\n            IUniswapV2Factory factory = IUniswapV2Factory(\n                swapV2Router.factory()\n            );\n            swapV2Pair = factory.createPair(address(this), swapV2Router.WETH());\n        }\n        _setAutomatedMarketMakerPair(address(swapV2Pair), true);\n\n        addLiquidity(balanceOf(address(this)), address(this).balance);\n    }"
}