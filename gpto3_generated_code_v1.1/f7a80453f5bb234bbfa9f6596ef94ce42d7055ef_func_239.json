{
    "contract_address": "0xf7A80453F5BB234Bbfa9f6596Ef94cE42D7055EF",
    "heimdall_input": "function withdraw(uint256 arg0) public payable {\n        require(msg.sender == (address(admin)), \"Only admin can call this function\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x21;\n        var_d = 0x4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f;\n        var_e = 0x6e00000000000000000000000000000000000000000000000000000000000000;\n        require(arg0 < store_e);\n        var_f = 0x0b;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(this);\n        (bool success, bytes memory ret0) = address(storage_map_t[arg0 * 0x02]).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_g = var_g + (uint248(ret0.length + 0x1f));\n        require(!((var_g + ret0.length) - var_g) < 0x20);\n        var_h = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        address var_c = address(msg.sender);\n        uint256 var_d = var_g.length;\n        (bool success, bytes memory ret0) = address(storage_map_t[arg0 * 0x02]).{ value: 0 ether }Unresolved_a9059cbb(var_c); // call\n        var_g = var_g + (uint248(ret0.length + 0x1f));\n        require(!((var_g + ret0.length) - var_g) < 0x20);\n        require(var_g.length == var_g.length);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_i = 0x32;\n    }",
    "llm_output": "function withdraw(uint256 _pid) external payable {\n    // Only the contract administrator can withdraw\n    require(msg.sender == admin, \"Only admin can call this function\");\n\n    // _pid must reference a valid entry in the AllowedCrypto array\n    require(_pid < AllowedCrypto.length);\n\n    // Fetch the token address and transfer the entire balance to the admin\n    IERC20 token = AllowedCrypto[_pid].paytoken;\n    uint256 balance = token.balanceOf(address(this));\n    token.transfer(msg.sender, balance);\n}",
    "ground_truth": "function withdraw(uint256 _pid) public payable onlyAdmin() {\\n        TokenInfo storage tokens = AllowedCrypto[_pid];\\n        IERC20 paytoken;\\n        paytoken = tokens.paytoken;\\n        paytoken.transfer(msg.sender, paytoken.balanceOf(address(this)));\\n    }"
}