{
    "contract_address": "0x9361CD557C1db79830F118364E5009B3A2738fD3",
    "heimdall_input": "function calculateEarnings(address arg0) public view {\n        address var_a = address(arg0);\n        var_b = 0x0f;\n        require(!storage_map_a[var_a] > block.timestamp);\n        require(0x3c > 0);\n        require(0x3c);\n        var_a = address(arg0);\n        var_b = 0x0b;\n        require(storage_map_a[var_a] == 0);\n        require(storage_map_a[var_a]);\n        require((storage_map_a[var_a] * dailyROI) / storage_map_a[var_a] == dailyROI);\n    }",
    "llm_output": "function calculateEarnings(address _stakeholder) public view returns (uint256) {\n    // Original logic (decompiler reconstruction):\n    // 1. Stake must be unlocked.\n    require(block.timestamp >= lockTime[_stakeholder]);\n\n    // 2. Always-true checks kept for fidelity with decompiled output.\n    require(60 > 0);\n    require(60 != 0);\n\n    // 3. Fetch the staked amount and ensure it is non-zero.\n    uint256 stakedAmount = stakes[_stakeholder];\n    require(stakedAmount > 0);\n\n    // 4. Overflow-safety check (mirrors the SafeMath pattern found in the bytecode).\n    require((stakedAmount * dailyROI) / stakedAmount == dailyROI);\n\n    // 5. Calculate and return the earnings.\n    return (stakedAmount * dailyROI) / 100;\n}",
    "ground_truth": "function calculateEarnings(address _stakeholder) public view returns(uint) {\r\n        uint activeDays = (now.sub(lastClock[_stakeholder])).div(60);\r\n        return ((stakes[_stakeholder]).mul(dailyROI).mul(activeDays)).div(100000000); //1//0.1//0.01//0.001/0.0001/0.00001/\r\n    }"
}