{
    "contract_address": "0x620d4B40A1c80D62129bb195e1701e501F9a5d3b",
    "heimdall_input": "function royaltyInfo(uint256 arg0, uint256 arg1) public view returns (bytes memory) {\n        uint256 var_a = arg0;\n        var_b = 0x0b;\n        uint256 var_c = 0x40 + var_c;\n        uint256 var_d = address(storage_map_n[var_a]);\n        uint256 var_e = uint96(storage_map_n[var_a] / 0x010000000000000000000000000000000000000000);\n        require(address(storage_map_n[var_a]));\n        require(!(arg1) & (uint96(var_f) > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x2710);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        uint256 var_h = address(var_c.length);\n        uint256 var_i = (arg1 * (uint96(var_f))) / 0x2710;\n        return abi.encodePacked(address(var_c.length), (arg1 * (uint96(var_j))) / 0x2710);\n    }",
    "llm_output": "function royaltyInfo(uint256 tokenId, uint256 salePrice) public view returns (address receiver, uint256 royaltyAmount) {\n    // Retrieve the packed ownership data for the given tokenId\n    uint256 packedOwnership = _packedOwnerships[tokenId];\n\n    // Extract the owner address from the lower 160 bits\n    address tokenOwner = address(uint160(packedOwnership));\n\n    // Check that the token exists (owner address is non-zero)\n    require(tokenOwner != address(0));\n\n    // Fetch the royalty percentage (basis points, out of 10,000)\n    uint96 percentage = royaltyPercentage;\n\n    // Overflow safeguard (mirrors decompiled logic)\n    require(\n        salePrice == 0 || uint256(percentage) <= type(uint256).max / salePrice\n    );\n\n    // Redundant but present in original bytecode (ensures denominator is non-zero)\n    require(10000 != 0);\n\n    // Calculate royalty amount\n    uint256 royalty = (salePrice * uint256(percentage)) / 10000;\n\n    // Return receiver and royalty amount\n    return (tokenOwner, royalty);\n}",
    "ground_truth": "function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }"
}