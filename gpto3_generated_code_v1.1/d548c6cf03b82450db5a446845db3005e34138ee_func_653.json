{
    "contract_address": "0xd548c6Cf03b82450db5a446845DB3005e34138eE",
    "heimdall_input": "function showSupply() public view {\n        var_a = 0x06;\n        var_b = 0xdead;\n        uint256 var_c = 0x40 + var_c;\n        var_d = 0x1e;\n        var_e = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(store_o > totalSupply), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_f = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        uint256 var_h = var_c.length;\n        uint256 var_i = 0;\n        var_j = var_k;\n        var_i = 0;\n        if (!(totalSupply - store_o) > totalSupply) {\n            var_b = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_l = 0x11;\n        }\n    }",
    "llm_output": "function showSupply() public view returns (uint256) {\n    // Fetch the amount of tokens that have been sent to the burn address\n    uint256 burnedTokens = _balances[DEAD];\n\n    // First safety\u2010check from the original byte-code\n    require(burnedTokens <= _totalSupply, \"SafeMath: subtraction overflow\");\n\n    // Calculate the circulating supply\n    uint256 circulatingSupply = _totalSupply - burnedTokens;\n\n    // Second (redundant) overflow check preserved for byte-code fidelity\n    if (circulatingSupply > _totalSupply) {\n        revert();\n    }\n\n    return circulatingSupply;\n}",
    "ground_truth": "function showSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }"
}