{
    "contract_address": "0x85188f89Ef6A5714818DefC0607727c9BE9f8949",
    "heimdall_input": "function manualsend() public {\n        require(address(msg.sender) == (address(store_l / 0x01)));\n        require(address(msg.sender) == (address(store_m / 0x01)));\n        require(address(this).balance - 0, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_a = 0x40 + var_a;\n        var_b = 0x1a;\n        var_c = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x05 > 0, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_e = ((0x04 + var_a) + 0x20) - (0x04 + var_a);\n        uint256 var_f = var_a.length;\n        uint256 var_g = 0;\n        var_h = var_i;\n        var_g = 0;\n        require(0x05);\n        var_j = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x12;\n        (bool success, bytes memory ret0) = address(store_m / 0x01).transfer(0);\n        require(address(this).balance - 0);\n        var_a = 0x40 + var_a;\n        var_d = 0x1a;\n        var_l = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x05 > 0);\n        require(0x05);\n        var_j = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x12;\n        (bool success, bytes memory ret0) = address(store_l / 0x01).transfer(0);\n        if (!address(this).balance | (0x02 == ((address(this).balance * 0x02) / address(this).balance))) {\n            var_j = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_k = 0x11;\n        }\n    }",
    "llm_output": "function manualsend() external {\n    // Original logic: the caller must be BOTH wallets.\n    // This is impossible unless the two wallet addresses are identical,\n    // but the checks are preserved verbatim.\n    require(msg.sender == marketingWallet, \"Caller is not marketing wallet\");\n    require(msg.sender == developmentWallet, \"Caller is not development wallet\");\n\n    // Require the contract to hold a positive ether balance.\n    require(address(this).balance > 0, \"Contract balance is zero\");\n\n    // Redundant check kept for perfect logical fidelity.\n    require(5 > 0, \"SafeMath: division by zero\");\n\n    // Dummy zero-ether transfer, preserved from the original bytecode.\n    payable(developmentWallet).transfer(0);\n\n    // Re-check balance as in the decompiled code.\n    require(address(this).balance > 0, \"Contract balance is zero\");\n\n    // More redundant checks preserved.\n    require(5 > 0, \"SafeMath: division by zero\");\n    require(true, \"\"); // mirrors `require(0x05)`\n\n    // Additional dummy zero-ether transfer.\n    payable(marketingWallet).transfer(0);\n\n    // The bytecode always reverts at this point.\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function manualsend() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }"
}