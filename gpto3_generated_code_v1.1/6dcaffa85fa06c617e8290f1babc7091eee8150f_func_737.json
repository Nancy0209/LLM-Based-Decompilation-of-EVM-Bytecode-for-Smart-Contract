{
    "contract_address": "0x6dcAfFa85fA06C617E8290f1BABC7091eEE8150f",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(arg1 == arg1);\n        require(arg1 - 0, \"ERC20: transfer amount exceeds balance\");\n        uint256 var_a = arg1;\n        address var_b = address(msg.sender);\n        address var_c = address(arg0);\n        emit SwapEvent(arg1, address(msg.sender), address(arg0));\n        require(!(address(arg0) == (address(sniperTaxEnabled / 0x01))), \"ERC20: transfer amount exceeds balance\");\n        require(!(address(arg0) == (address(sniperTaxEnabled / 0x01))), \"ERC20: transfer amount exceeds balance\");\n        require(!(address(arg0) == (address(sniperTaxEnabled / 0x01))), \"ERC20: transfer amount exceeds balance\");\n        require(!(address(msg.sender) == (address(sniperTaxEnabled / 0x01))), \"ERC20: transfer amount exceeds balance\");\n        require(!(address(msg.sender) == (address(sniperTaxEnabled / 0x01))), \"ERC20: transfer amount exceeds balance\");\n        address var_d = address(msg.sender);\n        var_e = 0x14;\n        require(bytes1(storage_map_t[var_d] / 0x01), \"ERC20: transfer amount exceeds balance\");\n        require(!(bytes1(storage_map_t[var_d] / 0x01)), \"ERC20: transfer amount exceeds balance\");\n        require(address(msg.sender) - 0, \"ERC20: transfer amount exceeds balance\");\n        require(address(arg0) - 0, \"ERC20: transfer amount exceeds balance\");\n        var_d = address(msg.sender);\n        uint256 var_e = 0;\n        require(!(storage_map_t[var_d] < arg1), \"ERC20: transfer amount exceeds balance\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x26;\n        var_i = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        var_j = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n        var_d = address(msg.sender);\n        var_e = 0;\n        storage_map_t[var_d] = storage_map_t[var_d] - arg1;\n        var_d = address(arg0);\n        var_e = 0;\n        storage_map_t[var_d] = storage_map_t[var_d] + arg1;\n        var_a = arg1;\n        emit Transfer(address(msg.sender), address(arg0), arg1);\n        var_a = 0x01;\n        return 0x01;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x23;\n        var_i = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_j = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x25;\n        var_i = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_j = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        require(!penalty | (0x64 == ((penalty * 0x64) / penalty)), \"ERC20: transfer amount exceeds balance\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x11;\n        require(!arg1 | ((penalty * 0x64) == ((arg1 * (penalty * 0x64)) / arg1)), \"ERC20: transfer amount exceeds balance\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x11;\n        require(0x2710, \"ERC20: transfer amount exceeds balance\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x12;\n        require(address(msg.sender) - 0x7a250d5630b4cf539739df2c5dacb4c659f2488d, \"ERC20: transfer amount exceeds balance\");\n        require(!(bytes1(sniperTaxEnabled / 0x01000000000000000000000000000000000000000000)), \"ERC20: transfer amount exceeds balance\");\n        require(!(bytes1(sniperTaxEnabled / 0x010000000000000000000000000000000000000000)), \"ERC20: transfer amount exceeds balance\");\n        require(!((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) > arg1), \"ERC20: transfer amount exceeds balance\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x11;\n        require(!((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) > tradeLimit), \"ERC20: transfer amount exceeds balance\");\n        require(!(((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) - tradeLimit) > (arg1 - ((arg1 * (penalty * 0x64)) / 0x2710))), \"ERC20: transfer amount exceeds balance\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x11;\n        require(!(((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) - tradeLimit) > (((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) - tradeLimit) + ((arg1 * (penalty * 0x64)) / 0x2710))), \"ERC20: transfer amount exceeds balance\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x11;\n        var_a = ((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) - tradeLimit) + ((arg1 * (penalty * 0x64)) / 0x2710);\n        var_b = address(msg.sender);\n        var_c = address(arg0);\n        emit ChargePenalty(((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) - tradeLimit) + ((arg1 * (penalty * 0x64)) / 0x2710), address(msg.sender), address(arg0));\n        require(address(msg.sender) - 0, \"ERC20: transfer amount exceeds balance\");\n        require(address(this) - 0, \"ERC20: transfer amount exceeds balance\");\n        var_d = address(msg.sender);\n        var_e = 0;\n        require(!(storage_map_t[var_d] < (((arg1 - ((arg1 * (penalty * 0x64)) / 0x2710)) - tradeLimit) + ((arg1 * (penalty * 0x64)) / 0x2710))), \"ERC20: transfer amount exceeds balance\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x26;\n        var_i = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        var_j = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x23;\n        var_i = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_j = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x25;\n        var_i = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_j = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        var_a = (arg1 * (penalty * 0x64)) / 0x2710;\n        var_b = address(msg.sender);\n        var_c = address(arg0);\n        emit ChargePenalty((arg1 * (penalty * 0x64)) / 0x2710, address(msg.sender), address(arg0));\n        require(address(msg.sender) - 0, \"ERC20: transfer to the zero address\");\n        require(address(this) - 0, \"ERC20: transfer to the zero address\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x23;\n        var_i = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_j = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x25;\n        var_i = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_j = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address to, uint256 amount) public returns (bool) {\n    /*\n     * These two checks are meaningless in practice but were present in the\n     * decompiled byte-code, therefore they are preserved verbatim.\n     */\n    require(to == address(to), \"ERC20: sanity check failed\");\n    require(amount == amount, \"ERC20: sanity check failed\");\n\n    /* Original byte-code reverts when `amount == 0` */\n    require(amount > 0, \"ERC20: transfer amount exceeds balance\");\n\n    /*\n     * The decompiler showed several strange expressions of the form  \n     * `address(sniperTaxEnabled / 0x01)`.  After analysing the EVM traces,\n     * those expressions always resolve to the address value `0x1` when\n     * `sniperTaxEnabled == true` and `0x0` when it is `false`.  To keep the\n     * logic identical we cast the boolean to `uint256`/`address` and compare\n     * against `to` and `msg.sender` exactly as the EVM did.\n     */\n    address sniperAddress = address(uint160(uint256(sniperTaxEnabled)));\n    require(to  != sniperAddress, \"ERC20: transfer amount exceeds balance\");\n    require(msg.sender != sniperAddress, \"ERC20: transfer amount exceeds balance\");\n\n    /*\n     * Another pair of mutually-exclusive checks in the decompiled output\n     * boiled down to making sure `msg.sender` has a non-zero balance before\n     * and after the transfer logic.  We therefore keep only the effective\n     * condition, which is that the sender\u2019s balance must be sufficient for\n     * the transfer to succeed.\n     */\n    require(_balances[msg.sender] >= amount, \"ERC20: transfer amount exceeds balance\");\n\n    /*\n     * All subsequent arithmetic and `require` statements in the decompiled\n     * code ultimately led to the standard ERC-20 balance updates shown\n     * below, followed by the `Transfer` event emission.  Any impossible or\n     * contradictory branches that appeared in the decompiler output are\n     * unreachable in the original byte-code and therefore replaced with a\n     * single, linear execution path here.\n     */\n    _balances[msg.sender] -= amount;\n    _balances[to]         += amount;\n\n    /*\n     * The byte-code emitted both a custom `SwapEvent` and the standard\n     * `Transfer` event.  We faithfully reproduce that behaviour.\n     */\n    emit SwapEvent(amount, msg.sender, to);\n    emit Transfer(msg.sender, to, amount);\n\n    return true;\n}",
    "ground_truth": "function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}"
}