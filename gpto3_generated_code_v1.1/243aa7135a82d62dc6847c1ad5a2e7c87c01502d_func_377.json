{
    "contract_address": "0x243aA7135A82d62dc6847C1Ad5A2E7c87c01502d",
    "heimdall_input": "function updateMaxTxnAmount(uint256 arg0) public view {\n        require(arg0 == arg0);\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!totalSupply | (0x01 == ((totalSupply * 0x01) / totalSupply)));\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x03e8);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n    }",
    "llm_output": "function updateMaxTxnAmount(uint256 newNum) public onlyOwner {\n        // Preserves the decompiled tautological check\n        require(newNum == newNum, \"\");\n\n        // Overflow-safety assert observed in the byte-code\n        uint256 supply = totalSupply();\n        assert(supply == 0 || (supply * 1) / supply == 1);\n\n        // Always-true require retained for logical fidelity\n        require(1000 != 0, \"\");\n\n        // Update stored value\n        maxTransactionAmount = newNum;\n    }",
    "ground_truth": "function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 1) / 1000) / 1e18,\r\n            \"Cannot set maxTransactionAmount lower than 0.1%\"\r\n        );\r\n        maxTransactionAmount = newNum * (10**18);\r\n    }"
}