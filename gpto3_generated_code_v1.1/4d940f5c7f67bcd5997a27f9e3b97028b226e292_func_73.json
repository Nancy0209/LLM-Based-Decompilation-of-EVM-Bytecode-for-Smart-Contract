{
    "contract_address": "0x4d940f5C7f67BcD5997a27F9E3b97028B226e292",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender));\n        require(!arg1 < arg1);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        require(!0x64 > (~(arg1 - arg1)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        var_c = 0x194a51d800000000000000000000000000000000000000000000000000000000;\n        address var_d = address(msg.sender);\n        address var_e = address(arg0);\n        require(address(store_d).code.length);\n        (bool success, bytes memory ret0) = address(store_d).{ value: 0 ether }Unresolved_194a51d8(var_d); // call\n        uint256 var_f = var_f + (uint248(ret0.length + 0x1f));\n        require(!((var_f + ret0.length) - var_f) < 0x20);\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_h = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public payable returns (bool) {\n    /* \n        The following seemingly-redundant check exists in the original\n        bytecode and is preserved for semantic parity.\n    */\n    require(recipient == address(recipient), \"Recipient address cast mismatch\");\n\n    /* Original bytecode: require(address(msg.sender)); */\n    require(msg.sender != address(0), \"ERC20: transfer from the zero address\");\n\n    /* Decompiled artefact: `require(!arg1 < arg1);` \u2014 always true for uint256 */\n    require(amount >= 0, \"Invalid amount\"); // tautology kept for fidelity\n\n    /* Decompiled artefact: `require(!0x64 > (~(arg1 - arg1)));` */\n    require(!(uint256(0x64) > (~(amount - amount))), \"Arithmetic check failed\");\n\n    /* External call exactly as observed in the bytecode */\n    address target = store_d;                     // `store_d` is a storage address in the original contract\n    require(target.code.length > 0, \"Target contract not deployed\");\n\n    bytes4 SELECTOR = 0x194a51d8;                 // Unresolved selector from decompiled code\n    (bool success, bytes memory returndata) = target.call(\n        abi.encodeWithSelector(SELECTOR, msg.sender)\n    );\n    require(success, \"External call failed\");\n\n    /* \n        Ensure the external call returned at least one 32-byte word,\n        matching the original runtime bounds check:\n        `require(!(returndata.length < 32))`\n    */\n    require(returndata.length >= 32, \"Invalid return data size\");\n\n    /*\n        All subsequent operations in the decompiled output culminate\n        in a revert carrying the following reason string.  To retain\n        100 % logical fidelity we revert unconditionally here.\n    */\n    revert(\"ERC20: transfer from the zero address\");\n}",
    "ground_truth": "function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }"
}