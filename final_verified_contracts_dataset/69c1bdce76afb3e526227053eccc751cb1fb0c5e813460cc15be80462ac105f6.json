{
    "address": "0x243aA7135A82d62dc6847C1Ad5A2E7c87c01502d",
    "tx_hash": "69c1bdce76afb3e526227053eccc751cb1fb0c5e813460cc15be80462ac105f6",
    "block_number": 18000188,
    "timestamp": 1693069151,
    "gas_used_in_creation": 7285634,
    "creation_bytecode": "",
    "runtime_bytecode": "608060405260043610610338575f3560e01c80638da5cb5b116101aa578063bbc0c742116100f6578063dd62ed3e11610094578063f2fde38b1161006e578063f2fde38b14610c01578063f637434214610c29578063f8b45b0514610c53578063fbc10c5514610c7d5761033f565b8063dd62ed3e14610b71578063e2f4560514610bad578063f11a24d314610bd75761033f565b8063c18bc195116100d0578063c18bc19514610ab9578063c8c8ebe414610ae1578063d257b34f14610b0b578063d85ba06314610b475761033f565b8063bbc0c74214610a3f578063c024666814610a69578063c17b5b8c14610a915761033f565b80639c3b4fdc11610163578063a457c2d71161013d578063a457c2d714610963578063a9059cbb1461099f578063aacebbe3146109db578063b62496f514610a035761033f565b80639c3b4fdc146108e55780639fccce321461090f578063a0d82dc5146109395761033f565b80638da5cb5b146107ed5780638ea5220f146108175780639213691314610841578063924de9b71461086b57806395d89b41146108935780639a7a23d6146108bd5761033f565b806349bd5a5e11610284578063715018a61161022257806375f0a874116101fc57806375f0a8741461075b5780637bce5a04146107855780638095d564146107af5780638a8c523c146107d75761033f565b8063715018a6146106f3578063751039fc146107095780637571336a146107335761033f565b80636303516c1161025e5780636303516c146106395780636a486a8e146106635780636ddd17131461068d57806370a08231146106b75761033f565b806349bd5a5e146105a95780634a62bb65146105d35780634fbee193146105fd5761033f565b80631a8145bb116102f157806323b872dd116102cb57806323b872dd146104dd57806327c8f83514610519578063313ce56714610543578063395093511461056d5761033f565b80631a8145bb146104615780631f3fed8f1461048b578063203e727e146104b55761033f565b806306fdde0314610343578063095ea7b31461036d57806310d5de53146103a95780631694505e146103e557806318160ddd1461040f5780631816467f146104395761033f565b3661033f57005b5f80fd5b34801561034e575f80fd5b50610357610ca5565b604051610364919061395b565b60405180910390f35b348015610378575f80fd5b50610393600480360381019061038e9190613a0c565b610d35565b6040516103a09190613a64565b60405180910390f35b3480156103b4575f80fd5b506103cf60048036038101906103ca9190613a7d565b610d52565b6040516103dc9190613a64565b60405180910390f35b3480156103f0575f80fd5b506103f9610d6f565b6040516104069190613b03565b60405180910390f35b34801561041a575f80fd5b50610423610d93565b6040516104309190613b2b565b60405180910390f35b348015610444575f80fd5b5061045f600480360381019061045a9190613a7d565b610d9c565b005b34801561046c575f80fd5b50610475610ed6565b6040516104829190613b2b565b60405180910390f35b348015610496575f80fd5b5061049f610edc565b6040516104ac9190613b2b565b60405180910390f35b3480156104c0575f80fd5b506104db60048036038101906104d69190613b44565b610ee2565b005b3480156104e8575f80fd5b5061050360048036038101906104fe9190613b6f565b610ff1565b6040516105109190613a64565b60405180910390f35b348015610524575f80fd5b5061052d6110e3565b60405161053a9190613bce565b60405180910390f35b34801561054e575f80fd5b506105576110e9565b6040516105649190613c02565b60405180910390f35b348015610578575f80fd5b50610593600480360381019061058e9190613a0c565b6110f1565b6040516105a09190613a64565b60405180910390f35b3480156105b4575f80fd5b506105bd611198565b6040516105ca9190613bce565b60405180910390f35b3480156105de575f80fd5b506105e76111bc565b6040516105f49190613a64565b60405180910390f35b348015610608575f80fd5b50610623600480360381019061061e9190613a7d565b6111ce565b6040516106309190613a64565b60405180910390f35b348015610644575f80fd5b5061064d611220565b60405161065a9190613bce565b60405180910390f35b34801561066e575f80fd5b50610677611245565b6040516106849190613b2b565b60405180910390f35b348015610698575f80fd5b506106a161124b565b6040516106ae9190613a64565b60405180910390f35b3480156106c2575f80fd5b506106dd60048036038101906106d89190613a7d565b61125e565b6040516106ea9190613b2b565b60405180910390f35b3480156106fe575f80fd5b506107076112a3565b005b348015610714575f80fd5b5061071d61132a565b60405161072a9190613a64565b60405180910390f35b34801561073e575f80fd5b5061075960048036038101906107549190613c45565b6113f3565b005b348015610766575f80fd5b5061076f6114c7565b60405161077c9190613bce565b60405180910390f35b348015610790575f80fd5b506107996114ec565b6040516107a69190613b2b565b60405180910390f35b3480156107ba575f80fd5b506107d560048036038101906107d09190613c83565b6114f2565b005b3480156107e2575f80fd5b506107eb6115ab565b005b3480156107f8575f80fd5b5061080161165f565b60405161080e9190613bce565b60405180910390f35b348015610822575f80fd5b5061082b611687565b6040516108389190613bce565b60405180910390f35b34801561084c575f80fd5b506108556116ac565b6040516108629190613b2b565b60405180910390f35b348015610876575f80fd5b50610891600480360381019061088c9190613cd3565b6116b2565b005b34801561089e575f80fd5b506108a761174b565b6040516108b4919061395b565b60405180910390f35b3480156108c8575f80fd5b506108e360048036038101906108de9190613c45565b6117db565b005b3480156108f0575f80fd5b506108f96118f3565b6040516109069190613b2b565b60405180910390f35b34801561091a575f80fd5b506109236118f9565b6040516109309190613b2b565b60405180910390f35b348015610944575f80fd5b5061094d6118ff565b60405161095a9190613b2b565b60405180910390f35b34801561096e575f80fd5b5061098960048036038101906109849190613a0c565b611905565b6040516109969190613a64565b60405180910390f35b3480156109aa575f80fd5b506109c560048036038101906109c09190613a0c565b6119eb565b6040516109d29190613a64565b60405180910390f35b3480156109e6575f80fd5b50610a0160048036038101906109fc9190613a7d565b611a08565b005b348015610a0e575f80fd5b50610a296004803603810190610a249190613a7d565b611b42565b604051610a369190613a64565b60405180910390f35b348015610a4a575f80fd5b50610a53611b5f565b604051610a609190613a64565b60405180910390f35b348015610a74575f80fd5b50610a8f6004803603810190610a8a9190613c45565b611b72565b005b348015610a9c575f80fd5b50610ab76004803603810190610ab29190613c83565b611c94565b005b348015610ac4575f80fd5b50610adf6004803603810190610ada9190613b44565b611d4d565b005b348015610aec575f80fd5b50610af5611e5c565b604051610b029190613b2b565b60405180910390f35b348015610b16575f80fd5b50610b316004803603810190610b2c9190613b44565b611e62565b604051610b3e9190613a64565b60405180910390f35b348015610b52575f80fd5b50610b5b611fb6565b604051610b689190613b2b565b60405180910390f35b348015610b7c575f80fd5b50610b976004803603810190610b929190613cfe565b611fbc565b604051610ba49190613b2b565b60405180910390f35b348015610bb8575f80fd5b50610bc161203e565b604051610bce9190613b2b565b60405180910390f35b348015610be2575f80fd5b50610beb612044565b604051610bf89190613b2b565b60405180910390f35b348015610c0c575f80fd5b50610c276004803603810190610c229190613a7d565b61204a565b005b348015610c34575f80fd5b50610c3d612140565b604051610c4a9190613b2b565b60405180910390f35b348015610c5e575f80fd5b50610c67612146565b604051610c749190613b2b565b60405180910390f35b348015610c88575f80fd5b50610ca36004803603810190610c9e9190613a7d565b61214c565b005b606060038054610cb490613d69565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce090613d69565b8015610d2b5780601f10610d0257610100808354040283529160200191610d2b565b820191905f5260205f20905b815481529060010190602001808311610d0e57829003601f168201915b5050505050905090565b5f610d48610d41612286565b848461228d565b6001905092915050565b6019602052805f5260405f205f915054906101000a900460ff1681565b7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b5f600254905090565b610da4612286565b73ffffffffffffffffffffffffffffffffffffffff16610dc261165f565b73ffffffffffffffffffffffffffffffffffffffff1614610e18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0f90613de3565b60405180910390fd5b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f90b8024c4923d3873ff5b9fcb43d0360d4b9217fa41225d07ba379993552e74360405160405180910390a38060075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60165481565b60155481565b610eea612286565b73ffffffffffffffffffffffffffffffffffffffff16610f0861165f565b73ffffffffffffffffffffffffffffffffffffffff1614610f5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5590613de3565b60405180910390fd5b670de0b6b3a76400006103e86001610f74610d93565b610f7e9190613e2e565b610f889190613e9c565b610f929190613e9c565b811015610fd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcb90613f3c565b60405180910390fd5b670de0b6b3a764000081610fe89190613e2e565b60098190555050565b5f610ffd848484612450565b5f60015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f611044612286565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050828110156110c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ba90613fca565b60405180910390fd5b6110d7856110cf612286565b85840361228d565b60019150509392505050565b61dead81565b5f6012905090565b5f61118e6110fd612286565b848460015f61110a612286565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546111899190613fe8565b61228d565b6001905092915050565b7f000000000000000000000000e0e315df2221c792f8843f98f8e8a5dab1101a4981565b600c5f9054906101000a900460ff1681565b5f60185f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60115481565b600c60029054906101000a900460ff1681565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6112ab612286565b73ffffffffffffffffffffffffffffffffffffffff166112c961165f565b73ffffffffffffffffffffffffffffffffffffffff161461131f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131690613de3565b60405180910390fd5b6113285f612ee0565b565b5f611333612286565b73ffffffffffffffffffffffffffffffffffffffff1661135161165f565b73ffffffffffffffffffffffffffffffffffffffff16146113a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139e90613de3565b60405180910390fd5b5f600c5f6101000a81548160ff0219169083151502179055507f7bfa7bacf025baa75e5308bf15bcf2948f406c7ebe3eb1a8bb611862b9d647ef60405160405180910390a16001905090565b6113fb612286565b73ffffffffffffffffffffffffffffffffffffffff1661141961165f565b73ffffffffffffffffffffffffffffffffffffffff161461146f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146690613de3565b60405180910390fd5b8060195f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505050565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e5481565b6114fa612286565b73ffffffffffffffffffffffffffffffffffffffff1661151861165f565b73ffffffffffffffffffffffffffffffffffffffff161461156e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156590613de3565b60405180910390fd5b82600e8190555081600f8190555080601081905550601054600f54600e546115969190613fe8565b6115a09190613fe8565b600d81905550505050565b6115b3612286565b73ffffffffffffffffffffffffffffffffffffffff166115d161165f565b73ffffffffffffffffffffffffffffffffffffffff1614611627576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161e90613de3565b60405180910390fd5b6001600c60016101000a81548160ff0219169083151502179055506001600c60026101000a81548160ff021916908315150217905550565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60125481565b6116ba612286565b73ffffffffffffffffffffffffffffffffffffffff166116d861165f565b73ffffffffffffffffffffffffffffffffffffffff161461172e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172590613de3565b60405180910390fd5b80600c60026101000a81548160ff02191690831515021790555050565b60606004805461175a90613d69565b80601f016020809104026020016040519081016040528092919081815260200182805461178690613d69565b80156117d15780601f106117a8576101008083540402835291602001916117d1565b820191905f5260205f20905b8154815290600101906020018083116117b457829003601f168201915b5050505050905090565b6117e3612286565b73ffffffffffffffffffffffffffffffffffffffff1661180161165f565b73ffffffffffffffffffffffffffffffffffffffff1614611857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184e90613de3565b60405180910390fd5b7f000000000000000000000000e0e315df2221c792f8843f98f8e8a5dab1101a4973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118dc9061408b565b60405180910390fd5b6118ef8282612fa3565b5050565b60105481565b60175481565b60145481565b5f8060015f611912612286565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050828110156119cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c390614119565b60405180910390fd5b6119e06119d7612286565b8585840361228d565b600191505092915050565b5f6119fe6119f7612286565b8484612450565b6001905092915050565b611a10612286565b73ffffffffffffffffffffffffffffffffffffffff16611a2e61165f565b73ffffffffffffffffffffffffffffffffffffffff1614611a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7b90613de3565b60405180910390fd5b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fa751787977eeb3902e30e1d19ca00c6ad274a1f622c31a206e32366700b0567460405160405180910390a38060065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601a602052805f5260405f205f915054906101000a900460ff1681565b600c60019054906101000a900460ff1681565b611b7a612286565b73ffffffffffffffffffffffffffffffffffffffff16611b9861165f565b73ffffffffffffffffffffffffffffffffffffffff1614611bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be590613de3565b60405180910390fd5b8060185f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df782604051611c889190613a64565b60405180910390a25050565b611c9c612286565b73ffffffffffffffffffffffffffffffffffffffff16611cba61165f565b73ffffffffffffffffffffffffffffffffffffffff1614611d10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0790613de3565b60405180910390fd5b826012819055508160138190555080601481905550601454601354601254611d389190613fe8565b611d429190613fe8565b601181905550505050565b611d55612286565b73ffffffffffffffffffffffffffffffffffffffff16611d7361165f565b73ffffffffffffffffffffffffffffffffffffffff1614611dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc090613de3565b60405180910390fd5b670de0b6b3a76400006103e86005611ddf610d93565b611de99190613e2e565b611df39190613e9c565b611dfd9190613e9c565b811015611e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e36906141a7565b60405180910390fd5b670de0b6b3a764000081611e539190613e2e565b600b8190555050565b60095481565b5f611e6b612286565b73ffffffffffffffffffffffffffffffffffffffff16611e8961165f565b73ffffffffffffffffffffffffffffffffffffffff1614611edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed690613de3565b60405180910390fd5b620186a06001611eed610d93565b611ef79190613e2e565b611f019190613e9c565b821015611f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3a90614235565b60405180910390fd5b6103e86005611f50610d93565b611f5a9190613e2e565b611f649190613e9c565b821115611fa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9d906142c3565b60405180910390fd5b81600a8190555060019050919050565b600d5481565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b600a5481565b600f5481565b612052612286565b73ffffffffffffffffffffffffffffffffffffffff1661207061165f565b73ffffffffffffffffffffffffffffffffffffffff16146120c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bd90613de3565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212b90614351565b60405180910390fd5b61213d81612ee0565b50565b60135481565b600b5481565b612154612286565b73ffffffffffffffffffffffffffffffffffffffff1661217261165f565b73ffffffffffffffffffffffffffffffffffffffff16146121c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bf90613de3565b60405180910390fd5b60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8e4fb3162b55d3fcdb7507ecfed5ab4ea5d2bd7494d0bb621d698a52ea3f74b460405160405180910390a38060085f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036122fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f2906143df565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612369576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123609061446d565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516124439190613b2b565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036124be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124b5906144fb565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361252c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252390614589565b60405180910390fd5b5f81036125435761253e83835f613041565b612edb565b600c5f9054906101000a900460ff1615612a275761255f61165f565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156125cd575061259d61165f565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b801561260557505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b801561263f575061dead73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156126585750600560149054906101000a900460ff16155b15612a2657600c60019054906101000a900460ff1661274c5760185f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff168061270c575060185f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b61274b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612742906145f1565b60405180910390fd5b5b601a5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1680156127e9575060195f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16155b1561289057600954811115612833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282a9061467f565b60405180910390fd5b600b5461283f8361125e565b8261284a9190613fe8565b111561288b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612882906146e7565b60405180910390fd5b612a25565b601a5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16801561292d575060195f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16155b1561297c57600954811115612977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296e90614775565b60405180910390fd5b612a24565b60195f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16612a2357600b546129d68361125e565b826129e19190613fe8565b1115612a22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a19906146e7565b60405180910390fd5b5b5b5b5b5b5f612a313061125e565b90505f600a548210159050808015612a555750600c60029054906101000a900460ff165b8015612a6e5750600560149054906101000a900460ff16155b8015612ac15750601a5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16155b8015612b14575060185f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16155b8015612b67575060185f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16155b15612baa576001600560146101000a81548160ff021916908315150217905550612b8f6132b6565b5f600560146101000a81548160ff0219169083151502179055505b5f600560149054906101000a900460ff1615905060185f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1680612c59575060185f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b15612c62575f90505b5f8115612ecb57601a5f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff168015612cc057505f601154115b15612d8a57612ced6064612cdf6011548861355d90919063ffffffff16565b61357290919063ffffffff16565b905060115460135482612d009190613e2e565b612d0a9190613e9c565b60165f828254612d1a9190613fe8565b9250508190555060115460145482612d329190613e2e565b612d3c9190613e9c565b60175f828254612d4c9190613fe8565b9250508190555060115460125482612d649190613e2e565b612d6e9190613e9c565b60155f828254612d7e9190613fe8565b92505081905550612ea8565b601a5f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff168015612de157505f600d54115b15612ea757612e0e6064612e00600d548861355d90919063ffffffff16565b61357290919063ffffffff16565b9050600d54600f5482612e219190613e2e565b612e2b9190613e9c565b60165f828254612e3b9190613fe8565b92505081905550600d5460105482612e539190613e2e565b612e5d9190613e9c565b60175f828254612e6d9190613fe8565b92505081905550600d54600e5482612e859190613e2e565b612e8f9190613e9c565b60155f828254612e9f9190613fe8565b925050819055505b5b5f811115612ebc57612ebb873083613041565b5b8085612ec89190614793565b94505b612ed6878787613041565b505050505b505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80601a5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508015158273ffffffffffffffffffffffffffffffffffffffff167fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab60405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036130af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130a6906144fb565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361311d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161311490614589565b60405180910390fd5b613128838383613587565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156131ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131a290614836565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546132399190613fe8565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161329d9190613b2b565b60405180910390a36132b084848461358c565b50505050565b5f6132c03061125e565b90505f6017546015546016546132d69190613fe8565b6132e09190613fe8565b90505f808314806132f057505f82145b156132fd5750505061355b565b5f6002836016548661330f9190613e2e565b6133199190613e9c565b6133239190613e9c565b90505f613339828661359190919063ffffffff16565b90505f479050613348826135a6565b5f61335c824761359190919063ffffffff16565b90505f613386876133786015548561355d90919063ffffffff16565b61357290919063ffffffff16565b90505f6133b0886133a26017548661355d90919063ffffffff16565b61357290919063ffffffff16565b90505f8183856133c09190614793565b6133ca9190614793565b90505f6016819055505f6015819055505f60178190555060075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161342690614881565b5f6040518083038185875af1925050503d805f8114613460576040519150601f19603f3d011682016040523d82523d5f602084013e613465565b606091505b5050809850505f8711801561347957505f81115b156134c65761348887826137d9565b7f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb56186826016546040516134bd93929190614895565b60405180910390a15b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161350b90614881565b5f6040518083038185875af1925050503d805f8114613545576040519150601f19603f3d011682016040523d82523d5f602084013e61354a565b606091505b505080985050505050505050505050505b565b5f818361356a9190613e2e565b905092915050565b5f818361357f9190613e9c565b905092915050565b505050565b505050565b5f818361359e9190614793565b905092915050565b5f600267ffffffffffffffff8111156135c2576135c16148ca565b5b6040519080825280602002602001820160405280156135f05781602001602082028036833780820191505090505b50905030815f81518110613607576136066148f7565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136aa573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906136ce9190614938565b816001815181106136e2576136e16148f7565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050613747307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d8461228d565b7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663791ac947835f8430426040518663ffffffff1660e01b81526004016137a8959493929190614a53565b5f604051808303815f87803b1580156137bf575f80fd5b505af11580156137d1573d5f803e3d5ffd5b505050505050565b613804307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d8461228d565b7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663f305d7198230855f8060085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16426040518863ffffffff1660e01b815260040161388996959493929190614aab565b60606040518083038185885af11580156138a5573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906138ca9190614b1e565b5050505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156139085780820151818401526020810190506138ed565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61392d826138d1565b61393781856138db565b93506139478185602086016138eb565b61395081613913565b840191505092915050565b5f6020820190508181035f8301526139738184613923565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6139a88261397f565b9050919050565b6139b88161399e565b81146139c2575f80fd5b50565b5f813590506139d3816139af565b92915050565b5f819050919050565b6139eb816139d9565b81146139f5575f80fd5b50565b5f81359050613a06816139e2565b92915050565b5f8060408385031215613a2257613a2161397b565b5b5f613a2f858286016139c5565b9250506020613a40858286016139f8565b9150509250929050565b5f8115159050919050565b613a5e81613a4a565b82525050565b5f602082019050613a775f830184613a55565b92915050565b5f60208284031215613a9257613a9161397b565b5b5f613a9f848285016139c5565b91505092915050565b5f819050919050565b5f613acb613ac6613ac18461397f565b613aa8565b61397f565b9050919050565b5f613adc82613ab1565b9050919050565b5f613aed82613ad2565b9050919050565b613afd81613ae3565b82525050565b5f602082019050613b165f830184613af4565b92915050565b613b25816139d9565b82525050565b5f602082019050613b3e5f830184613b1c565b92915050565b5f60208284031215613b5957613b5861397b565b5b5f613b66848285016139f8565b91505092915050565b5f805f60608486031215613b8657613b8561397b565b5b5f613b93868287016139c5565b9350506020613ba4868287016139c5565b9250506040613bb5868287016139f8565b9150509250925092565b613bc88161399e565b82525050565b5f602082019050613be15f830184613bbf565b92915050565b5f60ff82169050919050565b613bfc81613be7565b82525050565b5f602082019050613c155f830184613bf3565b92915050565b613c2481613a4a565b8114613c2e575f80fd5b50565b5f81359050613c3f81613c1b565b92915050565b5f8060408385031215613c5b57613c5a61397b565b5b5f613c68858286016139c5565b9250506020613c7985828601613c31565b9150509250929050565b5f805f60608486031215613c9a57613c9961397b565b5b5f613ca7868287016139f8565b9350506020613cb8868287016139f8565b9250506040613cc9868287016139f8565b9150509250925092565b5f60208284031215613ce857613ce761397b565b5b5f613cf584828501613c31565b91505092915050565b5f8060408385031215613d1457613d1361397b565b5b5f613d21858286016139c5565b9250506020613d32858286016139c5565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680613d8057607f821691505b602082108103613d9357613d92613d3c565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f613dcd6020836138db565b9150613dd882613d99565b602082019050919050565b5f6020820190508181035f830152613dfa81613dc1565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613e38826139d9565b9150613e43836139d9565b9250828202613e51816139d9565b91508282048414831517613e6857613e67613e01565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613ea6826139d9565b9150613eb1836139d9565b925082613ec157613ec0613e6f565b5b828204905092915050565b7f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e74205f8201527f6c6f776572207468616e20302e31250000000000000000000000000000000000602082015250565b5f613f26602f836138db565b9150613f3182613ecc565b604082019050919050565b5f6020820190508181035f830152613f5381613f1a565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320615f8201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b5f613fb46028836138db565b9150613fbf82613f5a565b604082019050919050565b5f6020820190508181035f830152613fe181613fa8565b9050919050565b5f613ff2826139d9565b9150613ffd836139d9565b925082820190508082111561401557614014613e01565b5b92915050565b7f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d205f8201527f6175746f6d617465644d61726b65744d616b6572506169727300000000000000602082015250565b5f6140756039836138db565b91506140808261401b565b604082019050919050565b5f6020820190508181035f8301526140a281614069565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f6141036025836138db565b915061410e826140a9565b604082019050919050565b5f6020820190508181035f830152614130816140f7565b9050919050565b7f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e205f8201527f302e352500000000000000000000000000000000000000000000000000000000602082015250565b5f6141916024836138db565b915061419c82614137565b604082019050919050565b5f6020820190508181035f8301526141be81614185565b9050919050565b7f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e5f8201527f20302e3030312520746f74616c20737570706c792e0000000000000000000000602082015250565b5f61421f6035836138db565b915061422a826141c5565b604082019050919050565b5f6020820190508181035f83015261424c81614213565b9050919050565b7f5377617020616d6f756e742063616e6e6f7420626520686967686572207468615f8201527f6e20302e352520746f74616c20737570706c792e000000000000000000000000602082015250565b5f6142ad6034836138db565b91506142b882614253565b604082019050919050565b5f6020820190508181035f8301526142da816142a1565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f61433b6026836138db565b9150614346826142e1565b604082019050919050565b5f6020820190508181035f8301526143688161432f565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f6143c96024836138db565b91506143d48261436f565b604082019050919050565b5f6020820190508181035f8301526143f6816143bd565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f6144576022836138db565b9150614462826143fd565b604082019050919050565b5f6020820190508181035f8301526144848161444b565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f6144e56025836138db565b91506144f08261448b565b604082019050919050565b5f6020820190508181035f830152614512816144d9565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f6145736023836138db565b915061457e82614519565b604082019050919050565b5f6020820190508181035f8301526145a081614567565b9050919050565b7f54726164696e67206973206e6f74206163746976652e000000000000000000005f82015250565b5f6145db6016836138db565b91506145e6826145a7565b602082019050919050565b5f6020820190508181035f830152614608816145cf565b9050919050565b7f427579207472616e7366657220616d6f756e74206578636565647320746865205f8201527f6d61785472616e73616374696f6e416d6f756e742e0000000000000000000000602082015250565b5f6146696035836138db565b91506146748261460f565b604082019050919050565b5f6020820190508181035f8301526146968161465d565b9050919050565b7f4d61782077616c6c6574206578636565646564000000000000000000000000005f82015250565b5f6146d16013836138db565b91506146dc8261469d565b602082019050919050565b5f6020820190508181035f8301526146fe816146c5565b9050919050565b7f53656c6c207472616e7366657220616d6f756e742065786365656473207468655f8201527f206d61785472616e73616374696f6e416d6f756e742e00000000000000000000602082015250565b5f61475f6036836138db565b915061476a82614705565b604082019050919050565b5f6020820190508181035f83015261478c81614753565b9050919050565b5f61479d826139d9565b91506147a8836139d9565b92508282039050818111156147c0576147bf613e01565b5b92915050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f6148206026836138db565b915061482b826147c6565b604082019050919050565b5f6020820190508181035f83015261484d81614814565b9050919050565b5f81905092915050565b50565b5f61486c5f83614854565b91506148778261485e565b5f82019050919050565b5f61488b82614861565b9150819050919050565b5f6060820190506148a85f830186613b1c565b6148b56020830185613b1c565b6148c26040830184613b1c565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050614932816139af565b92915050565b5f6020828403121561494d5761494c61397b565b5b5f61495a84828501614924565b91505092915050565b5f819050919050565b5f61498661498161497c84614963565b613aa8565b6139d9565b9050919050565b6149968161496c565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6149ce8161399e565b82525050565b5f6149df83836149c5565b60208301905092915050565b5f602082019050919050565b5f614a018261499c565b614a0b81856149a6565b9350614a16836149b6565b805f5b83811015614a46578151614a2d88826149d4565b9750614a38836149eb565b925050600181019050614a19565b5085935050505092915050565b5f60a082019050614a665f830188613b1c565b614a73602083018761498d565b8181036040830152614a8581866149f7565b9050614a946060830185613bbf565b614aa16080830184613b1c565b9695505050505050565b5f60c082019050614abe5f830189613bbf565b614acb6020830188613b1c565b614ad8604083018761498d565b614ae5606083018661498d565b614af26080830185613bbf565b614aff60a0830184613b1c565b979650505050505050565b5f81519050614b18816139e2565b92915050565b5f805f60608486031215614b3557614b3461397b565b5b5f614b4286828701614b0a565b9350506020614b5386828701614b0a565b9250506040614b6486828701614b0a565b915050925092509256fea26469706673582212202645ef396a5dc07e4fdfb11f9270f0ea7fae5cf4b03c8dec50e9ac06c4cdb0f764736f6c63430008150033",
    "contract_name": "POND",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"BoughtEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LimitsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"devWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"lpWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"marketingWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLPWallet\",\"type\":\"address\"}],\"name\":\"updateLPWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n \r\n https://t.me/PondGroup\r\n\r\n*/\r\n\r\n//  SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n} \r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract POND is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    address public constant deadAddress = address(0xdead);\r\n\r\n    bool private swapping;\r\n\r\n    address public marketingWallet;\r\n    address public devWallet;\r\n    address public lpWallet;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWallet;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = true;\r\n    bool public swapEnabled = true;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyMarketingFee;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyDevFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 public sellMarketingFee;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public sellDevFee;\r\n\r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForDev;\r\n\r\n    /******************/\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event LimitsRemoved();\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event marketingWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event devWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event lpWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    constructor() ERC20(\"Pond\", \"POND\") {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n\r\n        uint256 _buyMarketingFee = 0;\r\n        uint256 _buyLiquidityFee = 0;\r\n        uint256 _buyDevFee = 0;\r\n\r\n        uint256 _sellMarketingFee = 0;\r\n        uint256 _sellLiquidityFee = 0;\r\n        uint256 _sellDevFee = 0;\r\n\r\n        uint256 totalSupply = 1000000000000 * 1e18;\r\n\r\n        maxTransactionAmount = (totalSupply * 2) / 100;\r\n        maxWallet = (totalSupply * 2) / 100;\r\n        swapTokensAtAmount = (totalSupply * 5) / 10000; // 0.05% swap wallet\r\n\r\n        buyMarketingFee = _buyMarketingFee;\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        buyDevFee = _buyDevFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\r\n\r\n        sellMarketingFee = _sellMarketingFee;\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellDevFee = _sellDevFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\r\n\r\n        marketingWallet = address(0xFC06c6c7eDbd7920Ce914eA2aB4b5a61C11b8B85); \r\n        devWallet = address(0xFC06c6c7eDbd7920Ce914eA2aB4b5a61C11b8B85);\r\n        lpWallet = msg.sender;\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n        excludeFromFees(marketingWallet, true);\r\n\r\n        excludeFromMaxTransaction(owner(), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n        excludeFromMaxTransaction(marketingWallet, true);\r\n\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // once enabled, can never be turned off\r\n    function enableTrading() external onlyOwner {\r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    // remove limits after token is stable\r\n    function removeLimits() external onlyOwner returns (bool) {\r\n        limitsInEffect = false;\r\n        emit LimitsRemoved();\r\n        return true;\r\n    }\r\n\r\n    // change the minimum amount of tokens to sell from fees\r\n    function updateSwapTokensAtAmount(uint256 newAmount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            newAmount >= (totalSupply() * 1) / 100000,\r\n            \"Swap amount cannot be lower than 0.001% total supply.\"\r\n        );\r\n        require(\r\n            newAmount <= (totalSupply() * 5) / 1000,\r\n            \"Swap amount cannot be higher than 0.5% total supply.\"\r\n        );\r\n        swapTokensAtAmount = newAmount;\r\n        return true;\r\n    }\r\n\r\n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 1) / 1000) / 1e18,\r\n            \"Cannot set maxTransactionAmount lower than 0.1%\"\r\n        );\r\n        maxTransactionAmount = newNum * (10**18);\r\n    }\r\n\r\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot set maxWallet lower than 0.5%\"\r\n        );\r\n        maxWallet = newNum * (10**18);\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    // only use to disable contract sales if absolutely necessary (emergency use only)\r\n    function updateSwapEnabled(bool enabled) external onlyOwner {\r\n        swapEnabled = enabled;\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        buyMarketingFee = _marketingFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyDevFee = _devFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\r\n    }\r\n\r\n    function updateSellFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        sellMarketingFee = _marketingFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellDevFee = _devFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateMarketingWallet(address newMarketingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\r\n        marketingWallet = newMarketingWallet;\r\n    }\r\n\r\n    function updateLPWallet(address newLPWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit lpWalletUpdated(newLPWallet, lpWallet);\r\n        lpWallet = newLPWallet;\r\n    }\r\n\r\n    function updateDevWallet(address newWallet) external onlyOwner {\r\n        emit devWalletUpdated(newWallet, devWallet);\r\n        devWallet = newWallet;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    event BoughtEarly(address indexed sniper);\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ) {\r\n                if (!tradingActive) {\r\n                    require(\r\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\r\n                        \"Trading is not active.\"\r\n                    );\r\n                }\r\n\r\n                //when buy\r\n                if (\r\n                    automatedMarketMakerPairs[from] &&\r\n                    !_isExcludedMaxTransactionAmount[to]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Buy transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n                //when sell\r\n                else if (\r\n                    automatedMarketMakerPairs[to] &&\r\n                    !_isExcludedMaxTransactionAmount[from]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Sell transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if (takeFee) {\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\r\n                fees = amount.mul(sellTotalFees).div(100);\r\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\r\n                tokensForDev += (fees * sellDevFee) / sellTotalFees;\r\n                tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = amount.mul(buyTotalFees).div(100);\r\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\r\n                tokensForDev += (fees * buyDevFee) / buyTotalFees;\r\n                tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            lpWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity +\r\n            tokensForMarketing +\r\n            tokensForDev;\r\n        bool success;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /\r\n            totalTokensToSwap /\r\n            2;\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(\r\n            totalTokensToSwap\r\n        );\r\n        uint256 ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap);\r\n\r\n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForDev;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n        tokensForDev = 0;\r\n\r\n        (success, ) = address(devWallet).call{value: ethForDev}(\"\");\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(\r\n                amountToSwapForETH,\r\n                ethForLiquidity,\r\n                tokensForLiquidity\r\n            );\r\n        }\r\n\r\n        (success, ) = address(marketingWallet).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n}",
    "etherscan_verified": true
}