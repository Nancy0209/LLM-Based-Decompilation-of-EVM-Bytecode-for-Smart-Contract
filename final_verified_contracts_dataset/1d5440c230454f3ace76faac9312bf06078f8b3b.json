{
    "address": "0x1D5440C230454f3ace76faaC9312bf06078f8B3b",
    "tx_hash": "6cee3e797370c172560b55fc69dc83297656ea5fd979cde8635f5244638d1dbf",
    "block_number": 18007246,
    "timestamp": 1693154387,
    "gas_used_in_creation": 4367889,
    "creation_bytecode": "60806040526006805460ff191690556019600755601e600881815560016009819055600a908155600b839055600c92909255600d8290555f600e55620000459162000653565b62000055906301312d006200066a565b600f55620000666008600a62000653565b62000076906301312d006200066a565b601055620000876008600a62000653565b620000949060146200066a565b601155620000a56008600a62000653565b620000b5906301312d006200066a565b6012556014805461ffff60a81b19169055348015620000d2575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060068054610100600160a81b0319166101003302179055620001386008600a62000653565b6200014890633b9aca006200066a565b335f908152600160208190526040822092909255600390620001715f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff199687161790553080825260039094528281208054861660019081179091556006546101009004909216815291909120805490931617909155601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556200022391906200020d6008600a62000653565b6200021d90633b9aca006200066a565b62000419565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000274573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200029a919062000684565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002fa573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000320919062000684565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156200036b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000391919062000684565b601480546001600160a01b0319166001600160a01b0392909216919091179055620003b93390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620003f26008600a62000653565b6200040290633b9aca006200066a565b60405190815260200160405180910390a3620006ac565b6001600160a01b038316620004815760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084015b60405180910390fd5b6001600160a01b038216620004e45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162000478565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200059857815f19048211156200057c576200057c62000544565b808516156200058a57918102915b93841c93908002906200055d565b509250929050565b5f82620005b0575060016200064d565b81620005be57505f6200064d565b8160018114620005d75760028114620005e25762000602565b60019150506200064d565b60ff841115620005f657620005f662000544565b50506001821b6200064d565b5060208310610133831016604e8410600b841016171562000627575081810a6200064d565b62000633838362000558565b805f190482111562000649576200064962000544565b0290505b92915050565b5f6200066360ff841683620005a0565b9392505050565b80820281158282048414176200064d576200064d62000544565b5f6020828403121562000695575f80fd5b81516001600160a01b038116811462000663575f80fd5b6118a680620006ba5f395ff3fe608060405260043610610129575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb1461033e578063bf474bed1461035d578063c876d0b914610372578063c9567bf91461038b578063d34628cc1461039f578063dd62ed3e146103be575f80fd5b8063751039fc146102ae5780637d1db4a5146102c25780638da5cb5b146102d75780638f9a55c0146102fd57806395d89b4114610312575f80fd5b8063313ce567116100ee578063313ce567146101fe5780633bbac5791461021957806351bc3c851461025057806370a0823114610266578063715018a61461029a575f80fd5b806306fdde0314610134578063095ea7b3146101795780630faee56f146101a857806318160ddd146101cb57806323b872dd146101df575f80fd5b3661013057005b5f80fd5b34801561013f575f80fd5b5060408051808201909152600b81526a08ec2dad2dcce408cd8eaf60ab1b60208201525b60405161017091906113b5565b60405180910390f35b348015610184575f80fd5b50610198610193366004611427565b610402565b6040519015158152602001610170565b3480156101b3575f80fd5b506101bd60125481565b604051908152602001610170565b3480156101d6575f80fd5b506101bd610418565b3480156101ea575f80fd5b506101986101f9366004611451565b610438565b348015610209575f80fd5b5060405160088152602001610170565b348015610224575f80fd5b5061019861023336600461148f565b6001600160a01b03165f9081526004602052604090205460ff1690565b34801561025b575f80fd5b5061026461049f565b005b348015610271575f80fd5b506101bd61028036600461148f565b6001600160a01b03165f9081526001602052604090205490565b3480156102a5575f80fd5b506102646104f5565b3480156102b9575f80fd5b5061026461056f565b3480156102cd575f80fd5b506101bd600f5481565b3480156102e2575f80fd5b505f546040516001600160a01b039091168152602001610170565b348015610308575f80fd5b506101bd60105481565b34801561031d575f80fd5b5060408051808201909152600481526320a3a7a760e11b6020820152610163565b348015610349575f80fd5b50610198610358366004611427565b61062a565b348015610368575f80fd5b506101bd60115481565b34801561037d575f80fd5b506006546101989060ff1681565b348015610396575f80fd5b50610264610636565b3480156103aa575f80fd5b506102646103b93660046114be565b61081b565b3480156103c9575f80fd5b506101bd6103d836600461157e565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f61040e3384846108a9565b5060015b92915050565b5f6104256008600a6116a9565b61043390633b9aca006116b7565b905090565b5f6104448484846109cc565b610495843361049085604051806060016040528060288152602001611849602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611014565b6108a9565b5060019392505050565b60065461010090046001600160a01b0316336001600160a01b0316146104c3575f80fd5b305f9081526001602052604090205480156104e1576104e18161104c565b4780156104f1576104f1816111d5565b5050565b5f546001600160a01b031633146105275760405162461bcd60e51b815260040161051e906116ce565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105985760405162461bcd60e51b815260040161051e906116ce565b6105a46008600a6116a9565b6105b290633b9aca006116b7565b600f556105c16008600a6116a9565b6105cf90633b9aca006116b7565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106096008600a6116a9565b61061790633b9aca006116b7565b60405190815260200160405180910390a1565b5f61040e3384846109cc565b5f546001600160a01b0316331461065f5760405162461bcd60e51b815260040161051e906116ce565b601454600160a01b900460ff16156106b95760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161051e565b6013546001600160a01b031663f305d71947306106ea816001600160a01b03165f9081526001602052604090205490565b5f806106fd5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610763573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906107889190611703565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156107dd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610801919061172e565b506014805462ff00ff60a01b19166201000160a01b179055565b5f546001600160a01b031633146108445760405162461bcd60e51b815260040161051e906116ce565b5f5b81518110156104f157600160045f8484815181106108665761086661174d565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff1916911515919091179055806108a181611761565b915050610846565b6001600160a01b03831661090b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161051e565b6001600160a01b03821661096c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161051e565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610a305760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161051e565b6001600160a01b038216610a925760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161051e565b5f8111610af35760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161051e565b5f80546001600160a01b03858116911614801590610b1e57505f546001600160a01b03848116911614155b15610ed7576001600160a01b0384165f9081526004602052604090205460ff16158015610b6357506001600160a01b0383165f9081526004602052604090205460ff16155b610b6b575f80fd5b60065460ff1615610c22576013546001600160a01b03848116911614801590610ba257506014546001600160a01b03848116911614155b15610c2257325f908152600560205260409020544311610c105760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b606482015260840161051e565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610c4d57506013546001600160a01b03848116911614155b8015610c7157506001600160a01b0383165f9081526003602052604090205460ff16155b15610d6a57600f54821115610cc45760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161051e565b60105482610ce6856001600160a01b03165f9081526001602052604090205490565b610cf09190611779565b1115610d3e5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161051e565b600d54600e541015610d5557823b15610d55575f80fd5b600e8054905f610d6483611761565b91905055505b610d966064610d90600b54600e5411610d8557600754610d89565b6009545b8590611210565b90611295565b6014549091506001600160a01b038481169116148015610dbf57506001600160a01b0384163014155b15610e3a57600f54821115610e125760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161051e565b610e376064610d90600c54600e5411610e2d57600854610d89565b600a548590611210565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610e7057506014546001600160a01b038581169116145b8015610e855750601454600160b01b900460ff165b8015610e92575060115481115b8015610ea15750600d54600e54115b15610ed557610ec3610ebe84610eb9846012546112d6565b6112d6565b61104c565b478015610ed357610ed3476111d5565b505b505b8015610f4f57305f90815260016020526040902054610ef690826112ea565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f469085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610f719083611348565b6001600160a01b0385165f90815260016020526040902055610fb4610f968383611348565b6001600160a01b0385165f90815260016020526040902054906112ea565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610ffd8585611348565b60405190815260200160405180910390a350505050565b5f81848411156110375760405162461bcd60e51b815260040161051e91906113b5565b505f611043848661178c565b95945050505050565b6014805460ff60a81b1916600160a81b17905580156111c557601454600160a01b900460ff16156111c5576040805160028082526060820183525f9260208301908036833701905050905030815f815181106110aa576110aa61174d565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611101573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611125919061179f565b816001815181106111385761113861174d565b6001600160a01b03928316602091820292909201015260135461115e91309116846108a9565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906111969085905f908690309042906004016117ba565b5f604051808303815f87803b1580156111ad575f80fd5b505af11580156111bf573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104f1573d5f803e3d5ffd5b5f825f0361121f57505f610412565b5f61122a83856116b7565b9050826112378583611829565b1461128e5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161051e565b9392505050565b5f61128e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611389565b5f8183116112e4578261128e565b50919050565b5f806112f68385611779565b90508381101561128e5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161051e565b5f61128e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611014565b5f81836113a95760405162461bcd60e51b815260040161051e91906113b5565b505f6110438486611829565b5f6020808352835180828501525f5b818110156113e0578581018301518582016040015282016113c4565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611414575f80fd5b50565b803561142281611400565b919050565b5f8060408385031215611438575f80fd5b823561144381611400565b946020939093013593505050565b5f805f60608486031215611463575f80fd5b833561146e81611400565b9250602084013561147e81611400565b929592945050506040919091013590565b5f6020828403121561149f575f80fd5b813561128e81611400565b634e487b7160e01b5f52604160045260245ffd5b5f60208083850312156114cf575f80fd5b823567ffffffffffffffff808211156114e6575f80fd5b818501915085601f8301126114f9575f80fd5b81358181111561150b5761150b6114aa565b8060051b604051601f19603f83011681018181108582111715611530576115306114aa565b60405291825284820192508381018501918883111561154d575f80fd5b938501935b828510156115725761156385611417565b84529385019392850192611552565b98975050505050505050565b5f806040838503121561158f575f80fd5b823561159a81611400565b915060208301356115aa81611400565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561160357815f19048211156115e9576115e96115b5565b808516156115f657918102915b93841c93908002906115ce565b509250929050565b5f8261161957506001610412565b8161162557505f610412565b816001811461163b576002811461164557611661565b6001915050610412565b60ff841115611656576116566115b5565b50506001821b610412565b5060208310610133831016604e8410600b8410161715611684575081810a610412565b61168e83836115c9565b805f19048211156116a1576116a16115b5565b029392505050565b5f61128e60ff84168361160b565b8082028115828204841417610412576104126115b5565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f805f60608486031215611715575f80fd5b8351925060208401519150604084015190509250925092565b5f6020828403121561173e575f80fd5b8151801515811461128e575f80fd5b634e487b7160e01b5f52603260045260245ffd5b5f60018201611772576117726115b5565b5060010190565b80820180821115610412576104126115b5565b81810381811115610412576104126115b5565b5f602082840312156117af575f80fd5b815161128e81611400565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118085784516001600160a01b0316835293830193918301916001016117e3565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261184357634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212207436779c55812ff0bd2870ec8302b740fe8ed086dcf401a9d13a8e01dedb0aad64736f6c63430008140033",
    "runtime_bytecode": "608060405260043610610129575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb1461033e578063bf474bed1461035d578063c876d0b914610372578063c9567bf91461038b578063d34628cc1461039f578063dd62ed3e146103be575f80fd5b8063751039fc146102ae5780637d1db4a5146102c25780638da5cb5b146102d75780638f9a55c0146102fd57806395d89b4114610312575f80fd5b8063313ce567116100ee578063313ce567146101fe5780633bbac5791461021957806351bc3c851461025057806370a0823114610266578063715018a61461029a575f80fd5b806306fdde0314610134578063095ea7b3146101795780630faee56f146101a857806318160ddd146101cb57806323b872dd146101df575f80fd5b3661013057005b5f80fd5b34801561013f575f80fd5b5060408051808201909152600b81526a08ec2dad2dcce408cd8eaf60ab1b60208201525b60405161017091906113b5565b60405180910390f35b348015610184575f80fd5b50610198610193366004611427565b610402565b6040519015158152602001610170565b3480156101b3575f80fd5b506101bd60125481565b604051908152602001610170565b3480156101d6575f80fd5b506101bd610418565b3480156101ea575f80fd5b506101986101f9366004611451565b610438565b348015610209575f80fd5b5060405160088152602001610170565b348015610224575f80fd5b5061019861023336600461148f565b6001600160a01b03165f9081526004602052604090205460ff1690565b34801561025b575f80fd5b5061026461049f565b005b348015610271575f80fd5b506101bd61028036600461148f565b6001600160a01b03165f9081526001602052604090205490565b3480156102a5575f80fd5b506102646104f5565b3480156102b9575f80fd5b5061026461056f565b3480156102cd575f80fd5b506101bd600f5481565b3480156102e2575f80fd5b505f546040516001600160a01b039091168152602001610170565b348015610308575f80fd5b506101bd60105481565b34801561031d575f80fd5b5060408051808201909152600481526320a3a7a760e11b6020820152610163565b348015610349575f80fd5b50610198610358366004611427565b61062a565b348015610368575f80fd5b506101bd60115481565b34801561037d575f80fd5b506006546101989060ff1681565b348015610396575f80fd5b50610264610636565b3480156103aa575f80fd5b506102646103b93660046114be565b61081b565b3480156103c9575f80fd5b506101bd6103d836600461157e565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f61040e3384846108a9565b5060015b92915050565b5f6104256008600a6116a9565b61043390633b9aca006116b7565b905090565b5f6104448484846109cc565b610495843361049085604051806060016040528060288152602001611849602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611014565b6108a9565b5060019392505050565b60065461010090046001600160a01b0316336001600160a01b0316146104c3575f80fd5b305f9081526001602052604090205480156104e1576104e18161104c565b4780156104f1576104f1816111d5565b5050565b5f546001600160a01b031633146105275760405162461bcd60e51b815260040161051e906116ce565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105985760405162461bcd60e51b815260040161051e906116ce565b6105a46008600a6116a9565b6105b290633b9aca006116b7565b600f556105c16008600a6116a9565b6105cf90633b9aca006116b7565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106096008600a6116a9565b61061790633b9aca006116b7565b60405190815260200160405180910390a1565b5f61040e3384846109cc565b5f546001600160a01b0316331461065f5760405162461bcd60e51b815260040161051e906116ce565b601454600160a01b900460ff16156106b95760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161051e565b6013546001600160a01b031663f305d71947306106ea816001600160a01b03165f9081526001602052604090205490565b5f806106fd5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610763573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906107889190611703565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156107dd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610801919061172e565b506014805462ff00ff60a01b19166201000160a01b179055565b5f546001600160a01b031633146108445760405162461bcd60e51b815260040161051e906116ce565b5f5b81518110156104f157600160045f8484815181106108665761086661174d565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff1916911515919091179055806108a181611761565b915050610846565b6001600160a01b03831661090b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161051e565b6001600160a01b03821661096c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161051e565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610a305760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161051e565b6001600160a01b038216610a925760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161051e565b5f8111610af35760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161051e565b5f80546001600160a01b03858116911614801590610b1e57505f546001600160a01b03848116911614155b15610ed7576001600160a01b0384165f9081526004602052604090205460ff16158015610b6357506001600160a01b0383165f9081526004602052604090205460ff16155b610b6b575f80fd5b60065460ff1615610c22576013546001600160a01b03848116911614801590610ba257506014546001600160a01b03848116911614155b15610c2257325f908152600560205260409020544311610c105760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b606482015260840161051e565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610c4d57506013546001600160a01b03848116911614155b8015610c7157506001600160a01b0383165f9081526003602052604090205460ff16155b15610d6a57600f54821115610cc45760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161051e565b60105482610ce6856001600160a01b03165f9081526001602052604090205490565b610cf09190611779565b1115610d3e5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161051e565b600d54600e541015610d5557823b15610d55575f80fd5b600e8054905f610d6483611761565b91905055505b610d966064610d90600b54600e5411610d8557600754610d89565b6009545b8590611210565b90611295565b6014549091506001600160a01b038481169116148015610dbf57506001600160a01b0384163014155b15610e3a57600f54821115610e125760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161051e565b610e376064610d90600c54600e5411610e2d57600854610d89565b600a548590611210565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610e7057506014546001600160a01b038581169116145b8015610e855750601454600160b01b900460ff165b8015610e92575060115481115b8015610ea15750600d54600e54115b15610ed557610ec3610ebe84610eb9846012546112d6565b6112d6565b61104c565b478015610ed357610ed3476111d5565b505b505b8015610f4f57305f90815260016020526040902054610ef690826112ea565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f469085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610f719083611348565b6001600160a01b0385165f90815260016020526040902055610fb4610f968383611348565b6001600160a01b0385165f90815260016020526040902054906112ea565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610ffd8585611348565b60405190815260200160405180910390a350505050565b5f81848411156110375760405162461bcd60e51b815260040161051e91906113b5565b505f611043848661178c565b95945050505050565b6014805460ff60a81b1916600160a81b17905580156111c557601454600160a01b900460ff16156111c5576040805160028082526060820183525f9260208301908036833701905050905030815f815181106110aa576110aa61174d565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611101573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611125919061179f565b816001815181106111385761113861174d565b6001600160a01b03928316602091820292909201015260135461115e91309116846108a9565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906111969085905f908690309042906004016117ba565b5f604051808303815f87803b1580156111ad575f80fd5b505af11580156111bf573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104f1573d5f803e3d5ffd5b5f825f0361121f57505f610412565b5f61122a83856116b7565b9050826112378583611829565b1461128e5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161051e565b9392505050565b5f61128e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611389565b5f8183116112e4578261128e565b50919050565b5f806112f68385611779565b90508381101561128e5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161051e565b5f61128e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611014565b5f81836113a95760405162461bcd60e51b815260040161051e91906113b5565b505f6110438486611829565b5f6020808352835180828501525f5b818110156113e0578581018301518582016040015282016113c4565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611414575f80fd5b50565b803561142281611400565b919050565b5f8060408385031215611438575f80fd5b823561144381611400565b946020939093013593505050565b5f805f60608486031215611463575f80fd5b833561146e81611400565b9250602084013561147e81611400565b929592945050506040919091013590565b5f6020828403121561149f575f80fd5b813561128e81611400565b634e487b7160e01b5f52604160045260245ffd5b5f60208083850312156114cf575f80fd5b823567ffffffffffffffff808211156114e6575f80fd5b818501915085601f8301126114f9575f80fd5b81358181111561150b5761150b6114aa565b8060051b604051601f19603f83011681018181108582111715611530576115306114aa565b60405291825284820192508381018501918883111561154d575f80fd5b938501935b828510156115725761156385611417565b84529385019392850192611552565b98975050505050505050565b5f806040838503121561158f575f80fd5b823561159a81611400565b915060208301356115aa81611400565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561160357815f19048211156115e9576115e96115b5565b808516156115f657918102915b93841c93908002906115ce565b509250929050565b5f8261161957506001610412565b8161162557505f610412565b816001811461163b576002811461164557611661565b6001915050610412565b60ff841115611656576116566115b5565b50506001821b610412565b5060208310610133831016604e8410600b8410161715611684575081810a610412565b61168e83836115c9565b805f19048211156116a1576116a16115b5565b029392505050565b5f61128e60ff84168361160b565b8082028115828204841417610412576104126115b5565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f805f60608486031215611715575f80fd5b8351925060208401519150604084015190509250925092565b5f6020828403121561173e575f80fd5b8151801515811461128e575f80fd5b634e487b7160e01b5f52603260045260245ffd5b5f60018201611772576117726115b5565b5060010190565b80820180821115610412576104126115b5565b81810381811115610412576104126115b5565b5f602082840312156117af575f80fd5b815161128e81611400565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118085784516001600160a01b0316835293830193918301916001016117e3565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261184357634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212207436779c55812ff0bd2870ec8302b740fe8ed086dcf401a9d13a8e01dedb0aad64736f6c63430008140033",
    "contract_name": "GamingFlux",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/*\r\nGAMEFLUX \r\nBreathe New Life into Your Valuables with Our Token\r\nWEBSITE:  https://gamingflux.cc\r\nTELEGRAM: https://t.me/GamingFlux\r\nX:        https://x.com/Gaming_Flux_\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract GamingFlux is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=25;\r\n    uint256 private _initialSellTax=30;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=30;\r\n    uint256 private _reduceSellTaxAt=30;\r\n    uint256 private _preventSwapBefore=10;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 8;\r\n    uint256 private constant _tTotal = 1000000000 * 10**_decimals;\r\n    string private constant _name = unicode\"Gaming Flux\";\r\n    string private constant _symbol = unicode\"AGON\";\r\n    uint256 public _maxTxAmount =   20000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 20000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold=20 * 10**_decimals;\r\n    uint256 public _maxTaxSwap=20000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_buyCount<_preventSwapBefore){\r\n                  require(!isContract(to));\r\n                }\r\n                _buyCount++;\r\n            }\r\n\r\n\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function addBots(address[] memory bots_) external onlyOwner{\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        \r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n}",
    "etherscan_verified": true
}