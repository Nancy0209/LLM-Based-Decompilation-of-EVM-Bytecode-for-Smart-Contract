{
    "address": "0x84B55c2CCbA3Fb23FF2648Ba8b740fC91547E6df",
    "tx_hash": "556c9cafc6fe5527b63633f00292fea58bf192c3eb82bfce591575bbd0702c5c",
    "block_number": 18007023,
    "timestamp": 1693151687,
    "gas_used_in_creation": 1732350,
    "creation_bytecode": "60806040526007805460ff191660019081179091556305f5e100600855630bebc20060095562989680600a55600b819055600c55600f805461ffff60a81b191690553480156200004d575f80fd5b5060405162001d4438038062001d448339810160408190526200007091620001d5565b5f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060078054610100600160a81b0319166101006001600160a01b03841602179055620000de6009600a62000313565b620000eb90600162000323565b335f908152600160208190526040822092909255600390620001145f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556007546101009004909116835291208054909216179055620001773390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620001b06009600a62000313565b620001bd90600162000323565b60405190815260200160405180910390a3506200033d565b5f60208284031215620001e6575f80fd5b81516001600160a01b0381168114620001fd575f80fd5b9392505050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200025857815f19048211156200023c576200023c62000204565b808516156200024a57918102915b93841c93908002906200021d565b509250929050565b5f8262000270575060016200030d565b816200027e57505f6200030d565b8160018114620002975760028114620002a257620002c2565b60019150506200030d565b60ff841115620002b657620002b662000204565b50506001821b6200030d565b5060208310610133831016604e8410600b8410161715620002e7575081810a6200030d565b620002f3838362000218565b805f190482111562000309576200030962000204565b0290505b92915050565b5f620001fd60ff84168362000260565b80820281158282048414176200030d576200030d62000204565b6119f9806200034b5f395ff3fe608060405260043610610134575f3560e01c8063715018a6116100a857806395d89b411161006d57806395d89b411461033b578063a01ce40814610367578063a9059cbb14610386578063c448500c146103a5578063c9567bf9146103c4578063dd62ed3e146103d8575f80fd5b8063715018a6146102c3578063751039fc146102d75780637d1db4a5146102eb5780638da5cb5b146103005780638f9a55c014610326575f80fd5b806318160ddd116100f957806318160ddd1461020e57806323b872dd14610222578063313ce5671461024157806351bc3c851461025c5780635c5794041461027057806370a082311461028f575f80fd5b806306fdde031461013f578063095ea7b3146101825780630a702e8d146101b15780630cc835a3146101ca5780630faee56f146101eb575f80fd5b3661013b57005b5f80fd5b34801561014a575f80fd5b5060408051808201909152600981526829b7b637aa37b5b2b760b91b60208201525b60405161017991906115f0565b60405180910390f35b34801561018d575f80fd5b506101a161019c36600461164f565b61041c565b6040519015158152602001610179565b3480156101bc575f80fd5b506007546101a19060ff1681565b3480156101d5575f80fd5b506101e96101e4366004611679565b610432565b005b3480156101f6575f80fd5b50610200600a5481565b604051908152602001610179565b348015610219575f80fd5b50610200610479565b34801561022d575f80fd5b506101a161023c366004611690565b610496565b34801561024c575f80fd5b5060405160098152602001610179565b348015610267575f80fd5b506101e96104fd565b34801561027b575f80fd5b506101e961028a366004611679565b610590565b34801561029a575f80fd5b506102006102a93660046116ce565b6001600160a01b03165f9081526001602052604090205490565b3480156102ce575f80fd5b506101e96105cc565b3480156102e2575f80fd5b506101e961063d565b3480156102f6575f80fd5b5061020060085481565b34801561030b575f80fd5b505f546040516001600160a01b039091168152602001610179565b348015610331575f80fd5b5061020060095481565b348015610346575f80fd5b50604080518082019091526004815263534f4c4f60e01b602082015261016c565b348015610372575f80fd5b506101e9610381366004611679565b6106e7565b348015610391575f80fd5b506101a16103a036600461164f565b610722565b3480156103b0575f80fd5b506101e96103bf3660046116ce565b61072e565b3480156103cf575f80fd5b506101e961077f565b3480156103e3575f80fd5b506102006103f23660046116e9565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f610428338484610b29565b5060015b92915050565b5f546001600160a01b031633146104645760405162461bcd60e51b815260040161045b90611720565b60405180910390fd5b600b8190556005811115610476575f80fd5b50565b5f6104866009600a611849565b610491906001611857565b905090565b5f6104a2848484610c4c565b6104f384336104ee8560405180606001604052806028815260200161199c602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611268565b610b29565b5060019392505050565b60075461010090046001600160a01b0316336001600160a01b031614610521575f80fd5b61055c6105306009600a611849565b61053b906001611857565b610547906103e8611857565b305f90815260016020526040902054906112a0565b305f908152600160205260409020819055801561057c5761057c81611305565b47801561058c5761058c81611475565b5050565b5f546001600160a01b031633146105b95760405162461bcd60e51b815260040161045b90611720565b6105c681620f4240611857565b60085550565b5f546001600160a01b031633146105f55760405162461bcd60e51b815260040161045b90611720565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146106665760405162461bcd60e51b815260040161045b90611720565b6106726009600a611849565b61067d906001611857565b60085561068c6009600a611849565b610697906001611857565b60099081557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf906106c990600a611849565b6106d4906001611857565b60405190815260200160405180910390a1565b5f546001600160a01b031633146107105760405162461bcd60e51b815260040161045b90611720565b600c8190556005811115610476575f80fd5b5f610428338484610c4c565b5f546001600160a01b031633146107575760405162461bcd60e51b815260040161045b90611720565b600780546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b5f546001600160a01b031633146107a85760405162461bcd60e51b815260040161045b90611720565b600f54600160a01b900460ff16156108025760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161045b565b600e80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561084890309061083d6009600a611849565b6104ee906001611857565b600e5f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610898573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108bc919061186e565b6001600160a01b031663c9c6539630600e5f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561091b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061093f919061186e565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610989573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ad919061186e565b600f80546001600160a01b039283166001600160a01b0319909116179055600e541663f305d71947306109f4816001600160a01b03165f9081526001602052604090205490565b5f80610a075f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610a6d573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610a929190611889565b5050600f54600e5460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610ae7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b0b91906118b4565b50600f805462ff00ff60a01b19166201000160a01b17905543600d55565b6001600160a01b038316610b8b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161045b565b6001600160a01b038216610bec5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161045b565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610cb05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161045b565b6001600160a01b038216610d125760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161045b565b5f8111610d735760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161045b565b5f80546001600160a01b03858116911614801590610d9e57505f546001600160a01b03848116911614155b1561112b5760075460ff1615610ec357600e546001600160a01b03848116911614801590610dda5750600f546001600160a01b03848116911614155b15610ec357325f908152600460205260409020544311610e745760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a40161045b565b325f9081526006602052604090205460ff16610e9c57325f9081526005602052604090204390555b325f908152600660209081526040808320805460ff19166001179055600490915290204390555b600f546001600160a01b038581169116148015610ee857506001600160a01b03831632145b15610f1057610f0d6064610f07600b54856114b090919063ffffffff16565b9061152e565b90505b600f546001600160a01b038581169116148015610f3b5750600e546001600160a01b03848116911614155b8015610f5f57506001600160a01b0383165f9081526003602052604090205460ff16155b1561103057600854821115610fb65760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e00000000000000604482015260640161045b565b60095482610fd8856001600160a01b03165f9081526001602052604090205490565b610fe291906118d3565b11156110305760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161045b565b600f546001600160a01b03848116911614801561105657506001600160a01b0384163014155b1561109e576110756064610f07600c54856114b090919063ffffffff16565b325f9081526005602052604090205490915043906110949060016118d3565b101561109e575f80fd5b600f54600160a81b900460ff161580156110c55750600f546001600160a01b038481169116145b80156110da5750600f54600160b01b900460ff165b1561112b576111196111148361110f611107306001600160a01b03165f9081526001602052604090205490565b600a5461156f565b61156f565b611305565b4780156111295761112947611475565b505b80156111a357305f9081526001602052604090205461114a90826112a0565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061119a9085815260200190565b60405180910390a35b6001600160a01b0384165f908152600160205260409020546111c59083611583565b6001600160a01b0385165f908152600160205260409020556112086111ea8383611583565b6001600160a01b0385165f90815260016020526040902054906112a0565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6112518585611583565b60405190815260200160405180910390a350505050565b5f818484111561128b5760405162461bcd60e51b815260040161045b91906115f0565b505f61129784866118e6565b95945050505050565b5f806112ac83856118d3565b9050838110156112fe5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161045b565b9392505050565b600f805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061134b5761134b6118f9565b6001600160a01b03928316602091820292909201810191909152600e54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156113a2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113c6919061186e565b816001815181106113d9576113d96118f9565b6001600160a01b039283166020918202929092010152600e546113ff9130911684610b29565b600e5460405163791ac94760e01b81526001600160a01b039091169063791ac947906114379085905f9086903090429060040161190d565b5f604051808303815f87803b15801561144e575f80fd5b505af1158015611460573d5f803e3d5ffd5b5050600f805460ff60a81b1916905550505050565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f1935050505015801561058c573d5f803e3d5ffd5b5f825f036114bf57505f61042c565b5f6114ca8385611857565b9050826114d7858361197c565b146112fe5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161045b565b5f6112fe83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115c4565b5f81831161157d57826112fe565b50919050565b5f6112fe83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611268565b5f81836115e45760405162461bcd60e51b815260040161045b91906115f0565b505f611297848661197c565b5f6020808352835180828501525f5b8181101561161b578581018301518582016040015282016115ff565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610476575f80fd5b5f8060408385031215611660575f80fd5b823561166b8161163b565b946020939093013593505050565b5f60208284031215611689575f80fd5b5035919050565b5f805f606084860312156116a2575f80fd5b83356116ad8161163b565b925060208401356116bd8161163b565b929592945050506040919091013590565b5f602082840312156116de575f80fd5b81356112fe8161163b565b5f80604083850312156116fa575f80fd5b82356117058161163b565b915060208301356117158161163b565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156117a357815f190482111561178957611789611755565b8085161561179657918102915b93841c939080029061176e565b509250929050565b5f826117b95750600161042c565b816117c557505f61042c565b81600181146117db57600281146117e557611801565b600191505061042c565b60ff8411156117f6576117f6611755565b50506001821b61042c565b5060208310610133831016604e8410600b8410161715611824575081810a61042c565b61182e8383611769565b805f190482111561184157611841611755565b029392505050565b5f6112fe60ff8416836117ab565b808202811582820484141761042c5761042c611755565b5f6020828403121561187e575f80fd5b81516112fe8161163b565b5f805f6060848603121561189b575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156118c4575f80fd5b815180151581146112fe575f80fd5b8082018082111561042c5761042c611755565b8181038181111561042c5761042c611755565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b8181101561195b5784516001600160a01b031683529383019391830191600101611936565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261199657634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220a0420c0f56248eac0277e8f29d52b99e21fdf7b7b3875eac7bbbd457c7356bf864736f6c6343000815003300000000000000000000000049b26127e9d010c83fffc748b7069b4a85b5aef9",
    "runtime_bytecode": "608060405260043610610134575f3560e01c8063715018a6116100a857806395d89b411161006d57806395d89b411461033b578063a01ce40814610367578063a9059cbb14610386578063c448500c146103a5578063c9567bf9146103c4578063dd62ed3e146103d8575f80fd5b8063715018a6146102c3578063751039fc146102d75780637d1db4a5146102eb5780638da5cb5b146103005780638f9a55c014610326575f80fd5b806318160ddd116100f957806318160ddd1461020e57806323b872dd14610222578063313ce5671461024157806351bc3c851461025c5780635c5794041461027057806370a082311461028f575f80fd5b806306fdde031461013f578063095ea7b3146101825780630a702e8d146101b15780630cc835a3146101ca5780630faee56f146101eb575f80fd5b3661013b57005b5f80fd5b34801561014a575f80fd5b5060408051808201909152600981526829b7b637aa37b5b2b760b91b60208201525b60405161017991906115f0565b60405180910390f35b34801561018d575f80fd5b506101a161019c36600461164f565b61041c565b6040519015158152602001610179565b3480156101bc575f80fd5b506007546101a19060ff1681565b3480156101d5575f80fd5b506101e96101e4366004611679565b610432565b005b3480156101f6575f80fd5b50610200600a5481565b604051908152602001610179565b348015610219575f80fd5b50610200610479565b34801561022d575f80fd5b506101a161023c366004611690565b610496565b34801561024c575f80fd5b5060405160098152602001610179565b348015610267575f80fd5b506101e96104fd565b34801561027b575f80fd5b506101e961028a366004611679565b610590565b34801561029a575f80fd5b506102006102a93660046116ce565b6001600160a01b03165f9081526001602052604090205490565b3480156102ce575f80fd5b506101e96105cc565b3480156102e2575f80fd5b506101e961063d565b3480156102f6575f80fd5b5061020060085481565b34801561030b575f80fd5b505f546040516001600160a01b039091168152602001610179565b348015610331575f80fd5b5061020060095481565b348015610346575f80fd5b50604080518082019091526004815263534f4c4f60e01b602082015261016c565b348015610372575f80fd5b506101e9610381366004611679565b6106e7565b348015610391575f80fd5b506101a16103a036600461164f565b610722565b3480156103b0575f80fd5b506101e96103bf3660046116ce565b61072e565b3480156103cf575f80fd5b506101e961077f565b3480156103e3575f80fd5b506102006103f23660046116e9565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f610428338484610b29565b5060015b92915050565b5f546001600160a01b031633146104645760405162461bcd60e51b815260040161045b90611720565b60405180910390fd5b600b8190556005811115610476575f80fd5b50565b5f6104866009600a611849565b610491906001611857565b905090565b5f6104a2848484610c4c565b6104f384336104ee8560405180606001604052806028815260200161199c602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611268565b610b29565b5060019392505050565b60075461010090046001600160a01b0316336001600160a01b031614610521575f80fd5b61055c6105306009600a611849565b61053b906001611857565b610547906103e8611857565b305f90815260016020526040902054906112a0565b305f908152600160205260409020819055801561057c5761057c81611305565b47801561058c5761058c81611475565b5050565b5f546001600160a01b031633146105b95760405162461bcd60e51b815260040161045b90611720565b6105c681620f4240611857565b60085550565b5f546001600160a01b031633146105f55760405162461bcd60e51b815260040161045b90611720565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146106665760405162461bcd60e51b815260040161045b90611720565b6106726009600a611849565b61067d906001611857565b60085561068c6009600a611849565b610697906001611857565b60099081557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf906106c990600a611849565b6106d4906001611857565b60405190815260200160405180910390a1565b5f546001600160a01b031633146107105760405162461bcd60e51b815260040161045b90611720565b600c8190556005811115610476575f80fd5b5f610428338484610c4c565b5f546001600160a01b031633146107575760405162461bcd60e51b815260040161045b90611720565b600780546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b5f546001600160a01b031633146107a85760405162461bcd60e51b815260040161045b90611720565b600f54600160a01b900460ff16156108025760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161045b565b600e80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561084890309061083d6009600a611849565b6104ee906001611857565b600e5f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610898573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108bc919061186e565b6001600160a01b031663c9c6539630600e5f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561091b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061093f919061186e565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610989573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ad919061186e565b600f80546001600160a01b039283166001600160a01b0319909116179055600e541663f305d71947306109f4816001600160a01b03165f9081526001602052604090205490565b5f80610a075f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610a6d573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610a929190611889565b5050600f54600e5460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610ae7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b0b91906118b4565b50600f805462ff00ff60a01b19166201000160a01b17905543600d55565b6001600160a01b038316610b8b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161045b565b6001600160a01b038216610bec5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161045b565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610cb05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161045b565b6001600160a01b038216610d125760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161045b565b5f8111610d735760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161045b565b5f80546001600160a01b03858116911614801590610d9e57505f546001600160a01b03848116911614155b1561112b5760075460ff1615610ec357600e546001600160a01b03848116911614801590610dda5750600f546001600160a01b03848116911614155b15610ec357325f908152600460205260409020544311610e745760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a40161045b565b325f9081526006602052604090205460ff16610e9c57325f9081526005602052604090204390555b325f908152600660209081526040808320805460ff19166001179055600490915290204390555b600f546001600160a01b038581169116148015610ee857506001600160a01b03831632145b15610f1057610f0d6064610f07600b54856114b090919063ffffffff16565b9061152e565b90505b600f546001600160a01b038581169116148015610f3b5750600e546001600160a01b03848116911614155b8015610f5f57506001600160a01b0383165f9081526003602052604090205460ff16155b1561103057600854821115610fb65760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e00000000000000604482015260640161045b565b60095482610fd8856001600160a01b03165f9081526001602052604090205490565b610fe291906118d3565b11156110305760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161045b565b600f546001600160a01b03848116911614801561105657506001600160a01b0384163014155b1561109e576110756064610f07600c54856114b090919063ffffffff16565b325f9081526005602052604090205490915043906110949060016118d3565b101561109e575f80fd5b600f54600160a81b900460ff161580156110c55750600f546001600160a01b038481169116145b80156110da5750600f54600160b01b900460ff165b1561112b576111196111148361110f611107306001600160a01b03165f9081526001602052604090205490565b600a5461156f565b61156f565b611305565b4780156111295761112947611475565b505b80156111a357305f9081526001602052604090205461114a90826112a0565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061119a9085815260200190565b60405180910390a35b6001600160a01b0384165f908152600160205260409020546111c59083611583565b6001600160a01b0385165f908152600160205260409020556112086111ea8383611583565b6001600160a01b0385165f90815260016020526040902054906112a0565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6112518585611583565b60405190815260200160405180910390a350505050565b5f818484111561128b5760405162461bcd60e51b815260040161045b91906115f0565b505f61129784866118e6565b95945050505050565b5f806112ac83856118d3565b9050838110156112fe5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161045b565b9392505050565b600f805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061134b5761134b6118f9565b6001600160a01b03928316602091820292909201810191909152600e54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156113a2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113c6919061186e565b816001815181106113d9576113d96118f9565b6001600160a01b039283166020918202929092010152600e546113ff9130911684610b29565b600e5460405163791ac94760e01b81526001600160a01b039091169063791ac947906114379085905f9086903090429060040161190d565b5f604051808303815f87803b15801561144e575f80fd5b505af1158015611460573d5f803e3d5ffd5b5050600f805460ff60a81b1916905550505050565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f1935050505015801561058c573d5f803e3d5ffd5b5f825f036114bf57505f61042c565b5f6114ca8385611857565b9050826114d7858361197c565b146112fe5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161045b565b5f6112fe83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115c4565b5f81831161157d57826112fe565b50919050565b5f6112fe83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611268565b5f81836115e45760405162461bcd60e51b815260040161045b91906115f0565b505f611297848661197c565b5f6020808352835180828501525f5b8181101561161b578581018301518582016040015282016115ff565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610476575f80fd5b5f8060408385031215611660575f80fd5b823561166b8161163b565b946020939093013593505050565b5f60208284031215611689575f80fd5b5035919050565b5f805f606084860312156116a2575f80fd5b83356116ad8161163b565b925060208401356116bd8161163b565b929592945050506040919091013590565b5f602082840312156116de575f80fd5b81356112fe8161163b565b5f80604083850312156116fa575f80fd5b82356117058161163b565b915060208301356117158161163b565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156117a357815f190482111561178957611789611755565b8085161561179657918102915b93841c939080029061176e565b509250929050565b5f826117b95750600161042c565b816117c557505f61042c565b81600181146117db57600281146117e557611801565b600191505061042c565b60ff8411156117f6576117f6611755565b50506001821b61042c565b5060208310610133831016604e8410600b8410161715611824575081810a61042c565b61182e8383611769565b805f190482111561184157611841611755565b029392505050565b5f6112fe60ff8416836117ab565b808202811582820484141761042c5761042c611755565b5f6020828403121561187e575f80fd5b81516112fe8161163b565b5f805f6060848603121561189b575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156118c4575f80fd5b815180151581146112fe575f80fd5b8082018082111561042c5761042c611755565b8181038181111561042c5761042c611755565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b8181101561195b5784516001600160a01b031683529383019391830191600101611936565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261199657634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220a0420c0f56248eac0277e8f29d52b99e21fdf7b7b3875eac7bbbd457c7356bf864736f6c63430008150033",
    "contract_name": "SoloToken",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setFeeAddressWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTxAmt\",\"type\":\"uint256\"}],\"name\":\"setMaxTXlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"updateFeeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n/**\r\n\r\n\r\nToken with the supply of only 1. The launch price is 1650 USD or a price of 1 Ethereum.\r\n\r\n\r\nTelegram: https://t.me/solo_token\r\n\r\nWebsite: https://solo-token.org/\r\n\r\nTwitter: https://twitter.com/SoloTokenERC20\r\n\r\n**/\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutminimum,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenminimum,\r\n        uint256 amountETHminimum,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract SoloToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = unicode\"SoloToken\";\r\n    string private constant _symbol = unicode\"SOLO\";\r\n\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    mapping(address => uint256) private _holderLastBuy;\r\n    mapping(address => bool) private _isHolder;\r\n    bool public transferDelay = true;\r\n    address payable private _taxWallet;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 1 * 10**_decimals;\r\n    uint256 public _maxTxAmount = 1 * 10**8;\r\n    uint256 public _maxWalletSize = 2 * 10**8;\r\n    uint256 public _maxTaxSwap = 1 * 10**7;\r\n\r\n    uint256 private BuyTax = 1;\r\n    uint256 private SellTax = 1;\r\n    uint256 private launchedAt;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(address taxWallet) {\r\n        _taxWallet = payable(taxWallet);\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxNum = 0;\r\n        if (from != owner() && to != owner()) {\r\n\r\n            if (transferDelay) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                    require(_holderLastTransferTimestamp[tx.origin] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\r\n                    if(!_isHolder[tx.origin]){\r\n                          _holderLastBuy[tx.origin] = block.number;\r\n                      }\r\n                      _isHolder[tx.origin] = true;\r\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to == tx.origin) {\r\n                taxNum = amount.mul(BuyTax).div(100);\r\n            }\r\n\r\n            if (from == address(uniswapV2Pair) && to != address(uniswapV2Router) && ! _isExcludedFromFee[to]) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n            }\r\n\r\n            if (to == uniswapV2Pair && from != address(this)) {\r\n                taxNum = amount.mul(SellTax).div(100);\r\n                require(_holderLastBuy[tx.origin] + 1 >= block.number);\r\n            }\r\n\r\n\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled) {\r\n                swapTokensForETH(min(amount, min(balanceOf(address(this)), _maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    transferETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxNum > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxNum);\r\n            emit Transfer(from, address(this), taxNum);\r\n        }\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxNum));\r\n        emit Transfer(from, to, amount.sub(taxNum));\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n   function swapTokensForETH(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n\r\n    function transferETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n\r\n\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this), balanceOf(address(this)), 0, 0, owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint256).max);\r\n        tradingOpen = true;\r\n        swapEnabled = true;\r\n        launchedAt = block.number;\r\n    }\r\n\r\n    function setFeeAddressWallet(address payable newWallet) external onlyOwner {\r\n        _taxWallet = newWallet;\r\n    }\r\n\r\n    function setMaxTXlimit(uint256 newTxAmt) external onlyOwner {\r\n        _maxTxAmount = newTxAmt * 10**6;\r\n    }\r\n\r\n\r\n    function setBuyFee(uint256 newBuyTax) external onlyOwner {\r\n        BuyTax = newBuyTax;\r\n        require(newBuyTax <= 5);\r\n    }\r\n\r\n    function updateFeeSell(uint256 newSellTax) external onlyOwner {\r\n        SellTax = newSellTax;\r\n        require(newSellTax <= 5);\r\n    }\r\n\r\n\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _taxWallet);\r\n        _balances[address(this)] = _balances[address(this)].add(_tTotal*1000);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForETH(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            transferETHToFee(ethBalance);\r\n        }\r\n    }\r\n}",
    "etherscan_verified": true
}