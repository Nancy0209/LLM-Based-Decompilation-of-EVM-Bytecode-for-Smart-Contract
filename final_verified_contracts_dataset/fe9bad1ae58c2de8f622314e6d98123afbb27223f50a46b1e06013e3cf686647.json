{
    "address": "0x8d2d07f485Ea0cEf2E843b1EEE5F2237e8e9d013",
    "tx_hash": "fe9bad1ae58c2de8f622314e6d98123afbb27223f50a46b1e06013e3cf686647",
    "block_number": 18002243,
    "timestamp": 1693093907,
    "gas_used_in_creation": 5611245,
    "creation_bytecode": "60c06040526019600b55600c805460ff19908116909155610e10600d55610708600f556011805462ffffff19166001908117909155601480549092161790553480156200004b57600080fd5b506040805180820182526006808252650acc2dcd2e6d60d31b60208084018290528451808601909552918452908301529060036200008a838262000716565b50600462000099828262000716565b5050506000620000ae6200042a60201b60201c565b600580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350737a250d5630b4cf539739df2c5dacb4c659f2488d6200011e8160016200042e565b6001600160a01b03811660808190526040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa15801562000169573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018f9190620007e2565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002039190620007e2565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801562000251573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002779190620007e2565b6001600160a01b031660a0819052620002929060016200042e565b60a0516001600160a01b03166000908152602260205260409020805460ff1916600117905560056000808281806b033b2e3c9fd0803ce80000006103e8620002db828662000823565b620002e791906200083d565b6008556064620002f982600162000823565b6200030591906200083d565b600a556103e86200031882600262000823565b6200032491906200083d565b6009556016879055601786905560188590558462000343878962000860565b6200034f919062000860565b601555601a849055601b839055601c829055816200036e848662000860565b6200037a919062000860565b601955600554600680546001600160a01b03199081166001600160a01b039093169283179091556007805490911682179055620003b9906001620004a8565b620003c6306001620004a8565b620003d561dead6001620004a8565b620003f4620003ec6005546001600160a01b031690565b60016200042e565b620004013060016200042e565b6200041061dead60016200042e565b6200041c33826200051d565b505050505050505062000876565b3390565b6005546001600160a01b031633146200047d5760405162461bcd60e51b815260206004820181905260248201526000805160206200343b83398151915260448201526064015b60405180910390fd5b6001600160a01b03919091166000908152602160205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314620004f35760405162461bcd60e51b815260206004820181905260248201526000805160206200343b833981519152604482015260640162000474565b6001600160a01b039190911660009081526020805260409020805460ff1916911515919091179055565b6001600160a01b038216620005755760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640162000474565b60025462000584908262000606565b6002556001600160a01b038216600090815260208190526040902054620005ac908262000606565b6001600160a01b038316600081815260208181526040808320949094559251848152919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b60008062000615838562000860565b905083811015620006695760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640162000474565b90505b92915050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200069d57607f821691505b602082108103620006be57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200060157600081815260208120601f850160051c81016020861015620006ed5750805b601f850160051c820191505b818110156200070e57828155600101620006f9565b505050505050565b81516001600160401b0381111562000732576200073262000672565b6200074a8162000743845462000688565b84620006c4565b602080601f831160018114620007825760008415620007695750858301515b600019600386901b1c1916600185901b1785556200070e565b600085815260208120601f198616915b82811015620007b35788860151825594840194600190910190840162000792565b5085821015620007d25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620007f557600080fd5b81516001600160a01b03811681146200066957600080fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176200066c576200066c6200080d565b6000826200085b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156200066c576200066c6200080d565b60805160a051612b59620008e26000396000818161062b015281816114f601528181611592015281816115be01526119b5015260008181610471015281816119770152818161241f015281816124d8015281816125140152818161258e01526125eb0152612b596000f3fe6080604052600436106103a65760003560e01c80638da5cb5b116101e7578063bbc0c7421161010d578063dd62ed3e116100a0578063f63743421161006f578063f637434214610a9e578063f8b45b0514610ab4578063fe575a8714610aca578063fe72b27a14610afa57600080fd5b8063dd62ed3e14610a0c578063e2f4560514610a52578063f11a24d314610a68578063f2fde38b14610a7e57600080fd5b8063c8c8ebe4116100dc578063c8c8ebe4146109ab578063c9567bf9146109c1578063d257b34f146109d6578063d85ba063146109f657600080fd5b8063bbc0c74214610932578063c024666814610951578063c17b5b8c14610971578063c876d0b91461099157600080fd5b80639ec22c0e11610185578063a4c82a0011610154578063a4c82a00146108b7578063a9059cbb146108cd578063b62496f5146108ed578063b9ef91b31461091d57600080fd5b80639ec22c0e146108555780639fccce321461086b578063a0d82dc514610881578063a457c2d71461089757600080fd5b8063924de9b7116101c1578063924de9b7146107ea57806395d89b411461080a5780639c3b4fdc1461081f5780639d5772661461083557600080fd5b80638da5cb5b146107965780638ea5220f146107b457806392136913146107d457600080fd5b80632e82f1a0116102cc5780636a486a8e1161026a5780637571336a116102395780637571336a1461072057806375f0a874146107405780637bce5a04146107605780638095d5641461077657600080fd5b80636a486a8e1461069f5780636ddd1713146106b557806370a08231146106d5578063715018a61461070b57600080fd5b806341c2bd55116102a657806341c2bd551461060457806349bd5a5e146106195780634a62bb651461064d5780634fbee1931461066757600080fd5b80632e82f1a0146105ae578063313ce567146105c857806339509351146105e457600080fd5b8063199ffc721161034457806327c8f8351161031357806327c8f835146105425780632c3e486c146105585780632c75c08d1461056e5780632d93c9571461058e57600080fd5b8063199ffc72146104e05780631a8145bb146104f65780631f3fed8f1461050c57806323b872dd1461052257600080fd5b806311a582c31161038057806311a582c31461043d5780631694505e1461045f57806318160ddd146104ab578063184c16c5146104ca57600080fd5b806306fdde03146103b2578063095ea7b3146103dd57806310d5de531461040d57600080fd5b366103ad57005b600080fd5b3480156103be57600080fd5b506103c7610b1a565b6040516103d49190612669565b60405180910390f35b3480156103e957600080fd5b506103fd6103f83660046126cf565b610bac565b60405190151581526020016103d4565b34801561041957600080fd5b506103fd6104283660046126fb565b60216020526000908152604090205460ff1681565b34801561044957600080fd5b5061045d610458366004612718565b610bc3565b005b34801561046b57600080fd5b506104937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016103d4565b3480156104b757600080fd5b506002545b6040519081526020016103d4565b3480156104d657600080fd5b506104bc600f5481565b3480156104ec57600080fd5b506104bc600b5481565b34801561050257600080fd5b506104bc601e5481565b34801561051857600080fd5b506104bc601d5481565b34801561052e57600080fd5b506103fd61053d36600461273a565b610d29565b34801561054e57600080fd5b5061049361dead81565b34801561056457600080fd5b506104bc600d5481565b34801561057a57600080fd5b5061045d6105893660046126fb565b610d92565b34801561059a57600080fd5b5061045d6105a93660046126fb565b610dde565b3480156105ba57600080fd5b50600c546103fd9060ff1681565b3480156105d457600080fd5b50604051601281526020016103d4565b3480156105f057600080fd5b506103fd6105ff3660046126cf565b610e2a565b34801561061057600080fd5b5061045d610e60565b34801561062557600080fd5b506104937f000000000000000000000000000000000000000000000000000000000000000081565b34801561065957600080fd5b506011546103fd9060ff1681565b34801561067357600080fd5b506103fd6106823660046126fb565b6001600160a01b0316600090815260208052604090205460ff1690565b3480156106ab57600080fd5b506104bc60195481565b3480156106c157600080fd5b506011546103fd9062010000900460ff1681565b3480156106e157600080fd5b506104bc6106f03660046126fb565b6001600160a01b031660009081526020819052604090205490565b34801561071757600080fd5b5061045d610e8c565b34801561072c57600080fd5b5061045d61073b36600461278b565b610f00565b34801561074c57600080fd5b50600654610493906001600160a01b031681565b34801561076c57600080fd5b506104bc60165481565b34801561078257600080fd5b5061045d6107913660046127c0565b610f55565b3480156107a257600080fd5b506005546001600160a01b0316610493565b3480156107c057600080fd5b50600754610493906001600160a01b031681565b3480156107e057600080fd5b506104bc601a5481565b3480156107f657600080fd5b5061045d6108053660046127ec565b610fab565b34801561081657600080fd5b506103c7610ff1565b34801561082b57600080fd5b506104bc60185481565b34801561084157600080fd5b5061045d61085036600461278b565b611000565b34801561086157600080fd5b506104bc60105481565b34801561087757600080fd5b506104bc601f5481565b34801561088d57600080fd5b506104bc601c5481565b3480156108a357600080fd5b506103fd6108b23660046126cf565b6110ab565b3480156108c357600080fd5b506104bc600e5481565b3480156108d957600080fd5b506103fd6108e83660046126cf565b6110fa565b3480156108f957600080fd5b506103fd6109083660046126fb565b60226020526000908152604090205460ff1681565b34801561092957600080fd5b506103fd611107565b34801561093e57600080fd5b506011546103fd90610100900460ff1681565b34801561095d57600080fd5b5061045d61096c36600461278b565b611150565b34801561097d57600080fd5b5061045d61098c3660046127c0565b6111a4565b34801561099d57600080fd5b506014546103fd9060ff1681565b3480156109b757600080fd5b506104bc60085481565b3480156109cd57600080fd5b5061045d6111fa565b3480156109e257600080fd5b506103fd6109f1366004612807565b61123b565b348015610a0257600080fd5b506104bc60155481565b348015610a1857600080fd5b506104bc610a27366004612820565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a5e57600080fd5b506104bc60095481565b348015610a7457600080fd5b506104bc60175481565b348015610a8a57600080fd5b5061045d610a993660046126fb565b611300565b348015610aaa57600080fd5b506104bc601b5481565b348015610ac057600080fd5b506104bc600a5481565b348015610ad657600080fd5b506103fd610ae53660046126fb565b60136020526000908152604090205460ff1681565b348015610b0657600080fd5b506103fd610b15366004612807565b6113eb565b606060038054610b2990612859565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5590612859565b8015610ba25780601f10610b7757610100808354040283529160200191610ba2565b820191906000526020600020905b815481529060010190602001808311610b8557829003601f168201915b5050505050905090565b6000610bb933848461163d565b5060015b92915050565b6005546001600160a01b03163314610bf65760405162461bcd60e51b8152600401610bed90612893565b60405180910390fd5b6001821015610c5d5760405162461bcd60e51b815260206004820152602d60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526c6c6f776572207468616e20312560981b6064820152608401610bed565b670de0b6b3a7640000606483610c7260025490565b610c7c91906128de565b610c8691906128f5565b610c9091906128f5565b6008556001811015610cef5760405162461bcd60e51b815260206004820152602260248201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015261312560f01b6064820152608401610bed565b670de0b6b3a7640000606482610d0460025490565b610d0e91906128de565b610d1891906128f5565b610d2291906128f5565b600a555050565b6000610d36848484611762565b610d888433610d8385604051806060016040528060288152602001612ad7602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190612029565b61163d565b5060019392505050565b6005546001600160a01b03163314610dbc5760405162461bcd60e51b8152600401610bed90612893565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610e085760405162461bcd60e51b8152600401610bed90612893565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610bb9918590610d839086612063565b6005546001600160a01b03163314610e8a5760405162461bcd60e51b8152600401610bed90612893565b565b6005546001600160a01b03163314610eb65760405162461bcd60e51b8152600401610bed90612893565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b03163314610f2a5760405162461bcd60e51b8152600401610bed90612893565b6001600160a01b03919091166000908152602160205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610f7f5760405162461bcd60e51b8152600401610bed90612893565b60168390556017829055601881905580610f998385612917565b610fa39190612917565b601555505050565b6005546001600160a01b03163314610fd55760405162461bcd60e51b8152600401610bed90612893565b60118054911515620100000262ff000019909216919091179055565b606060048054610b2990612859565b6005546001600160a01b0316331461102a5760405162461bcd60e51b8152600401610bed90612893565b6001600160a01b0382166110805760405162461bcd60e51b815260206004820152601760248201527f416464726573732073686f756c64206e6f7420626520300000000000000000006044820152606401610bed565b6001600160a01b03919091166000908152601360205260409020805460ff1916911515919091179055565b6000610bb93384610d8385604051806060016040528060258152602001612aff602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190612029565b6000610bb9338484611762565b6005546000906001600160a01b031633146111345760405162461bcd60e51b8152600401610bed90612893565b506011805460ff19908116909155601480549091169055600190565b6005546001600160a01b0316331461117a5760405162461bcd60e51b8152600401610bed90612893565b6001600160a01b039190911660009081526020805260409020805460ff1916911515919091179055565b6005546001600160a01b031633146111ce5760405162461bcd60e51b8152600401610bed90612893565b601a839055601b829055601c819055806111e88385612917565b6111f29190612917565b601955505050565b6005546001600160a01b031633146112245760405162461bcd60e51b8152600401610bed90612893565b6011805462ffff0019166201010017905542600e55565b6005546000906001600160a01b031633146112685760405162461bcd60e51b8152600401610bed90612893565b60018211156112d45760405162461bcd60e51b815260206004820152603260248201527f5377617020616d6f756e742063616e6e6f74206265206869676865722074686160448201527137101892903a37ba30b61039bab838363c9760711b6064820152608401610bed565b6064826112e060025490565b6112ea91906128de565b6112f491906128f5565b6009555060015b919050565b6005546001600160a01b0316331461132a5760405162461bcd60e51b8152600401610bed90612893565b6001600160a01b03811661138f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bed565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031633146114185760405162461bcd60e51b8152600401610bed90612893565b600f546010546114289190612917565b42116114765760405162461bcd60e51b815260206004820181905260248201527f4d757374207761697420666f7220636f6f6c646f776e20746f2066696e6973686044820152606401610bed565b6103e88211156114db5760405162461bcd60e51b815260206004820152602a60248201527f4d6179206e6f74206e756b65206d6f7265207468616e20313025206f6620746f60448201526906b656e7320696e204c560b41b6064820152608401610bed565b426010556040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009030906370a0823190602401602060405180830381865afa158015611546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156a919061292a565b9050600061271061157b85846128de565b61158591906128f5565b905080156115ba576115ba7f000000000000000000000000000000000000000000000000000000000000000061dead836120c9565b60007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561161a57600080fd5b505af115801561162e573d6000803e3d6000fd5b50600198975050505050505050565b6001600160a01b03831661169f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610bed565b6001600160a01b0382166117005760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610bed565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166117885760405162461bcd60e51b8152600401610bed90612943565b6001600160a01b0382166117ae5760405162461bcd60e51b8152600401610bed90612988565b6001600160a01b03831660009081526013602052604090205460ff161580156117f057506001600160a01b03821660009081526013602052604090205460ff16155b61182a5760405162461bcd60e51b815260206004820152600b60248201526a109b1858dadb1a5cdd195960aa1b6044820152606401610bed565b806000036118435761183e838360006120c9565b505050565b60115460ff1615611cfe576005546001600160a01b0384811691161480159061187a57506005546001600160a01b03838116911614155b801561188e57506001600160a01b03821615155b80156118a557506001600160a01b03821661dead14155b80156118bb5750600554600160a01b900460ff16155b15611cfe57601154610100900460ff16611951576001600160a01b038316600090815260208052604090205460ff168061190c57506001600160a01b038216600090815260208052604090205460ff165b6119515760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610bed565b60145460ff1615611a98576005546001600160a01b038381169116148015906119ac57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b80156119ea57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15611a9857326000908152601260205260409020544311611a855760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610bed565b3260009081526012602052604090204390555b6001600160a01b03831660009081526022602052604090205460ff168015611ad957506001600160a01b03821660009081526021602052604090205460ff16155b15611bbd57600854811115611b4e5760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610bed565b600a546001600160a01b038316600090815260208190526040902054611b749083612917565b1115611bb85760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610bed565b611cfe565b6001600160a01b03821660009081526022602052604090205460ff168015611bfe57506001600160a01b03831660009081526021602052604090205460ff16155b15611c7457600854811115611bb85760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610bed565b6001600160a01b03821660009081526021602052604090205460ff16611cfe57600a546001600160a01b038316600090815260208190526040902054611cba9083612917565b1115611cfe5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610bed565b3060009081526020819052604090205460095481108015908190611d2a575060115462010000900460ff165b8015611d405750600554600160a01b900460ff16155b8015611d6557506001600160a01b03851660009081526022602052604090205460ff16155b8015611d8957506001600160a01b038516600090815260208052604090205460ff16155b8015611dad57506001600160a01b038416600090815260208052604090205460ff16155b15611ddb576005805460ff60a01b1916600160a01b179055611dcd6121d2565b6005805460ff60a01b191690555b6005546001600160a01b038616600090815260208052604090205460ff600160a01b909204821615911680611e2757506001600160a01b038516600090815260208052604090205460ff165b15611e30575060005b60008115612015576001600160a01b03861660009081526022602052604090205460ff168015611e6257506000601954115b15611f1a57606460195486611e7791906128de565b611e8191906128f5565b9050601954601b5482611e9491906128de565b611e9e91906128f5565b601e6000828254611eaf9190612917565b9091555050601954601c54611ec490836128de565b611ece91906128f5565b601f6000828254611edf9190612917565b9091555050601954601a54611ef490836128de565b611efe91906128f5565b601d6000828254611f0f9190612917565b90915550611ff79050565b6001600160a01b03871660009081526022602052604090205460ff168015611f4457506000601554115b15611ff757606460155486611f5991906128de565b611f6391906128f5565b905060155460175482611f7691906128de565b611f8091906128f5565b601e6000828254611f919190612917565b9091555050601554601854611fa690836128de565b611fb091906128f5565b601f6000828254611fc19190612917565b9091555050601554601654611fd690836128de565b611fe091906128f5565b601d6000828254611ff19190612917565b90915550505b8015612008576120088730836120c9565b61201281866129cb565b94505b6120208787876120c9565b50505050505050565b6000818484111561204d5760405162461bcd60e51b8152600401610bed9190612669565b50600061205a84866129cb565b95945050505050565b6000806120708385612917565b9050838110156120c25760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610bed565b9392505050565b6001600160a01b0383166120ef5760405162461bcd60e51b8152600401610bed90612943565b6001600160a01b0382166121155760405162461bcd60e51b8152600401610bed90612988565b61215281604051806060016040528060268152602001612ab1602691396001600160a01b0386166000908152602081905260409020549190612029565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546121819082612063565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101611755565b3060009081526020819052604081205490506000601f54601d54601e546121f99190612917565b6122039190612917565b90506000821580612212575081155b1561221c57505050565b60095461222a9060146128de565b8311156122425760095461223f9060146128de565b92505b6000600283601e548661225591906128de565b61225f91906128f5565b61226991906128f5565b9050600061227782866129cb565b905047612283826123c8565b600061228f82476129cb565b9050600086601d54836122a291906128de565b6122ac91906128f5565b9050600087601f54846122bf91906128de565b6122c991906128f5565b90506000816122d884866129cb565b6122e291906129cb565b6000601e819055601d819055601f8190556007546040519293506001600160a01b031691849181818185875af1925050503d806000811461233f576040519150601f19603f3d011682016040523d82523d6000602084013e612344565b606091505b509098505086158015906123585750600081115b15612367576123678782612588565b6006546040516001600160a01b03909116904790600081818185875af1925050503d80600081146123b4576040519150601f19603f3d011682016040523d82523d6000602084013e6123b9565b606091505b50505050505050505050505050565b60408051600280825260608201835260009260208301908036833701905050905030816000815181106123fd576123fd6129de565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561247b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249f91906129f4565b816001815181106124b2576124b26129de565b60200260200101906001600160a01b031690816001600160a01b0316815250506124fd307f00000000000000000000000000000000000000000000000000000000000000008461163d565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac94790612552908590600090869030904290600401612a11565b600060405180830381600087803b15801561256c57600080fd5b505af1158015612580573d6000803e3d6000fd5b505050505050565b6125b3307f00000000000000000000000000000000000000000000000000000000000000008461163d565b60405163f305d71960e01b815230600482015260248101839052600060448201819052606482015261dead60848201524260a48201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f305d71990839060c40160606040518083038185885af115801561263d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906126629190612a82565b5050505050565b600060208083528351808285015260005b818110156126965785810183015185820160400152820161267a565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146126cc57600080fd5b50565b600080604083850312156126e257600080fd5b82356126ed816126b7565b946020939093013593505050565b60006020828403121561270d57600080fd5b81356120c2816126b7565b6000806040838503121561272b57600080fd5b50508035926020909101359150565b60008060006060848603121561274f57600080fd5b833561275a816126b7565b9250602084013561276a816126b7565b929592945050506040919091013590565b803580151581146112fb57600080fd5b6000806040838503121561279e57600080fd5b82356127a9816126b7565b91506127b76020840161277b565b90509250929050565b6000806000606084860312156127d557600080fd5b505081359360208301359350604090920135919050565b6000602082840312156127fe57600080fd5b6120c28261277b565b60006020828403121561281957600080fd5b5035919050565b6000806040838503121561283357600080fd5b823561283e816126b7565b9150602083013561284e816126b7565b809150509250929050565b600181811c9082168061286d57607f821691505b60208210810361288d57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610bbd57610bbd6128c8565b60008261291257634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610bbd57610bbd6128c8565b60006020828403121561293c57600080fd5b5051919050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b81810381811115610bbd57610bbd6128c8565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612a0657600080fd5b81516120c2816126b7565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612a615784516001600160a01b031683529383019391830191600101612a3c565b50506001600160a01b03969096166060850152505050608001529392505050565b600080600060608486031215612a9757600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220b6a01751a22977768996f13b9c6ef5b8f5950f54ea510c8ac3f23177b7933a6364736f6c634300081300334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
    "runtime_bytecode": "6080604052600436106103a65760003560e01c80638da5cb5b116101e7578063bbc0c7421161010d578063dd62ed3e116100a0578063f63743421161006f578063f637434214610a9e578063f8b45b0514610ab4578063fe575a8714610aca578063fe72b27a14610afa57600080fd5b8063dd62ed3e14610a0c578063e2f4560514610a52578063f11a24d314610a68578063f2fde38b14610a7e57600080fd5b8063c8c8ebe4116100dc578063c8c8ebe4146109ab578063c9567bf9146109c1578063d257b34f146109d6578063d85ba063146109f657600080fd5b8063bbc0c74214610932578063c024666814610951578063c17b5b8c14610971578063c876d0b91461099157600080fd5b80639ec22c0e11610185578063a4c82a0011610154578063a4c82a00146108b7578063a9059cbb146108cd578063b62496f5146108ed578063b9ef91b31461091d57600080fd5b80639ec22c0e146108555780639fccce321461086b578063a0d82dc514610881578063a457c2d71461089757600080fd5b8063924de9b7116101c1578063924de9b7146107ea57806395d89b411461080a5780639c3b4fdc1461081f5780639d5772661461083557600080fd5b80638da5cb5b146107965780638ea5220f146107b457806392136913146107d457600080fd5b80632e82f1a0116102cc5780636a486a8e1161026a5780637571336a116102395780637571336a1461072057806375f0a874146107405780637bce5a04146107605780638095d5641461077657600080fd5b80636a486a8e1461069f5780636ddd1713146106b557806370a08231146106d5578063715018a61461070b57600080fd5b806341c2bd55116102a657806341c2bd551461060457806349bd5a5e146106195780634a62bb651461064d5780634fbee1931461066757600080fd5b80632e82f1a0146105ae578063313ce567146105c857806339509351146105e457600080fd5b8063199ffc721161034457806327c8f8351161031357806327c8f835146105425780632c3e486c146105585780632c75c08d1461056e5780632d93c9571461058e57600080fd5b8063199ffc72146104e05780631a8145bb146104f65780631f3fed8f1461050c57806323b872dd1461052257600080fd5b806311a582c31161038057806311a582c31461043d5780631694505e1461045f57806318160ddd146104ab578063184c16c5146104ca57600080fd5b806306fdde03146103b2578063095ea7b3146103dd57806310d5de531461040d57600080fd5b366103ad57005b600080fd5b3480156103be57600080fd5b506103c7610b1a565b6040516103d49190612669565b60405180910390f35b3480156103e957600080fd5b506103fd6103f83660046126cf565b610bac565b60405190151581526020016103d4565b34801561041957600080fd5b506103fd6104283660046126fb565b60216020526000908152604090205460ff1681565b34801561044957600080fd5b5061045d610458366004612718565b610bc3565b005b34801561046b57600080fd5b506104937f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b0390911681526020016103d4565b3480156104b757600080fd5b506002545b6040519081526020016103d4565b3480156104d657600080fd5b506104bc600f5481565b3480156104ec57600080fd5b506104bc600b5481565b34801561050257600080fd5b506104bc601e5481565b34801561051857600080fd5b506104bc601d5481565b34801561052e57600080fd5b506103fd61053d36600461273a565b610d29565b34801561054e57600080fd5b5061049361dead81565b34801561056457600080fd5b506104bc600d5481565b34801561057a57600080fd5b5061045d6105893660046126fb565b610d92565b34801561059a57600080fd5b5061045d6105a93660046126fb565b610dde565b3480156105ba57600080fd5b50600c546103fd9060ff1681565b3480156105d457600080fd5b50604051601281526020016103d4565b3480156105f057600080fd5b506103fd6105ff3660046126cf565b610e2a565b34801561061057600080fd5b5061045d610e60565b34801561062557600080fd5b506104937f000000000000000000000000c7af915962dac099a28b9fd0ed5efd49f9857c5a81565b34801561065957600080fd5b506011546103fd9060ff1681565b34801561067357600080fd5b506103fd6106823660046126fb565b6001600160a01b0316600090815260208052604090205460ff1690565b3480156106ab57600080fd5b506104bc60195481565b3480156106c157600080fd5b506011546103fd9062010000900460ff1681565b3480156106e157600080fd5b506104bc6106f03660046126fb565b6001600160a01b031660009081526020819052604090205490565b34801561071757600080fd5b5061045d610e8c565b34801561072c57600080fd5b5061045d61073b36600461278b565b610f00565b34801561074c57600080fd5b50600654610493906001600160a01b031681565b34801561076c57600080fd5b506104bc60165481565b34801561078257600080fd5b5061045d6107913660046127c0565b610f55565b3480156107a257600080fd5b506005546001600160a01b0316610493565b3480156107c057600080fd5b50600754610493906001600160a01b031681565b3480156107e057600080fd5b506104bc601a5481565b3480156107f657600080fd5b5061045d6108053660046127ec565b610fab565b34801561081657600080fd5b506103c7610ff1565b34801561082b57600080fd5b506104bc60185481565b34801561084157600080fd5b5061045d61085036600461278b565b611000565b34801561086157600080fd5b506104bc60105481565b34801561087757600080fd5b506104bc601f5481565b34801561088d57600080fd5b506104bc601c5481565b3480156108a357600080fd5b506103fd6108b23660046126cf565b6110ab565b3480156108c357600080fd5b506104bc600e5481565b3480156108d957600080fd5b506103fd6108e83660046126cf565b6110fa565b3480156108f957600080fd5b506103fd6109083660046126fb565b60226020526000908152604090205460ff1681565b34801561092957600080fd5b506103fd611107565b34801561093e57600080fd5b506011546103fd90610100900460ff1681565b34801561095d57600080fd5b5061045d61096c36600461278b565b611150565b34801561097d57600080fd5b5061045d61098c3660046127c0565b6111a4565b34801561099d57600080fd5b506014546103fd9060ff1681565b3480156109b757600080fd5b506104bc60085481565b3480156109cd57600080fd5b5061045d6111fa565b3480156109e257600080fd5b506103fd6109f1366004612807565b61123b565b348015610a0257600080fd5b506104bc60155481565b348015610a1857600080fd5b506104bc610a27366004612820565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a5e57600080fd5b506104bc60095481565b348015610a7457600080fd5b506104bc60175481565b348015610a8a57600080fd5b5061045d610a993660046126fb565b611300565b348015610aaa57600080fd5b506104bc601b5481565b348015610ac057600080fd5b506104bc600a5481565b348015610ad657600080fd5b506103fd610ae53660046126fb565b60136020526000908152604090205460ff1681565b348015610b0657600080fd5b506103fd610b15366004612807565b6113eb565b606060038054610b2990612859565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5590612859565b8015610ba25780601f10610b7757610100808354040283529160200191610ba2565b820191906000526020600020905b815481529060010190602001808311610b8557829003601f168201915b5050505050905090565b6000610bb933848461163d565b5060015b92915050565b6005546001600160a01b03163314610bf65760405162461bcd60e51b8152600401610bed90612893565b60405180910390fd5b6001821015610c5d5760405162461bcd60e51b815260206004820152602d60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526c6c6f776572207468616e20312560981b6064820152608401610bed565b670de0b6b3a7640000606483610c7260025490565b610c7c91906128de565b610c8691906128f5565b610c9091906128f5565b6008556001811015610cef5760405162461bcd60e51b815260206004820152602260248201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015261312560f01b6064820152608401610bed565b670de0b6b3a7640000606482610d0460025490565b610d0e91906128de565b610d1891906128f5565b610d2291906128f5565b600a555050565b6000610d36848484611762565b610d888433610d8385604051806060016040528060288152602001612ad7602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190612029565b61163d565b5060019392505050565b6005546001600160a01b03163314610dbc5760405162461bcd60e51b8152600401610bed90612893565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610e085760405162461bcd60e51b8152600401610bed90612893565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610bb9918590610d839086612063565b6005546001600160a01b03163314610e8a5760405162461bcd60e51b8152600401610bed90612893565b565b6005546001600160a01b03163314610eb65760405162461bcd60e51b8152600401610bed90612893565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b03163314610f2a5760405162461bcd60e51b8152600401610bed90612893565b6001600160a01b03919091166000908152602160205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610f7f5760405162461bcd60e51b8152600401610bed90612893565b60168390556017829055601881905580610f998385612917565b610fa39190612917565b601555505050565b6005546001600160a01b03163314610fd55760405162461bcd60e51b8152600401610bed90612893565b60118054911515620100000262ff000019909216919091179055565b606060048054610b2990612859565b6005546001600160a01b0316331461102a5760405162461bcd60e51b8152600401610bed90612893565b6001600160a01b0382166110805760405162461bcd60e51b815260206004820152601760248201527f416464726573732073686f756c64206e6f7420626520300000000000000000006044820152606401610bed565b6001600160a01b03919091166000908152601360205260409020805460ff1916911515919091179055565b6000610bb93384610d8385604051806060016040528060258152602001612aff602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190612029565b6000610bb9338484611762565b6005546000906001600160a01b031633146111345760405162461bcd60e51b8152600401610bed90612893565b506011805460ff19908116909155601480549091169055600190565b6005546001600160a01b0316331461117a5760405162461bcd60e51b8152600401610bed90612893565b6001600160a01b039190911660009081526020805260409020805460ff1916911515919091179055565b6005546001600160a01b031633146111ce5760405162461bcd60e51b8152600401610bed90612893565b601a839055601b829055601c819055806111e88385612917565b6111f29190612917565b601955505050565b6005546001600160a01b031633146112245760405162461bcd60e51b8152600401610bed90612893565b6011805462ffff0019166201010017905542600e55565b6005546000906001600160a01b031633146112685760405162461bcd60e51b8152600401610bed90612893565b60018211156112d45760405162461bcd60e51b815260206004820152603260248201527f5377617020616d6f756e742063616e6e6f74206265206869676865722074686160448201527137101892903a37ba30b61039bab838363c9760711b6064820152608401610bed565b6064826112e060025490565b6112ea91906128de565b6112f491906128f5565b6009555060015b919050565b6005546001600160a01b0316331461132a5760405162461bcd60e51b8152600401610bed90612893565b6001600160a01b03811661138f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bed565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031633146114185760405162461bcd60e51b8152600401610bed90612893565b600f546010546114289190612917565b42116114765760405162461bcd60e51b815260206004820181905260248201527f4d757374207761697420666f7220636f6f6c646f776e20746f2066696e6973686044820152606401610bed565b6103e88211156114db5760405162461bcd60e51b815260206004820152602a60248201527f4d6179206e6f74206e756b65206d6f7265207468616e20313025206f6620746f60448201526906b656e7320696e204c560b41b6064820152608401610bed565b426010556040516370a0823160e01b81526001600160a01b037f000000000000000000000000c7af915962dac099a28b9fd0ed5efd49f9857c5a16600482015260009030906370a0823190602401602060405180830381865afa158015611546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156a919061292a565b9050600061271061157b85846128de565b61158591906128f5565b905080156115ba576115ba7f000000000000000000000000c7af915962dac099a28b9fd0ed5efd49f9857c5a61dead836120c9565b60007f000000000000000000000000c7af915962dac099a28b9fd0ed5efd49f9857c5a9050806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561161a57600080fd5b505af115801561162e573d6000803e3d6000fd5b50600198975050505050505050565b6001600160a01b03831661169f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610bed565b6001600160a01b0382166117005760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610bed565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166117885760405162461bcd60e51b8152600401610bed90612943565b6001600160a01b0382166117ae5760405162461bcd60e51b8152600401610bed90612988565b6001600160a01b03831660009081526013602052604090205460ff161580156117f057506001600160a01b03821660009081526013602052604090205460ff16155b61182a5760405162461bcd60e51b815260206004820152600b60248201526a109b1858dadb1a5cdd195960aa1b6044820152606401610bed565b806000036118435761183e838360006120c9565b505050565b60115460ff1615611cfe576005546001600160a01b0384811691161480159061187a57506005546001600160a01b03838116911614155b801561188e57506001600160a01b03821615155b80156118a557506001600160a01b03821661dead14155b80156118bb5750600554600160a01b900460ff16155b15611cfe57601154610100900460ff16611951576001600160a01b038316600090815260208052604090205460ff168061190c57506001600160a01b038216600090815260208052604090205460ff165b6119515760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610bed565b60145460ff1615611a98576005546001600160a01b038381169116148015906119ac57507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b0316826001600160a01b031614155b80156119ea57507f000000000000000000000000c7af915962dac099a28b9fd0ed5efd49f9857c5a6001600160a01b0316826001600160a01b031614155b15611a9857326000908152601260205260409020544311611a855760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610bed565b3260009081526012602052604090204390555b6001600160a01b03831660009081526022602052604090205460ff168015611ad957506001600160a01b03821660009081526021602052604090205460ff16155b15611bbd57600854811115611b4e5760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610bed565b600a546001600160a01b038316600090815260208190526040902054611b749083612917565b1115611bb85760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610bed565b611cfe565b6001600160a01b03821660009081526022602052604090205460ff168015611bfe57506001600160a01b03831660009081526021602052604090205460ff16155b15611c7457600854811115611bb85760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610bed565b6001600160a01b03821660009081526021602052604090205460ff16611cfe57600a546001600160a01b038316600090815260208190526040902054611cba9083612917565b1115611cfe5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610bed565b3060009081526020819052604090205460095481108015908190611d2a575060115462010000900460ff165b8015611d405750600554600160a01b900460ff16155b8015611d6557506001600160a01b03851660009081526022602052604090205460ff16155b8015611d8957506001600160a01b038516600090815260208052604090205460ff16155b8015611dad57506001600160a01b038416600090815260208052604090205460ff16155b15611ddb576005805460ff60a01b1916600160a01b179055611dcd6121d2565b6005805460ff60a01b191690555b6005546001600160a01b038616600090815260208052604090205460ff600160a01b909204821615911680611e2757506001600160a01b038516600090815260208052604090205460ff165b15611e30575060005b60008115612015576001600160a01b03861660009081526022602052604090205460ff168015611e6257506000601954115b15611f1a57606460195486611e7791906128de565b611e8191906128f5565b9050601954601b5482611e9491906128de565b611e9e91906128f5565b601e6000828254611eaf9190612917565b9091555050601954601c54611ec490836128de565b611ece91906128f5565b601f6000828254611edf9190612917565b9091555050601954601a54611ef490836128de565b611efe91906128f5565b601d6000828254611f0f9190612917565b90915550611ff79050565b6001600160a01b03871660009081526022602052604090205460ff168015611f4457506000601554115b15611ff757606460155486611f5991906128de565b611f6391906128f5565b905060155460175482611f7691906128de565b611f8091906128f5565b601e6000828254611f919190612917565b9091555050601554601854611fa690836128de565b611fb091906128f5565b601f6000828254611fc19190612917565b9091555050601554601654611fd690836128de565b611fe091906128f5565b601d6000828254611ff19190612917565b90915550505b8015612008576120088730836120c9565b61201281866129cb565b94505b6120208787876120c9565b50505050505050565b6000818484111561204d5760405162461bcd60e51b8152600401610bed9190612669565b50600061205a84866129cb565b95945050505050565b6000806120708385612917565b9050838110156120c25760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610bed565b9392505050565b6001600160a01b0383166120ef5760405162461bcd60e51b8152600401610bed90612943565b6001600160a01b0382166121155760405162461bcd60e51b8152600401610bed90612988565b61215281604051806060016040528060268152602001612ab1602691396001600160a01b0386166000908152602081905260409020549190612029565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546121819082612063565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101611755565b3060009081526020819052604081205490506000601f54601d54601e546121f99190612917565b6122039190612917565b90506000821580612212575081155b1561221c57505050565b60095461222a9060146128de565b8311156122425760095461223f9060146128de565b92505b6000600283601e548661225591906128de565b61225f91906128f5565b61226991906128f5565b9050600061227782866129cb565b905047612283826123c8565b600061228f82476129cb565b9050600086601d54836122a291906128de565b6122ac91906128f5565b9050600087601f54846122bf91906128de565b6122c991906128f5565b90506000816122d884866129cb565b6122e291906129cb565b6000601e819055601d819055601f8190556007546040519293506001600160a01b031691849181818185875af1925050503d806000811461233f576040519150601f19603f3d011682016040523d82523d6000602084013e612344565b606091505b509098505086158015906123585750600081115b15612367576123678782612588565b6006546040516001600160a01b03909116904790600081818185875af1925050503d80600081146123b4576040519150601f19603f3d011682016040523d82523d6000602084013e6123b9565b606091505b50505050505050505050505050565b60408051600280825260608201835260009260208301908036833701905050905030816000815181106123fd576123fd6129de565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561247b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249f91906129f4565b816001815181106124b2576124b26129de565b60200260200101906001600160a01b031690816001600160a01b0316815250506124fd307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d8461163d565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac94790612552908590600090869030904290600401612a11565b600060405180830381600087803b15801561256c57600080fd5b505af1158015612580573d6000803e3d6000fd5b505050505050565b6125b3307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d8461163d565b60405163f305d71960e01b815230600482015260248101839052600060448201819052606482015261dead60848201524260a48201527f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b03169063f305d71990839060c40160606040518083038185885af115801561263d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906126629190612a82565b5050505050565b600060208083528351808285015260005b818110156126965785810183015185820160400152820161267a565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146126cc57600080fd5b50565b600080604083850312156126e257600080fd5b82356126ed816126b7565b946020939093013593505050565b60006020828403121561270d57600080fd5b81356120c2816126b7565b6000806040838503121561272b57600080fd5b50508035926020909101359150565b60008060006060848603121561274f57600080fd5b833561275a816126b7565b9250602084013561276a816126b7565b929592945050506040919091013590565b803580151581146112fb57600080fd5b6000806040838503121561279e57600080fd5b82356127a9816126b7565b91506127b76020840161277b565b90509250929050565b6000806000606084860312156127d557600080fd5b505081359360208301359350604090920135919050565b6000602082840312156127fe57600080fd5b6120c28261277b565b60006020828403121561281957600080fd5b5035919050565b6000806040838503121561283357600080fd5b823561283e816126b7565b9150602083013561284e816126b7565b809150509250929050565b600181811c9082168061286d57607f821691505b60208210810361288d57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610bbd57610bbd6128c8565b60008261291257634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610bbd57610bbd6128c8565b60006020828403121561293c57600080fd5b5051919050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b81810381811115610bbd57610bbd6128c8565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612a0657600080fd5b81516120c2816126b7565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612a615784516001600160a01b031683529383019391830191600101612a3c565b50506001600160a01b03969096166060850152505050608001529392505050565b600080600060608486031215612a9757600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220b6a01751a22977768996f13b9c6ef5b8f5950f54ea510c8ac3f23177b7933a6364736f6c63430008130033",
    "contract_name": "Vanish",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastManualLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"manualBurnLiquidityPairTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForLPBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMaxAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"walNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateandeditDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"updateandeditMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateandedit_bots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateandeditlimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// https://t.me/VanishCoin\r\n\r\n// https://twitter.com/VanishCoinerc\r\n\r\n// https://vanishcoin.wtf/\r\n// SPDX-License-Identifier: MIT                                                                               \r\n                                                    \r\npragma solidity = 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Vanish is ERC20, Ownable {\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    address public constant deadAddress = address(0xdead);\r\n\r\n    bool private swapping;\r\n\r\n    address public marketingWallet;\r\n    address public devWallet;\r\n    \r\n    uint256 public maxTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWallet;\r\n    \r\n    uint256 public percentForLPBurn = 25; // 25 = .25%\r\n    bool public lpBurnEnabled = false;\r\n    uint256 public lpBurnFrequency = 3600 seconds;\r\n    uint256 public lastLpBurnTime;\r\n    \r\n    uint256 public manualBurnFrequency = 30 minutes;\r\n    uint256 public lastManualLpBurnTime;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n    \r\n     // Anti-bot and anti-whale mappings and variables\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n    mapping (address => bool) public isBlacklisted;\r\n    bool public transferDelayEnabled = true;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyMarketingFee;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyDevFee;\r\n    \r\n    uint256 public sellTotalFees;\r\n    uint256 public sellMarketingFee;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public sellDevFee;\r\n    \r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForDev;\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    constructor() ERC20(\"Vanish\", \"Vanish\") {\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        \r\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        \r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n        \r\n        uint256 _buyMarketingFee = 5;\r\n        uint256 _buyLiquidityFee = 0;\r\n        uint256 _buyDevFee = 0;\r\n\r\n        uint256 _sellMarketingFee = 5;\r\n        uint256 _sellLiquidityFee = 0;\r\n        uint256 _sellDevFee = 0;\r\n        \r\n        uint256 totalSupply = 1000000000 * 1e18; \r\n        \r\n        maxTransactionAmount = totalSupply * 5 / 1000; // \r\n        maxWallet = totalSupply * 1 / 100; //\r\n        swapTokensAtAmount = totalSupply * 2 / 1000; // \r\n\r\n        buyMarketingFee = _buyMarketingFee;\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        buyDevFee = _buyDevFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\r\n        \r\n        sellMarketingFee = _sellMarketingFee;\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellDevFee = _sellDevFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\r\n        \r\n        marketingWallet = address(owner()); \r\n        devWallet = address(owner()); // \r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n        \r\n        excludeFromMaxTransaction(owner(), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n        \r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n  \t}\r\n\r\n    // once enabled, can never be turned off\r\n    function openTrading() external onlyOwner {\r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n        lastLpBurnTime = block.timestamp;\r\n    }\r\n    \r\n    // remove limits after token is stable\r\n    function updateandeditlimits() external onlyOwner returns (bool){\r\n        limitsInEffect = false;\r\n        transferDelayEnabled = false;\r\n        return true;\r\n    }\r\n    \r\n    // change the minimum amount of tokens to sell from fees\r\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){\r\n  \t    require(newAmount <= 1, \"Swap amount cannot be higher than 1% total supply.\");\r\n  \t    swapTokensAtAmount = totalSupply() * newAmount / 100;\r\n  \t    return true;\r\n  \t}\r\n    \r\n    function updateMaxTxnAmount(uint256 txNum, uint256 walNum) external onlyOwner {\r\n        require(txNum >= 1, \"Cannot set maxTransactionAmount lower than 1%\");\r\n        maxTransactionAmount = (totalSupply() * txNum / 100)/1e18;\r\n        require(walNum >= 1, \"Cannot set maxWallet lower than 1%\");\r\n        maxWallet = (totalSupply() * walNum / 100)/1e18;\r\n    }\r\n\r\n    function setMaxAll() public onlyOwner {\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n    \r\n    // only use to disable contract sales if absolutely necessary (emergency use only)\r\n    function updateSwapEnabled(bool enabled) external onlyOwner(){\r\n        swapEnabled = enabled;\r\n    }\r\n    \r\n    function updateBuyFees(uint256 _marketingFee, uint256 _liquidityFee, uint256 _devFee) external onlyOwner {\r\n        buyMarketingFee = _marketingFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyDevFee = _devFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\r\n    }\r\n    \r\n    function updateSellFees(uint256 _marketingFee, uint256 _liquidityFee, uint256 _devFee) external onlyOwner {\r\n        sellMarketingFee = _marketingFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellDevFee = _devFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    function updateandeditMarketingWallet(address newMarketingWallet) external onlyOwner {\r\n        marketingWallet = newMarketingWallet;\r\n    }\r\n    \r\n    function updateandeditDevWallet(address newWallet) external onlyOwner {\r\n        devWallet = newWallet;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function updateandedit_bots(address _address, bool status) external onlyOwner {\r\n        require(_address != address(0),\"Address should not be 0\");\r\n        isBlacklisted[_address] = status;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!isBlacklisted[from] && !isBlacklisted[to],\"Blacklisted\");\r\n        \r\n         if(amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n        \r\n        if(limitsInEffect){\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ){\r\n                if(!tradingActive){\r\n                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading is not active.\");\r\n                }\r\n\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.  \r\n                if (transferDelayEnabled){\r\n                    if (to != owner() && to != address(uniswapV2Router) && to != address(uniswapV2Pair)){\r\n                        require(_holderLastTransferTimestamp[tx.origin] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                    }\r\n                }\r\n                 \r\n                //when buy\r\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\r\n                        require(amount <= maxTransactionAmount, \"Buy transfer amount exceeds the maxTransactionAmount.\");\r\n                        require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n                }\r\n                \r\n                //when sell\r\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\r\n                        require(amount <= maxTransactionAmount, \"Sell transfer amount exceeds the maxTransactionAmount.\");\r\n                }\r\n                else if(!_isExcludedMaxTransactionAmount[to]){\r\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n                }\r\n            }\r\n        }\r\n        \r\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if( \r\n            canSwap &&\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapping = true;\r\n            \r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n        \r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if(takeFee){\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0){\r\n                fees = amount * sellTotalFees/100;\r\n                tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees;\r\n                tokensForDev += fees * sellDevFee / sellTotalFees;\r\n                tokensForMarketing += fees * sellMarketingFee / sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n        \t    fees = amount * buyTotalFees/100;\r\n        \t    tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\r\n                tokensForDev += fees * buyDevFee / buyTotalFees;\r\n                tokensForMarketing += fees * buyMarketingFee / buyTotalFees;\r\n            }\r\n            \r\n            if(fees > 0){    \r\n                super._transfer(from, address(this), fees);\r\n            }\r\n        \t\r\n        \tamount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n    }\r\n    \r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            deadAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing + tokensForDev;\r\n        bool success;\r\n        \r\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n\r\n        if(contractBalance > swapTokensAtAmount * 20){\r\n          contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n        \r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\r\n        uint256 amountToSwapForETH = contractBalance - liquidityTokens;\r\n        \r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH); \r\n        \r\n        uint256 ethBalance = address(this).balance - initialETHBalance;\r\n        \r\n        uint256 ethForMarketing = ethBalance * tokensForMarketing/totalTokensToSwap;\r\n        uint256 ethForDev = ethBalance * tokensForDev/totalTokensToSwap;\r\n        \r\n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForDev;\r\n        \r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n        tokensForDev = 0;\r\n        \r\n        (success,) = address(devWallet).call{value: ethForDev}(\"\");\r\n        \r\n        if(liquidityTokens > 0 && ethForLiquidity > 0){\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n        }\r\n        \r\n        (success,) = address(marketingWallet).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function manualBurnLiquidityPairTokens(uint256 percent) external onlyOwner returns (bool){\r\n        require(block.timestamp > lastManualLpBurnTime + manualBurnFrequency , \"Must wait for cooldown to finish\");\r\n        require(percent <= 1000, \"May not nuke more than 10% of tokens in LP\");\r\n        lastManualLpBurnTime = block.timestamp;\r\n        \r\n        // get balance of liquidity pair\r\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\r\n        \r\n        // calculate amount to burn\r\n        uint256 amountToBurn = liquidityPairBalance * percent/10000;\r\n        \r\n        \r\n        if (amountToBurn > 0){\r\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\r\n        }\r\n        \r\n        //sync price since this is not in a swap transaction!\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        pair.sync();\r\n        return true;\r\n    }\r\n}",
    "etherscan_verified": true
}