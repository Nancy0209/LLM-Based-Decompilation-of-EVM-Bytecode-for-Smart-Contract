{
    "address": "0x210a768a5146f4d3C1068bB37dD780304c6D648D",
    "tx_hash": "88c4ed0020eea2e6959ded4045d7ed0a23e6f538f955299d10537fcbd934dd98",
    "block_number": 18006989,
    "timestamp": 1693151267,
    "gas_used_in_creation": 4409476,
    "creation_bytecode": "60806040526014600755603260085560056009556005600a556014600b55601e600c55600f600d555f600e556009600a6200003b91906200064d565b6200004990614e2062000664565b600f556200005a6009600a6200064d565b6200006890614e2062000664565b601055620000796009600a6200064d565b6200008790614e2062000664565b601155620000986009600a6200064d565b620000a69061271062000664565b6012556014805461ffff60a81b19169055348015620000c3575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915562000158903090620001426009600a6200064d565b6200015290633b9aca0062000664565b62000413565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001a9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620001cf91906200067e565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200022f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200025591906200067e565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015620002a0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620002c691906200067e565b601480546001600160a01b0319166001600160a01b0392909216919091179055620002ee3390565b600580546001600160a01b0319166001600160a01b03929092169190911790556200031c6009600a6200064d565b6200032c90633b9aca0062000664565b335f908152600160208190526040822092909255600390620003555f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff199687161790553081526003909352818320805485166001908117909155600554909116835291208054909216179055620003b33390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620003ec6009600a6200064d565b620003fc90633b9aca0062000664565b60405190815260200160405180910390a3620006a6565b6001600160a01b0383166200047b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084015b60405180910390fd5b6001600160a01b038216620004de5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162000472565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200059257815f19048211156200057657620005766200053e565b808516156200058457918102915b93841c939080029062000557565b509250929050565b5f82620005aa5750600162000647565b81620005b857505f62000647565b8160018114620005d15760028114620005dc57620005fc565b600191505062000647565b60ff841115620005f057620005f06200053e565b50506001821b62000647565b5060208310610133831016604e8410600b841016171562000621575081810a62000647565b6200062d838362000552565b805f19048211156200064357620006436200053e565b0290505b92915050565b5f6200065d60ff8416836200059a565b9392505050565b80820281158282048414176200064757620006476200053e565b5f602082840312156200068f575f80fd5b81516001600160a01b03811681146200065d575f80fd5b61196880620006b45f395ff3fe608060405260043610610134575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb1461037b578063bf474bed1461039a578063c9567bf9146103af578063d34628cc146103c3578063dd62ed3e146103e2578063ec1f3f6314610426575f80fd5b8063751039fc146102ea5780637d1db4a5146102fe5780638da5cb5b146103135780638f9a55c01461033957806395d89b411461034e575f80fd5b8063313ce567116100f9578063313ce5671461021b57806331c2d847146102365780633bbac5791461025757806351bc3c851461028e57806370a08231146102a2578063715018a6146102d6575f80fd5b806306fdde031461013f578063095ea7b3146101965780630faee56f146101c557806318160ddd146101e857806323b872dd146101fc575f80fd5b3661013b57005b5f80fd5b34801561014a575f80fd5b5060408051808201909152601981527f412042554c4c49534820434f4d4d554e49545920544f4b454e0000000000000060208201525b60405161018d9190611460565b60405180910390f35b3480156101a1575f80fd5b506101b56101b03660046114d2565b610445565b604051901515815260200161018d565b3480156101d0575f80fd5b506101da60125481565b60405190815260200161018d565b3480156101f3575f80fd5b506101da61045b565b348015610207575f80fd5b506101b56102163660046114fc565b61047b565b348015610226575f80fd5b506040516009815260200161018d565b348015610241575f80fd5b5061025561025036600461154e565b6104e2565b005b348015610262575f80fd5b506101b561027136600461160e565b6001600160a01b03165f9081526004602052604090205460ff1690565b348015610299575f80fd5b5061025561057c565b3480156102ad575f80fd5b506101da6102bc36600461160e565b6001600160a01b03165f9081526001602052604090205490565b3480156102e1575f80fd5b506102556105c9565b3480156102f5575f80fd5b5061025561063a565b348015610309575f80fd5b506101da600f5481565b34801561031e575f80fd5b505f546040516001600160a01b03909116815260200161018d565b348015610344575f80fd5b506101da60105481565b348015610359575f80fd5b506040805180820190915260058152640889e8e8ab60db1b6020820152610180565b348015610386575f80fd5b506101b56103953660046114d2565b6106eb565b3480156103a5575f80fd5b506101da60115481565b3480156103ba575f80fd5b506102556106f7565b3480156103ce575f80fd5b506102556103dd36600461154e565b6108e0565b3480156103ed575f80fd5b506101da6103fc366004611629565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b348015610431575f80fd5b50610255610440366004611660565b61096e565b5f6104513384846109b3565b5060015b92915050565b5f6104686009600a61176b565b61047690633b9aca00611779565b905090565b5f610487848484610ad6565b6104d884336104d38560405180606001604052806028815260200161190b602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906110dc565b6109b3565b5060019392505050565b5f546001600160a01b031633146105145760405162461bcd60e51b815260040161050b90611790565b60405180910390fd5b5f5b8151811015610578575f60045f848481518110610535576105356117c5565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610570816117d9565b915050610516565b5050565b6005546001600160a01b0316336001600160a01b03161461059b575f80fd5b305f9081526001602052604090205480156105b9576105b981611114565b4780156105785761057881611284565b5f546001600160a01b031633146105f25760405162461bcd60e51b815260040161050b90611790565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146106635760405162461bcd60e51b815260040161050b90611790565b61066f6009600a61176b565b61067d90633b9aca00611779565b600f5561068c6009600a61176b565b61069a90633b9aca00611779565b6010557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106ca6009600a61176b565b6106d890633b9aca00611779565b60405190815260200160405180910390a1565b5f610451338484610ad6565b5f546001600160a01b031633146107205760405162461bcd60e51b815260040161050b90611790565b601454600160a01b900460ff161561077a5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161050b565b6013546001600160a01b031663f305d71947306107ab816001600160a01b03165f9081526001602052604090205490565b5f806107be5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610824573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061084991906117f1565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af115801561089e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108c2919061181c565b506014805462ff00ff60a01b19166201000160a01b17905543600655565b5f546001600160a01b031633146109095760405162461bcd60e51b815260040161050b90611790565b5f5b815181101561057857600160045f84848151811061092b5761092b6117c5565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610966816117d9565b91505061090b565b6005546001600160a01b0316336001600160a01b03161461098d575f80fd5b60095481111580156109a15750600a548111155b6109a9575f80fd5b6009819055600a55565b6001600160a01b038316610a155760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161050b565b6001600160a01b038216610a765760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161050b565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b3a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161050b565b6001600160a01b038216610b9c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161050b565b5f8111610bfd5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161050b565b5f80546001600160a01b03858116911614801590610c2857505f546001600160a01b03848116911614155b15610f9f576001600160a01b0384165f9081526004602052604090205460ff16158015610c6d57506001600160a01b0383165f9081526004602052604090205460ff16155b610c75575f80fd5b610ca16064610c9b600b54600e5411610c9057600754610c94565b6009545b85906112bb565b90611340565b6014549091506001600160a01b038581169116148015610ccf57506013546001600160a01b03848116911614155b8015610cf357506001600160a01b0383165f9081526003602052604090205460ff16155b15610dfa57600f54821115610d4a5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e00000000000000604482015260640161050b565b60105482610d6c856001600160a01b03165f9081526001602052604090205490565b610d76919061183b565b1115610dc45760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161050b565b436006546001610dd4919061183b565b1115610de557823b15610de5575f80fd5b600e8054905f610df4836117d9565b91905055505b6014546001600160a01b03848116911614801590610e3057506001600160a01b0383165f9081526003602052604090205460ff16155b15610eaf5760105482610e57856001600160a01b03165f9081526001602052604090205490565b610e61919061183b565b1115610eaf5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161050b565b6014546001600160a01b038481169116148015610ed557506001600160a01b0384163014155b15610f0257610eff6064610c9b600c54600e5411610ef557600854610c94565b600a5485906112bb565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610f3857506014546001600160a01b038581169116145b8015610f4d5750601454600160b01b900460ff165b8015610f5a575060115481115b8015610f695750600d54600e54115b15610f9d57610f8b610f8684610f8184601254611381565b611381565b611114565b478015610f9b57610f9b47611284565b505b505b801561101757305f90815260016020526040902054610fbe9082611395565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061100e9085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461103990836113f3565b6001600160a01b0385165f9081526001602052604090205561107c61105e83836113f3565b6001600160a01b0385165f9081526001602052604090205490611395565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110c585856113f3565b60405190815260200160405180910390a350505050565b5f81848411156110ff5760405162461bcd60e51b815260040161050b9190611460565b505f61110b848661184e565b95945050505050565b6014805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061115a5761115a6117c5565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156111b1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111d59190611861565b816001815181106111e8576111e86117c5565b6001600160a01b03928316602091820292909201015260135461120e91309116846109b3565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906112469085905f9086903090429060040161187c565b5f604051808303815f87803b15801561125d575f80fd5b505af115801561126f573d5f803e3d5ffd5b50506014805460ff60a81b1916905550505050565b6005546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015610578573d5f803e3d5ffd5b5f825f036112ca57505f610455565b5f6112d58385611779565b9050826112e285836118eb565b146113395760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161050b565b9392505050565b5f61133983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611434565b5f81831161138f5782611339565b50919050565b5f806113a1838561183b565b9050838110156113395760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161050b565b5f61133983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110dc565b5f81836114545760405162461bcd60e51b815260040161050b9190611460565b505f61110b84866118eb565b5f6020808352835180828501525f5b8181101561148b5785810183015185820160400152820161146f565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146114bf575f80fd5b50565b80356114cd816114ab565b919050565b5f80604083850312156114e3575f80fd5b82356114ee816114ab565b946020939093013593505050565b5f805f6060848603121561150e575f80fd5b8335611519816114ab565b92506020840135611529816114ab565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b5f602080838503121561155f575f80fd5b823567ffffffffffffffff80821115611576575f80fd5b818501915085601f830112611589575f80fd5b81358181111561159b5761159b61153a565b8060051b604051601f19603f830116810181811085821117156115c0576115c061153a565b6040529182528482019250838101850191888311156115dd575f80fd5b938501935b82851015611602576115f3856114c2565b845293850193928501926115e2565b98975050505050505050565b5f6020828403121561161e575f80fd5b8135611339816114ab565b5f806040838503121561163a575f80fd5b8235611645816114ab565b91506020830135611655816114ab565b809150509250929050565b5f60208284031215611670575f80fd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156116c557815f19048211156116ab576116ab611677565b808516156116b857918102915b93841c9390800290611690565b509250929050565b5f826116db57506001610455565b816116e757505f610455565b81600181146116fd576002811461170757611723565b6001915050610455565b60ff84111561171857611718611677565b50506001821b610455565b5060208310610133831016604e8410600b8410161715611746575081810a610455565b611750838361168b565b805f190482111561176357611763611677565b029392505050565b5f61133960ff8416836116cd565b808202811582820484141761045557610455611677565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b5f600182016117ea576117ea611677565b5060010190565b5f805f60608486031215611803575f80fd5b8351925060208401519150604084015190509250925092565b5f6020828403121561182c575f80fd5b81518015158114611339575f80fd5b8082018082111561045557610455611677565b8181038181111561045557610455611677565b5f60208284031215611871575f80fd5b8151611339816114ab565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118ca5784516001600160a01b0316835293830193918301916001016118a5565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261190557634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220d4da152053838549c587ae3f0b6837746ffa88687dfbf1cc496af8bbf08944d964736f6c63430008140033",
    "runtime_bytecode": "608060405260043610610134575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb1461037b578063bf474bed1461039a578063c9567bf9146103af578063d34628cc146103c3578063dd62ed3e146103e2578063ec1f3f6314610426575f80fd5b8063751039fc146102ea5780637d1db4a5146102fe5780638da5cb5b146103135780638f9a55c01461033957806395d89b411461034e575f80fd5b8063313ce567116100f9578063313ce5671461021b57806331c2d847146102365780633bbac5791461025757806351bc3c851461028e57806370a08231146102a2578063715018a6146102d6575f80fd5b806306fdde031461013f578063095ea7b3146101965780630faee56f146101c557806318160ddd146101e857806323b872dd146101fc575f80fd5b3661013b57005b5f80fd5b34801561014a575f80fd5b5060408051808201909152601981527f412042554c4c49534820434f4d4d554e49545920544f4b454e0000000000000060208201525b60405161018d9190611460565b60405180910390f35b3480156101a1575f80fd5b506101b56101b03660046114d2565b610445565b604051901515815260200161018d565b3480156101d0575f80fd5b506101da60125481565b60405190815260200161018d565b3480156101f3575f80fd5b506101da61045b565b348015610207575f80fd5b506101b56102163660046114fc565b61047b565b348015610226575f80fd5b506040516009815260200161018d565b348015610241575f80fd5b5061025561025036600461154e565b6104e2565b005b348015610262575f80fd5b506101b561027136600461160e565b6001600160a01b03165f9081526004602052604090205460ff1690565b348015610299575f80fd5b5061025561057c565b3480156102ad575f80fd5b506101da6102bc36600461160e565b6001600160a01b03165f9081526001602052604090205490565b3480156102e1575f80fd5b506102556105c9565b3480156102f5575f80fd5b5061025561063a565b348015610309575f80fd5b506101da600f5481565b34801561031e575f80fd5b505f546040516001600160a01b03909116815260200161018d565b348015610344575f80fd5b506101da60105481565b348015610359575f80fd5b506040805180820190915260058152640889e8e8ab60db1b6020820152610180565b348015610386575f80fd5b506101b56103953660046114d2565b6106eb565b3480156103a5575f80fd5b506101da60115481565b3480156103ba575f80fd5b506102556106f7565b3480156103ce575f80fd5b506102556103dd36600461154e565b6108e0565b3480156103ed575f80fd5b506101da6103fc366004611629565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b348015610431575f80fd5b50610255610440366004611660565b61096e565b5f6104513384846109b3565b5060015b92915050565b5f6104686009600a61176b565b61047690633b9aca00611779565b905090565b5f610487848484610ad6565b6104d884336104d38560405180606001604052806028815260200161190b602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906110dc565b6109b3565b5060019392505050565b5f546001600160a01b031633146105145760405162461bcd60e51b815260040161050b90611790565b60405180910390fd5b5f5b8151811015610578575f60045f848481518110610535576105356117c5565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610570816117d9565b915050610516565b5050565b6005546001600160a01b0316336001600160a01b03161461059b575f80fd5b305f9081526001602052604090205480156105b9576105b981611114565b4780156105785761057881611284565b5f546001600160a01b031633146105f25760405162461bcd60e51b815260040161050b90611790565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146106635760405162461bcd60e51b815260040161050b90611790565b61066f6009600a61176b565b61067d90633b9aca00611779565b600f5561068c6009600a61176b565b61069a90633b9aca00611779565b6010557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106ca6009600a61176b565b6106d890633b9aca00611779565b60405190815260200160405180910390a1565b5f610451338484610ad6565b5f546001600160a01b031633146107205760405162461bcd60e51b815260040161050b90611790565b601454600160a01b900460ff161561077a5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161050b565b6013546001600160a01b031663f305d71947306107ab816001600160a01b03165f9081526001602052604090205490565b5f806107be5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610824573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061084991906117f1565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af115801561089e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108c2919061181c565b506014805462ff00ff60a01b19166201000160a01b17905543600655565b5f546001600160a01b031633146109095760405162461bcd60e51b815260040161050b90611790565b5f5b815181101561057857600160045f84848151811061092b5761092b6117c5565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610966816117d9565b91505061090b565b6005546001600160a01b0316336001600160a01b03161461098d575f80fd5b60095481111580156109a15750600a548111155b6109a9575f80fd5b6009819055600a55565b6001600160a01b038316610a155760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161050b565b6001600160a01b038216610a765760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161050b565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b3a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161050b565b6001600160a01b038216610b9c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161050b565b5f8111610bfd5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161050b565b5f80546001600160a01b03858116911614801590610c2857505f546001600160a01b03848116911614155b15610f9f576001600160a01b0384165f9081526004602052604090205460ff16158015610c6d57506001600160a01b0383165f9081526004602052604090205460ff16155b610c75575f80fd5b610ca16064610c9b600b54600e5411610c9057600754610c94565b6009545b85906112bb565b90611340565b6014549091506001600160a01b038581169116148015610ccf57506013546001600160a01b03848116911614155b8015610cf357506001600160a01b0383165f9081526003602052604090205460ff16155b15610dfa57600f54821115610d4a5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e00000000000000604482015260640161050b565b60105482610d6c856001600160a01b03165f9081526001602052604090205490565b610d76919061183b565b1115610dc45760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161050b565b436006546001610dd4919061183b565b1115610de557823b15610de5575f80fd5b600e8054905f610df4836117d9565b91905055505b6014546001600160a01b03848116911614801590610e3057506001600160a01b0383165f9081526003602052604090205460ff16155b15610eaf5760105482610e57856001600160a01b03165f9081526001602052604090205490565b610e61919061183b565b1115610eaf5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161050b565b6014546001600160a01b038481169116148015610ed557506001600160a01b0384163014155b15610f0257610eff6064610c9b600c54600e5411610ef557600854610c94565b600a5485906112bb565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610f3857506014546001600160a01b038581169116145b8015610f4d5750601454600160b01b900460ff165b8015610f5a575060115481115b8015610f695750600d54600e54115b15610f9d57610f8b610f8684610f8184601254611381565b611381565b611114565b478015610f9b57610f9b47611284565b505b505b801561101757305f90815260016020526040902054610fbe9082611395565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061100e9085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461103990836113f3565b6001600160a01b0385165f9081526001602052604090205561107c61105e83836113f3565b6001600160a01b0385165f9081526001602052604090205490611395565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110c585856113f3565b60405190815260200160405180910390a350505050565b5f81848411156110ff5760405162461bcd60e51b815260040161050b9190611460565b505f61110b848661184e565b95945050505050565b6014805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061115a5761115a6117c5565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156111b1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111d59190611861565b816001815181106111e8576111e86117c5565b6001600160a01b03928316602091820292909201015260135461120e91309116846109b3565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906112469085905f9086903090429060040161187c565b5f604051808303815f87803b15801561125d575f80fd5b505af115801561126f573d5f803e3d5ffd5b50506014805460ff60a81b1916905550505050565b6005546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015610578573d5f803e3d5ffd5b5f825f036112ca57505f610455565b5f6112d58385611779565b9050826112e285836118eb565b146113395760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161050b565b9392505050565b5f61133983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611434565b5f81831161138f5782611339565b50919050565b5f806113a1838561183b565b9050838110156113395760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161050b565b5f61133983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110dc565b5f81836114545760405162461bcd60e51b815260040161050b9190611460565b505f61110b84866118eb565b5f6020808352835180828501525f5b8181101561148b5785810183015185820160400152820161146f565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146114bf575f80fd5b50565b80356114cd816114ab565b919050565b5f80604083850312156114e3575f80fd5b82356114ee816114ab565b946020939093013593505050565b5f805f6060848603121561150e575f80fd5b8335611519816114ab565b92506020840135611529816114ab565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b5f602080838503121561155f575f80fd5b823567ffffffffffffffff80821115611576575f80fd5b818501915085601f830112611589575f80fd5b81358181111561159b5761159b61153a565b8060051b604051601f19603f830116810181811085821117156115c0576115c061153a565b6040529182528482019250838101850191888311156115dd575f80fd5b938501935b82851015611602576115f3856114c2565b845293850193928501926115e2565b98975050505050505050565b5f6020828403121561161e575f80fd5b8135611339816114ab565b5f806040838503121561163a575f80fd5b8235611645816114ab565b91506020830135611655816114ab565b809150509250929050565b5f60208284031215611670575f80fd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156116c557815f19048211156116ab576116ab611677565b808516156116b857918102915b93841c9390800290611690565b509250929050565b5f826116db57506001610455565b816116e757505f610455565b81600181146116fd576002811461170757611723565b6001915050610455565b60ff84111561171857611718611677565b50506001821b610455565b5060208310610133831016604e8410600b8410161715611746575081810a610455565b611750838361168b565b805f190482111561176357611763611677565b029392505050565b5f61133960ff8416836116cd565b808202811582820484141761045557610455611677565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b5f600182016117ea576117ea611677565b5060010190565b5f805f60608486031215611803575f80fd5b8351925060208401519150604084015190509250925092565b5f6020828403121561182c575f80fd5b81518015158114611339575f80fd5b8082018082111561045557610455611677565b8181038181111561045557610455611677565b5f60208284031215611871575f80fd5b8151611339816114ab565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118ca5784516001600160a01b0316835293830193918301916001016118a5565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261190557634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220d4da152053838549c587ae3f0b6837746ffa88687dfbf1cc496af8bbf08944d964736f6c63430008140033",
    "contract_name": "DOGEX",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbot\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"reduceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\n/**\n\n\u256d\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2533\u2501\u256e\u256d\u2501\u256e\n\u2570\u256e\u256d\u256e\u2503\u256d\u2501\u256e\u2503\u256d\u2501\u256e\u2503\u256d\u2501\u2501\u253b\u256e\u2570\u256f\u256d\u256f\n\u2571\u2503\u2503\u2503\u2503\u2503\u2571\u2503\u2503\u2503\u2571\u2570\u252b\u2570\u2501\u2501\u256e\u2570\u256e\u256d\u256f\n\u2571\u2503\u2503\u2503\u2503\u2503\u2571\u2503\u2503\u2503\u256d\u2501\u252b\u256d\u2501\u2501\u256f\u256d\u256f\u2570\u256e\n\u256d\u256f\u2570\u256f\u2503\u2570\u2501\u256f\u2503\u2570\u253b\u2501\u2503\u2570\u2501\u2501\u2533\u256f\u256d\u256e\u2570\u256e\n\u2570\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u253b\u2501\u256f\u2570\u2501\u256f\n\n\ud83d\udd1dDOGE\ud835\udd4f is one of the best token you can get your hands in and starts EARN 3% $DOGE PASSIVELY FROM EVERY TRANSACTION IN BOTH BEAR AND BULL MARKET\ud83d\udd7a\n\nWebsite:https://dogex.day/\n\nX:https://twitter.com/dogexday?s=21\n\nhttps://t.me/+gdzxKgRLoAM0ZGU1\n\n**/\n\npragma solidity 0.8.20;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ncontract DOGEX is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private bots;\n    address payable private _taxWallet;\n    uint256 firstBlock;\n\n    uint256 private _initialBuyTax=20;\n    uint256 private _initialSellTax=50;\n    uint256 private _finalBuyTax=5;\n    uint256 private _finalSellTax=5;\n    uint256 private _reduceBuyTaxAt=20;\n    uint256 private _reduceSellTaxAt=30;\n    uint256 private _preventSwapBefore=15;\n    uint256 private _buyCount=0;\n\n    uint8 private constant _decimals = 9;\n    uint256 private constant _tTotal = 1000000000 * 10**_decimals;\n    string private constant _name = unicode\"A BULLISH COMMUNITY TOKEN\";\n    string private constant _symbol = unicode\"DOGEX\";\n    uint256 public _maxTxAmount =   20000 * 10**_decimals;\n    uint256 public _maxWalletSize = 20000 * 10**_decimals;\n    uint256 public _taxSwapThreshold= 20000 * 10**_decimals;\n    uint256 public _maxTaxSwap= 10000 * 10**_decimals;\n\n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapV2Pair;\n    bool private tradingOpen;\n    bool private inSwap = false;\n    bool private swapEnabled = false;\n\n    event MaxTxAmountUpdated(uint _maxTxAmount);\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor () {\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\n\n        _taxWallet = payable(_msgSender());\n        _balances[_msgSender()] = _tTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_taxWallet] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        uint256 taxAmount=0;\n        if (from != owner() && to != owner()) {\n            require(!bots[from] && !bots[to]);\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\n\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\n\n                if (firstBlock + 1  > block.number) {\n                    require(!isContract(to));\n                }\n                _buyCount++;\n            }\n\n            if (to != uniswapV2Pair && ! _isExcludedFromFee[to]) {\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\n            }\n\n            if(to == uniswapV2Pair && from!= address(this) ){\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\n            }\n\n            uint256 contractTokenBalance = balanceOf(address(this));\n            if (!inSwap && to   == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance > 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n\n        if(taxAmount>0){\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\n          emit Transfer(from, address(this),taxAmount);\n        }\n        _balances[from]=_balances[from].sub(amount);\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\n        emit Transfer(from, to, amount.sub(taxAmount));\n    }\n\n\n    function min(uint256 a, uint256 b) private pure returns (uint256){\n      return (a>b)?b:a;\n    }\n\n    function isContract(address account) private view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function removeLimits() external onlyOwner{\n        _maxTxAmount = _tTotal;\n        _maxWalletSize=_tTotal;\n        emit MaxTxAmountUpdated(_tTotal);\n    }\n\n    function sendETHToFee(uint256 amount) private {\n        _taxWallet.transfer(amount);\n    }\n\n    function addBots(address[] memory bots_) public onlyOwner {\n        for (uint i = 0; i < bots_.length; i++) {\n            bots[bots_[i]] = true;\n        }\n    }\n\n    function delBots(address[] memory notbot) public onlyOwner {\n      for (uint i = 0; i < notbot.length; i++) {\n          bots[notbot[i]] = false;\n      }\n    }\n\n    function isBot(address a) public view returns (bool){\n      return bots[a];\n    }\n\n    function openTrading() external onlyOwner() {\n        require(!tradingOpen,\"trading is already open\");\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n        swapEnabled = true;\n        tradingOpen = true;\n        firstBlock = block.number;\n    }\n\n    \n    function reduceFee(uint256 _newFee) external{\n      require(_msgSender()==_taxWallet);\n      require(_newFee<=_finalBuyTax && _newFee<=_finalSellTax);\n      _finalBuyTax=_newFee;\n      _finalSellTax=_newFee;\n    }\n\n    receive() external payable {}\n\n    function manualSwap() external {\n        require(_msgSender()==_taxWallet);\n        uint256 tokenBalance=balanceOf(address(this));\n        if(tokenBalance>0){\n          swapTokensForEth(tokenBalance);\n        }\n        uint256 ethBalance=address(this).balance;\n        if(ethBalance>0){\n          sendETHToFee(ethBalance);\n        }\n    }\n}",
    "etherscan_verified": true
}