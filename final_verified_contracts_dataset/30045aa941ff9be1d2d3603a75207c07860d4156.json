{
    "address": "0x30045aA941FF9Be1d2D3603A75207C07860d4156",
    "tx_hash": "8d7ff7b9011461f89e667073b913a238fc4c53394ff904dbbd2cf21ad492282c",
    "block_number": 18000170,
    "timestamp": 1693068935,
    "gas_used_in_creation": 6114111,
    "creation_bytecode": "",
    "runtime_bytecode": "60806040526004361061037a5760003560e01c8063768dc710116101d1578063c5f956af11610102578063deb5896e116100a0578063f2fde38b1161006f578063f2fde38b14610ab4578063f311732214610ad4578063f887ea4014610af4578063f901796614610b2157600080fd5b8063deb5896e14610a48578063df8408fe14610a5e578063edf731c514610a7e578063efac458514610a9457600080fd5b8063c8c8ebe4116100dc578063c8c8ebe414610998578063cd5f101d146109ae578063d8306786146109db578063dd62ed3e146109f557600080fd5b8063c5f956af1461092b578063c6aca36b14610958578063c876d0b91461097857600080fd5b8063a2065e711161016f578063a9059cbb11610149578063a9059cbb146108af578063aa4bde28146108cf578063b62496f5146108e5578063bd74c0461461091557600080fd5b8063a2065e7114610859578063a335d4ff14610879578063a457c2d71461088f57600080fd5b80638d0cb35a116101ab5780638d0cb35a146107d95780638da5cb5b146107f957806395d89b41146108245780639d0014b11461083957600080fd5b8063768dc7101461076957806379cc6790146107995780637dee3290146107b957600080fd5b8063313ce567116102ab5780635342acb4116102495780636f15d975116102235780636f15d975146106db57806370a08231146106f1578063715018a614610734578063738c6c091461074957600080fd5b80635342acb41461066a578063560d52d4146106b05780636aa5b37f146106c557600080fd5b80633d90fff9116102855780633d90fff9146105cc57806342966c68146105e2578063452ed4f1146106025780634a569e941461065457600080fd5b8063313ce5671461057057806332cde6641461058c57806339509351146105ac57600080fd5b80631630e97f116103185780631c06a7e1116102f25780631c06a7e1146104ba5780631e293c101461051057806323b872dd1461053057806327a14fc21461055057600080fd5b80631630e97f1461046f57806318160ddd1461048f5780631b11c874146104a457600080fd5b8063095ea7b311610354578063095ea7b3146103e7578063123e6cd81461041757806313fa254a14610439578063148829f51461045957600080fd5b80630445b6671461038657806306fdde03146103af578063094d776f146103d157600080fd5b3661038157005b600080fd5b34801561039257600080fd5b5061039c60095481565b6040519081526020015b60405180910390f35b3480156103bb57600080fd5b506103c4610b40565b6040516103a69190612c7a565b3480156103dd57600080fd5b5061039c60145481565b3480156103f357600080fd5b50610407610402366004612d08565b610bd2565b60405190151581526020016103a6565b34801561042357600080fd5b50610437610432366004612d4b565b610bec565b005b34801561044557600080fd5b5061039c610454366004612d6d565b610c7f565b34801561046557600080fd5b5061039c600c5481565b34801561047b57600080fd5b5061043761048a366004612d6d565b610ca0565b34801561049b57600080fd5b5060025461039c565b3480156104b057600080fd5b5061039c60155481565b3480156104c657600080fd5b50601c546104eb9061ffff808216916201000081048216916401000000009091041683565b6040805161ffff948516815292841660208401529216918101919091526060016103a6565b34801561051c57600080fd5b5061043761052b366004612d6d565b610d42565b34801561053c57600080fd5b5061040761054b366004612d86565b610d71565b34801561055c57600080fd5b5061043761056b366004612d6d565b610d95565b34801561057c57600080fd5b50604051601281526020016103a6565b34801561059857600080fd5b506104376105a7366004612dc7565b610dc4565b3480156105b857600080fd5b506104076105c7366004612d08565b610ec1565b3480156105d857600080fd5b5061039c60165481565b3480156105ee57600080fd5b506104376105fd366004612d6d565b610f0d565b34801561060e57600080fd5b5060065461062f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016103a6565b34801561066057600080fd5b5061039c60115481565b34801561067657600080fd5b50610407610685366004612e0a565b73ffffffffffffffffffffffffffffffffffffffff1660009081526018602052604090205460ff1690565b3480156106bc57600080fd5b5061039c603281565b3480156106d157600080fd5b5061039c60125481565b3480156106e757600080fd5b5061039c60105481565b3480156106fd57600080fd5b5061039c61070c366004612e0a565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b34801561074057600080fd5b50610437610f1a565b34801561075557600080fd5b50610437610764366004612d4b565b610fe1565b34801561077557600080fd5b50610407610784366004612e0a565b60186020526000908152604090205460ff1681565b3480156107a557600080fd5b506104376107b4366004612d08565b61106f565b3480156107c557600080fd5b506104376107d4366004612d6d565b611088565b3480156107e557600080fd5b506104376107f4366004612e37565b6110b7565b34801561080557600080fd5b5060055473ffffffffffffffffffffffffffffffffffffffff1661062f565b34801561083057600080fd5b506103c46110f6565b34801561084557600080fd5b50610437610854366004612d6d565b611105565b34801561086557600080fd5b50610437610874366004612e37565b611112565b34801561088557600080fd5b5061039c61271081565b34801561089b57600080fd5b506104076108aa366004612d08565b611152565b3480156108bb57600080fd5b506104076108ca366004612d08565b611223565b3480156108db57600080fd5b5061039c600a5481565b3480156108f157600080fd5b50610407610900366004612e0a565b60196020526000908152604090205460ff1681565b34801561092157600080fd5b5061039c600b5481565b34801561093757600080fd5b5060085461062f9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561096457600080fd5b50610437610973366004612d6d565b611231565b34801561098457600080fd5b506017546104079062010000900460ff1681565b3480156109a457600080fd5b5061039c600f5481565b3480156109ba57600080fd5b5061039c6109c9366004612e0a565b601a6020526000908152604090205481565b3480156109e757600080fd5b506017546104079060ff1681565b348015610a0157600080fd5b5061039c610a10366004612e52565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b348015610a5457600080fd5b5061039c600e5481565b348015610a6a57600080fd5b50610437610a79366004612e8b565b611269565b348015610a8a57600080fd5b5061039c60135481565b348015610aa057600080fd5b50610437610aaf366004612d6d565b6112c7565b348015610ac057600080fd5b50610437610acf366004612e0a565b6112d4565b348015610ae057600080fd5b5061062f610aef366004612d6d565b611388565b348015610b0057600080fd5b50601b5461062f9073ffffffffffffffffffffffffffffffffffffffff1681565b348015610b2d57600080fd5b5060175461040790610100900460ff1681565b606060038054610b4f90612ec0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7b90612ec0565b8015610bc85780601f10610b9d57610100808354040283529160200191610bc8565b820191906000526020600020905b815481529060010190602001808311610bab57829003601f168201915b5050505050905090565b600033610be08185856113bf565b60019150505b92915050565b610bf4611572565b612710600e548261ffff16610c099190612f42565b1115610c76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f50657263656e742063616e7420626520686967686572207468616e203130302560448201526064015b60405180910390fd5b61ffff16601155565b600d8181548110610c8f57600080fd5b600091825260209091200154905081565b610ca8611572565b6402540be400811015610d3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f6d6178206761732070726963652063616e74206265206c6f776572207468616e60448201527f20313020675765690000000000000000000000000000000000000000000000006064820152608401610c6d565b601555565b610d4a611572565b61271081610d5760025490565b610d619190612f55565b610d6b9190612f6c565b600f5550565b600033610d7f8582856115f3565b610d8a8585856116c4565b506001949350505050565b610d9d611572565b61271081610daa60025490565b610db49190612f55565b610dbe9190612f6c565b600a5550565b610dcc611572565b6126ac8361ffff1611158015610de857506126ac8261ffff1611155b610e4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f546f6f20686967687420746178000000000000000000000000000000000000006044820152606401610c6d565b601c805461ffff9485167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909116176201000093851693909302929092177fffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffffffff166401000000009190931602919091179055565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190610be09082908690610f08908790612f42565b6113bf565b610f1733826116f6565b50565b610f22611572565b601c5461119461ffff909116108015610f495750601c546111946201000090910461ffff16105b610fd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f546f6f206869676874207461782c2063616e27742072656e6f756e6365206f7760448201527f6e6572736869702e0000000000000000000000000000000000000000000000006064820152608401610c6d565b610fdf60006118ba565b565b610fe9611572565b6127106011548261ffff16610ffe9190612f42565b1115611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f50657263656e742063616e7420626520686967686572207468616e20313030256044820152606401610c6d565b61ffff16600e55565b61107a8233836115f3565b61108482826116f6565b5050565b611090611572565b6127108161109d60025490565b6110a79190612f55565b6110b19190612f6c565b60125550565b6110bf611572565b60178054911515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055565b606060048054610b4f90612ec0565b61110d611572565b600955565b61111a611572565b6017805491151562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff909216919091179055565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015611216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610c6d565b610d8a82868684036113bf565b600033610be08185856116c4565b600061123e600283612f6c565b90504761124b8230611931565b60006112578247612fa7565b90506112638382611ae8565b50505050565b611271611572565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260186020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6112cf611572565b601055565b6112dc611572565b73ffffffffffffffffffffffffffffffffffffffff811661137f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610c6d565b610f17816118ba565b6007818154811061139857600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b73ffffffffffffffffffffffffffffffffffffffff8316611461576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610c6d565b73ffffffffffffffffffffffffffffffffffffffff8216611504576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610c6d565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60055473ffffffffffffffffffffffffffffffffffffffff163314610fdf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c6d565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461126357818110156116b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610c6d565b61126384848484036113bf565b6116cf838383611bf0565b6116d9838361230e565b156116e6576116e66123f7565b6116f1838383612629565b505050565b73ffffffffffffffffffffffffffffffffffffffff8216611799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610c6d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020548181101561184f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610c6d565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061196657611966612fe9565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152601b54604080517fad5c46480000000000000000000000000000000000000000000000000000000081529051919093169263ad5c46489260048083019391928290030181865afa1580156119e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a099190613018565b81600181518110611a1c57611a1c612fe9565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152601b544291611a5191309116866113bf565b601b546040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063791ac94790611ab0908790600090879089908890600401613086565b600060405180830381600087803b158015611aca57600080fd5b505af1158015611ade573d6000803e3d6000fd5b5050505050505050565b601b544290611b2f90309073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6113bf565b601b546040517ff305d7190000000000000000000000000000000000000000000000000000000081523060048201819052602482018690526000604483018190526064830152608482015260a4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063f305d71990849060c40160606040518083038185885af1158015611bc3573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611be891906130cf565b505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316611c93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f45524332303a207472616e736665722066726f6d20746865205a45524f5f414460448201527f44524553532061646472657373000000000000000000000000000000000000006064820152608401610c6d565b73ffffffffffffffffffffffffffffffffffffffff8216611d36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f45524332303a207472616e7366657220746f20746865205a45524f5f4144445260448201527f45535320616464726573730000000000000000000000000000000000000000006064820152608401610c6d565b60008111611dc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5472616e7366657220616d6f756e74206d75737420626520677265617465722060448201527f7468616e205a45524f5f414444524553530000000000000000000000000000006064820152608401610c6d565b60175462010000900460ff168015611dec5750601454601354611de99190612f42565b42105b156120325760055473ffffffffffffffffffffffffffffffffffffffff848116911614801590611e375750601b5473ffffffffffffffffffffffffffffffffffffffff838116911614155b8015611e5e575060065473ffffffffffffffffffffffffffffffffffffffff838116911614155b8015611e80575073ffffffffffffffffffffffffffffffffffffffff82163014155b156120325760125415611ef957601254811115611ef9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4d617820427579204c696d69742e0000000000000000000000000000000000006044820152606401610c6d565b601754610100900460ff1615611f75576015543a1115611f75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4761732070726963652065786365656473206c696d69742e00000000000000006044820152606401610c6d565b336000908152601a6020526040902054421015612014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e00000000000000000000000000000000000000000000000000000000006064820152608401610c6d565b6016546120219042612f42565b336000908152601a60205260409020555b60055473ffffffffffffffffffffffffffffffffffffffff848116911614801590612078575060055473ffffffffffffffffffffffffffffffffffffffff838116911614155b8015612099575073ffffffffffffffffffffffffffffffffffffffff821615155b80156120bd575073ffffffffffffffffffffffffffffffffffffffff821661dead14155b80156120df575073ffffffffffffffffffffffffffffffffffffffff82163014155b80156120ee575060175460ff16155b156116f15773ffffffffffffffffffffffffffffffffffffffff831660009081526019602052604090205460ff161561224e57600f548111156121b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527f6d61785472616e73616374696f6e416d6f756e742e00000000000000000000006064820152608401610c6d565b600a5473ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020546121e69083612f42565b11156116f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d61782077616c6c6574206578636565646564000000000000000000000000006044820152606401610c6d565b73ffffffffffffffffffffffffffffffffffffffff821660009081526019602052604090205460ff16156121b357600f548111156116f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e7420657863656564732074686560448201527f206d61785472616e73616374696f6e416d6f756e742e000000000000000000006064820152608401610c6d565b306000908152602081905260408120546009548110158015612333575060175460ff16155b801561235a575060065473ffffffffffffffffffffffffffffffffffffffff858116911614155b801561238b575060065473ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040812054115b80156123bd575073ffffffffffffffffffffffffffffffffffffffff831660009081526018602052604090205460ff16155b80156123ef575073ffffffffffffffffffffffffffffffffffffffff841660009081526018602052604090205460ff16155b949350505050565b601780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905530600090815260208190526040902054600b541561252357600b546124478183612fa7565b6000600b5560075490925081905b801561251f576000816001146124aa57612710600d612475600185612fa7565b8154811061248557612485612fe9565b90600052602060002001548561249b9190612f55565b6124a59190612f6c565b6124ac565b825b90506124f68160076124bf600186612fa7565b815481106124cf576124cf612fe9565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16611931565b600182111561250c576125098184612fa7565b92505b5080612517816130fd565b915050612455565b5050505b80156125fe576011541561255557612555612710601154836125459190612f55565b61254f9190612f6c565b30611931565b600e541561257b5761257b612710600e54836125719190612f55565b6109739190612f6c565b6000612710601154600e546125909190612f42565b61259a9084612f55565b6125a49190612f6c565b6125ae9083612fa7565b905080156125da576008546125da90829073ffffffffffffffffffffffffffffffffffffffff16611931565b601054156125fc5760105447908111156125fa576125fa8161dead61271e565b505b505b50601780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b60175473ffffffffffffffffffffffffffffffffffffffff8416600090815260186020526040902054829160ff9081161591168061268c575073ffffffffffffffffffffffffffffffffffffffff841660009081526018602052604090205460ff165b15612695575060005b801561270c576000806126a9878787612908565b909250905060006126ba8284612f42565b111561270957806126cb8387612fa7565b6126d59190612fa7565b935080156126f55780600b60008282546126ef9190612f42565b90915550505b61270987306127048486612f42565b612a0b565b50505b612717858584612a0b565b5050505050565b6040805160028082526060820183526000926020830190803683375050601b54604080517fad5c4648000000000000000000000000000000000000000000000000000000008152905193945073ffffffffffffffffffffffffffffffffffffffff9091169263ad5c4648925060048083019260209291908290030181865afa1580156127ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d29190613018565b816000815181106127e5576127e5612fe9565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050308160018151811061283357612833612fe9565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152601b546040517f7ff36ab500000000000000000000000000000000000000000000000000000000815242929190911690637ff36ab59086906128a390600090879089908890600401613132565b60006040518083038185885af11580156128c1573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526127179190810190613174565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601960205260408120548190819081908190819060ff161561295857601c546129519061ffff1685612f42565b93506129bd565b73ffffffffffffffffffffffffffffffffffffffff881660009081526019602052604090205460ff161561299d57601c546129519062010000900461ffff1685612f42565b601c546129b690640100000000900461ffff1685612f42565b9350600190505b83156129dd576127106129d08589612f55565b6129da9190612f6c565b92505b806129fd576127106129f0603289612f55565b6129fa9190612f6c565b91505b509097909650945050505050565b73ffffffffffffffffffffffffffffffffffffffff8316612aae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610c6d565b73ffffffffffffffffffffffffffffffffffffffff8216612b51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610c6d565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015612c07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610c6d565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611263565b600060208083528351808285015260005b81811015612ca757858101830151858201604001528201612c8b565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f1757600080fd5b60008060408385031215612d1b57600080fd5b8235612d2681612ce6565b946020939093013593505050565b803561ffff81168114612d4657600080fd5b919050565b600060208284031215612d5d57600080fd5b612d6682612d34565b9392505050565b600060208284031215612d7f57600080fd5b5035919050565b600080600060608486031215612d9b57600080fd5b8335612da681612ce6565b92506020840135612db681612ce6565b929592945050506040919091013590565b600080600060608486031215612ddc57600080fd5b612de584612d34565b9250612df360208501612d34565b9150612e0160408501612d34565b90509250925092565b600060208284031215612e1c57600080fd5b8135612d6681612ce6565b80358015158114612d4657600080fd5b600060208284031215612e4957600080fd5b612d6682612e27565b60008060408385031215612e6557600080fd5b8235612e7081612ce6565b91506020830135612e8081612ce6565b809150509250929050565b60008060408385031215612e9e57600080fd5b8235612ea981612ce6565b9150612eb760208401612e27565b90509250929050565b600181811c90821680612ed457607f821691505b602082108103612f0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610be657610be6612f13565b8082028115828204841417610be657610be6612f13565b600082612fa2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81810381811115610be657610be6612f13565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561302a57600080fd5b8151612d6681612ce6565b600081518084526020808501945080840160005b8381101561307b57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613049565b509495945050505050565b85815284602082015260a0604082015260006130a560a0830186613035565b73ffffffffffffffffffffffffffffffffffffffff94909416606083015250608001529392505050565b6000806000606084860312156130e457600080fd5b8351925060208401519150604084015190509250925092565b60008161310c5761310c612f13565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b84815260806020820152600061314b6080830186613035565b73ffffffffffffffffffffffffffffffffffffffff949094166040830152506060015292915050565b6000602080838503121561318757600080fd5b825167ffffffffffffffff8082111561319f57600080fd5b818501915085601f8301126131b357600080fd5b8151818111156131c5576131c5612fba565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561320857613208612fba565b60405291825284820192508381018501918883111561322657600080fd5b938501935b828510156132445784518452938501939285019261322b565b9897505050505050505056fea2646970667358221220d0602e67f5a4b70ddf748cd595c6c90dfadd67655b35ffbb03785b78b22b2cea64736f6c63430008130033",
    "contract_name": "Token",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "999999",
    "abi": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMint\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"percents\",\"type\":\"uint16[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PLATFORM_FEE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feesRates\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_holderLastTransferTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"autoLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimitActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDelayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPriceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"platformFeeAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"platformFeePercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newPercent\",\"type\":\"uint16\"}],\"name\":\"setAutoLiquidityPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newPercent\",\"type\":\"uint16\"}],\"name\":\"setBuyBackPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setBuyBackThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeDelayBetweenTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDelayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"updateGasLimitActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxGasPriceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"updateTransferDelayEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.2\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.2\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * 'onlyOwner', which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * 'onlyOwner' functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account ('newOwner').\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account ('newOwner').\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.2\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when 'value' tokens are moved from one account ('from') to\\r\\n     * another ('to').\\r\\n     *\\r\\n     * Note that 'value' may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a 'spender' for an 'owner' is set by\\r\\n     * a call to {approve}. 'value' is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by 'account'.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves 'amount' tokens from the caller's account to 'to'.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that 'spender' will be\\r\\n     * allowed to spend on behalf of 'owner' through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets 'amount' as the allowance of 'spender' over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves 'amount' tokens from 'from' to 'to' using the\\r\\n     * allowance mechanism. 'amount' is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.9.2\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.9.2\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * The default value of {decimals} is 18. To change this, you should override\\r\\n * this function so it returns a different value.\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning 'false' on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if 'decimals' equals '2', a balance of '505' tokens should\\r\\n     * be displayed to a user as '5.05' ('505 / 10 ** 2').\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the default value returned by this function, unless\\r\\n     * it's overridden.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(\\r\\n        address account\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'to' cannot be the zero address.\\r\\n     * - the caller must have a balance of at least 'amount'.\\r\\n     */\\r\\n    function transfer(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If 'amount' is the maximum 'uint256', the allowance is not updated on\\r\\n     * 'transferFrom'. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'spender' cannot be the zero address.\\r\\n     */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum 'uint256'.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'from' and 'to' cannot be the zero address.\\r\\n     * - 'from' must have a balance of at least 'amount'.\\r\\n     * - the caller must have allowance for ''from'''s tokens of at least\\r\\n     * 'amount'.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to 'spender' by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'spender' cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to 'spender' by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'spender' cannot be the zero address.\\r\\n     * - 'spender' must have allowance for the caller of at least\\r\\n     * 'subtractedValue'.\\r\\n     */\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves 'amount' of tokens from 'from' to 'to'.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'from' cannot be the zero address.\\r\\n     * - 'to' cannot be the zero address.\\r\\n     * - 'from' must have a balance of at least 'amount'.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(\\r\\n            fromBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates 'amount' tokens and assigns them to 'account', increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with 'from' set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'account' cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys 'amount' tokens from 'account', reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with 'to' set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'account' cannot be the zero address.\\r\\n     * - 'account' must have at least 'amount' tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets 'amount' as the allowance of 'spender' over the 'owner' s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to 'approve', and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - 'owner' cannot be the zero address.\\r\\n     * - 'spender' cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates 'owner' s allowance for 'spender' based on spent 'amount'.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(\\r\\n                currentAllowance >= amount,\\r\\n                \\\"ERC20: insufficient allowance\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when 'from' and 'to' are both non-zero, 'amount' of ''from'''s tokens\\r\\n     * will be transferred to 'to'.\\r\\n     * - when 'from' is zero, 'amount' tokens will be minted for 'to'.\\r\\n     * - when 'to' is zero, 'amount' of ''from'''s tokens will be burned.\\r\\n     * - 'from' and 'to' are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when 'from' and 'to' are both non-zero, 'amount' of ''from'''s tokens\\r\\n     * has been transferred to 'to'.\\r\\n     * - when 'from' is zero, 'amount' tokens have been minted for 'to'.\\r\\n     * - when 'to' is zero, 'amount' of ''from'''s tokens have been burned.\\r\\n     * - 'from' and 'to' are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol@v4.9.2\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\r\\n\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\r\\n * tokens and those that they have an allowance for, in a way that can be\\r\\n * recognized off-chain (via event analysis).\\r\\n */\\r\\nabstract contract ERC20Burnable is Context, ERC20 {\\r\\n    /**\\r\\n     * @dev Destroys 'amount' tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 amount) public virtual {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys 'amount' tokens from 'account', deducting from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have allowance for ''accounts'''s tokens of at least\\r\\n     * 'amount'.\\r\\n     */\\r\\n    function burnFrom(address account, uint256 amount) public virtual {\\r\\n        _spendAllowance(account, _msgSender(), amount);\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint amountA,\\r\\n        uint reserveA,\\r\\n        uint reserveB\\r\\n    ) external pure returns (uint amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint amountIn,\\r\\n        uint reserveIn,\\r\\n        uint reserveOut\\r\\n    ) external pure returns (uint amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint amountOut,\\r\\n        uint reserveIn,\\r\\n        uint reserveOut\\r\\n    ) external pure returns (uint amountIn);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(\\r\\n        uint amountOut,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n// File contracts/Token.sol\\r\\n\\r\\ncontract Token is ERC20Burnable, Ownable {\\r\\n    // ADDRESSESS -------------------------------------------------------------------------------------------\\r\\n    address public lpPair; // Liquidity token address\\r\\n    address[] public platformFeeAddresses; // service fee wallet address\\r\\n    address public treasuryAddress; // owner fee wallet address\\r\\n\\r\\n    // VALUES -----------------------------------------------------------------------------------------------\\r\\n    uint256 public swapThreshold; // swap tokens limit\\r\\n    uint256 public constant TAX_DIVISOR = 10000; // divisor | 0.0001 max presition fee\\r\\n    uint256 public maxWalletAmount; // max balance amount (Anti-whale)\\r\\n    uint256 public platformFeeAmount; // accumulated fee amount for w1\\r\\n    uint256 public preMintAmount; // pre-mint amount mint to treasury\\r\\n    uint256 public constant PLATFORM_FEE_PERCENT = 50; // platform fee percent of tx amount : 0.5%\\r\\n    uint256[] public platformFeePercents;\\r\\n    uint256 public autoLiquidityPercent; // amm percent of fee\\r\\n    uint256 public maxTransactionAmount;\\r\\n    uint256 public buyBackThreshold; // swap tokens limit\\r\\n    uint256 public buyBackPercent;\\r\\n    uint256 public maxBuyLimit;\\r\\n    uint256 public initialDelayTime; // to store the block in which the trading was enabled\\r\\n    uint256 public totalDelayTime;\\r\\n    uint256 public maxGasPriceLimit; // for store max gas price value\\r\\n    uint256 public timeDelayBetweenTx; // time wait for txs\\r\\n\\r\\n    // BOOLEANS ---------------------------------------------------------------------------------------------\\r\\n    bool public inSwap; // used for dont take fee on swaps\\r\\n    bool public gasLimitActive;\\r\\n    bool public transferDelayEnabled; // for enable / disable delay between transactions\\r\\n\\r\\n    // MAPPINGS\\r\\n    mapping(address => bool) public _isExcludedFromFee; // list of users excluded from fee\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n    mapping(address => uint256) public _holderLastTransferTimestamp; // to hold last Transfers temporarily  // todo remove\\r\\n\\r\\n    // STRUCTS ----------------------------------------------------------------------------------------------\\r\\n    struct Fees {\\r\\n        uint16 buyFee; // fee when people BUY tokens\\r\\n        uint16 sellFee; // fee when people SELL tokens\\r\\n        uint16 transferFee; // fee when people TRANSFER tokens\\r\\n    }\\r\\n\\r\\n    // OBJECTS ----------------------------------------------------------------------------------------------\\r\\n    IUniswapV2Router02 public router;\\r\\n    Fees public _feesRates; // fees rates\\r\\n\\r\\n    // MODIFIERS --------------------------------------------------------------------------------------------\\r\\n    modifier swapping() {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    // CONSTRUCTOR ------------------------------------------------------------------------------------------\\r\\n    constructor(\\r\\n        string memory tokenName,\\r\\n        string memory tokenSymbol,\\r\\n        uint256 supply,\\r\\n        uint256 preMint,\\r\\n        address[] memory addresses, // routerAddress, treasuryAddress,\\r\\n        uint16[] memory percents // burnPercent, buyFee, sellFee, maxPerWallet, maxPerTx\\r\\n    ) ERC20(tokenName, tokenSymbol) {\\r\\n        require(addresses.length == 2, \\\"Invalid argument\\\");\\r\\n        require(percents.length == 5, \\\"Invalid argument\\\");\\r\\n        require(percents[1] <= 9900 && percents[2] <= 9900, \\\"Too hight tax\\\");\\r\\n\\r\\n        // super.transferOwnership(tokenOwner);\\r\\n        treasuryAddress = addresses[1];\\r\\n\\r\\n        uint256 burnAmount = (supply * percents[0]) / TAX_DIVISOR;\\r\\n        _mint(msg.sender, supply - preMint - burnAmount);\\r\\n        if (preMint > 0) _mint(treasuryAddress, preMint);\\r\\n        if (burnAmount > 0) _mint(address(0xdead), burnAmount);\\r\\n\\r\\n        maxWalletAmount = percents[3] == 0\\r\\n            ? supply\\r\\n            : (supply * percents[3]) / TAX_DIVISOR;\\r\\n        maxTransactionAmount = percents[4] == 0\\r\\n            ? supply\\r\\n            : (supply * percents[4]) / TAX_DIVISOR;\\r\\n\\r\\n        platformFeeAddresses.push(0x7A93936c57587A5A0de1bBc0d99b61139394698C);\\r\\n        platformFeeAddresses.push(0x18bb1D7E5DD7dd0017a828dABF16472d9fD1c6aE);\\r\\n\\r\\n        platformFeePercents.push(8000);\\r\\n        platformFeePercents.push(2000);\\r\\n\\r\\n        // default fees\\r\\n        _feesRates = Fees({\\r\\n            buyFee: percents[1],\\r\\n            sellFee: percents[2],\\r\\n            transferFee: 0\\r\\n        });\\r\\n\\r\\n        router = IUniswapV2Router02(addresses[0]);\\r\\n\\r\\n        // exclude from fees\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[treasuryAddress] = true;\\r\\n        _isExcludedFromFee[platformFeeAddresses[0]] = true;\\r\\n        _isExcludedFromFee[platformFeeAddresses[1]] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n        // contract do swap when have 1k tokens balance\\r\\n        swapThreshold = 1000 ether;\\r\\n\\r\\n        autoLiquidityPercent = 8000; //80%\\r\\n        buyBackPercent = 0; //0%\\r\\n\\r\\n        buyBackThreshold = 1 ether; // buyback 1 eth\\r\\n\\r\\n        // Create a uniswap pair for this new token\\r\\n        lpPair = IUniswapV2Factory(router.factory()).createPair(\\r\\n            address(this),\\r\\n            router.WETH()\\r\\n        );\\r\\n        automatedMarketMakerPairs[lpPair] = true;\\r\\n\\r\\n        // do approve to router from owner and contract\\r\\n        _approve(owner(), address(router), type(uint256).max);\\r\\n        _approve(address(this), address(router), type(uint256).max);\\r\\n\\r\\n        maxBuyLimit = supply;\\r\\n        gasLimitActive = false;\\r\\n        // used for store max gas price limit value\\r\\n        transferDelayEnabled = false;\\r\\n        initialDelayTime = block.timestamp;\\r\\n        // used enable or disable max gas price limit\\r\\n        maxGasPriceLimit = 15000000000;\\r\\n\\r\\n        // enable / disable transfer to wallets when contract do swap tokens for busd\\r\\n        timeDelayBetweenTx = 5;\\r\\n        totalDelayTime = 3600;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This function is used to Update the Max Gas Price Limit for transactions\\r\\n     * @dev This function is used inside the tokenTransfer during the first hour of the contract\\r\\n     * @param newValue uint256 The new Max Gas Price Limit\\r\\n     */\\r\\n    function updateMaxGasPriceLimit(uint256 newValue) public onlyOwner {\\r\\n        require(\\r\\n            newValue >= 10000000000,\\r\\n            \\\"max gas price cant be lower than 10 gWei\\\"\\r\\n        );\\r\\n        maxGasPriceLimit = newValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This function is updating the value of the variable transferDelayEnabled\\r\\n     * @param newVal New value of the variable\\r\\n     */\\r\\n    function updateTransferDelayEnabled(bool newVal) external onlyOwner {\\r\\n        transferDelayEnabled = newVal;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the max amount of tokens that can be buyed in one transaction\\r\\n     * @param percent New max buy limit in wei\\r\\n     */\\r\\n    function updateMaxBuyLimit(uint256 percent) public onlyOwner {\\r\\n        maxBuyLimit = (totalSupply() * percent) / TAX_DIVISOR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the max gas limit that can be used in the transaction\\r\\n     * @param newVal New gas limit amount\\r\\n     */\\r\\n    function updateGasLimitActive(bool newVal) public onlyOwner {\\r\\n        gasLimitActive = newVal;\\r\\n    }\\r\\n\\r\\n    // To receive BNB from dexRouter when swapping\\r\\n    receive() external payable {}\\r\\n\\r\\n    // Set fees\\r\\n    function setTaxes(\\r\\n        uint16 buyFee,\\r\\n        uint16 sellFee,\\r\\n        uint16 transferFee\\r\\n    ) external virtual onlyOwner {\\r\\n        require(buyFee <= 9900 && sellFee <= 9900, \\\"Too hight tax\\\");\\r\\n        _feesRates.buyFee = buyFee;\\r\\n        _feesRates.sellFee = sellFee;\\r\\n        _feesRates.transferFee = transferFee;\\r\\n    }\\r\\n\\r\\n    // function for set buyBackThreshold\\r\\n    function setBuyBackThreshold(uint256 newThreshold) external onlyOwner {\\r\\n        buyBackThreshold = newThreshold;\\r\\n    }\\r\\n\\r\\n    // function for set buyBackPercent\\r\\n    function setBuyBackPercent(uint16 newPercent) external onlyOwner {\\r\\n        require(\\r\\n            newPercent + autoLiquidityPercent <= TAX_DIVISOR,\\r\\n            \\\"Percent cant be higher than 100%\\\"\\r\\n        );\\r\\n        buyBackPercent = newPercent;\\r\\n    }\\r\\n\\r\\n    // function for set autoLiquidityPercent\\r\\n    function setAutoLiquidityPercent(uint16 newPercent) external onlyOwner {\\r\\n        require(\\r\\n            newPercent + buyBackPercent <= TAX_DIVISOR,\\r\\n            \\\"Percent cant be higher than 100%\\\"\\r\\n        );\\r\\n        autoLiquidityPercent = newPercent;\\r\\n    }\\r\\n\\r\\n    // this function will be called every buy, sell or transfer\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        _beforeTransferCheck(from, to, amount);\\r\\n\\r\\n        if (contractMustSwap(from, to)) {\\r\\n            doSwap();\\r\\n        }\\r\\n\\r\\n        _finalizeTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function doSwap() internal swapping {\\r\\n        // Get contract tokens balance\\r\\n        uint256 numTokensToSwap = balanceOf(address(this));\\r\\n\\r\\n        // swap to team\\r\\n        if (platformFeeAmount > 0) {\\r\\n            uint256 _amount = platformFeeAmount;\\r\\n            numTokensToSwap -= platformFeeAmount;\\r\\n            platformFeeAmount = 0;\\r\\n            uint256 _remain = _amount;\\r\\n            for (uint256 i = platformFeeAddresses.length; i > 0; i--) {\\r\\n                uint256 _fee = i == 1\\r\\n                    ? _remain\\r\\n                    : (_amount * platformFeePercents[i - 1]) / TAX_DIVISOR;\\r\\n                swapTokensForNative(_fee, platformFeeAddresses[i - 1]);\\r\\n                if (i > 1) _remain -= _fee;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (numTokensToSwap > 0) {\\r\\n            // swap to contract\\r\\n            if (buyBackPercent > 0) {\\r\\n                swapTokensForNative(\\r\\n                    (numTokensToSwap * buyBackPercent) / TAX_DIVISOR,\\r\\n                    address(this)\\r\\n                );\\r\\n            }\\r\\n\\r\\n            // inject liquidity\\r\\n            if (autoLiquidityPercent > 0) {\\r\\n                autoLiquidity(\\r\\n                    (numTokensToSwap * autoLiquidityPercent) / TAX_DIVISOR\\r\\n                );\\r\\n            }\\r\\n\\r\\n            // treasury fee\\r\\n            uint256 treasuryAmount = numTokensToSwap -\\r\\n                (numTokensToSwap * (autoLiquidityPercent + buyBackPercent)) /\\r\\n                TAX_DIVISOR;\\r\\n            if (treasuryAmount > 0) {\\r\\n                swapTokensForNative(treasuryAmount, treasuryAddress);\\r\\n            }\\r\\n\\r\\n            // buy back\\r\\n            if (buyBackThreshold > 0) {\\r\\n                uint256 ethBalance = address(this).balance;\\r\\n\\r\\n                if (ethBalance > buyBackThreshold) {\\r\\n                    swapNativeForTokens(ethBalance, address(0xdead));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapNativeForTokens(uint256 nativeAmount, address to) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = router.WETH();\\r\\n        path[1] = address(this);\\r\\n        uint256 deadline = block.timestamp;\\r\\n        // uint256 amountOutIn = router.getAmountsOut(\\r\\n        //     nativeAmount,\\r\\n        //     path\\r\\n        // )[1];\\r\\n        router.swapExactETHForTokens{value: nativeAmount}(\\r\\n            0,\\r\\n            path,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapTokensForNative(uint256 tokenAmount, address to) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n        uint256 deadline = block.timestamp;\\r\\n        _approve(address(this), address(router), tokenAmount);\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _finalizeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        // by default receiver receive 100% of sended amount\\r\\n        uint256 amountReceived = amount;\\r\\n\\r\\n        // If takeFee is false there is 0% fee\\r\\n        bool takeFee = !inSwap;\\r\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        // check if we need take fee or not\\r\\n        if (takeFee) {\\r\\n            // if we need take fee\\r\\n            // calc how much we need take\\r\\n            (uint256 feeAmount1, uint256 feeAmount2) = calcBuySellTransferFee(\\r\\n                from,\\r\\n                to,\\r\\n                amount\\r\\n            );\\r\\n\\r\\n            if (feeAmount1 + feeAmount2 > 0) {\\r\\n                // we substract fee amount from recipient amount\\r\\n                amountReceived = amount - feeAmount1 - feeAmount2;\\r\\n                if (feeAmount2 > 0) platformFeeAmount += feeAmount2;\\r\\n\\r\\n                // and transfer fee to contract\\r\\n                super._transfer(from, address(this), feeAmount1 + feeAmount2);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // finally send remaining tokens to recipient\\r\\n        super._transfer(from, to, amountReceived);\\r\\n    }\\r\\n\\r\\n    function calcBuySellTransferFee(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal view virtual returns (uint256, uint256) {\\r\\n        // by default we take zero fee\\r\\n        uint256 totalFeePercent = 0;\\r\\n        uint256 feeAmount1 = 0;\\r\\n        uint256 feeAmount2 = 0;\\r\\n        bool isTransfer = false;\\r\\n\\r\\n        // BUY -> FROM == LP ADDRESS\\r\\n        if (automatedMarketMakerPairs[from]) {\\r\\n            totalFeePercent += _feesRates.buyFee;\\r\\n        }\\r\\n        // SELL -> TO == LP ADDRESS\\r\\n        else if (automatedMarketMakerPairs[to]) {\\r\\n            totalFeePercent += _feesRates.sellFee;\\r\\n        }\\r\\n        // TRANSFER\\r\\n        else {\\r\\n            totalFeePercent += _feesRates.transferFee;\\r\\n            isTransfer = true;\\r\\n        }\\r\\n\\r\\n        // CALC FEES AMOUT\\r\\n        if (totalFeePercent > 0) {\\r\\n            feeAmount1 = (amount * totalFeePercent) / TAX_DIVISOR;\\r\\n        }\\r\\n\\r\\n        if (!isTransfer) {\\r\\n            feeAmount2 = (amount * PLATFORM_FEE_PERCENT) / TAX_DIVISOR;\\r\\n        }\\r\\n\\r\\n        return (feeAmount1, feeAmount2);\\r\\n    }\\r\\n\\r\\n    function autoLiquidity(uint256 tokenAmount) public {\\r\\n        // split the contract balance into halves\\r\\n        uint256 half = tokenAmount / 2;\\r\\n\\r\\n        // capture the contract's current ETH balance.\\r\\n        // this is so that we can capture exactly the amount of ETH that the\\r\\n        // swap creates, and not make the liquidity event include any ETH that\\r\\n        // has been manually sent to the contract\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        swapTokensForNative(half, address(this));\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = address(this).balance - initialBalance;\\r\\n\\r\\n        // add liquidity to uniswap\\r\\n        addLiquidity(half, newBalance);\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        uint256 deadline = block.timestamp;\\r\\n        _approve(address(this), address(router), type(uint256).max);\\r\\n        router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            address(this), // send lp tokens to owner\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _beforeTransferCheck(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(\\r\\n            from != address(0),\\r\\n            \\\"ERC20: transfer from the ZERO_ADDRESS address\\\"\\r\\n        );\\r\\n        require(\\r\\n            to != address(0),\\r\\n            \\\"ERC20: transfer to the ZERO_ADDRESS address\\\"\\r\\n        );\\r\\n        require(\\r\\n            amount > 0,\\r\\n            \\\"Transfer amount must be greater than ZERO_ADDRESS\\\"\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            transferDelayEnabled &&\\r\\n            block.timestamp < (initialDelayTime + totalDelayTime)\\r\\n        ) {\\r\\n            // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\\r\\n            if (\\r\\n                from != owner() &&\\r\\n                to != address(router) &&\\r\\n                to != address(lpPair) &&\\r\\n                to != address(this)\\r\\n            ) {\\r\\n                // in the first one hour, a maximum of XX BUSD purchase is adjustable (TAX_DIVISOR BUSD is the default value)\\r\\n                if (maxBuyLimit > 0) {\\r\\n                    require(amount <= maxBuyLimit, \\\"Max Buy Limit.\\\");\\r\\n                }\\r\\n\\r\\n                // only use to prevent sniper buys in the first blocks.\\r\\n                if (gasLimitActive) {\\r\\n                    require(\\r\\n                        tx.gasprice <= maxGasPriceLimit,\\r\\n                        \\\"Gas price exceeds limit.\\\"\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                // delay between tx\\r\\n                require(\\r\\n                    _holderLastTransferTimestamp[msg.sender] <= block.timestamp,\\r\\n                    \\\"_transfer:: Transfer Delay enabled.\\\"\\r\\n                );\\r\\n                _holderLastTransferTimestamp[msg.sender] =\\r\\n                    block.timestamp +\\r\\n                    timeDelayBetweenTx;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            from != owner() &&\\r\\n            to != owner() &&\\r\\n            to != address(0) &&\\r\\n            to != address(0xdead) &&\\r\\n            to != address(this) &&\\r\\n            !inSwap\\r\\n        ) {\\r\\n            // BUY -> FROM == LP ADDRESS\\r\\n            if (automatedMarketMakerPairs[from]) {\\r\\n                require(\\r\\n                    amount <= maxTransactionAmount,\\r\\n                    \\\"Buy transfer amount exceeds the maxTransactionAmount.\\\"\\r\\n                );\\r\\n                require(\\r\\n                    amount + balanceOf(to) <= maxWalletAmount,\\r\\n                    \\\"Max wallet exceeded\\\"\\r\\n                );\\r\\n            }\\r\\n            // SELL -> TO == LP ADDRESS\\r\\n            else if (automatedMarketMakerPairs[to]) {\\r\\n                require(\\r\\n                    amount <= maxTransactionAmount,\\r\\n                    \\\"Sell transfer amount exceeds the maxTransactionAmount.\\\"\\r\\n                );\\r\\n            }\\r\\n            // TRANSFER\\r\\n            else {\\r\\n                require(\\r\\n                    amount + balanceOf(to) <= maxWalletAmount,\\r\\n                    \\\"Max wallet exceeded\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function contractMustSwap(\\r\\n        address from,\\r\\n        address to\\r\\n    ) internal view virtual returns (bool) {\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        return\\r\\n            contractTokenBalance >= swapThreshold &&\\r\\n            !inSwap &&\\r\\n            from != lpPair &&\\r\\n            balanceOf(lpPair) > 0 &&\\r\\n            !_isExcludedFromFee[to] &&\\r\\n            !_isExcludedFromFee[from];\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFee(\\r\\n        address account\\r\\n    ) public view virtual returns (bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(\\r\\n        address account,\\r\\n        bool val\\r\\n    ) public virtual onlyOwner {\\r\\n        _isExcludedFromFee[account] = val;\\r\\n    }\\r\\n\\r\\n    function setSwapThreshold(uint256 value) public virtual onlyOwner {\\r\\n        swapThreshold = value;\\r\\n    }\\r\\n\\r\\n    function setMaxWalletAmount(uint256 percent) public virtual onlyOwner {\\r\\n        maxWalletAmount = (totalSupply() * percent) / TAX_DIVISOR;\\r\\n    }\\r\\n\\r\\n    function setMaxTransactionAmount(uint256 percent) public virtual onlyOwner {\\r\\n        maxTransactionAmount = (totalSupply() * percent) / TAX_DIVISOR;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual override onlyOwner {\\r\\n        require(\\r\\n            _feesRates.buyFee < 4500 && _feesRates.sellFee < 4500,\\r\\n            \\\"Too hight tax, can't renounce ownership.\\\"\\r\\n        );\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
    "etherscan_verified": true
}