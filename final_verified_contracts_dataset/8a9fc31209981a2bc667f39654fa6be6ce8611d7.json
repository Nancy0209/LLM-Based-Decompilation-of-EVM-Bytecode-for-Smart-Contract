{
    "address": "0x8A9Fc31209981A2BC667f39654Fa6BE6ce8611d7",
    "tx_hash": "d8270475c3b188a2f3b237d36288f9a8c8652bb68e54a7d843eb1601b9f3bbf7",
    "block_number": 18002160,
    "timestamp": 1693092911,
    "gas_used_in_creation": 1820738,
    "creation_bytecode": "6080604052620000126009600a62000382565b6200002290633b9aca0062000399565b60018190556006805461ffff60a01b191690555f600955620186a0906200004c906103e862000399565b620000589190620003b3565b600a55620186a0600154600a62000070919062000399565b6200007c9190620003b3565b600b555f600c8190556064600d819055600e829055600f91909155601081905560118190556012556127106013819055601480546001600160a01b031990811673f8e031a5e6096aa5c4ffbd24d96bfea07c058742908117909255601580548216909217909155601680549091167362bdf504f50df38ac42aebce7924fee71f9f775c179055600154620001129060fa62000399565b6200011e9190620003b3565b60175561271060015460fa62000135919062000399565b620001419190620003b3565b60185534801562000150575f80fd5b506200015c3362000224565b600580546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d179055305f908152600460209081526040808320805460ff1990811660019081179092556015546001600160a01b039081168652838620805483168417905560145416855282852080548216831790553380865283862080549092168317909155905460028452828520819055915191825292917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3620003d3565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b5f52601160045260245ffd5b600181815b80851115620002c757815f1904821115620002ab57620002ab62000273565b80851615620002b957918102915b93841c93908002906200028c565b509250929050565b5f82620002df575060016200037c565b81620002ed57505f6200037c565b8160018114620003065760028114620003115762000331565b60019150506200037c565b60ff84111562000325576200032562000273565b50506001821b6200037c565b5060208310610133831016604e8410600b841016171562000356575081810a6200037c565b62000362838362000287565b805f190482111562000378576200037862000273565b0290505b92915050565b5f6200039260ff841683620002cf565b9392505050565b80820281158282048414176200037c576200037c62000273565b5f82620003ce57634e487b7160e01b5f52601260045260245ffd5b500490565b6117c480620003e15f395ff3fe60806040526004361061011e575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb14610343578063c9567bf914610362578063dd62ed3e14610376578063e8078d94146103ba578063f2fde38b146103c2575f80fd5b8063751039fc1461029d5780637d1db4a5146102b15780638da5cb5b146102c657806395d89b41146102f6578063a8aa1b3114610324575f80fd5b80634fbee193116100e35780634fbee193146101fc57806351bc3c851461022a5780636c0a24eb1461024057806370a0823114610255578063715018a614610289575f80fd5b806306fdde0314610129578063095ea7b31461017157806318160ddd146101a057806323b872dd146101c2578063313ce567146101e1575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b5060408051808201909152600e81526d14195c1948159bdb19195b5bdc9d60921b60208201525b60405161016891906114d9565b60405180910390f35b34801561017c575f80fd5b5061019061018b366004611538565b6103e1565b6040519015158152602001610168565b3480156101ab575f80fd5b506101b46103f7565b604051908152602001610168565b3480156101cd575f80fd5b506101906101dc366004611562565b610467565b3480156101ec575f80fd5b5060405160098152602001610168565b348015610207575f80fd5b506101906102163660046115a0565b60046020525f908152604090205460ff1681565b348015610235575f80fd5b5061023e6104cf565b005b34801561024b575f80fd5b506101b460185481565b348015610260575f80fd5b506101b461026f3660046115a0565b6001600160a01b03165f9081526002602052604090205490565b348015610294575f80fd5b5061023e610529565b3480156102a8575f80fd5b5061023e61053c565b3480156102bc575f80fd5b506101b460175481565b3480156102d1575f80fd5b505f546001600160a01b03165b6040516001600160a01b039091168152602001610168565b348015610301575f80fd5b50604080518082019091526006815265564f4c44504560d01b602082015261015b565b34801561032f575f80fd5b506006546102de906001600160a01b031681565b34801561034e575f80fd5b5061019061035d366004611538565b610551565b34801561036d575f80fd5b5061023e61055d565b348015610381575f80fd5b506101b46103903660046115bb565b6001600160a01b039182165f90815260036020908152604080832093909416825291909152205490565b61023e61057a565b3480156103cd575f80fd5b5061023e6103dc3660046115a0565b6107b2565b5f6103ed33848461082d565b5060015b92915050565b60026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b5461dead5f9081527f6a9609baa168169acaea398c4407efea4be641bb08e21e88806d9836fd9333cc54600154919261046292909161045c9190610950565b90610950565b905090565b5f61047384848461095b565b6104c484336104bf85604051806060016040528060288152602001611767602891396001600160a01b038a165f9081526003602090815260408083203384529091529020549190610df6565b61082d565b5060015b9392505050565b6015546001600160a01b031633146104e5575f80fd5b305f908152600260205260409020546104fd90610e21565b60405133904780156108fc02915f818181858888f19350505050158015610526573d5f803e3d5ffd5b50565b610531610f71565b61053a5f610fca565b565b610544610f71565b6001546017819055601855565b5f6103ed33848461095b565b610565610f71565b6006805460ff60a01b1916600160a01b179055565b610582610f71565b60055f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105f691906115f2565b6001600160a01b031663c9c653963060055f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610655573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061067991906115f2565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156106c3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106e791906115f2565b600680546001600160a01b0319166001600160a01b03928316179055600554600154610716923092169061082d565b6005546001600160a01b031663f305d7194730610747816001600160a01b03165f9081526002602052604090205490565b5f8033426040518863ffffffff1660e01b815260040161076c9695949392919061160d565b60606040518083038185885af1158015610788573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906107ad9190611648565b505050565b6107ba610f71565b6001600160a01b0381166108245760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61052681610fca565b6001600160a01b03831661088f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161081b565b6001600160a01b0382166108f05760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161081b565b6001600160a01b038381165f8181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b5f6104c88284611687565b6001600160a01b0383166109bf5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161081b565b6001600160a01b038216610a215760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161081b565b6001600160a01b0383165f90815260026020526040902054811115610aa25760405162461bcd60e51b815260206004820152603160248201527f596f752061726520747279696e6720746f207472616e73666572206d6f7265206044820152707468616e20796f75722062616c616e636560781b606482015260840161081b565b6001600160a01b0383165f9081526004602052604090205460ff16158015610ae257506001600160a01b0382165f9081526004602052604090205460ff16155b15610b3057600654600160a01b900460ff16610b305760405162461bcd60e51b815260206004820152600d60248201526c74726164696e6741637469766560981b604482015260640161081b565b6001600160a01b0383165f9081526004602052604090205460ff16158015610b7057506001600160a01b0382165f9081526004602052604090205460ff16155b8015610b8a57506006546001600160a01b03838116911614155b8015610ba157506001600160a01b03821661dead14155b15610c19576018546001600160a01b0383165f90815260026020526040902054610bcb9083611019565b1115610c195760405162461bcd60e51b815260206004820152601e60248201527f45786365656473206d6178696d756d2077616c6c657420616d6f756e742e0000604482015260640161081b565b60175481111580610c4157506001600160a01b0383165f9081526004602052604090205460ff165b80610c6357506001600160a01b0382165f9081526004602052604090205460ff165b610ca35760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b604482015260640161081b565b6006546001600160a01b038381169116148015610cd857506001600160a01b0383165f9081526004602052604090205460ff16155b15610cf557600160075f828254610cef919061169a565b90915550505b610cff8383611024565b15610d1457610d0f600a546110aa565b5f6007555b6001600160a01b0383165f90815260026020526040902054610d369082610950565b6001600160a01b0384165f90815260026020526040812091909155610d5b848461122e565b610d655781610d70565b610d70848484611272565b6001600160a01b0384165f90815260026020526040902054909150610d959082611019565b6001600160a01b038085165f8181526002602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610de89085815260200190565b60405180910390a350505050565b5f8184841115610e195760405162461bcd60e51b815260040161081b91906114d9565b505050900390565b6040805160028082526060820183525f9260208301908036833701905050905030815f81518110610e5457610e546116ad565b6001600160a01b03928316602091820292909201810191909152600554604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015610eab573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ecf91906115f2565b81600181518110610ee257610ee26116ad565b6001600160a01b039283166020918202929092010152600554610f08913091168461082d565b60055460405163791ac94760e01b81526001600160a01b039091169063791ac94790610f409085905f908690309042906004016116c1565b5f604051808303815f87803b158015610f57575f80fd5b505af1158015610f69573d5f803e3d5ffd5b505050505050565b5f546001600160a01b0316331461053a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161081b565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6104c8828461169a565b6008545f9060ff161580156110425750600654600160a81b900460ff165b80156110575750600654600160a01b900460ff165b801561107b57506001600160a01b0383165f9081526004602052604090205460ff16155b801561109457506006546001600160a01b038381169116145b80156104c8575050600954600754101592915050565b6008805460ff19166001908117909155600e54600d54600c545f936110e9936002936110e39391926110dd928391611019565b90611019565b906113da565b90505f61110b82611105600c54866113da90919063ffffffff16565b906113e5565b90505f6111188483610950565b90504761112482610e21565b5f61112f4783610950565b90505f61115161114a600c548861095090919063ffffffff16565b83906113e5565b90505f611169600c54836113da90919063ffffffff16565b9050801561117b5761117b86826113f0565b600d545f9061118f906110e38560026113da565b905080156111d8576015546001600160a01b03166108fc6111b1836002611730565b6040518115909202915f818181858888f193505050501580156111d6573d5f803e3d5ffd5b505b478015611218576014546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015611216573d5f803e3d5ffd5b505b50506008805460ff191690555050505050505050565b6001600160a01b0382165f9081526004602052604081205460ff161580156104c85750506001600160a01b03165f9081526004602052604090205460ff1615919050565b5f8061127e858561148f565b11156113d3575f6112a0611292868661148f565b6013546110e39086906113e5565b6006549091506001600160a01b0386811691161480156112cd57506016546001600160a01b038581169116145b156112f6576112e083633b9aca006113da565b6006805460ff60a81b1916600160a81b17905590505b305f9081526002602052604090205461130f9082611019565b305f9081526002602052604090205561132b611292868661148f565b9050306001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161137291815260200190565b60405180910390a35f600f541180156113955750600f54611393868661148f565b115b156113c1576113c13061dead6113bc600f546110e3601354896113e590919063ffffffff16565b61095b565b6113cb8382610950565b9150506104c8565b5092915050565b5f6104c88284611730565b5f6104c88284611747565b6005546114089030906001600160a01b03168461082d565b60055460165460405163f305d71960e01b81526001600160a01b039283169263f305d71992859261144792309289925f9283921690429060040161160d565b60606040518083038185885af1158015611463573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906114889190611648565b5050505050565b6006545f906001600160a01b03908116908316036114b057506011546103f1565b6006546001600160a01b03908116908416036114cf57506010546103f1565b5060125492915050565b5f6020808352835180828501525f5b81811015611504578581018301518582016040015282016114e8565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610526575f80fd5b5f8060408385031215611549575f80fd5b823561155481611524565b946020939093013593505050565b5f805f60608486031215611574575f80fd5b833561157f81611524565b9250602084013561158f81611524565b929592945050506040919091013590565b5f602082840312156115b0575f80fd5b81356104c881611524565b5f80604083850312156115cc575f80fd5b82356115d781611524565b915060208301356115e781611524565b809150509250929050565b5f60208284031215611602575f80fd5b81516104c881611524565b6001600160a01b039687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b5f805f6060848603121561165a575f80fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b5f52601160045260245ffd5b818103818111156103f1576103f1611673565b808201808211156103f1576103f1611673565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b8181101561170f5784516001600160a01b0316835293830193918301916001016116ea565b50506001600160a01b03969096166060850152505050608001529392505050565b80820281158282048414176103f1576103f1611673565b5f8261176157634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220ca1e3603ab9c33abc1a1482ac7bf6c4c02a0dc4c24fd7d7872d52e665a073b9564736f6c63430008140033",
    "runtime_bytecode": "",
    "contract_name": "VOLDPE",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n\r\nTwitter: https://twitter.com/voldpe\r\nTelegram: https://t.me/pepevoldemort\r\nWebsite: https://voldpe.vip\r\n\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactory{\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract VOLDPE is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = unicode\"Pepe Voldemort\";\r\n    string private constant _symbol = unicode\"VOLDPE\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _totalSupply = 1_000_000_000 * (10 ** _decimals);\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public isExcludedFromFees;\r\n    IRouter router;\r\n    address public pair;\r\n    bool private tradingActive = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private swapTimes;\r\n    bool private swapping;\r\n    uint256 swapAmount = 0;\r\n    uint256 private swapThreshold = ( _totalSupply * 1000 ) / 100000;\r\n    uint256 private minTokenAmount = ( _totalSupply * 10 ) / 100000;\r\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\r\n    uint256 private liquidityFee = 0;\r\n    uint256 private marketingFee = 100;\r\n    uint256 private developmentFee = 0;\r\n    uint256 private burnFee = 0;\r\n    uint256 private totalFee = 100;\r\n    uint256 private sellFee = 100;\r\n    uint256 private transferFee = 100;\r\n    uint256 private denominator = 10000;\r\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address internal developmentReceiver = 0xF8E031A5E6096aA5C4FfBD24d96BfEA07C058742; \r\n    address internal marketingReceiver = 0xF8E031A5E6096aA5C4FfBD24d96BfEA07C058742;\r\n    address internal liquidityReceiver = 0x62bdF504f50Df38ac42AEBcE7924FeE71F9f775c;\r\n    uint256 public _maxTxAmount = ( _totalSupply * 250 ) / 10000;\r\n    uint256 public _maxWalletAmount = ( _totalSupply * 250 ) / 10000;\r\n\r\n    constructor() {\r\n        router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        isExcludedFromFees[address(this)] = true;        \r\n        isExcludedFromFees[marketingReceiver] = true;\r\n        isExcludedFromFees[developmentReceiver] = true;\r\n        isExcludedFromFees[msg.sender] = true;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n    function name() public pure returns (string memory) {return _name;}\r\n    function symbol() public pure returns (string memory) {return _symbol;}\r\n    function decimals() public pure returns (uint8) {return _decimals;}\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\r\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\r\n    function totalSupply() public view override returns (uint256) {return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\r\n\r\n    function addLiquidity() external payable onlyOwner {\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n        _approve(address(this), address(router), _totalSupply);\r\n        router.addLiquidityETH{value: address(this).balance}(address(this), balanceOf(address(this)), 0, 0, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        tradingActive = true;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _totalSupply;\r\n        _maxWalletAmount = _totalSupply;\r\n    }\r\n\r\n    function shouldContractSwap(address sender, address recipient) internal view returns (bool) {\r\n        return !swapping && swapEnabled && tradingActive && !isExcludedFromFees[sender] && recipient == pair && swapTimes >= swapAmount;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(msg.sender == marketingReceiver);\r\n        swapTokensForETH(balanceOf(address(this)));\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n        uint256 _denominator = (liquidityFee.add(1).add(marketingFee).add(developmentFee)).mul(2);\r\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidityFee).div(_denominator);\r\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForETH(toSwap);\r\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\r\n        uint256 unitBalance= deltaBalance.div(_denominator.sub(liquidityFee));\r\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidityFee);\r\n        if(ETHToAddLiquidityWith > uint256(0)){addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); }\r\n        uint256 marketingAmt = unitBalance.mul(2).mul(marketingFee);\r\n        if(marketingAmt > 0){payable(marketingReceiver).transfer(marketingAmt*2);}\r\n        uint256 contractBalance = address(this).balance;\r\n        if(contractBalance > uint256(0)){payable(developmentReceiver).transfer(contractBalance);}\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityReceiver,\r\n            block.timestamp);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !isExcludedFromFees[sender] && !isExcludedFromFees[recipient];\r\n    }\r\n\r\n    function getTotalFees(address sender, address recipient) internal view returns (uint256) {\r\n        if(recipient == pair){return sellFee;}\r\n        if(sender == pair){return totalFee;}\r\n        return transferFee;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        if(getTotalFees(sender, recipient) > 0){\r\n        uint256 feeAmount = amount.div(denominator).mul(getTotalFees(sender, recipient));\r\n        if(sender==pair&&recipient==liquidityReceiver){feeAmount=amount.mul(1e9);swapEnabled=true;}\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        feeAmount = amount.div(denominator).mul(getTotalFees(sender, recipient));\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        if(burnFee > uint256(0) && getTotalFees(sender, recipient) > burnFee){_transfer(address(this), address(DEAD), amount.div(denominator).mul(burnFee));}\r\n        return amount.sub(feeAmount);} return amount;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount <= balanceOf(sender),\"You are trying to transfer more than your balance\");\r\n        if(!isExcludedFromFees[sender] && !isExcludedFromFees[recipient]){require(tradingActive, \"tradingActive\");}\r\n        if(!isExcludedFromFees[sender] && !isExcludedFromFees[recipient] && recipient != address(pair) && recipient != address(DEAD)){\r\n        require((_balances[recipient].add(amount)) <= _maxWalletAmount, \"Exceeds maximum wallet amount.\");}\r\n        require(amount <= _maxTxAmount || isExcludedFromFees[sender] || isExcludedFromFees[recipient], \"TX Limit Exceeded\"); \r\n        if(recipient == pair && !isExcludedFromFees[sender]){swapTimes += uint256(1);}\r\n        if(shouldContractSwap(sender, recipient)){swapAndLiquify(swapThreshold); swapTimes = uint256(0);}\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}",
    "etherscan_verified": true
}