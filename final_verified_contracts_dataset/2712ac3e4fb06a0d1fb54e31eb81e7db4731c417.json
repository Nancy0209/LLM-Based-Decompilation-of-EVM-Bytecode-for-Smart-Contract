{
    "address": "0x2712ac3E4Fb06A0d1FB54E31eB81e7db4731c417",
    "tx_hash": "3c1e0a13aebc1d460e76cbb19d83728723d662c9fd7f6471233105a3a61a5225",
    "block_number": 18002888,
    "timestamp": 1693101695,
    "gas_used_in_creation": 4827238,
    "creation_bytecode": "608060405264e8d4a510006005556404a817c80060068190556007556329b9270060085566470de4df8200006009556001600a818155600b8290556003600c8190556000600d55600e839055600f92909255601091909155601155601654601255601754601355601854601455601954601555601c80546001600160a01b03199081167357e9e4e39452323aab3b226ed645297c5d98f88717909155601d8054821661dead179055601e80549091167343d7e65b8ff49698d9550a7f315c87e67344fb591790556020805461ffff60a01b19169055348015620000e157600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350601f80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556040805163c45a015560e01b81529051829163c45a01559160048083019260209291908290030181865afa15801562000189573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001af9190620003d7565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002239190620003d7565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801562000271573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002979190620003d7565b602080546001600160a01b0319166001600160a01b039290921691909117905560055460026000620002c63390565b6001600160a01b03166001600160a01b031681526020019081526020016000208190555060016004600062000300620003c860201b60201c565b6001600160a01b03908116825260208083019390935260409182016000908120805495151560ff19968716179055601c54821681526004909352818320805485166001908117909155601d549091168352818320805485168217905530835291208054909216179055620003713390565b6001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600554604051620003b991815260200190565b60405180910390a35062000409565b6000546001600160a01b031690565b600060208284031215620003ea57600080fd5b81516001600160a01b03811681146200040257600080fd5b9392505050565b611f5980620004196000396000f3fe6080604052600436106102295760003560e01c80636c0a24eb11610123578063d3e6cee0116100ab578063e632313c1161006f578063e632313c14610638578063f2fde38b14610658578063f429389014610678578063fc588c041461068d578063fd01bd4c146106ad57600080fd5b8063d3e6cee01461059b578063d89135cd146105b1578063d9f7e4df146105c6578063dc903ba1146105dc578063dd62ed3e146105f257600080fd5b80638ea78153116100f25780638ea78153146104f657806395d89b411461051757806398620d7614610545578063a9059cbb14610565578063af465a271461058557600080fd5b80636c0a24eb1461047757806370a082311461048d578063715018a6146104c35780638da5cb5b146104d857600080fd5b806327a14fc2116101b157806351bc3c851161017557806351bc3c851461040c5780635dbc2fe11461042157806363a640ff14610436578063653092fd1461044c57806366bf686e1461046157600080fd5b806327a14fc2146103785780632e8fa8211461039a578063313ce567146103b057806336cf7c87146103cc57806349bd5a5e146103ec57600080fd5b80631694505e116101f85780631694505e146102df57806318160ddd14610317578063233296f01461032c57806323b872dd1461034257806323bbf9e71461036257600080fd5b806306ab002a1461023557806306fdde031461025e578063095ea7b3146102995780630cdf2187146102c957600080fd5b3661023057005b600080fd5b34801561024157600080fd5b5061024b600c5481565b6040519081526020015b60405180910390f35b34801561026a57600080fd5b5060408051808201909152600981526829b434b090213ab93760b91b60208201525b6040516102559190611be4565b3480156102a557600080fd5b506102b96102b4366004611c4e565b6106c3565b6040519015158152602001610255565b3480156102d557600080fd5b5061024b600e5481565b3480156102eb57600080fd5b50601f546102ff906001600160a01b031681565b6040516001600160a01b039091168152602001610255565b34801561032357600080fd5b5060055461024b565b34801561033857600080fd5b5061024b60075481565b34801561034e57600080fd5b506102b961035d366004611c7a565b6106da565b34801561036e57600080fd5b5061024b600a5481565b34801561038457600080fd5b50610398610393366004611cbb565b610743565b005b3480156103a657600080fd5b5061024b60085481565b3480156103bc57600080fd5b5060405160068152602001610255565b3480156103d857600080fd5b50601d546102ff906001600160a01b031681565b3480156103f857600080fd5b506020546102ff906001600160a01b031681565b34801561041857600080fd5b506103986107dc565b34801561042d57600080fd5b5061039861081e565b34801561044257600080fd5b5061024b600d5481565b34801561045857600080fd5b5061039861085d565b34801561046d57600080fd5b5061024b60105481565b34801561048357600080fd5b5061024b60065481565b34801561049957600080fd5b5061024b6104a8366004611cd4565b6001600160a01b031660009081526002602052604090205490565b3480156104cf57600080fd5b50610398610884565b3480156104e457600080fd5b506000546001600160a01b03166102ff565b34801561050257600080fd5b506020546102b990600160a81b900460ff1681565b34801561052357600080fd5b5060408051808201909152600581526429b434b0a160d91b602082015261028c565b34801561055157600080fd5b50610398610560366004611cbb565b6108f8565b34801561057157600080fd5b506102b9610580366004611c4e565b61091d565b34801561059157600080fd5b5061024b60055481565b3480156105a757600080fd5b5061024b60115481565b3480156105bd57600080fd5b50601a5461024b565b3480156105d257600080fd5b5061024b600f5481565b3480156105e857600080fd5b5061024b600b5481565b3480156105fe57600080fd5b5061024b61060d366004611cf1565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b34801561064457600080fd5b50610398610653366004611cbb565b61092a565b34801561066457600080fd5b50610398610673366004611cd4565b61094f565b34801561068457600080fd5b506103986109e7565b34801561069957600080fd5b506103986106a8366004611cbb565b610a17565b3480156106b957600080fd5b5061024b601a5481565b60006106d0338484610a88565b5060015b92915050565b60006106e7848484610bac565b610739843361073485604051806060016040528060288152602001611efc602891396001600160a01b038a1660009081526003602090815260408083203384529091529020549190611156565b610a88565b5060019392505050565b601c546001600160a01b0316336001600160a01b03161461076357600080fd5b6005546107719060c8611190565b81116107d75760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d7573742062652067726561746572207468616e20302e3525604482015269206f6620737570706c7960b01b60648201526084015b60405180910390fd5b600655565b601c546001600160a01b0316336001600160a01b0316146107fc57600080fd5b30600090815260026020526040902054801561081b5761081b816111d9565b50565b6000546001600160a01b031633146108485760405162461bcd60e51b81526004016107ce90611d2a565b6020805460ff60a81b1916600160a81b179055565b601c546001600160a01b0316336001600160a01b03161461087d57600080fd5b6000601155565b6000546001600160a01b031633146108ae5760405162461bcd60e51b81526004016107ce90611d2a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b601c546001600160a01b0316336001600160a01b03161461091857600080fd5b600955565b60006106d0338484610bac565b601c546001600160a01b0316336001600160a01b03161461094a57600080fd5b600855565b6000546001600160a01b031633146109795760405162461bcd60e51b81526004016107ce90611d2a565b6001600160a01b0381166109de5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107ce565b61081b81611355565b601c546001600160a01b0316336001600160a01b031614610a0757600080fd5b47801561081b5761081b816113a5565b6402540be400811015610a635760405162461bcd60e51b81526020600482015260146024820152733732b3b0ba34bb329033b437b9ba103934b232b960611b60448201526064016107ce565b601c546001600160a01b0316336001600160a01b031614610a8357600080fd5b600755565b6001600160a01b038316610aea5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107ce565b6001600160a01b038216610b4b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016107ce565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610c105760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016107ce565b6001600160a01b038216610c725760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016107ce565b60008111610cd45760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016107ce565b6001600160a01b0383166000908152601b602052604090205460ff16158015610d1657506001600160a01b0382166000908152601b602052604090205460ff16155b610d1f57600080fd5b6001610d336000546001600160a01b031690565b6001600160a01b0316846001600160a01b031614158015610d6257506000546001600160a01b03848116911614155b8015610d7757506001600160a01b0384163014155b8015610d8c57506001600160a01b0383163014155b156110df576020546001600160a01b038581169116148015610dbc5750601f546001600160a01b03848116911614155b8015610e0457506001600160a01b03841660009081526004602052604090205460ff161580610e0457506001600160a01b03831660009081526004602052604090205460ff16155b15610efe57600654610e3583610e2f866001600160a01b031660009081526002602052604090205490565b906113e3565b1115610e975760405162461bcd60e51b815260206004820152602b60248201527f596f7520617265206265696e67206772656564792e20457863656564696e672060448201526a26b0bc102bb0b63632ba1760a91b60648201526084016107ce565b600754821115610efe5760405162461bcd60e51b815260206004820152602c60248201527f536c6f7720646f776e2062756464792e2e2e74686572652069732061206d617860448201526b103a3930b739b0b1ba34b7b760a11b60648201526084016107ce565b6020546001600160a01b038581169116148015610f295750601f546001600160a01b03848116911614155b8015610f4e57506001600160a01b0383166000908152601b602052604090205460ff16155b8015610f7357506001600160a01b0384166000908152601b602052604090205460ff16155b15610f9157600a54601655600b54601755600c54601855600d546019555b6020546001600160a01b038481169116148015610fbc5750601f546001600160a01b03858116911614155b8015610fe157506001600160a01b0383166000908152601b602052604090205460ff16155b801561100657506001600160a01b0384166000908152601b602052604090205460ff16155b1561102457600e54601655600f546017556010546018556011546019555b602054600160a01b900460ff1615801561104c57506020546001600160a01b03858116911614155b156110df57306000908152600260205260409020546008548111156110745761107481611442565b6020544790600160a81b900460ff161580156110905750600081115b156110a35761109e476113a5565b6110dc565b602054600160a81b900460ff1680156110bd575060095481115b156110dc5760006110cf826002611190565b90506110da816114dc565b505b50505b6001600160a01b03841660009081526004602052604090205460ff168061111e57506001600160a01b03831660009081526004602052604090205460ff165b15611127575060005b611133848484846114eb565b611150601254601655601354601755601454601855601554601955565b50505050565b6000818484111561117a5760405162461bcd60e51b81526004016107ce9190611be4565b5060006111878486611d75565b95945050505050565b60006111d283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506117c9565b9392505050565b6020805460ff60a01b1916600160a01b1781556040805160028082526060820183526000939192909183019080368337019050509050308160008151811061122357611223611d8c565b6001600160a01b03928316602091820292909201810191909152601f54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a09190611da2565b816001815181106112b3576112b3611d8c565b6001600160a01b039283166020918202929092010152601f546112d99130911684610a88565b601f5460405163791ac94760e01b81526001600160a01b039091169063791ac94790611312908590600090869030904290600401611e03565b600060405180830381600087803b15801561132c57600080fd5b505af1158015611340573d6000803e3d6000fd5b50506020805460ff60a01b1916905550505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b601c546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156113df573d6000803e3d6000fd5b5050565b6000806113f08385611e3f565b9050838110156111d25760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016107ce565b6020805460ff60a01b1916600160a01b17905560165460195460185460175460009361148d9361147a939192610e2f928391906113e3565b60165461148790856117f7565b90611190565b9050600061149c826002611190565b905060006114aa8483611879565b9050476114b6826111d9565b60006114d083611487866114ca4787611879565b906117f7565b905061134084826118bb565b801561081b5761081b8161196f565b806114f8576114f8611ac3565b61152a6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6115446064611487601754866117f790919063ffffffff16565b602082015260165461155e906064906114879086906117f7565b8152601854611575906064906114879086906117f7565b604082015260195461158f906064906114879086906117f7565b606082018190528151602083015160408401516115bd936115b7929183919082908a90611879565b90611879565b608082015260208101516000906115d5908590611879565b90506115e5868360200151611b1e565b6001600160a01b0386166000908152600260205260409020546116089082611879565b6001600160a01b038088166000908152600260205260408082209390935560808501519188168152919091205461163e916113e3565b6001600160a01b0386166000908152600260209081526040909120919091558251908301516116999161167191906113e3565b606084015160408086015130600090815260026020529190912054610e2f92918391906113e3565b3060009081526002602090815260409091209190915554600160a81b900460ff1680156116d457506020546001600160a01b03878116911614155b80156116e957506001600160a01b0386163014155b80156117035750601f546001600160a01b03878116911614155b80156117335750601f546001600160a01b038681169116148061173357506020546001600160a01b038681169116145b15611753576020805490830151611753916001600160a01b031690611b1e565b846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846080015160405161179c91815260200190565b60405180910390a36117c1601254601655601354601755601454601855601554601955565b505050505050565b600081836117ea5760405162461bcd60e51b81526004016107ce9190611be4565b5060006111878486611e57565b600082600003611809575060006106d4565b60006118158385611e79565b9050826118228583611e57565b146111d25760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016107ce565b60006111d283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611156565b601f546118d39030906001600160a01b031684610a88565b601f54601c5460405163f305d71960e01b81523060048201526024810185905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af1158015611943573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906119689190611e98565b5050505050565b6040805160028082526060820183526000926020830190803683375050601f54604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa1580156119d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fd9190611da2565b81600081518110611a1057611a10611d8c565b6001600160a01b039283166020918202929092010152601e54825191169082906001908110611a4157611a41611d8c565b6001600160a01b039283166020918202929092010152601f54601d5460405163b6f9de9560e01b81529183169263b6f9de95928692611a8d926000928892909116904290600401611ec6565b6000604051808303818588803b158015611aa657600080fd5b505af1158015611aba573d6000803e3d6000fd5b50505050505050565b601754158015611ad35750601654155b8015611adf5750601854155b8015611aeb5750601954155b15611af257565b601780546013556016805460125560188054601455601980546015556000938490559183905582905555565b6001600160a01b038216600090815260026020526040902054811115611b4357600080fd5b6001600160a01b038216600090815260026020526040902054611b669082611879565b6001600160a01b038316600090815260026020526040902055600554611b8c9082611879565b600555601a54611b9c90826113e3565b601a556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b81811015611c1157858101830151858201604001528201611bf5565b81811115611c23576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461081b57600080fd5b60008060408385031215611c6157600080fd5b8235611c6c81611c39565b946020939093013593505050565b600080600060608486031215611c8f57600080fd5b8335611c9a81611c39565b92506020840135611caa81611c39565b929592945050506040919091013590565b600060208284031215611ccd57600080fd5b5035919050565b600060208284031215611ce657600080fd5b81356111d281611c39565b60008060408385031215611d0457600080fd5b8235611d0f81611c39565b91506020830135611d1f81611c39565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015611d8757611d87611d5f565b500390565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611db457600080fd5b81516111d281611c39565b600081518084526020808501945080840160005b83811015611df85781516001600160a01b031687529582019590820190600101611dd3565b509495945050505050565b85815284602082015260a060408201526000611e2260a0830186611dbf565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115611e5257611e52611d5f565b500190565b600082611e7457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611e9357611e93611d5f565b500290565b600080600060608486031215611ead57600080fd5b8351925060208401519150604084015190509250925092565b848152608060208201526000611edf6080830186611dbf565b6001600160a01b0394909416604083015250606001529291505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220d67abd99bd6ec3c699e00eeb41f811897e0e4e7dcd842a3c6ae41a384a38f68c64736f6c634300080d0033",
    "runtime_bytecode": "6080604052600436106102295760003560e01c80636c0a24eb11610123578063d3e6cee0116100ab578063e632313c1161006f578063e632313c14610638578063f2fde38b14610658578063f429389014610678578063fc588c041461068d578063fd01bd4c146106ad57600080fd5b8063d3e6cee01461059b578063d89135cd146105b1578063d9f7e4df146105c6578063dc903ba1146105dc578063dd62ed3e146105f257600080fd5b80638ea78153116100f25780638ea78153146104f657806395d89b411461051757806398620d7614610545578063a9059cbb14610565578063af465a271461058557600080fd5b80636c0a24eb1461047757806370a082311461048d578063715018a6146104c35780638da5cb5b146104d857600080fd5b806327a14fc2116101b157806351bc3c851161017557806351bc3c851461040c5780635dbc2fe11461042157806363a640ff14610436578063653092fd1461044c57806366bf686e1461046157600080fd5b806327a14fc2146103785780632e8fa8211461039a578063313ce567146103b057806336cf7c87146103cc57806349bd5a5e146103ec57600080fd5b80631694505e116101f85780631694505e146102df57806318160ddd14610317578063233296f01461032c57806323b872dd1461034257806323bbf9e71461036257600080fd5b806306ab002a1461023557806306fdde031461025e578063095ea7b3146102995780630cdf2187146102c957600080fd5b3661023057005b600080fd5b34801561024157600080fd5b5061024b600c5481565b6040519081526020015b60405180910390f35b34801561026a57600080fd5b5060408051808201909152600981526829b434b090213ab93760b91b60208201525b6040516102559190611be4565b3480156102a557600080fd5b506102b96102b4366004611c4e565b6106c3565b6040519015158152602001610255565b3480156102d557600080fd5b5061024b600e5481565b3480156102eb57600080fd5b50601f546102ff906001600160a01b031681565b6040516001600160a01b039091168152602001610255565b34801561032357600080fd5b5060055461024b565b34801561033857600080fd5b5061024b60075481565b34801561034e57600080fd5b506102b961035d366004611c7a565b6106da565b34801561036e57600080fd5b5061024b600a5481565b34801561038457600080fd5b50610398610393366004611cbb565b610743565b005b3480156103a657600080fd5b5061024b60085481565b3480156103bc57600080fd5b5060405160068152602001610255565b3480156103d857600080fd5b50601d546102ff906001600160a01b031681565b3480156103f857600080fd5b506020546102ff906001600160a01b031681565b34801561041857600080fd5b506103986107dc565b34801561042d57600080fd5b5061039861081e565b34801561044257600080fd5b5061024b600d5481565b34801561045857600080fd5b5061039861085d565b34801561046d57600080fd5b5061024b60105481565b34801561048357600080fd5b5061024b60065481565b34801561049957600080fd5b5061024b6104a8366004611cd4565b6001600160a01b031660009081526002602052604090205490565b3480156104cf57600080fd5b50610398610884565b3480156104e457600080fd5b506000546001600160a01b03166102ff565b34801561050257600080fd5b506020546102b990600160a81b900460ff1681565b34801561052357600080fd5b5060408051808201909152600581526429b434b0a160d91b602082015261028c565b34801561055157600080fd5b50610398610560366004611cbb565b6108f8565b34801561057157600080fd5b506102b9610580366004611c4e565b61091d565b34801561059157600080fd5b5061024b60055481565b3480156105a757600080fd5b5061024b60115481565b3480156105bd57600080fd5b50601a5461024b565b3480156105d257600080fd5b5061024b600f5481565b3480156105e857600080fd5b5061024b600b5481565b3480156105fe57600080fd5b5061024b61060d366004611cf1565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b34801561064457600080fd5b50610398610653366004611cbb565b61092a565b34801561066457600080fd5b50610398610673366004611cd4565b61094f565b34801561068457600080fd5b506103986109e7565b34801561069957600080fd5b506103986106a8366004611cbb565b610a17565b3480156106b957600080fd5b5061024b601a5481565b60006106d0338484610a88565b5060015b92915050565b60006106e7848484610bac565b610739843361073485604051806060016040528060288152602001611efc602891396001600160a01b038a1660009081526003602090815260408083203384529091529020549190611156565b610a88565b5060019392505050565b601c546001600160a01b0316336001600160a01b03161461076357600080fd5b6005546107719060c8611190565b81116107d75760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d7573742062652067726561746572207468616e20302e3525604482015269206f6620737570706c7960b01b60648201526084015b60405180910390fd5b600655565b601c546001600160a01b0316336001600160a01b0316146107fc57600080fd5b30600090815260026020526040902054801561081b5761081b816111d9565b50565b6000546001600160a01b031633146108485760405162461bcd60e51b81526004016107ce90611d2a565b6020805460ff60a81b1916600160a81b179055565b601c546001600160a01b0316336001600160a01b03161461087d57600080fd5b6000601155565b6000546001600160a01b031633146108ae5760405162461bcd60e51b81526004016107ce90611d2a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b601c546001600160a01b0316336001600160a01b03161461091857600080fd5b600955565b60006106d0338484610bac565b601c546001600160a01b0316336001600160a01b03161461094a57600080fd5b600855565b6000546001600160a01b031633146109795760405162461bcd60e51b81526004016107ce90611d2a565b6001600160a01b0381166109de5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107ce565b61081b81611355565b601c546001600160a01b0316336001600160a01b031614610a0757600080fd5b47801561081b5761081b816113a5565b6402540be400811015610a635760405162461bcd60e51b81526020600482015260146024820152733732b3b0ba34bb329033b437b9ba103934b232b960611b60448201526064016107ce565b601c546001600160a01b0316336001600160a01b031614610a8357600080fd5b600755565b6001600160a01b038316610aea5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107ce565b6001600160a01b038216610b4b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016107ce565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610c105760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016107ce565b6001600160a01b038216610c725760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016107ce565b60008111610cd45760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016107ce565b6001600160a01b0383166000908152601b602052604090205460ff16158015610d1657506001600160a01b0382166000908152601b602052604090205460ff16155b610d1f57600080fd5b6001610d336000546001600160a01b031690565b6001600160a01b0316846001600160a01b031614158015610d6257506000546001600160a01b03848116911614155b8015610d7757506001600160a01b0384163014155b8015610d8c57506001600160a01b0383163014155b156110df576020546001600160a01b038581169116148015610dbc5750601f546001600160a01b03848116911614155b8015610e0457506001600160a01b03841660009081526004602052604090205460ff161580610e0457506001600160a01b03831660009081526004602052604090205460ff16155b15610efe57600654610e3583610e2f866001600160a01b031660009081526002602052604090205490565b906113e3565b1115610e975760405162461bcd60e51b815260206004820152602b60248201527f596f7520617265206265696e67206772656564792e20457863656564696e672060448201526a26b0bc102bb0b63632ba1760a91b60648201526084016107ce565b600754821115610efe5760405162461bcd60e51b815260206004820152602c60248201527f536c6f7720646f776e2062756464792e2e2e74686572652069732061206d617860448201526b103a3930b739b0b1ba34b7b760a11b60648201526084016107ce565b6020546001600160a01b038581169116148015610f295750601f546001600160a01b03848116911614155b8015610f4e57506001600160a01b0383166000908152601b602052604090205460ff16155b8015610f7357506001600160a01b0384166000908152601b602052604090205460ff16155b15610f9157600a54601655600b54601755600c54601855600d546019555b6020546001600160a01b038481169116148015610fbc5750601f546001600160a01b03858116911614155b8015610fe157506001600160a01b0383166000908152601b602052604090205460ff16155b801561100657506001600160a01b0384166000908152601b602052604090205460ff16155b1561102457600e54601655600f546017556010546018556011546019555b602054600160a01b900460ff1615801561104c57506020546001600160a01b03858116911614155b156110df57306000908152600260205260409020546008548111156110745761107481611442565b6020544790600160a81b900460ff161580156110905750600081115b156110a35761109e476113a5565b6110dc565b602054600160a81b900460ff1680156110bd575060095481115b156110dc5760006110cf826002611190565b90506110da816114dc565b505b50505b6001600160a01b03841660009081526004602052604090205460ff168061111e57506001600160a01b03831660009081526004602052604090205460ff165b15611127575060005b611133848484846114eb565b611150601254601655601354601755601454601855601554601955565b50505050565b6000818484111561117a5760405162461bcd60e51b81526004016107ce9190611be4565b5060006111878486611d75565b95945050505050565b60006111d283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506117c9565b9392505050565b6020805460ff60a01b1916600160a01b1781556040805160028082526060820183526000939192909183019080368337019050509050308160008151811061122357611223611d8c565b6001600160a01b03928316602091820292909201810191909152601f54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a09190611da2565b816001815181106112b3576112b3611d8c565b6001600160a01b039283166020918202929092010152601f546112d99130911684610a88565b601f5460405163791ac94760e01b81526001600160a01b039091169063791ac94790611312908590600090869030904290600401611e03565b600060405180830381600087803b15801561132c57600080fd5b505af1158015611340573d6000803e3d6000fd5b50506020805460ff60a01b1916905550505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b601c546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156113df573d6000803e3d6000fd5b5050565b6000806113f08385611e3f565b9050838110156111d25760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016107ce565b6020805460ff60a01b1916600160a01b17905560165460195460185460175460009361148d9361147a939192610e2f928391906113e3565b60165461148790856117f7565b90611190565b9050600061149c826002611190565b905060006114aa8483611879565b9050476114b6826111d9565b60006114d083611487866114ca4787611879565b906117f7565b905061134084826118bb565b801561081b5761081b8161196f565b806114f8576114f8611ac3565b61152a6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6115446064611487601754866117f790919063ffffffff16565b602082015260165461155e906064906114879086906117f7565b8152601854611575906064906114879086906117f7565b604082015260195461158f906064906114879086906117f7565b606082018190528151602083015160408401516115bd936115b7929183919082908a90611879565b90611879565b608082015260208101516000906115d5908590611879565b90506115e5868360200151611b1e565b6001600160a01b0386166000908152600260205260409020546116089082611879565b6001600160a01b038088166000908152600260205260408082209390935560808501519188168152919091205461163e916113e3565b6001600160a01b0386166000908152600260209081526040909120919091558251908301516116999161167191906113e3565b606084015160408086015130600090815260026020529190912054610e2f92918391906113e3565b3060009081526002602090815260409091209190915554600160a81b900460ff1680156116d457506020546001600160a01b03878116911614155b80156116e957506001600160a01b0386163014155b80156117035750601f546001600160a01b03878116911614155b80156117335750601f546001600160a01b038681169116148061173357506020546001600160a01b038681169116145b15611753576020805490830151611753916001600160a01b031690611b1e565b846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846080015160405161179c91815260200190565b60405180910390a36117c1601254601655601354601755601454601855601554601955565b505050505050565b600081836117ea5760405162461bcd60e51b81526004016107ce9190611be4565b5060006111878486611e57565b600082600003611809575060006106d4565b60006118158385611e79565b9050826118228583611e57565b146111d25760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016107ce565b60006111d283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611156565b601f546118d39030906001600160a01b031684610a88565b601f54601c5460405163f305d71960e01b81523060048201526024810185905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af1158015611943573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906119689190611e98565b5050505050565b6040805160028082526060820183526000926020830190803683375050601f54604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa1580156119d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fd9190611da2565b81600081518110611a1057611a10611d8c565b6001600160a01b039283166020918202929092010152601e54825191169082906001908110611a4157611a41611d8c565b6001600160a01b039283166020918202929092010152601f54601d5460405163b6f9de9560e01b81529183169263b6f9de95928692611a8d926000928892909116904290600401611ec6565b6000604051808303818588803b158015611aa657600080fd5b505af1158015611aba573d6000803e3d6000fd5b50505050505050565b601754158015611ad35750601654155b8015611adf5750601854155b8015611aeb5750601954155b15611af257565b601780546013556016805460125560188054601455601980546015556000938490559183905582905555565b6001600160a01b038216600090815260026020526040902054811115611b4357600080fd5b6001600160a01b038216600090815260026020526040902054611b669082611879565b6001600160a01b038316600090815260026020526040902055600554611b8c9082611879565b600555601a54611b9c90826113e3565b601a556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b81811015611c1157858101830151858201604001528201611bf5565b81811115611c23576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461081b57600080fd5b60008060408385031215611c6157600080fd5b8235611c6c81611c39565b946020939093013593505050565b600080600060608486031215611c8f57600080fd5b8335611c9a81611c39565b92506020840135611caa81611c39565b929592945050506040919091013590565b600060208284031215611ccd57600080fd5b5035919050565b600060208284031215611ce657600080fd5b81356111d281611c39565b60008060408385031215611d0457600080fd5b8235611d0f81611c39565b91506020830135611d1f81611c39565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015611d8757611d87611d5f565b500390565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611db457600080fd5b81516111d281611c39565b600081518084526020808501945080840160005b83811015611df85781516001600160a01b031687529582019590820190600101611dd3565b509495945050505050565b85815284602082015260a060408201526000611e2260a0830186611dbf565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115611e5257611e52611d5f565b500190565b600082611e7457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611e9357611e93611d5f565b500290565b600080600060608486031215611ead57600080fd5b8351925060208401519150604084015190509250925092565b848152608060208201526000611edf6080830186611dbf565b6001600160a01b0394909416604083015250606001529291505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220d67abd99bd6ec3c699e00eeb41f811897e0e4e7dcd842a3c6ae41a384a38f68c64736f6c634300080d0033",
    "contract_name": "ShiaBurn",
    "compiler_version": "v0.8.13+commit.abaa5c0e",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dead\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_burnBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_burnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_jeetBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_jeetSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_liqBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_liqSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_maxtxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_shiaBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_shiaSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeJeetTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyShiaToken\",\"type\":\"uint256\"}],\"name\":\"setBuyShiaRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransaction\",\"type\":\"uint256\"}],\"name\":\"setMaxTxn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOnTheBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/*\r\n? Introducing ShiaBurn - Ignite Your Investments! ?\r\n\r\n? Join the revolution of decentralized finance with ShiaBurn ($ShiaB)!\r\n\r\n? Tokenomics:\r\n- 1% Burn of $ShiaB on every transaction\r\n- 1% Automatic Liquidity Pool (LP) generation\r\n- 3% Burn of $Shia on every transaction\r\n\r\n? Website: shiaburn.wtf\r\n? Telegram:  t.me/shiaburnofficial\r\n? Twitter:  twitter.com/ShiaBurn\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n        \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract ShiaBurn is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private constant _name = \"Shia Burn\";\r\n    string private constant _symbol = \"ShiaB\";\r\n    uint8 private constant _decimals = 6;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 public _tTotal = 1000 * 1e3 * 1e6; //1,000,000\r\n\r\n    uint256 public _maxWalletAmount = 20 * 1e3 * 1e6; //2%\r\n    uint256 public j_maxtxn = 20 * 1e3 * 1e6; //2%\r\n    uint256 public swapAmount = 7 * 1e2 * 1e6; //.07%\r\n    uint256 private buyShiaUpperLimit = 200 * 1e14; // 0.01\r\n\r\n    // fees\r\n    uint256 public j_liqBuy = 1; \r\n    uint256 public j_burnBuy = 1;\r\n    uint256 public j_shiaBuy = 3;\r\n    uint256 public j_jeetBuy = 0;\r\n\r\n    uint256 public j_liqSell = 1; \r\n    uint256 public j_burnSell = 1;\r\n    uint256 public j_shiaSell = 3;\r\n    uint256 public j_jeetSell = 10;\r\n \r\n    uint256 private j_previousLiqFee = j_liqFee;\r\n    uint256 private j_previousBurnFee = j_burnFee;\r\n    uint256 private j_previousShiaFee = j_shiaFee;\r\n    uint256 private j_previousJeetTax = j_jeetTax;\r\n    \r\n    uint256 private j_liqFee;\r\n    uint256 private j_burnFee;\r\n    uint256 private j_shiaFee;\r\n    uint256 private j_jeetTax;\r\n\r\n    uint256 public _totalBurned;\r\n\r\n    struct FeeBreakdown {\r\n        uint256 tLiq;\r\n        uint256 tBurn;\r\n        uint256 tShia;\r\n        uint256 tJeet;\r\n        uint256 tAmount;\r\n    }\r\n\r\n    mapping(address => bool) private bots;\r\n    address payable private shiaburnWallet = payable(0x57E9E4e39452323aAB3b226ed645297C5d98f887);\r\n    address payable public dead = payable(0x000000000000000000000000000000000000dEaD);\r\n    address SHIA = 0x43D7E65B8fF49698D9550a7F315c87E67344FB59;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private swapping = false;\r\n    bool public burnMode = false;\r\n\r\n    modifier lockSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor() {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        \r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[shiaburnWallet] = true;\r\n        _isExcludedFromFee[dead] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function totalBurned() public view returns (uint256) {\r\n        return _totalBurned;\r\n    }\r\n\r\n    function burning(address _account, uint _amount) private {  \r\n        require( _amount <= balanceOf(_account));\r\n        _balances[_account] = _balances[_account].sub(_amount);\r\n        _tTotal = _tTotal.sub(_amount);\r\n        _totalBurned = _totalBurned.add(_amount);\r\n        emit Transfer(_account, address(0), _amount);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (j_burnFee == 0 && j_liqFee == 0 && j_shiaFee == 0 && j_jeetTax == 0) return;\r\n        j_previousBurnFee = j_burnFee;\r\n        j_previousLiqFee = j_liqFee;\r\n        j_previousShiaFee = j_shiaFee;\r\n        j_previousJeetTax = j_jeetTax;\r\n\r\n        j_burnFee = 0;\r\n        j_liqFee = 0;\r\n        j_shiaFee = 0;\r\n        j_jeetTax = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        j_liqFee = j_previousLiqFee;\r\n        j_burnFee = j_previousBurnFee;\r\n        j_shiaFee = j_previousShiaFee;\r\n        j_jeetTax = j_previousJeetTax;\r\n    }\r\n\r\n    function removeJeetTax() external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        j_jeetSell = 0;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!bots[from] && !bots[to]);\r\n\r\n        bool takeFee = true;\r\n\r\n        if (from != owner() && to != owner() && from != address(this) && to != address(this)) {\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ((!_isExcludedFromFee[from] || !_isExcludedFromFee[to]))) {\r\n                require(balanceOf(to).add(amount) <= _maxWalletAmount, \"You are being greedy. Exceeding Max Wallet.\");\r\n                require(amount <= j_maxtxn, \"Slow down buddy...there is a max transaction\");\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !bots[to] && !bots[from]) {\r\n                j_liqFee = j_liqBuy;\r\n                j_burnFee = j_burnBuy;\r\n                j_shiaFee = j_shiaBuy;\r\n                j_jeetTax = j_jeetBuy;\r\n            }\r\n                \r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router) && !bots[to] && !bots[from]) {\r\n                j_liqFee = j_liqSell;\r\n                j_burnFee = j_burnSell;\r\n                j_shiaFee = j_shiaSell;\r\n                j_jeetTax = j_jeetSell;\r\n            }\r\n           \r\n            if (!swapping && from != uniswapV2Pair) {\r\n\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n                if (contractTokenBalance > swapAmount) {\r\n                    swapAndLiquify(contractTokenBalance);\r\n                }\r\n\r\n                uint256 contractETHBalance = address(this).balance;\r\n            \r\n                if (!burnMode && (contractETHBalance > 0)) {\r\n                    sendETHToFee(address(this).balance);\r\n                } else if (burnMode && (contractETHBalance > buyShiaUpperLimit)) {\r\n                        uint256 buyAmount = (contractETHBalance.div(2));\r\n                    buyShia(buyAmount);\r\n                }                    \r\n            }\r\n        }\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        \r\n        _transferAgain(from, to, amount, takeFee);\r\n        restoreAllFee();\r\n    }\r\n\r\n    function setMaxTxn(uint256 maxTransaction) external {\r\n        require(maxTransaction >= 10 * 1e3 * 1e6,\"negative ghost rider\");\r\n        require(_msgSender() == shiaburnWallet);\r\n        j_maxtxn = maxTransaction;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function swapETHForTokens(uint256 amount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(SHIA);\r\n\r\n      // make the swap\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            dead, // Burn address\r\n            block.timestamp\r\n        );        \r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            shiaburnWallet,\r\n            block.timestamp\r\n          );\r\n    }\r\n  \r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockSwap {\r\n        uint256 autoLPamount = j_liqFee.mul(contractTokenBalance).div(j_burnFee.add(j_shiaFee).add(j_jeetTax).add(j_liqFee));\r\n        uint256 half =  autoLPamount.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(otherHalf);\r\n        uint256 newBalance = ((address(this).balance.sub(initialBalance)).mul(half)).div(otherHalf);\r\n        addLiquidity(half, newBalance);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        shiaburnWallet.transfer(amount);\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance > 0) {\r\n            swapTokensForEth(contractBalance);\r\n        }\r\n    }\r\n\r\n    function manualSend() external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if (contractETHBalance > 0) {\r\n            sendETHToFee(contractETHBalance);\r\n        }\r\n    }\r\n\r\n    function _transferAgain(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee) { \r\n                removeAllFee();\r\n        }\r\n        \r\n        FeeBreakdown memory fees;\r\n        fees.tBurn = amount.mul(j_burnFee).div(100);\r\n        fees.tLiq = amount.mul(j_liqFee).div(100);\r\n        fees.tShia = amount.mul(j_shiaFee).div(100);\r\n        fees.tJeet = amount.mul(j_jeetTax).div(100);\r\n        \r\n        fees.tAmount = amount.sub(fees.tShia).sub(fees.tJeet).sub(fees.tBurn).sub(fees.tLiq);\r\n\r\n        uint256 amountPreBurn = amount.sub(fees.tBurn);\r\n        burning(sender, fees.tBurn);\r\n\r\n        _balances[sender] = _balances[sender].sub(amountPreBurn);\r\n        _balances[recipient] = _balances[recipient].add(fees.tAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(fees.tShia).add(fees.tJeet).add(fees.tBurn.add(fees.tLiq));\r\n        \r\n        if(burnMode && sender != uniswapV2Pair && sender != address(this) && sender != address(uniswapV2Router) && (recipient == address(uniswapV2Router) || recipient == uniswapV2Pair)) {\r\n            burning(uniswapV2Pair, fees.tBurn);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, fees.tAmount);\r\n        restoreAllFee();\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function setMaxWalletAmount(uint256 maxWalletAmount) external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        require(maxWalletAmount > _tTotal.div(200), \"Amount must be greater than 0.5% of supply\");\r\n        _maxWalletAmount = maxWalletAmount;\r\n    }\r\n\r\n    function setSwapAmount(uint256 _swapAmount) external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        swapAmount = _swapAmount;\r\n    }\r\n\r\n    function turnOnTheBurn() public onlyOwner {\r\n        burnMode = true;\r\n    }\r\n\r\n    function buyShia(uint256 amount) private {\r\n    \tif (amount > 0) {\r\n    \t    swapETHForTokens(amount);\r\n\t    }\r\n    }\r\n\r\n    function setBuyShiaRate(uint256 buyShiaToken) external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        buyShiaUpperLimit = buyShiaToken;\r\n    }\r\n\r\n}",
    "etherscan_verified": true
}