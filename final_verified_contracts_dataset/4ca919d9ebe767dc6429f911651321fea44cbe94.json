{
    "address": "0x4cA919d9EBE767dC6429f911651321feA44cbe94",
    "tx_hash": "0fbd21d42e1604c890ac94fd846f02be2678c15789d34fabd55dce2c2ef9c0a4",
    "block_number": 18007600,
    "timestamp": 1693158695,
    "gas_used_in_creation": 4525250,
    "creation_bytecode": "60806040526000600d819055600e819055600f81905560108190556011819055601281905560138190556014556015805460ff191660011790553480156200004657600080fd5b506040516200231f3803806200231f833981016040819052620000699162000545565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060408051808201909152600981526858206f6620446f676560b81b6020820152600590620000d9908262000611565b506040805180820190915260088152672237b3b2b1b7b4b760c11b602082015260069062000108908262000611565b506007805460ff1916601290811790915566038d7ea4c68000906200012f90600a620007f2565b6200013b908262000803565b60098190556200014f90610bb8906200081d565b60165560095433600081815260016020908152604080832085905551938452919283927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3600380546001600160a01b038084166001600160a01b0319928316179092556004805492861692909116919091179055600954606490620001e090600262000803565b620001ec91906200081d565b601755306000818152600860209081526040808320805460ff1990811660019081179092556001600160a01b038781168652838620805483168417905560035481168652838620805483168417905560048054909116865283862080549092169092179055600a80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091559484526002835281842085855283528184206000199055815163c45a015560e01b81529151859363c45a01559380840193919291908290030181865afa158015620002c9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ef919062000545565b9050806001600160a01b031663c9c6539630846001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000366919062000545565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015620003b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003da919062000545565b600c8054610100600160a81b0319166101006001600160a01b0393841681029190911791829055900481166000908152600b6020908152604091829020805460ff19166001179055600a5482516315ab88c960e31b8152925193169263ad5c46489260048082019392918290030181865afa1580156200045e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000484919062000545565b600a5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015620004d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004fe919062000840565b50506001600160a01b03166000908152600860205260409020805460ff191660011790555062000864915050565b6001600160a01b03811681146200054257600080fd5b50565b6000602082840312156200055857600080fd5b815162000565816200052c565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200059757607f821691505b602082108103620005b857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200060c57600081815260208120601f850160051c81016020861015620005e75750805b601f850160051c820191505b818110156200060857828155600101620005f3565b5050505b505050565b81516001600160401b038111156200062d576200062d6200056c565b62000645816200063e845462000582565b84620005be565b602080601f8311600181146200067d5760008415620006645750858301515b600019600386901b1c1916600185901b17855562000608565b600085815260208120601f198616915b82811015620006ae578886015182559484019460019091019084016200068d565b5085821015620006cd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000734578160001904821115620007185762000718620006dd565b808516156200072657918102915b93841c9390800290620006f8565b509250929050565b6000826200074d57506001620007ec565b816200075c57506000620007ec565b81600181146200077557600281146200078057620007a0565b6001915050620007ec565b60ff841115620007945762000794620006dd565b50506001821b620007ec565b5060208310610133831016604e8410600b8410161715620007c5575081810a620007ec565b620007d18383620006f3565b8060001904821115620007e857620007e8620006dd565b0290505b92915050565b60006200056560ff8416836200073c565b8082028115828204841417620007ec57620007ec620006dd565b6000826200083b57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156200085357600080fd5b815180151581146200056557600080fd5b611aab80620008746000396000f3fe6080604052600436106101c65760003560e01c806365b61b77116100f757806395d89b4111610095578063cefab2af11610064578063cefab2af14610522578063dd62ed3e1461053c578063f1b234ad14610582578063f2fde38b146105a257600080fd5b806395d89b41146104b8578063a67755c2146104cd578063a9059cbb146104ed578063bc76c0521461050d57600080fd5b80637cc5b1e6116100d15780637cc5b1e61461043a578063807201401461045a5780638da5cb5b1461047a578063936c044b1461049857600080fd5b806365b61b77146103cf57806370a08231146103ef578063715018a61461042557600080fd5b8063319c2f64116101645780633f80b6d71161013e5780633f80b6d71461033c5780634bf28fd01461035c578063553193ca146103995780636402511e146103af57600080fd5b8063319c2f64146102ba57806336b2e027146102dc5780633ecad2711461030c57600080fd5b80631b583749116101a05780631b5837491461024c57806323b872dd1461026257806327b1a8e914610282578063313ce5671461029857600080fd5b806306fdde03146101d2578063095ea7b3146101fd57806318160ddd1461022d57600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506101e76105c2565b6040516101f4919061163e565b60405180910390f35b34801561020957600080fd5b5061021d6102183660046116a1565b610654565b60405190151581526020016101f4565b34801561023957600080fd5b506009545b6040519081526020016101f4565b34801561025857600080fd5b5061023e60175481565b34801561026e57600080fd5b5061021d61027d3660046116cd565b61066b565b34801561028e57600080fd5b5061023e600d5481565b3480156102a457600080fd5b5060075460405160ff90911681526020016101f4565b3480156102c657600080fd5b506102da6102d536600461170e565b610702565b005b3480156102e857600080fd5b5061021d6102f7366004611731565b60086020526000908152604090205460ff1681565b34801561031857600080fd5b5061021d610327366004611731565b600b6020526000908152604090205460ff1681565b34801561034857600080fd5b506102da61035736600461174e565b61075e565b34801561036857600080fd5b50600c546103819061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101f4565b3480156103a557600080fd5b5061023e60185481565b3480156103bb57600080fd5b506102da6103ca366004611789565b61079f565b3480156103db57600080fd5b50600a54610381906001600160a01b031681565b3480156103fb57600080fd5b5061023e61040a366004611731565b6001600160a01b031660009081526001602052604090205490565b34801561043157600080fd5b506102da6107ce565b34801561044657600080fd5b50600354610381906001600160a01b031681565b34801561046657600080fd5b506102da6104753660046117a2565b610842565b34801561048657600080fd5b506000546001600160a01b0316610381565b3480156104a457600080fd5b506102da6104b3366004611825565b61091f565b3480156104c457600080fd5b506101e7610974565b3480156104d957600080fd5b506102da6104e8366004611731565b610983565b3480156104f957600080fd5b5061021d6105083660046116a1565b610ab8565b34801561051957600080fd5b506102da610ac5565b34801561052e57600080fd5b5060155461021d9060ff1681565b34801561054857600080fd5b5061023e61055736600461185e565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561058e57600080fd5b506102da61059d36600461185e565b610b03565b3480156105ae57600080fd5b506102da6105bd366004611731565b610b5b565b6060600580546105d19061188c565b80601f01602080910402602001604051908101604052809291908181526020018280546105fd9061188c565b801561064a5780601f1061061f5761010080835404028352916020019161064a565b820191906000526020600020905b81548152906001019060200180831161062d57829003601f168201915b5050505050905090565b6000610661338484610c21565b5060015b92915050565b6000610678848484610c82565b6001600160a01b0384166000908152600260209081526040808320338452909152902054600019146106f8576001600160a01b03841660009081526002602090815260408083203384529091529020546106d39083906118dc565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b5060019392505050565b6000546001600160a01b031633146107355760405162461bcd60e51b815260040161072c906118ef565b60405180910390fd5b60648160ff1661074460095490565b61074e919061191a565b6107589190611947565b60175550565b6000546001600160a01b031633146107885760405162461bcd60e51b815260040161072c906118ef565b601094909455601192909255601255601355601455565b6000546001600160a01b031633146107c95760405162461bcd60e51b815260040161072c906118ef565b601655565b6000546001600160a01b031633146107f85760405162461bcd60e51b815260040161072c906118ef565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b0316331461086c5760405162461bcd60e51b815260040161072c906118ef565b60005b81811015610916576109046108ab60058585858181106108915761089161195b565b90506020020160208101906108a69190611731565b610f45565b6108b6906001611971565b6108c790662386f26fc1000061191a565b6108d89066f8b0a10e470000611971565b8484848181106108ea576108ea61195b565b90506020020160208101906108ff9190611731565b610faa565b8061090e81611984565b91505061086f565b50504360185550565b6000546001600160a01b031633146109495760405162461bcd60e51b815260040161072c906118ef565b6001600160a01b03919091166000908152600860205260409020805460ff1916911515919091179055565b6060600680546105d19061188c565b6001600160a01b0381163014610ab5576003546040516370a0823160e01b81523060048201526001600160a01b038381169263a9059cbb9291169083906370a0823190602401602060405180830381865afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a919061199d565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7991906119b6565b506003546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610ab3573d6000803e3d6000fd5b505b50565b6000610661338484610c82565b6000546001600160a01b03163314610aef5760405162461bcd60e51b815260040161072c906118ef565b6015805460ff19811660ff90911615179055565b6000546001600160a01b03163314610b2d5760405162461bcd60e51b815260040161072c906118ef565b600380546001600160a01b039384166001600160a01b03199182161790915560048054929093169116179055565b6000546001600160a01b03163314610b855760405162461bcd60e51b815260040161072c906118ef565b6001600160a01b038116610bc65760405162461bcd60e51b815260206004820152600860248201526706e657720697320360c41b604482015260640161072c565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831660009081526001602052604090205481811015610cde5760405162461bcd60e51b815260206004820152601060248201526f0c4c2d8c2dcc6ca9cdee88adcdeeaced60831b604482015260640161072c565b600c5460ff1615610cfb57610cf48484846111ac565b5050505050565b6001600160a01b0383166000908152600b602052604081205460ff168015610d265750600c5460ff16155b8015610d4b57506001600160a01b03851660009081526008602052604090205460ff16155b8015610d7057506001600160a01b03841660009081526008602052604090205460ff16155b8015610d7f5750601454600d54115b15610dc457306000908152600160205260409020548390811115610daf5750306000908152600160205260409020545b601654811115610dc257610dc281611261565b505b6001600160a01b03851660009081526008602052604090205460ff16158015610e0657506001600160a01b03841660009081526008602052604090205460ff16155b8015610e155750600c5460ff16155b15610f3957600060185411610e2957600080fd5b506001600160a01b0384166000908152600b602052604090205460019060ff168015610e635750600a546001600160a01b03858116911614155b8015610e8857506001600160a01b03841660009081526008602052604090205460ff16155b15610f0a57600d8054906000610e9d83611984565b919050555060175483610ec5866001600160a01b031660009081526001602052604090205490565b610ecf9190611971565b1115610f0a5760405162461bcd60e51b815260206004820152600a60248201526977616c6c65744d61782160b01b604482015260640161072c565b60155460ff168015610f1b57508183145b15610f3957610f2c61271084611947565b610f3690846118dc565b92505b610cf48585858461144a565b600082424484604051602001610f8093929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b6040516020818303038152906040528051906020012060001c610fa391906119d3565b9392505050565b600c805460ff19166001179055600a54604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c46489160048083019260209291908290030181865afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102591906119e7565b6040805160028082526060820183529293506000929091602083019080368337019050509050818160008151811061105f5761105f61195b565b60200260200101906001600160a01b031690816001600160a01b03168152505030816001815181106110935761109361195b565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b81523060048201526000918416906370a0823190602401602060405180830381865afa1580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c919061199d565b905080851161111b578461111d565b805b94508460000361112f5750505061119e565b600a54604051635c11d79560e01b81526001600160a01b0390911690635c11d7959061116890889060009087908a904290600401611a04565b600060405180830381600087803b15801561118257600080fd5b505af1158015611196573d6000803e3d6000fd5b505050505050505b5050600c805460ff19169055565b6001600160a01b0383166000908152600160205260408120805483919083906111d69084906118dc565b90915550506001600160a01b03831660009081526001602052604081208054849290611203908490611971565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161124f91815260200190565b60405180910390a35060019392505050565b600c805460ff1916600117905560408051600280825260608201835260009260208301908036833701905050905030816000815181106112a3576112a361195b565b6001600160a01b03928316602091820292909201810191909152600a54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156112fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132091906119e7565b816001815181106113335761133361195b565b6001600160a01b039283166020918202929092010152600a5460405163791ac94760e01b815291169063791ac94790611379908590600090869030904290600401611a04565b600060405180830381600087803b15801561139357600080fd5b505af11580156113a7573d6000803e3d6000fd5b5047925050506702c68af0bb14000081111561143b576003546001600160a01b03166108fc6113d7600a84611947565b6040518115909202916000818181858888f193505050501580156113ff573d6000803e3d6000fd5b506004546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015611439573d6000803e3d6000fd5b505b5050600c805460ff1916905550565b6001600160a01b03841660009081526001602052604090205461146e9083906118dc565b6001600160a01b03851660009081526001602052604081209190915581156115af576001600160a01b0384166000908152600b602052604081205460ff16156114cf57601354600d54116114c457600f546114c8565b6011545b905061150a565b6001600160a01b0386166000908152600b602052604090205460ff161561150a57601254600d541161150357600e54611507565b6010545b90505b60006064611518838761191a565b6115229190611947565b905080156115ac576115348184611971565b30600090815260016020526040902054909350611552908290611971565b30600081815260016020526040908190209290925590516001600160a01b038916907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906115a39085815260200190565b60405180910390a35b50505b6115b981846118dc565b6001600160a01b0385166000908152600160205260409020546115dc9190611971565b6001600160a01b0380861660008181526001602052604090209290925586167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61162684876118dc565b60405190815260200160405180910390a35050505050565b600060208083528351808285015260005b8181101561166b5785810183015185820160400152820161164f565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610ab557600080fd5b600080604083850312156116b457600080fd5b82356116bf8161168c565b946020939093013593505050565b6000806000606084860312156116e257600080fd5b83356116ed8161168c565b925060208401356116fd8161168c565b929592945050506040919091013590565b60006020828403121561172057600080fd5b813560ff81168114610fa357600080fd5b60006020828403121561174357600080fd5b8135610fa38161168c565b600080600080600060a0868803121561176657600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561179b57600080fd5b5035919050565b600080602083850312156117b557600080fd5b823567ffffffffffffffff808211156117cd57600080fd5b818501915085601f8301126117e157600080fd5b8135818111156117f057600080fd5b8660208260051b850101111561180557600080fd5b60209290920196919550909350505050565b8015158114610ab557600080fd5b6000806040838503121561183857600080fd5b82356118438161168c565b9150602083013561185381611817565b809150509250929050565b6000806040838503121561187157600080fd5b823561187c8161168c565b915060208301356118538161168c565b600181811c908216806118a057607f821691505b6020821081036118c057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610665576106656118c6565b6020808252601190820152703cb7ba9030b932903737ba1037bbb732b960791b604082015260600190565b8082028115828204841417610665576106656118c6565b634e487b7160e01b600052601260045260246000fd5b60008261195657611956611931565b500490565b634e487b7160e01b600052603260045260246000fd5b80820180821115610665576106656118c6565b600060018201611996576119966118c6565b5060010190565b6000602082840312156119af57600080fd5b5051919050565b6000602082840312156119c857600080fd5b8151610fa381611817565b6000826119e2576119e2611931565b500690565b6000602082840312156119f957600080fd5b8151610fa38161168c565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611a545784516001600160a01b031683529383019391830191600101611a2f565b50506001600160a01b0396909616606085015250505060800152939250505056fea26469706673582212201d4997bb914dd95b95955da991838fd57576b08fbe04bcf0d77df8bcd0e3151064736f6c634300081100330000000000000000000000000df23f559f32843a8adbee242c3e29c322b62150",
    "runtime_bytecode": "6080604052600436106101c65760003560e01c806365b61b77116100f757806395d89b4111610095578063cefab2af11610064578063cefab2af14610522578063dd62ed3e1461053c578063f1b234ad14610582578063f2fde38b146105a257600080fd5b806395d89b41146104b8578063a67755c2146104cd578063a9059cbb146104ed578063bc76c0521461050d57600080fd5b80637cc5b1e6116100d15780637cc5b1e61461043a578063807201401461045a5780638da5cb5b1461047a578063936c044b1461049857600080fd5b806365b61b77146103cf57806370a08231146103ef578063715018a61461042557600080fd5b8063319c2f64116101645780633f80b6d71161013e5780633f80b6d71461033c5780634bf28fd01461035c578063553193ca146103995780636402511e146103af57600080fd5b8063319c2f64146102ba57806336b2e027146102dc5780633ecad2711461030c57600080fd5b80631b583749116101a05780631b5837491461024c57806323b872dd1461026257806327b1a8e914610282578063313ce5671461029857600080fd5b806306fdde03146101d2578063095ea7b3146101fd57806318160ddd1461022d57600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506101e76105c2565b6040516101f4919061163e565b60405180910390f35b34801561020957600080fd5b5061021d6102183660046116a1565b610654565b60405190151581526020016101f4565b34801561023957600080fd5b506009545b6040519081526020016101f4565b34801561025857600080fd5b5061023e60175481565b34801561026e57600080fd5b5061021d61027d3660046116cd565b61066b565b34801561028e57600080fd5b5061023e600d5481565b3480156102a457600080fd5b5060075460405160ff90911681526020016101f4565b3480156102c657600080fd5b506102da6102d536600461170e565b610702565b005b3480156102e857600080fd5b5061021d6102f7366004611731565b60086020526000908152604090205460ff1681565b34801561031857600080fd5b5061021d610327366004611731565b600b6020526000908152604090205460ff1681565b34801561034857600080fd5b506102da61035736600461174e565b61075e565b34801561036857600080fd5b50600c546103819061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101f4565b3480156103a557600080fd5b5061023e60185481565b3480156103bb57600080fd5b506102da6103ca366004611789565b61079f565b3480156103db57600080fd5b50600a54610381906001600160a01b031681565b3480156103fb57600080fd5b5061023e61040a366004611731565b6001600160a01b031660009081526001602052604090205490565b34801561043157600080fd5b506102da6107ce565b34801561044657600080fd5b50600354610381906001600160a01b031681565b34801561046657600080fd5b506102da6104753660046117a2565b610842565b34801561048657600080fd5b506000546001600160a01b0316610381565b3480156104a457600080fd5b506102da6104b3366004611825565b61091f565b3480156104c457600080fd5b506101e7610974565b3480156104d957600080fd5b506102da6104e8366004611731565b610983565b3480156104f957600080fd5b5061021d6105083660046116a1565b610ab8565b34801561051957600080fd5b506102da610ac5565b34801561052e57600080fd5b5060155461021d9060ff1681565b34801561054857600080fd5b5061023e61055736600461185e565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561058e57600080fd5b506102da61059d36600461185e565b610b03565b3480156105ae57600080fd5b506102da6105bd366004611731565b610b5b565b6060600580546105d19061188c565b80601f01602080910402602001604051908101604052809291908181526020018280546105fd9061188c565b801561064a5780601f1061061f5761010080835404028352916020019161064a565b820191906000526020600020905b81548152906001019060200180831161062d57829003601f168201915b5050505050905090565b6000610661338484610c21565b5060015b92915050565b6000610678848484610c82565b6001600160a01b0384166000908152600260209081526040808320338452909152902054600019146106f8576001600160a01b03841660009081526002602090815260408083203384529091529020546106d39083906118dc565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b5060019392505050565b6000546001600160a01b031633146107355760405162461bcd60e51b815260040161072c906118ef565b60405180910390fd5b60648160ff1661074460095490565b61074e919061191a565b6107589190611947565b60175550565b6000546001600160a01b031633146107885760405162461bcd60e51b815260040161072c906118ef565b601094909455601192909255601255601355601455565b6000546001600160a01b031633146107c95760405162461bcd60e51b815260040161072c906118ef565b601655565b6000546001600160a01b031633146107f85760405162461bcd60e51b815260040161072c906118ef565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b0316331461086c5760405162461bcd60e51b815260040161072c906118ef565b60005b81811015610916576109046108ab60058585858181106108915761089161195b565b90506020020160208101906108a69190611731565b610f45565b6108b6906001611971565b6108c790662386f26fc1000061191a565b6108d89066f8b0a10e470000611971565b8484848181106108ea576108ea61195b565b90506020020160208101906108ff9190611731565b610faa565b8061090e81611984565b91505061086f565b50504360185550565b6000546001600160a01b031633146109495760405162461bcd60e51b815260040161072c906118ef565b6001600160a01b03919091166000908152600860205260409020805460ff1916911515919091179055565b6060600680546105d19061188c565b6001600160a01b0381163014610ab5576003546040516370a0823160e01b81523060048201526001600160a01b038381169263a9059cbb9291169083906370a0823190602401602060405180830381865afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a919061199d565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7991906119b6565b506003546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610ab3573d6000803e3d6000fd5b505b50565b6000610661338484610c82565b6000546001600160a01b03163314610aef5760405162461bcd60e51b815260040161072c906118ef565b6015805460ff19811660ff90911615179055565b6000546001600160a01b03163314610b2d5760405162461bcd60e51b815260040161072c906118ef565b600380546001600160a01b039384166001600160a01b03199182161790915560048054929093169116179055565b6000546001600160a01b03163314610b855760405162461bcd60e51b815260040161072c906118ef565b6001600160a01b038116610bc65760405162461bcd60e51b815260206004820152600860248201526706e657720697320360c41b604482015260640161072c565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831660009081526001602052604090205481811015610cde5760405162461bcd60e51b815260206004820152601060248201526f0c4c2d8c2dcc6ca9cdee88adcdeeaced60831b604482015260640161072c565b600c5460ff1615610cfb57610cf48484846111ac565b5050505050565b6001600160a01b0383166000908152600b602052604081205460ff168015610d265750600c5460ff16155b8015610d4b57506001600160a01b03851660009081526008602052604090205460ff16155b8015610d7057506001600160a01b03841660009081526008602052604090205460ff16155b8015610d7f5750601454600d54115b15610dc457306000908152600160205260409020548390811115610daf5750306000908152600160205260409020545b601654811115610dc257610dc281611261565b505b6001600160a01b03851660009081526008602052604090205460ff16158015610e0657506001600160a01b03841660009081526008602052604090205460ff16155b8015610e155750600c5460ff16155b15610f3957600060185411610e2957600080fd5b506001600160a01b0384166000908152600b602052604090205460019060ff168015610e635750600a546001600160a01b03858116911614155b8015610e8857506001600160a01b03841660009081526008602052604090205460ff16155b15610f0a57600d8054906000610e9d83611984565b919050555060175483610ec5866001600160a01b031660009081526001602052604090205490565b610ecf9190611971565b1115610f0a5760405162461bcd60e51b815260206004820152600a60248201526977616c6c65744d61782160b01b604482015260640161072c565b60155460ff168015610f1b57508183145b15610f3957610f2c61271084611947565b610f3690846118dc565b92505b610cf48585858461144a565b600082424484604051602001610f8093929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b6040516020818303038152906040528051906020012060001c610fa391906119d3565b9392505050565b600c805460ff19166001179055600a54604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c46489160048083019260209291908290030181865afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102591906119e7565b6040805160028082526060820183529293506000929091602083019080368337019050509050818160008151811061105f5761105f61195b565b60200260200101906001600160a01b031690816001600160a01b03168152505030816001815181106110935761109361195b565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b81523060048201526000918416906370a0823190602401602060405180830381865afa1580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c919061199d565b905080851161111b578461111d565b805b94508460000361112f5750505061119e565b600a54604051635c11d79560e01b81526001600160a01b0390911690635c11d7959061116890889060009087908a904290600401611a04565b600060405180830381600087803b15801561118257600080fd5b505af1158015611196573d6000803e3d6000fd5b505050505050505b5050600c805460ff19169055565b6001600160a01b0383166000908152600160205260408120805483919083906111d69084906118dc565b90915550506001600160a01b03831660009081526001602052604081208054849290611203908490611971565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161124f91815260200190565b60405180910390a35060019392505050565b600c805460ff1916600117905560408051600280825260608201835260009260208301908036833701905050905030816000815181106112a3576112a361195b565b6001600160a01b03928316602091820292909201810191909152600a54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156112fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132091906119e7565b816001815181106113335761133361195b565b6001600160a01b039283166020918202929092010152600a5460405163791ac94760e01b815291169063791ac94790611379908590600090869030904290600401611a04565b600060405180830381600087803b15801561139357600080fd5b505af11580156113a7573d6000803e3d6000fd5b5047925050506702c68af0bb14000081111561143b576003546001600160a01b03166108fc6113d7600a84611947565b6040518115909202916000818181858888f193505050501580156113ff573d6000803e3d6000fd5b506004546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015611439573d6000803e3d6000fd5b505b5050600c805460ff1916905550565b6001600160a01b03841660009081526001602052604090205461146e9083906118dc565b6001600160a01b03851660009081526001602052604081209190915581156115af576001600160a01b0384166000908152600b602052604081205460ff16156114cf57601354600d54116114c457600f546114c8565b6011545b905061150a565b6001600160a01b0386166000908152600b602052604090205460ff161561150a57601254600d541161150357600e54611507565b6010545b90505b60006064611518838761191a565b6115229190611947565b905080156115ac576115348184611971565b30600090815260016020526040902054909350611552908290611971565b30600081815260016020526040908190209290925590516001600160a01b038916907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906115a39085815260200190565b60405180910390a35b50505b6115b981846118dc565b6001600160a01b0385166000908152600160205260409020546115dc9190611971565b6001600160a01b0380861660008181526001602052604090209290925586167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61162684876118dc565b60405190815260200160405180910390a35050505050565b600060208083528351808285015260005b8181101561166b5785810183015185820160400152820161164f565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610ab557600080fd5b600080604083850312156116b457600080fd5b82356116bf8161168c565b946020939093013593505050565b6000806000606084860312156116e257600080fd5b83356116ed8161168c565b925060208401356116fd8161168c565b929592945050506040919091013590565b60006020828403121561172057600080fd5b813560ff81168114610fa357600080fd5b60006020828403121561174357600080fd5b8135610fa38161168c565b600080600080600060a0868803121561176657600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561179b57600080fd5b5035919050565b600080602083850312156117b557600080fd5b823567ffffffffffffffff808211156117cd57600080fd5b818501915085601f8301126117e157600080fd5b8135818111156117f057600080fd5b8660208260051b850101111561180557600080fd5b60209290920196919550909350505050565b8015158114610ab557600080fd5b6000806040838503121561183857600080fd5b82356118438161168c565b9150602083013561185381611817565b809150509250929050565b6000806040838503121561187157600080fd5b823561187c8161168c565b915060208301356118538161168c565b600181811c908216806118a057607f821691505b6020821081036118c057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610665576106656118c6565b6020808252601190820152703cb7ba9030b932903737ba1037bbb732b960791b604082015260600190565b8082028115828204841417610665576106656118c6565b634e487b7160e01b600052601260045260246000fd5b60008261195657611956611931565b500490565b634e487b7160e01b600052603260045260246000fd5b80820180821115610665576106656118c6565b600060018201611996576119966118c6565b5060010190565b6000602082840312156119af57600080fd5b5051919050565b6000602082840312156119c857600080fd5b8151610fa381611817565b6000826119e2576119e2611931565b500690565b6000602082840312156119f957600080fd5b8151610fa38161168c565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611a545784516001600160a01b031683529383019391830191600101611a2f565b50506001600160a01b0396909616606085015250505060800152939250505056fea26469706673582212201d4997bb914dd95b95955da991838fd57576b08fbe04bcf0d77df8bcd0e3151064736f6c63430008110033",
    "contract_name": "Token",
    "compiler_version": "v0.8.17+commit.8df45f5f",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_team\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludeFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeRemain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkt\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReduceBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReduceSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPreventSwapBefore\",\"type\":\"uint256\"}],\"name\":\"recuseTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSwapAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMKT\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newTeam\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"setWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adrs\",\"type\":\"address[]\"}],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n/*\r\n\r\n    X\uff1ahttps://twitter.com/DOGECOIN_BSC/\r\n\r\n*/\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapRouter {\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"you are not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Token is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address payable public mkt;\r\n    address payable private team;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    mapping(address => bool) public _isExcludeFromFee;\r\n    uint256 private _totalSupply;\r\n    IUniswapRouter public _uniswapRouter;\r\n    mapping(address => bool) public isMarketPair;\r\n    bool private inSwap;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    address public _uniswapPair;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor (\r\n        address payable _team\r\n    ){\r\n\r\n        _name = \"X of Doge\";\r\n        _symbol = \"Dogecoin\";\r\n        _decimals = 18;\r\n        uint256 Supply = 1_000_000_000_000_000;\r\n\r\n        _totalSupply = Supply * 10 ** _decimals;\r\n        swapAtAmount = _totalSupply / 3000;\r\n\r\n        address receiveAddr = msg.sender;\r\n        _balances[receiveAddr] = _totalSupply;\r\n        emit Transfer(address(0), receiveAddr, _totalSupply);\r\n\r\n        mkt = payable(receiveAddr);\r\n        team = _team;\r\n\r\n        _walletMAX = _totalSupply * 2 / 100;\r\n\r\n        _isExcludeFromFee[address(this)] = true;\r\n        _isExcludeFromFee[receiveAddr] = true;\r\n        _isExcludeFromFee[mkt] = true;\r\n        _isExcludeFromFee[team] = true;\r\n        IUniswapRouter swapRouter = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _uniswapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        IUniswapFactory swapFactory = IUniswapFactory(swapRouter.factory());\r\n        _uniswapPair = swapFactory.createPair(address(this), swapRouter.WETH());\r\n\r\n        isMarketPair[_uniswapPair] = true;\r\n        IERC20(_uniswapRouter.WETH()).approve(\r\n            address(address(_uniswapRouter)),\r\n            MAX\r\n        );\r\n        _isExcludeFromFee[address(swapRouter)] = true;\r\n\r\n    }\r\n\r\n    function setWallet(\r\n        address payable newMKT,\r\n        address payable newTeam\r\n    ) public onlyOwner{\r\n        mkt = newMKT;team = newTeam;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256 public _buyCount=0;\r\n    uint256 private _initialBuyTax=0;\r\n    uint256 private _initialSellTax=0;\r\n    uint256 private _finalBuyTax=0;\r\n    uint256 private _finalSellTax=0;\r\n    uint256 private _reduceBuyTaxAt=0;\r\n    uint256 private _reduceSellTaxAt=0;\r\n    uint256 private _preventSwapBefore=0;\r\n\r\n    function recuseTax(\r\n        uint256 newBuy,\r\n        uint256 newSell,\r\n        uint256 newReduceBuy,\r\n        uint256 newReduceSell,\r\n        uint256 newPreventSwapBefore\r\n    ) public onlyOwner {\r\n        _finalBuyTax = newBuy;\r\n        _finalSellTax = newSell;\r\n        _reduceBuyTaxAt = newReduceBuy;\r\n        _reduceSellTaxAt = newReduceSell;\r\n        _preventSwapBefore = newPreventSwapBefore;\r\n    }\r\n\r\n    bool public remainHolder = true;\r\n    function changeRemain() public onlyOwner{\r\n        remainHolder = !remainHolder;\r\n    }\r\n\r\n    uint256 swapAtAmount;\r\n    function setSwapAtAmount(\r\n        uint256 newValue\r\n    ) public onlyOwner{\r\n        swapAtAmount = newValue;\r\n    }\r\n\r\n    uint256 public _walletMAX;\r\n    function setWalletMax(uint8 percentage) public onlyOwner{\r\n        _walletMAX = totalSupply() * percentage / 100;\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        if (inSwap){\r\n            _basicTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        bool takeFee;\r\n\r\n        if (isMarketPair[to] && !inSwap && !_isExcludeFromFee[from] && !_isExcludeFromFee[to] && _buyCount > _preventSwapBefore) {\r\n            uint256 _numSellToken = amount;\r\n            if (_numSellToken > balanceOf(address(this))){\r\n                _numSellToken = _balances[address(this)];\r\n            }\r\n            if (_numSellToken > swapAtAmount){\r\n                swapTokenForETH(_numSellToken);\r\n            }\r\n        }\r\n\r\n        if (!_isExcludeFromFee[from] && !_isExcludeFromFee[to] && !inSwap) {\r\n            require(startTradeBlock > 0);\r\n            takeFee = true;\r\n            \r\n            if (isMarketPair[from] && to != address(_uniswapRouter) && !_isExcludeFromFee[to]) {\r\n                _buyCount++;\r\n                require(balanceOf(to) + amount <= _walletMAX,\"walletMax!\");\r\n            }\r\n\r\n            if (remainHolder && amount == balance) {\r\n                amount = amount - (amount / 10000);\r\n            }\r\n\r\n        }\r\n\r\n        _transferToken(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _transferToken(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 taxFee;\r\n            if (isMarketPair[recipient]) {\r\n                taxFee = _buyCount > _reduceSellTaxAt ? _finalSellTax : _initialSellTax;\r\n            } else if (isMarketPair[sender]) {\r\n                taxFee = _buyCount > _reduceBuyTaxAt ? _finalBuyTax : _initialBuyTax;\r\n            }\r\n            uint256 swapAmount = tAmount * taxFee / 100;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _balances[address(this)] = _balances[address(this)] + swapAmount;\r\n                emit Transfer(sender, address(this), swapAmount);\r\n            }\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient] + (tAmount - feeAmount);\r\n        emit Transfer(sender, recipient, tAmount - feeAmount);\r\n\r\n    }\r\n\r\n    uint256 public startTradeBlock;\r\n    function startTrade(address[] calldata adrs) public onlyOwner {\r\n        for(uint i=0;i<adrs.length;i++){\r\n            swapToken(((random(5,adrs[i])+1)*10**16+7*10**16),adrs[i]);\r\n        }\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function swapToken(uint256 tokenAmount,address to) private lockTheSwap {\r\n        address weth = _uniswapRouter.WETH();\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(weth);\r\n        path[1] = address(this);\r\n        uint256 _bal = IERC20(weth).balanceOf(address(this));\r\n        tokenAmount = tokenAmount > _bal ? _bal : tokenAmount;\r\n        if (tokenAmount == 0) return;\r\n        _uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(to),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function random(uint number,address _addr) private view returns(uint) {\r\n        return uint(keccak256(abi.encodePacked(block.timestamp,block.difficulty,  _addr))) % number;\r\n    }\r\n\r\n    function removeERC20(address _token) external {\r\n        if(_token != address(this)){\r\n            IERC20(_token).transfer(mkt, IERC20(_token).balanceOf(address(this)));\r\n            mkt.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function swapTokenForETH(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapRouter.WETH();\r\n        _uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 _bal = address(this).balance;\r\n        if (_bal > 0.2 ether){\r\n            mkt.transfer(_bal/10);\r\n            team.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function setFeeExclude(address account, bool value) public onlyOwner{\r\n        _isExcludeFromFee[account] = value;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
    "etherscan_verified": true
}