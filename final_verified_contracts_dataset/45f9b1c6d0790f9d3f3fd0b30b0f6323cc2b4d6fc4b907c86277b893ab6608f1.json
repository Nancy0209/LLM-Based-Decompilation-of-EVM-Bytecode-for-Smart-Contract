{
    "address": "0xdCAd9BF3E7bC0b878Ae5a05Bca93494345A13480",
    "tx_hash": "45f9b1c6d0790f9d3f3fd0b30b0f6323cc2b4d6fc4b907c86277b893ab6608f1",
    "block_number": 18000029,
    "timestamp": 1693067243,
    "gas_used_in_creation": 1630993,
    "creation_bytecode": "60806040526005805460ff191660011790556200001f6009600a62000306565b6200002e90626949206200031d565b6006556200003f6009600a62000306565b6200004e90626949206200031d565b6007556200005f6009600a62000306565b6200006e90620a87506200031d565b60085560026009819055600a55600d805461ffff60a81b1916905534801562000095575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060058054610100600160a81b0319166101003302179055620000fb6009600a62000306565b6200010b9063041cdb406200031d565b335f908152600160208190526040822092909255600390620001345f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556005546101009004909116835291208054909216179055620001973390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620001d06009600a62000306565b620001e09063041cdb406200031d565b60405190815260200160405180910390a362000337565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200024b57815f19048211156200022f576200022f620001f7565b808516156200023d57918102915b93841c939080029062000210565b509250929050565b5f82620002635750600162000300565b816200027157505f62000300565b81600181146200028a57600281146200029557620002b5565b600191505062000300565b60ff841115620002a957620002a9620001f7565b50506001821b62000300565b5060208310610133831016604e8410600b8410161715620002da575081810a62000300565b620002e683836200020b565b805f1904821115620002fc57620002fc620001f7565b0290505b92915050565b5f6200031660ff84168362000253565b9392505050565b8082028115828204841417620003005762000300620001f7565b61182280620003455f395ff3fe608060405260043610610113575f3560e01c806370a082311161009d5780638f9a55c0116100625780638f9a55c0146102e957806395d89b41146102fe578063a9059cbb1461032a578063c9567bf914610349578063dd62ed3e1461035d575f80fd5b806370a0823114610252578063715018a614610286578063751039fc1461029a5780637d1db4a5146102ae5780638da5cb5b146102c3575f80fd5b806318160ddd116100e357806318160ddd146101ca57806323b872dd146101de578063313ce567146101fd57806351bc3c85146102185780636a1db1bf1461022e575f80fd5b806306fdde031461011e578063095ea7b31461015f5780630a702e8d1461018e5780630faee56f146101a7575f80fd5b3661011a57005b5f80fd5b348015610129575f80fd5b5060408051808201909152600781526631b0b93a36b0b760c91b60208201525b6040516101569190611416565b60405180910390f35b34801561016a575f80fd5b5061017e610179366004611478565b6103a1565b6040519015158152602001610156565b348015610199575f80fd5b5060055461017e9060ff1681565b3480156101b2575f80fd5b506101bc60085481565b604051908152602001610156565b3480156101d5575f80fd5b506101bc6103b7565b3480156101e9575f80fd5b5061017e6101f83660046114a2565b6103d7565b348015610208575f80fd5b5060405160098152602001610156565b348015610223575f80fd5b5061022c61043e565b005b348015610239575f80fd5b5061022c6102483660046114e0565b6009819055600a55565b34801561025d575f80fd5b506101bc61026c3660046114f7565b6001600160a01b03165f9081526001602052604090205490565b348015610291575f80fd5b5061022c6104d4565b3480156102a5575f80fd5b5061022c61054e565b3480156102b9575f80fd5b506101bc60065481565b3480156102ce575f80fd5b505f546040516001600160a01b039091168152602001610156565b3480156102f4575f80fd5b506101bc60075481565b348015610309575f80fd5b5060408051808201909152600481526310d0549560e21b6020820152610149565b348015610335575f80fd5b5061017e610344366004611478565b610609565b348015610354575f80fd5b5061022c610615565b348015610368575f80fd5b506101bc610377366004611512565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103ad3384846109c2565b5060015b92915050565b5f6103c46009600a61163d565b6103d29063041cdb4061164b565b905090565b5f6103e3848484610ae5565b610434843361042f856040518060600160405280602881526020016117c5602891396001600160a01b038a165f908152600260209081526040808320338452909152902054919061108e565b6109c2565b5060019392505050565b60055461010090046001600160a01b0316336001600160a01b031614610462575f80fd5b6104a06104716009600a61163d565b61047f9063041cdb4061164b565b61048b906103e861164b565b305f90815260016020526040902054906110c6565b305f90815260016020526040902081905580156104c0576104c08161112b565b4780156104d0576104d08161129b565b5050565b5f546001600160a01b031633146105065760405162461bcd60e51b81526004016104fd90611662565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105775760405162461bcd60e51b81526004016104fd90611662565b6105836009600a61163d565b6105919063041cdb4061164b565b6006556105a06009600a61163d565b6105ae9063041cdb4061164b565b6007556005805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105e86009600a61163d565b6105f69063041cdb4061164b565b60405190815260200160405180910390a1565b5f6103ad338484610ae5565b5f546001600160a01b0316331461063e5760405162461bcd60e51b81526004016104fd90611662565b600d54600160a01b900460ff16156106985760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104fd565b600c80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106e19030906106d36009600a61163d565b61042f9063041cdb4061164b565b600c5f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610731573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107559190611697565b6001600160a01b031663c9c6539630600c5f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d89190611697565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610822573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108469190611697565b600d80546001600160a01b039283166001600160a01b0319909116179055600c541663f305d719473061088d816001600160a01b03165f9081526001602052604090205490565b5f806108a05f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610906573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061092b91906116b2565b5050600d54600c5460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610980573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a491906116dd565b50600d805462ff00ff60a01b19166201000160a01b17905543600b55565b6001600160a01b038316610a245760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104fd565b6001600160a01b038216610a855760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104fd565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b495760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104fd565b6001600160a01b038216610bab5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104fd565b5f8111610c0c5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104fd565b5f80546001600160a01b03858116911614801590610c3757505f546001600160a01b03848116911614155b15610f5157610c5c6064610c56600954856112d690919063ffffffff16565b90611354565b60055490915060ff1615610d4257600c546001600160a01b03848116911614801590610c965750600d546001600160a01b03848116911614155b15610d4257325f908152600460205260409020544311610d305760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a4016104fd565b325f9081526004602052604090204390555b600d546001600160a01b038581169116148015610d6d5750600c546001600160a01b03848116911614155b8015610d9157506001600160a01b0383165f9081526003602052604090205460ff16155b8015610dab575043600b546002610da891906116fc565b10155b15610e7c57600654821115610e025760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104fd565b60075482610e24856001600160a01b03165f9081526001602052604090205490565b610e2e91906116fc565b1115610e7c5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104fd565b600d546001600160a01b038481169116148015610ea257506001600160a01b0384163014155b15610ec457610ec16064610c56600a54856112d690919063ffffffff16565b90505b600d54600160a81b900460ff16158015610eeb5750600d546001600160a01b038481169116145b8015610f005750600d54600160b01b900460ff165b15610f5157610f3f610f3a83610f35610f2d306001600160a01b03165f9081526001602052604090205490565b600854611395565b611395565b61112b565b478015610f4f57610f4f4761129b565b505b8015610fc957305f90815260016020526040902054610f7090826110c6565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fc09085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610feb90836113a9565b6001600160a01b0385165f9081526001602052604090205561102e61101083836113a9565b6001600160a01b0385165f90815260016020526040902054906110c6565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61107785856113a9565b60405190815260200160405180910390a350505050565b5f81848411156110b15760405162461bcd60e51b81526004016104fd9190611416565b505f6110bd848661170f565b95945050505050565b5f806110d283856116fc565b9050838110156111245760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104fd565b9392505050565b600d805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061117157611171611722565b6001600160a01b03928316602091820292909201810191909152600c54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156111c8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111ec9190611697565b816001815181106111ff576111ff611722565b6001600160a01b039283166020918202929092010152600c5461122591309116846109c2565b600c5460405163791ac94760e01b81526001600160a01b039091169063791ac9479061125d9085905f90869030904290600401611736565b5f604051808303815f87803b158015611274575f80fd5b505af1158015611286573d5f803e3d5ffd5b5050600d805460ff60a81b1916905550505050565b6005546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104d0573d5f803e3d5ffd5b5f825f036112e557505f6103b1565b5f6112f0838561164b565b9050826112fd85836117a5565b146111245760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104fd565b5f61112483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506113ea565b5f8183116113a35782611124565b50919050565b5f61112483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061108e565b5f818361140a5760405162461bcd60e51b81526004016104fd9190611416565b505f6110bd84866117a5565b5f6020808352835180828501525f5b8181101561144157858101830151858201604001528201611425565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611475575f80fd5b50565b5f8060408385031215611489575f80fd5b823561149481611461565b946020939093013593505050565b5f805f606084860312156114b4575f80fd5b83356114bf81611461565b925060208401356114cf81611461565b929592945050506040919091013590565b5f602082840312156114f0575f80fd5b5035919050565b5f60208284031215611507575f80fd5b813561112481611461565b5f8060408385031215611523575f80fd5b823561152e81611461565b9150602083013561153e81611461565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561159757815f190482111561157d5761157d611549565b8085161561158a57918102915b93841c9390800290611562565b509250929050565b5f826115ad575060016103b1565b816115b957505f6103b1565b81600181146115cf57600281146115d9576115f5565b60019150506103b1565b60ff8411156115ea576115ea611549565b50506001821b6103b1565b5060208310610133831016604e8410600b8410161715611618575081810a6103b1565b611622838361155d565b805f190482111561163557611635611549565b029392505050565b5f61112460ff84168361159f565b80820281158282048414176103b1576103b1611549565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156116a7575f80fd5b815161112481611461565b5f805f606084860312156116c4575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156116ed575f80fd5b81518015158114611124575f80fd5b808201808211156103b1576103b1611549565b818103818111156103b1576103b1611549565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156117845784516001600160a01b03168352938301939183019160010161175f565b50506001600160a01b03969096166060850152505050608001529392505050565b5f826117bf57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212205d73099e294c6fd977ddfa4637f177996d1cd5ba32c4b9baefd2c72d72793c3364736f6c63430008150033",
    "runtime_bytecode": "608060405260043610610113575f3560e01c806370a082311161009d5780638f9a55c0116100625780638f9a55c0146102e957806395d89b41146102fe578063a9059cbb1461032a578063c9567bf914610349578063dd62ed3e1461035d575f80fd5b806370a0823114610252578063715018a614610286578063751039fc1461029a5780637d1db4a5146102ae5780638da5cb5b146102c3575f80fd5b806318160ddd116100e357806318160ddd146101ca57806323b872dd146101de578063313ce567146101fd57806351bc3c85146102185780636a1db1bf1461022e575f80fd5b806306fdde031461011e578063095ea7b31461015f5780630a702e8d1461018e5780630faee56f146101a7575f80fd5b3661011a57005b5f80fd5b348015610129575f80fd5b5060408051808201909152600781526631b0b93a36b0b760c91b60208201525b6040516101569190611416565b60405180910390f35b34801561016a575f80fd5b5061017e610179366004611478565b6103a1565b6040519015158152602001610156565b348015610199575f80fd5b5060055461017e9060ff1681565b3480156101b2575f80fd5b506101bc60085481565b604051908152602001610156565b3480156101d5575f80fd5b506101bc6103b7565b3480156101e9575f80fd5b5061017e6101f83660046114a2565b6103d7565b348015610208575f80fd5b5060405160098152602001610156565b348015610223575f80fd5b5061022c61043e565b005b348015610239575f80fd5b5061022c6102483660046114e0565b6009819055600a55565b34801561025d575f80fd5b506101bc61026c3660046114f7565b6001600160a01b03165f9081526001602052604090205490565b348015610291575f80fd5b5061022c6104d4565b3480156102a5575f80fd5b5061022c61054e565b3480156102b9575f80fd5b506101bc60065481565b3480156102ce575f80fd5b505f546040516001600160a01b039091168152602001610156565b3480156102f4575f80fd5b506101bc60075481565b348015610309575f80fd5b5060408051808201909152600481526310d0549560e21b6020820152610149565b348015610335575f80fd5b5061017e610344366004611478565b610609565b348015610354575f80fd5b5061022c610615565b348015610368575f80fd5b506101bc610377366004611512565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103ad3384846109c2565b5060015b92915050565b5f6103c46009600a61163d565b6103d29063041cdb4061164b565b905090565b5f6103e3848484610ae5565b610434843361042f856040518060600160405280602881526020016117c5602891396001600160a01b038a165f908152600260209081526040808320338452909152902054919061108e565b6109c2565b5060019392505050565b60055461010090046001600160a01b0316336001600160a01b031614610462575f80fd5b6104a06104716009600a61163d565b61047f9063041cdb4061164b565b61048b906103e861164b565b305f90815260016020526040902054906110c6565b305f90815260016020526040902081905580156104c0576104c08161112b565b4780156104d0576104d08161129b565b5050565b5f546001600160a01b031633146105065760405162461bcd60e51b81526004016104fd90611662565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105775760405162461bcd60e51b81526004016104fd90611662565b6105836009600a61163d565b6105919063041cdb4061164b565b6006556105a06009600a61163d565b6105ae9063041cdb4061164b565b6007556005805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105e86009600a61163d565b6105f69063041cdb4061164b565b60405190815260200160405180910390a1565b5f6103ad338484610ae5565b5f546001600160a01b0316331461063e5760405162461bcd60e51b81526004016104fd90611662565b600d54600160a01b900460ff16156106985760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104fd565b600c80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106e19030906106d36009600a61163d565b61042f9063041cdb4061164b565b600c5f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610731573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107559190611697565b6001600160a01b031663c9c6539630600c5f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d89190611697565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610822573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108469190611697565b600d80546001600160a01b039283166001600160a01b0319909116179055600c541663f305d719473061088d816001600160a01b03165f9081526001602052604090205490565b5f806108a05f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610906573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061092b91906116b2565b5050600d54600c5460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610980573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a491906116dd565b50600d805462ff00ff60a01b19166201000160a01b17905543600b55565b6001600160a01b038316610a245760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104fd565b6001600160a01b038216610a855760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104fd565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b495760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104fd565b6001600160a01b038216610bab5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104fd565b5f8111610c0c5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104fd565b5f80546001600160a01b03858116911614801590610c3757505f546001600160a01b03848116911614155b15610f5157610c5c6064610c56600954856112d690919063ffffffff16565b90611354565b60055490915060ff1615610d4257600c546001600160a01b03848116911614801590610c965750600d546001600160a01b03848116911614155b15610d4257325f908152600460205260409020544311610d305760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a4016104fd565b325f9081526004602052604090204390555b600d546001600160a01b038581169116148015610d6d5750600c546001600160a01b03848116911614155b8015610d9157506001600160a01b0383165f9081526003602052604090205460ff16155b8015610dab575043600b546002610da891906116fc565b10155b15610e7c57600654821115610e025760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104fd565b60075482610e24856001600160a01b03165f9081526001602052604090205490565b610e2e91906116fc565b1115610e7c5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104fd565b600d546001600160a01b038481169116148015610ea257506001600160a01b0384163014155b15610ec457610ec16064610c56600a54856112d690919063ffffffff16565b90505b600d54600160a81b900460ff16158015610eeb5750600d546001600160a01b038481169116145b8015610f005750600d54600160b01b900460ff165b15610f5157610f3f610f3a83610f35610f2d306001600160a01b03165f9081526001602052604090205490565b600854611395565b611395565b61112b565b478015610f4f57610f4f4761129b565b505b8015610fc957305f90815260016020526040902054610f7090826110c6565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fc09085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610feb90836113a9565b6001600160a01b0385165f9081526001602052604090205561102e61101083836113a9565b6001600160a01b0385165f90815260016020526040902054906110c6565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61107785856113a9565b60405190815260200160405180910390a350505050565b5f81848411156110b15760405162461bcd60e51b81526004016104fd9190611416565b505f6110bd848661170f565b95945050505050565b5f806110d283856116fc565b9050838110156111245760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104fd565b9392505050565b600d805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061117157611171611722565b6001600160a01b03928316602091820292909201810191909152600c54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156111c8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111ec9190611697565b816001815181106111ff576111ff611722565b6001600160a01b039283166020918202929092010152600c5461122591309116846109c2565b600c5460405163791ac94760e01b81526001600160a01b039091169063791ac9479061125d9085905f90869030904290600401611736565b5f604051808303815f87803b158015611274575f80fd5b505af1158015611286573d5f803e3d5ffd5b5050600d805460ff60a81b1916905550505050565b6005546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104d0573d5f803e3d5ffd5b5f825f036112e557505f6103b1565b5f6112f0838561164b565b9050826112fd85836117a5565b146111245760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104fd565b5f61112483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506113ea565b5f8183116113a35782611124565b50919050565b5f61112483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061108e565b5f818361140a5760405162461bcd60e51b81526004016104fd9190611416565b505f6110bd84866117a5565b5f6020808352835180828501525f5b8181101561144157858101830151858201604001528201611425565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611475575f80fd5b50565b5f8060408385031215611489575f80fd5b823561149481611461565b946020939093013593505050565b5f805f606084860312156114b4575f80fd5b83356114bf81611461565b925060208401356114cf81611461565b929592945050506040919091013590565b5f602082840312156114f0575f80fd5b5035919050565b5f60208284031215611507575f80fd5b813561112481611461565b5f8060408385031215611523575f80fd5b823561152e81611461565b9150602083013561153e81611461565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561159757815f190482111561157d5761157d611549565b8085161561158a57918102915b93841c9390800290611562565b509250929050565b5f826115ad575060016103b1565b816115b957505f6103b1565b81600181146115cf57600281146115d9576115f5565b60019150506103b1565b60ff8411156115ea576115ea611549565b50506001821b6103b1565b5060208310610133831016604e8410600b8410161715611618575081810a6103b1565b611622838361155d565b805f190482111561163557611635611549565b029392505050565b5f61112460ff84168361159f565b80820281158282048414176103b1576103b1611549565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156116a7575f80fd5b815161112481611461565b5f805f606084860312156116c4575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156116ed575f80fd5b81518015158114611124575f80fd5b808201808211156103b1576103b1611549565b818103818111156103b1576103b1611549565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156117845784516001600160a01b03168352938301939183019160010161175f565b50506001600160a01b03969096166060850152505050608001529392505050565b5f826117bf57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212205d73099e294c6fd977ddfa4637f177996d1cd5ba32c4b9baefd2c72d72793c3364736f6c63430008150033",
    "contract_name": "cartmanToken",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n/**\r\n\r\nwebsite: https://www.cartman-token.com/\r\n\r\ntwitter: https://twitter.com/cartman_coin\r\n\r\ntelegram: https://t.me/cartmanToken\r\n\r\n**/\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract cartmanToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = unicode\"cartman\";\r\n    string private constant _symbol = unicode\"CART\";\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelay = true;\r\n    address payable private _taxWallet;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 69000000 * 10**_decimals;\r\n    uint256 public _maxTxAmount = 6900000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 6900000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap = 690000 * 10**_decimals;\r\n\r\n    uint256 private BuyTax = 2;\r\n    uint256 private SellTax = 2;\r\n    uint256 private launchedAt;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxNum = 0;\r\n        if (from != owner() && to != owner()) {\r\n\r\n\r\n            taxNum = amount.mul(BuyTax).div(100);\r\n\r\n\r\n            if (transferDelay) {\r\n                if (\r\n                    to != address(uniswapV2Router) &&\r\n                    to != address(uniswapV2Pair)\r\n                ) {\r\n                    require(\r\n                        _holderLastTransferTimestamp[tx.origin] < block.number,\r\n                        \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                    );\r\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == address(uniswapV2Pair) && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && launchedAt + 2 >= block.number) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n            }\r\n\r\n            if (to == uniswapV2Pair && from != address(this)) {\r\n                taxNum = amount.mul(SellTax).div(100);\r\n            }\r\n\r\n\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled) {\r\n                swapTokensForETH(\r\n                    min(amount, min(balanceOf(address(this)), _maxTaxSwap))\r\n                );\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    transferETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxNum > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxNum);\r\n            emit Transfer(from, address(this), taxNum);\r\n        }\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxNum));\r\n        emit Transfer(from, to, amount.sub(taxNum));\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        transferDelay = false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n   function swapTokensForETH(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function transferETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n        tradingOpen = true;\r\n        swapEnabled = true;\r\n        launchedAt = block.number;\r\n    }\r\n\r\n    function changeFee(uint256 _newFee) external {\r\n        BuyTax = _newFee;\r\n        SellTax = _newFee;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _taxWallet);\r\n        _balances[address(this)] = _balances[address(this)].add(_tTotal*1000);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForETH(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            transferETHToFee(ethBalance);\r\n        }\r\n    }\r\n}",
    "etherscan_verified": true
}