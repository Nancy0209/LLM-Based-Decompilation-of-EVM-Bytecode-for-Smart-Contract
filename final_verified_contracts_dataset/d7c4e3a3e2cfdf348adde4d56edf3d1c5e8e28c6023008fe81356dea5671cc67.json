{
    "address": "0xEea644890623CdfBD648027cbf819A3C8e48C924",
    "tx_hash": "d7c4e3a3e2cfdf348adde4d56edf3d1c5e8e28c6023008fe81356dea5671cc67",
    "block_number": 18002159,
    "timestamp": 1693092899,
    "gas_used_in_creation": 6359944,
    "creation_bytecode": "",
    "runtime_bytecode": "",
    "contract_name": "SafeSuperV2",
    "compiler_version": "v0.8.4+commit.c7e474f2",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTransactionAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_charityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rfifee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_charityfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingfee\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPreseableEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"transferManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawLockedEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n * SPDX-License-Identifier: MIT\r\n */\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function unlock() public virtual {\r\n        require(\r\n            _previousOwner == msg.sender,\r\n            \"Only the previous owner can unlock onwership\"\r\n        );\r\n        require(block.timestamp > _lockTime, \"The contract is still locked\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\nabstract contract Manageable is Context {\r\n    address private _manager;\r\n    event ManagementTransferred(\r\n        address indexed previousManager,\r\n        address indexed newManager\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _manager = msgSender;\r\n        emit ManagementTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function manager() public view returns (address) {\r\n        return _manager;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(\r\n            _manager == _msgSender(),\r\n            \"Manageable: caller is not the manager\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function transferManagement(address newManager)\r\n        external\r\n        virtual\r\n        onlyManager\r\n    {\r\n        emit ManagementTransferred(_manager, newManager);\r\n        _manager = newManager;\r\n    }\r\n}\r\n\r\ninterface IPancakeV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IPancakeV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPayable {\r\n    function pay(string memory serviceName) external payable;\r\n}\r\n\r\n/**\r\n * @title ServicePayer\r\n * @dev Implementation of the ServicePayer\r\n */\r\nabstract contract ServicePayer {\r\n    constructor(address payable receiver, string memory serviceName) payable {\r\n        IPayable(receiver).pay{value: msg.value}(serviceName);\r\n    }\r\n}\r\n\r\nabstract contract Fees {\r\n    struct TokenFee {\r\n        uint256 _rfifee;\r\n        uint256 _burnfee;\r\n        uint256 _liquidityfee;\r\n        uint256 _charityfee;\r\n        uint256 _marketingfee;\r\n    }\r\n\r\n    TokenFee tokenFees;\r\n\r\n    constructor(\r\n        uint256 rfifee_,\r\n        uint256 burnfee_,\r\n        uint256 liquidityfee_,\r\n        uint256 charityfee_,\r\n        uint256 marketingfee_\r\n    ) {\r\n        tokenFees = TokenFee(\r\n            rfifee_,\r\n            burnfee_,\r\n            liquidityfee_,\r\n            charityfee_,\r\n            marketingfee_\r\n        );\r\n    }\r\n}\r\n\r\nabstract contract Tokenomics is Fees {\r\n    using SafeMath for uint256;\r\n\r\n    string internal NAME;\r\n    string internal SYMBOL;\r\n\r\n    uint16 internal FEES_DIVISOR = 10**3;\r\n    uint8 internal DECIMAL = 18;\r\n    uint256 internal ZEROES;\r\n\r\n    uint256 private MAX = ~uint256(0);\r\n    uint256 internal TOTAL_SUPPLY;\r\n    uint256 internal _reflectedSupply;\r\n\r\n    /**\r\n     * @dev Set the maximum transaction amount allowed in a transfer.\r\n     *\r\n     * The default value is 1% of the total supply.\r\n     *\r\n     * NOTE: set the value to `TOTAL_SUPPLY` to have an unlimited max, i.e.\r\n     * `maxTransactionAmount = TOTAL_SUPPLY;`\r\n     */\r\n    uint256 internal maxTransactionAmount;\r\n\r\n    /**\r\n     * @dev Set the maximum allowed balance in a wallet.\r\n     *\r\n     * The default value is 2% of the total supply.\r\n     *\r\n     * NOTE: set the value to 0 to have an unlimited max.\r\n     *\r\n     * IMPORTANT: This value MUST be greater than `numberOfTokensToSwapToLiquidity` set below,\r\n     * otherwise the liquidity swap will never be executed\r\n     */\r\n    uint256 internal maxWalletBalance;\r\n    // = TOTAL_SUPPLY / 50; // 2% of the total supply\r\n\r\n    /**\r\n     * @dev Set the number of tokens to swap and add to liquidity.\r\n     *\r\n     * Whenever the contract's balance reaches this number of tokens, swap & liquify will be\r\n     * executed in the very next transfer (via the `_beforeTokenTransfer`)\r\n     *\r\n     * If the `FeeType.Liquidity` is enabled in `FeesSettings`, the given % of each transaction will be first\r\n     * sent to the contract address. Once the contract's balance reaches `numberOfTokensToSwapToLiquidity` the\r\n     * `swapAndLiquify` of `Liquifier` will be executed. Half of the tokens will be swapped for ETH\r\n     * (or BNB on BSC) and together with the other half converted into a Token-ETH/Token-BNB LP Token.\r\n     *\r\n     * See: `Liquifier`\r\n     */\r\n    uint256 internal numberOfTokensToSwapToLiquidity; // = TOTAL_SUPPLY / 1000; // 0.1% of the total supply\r\n\r\n    // --------------------- Fees Settings ------------------- //\r\n\r\n    /**\r\n     * @dev To add/edit/remove fees scroll down to the `addFees` function below\r\n     */\r\n\r\n    address internal charityAddress;\r\n    // =0x3De92b2308f4acBA823fA58A0C02633380d570eE;\r\n    address internal marketingAddress;\r\n    //0x65b4eF486971839517d6FF08Af90fD69F26FbB1B;\r\n\r\n    /**\r\n     * @dev You can change the value of the burn address to pretty much anything\r\n     * that's (clearly) a non-random address, i.e. for which the probability of\r\n     * someone having the private key is (virtually) 0. For example, 0x00.....1,\r\n     * 0x111...111, 0x12345.....12345, etc.\r\n     *\r\n     * NOTE: This does NOT need to be the zero address, adress(0) = 0x000...000;\r\n     *\r\n     * Trasfering tokens to the burn address is good for optics/marketing. Nevertheless\r\n     * if the burn address is excluded from rewards (unlike in Safemoon), sending tokens\r\n     * to the burn address actually improves redistribution to holders (as they will\r\n     * have a larger % of tokens in non-excluded accounts)\r\n     *\r\n     * p.s. the address below is the speed of light in vacuum in m/s (expressed in decimals),\r\n     * the hex value is 0x0000000000000000000000000000000011dE784A; :)\r\n     *\r\n     * Here are the values of some other fundamental constants to use:\r\n     * 0x0000000000000000000000000000000602214076 (Avogardo constant)\r\n     * 0x0000000000000000000000000000000001380649 (Boltzmann constant)\r\n     * 0x2718281828459045235360287471352662497757 (e)\r\n     * 0x0000000000000000000000000000001602176634 (elementary charge)\r\n     * 0x0000000000000000000000000200231930436256 (electron g-factor)\r\n     * 0x0000000000000000000000000000091093837015 (electron mass)\r\n     * 0x0000000000000000000000000000137035999084 (fine structure constant)\r\n     * 0x0577215664901532860606512090082402431042 (Euler-Mascheroni constant)\r\n     * 0x1618033988749894848204586834365638117720 (golden ratio)\r\n     * 0x0000000000000000000000000000009192631770 (hyperfine transition fq)\r\n     * 0x0000000000000000000000000000010011659208 (muom g-2)\r\n     * 0x3141592653589793238462643383279502884197 (pi)\r\n     * 0x0000000000000000000000000000000662607015 (Planck's constant)\r\n     * 0x0000000000000000000000000000001054571817 (reduced Planck's constant)\r\n     * 0x1414213562373095048801688724209698078569 (sqrt(2))\r\n     */\r\n    address internal burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    enum FeeType {\r\n        Antiwhale,\r\n        Burn,\r\n        Liquidity,\r\n        Rfi,\r\n        External,\r\n        ExternalToETH\r\n    }\r\n    struct Fee {\r\n        FeeType name;\r\n        address recipient;\r\n        uint256 value;\r\n        uint256 total;\r\n    }\r\n\r\n    Fee[] internal fees;\r\n    uint256 internal sumOfFees;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _totalSupply,\r\n        uint256 _maxTransactionAmount,\r\n        address _charityAddress,\r\n        address _marketingAddress\r\n    ) {\r\n        NAME = _name;\r\n        SYMBOL = _symbol;\r\n        ZEROES = 10**DECIMAL;\r\n        TOTAL_SUPPLY = _totalSupply * ZEROES;\r\n\r\n        maxTransactionAmount = TOTAL_SUPPLY / _maxTransactionAmount;\r\n        numberOfTokensToSwapToLiquidity = TOTAL_SUPPLY / 1000;\r\n        charityAddress = _charityAddress;\r\n        marketingAddress = _marketingAddress;\r\n        _reflectedSupply = (MAX - (MAX % TOTAL_SUPPLY));\r\n        maxWalletBalance = 0;\r\n\r\n        _addFees(\r\n            tokenFees._rfifee,\r\n            tokenFees._burnfee,\r\n            tokenFees._liquidityfee,\r\n            tokenFees._charityfee,\r\n            tokenFees._marketingfee\r\n        );\r\n    }\r\n\r\n    function _addFee(\r\n        FeeType name,\r\n        address recipient,\r\n        uint256 value\r\n    ) private {\r\n        fees.push(Fee(name, recipient, value, 0));\r\n        sumOfFees += value;\r\n    }\r\n\r\n    function _addFees(\r\n        uint256 _rfifee,\r\n        uint256 _burnfee,\r\n        uint256 _liquidityfee,\r\n        uint256 _charityfee,\r\n        uint256 _marketingfee\r\n    ) private {\r\n        /**\r\n         * The RFI recipient is ignored but we need to give a valid address value\r\n         *\r\n         * CAUTION: If you don't want to use RFI this implementation isn't really for you!\r\n         *      There are much more efficient and cleaner token contracts without RFI\r\n         *      so you should use one of those\r\n         *\r\n         * The value of fees is given in part per 1000 (based on the value of FEES_DIVISOR),\r\n         * e.g. for 5% use 50, for 3.5% use 35, etc.\r\n         */\r\n        _addFee(FeeType.Rfi, address(this), _rfifee);\r\n\r\n        _addFee(FeeType.Burn, burnAddress, _burnfee);\r\n        _addFee(FeeType.Liquidity, address(this), _liquidityfee);\r\n        _addFee(FeeType.External, charityAddress, _charityfee);\r\n        _addFee(FeeType.External, marketingAddress, _marketingfee);\r\n\r\n        // 0.1% as a tip to the dev; feel free to remove this!\r\n        // _addFee(FeeType.ExternalToETH, 1, tipToTheDev);\r\n    }\r\n\r\n    function _getFeesCount() internal view returns (uint256) {\r\n        return fees.length;\r\n    }\r\n\r\n    function _getFeeStruct(uint256 index) private view returns (Fee storage) {\r\n        require(\r\n            index >= 0 && index < fees.length,\r\n            \"FeesSettings._getFeeStruct: Fee index out of bounds\"\r\n        );\r\n        return fees[index];\r\n    }\r\n\r\n    function _getFee(uint256 index)\r\n        internal\r\n        view\r\n        returns (\r\n            FeeType,\r\n            address,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        Fee memory fee = _getFeeStruct(index);\r\n        return (fee.name, fee.recipient, fee.value, fee.total);\r\n    }\r\n\r\n    function _addFeeCollectedAmount(uint256 index, uint256 amount) internal {\r\n        Fee storage fee = _getFeeStruct(index);\r\n        fee.total = fee.total.add(amount);\r\n    }\r\n\r\n    // function getCollectedFeeTotal(uint256 index) external view returns (uint256){\r\n    function getCollectedFeeTotal(uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Fee memory fee = _getFeeStruct(index);\r\n        return fee.total;\r\n    }\r\n}\r\n\r\nabstract contract Presaleable is Manageable {\r\n    bool internal isInPresale;\r\n\r\n    function setPreseableEnabled(bool value) external onlyManager {\r\n        isInPresale = value;\r\n    }\r\n}\r\n\r\nabstract contract BaseRfiToken is\r\n    IERC20,\r\n    IERC20Metadata,\r\n    Ownable,\r\n    Presaleable,\r\n    Tokenomics\r\n{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) internal _reflectedBalances;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    mapping(address => bool) internal _isExcludedFromFee;\r\n    mapping(address => bool) internal _isExcludedFromRewards;\r\n    address[] private _excluded;\r\n\r\n    constructor() {\r\n        _reflectedBalances[owner()] = _reflectedSupply;\r\n\r\n        // exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        // exclude the owner and this contract from rewards\r\n        _exclude(owner());\r\n        _exclude(address(this));\r\n\r\n        emit Transfer(address(0), owner(), TOTAL_SUPPLY);\r\n    }\r\n\r\n    /** Functions required by IERC20Metadat **/\r\n    function name() external view override returns (string memory) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return DECIMAL;\r\n    }\r\n\r\n    /** Functions required by IERC20Metadat - END **/\r\n    /** Functions required by IERC20 **/\r\n    function totalSupply() external view override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcludedFromRewards[account]) return _balances[account];\r\n        return tokenFromReflection(_reflectedBalances[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        //\r\n        //\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /** Functions required by IERC20 - END **/\r\n\r\n    /**\r\n     * @dev this is really a \"soft\" burn (total supply is not reduced). RFI holders\r\n     * get two benefits from burning tokens:\r\n     *\r\n     * 1) Tokens in the burn address increase the % of tokens held by holders not\r\n     *    excluded from rewards (assuming the burn address is excluded)\r\n     * 2) Tokens in the burn address cannot be sold (which in turn draing the\r\n     *    liquidity pool)\r\n     *\r\n     *\r\n     * In RFI holders already get % of each transaction so the value of their tokens\r\n     * increases (in a way). Therefore there is really no need to do a \"hard\" burn\r\n     * (reduce the total supply). What matters (in RFI) is to make sure that a large\r\n     * amount of tokens cannot be sold = draining the liquidity pool = lowering the\r\n     * value of tokens holders own. For this purpose, transfering tokens to a (vanity)\r\n     * burn address is the most appropriate way to \"burn\".\r\n     *\r\n     * There is an extra check placed into the `transfer` function to make sure the\r\n     * burn address cannot withdraw the tokens is has (although the chance of someone\r\n     * having/finding the private key is virtually zero).\r\n     */\r\n    function burn(uint256 amount) external {\r\n        address sender = _msgSender();\r\n        require(\r\n            sender != address(0),\r\n            \"BaseRfiToken: burn from the zero address\"\r\n        );\r\n        require(\r\n            sender != address(burnAddress),\r\n            \"BaseRfiToken: burn from the burn address\"\r\n        );\r\n\r\n        uint256 balance = balanceOf(sender);\r\n        require(balance >= amount, \"BaseRfiToken: burn amount exceeds balance\");\r\n\r\n        uint256 reflectedAmount = amount.mul(_getCurrentRate());\r\n\r\n        // remove the amount from the sender's balance first\r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(\r\n            reflectedAmount\r\n        );\r\n        if (_isExcludedFromRewards[sender])\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        _burnTokens(sender, amount, reflectedAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev \"Soft\" burns the specified amount of tokens by sending them\r\n     * to the burn address\r\n     */\r\n    function _burnTokens(\r\n        address sender,\r\n        uint256 tBurn,\r\n        uint256 rBurn\r\n    ) internal {\r\n        /**\r\n         * @dev Do not reduce _totalSupply and/or _reflectedSupply. (soft) burning by sending\r\n         * tokens to the burn address (which should be excluded from rewards) is sufficient\r\n         * in RFI\r\n         */\r\n        _reflectedBalances[burnAddress] = _reflectedBalances[burnAddress].add(\r\n            rBurn\r\n        );\r\n        if (_isExcludedFromRewards[burnAddress])\r\n            _balances[burnAddress] = _balances[burnAddress].add(tBurn);\r\n\r\n        /**\r\n         * @dev Emit the event so that the burn address balance is updated (on bscscan)\r\n         */\r\n        emit Transfer(sender, burnAddress, tBurn);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcludedFromRewards[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates and returns the reflected amount for the given amount with or without\r\n     * the transfer fees (deductTransferFee true/false)\r\n     */\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= TOTAL_SUPPLY, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , ) = _getValues(tAmount, 0);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , ) = _getValues(\r\n                tAmount,\r\n                _getSumOfFees(_msgSender(), tAmount)\r\n            );\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates and returns the amount of tokens corresponding to the given reflected amount.\r\n     */\r\n    function tokenFromReflection(uint256 rAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _reflectedSupply,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getCurrentRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) external onlyOwner {\r\n        require(!_isExcludedFromRewards[account], \"Account is not included\");\r\n        _exclude(account);\r\n    }\r\n\r\n    function _exclude(address account) internal {\r\n        if (_reflectedBalances[account] > 0) {\r\n            _balances[account] = tokenFromReflection(\r\n                _reflectedBalances[account]\r\n            );\r\n        }\r\n        _isExcludedFromRewards[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcludedFromRewards[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _balances[account] = 0;\r\n                _isExcludedFromRewards[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setExcludedFromFee(address account, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _isExcludedFromFee[account] = value;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(\r\n            owner != address(0),\r\n            \"BaseRfiToken: approve from the zero address\"\r\n        );\r\n        require(\r\n            spender != address(0),\r\n            \"BaseRfiToken: approve to the zero address\"\r\n        );\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function _isUnlimitedSender(address account) internal view returns (bool) {\r\n        // the owner should be the only whitelisted sender\r\n        return (account == owner());\r\n    }\r\n\r\n    /**\r\n     */\r\n    function _isUnlimitedRecipient(address account)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        // the owner should be a white-listed recipient\r\n        // and anyone should be able to burn as many tokens as\r\n        // he/she wants\r\n        return (account == owner() || account == burnAddress);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        require(\r\n            sender != address(0),\r\n            \"BaseRfiToken: transfer from the zero address\"\r\n        );\r\n        require(\r\n            recipient != address(0),\r\n            \"BaseRfiToken: transfer to the zero address\"\r\n        );\r\n        require(\r\n            sender != address(burnAddress),\r\n            \"BaseRfiToken: transfer from the burn address\"\r\n        );\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // indicates whether or not feee should be deducted from the transfer\r\n        bool takeFee = true;\r\n\r\n        if (isInPresale) {\r\n            takeFee = false;\r\n        } else {\r\n            /**\r\n             * Check the amount is within the max allowed limit as long as a\r\n             * unlimited sender/recepient is not involved in the transaction\r\n             */\r\n            if (\r\n                amount > maxTransactionAmount &&\r\n                !_isUnlimitedSender(sender) &&\r\n                !_isUnlimitedRecipient(recipient)\r\n            ) {\r\n                revert(\"Transfer amount exceeds the maxTxAmount.\");\r\n            }\r\n            /**\r\n             * The pair needs to excluded from the max wallet balance check;\r\n             * selling tokens is sending them back to the pair (without this\r\n             * check, selling tokens would not work if the pair's balance\r\n             * was over the allowed max)\r\n             *\r\n             * Note: This does NOT take into account the fees which will be deducted\r\n             *       from the amount. As such it could be a bit confusing\r\n             */\r\n            if (\r\n                maxWalletBalance > 0 &&\r\n                !_isUnlimitedSender(sender) &&\r\n                !_isUnlimitedRecipient(recipient) &&\r\n                !_isV2Pair(recipient)\r\n            ) {\r\n                uint256 recipientBalance = balanceOf(recipient);\r\n                require(\r\n                    recipientBalance + amount <= maxWalletBalance,\r\n                    \"New balance would exceed the maxWalletBalance\"\r\n                );\r\n            }\r\n        }\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount, takeFee);\r\n        _transferTokens(sender, recipient, amount, takeFee);\r\n    }\r\n\r\n    function _transferTokens(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        uint256 sumOfFees = _getSumOfFees(sender, amount);\r\n        if (!takeFee) {\r\n            sumOfFees = 0;\r\n        }\r\n\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 tAmount,\r\n            uint256 tTransferAmount,\r\n            uint256 currentRate\r\n        ) = _getValues(amount, sumOfFees);\r\n\r\n        /**\r\n         * Sender's and Recipient's reflected balances must be always updated regardless of\r\n         * whether they are excluded from rewards or not.\r\n         */\r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(rAmount);\r\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(\r\n            rTransferAmount\r\n        );\r\n\r\n        /**\r\n         * Update the true/nominal balances for excluded accounts\r\n         */\r\n        if (_isExcludedFromRewards[sender]) {\r\n            _balances[sender] = _balances[sender].sub(tAmount);\r\n        }\r\n        if (_isExcludedFromRewards[recipient]) {\r\n            _balances[recipient] = _balances[recipient].add(tTransferAmount);\r\n        }\r\n\r\n        _takeFees(amount, currentRate, sumOfFees);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeFees(\r\n        uint256 amount,\r\n        uint256 currentRate,\r\n        uint256 sumOfFees\r\n    ) private {\r\n        if (sumOfFees > 0 && !isInPresale) {\r\n            _takeTransactionFees(amount, currentRate);\r\n        }\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, uint256 feesSum)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tTotalFees = tAmount.mul(feesSum).div(FEES_DIVISOR);\r\n        uint256 tTransferAmount = tAmount.sub(tTotalFees);\r\n        uint256 currentRate = _getCurrentRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTotalFees = tTotalFees.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rTotalFees);\r\n\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            tAmount,\r\n            tTransferAmount,\r\n            currentRate\r\n        );\r\n    }\r\n\r\n    function _getCurrentRate() internal view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() internal view returns (uint256, uint256) {\r\n        uint256 rSupply = _reflectedSupply;\r\n        uint256 tSupply = TOTAL_SUPPLY;\r\n\r\n        /**\r\n         * The code below removes balances of addresses excluded from rewards from\r\n         * rSupply and tSupply, which effectively increases the % of transaction fees\r\n         * delivered to non-excluded holders\r\n         */\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _reflectedBalances[_excluded[i]] > rSupply ||\r\n                _balances[_excluded[i]] > tSupply\r\n            ) return (_reflectedSupply, TOTAL_SUPPLY);\r\n            rSupply = rSupply.sub(_reflectedBalances[_excluded[i]]);\r\n            tSupply = tSupply.sub(_balances[_excluded[i]]);\r\n        }\r\n        if (tSupply == 0 || rSupply < _reflectedSupply.div(TOTAL_SUPPLY))\r\n            return (_reflectedSupply, TOTAL_SUPPLY);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) internal virtual;\r\n\r\n    /**\r\n     * @dev Returns the total sum of fees to be processed in each transaction.\r\n     *\r\n     * To separate concerns this contract (class) will take care of ONLY handling RFI, i.e.\r\n     * changing the rates and updating the holder's balance (via `_redistribute`).\r\n     * It is the responsibility of the dev/user to handle all other fees and taxes\r\n     * in the appropriate contracts (classes).\r\n     */\r\n    function _getSumOfFees(address sender, uint256 amount)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev A delegate which should return true if the given address is the V2 Pair and false otherwise\r\n     */\r\n    function _isV2Pair(address account) internal view virtual returns (bool);\r\n\r\n    /**\r\n     * @dev Redistributes the specified amount among the current holders via the reflect.finance\r\n     * algorithm, i.e. by updating the _reflectedSupply (_rSupply) which ultimately adjusts the\r\n     * current rate used by `tokenFromReflection` and, in turn, the value returns from `balanceOf`.\r\n     * This is the bit of clever math which allows rfi to redistribute the fee without\r\n     * having to iterate through all holders.\r\n     *\r\n     * Visit our discord at https://discord.gg/dAmr6eUTpM\r\n     */\r\n    function _redistribute(\r\n        uint256 amount,\r\n        uint256 currentRate,\r\n        uint256 fee,\r\n        uint256 index\r\n    ) internal {\r\n        uint256 tFee = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n\r\n        _reflectedSupply = _reflectedSupply.sub(rFee);\r\n        _addFeeCollectedAmount(index, tFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before the `Transfer` event is emitted if fees are enabled for the transfer\r\n     */\r\n    function _takeTransactionFees(uint256 amount, uint256 currentRate)\r\n        internal\r\n        virtual;\r\n}\r\n\r\nabstract contract Liquifier is Ownable, Manageable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private withdrawableBalance;\r\n\r\n    enum Env {\r\n        Testnet,\r\n        MainnetV2,\r\n        MainnetV3\r\n    }\r\n    Env private _env;\r\n\r\n    // PancakeSwap V1\r\n    address private _mainnetRouterV2Address =\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    // PancakeSwap V2\r\n    address private _mainnetRouterV3Address =\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    // Testnet\r\n    // address private _testnetRouterAddress = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1;\r\n    // PancakeSwap Testnet = https://pancake.kiemtienonline360.com/\r\n    address private _testnetRouterAddress =\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    IPancakeV2Router internal _router;\r\n    address internal _pair;\r\n\r\n    bool private inSwapAndLiquify;\r\n    bool private swapAndLiquifyEnabled = true;\r\n\r\n    uint256 private maxTransactionAmount;\r\n    uint256 private numberOfTokensToSwapToLiquidity;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    event RouterSet(address indexed router);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event LiquidityAdded(\r\n        uint256 tokenAmountSent,\r\n        uint256 ethAmountSent,\r\n        uint256 liquidity\r\n    );\r\n\r\n    receive() external payable {}\r\n\r\n    function initializeLiquiditySwapper(\r\n        Env env,\r\n        uint256 maxTx,\r\n        uint256 liquifyAmount\r\n    ) internal {\r\n        _env = env;\r\n        if (_env == Env.MainnetV2) {\r\n            _setRouterAddress(_mainnetRouterV2Address);\r\n        } else if (_env == Env.MainnetV3) {\r\n            _setRouterAddress(_mainnetRouterV3Address);\r\n        }\r\n        /*(_env == Env.Testnet)*/\r\n        else {\r\n            _setRouterAddress(_testnetRouterAddress);\r\n        }\r\n\r\n        maxTransactionAmount = maxTx;\r\n        numberOfTokensToSwapToLiquidity = liquifyAmount;\r\n    }\r\n\r\n    /**\r\n     * NOTE: passing the `contractTokenBalance` here is preferred to creating `balanceOfDelegate`\r\n     */\r\n    function liquify(uint256 contractTokenBalance, address sender) internal {\r\n        if (contractTokenBalance >= maxTransactionAmount)\r\n            contractTokenBalance = maxTransactionAmount;\r\n\r\n        bool isOverRequiredTokenBalance = (contractTokenBalance >=\r\n            numberOfTokensToSwapToLiquidity);\r\n\r\n        /**\r\n         * - first check if the contract has collected enough tokens to swap and liquify\r\n         * - then check swap and liquify is enabled\r\n         * - then make sure not to get caught in a circular liquidity event\r\n         * - finally, don't swap & liquify if the sender is the uniswap pair\r\n         */\r\n        if (\r\n            isOverRequiredTokenBalance &&\r\n            swapAndLiquifyEnabled &&\r\n            !inSwapAndLiquify &&\r\n            (sender != _pair)\r\n        ) {\r\n            // TODO check if the `(sender != _pair)` is necessary because that basically\r\n            // stops swap and liquify for all \"buy\" transactions\r\n            _swapAndLiquify(contractTokenBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev sets the router address and created the router, factory pair to enable\r\n     * swapping and liquifying (contract) tokens\r\n     */\r\n    function _setRouterAddress(address router) private {\r\n        IPancakeV2Router _newPancakeRouter = IPancakeV2Router(router);\r\n        _pair = IPancakeV2Factory(_newPancakeRouter.factory()).createPair(\r\n            address(this),\r\n            _newPancakeRouter.WETH()\r\n        );\r\n        _router = _newPancakeRouter;\r\n        emit RouterSet(router);\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 amount) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = amount.div(2);\r\n        uint256 otherHalf = amount.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        _swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        _addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _router.WETH();\r\n\r\n        _approveDelegate(address(this), address(_router), tokenAmount);\r\n\r\n        // make the swap\r\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            // The minimum amount of output tokens that must be received for the transaction not to revert.\r\n            // 0 = accept any amount (slippage is inevitable)\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approveDelegate(address(this), address(_router), tokenAmount);\r\n\r\n        // add tahe liquidity\r\n        (uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity) = _router\r\n            .addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            // Bounds the extent to which the WETH/token price can go up before the transaction reverts.\r\n            // Must be <= amountTokenDesired; 0 = accept any amount (slippage is inevitable)\r\n            0,\r\n            // Bounds the extent to which the token/WETH price can go up before the transaction reverts.\r\n            // 0 = accept any amount (slippage is inevitable)\r\n            0,\r\n            // this is a centralized risk if the owner's account is ever compromised (see Certik SSL-04)\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        // fix the forever locked BNBs as per the certik's audit\r\n        /**\r\n         * The swapAndLiquify function converts half of the contractTokenBalance SafeMoon tokens to BNB.\r\n         * For every swapAndLiquify function call, a small amount of BNB remains in the contract.\r\n         * This amount grows over time with the swapAndLiquify function being called throughout the life\r\n         * of the contract. The Safemoon contract does not contain a method to withdraw these funds,\r\n         * and the BNB will be locked in the Safemoon contract forever.\r\n         */\r\n        withdrawableBalance = address(this).balance;\r\n        emit LiquidityAdded(tokenAmountSent, ethAmountSent, liquidity);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the uniswapV2 pair (router & factory) for swapping and liquifying tokens\r\n     */\r\n    function setRouterAddress(address router) external onlyManager {\r\n        _setRouterAddress(router);\r\n    }\r\n\r\n    /**\r\n     * @dev Sends the swap and liquify flag to the provided value. If set to `false` tokens collected in the contract will\r\n     * NOT be converted into liquidity.\r\n     */\r\n    function setSwapAndLiquifyEnabled(bool enabled) external onlyManager {\r\n        swapAndLiquifyEnabled = enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(swapAndLiquifyEnabled);\r\n    }\r\n\r\n    /**\r\n     * @dev The owner can withdraw ETH(BNB) collected in the contract from `swapAndLiquify`\r\n     * or if someone (accidentally) sends ETH/BNB directly to the contract.\r\n     *\r\n     * Note: This addresses the contract flaw pointed out in the Certik Audit of Safemoon (SSL-03):\r\n     *\r\n     * The swapAndLiquify function converts half of the contractTokenBalance SafeMoon tokens to BNB.\r\n     * For every swapAndLiquify function call, a small amount of BNB remains in the contract.\r\n     * This amount grows over time with the swapAndLiquify function being called\r\n     * throughout the life of the contract. The Safemoon contract does not contain a method\r\n     * to withdraw these funds, and the BNB will be locked in the Safemoon contract forever.\r\n     * https://www.certik.org/projects/safemoon\r\n     */\r\n    function withdrawLockedEth(address payable recipient) external onlyManager {\r\n        require(\r\n            recipient != address(0),\r\n            \"Cannot withdraw the ETH balance to the zero address\"\r\n        );\r\n        require(\r\n            withdrawableBalance > 0,\r\n            \"The ETH balance must be greater than 0\"\r\n        );\r\n\r\n        // prevent re-entrancy attacks\r\n        uint256 amount = withdrawableBalance;\r\n        withdrawableBalance = 0;\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Use this delegate instead of having (unnecessarily) extend `BaseRfiToken` to gained access\r\n     * to the `_approve` function.\r\n     */\r\n    function _approveDelegate(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual;\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////\r\nabstract contract Antiwhale is Tokenomics {\r\n    /**\r\n     * @dev Returns the total sum of fees (in percents / per-mille - this depends on the FEES_DIVISOR value)\r\n     *\r\n     * NOTE: Currently this is just a placeholder. The parameters passed to this function are the\r\n     *      sender's token balance and the transfer amount. An *antiwhale* mechanics can use these\r\n     *      values to adjust the fees total for each tx\r\n     */\r\n    // function _getAntiwhaleFees(uint256 sendersBalance, uint256 amount) internal view returns (uint256){\r\n    function _getAntiwhaleFees(uint256, uint256)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return sumOfFees;\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////\r\n\r\nabstract contract SafeSuper is BaseRfiToken, Liquifier, Antiwhale {\r\n    using SafeMath for uint256;\r\n\r\n    // constructor(string memory _name, string memory _symbol, uint8 _decimals){\r\n\r\n    constructor(Env _env) {\r\n        initializeLiquiditySwapper(\r\n            _env,\r\n            maxTransactionAmount,\r\n            numberOfTokensToSwapToLiquidity\r\n        );\r\n\r\n        // exclude the pair address from rewards - we don't want to redistribute\r\n        // tx fees to these two; redistribution is only for holders, dah!\r\n        _exclude(_pair);\r\n        _exclude(burnAddress);\r\n    }\r\n\r\n    function _isV2Pair(address account) internal view override returns (bool) {\r\n        return (account == _pair);\r\n    }\r\n\r\n    function _getSumOfFees(address sender, uint256 amount)\r\n        internal\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _getAntiwhaleFees(balanceOf(sender), amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address sender,\r\n        address,\r\n        uint256,\r\n        bool\r\n    ) internal override {\r\n        if (!isInPresale) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            liquify(contractTokenBalance, sender);\r\n        }\r\n    }\r\n\r\n    function _takeTransactionFees(uint256 amount, uint256 currentRate)\r\n        internal\r\n        override\r\n    {\r\n        if (isInPresale) {\r\n            return;\r\n        }\r\n\r\n        uint256 feesCount = _getFeesCount();\r\n        for (uint256 index = 0; index < feesCount; index++) {\r\n            (FeeType name, address recipient, uint256 value, ) = _getFee(index);\r\n            // no need to check value < 0 as the value is uint (i.e. from 0 to 2^256-1)\r\n            if (value == 0) continue;\r\n\r\n            if (name == FeeType.Rfi) {\r\n                _redistribute(amount, currentRate, value, index);\r\n            } else if (name == FeeType.Burn) {\r\n                _burn(amount, currentRate, value, index);\r\n            } else if (name == FeeType.Antiwhale) {\r\n                // TODO\r\n            } else if (name == FeeType.ExternalToETH) {\r\n                _takeFeeToETH(amount, currentRate, value, recipient, index);\r\n            } else {\r\n                _takeFee(amount, currentRate, value, recipient, index);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _burn(\r\n        uint256 amount,\r\n        uint256 currentRate,\r\n        uint256 fee,\r\n        uint256 index\r\n    ) private {\r\n        uint256 tBurn = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n\r\n        _burnTokens(address(this), tBurn, rBurn);\r\n        _addFeeCollectedAmount(index, tBurn);\r\n    }\r\n\r\n    function _takeFee(\r\n        uint256 amount,\r\n        uint256 currentRate,\r\n        uint256 fee,\r\n        address recipient,\r\n        uint256 index\r\n    ) private {\r\n        uint256 tAmount = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n\r\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(\r\n            rAmount\r\n        );\r\n        if (_isExcludedFromRewards[recipient])\r\n            _balances[recipient] = _balances[recipient].add(tAmount);\r\n\r\n        _addFeeCollectedAmount(index, tAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev When implemented this will convert the fee amount of tokens into ETH/BNB\r\n     * and send to the recipient's wallet. Note that this reduces liquidity so it\r\n     * might be a good idea to add a % into the liquidity fee for % you take our through\r\n     * this method (just a suggestions)\r\n     */\r\n    function _takeFeeToETH(\r\n        uint256 amount,\r\n        uint256 currentRate,\r\n        uint256 fee,\r\n        address recipient,\r\n        uint256 index\r\n    ) private {\r\n        _takeFee(amount, currentRate, fee, recipient, index);\r\n    }\r\n\r\n    function _approveDelegate(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal override {\r\n        _approve(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract SafeSuperV2 is SafeSuper, ServicePayer {\r\n    // deploy servicepayable first\r\n    address payable service =\r\n        payable(0x56137d275b1EbD98C54D91e1D16C011D14CD59d9);\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _totalSupply,\r\n        uint256 _maxTransactionAmount,\r\n        address _charityAddress,\r\n        address _marketingAddress,\r\n        uint256 _rfifee,\r\n        uint256 _burnfee,\r\n        uint256 _liquidityfee,\r\n        uint256 _charityfee,\r\n        uint256 _marketingfee\r\n    )\r\n        payable\r\n        ServicePayer(service, \"SuperERC20_NC\")\r\n        Fees(_rfifee, _burnfee, _liquidityfee, _charityfee, _marketingfee)\r\n        Tokenomics(\r\n            _name,\r\n            _symbol,\r\n            _totalSupply,\r\n            _maxTransactionAmount,\r\n            _charityAddress,\r\n            _marketingAddress\r\n        )\r\n        SafeSuper(Env.MainnetV3)\r\n    {\r\n        // pre-approve the initial liquidity supply (to safe a bit of time)\r\n        _approve(owner(), address(_router), ~uint256(0));\r\n    }\r\n}",
    "etherscan_verified": true
}