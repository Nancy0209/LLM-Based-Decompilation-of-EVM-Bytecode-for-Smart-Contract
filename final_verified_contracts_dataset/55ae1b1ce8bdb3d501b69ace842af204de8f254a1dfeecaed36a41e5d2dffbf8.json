{
    "address": "0x00BCB434254797479bade33e1eF0aEBDB3F27089",
    "tx_hash": "55ae1b1ce8bdb3d501b69ace842af204de8f254a1dfeecaed36a41e5d2dffbf8",
    "block_number": 18000080,
    "timestamp": 1693067855,
    "gas_used_in_creation": 6412282,
    "creation_bytecode": "60a06040526127106200001f6b06765c793fa10079d000000082620008bf565b6200002b9190620008d9565b600755612710620000496b06765c793fa10079d000000082620008bf565b620000559190620008d9565b600855612710620000746b06765c793fa10079d00000006003620008bf565b620000809190620008d9565b600b556040805161016081018252636261736560e01b815260006020820181905291810182905260016060820181905260808201839052601460a0830181905260c083015260e082018190526101008201819052610120820183905261014090910152600f80546001600160c01b031916636261736560981b179055601055601180546701000101141400016001600160401b03199091161790553480156200012857600080fd5b5060405180604001604052806007815260200166053484941322e360cc1b81525060405180604001604052806007815260200166053484941322e360cc1b81525060006200017b6200063d60201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506004620001d38382620009a0565b506005620001e28282620009a0565b505060008054600c8054610100600160a81b0319166001600160a01b039092166101008102929092179055600e80546001600160a01b03199081168317909155600d805490911690911790556006805460ff60a01b1916600160a01b1790556040805163c45a015560e01b81529051737a250d5630b4cf539739df2c5dacb4c659f2488d9350839163c45a01559160048083019260209291908290030181865afa15801562000295573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002bb919062000a6c565b6001600160a01b031663c9c6539630846001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000309573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200032f919062000a6c565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af11580156200037d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003a3919062000a6c565b600680546001600160a01b0319166001600160a01b038581169190911790915581166080529050620003d781600162000641565b6006805460ff60a81b1916600160a81b179055600160136000620004036000546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182016000908120805495151560ff19968716179055600d54821681526013909352818320805485166001908117909155600e549091168352818320805485168217905530835290822080549093168117909255601290620004856000546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182016000908120805495151560ff1996871617905585821681526015938490528281208054861660019081179091556006549092168152828120805486168317905530815291822080549094168117909355620005036000546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182016000908120805495151560ff19968716179055600d548216815260158452828120805486166001908117909155600e54909216815282812080548616831790557f7ed1dca03d96f947ab02d66053f47073699eb6287021936c92f54972932767e5805486168317905530815260149384905291822080549094168117909355620005b06000546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182016000908120805495151560ff19968716179055600d54821681526014909352818320805485166001908117909155600e5490911683529120805490921617905562000635620006226000546001600160a01b031690565b6b06765c793fa10079d000000062000731565b505062000aad565b3390565b6001600160a01b03821660009081526017602052604090205481151560ff909116151503620006dd5760405162461bcd60e51b815260206004820152603860248201527f4175746f6d61746564206d61726b6574206d616b65722070616972206973206160448201527f6c72656164792073657420746f20746861742076616c7565000000000000000060648201526084015b60405180910390fd5b6001600160a01b038216600081815260176020526040808220805460ff191685151590811790915590519092917fa666b9b2dc2c8f2d86fda7ba3a115be30d3a958fd84d359cbc6bc919df97990a91a35050565b6001600160a01b038216620007895760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620006d4565b620007a5816003546200083d60201b62001a781790919060201c565b6003556001600160a01b038216600090815260016020908152604090912054620007da91839062001a786200083d821b17901c565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200082c9085815260200190565b60405180910390a35050565b505050565b6000806200084c838562000a97565b905083811015620008a05760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401620006d4565b90505b92915050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620008a357620008a3620008a9565b600082620008f757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200092757607f821691505b6020821081036200094857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200083857600081815260208120601f850160051c81016020861015620009775750805b601f850160051c820191505b81811015620009985782815560010162000983565b505050505050565b81516001600160401b03811115620009bc57620009bc620008fc565b620009d481620009cd845462000912565b846200094e565b602080601f83116001811462000a0c5760008415620009f35750858301515b600019600386901b1c1916600185901b17855562000998565b600085815260208120601f198616915b8281101562000a3d5788860151825594840194600190910190840162000a1c565b508582101562000a5c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121562000a7f57600080fd5b81516001600160a01b0381168114620008a057600080fd5b80820180821115620008a357620008a3620008a9565b608051613af362000ae5600039600081816103ea01528181610fe201528181611158015281816112bd0152611caa0152613af36000f3fe60806040526004361061023f5760003560e01c80638d0445ee1161012e578063b62496f5116100ab578063d6d59c951161006f578063d6d59c95146106f0578063dd62ed3e14610710578063f2fde38b14610756578063f4960b4714610776578063fe0175351461078b57600080fd5b8063b62496f514610616578063c024666814610646578063c9567bf914610666578063cd43e2281461067b578063d2d7ad83146106da57600080fd5b8063a339f7f6116100f2578063a339f7f614610580578063a457c2d7146105a0578063a9059cbb146105c0578063aa4bde28146105e0578063aee50b1e146105f657600080fd5b80638d0445ee146104f85780638da5cb5b1461051857806395d89b41146105365780639dccf6f11461054b578063a086b36e1461056057600080fd5b806342966c68116101bc578063715018a611610180578063715018a61461046d578063781edb3c146104825780637a08d059146104a2578063880bcbc1146104c25780638c0b5e22146104e257600080fd5b806342966c68146103b857806349bd5a5e146103d857806355e891c11461040c5780635b44ded01461042c57806370a082311461044d57600080fd5b80631e293c10116102035780631e293c101461031a57806323b872dd1461033c57806327a14fc21461035c578063313ce5671461037c578063395093511461039857600080fd5b8063064a59d01461024b57806306fdde0314610281578063095ea7b3146102a35780631694505e146102c357806318160ddd146102fb57600080fd5b3661024657005b600080fd5b34801561025757600080fd5b5060065461026c90600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561028d57600080fd5b506102966107c6565b604051610278919061347d565b3480156102af57600080fd5b5061026c6102be3660046134e0565b610858565b3480156102cf57600080fd5b506006546102e3906001600160a01b031681565b6040516001600160a01b039091168152602001610278565b34801561030757600080fd5b506003545b604051908152602001610278565b34801561032657600080fd5b5061033a61033536600461350c565b61086f565b005b34801561034857600080fd5b5061026c610357366004613525565b610968565b34801561036857600080fd5b5061033a61037736600461350c565b6109d1565b34801561038857600080fd5b5060405160128152602001610278565b3480156103a457600080fd5b5061026c6103b33660046134e0565b610b22565b3480156103c457600080fd5b5061033a6103d336600461350c565b610b58565b3480156103e457600080fd5b506102e37f000000000000000000000000000000000000000000000000000000000000000081565b34801561041857600080fd5b5061033a61042736600461357c565b610b65565b34801561043857600080fd5b5060065461026c90600160a81b900460ff1681565b34801561045957600080fd5b5061030c6104683660046135d0565b610c71565b34801561047957600080fd5b5061033a610c8c565b34801561048e57600080fd5b5061033a61049d3660046135ed565b610d00565b3480156104ae57600080fd5b5061033a6104bd36600461357c565b610dca565b3480156104ce57600080fd5b5061033a6104dd3660046135ed565b610e84565b3480156104ee57600080fd5b5061030c60085481565b34801561050457600080fd5b5061033a61051336600461362b565b610f46565b34801561052457600080fd5b506000546001600160a01b03166102e3565b34801561054257600080fd5b506102966113b9565b34801561055757600080fd5b5061033a6113c8565b34801561056c57600080fd5b5061033a61057b36600461350c565b611409565b34801561058c57600080fd5b5061033a61059b3660046135ed565b611500565b3480156105ac57600080fd5b5061026c6105bb3660046134e0565b611582565b3480156105cc57600080fd5b5061026c6105db3660046134e0565b6115d1565b3480156105ec57600080fd5b5061030c60075481565b34801561060257600080fd5b5061033a61061136600461350c565b6115de565b34801561062257600080fd5b5061026c6106313660046135d0565b60176020526000908152604090205460ff1681565b34801561065257600080fd5b5061033a6106613660046135ed565b6116a8565b34801561067257600080fd5b5061033a61176a565b34801561068757600080fd5b5060115460ff80821691620100008104821691600160201b8204811691600160301b9004165b6040805160ff95861681529385166020850152918416918301919091529091166060820152608001610278565b3480156106e657600080fd5b5061030c600b5481565b3480156106fc57600080fd5b5061033a61070b366004613676565b6117a9565b34801561071c57600080fd5b5061030c61072b36600461369b565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561076257600080fd5b5061033a6107713660046135d0565b611950565b34801561078257600080fd5b5061026c611a3a565b34801561079757600080fd5b5060115460ff610100820481169163010000008104821691600160281b8204811691600160381b9004166106ad565b6060600480546107d5906136c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610801906136c9565b801561084e5780601f106108235761010080835404028352916020019161084e565b820191906000526020600020905b81548152906001019060200180831161083157829003601f168201915b5050505050905090565b6000610865338484611ade565b5060015b92915050565b6000546001600160a01b031633146108a25760405162461bcd60e51b815260040161089990613703565b60405180910390fd5b670de0b6b3a76400006103e86108b760035490565b6108c290600261374e565b6108cc919061377b565b6108d6919061377b565b8110156109355760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f7420736574206d6178547820416d6f756e74206c6f776572207468604482015266616e20302e322560c81b6064820152608401610899565b60085460405182907f75f1c17bf623f0f7a2bd91ba61e89dff216960370e3e9a46b250750d03e4215e90600090a3600855565b6000610975848484611c03565b6109c784336109c285604051806060016040528060288152602001613a51602891396001600160a01b038a1660009081526002602090815260408083203384529091529020549190612310565b611ade565b5060019392505050565b6000546001600160a01b031633146109fb5760405162461bcd60e51b815260040161089990613703565b670de0b6b3a76400006103e8610a1060035490565b610a1b90601461374e565b610a25919061377b565b610a2f919061377b565b811015610a8a5760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e322560e01b6064820152608401610899565b6007548103610aef5760405162461bcd60e51b815260206004820152602b60248201527f43616e6e6f7420757064617465206d617857616c6c6574416d6f756e7420746f60448201526a2073616d652076616c756560a81b6064820152608401610899565b60075460405182907f6d3e257c59a11116c3e97bb144abf5ba1a6a9da6bd509192ecf0d48f7be1fc7690600090a3600755565b3360008181526002602090815260408083206001600160a01b038716845290915281205490916108659185906109c29086611a78565b610b62338261234a565b50565b6000546001600160a01b03163314610b8f5760405162461bcd60e51b815260040161089990613703565b8082610b9b858761378f565b610ba5919061378f565b610baf919061378f565b60ff16600311610bee5760405162461bcd60e51b815260206004820152600a6024820152696275792066656520332560b01b6044820152606401610899565b610bfc600f85858585612455565b6040516b62617365466565732d42757960a01b8152600c015b6040805191829003822060ff878116845286811660208501528581168484015284166060840152905190917f69848adfba904cea9fd12f8e800c6bae1d85101b0becc5910e509a93d81449e9919081900360800190a250505050565b6001600160a01b031660009081526001602052604090205490565b6000546001600160a01b03163314610cb65760405162461bcd60e51b815260040161089990613703565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610d2a5760405162461bcd60e51b815260040161089990613703565b6001600160a01b03821660009081526015602052604090205481151560ff909116151503610d6a5760405162461bcd60e51b8152600401610899906137a8565b6001600160a01b038216600081815260156020908152604091829020805460ff191685151590811790915591519182527fb7eada217e08491d4a03c266f93cd278befd124ab34890a5e7f44d023cbade7391015b60405180910390a25050565b6000546001600160a01b03163314610df45760405162461bcd60e51b815260040161089990613703565b8082610e00858761378f565b610e0a919061378f565b610e14919061378f565b60ff16600311610e585760405162461bcd60e51b815260206004820152600f60248201526e6d61782073656c6c2066656520332560881b6044820152606401610899565b610e66600f8585858561269e565b6040516c18985cd95199595ccb54d95b1b609a1b8152600d01610c15565b6000546001600160a01b03163314610eae5760405162461bcd60e51b815260040161089990613703565b6001600160a01b03821660009081526014602052604090205481151560ff909116151503610eee5760405162461bcd60e51b8152600401610899906137a8565b6001600160a01b038216600081815260146020908152604091829020805460ff191685151590811790915591519182527f30098fc83ab61b1a98835d32c4e611adedccfc260eeef586bd329d48e8a40a409101610dbe565b6000546001600160a01b03163314610f705760405162461bcd60e51b815260040161089990613703565b600c546001600160a01b0384811661010090920416146110eb576001600160a01b038316610fe05760405162461bcd60e51b815260206004820152601f60248201527f546865206c697175696469747957616c6c65742063616e6e6f742062652030006044820152606401610899565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316036110615760405162461bcd60e51b815260206004820152601f60248201527f546865206c697175696469747957616c6c65742063616e6e6f742062652030006044820152606401610899565b600c546040516001600160a01b0361010090920482169185169061109a906e1b1a5c5d5a591a5d1e55d85b1b195d608a1b8152600f0190565b604051908190038120907fd1fafbc3fb0c1fd12765451e803b8d5049dca18f8055298e7d18ebcd0d2ce31290600090a4600c8054610100600160a81b0319166101006001600160a01b038616021790555b600d546001600160a01b03838116911614611250576001600160a01b0382166111565760405162461bcd60e51b815260206004820152601f60248201527f546865206d61726b6574696e6757616c6c65742063616e6e6f742062652030006044820152606401610899565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316036111d75760405162461bcd60e51b815260206004820152601f60248201527f546865206d61726b6574696e6757616c6c65742063616e6e6f742062652030006044820152606401610899565b600d546040516e1b585c9ad95d1a5b99d5d85b1b195d608a1b81526001600160a01b0391821691841690600f01604051908190038120907fd1fafbc3fb0c1fd12765451e803b8d5049dca18f8055298e7d18ebcd0d2ce31290600090a4600d80546001600160a01b0319166001600160a01b0384161790555b600e546001600160a01b038281169116146113b4576001600160a01b0381166112bb5760405162461bcd60e51b815260206004820152601e60248201527f54686520747265617375727957616c6c65742063616e6e6f74206265203000006044820152606401610899565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03160361133c5760405162461bcd60e51b815260206004820152601e60248201527f54686520747265617375727957616c6c65742063616e6e6f74206265203000006044820152606401610899565b600e80546040516d1d1c99585cdd5c9e55d85b1b195d60921b81526001600160a01b03918216929184169101604051908190038120907fd1fafbc3fb0c1fd12765451e803b8d5049dca18f8055298e7d18ebcd0d2ce31290600090a4600e80546001600160a01b0319166001600160a01b0383161790555b505050565b6060600580546107d5906136c9565b6000546001600160a01b031633146113f25760405162461bcd60e51b815260040161089990613703565b6b06765c793fa10079d00000006007819055600855565b4781106114675760405162461bcd60e51b815260206004820152602660248201527f43616e6e6f742073656e64206d6f7265207468616e20636f6e74726163742062604482015265616c616e636560d01b6064820152608401610899565b600c5460405160009161010090046001600160a01b03169083908381818185875af1925050503d80600081146114b9576040519150601f19603f3d011682016040523d82523d6000602084013e6114be565b606091505b5050905080156114fc576040518281527fdda2f422942b297b89061fce69fb15f2958212d0889fafe06a2c49de4f48924d9060200160405180910390a15b5050565b6000546001600160a01b0316331461152a5760405162461bcd60e51b815260040161089990613703565b6001600160a01b038216600081815260126020908152604091829020805460ff191685151590811790915591519182527fcb9f97b7b4b41413e5c8d418a8cf9a88db1cf34dee66b213d070faf881d9d3509101610dbe565b600061086533846109c285604051806060016040528060258152602001613a99602591393360009081526002602090815260408083206001600160a01b038d1684529091529020549190612310565b6000610865338484611c03565b6000546001600160a01b031633146116085760405162461bcd60e51b815260040161089990613703565b600b5481036116755760405162461bcd60e51b815260206004820152603360248201527f43616e6e6f7420757064617465206d696e696d756d546f6b656e734265666f72604482015272655377617020746f2073616d652076616c756560681b6064820152608401610899565b600b5460405182907f5b0491f767c1463bea8972339f785795be1a38784cc6483cf649cdcbb28c46b090600090a3600b55565b6000546001600160a01b031633146116d25760405162461bcd60e51b815260040161089990613703565b6001600160a01b03821660009081526013602052604090205481151560ff9091161515036117125760405162461bcd60e51b8152600401610899906137a8565b6001600160a01b038216600081815260136020908152604091829020805460ff191685151590811790915591519182527f71206a5ad264eefddb6ae746c7aaa3e4e15de930b82c3a645b89a7005e534ba29101610dbe565b6000546001600160a01b031633146117945760405162461bcd60e51b815260040161089990613703565b6006805460ff60a01b1916600160a01b179055565b670de0b6b3a7640000821015611946576040805160028082526060820183526000926020830190803683375050600654604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015611823573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184791906137f2565b8160008151811061185a5761185a61380f565b60200260200101906001600160a01b031690816001600160a01b031681525050308160018151811061188e5761188e61380f565b6001600160a01b03928316602091820292909201015260065460405163b6f9de9560e01b815291169063b6f9de959085906118d690600090869061dead904290600401613869565b6000604051808303818588803b1580156118ef57600080fd5b505af1158015611903573d6000803e3d6000fd5b50505050507fa017c1567cfcdd2d750a8c01e39fe2a846bcebc293c7d078477014d6848205688360405161193991815260200190565b60405180910390a1505050565b6114fc8183612901565b6000546001600160a01b0316331461197a5760405162461bcd60e51b815260040161089990613703565b6001600160a01b0381166119df5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610899565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03163314611a655760405162461bcd60e51b815260040161089990613703565b506006805460ff60a81b19169055600190565b600080611a85838561389e565b905083811015611ad75760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610899565b9392505050565b6001600160a01b038316611b405760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610899565b6001600160a01b038216611ba15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610899565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316611c295760405162461bcd60e51b8152600401610899906138b1565b6001600160a01b038216611c4f5760405162461bcd60e51b8152600401610899906138f6565b80600003611c63576113b4838360006129ba565b600654600160a81b900460ff1615611d8d576000546001600160a01b03838116911614801590611ca157506006546001600160a01b03838116911614155b8015611cdf57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15611d8d57326000908152601860205260409020544311611d7a5760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610899565b3260009081526018602052604090204390555b6001600160a01b03808416600081815260176020908152604080832054948716835280832054938352601290915290205460ff928316929182169116158015611def57506001600160a01b03841660009081526012602052604090205460ff16155b156120c357600654600160a01b900460ff16611e4d5760405162461bcd60e51b815260206004820152601e60248201527f54726164696e672069732063757272656e746c792064697361626c65642e00006044820152606401610899565b6001600160a01b03851660009081526017602052604090205460ff168015611e8e57506001600160a01b03841660009081526014602052604090205460ff16155b15611f5f57600854831115611ef65760405162461bcd60e51b815260206004820152602860248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201526736b0bc10313abc9760c11b6064820152608401610899565b600754611f0285610c71565b611f0c908561389e565b1115611f5a5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420457863656564206d61782077616c6c657400000000000000006044820152606401610899565b6120c3565b6001600160a01b03841660009081526017602052604090205460ff168015611fa057506001600160a01b03851660009081526014602052604090205460ff16155b1561200a57600854831115611f5a5760405162461bcd60e51b815260206004820152602a60248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152691036b0bc1039b2b6361760b11b6064820152608401610899565b6001600160a01b03841660009081526014602052604090205460ff1661208e5760075461203685610c71565b612040908561389e565b1115611f5a5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74204578636565642074782077616c6c65740000000000000000006044820152606401610899565b600c5460ff161580156120b957506001600160a01b03851660009081526014602052604090205460ff165b156120c357426009555b6120cf82828787612ac6565b6000600b546120dd30610c71565b6006549111159150600160a01b900460ff1680156120f85750805b80156121075750600c5460ff16155b801561211e5750601954600160201b900460ff1615155b801561214257506001600160a01b03851660009081526017602052604090205460ff165b801561216757506001600160a01b03861660009081526013602052604090205460ff16155b801561218c57506001600160a01b03851660009081526013602052604090205460ff16155b156121b157600c805460ff191660011790556121a6612cea565b600c805460ff191690555b600c5460009060ff161580156121d05750600654600160a01b900460ff165b6001600160a01b03881660009081526013602052604090205490915060ff168061221257506001600160a01b03861660009081526013602052604090205460ff165b1561221b575060005b8080156122335750601954600160201b900460ff1615155b156122fc5760195460009060649061225590600160201b900460ff168861374e565b61225f919061377b565b60195490915060009060649061227f906301000000900460ff168961374e565b612289919061377b565b90506122958288613939565b96506122a28930846129ba565b80156122f9576122b2308261234a565b60195460408051630100000090920460ff168252602082018390527ffecf12fd01122af77b8b8f1a0f126363142d14fba298ea36d9fe4909f61bb5a1910160405180910390a15b50505b6123078787876129ba565b50505050505050565b600081848411156123345760405162461bcd60e51b8152600401610899919061347d565b5060006123418486613939565b95945050505050565b6001600160a01b0382166123aa5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610899565b6123e781604051806060016040528060228152602001613a09602291396001600160a01b0385166000908152600160205260409020549190612310565b6001600160a01b03831660009081526001602052604090205560035461240d9082612f39565b6003556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600285015460ff8581169116146124d657604051706c69717569646974794665654f6e42757960781b815260110160405190819003812060028701548754919260ff9182169291881691600080516020613a79833981519152916124bc9160481b9061394c565b60405180910390a460028501805460ff191660ff86161790555b600285015460ff84811662010000909204161461256a57604051706d61726b6574696e674665654f6e42757960781b815260110160405190819003812060028701548754919260ff6201000090920482169291871691600080516020613a79833981519152916125499160481b9061394c565b60405180910390a460028501805462ff000019166201000060ff8616021790555b600285015460ff838116600160201b9092041614612601576040516e6275794261636b4665654f6e42757960881b8152600f0160405190819003812060028701548754919260ff600160201b90920482169291861691600080516020613a79833981519152916125dd9160481b9061394c565b60405180910390a460028501805464ff000000001916600160201b60ff8516021790555b600285015460ff828116600160301b9092041614612697576040516b6275726e4665654f6e42757960a01b8152600c0160405190819003812060028701548754919260ff600160301b90920482169291851691600080516020613a79833981519152916126719160481b9061394c565b60405180910390a460028501805466ff0000000000001916600160301b60ff8416021790555b5050505050565b600285015460ff858116610100909204161461272f57604051711b1a5c5d5a591a5d1e51995953db94d95b1b60721b815260120160405190819003812060028701548754919260ff61010090920482169291881691600080516020613a79833981519152916127109160481b9061394c565b60405180910390a460028501805461ff00191661010060ff8716021790555b600285015460ff848116630100000090920416146127c857604051711b585c9ad95d1a5b99d1995953db94d95b1b60721b815260120160405190819003812060028701548754919260ff630100000090920482169291871691600080516020613a79833981519152916127a59160481b9061394c565b60405180910390a460028501805463ff0000001916630100000060ff8616021790555b600285015460ff838116600160281b9092041614612861576040516f189d5e509858dad1995953db94d95b1b60821b815260100160405190819003812060028701548754919260ff600160281b90920482169291861691600080516020613a798339815191529161283c9160481b9061394c565b60405180910390a460028501805465ff00000000001916600160281b60ff8516021790555b600285015460ff828116600160381b9092041614612697576040516c189d5c9b91995953db94d95b1b609a1b8152600d0160405190819003812060028701548754919260ff600160381b90920482169291851691600080516020613a79833981519152916128d29160481b9061394c565b60405180910390a460028501805460ff8316600160381b0267ff00000000000000199091161790555050505050565b600b5461290d30610c71565b10156129765760405162461bcd60e51b815260206004820152603260248201527f7377617020616d6f756e74206d757374206f766572207468616e206d696e696d6044820152710756d546f6b656e734265666f7265537761760741b6064820152608401610899565b6129808282612f7b565b156114fc57601954600160201b900460ff16156114fc57600c805460ff191660011790556129ac612cea565b600c805460ff191690555050565b6001600160a01b0383166129e05760405162461bcd60e51b8152600401610899906138b1565b6001600160a01b038216612a065760405162461bcd60e51b8152600401610899906138f6565b612a4381604051806060016040528060268152602001613a2b602691396001600160a01b0386166000908152600160205260409020549190612310565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612a729082611a78565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611bf69085815260200190565b6019805463ffffffff191690558215612b36576011546019805461010080840460ff90811661ffff199093169290921763010000008086048416929092021763ffff00001916600160281b85048316620100000263ff000000191617600160381b90940491909116029190911790555b8315612ba1576011546019805460ff80841661ffff1990921691909117610100620100008086048416919091029190911763ffff00001916600160201b850483169190910263ff000000191617600160301b90930416630100000002919091179055612ba181613135565b82158015612bad575083155b15612c0f576011546019805461010080840460ff90811661ffff199093169290921763010000008086048416929092021763ffff00001916600160281b85048316620100000263ff000000191617600160381b90940491909116029190911790555b612c1a8483836131bb565b60195460ff63010000008204811691620100008104821691612c449161010081048216911661378f565b612c4e919061378f565b612c58919061378f565b6019805460ff928316600160201b90810264ff000000001983168117938490556040805191861693861693909317815261010084048516602082015262010000840485168184015263010000008404851660608201529204909216608082015290517f6e2a5b7f71cda0b5cb7df899e2ae963197bad5b9805df7f475458f793841201c9181900360a00190a150505050565b6000612cf530610c71565b600b549091504790612d0890600761374e565b821115612d2057600b54612d1d90600761374e565b91505b601954600090819060029060ff600160201b8204811691612d4291168761374e565b612d4c919061377b565b612d56919061377b565b90506000612d648286613939565b9050612d6f81613271565b6000612d7b8547613939565b60195490915060009060ff63010000008204811691612d9d9160029116613963565b612da7919061378f565b601954612dbe9190600160201b900460ff16613985565b60195460ff91821692506000916002918491612ddb91168661374e565b612de5919061377b565b612def919061377b565b6019549091506000908390612e0c90610100900460ff168661374e565b612e16919061377b565b90506000612e24828461389e565b612e2e9086613939565b600e546040519192506001600160a01b0316908290600081818185875af1925050503d8060008114612e7c576040519150601f19603f3d011682016040523d82523d6000602084013e612e81565b606091505b5050600d546040519199506001600160a01b0316904790600081818185875af1925050503d8060008114612ed1576040519150601f19603f3d011682016040523d82523d6000602084013e612ed6565b606091505b50909850508615612f2d57612eeb87846133cb565b60408051878152602081018590529081018890527f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619060600160405180910390a15b50505050505050505050565b6000611ad783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612310565b33600090815260136020526040812054819060ff1661309257601954600160201b900460ff161561301857601954600090606490612fc390600160201b900460ff168661374e565b612fcd919061377b565b601954909150600090606490612fed906301000000900460ff168761374e565b612ff7919061377b565b90506130038286613939565b9450801561301557613015338261234a565b50505b601954600160201b900460ff161561308b57600061303530610c71565b60195490915060009060029060ff600160201b820481169161305891168561374e565b613062919061377b565b61306c919061377b565b9050600061307a8284613939565b9050801561308757600193505b5050505b9050610869565b6001600160a01b03841630146130b4576130ac848461234a565b5060006130bd565b50600982905560005b601954600160201b900460ff161561308b5760006130da30610c71565b60195490915060009060029060ff600160201b82048116916130fd91168561374e565b613107919061377b565b613111919061377b565b9050600061311f8284613939565b9050801561308757600093505050509050610869565b6001600160a01b03811660009081526016602052604090205415613171576001600160a01b03811660009081526016602052604090205461319f565b61317a81610c71565b1561319d576001600160a01b03811660009081526016602052604090205461319f565b425b6001600160a01b03909116600090815260166020526040902055565b6001600160a01b038116158015906131de57506001600160a01b03811661dead14155b801561320357506001600160a01b03821660009081526013602052604090205460ff16155b801561322857506001600160a01b03811660009081526013602052604090205460ff16155b156113b4578215801561323e5750600c5460ff16155b156113b4576009546001600160a01b0383166000908152601660205260409020546132699190613939565b600a55505050565b60408051600280825260608201835260009260208301908036833701905050905030816000815181106132a6576132a661380f565b6001600160a01b03928316602091820292909201810191909152600654604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156132ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332391906137f2565b816001815181106133365761333661380f565b6001600160a01b03928316602091820292909201015260065461335c9130911684611ade565b60065460405163791ac94760e01b81526001600160a01b039091169063791ac9479061339590859060009086903090429060040161399e565b600060405180830381600087803b1580156133af57600080fd5b505af11580156133c3573d6000803e3d6000fd5b505050505050565b6006546133e39030906001600160a01b031684611ade565b600654600c5460405163f305d71960e01b81523060048201526024810185905260006044820181905260648201526001600160a01b03610100909204821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af1158015613458573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061269791906139da565b600060208083528351808285015260005b818110156134aa5785810183015185820160400152820161348e565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610b6257600080fd5b600080604083850312156134f357600080fd5b82356134fe816134cb565b946020939093013593505050565b60006020828403121561351e57600080fd5b5035919050565b60008060006060848603121561353a57600080fd5b8335613545816134cb565b92506020840135613555816134cb565b929592945050506040919091013590565b803560ff8116811461357757600080fd5b919050565b6000806000806080858703121561359257600080fd5b61359b85613566565b93506135a960208601613566565b92506135b760408601613566565b91506135c560608601613566565b905092959194509250565b6000602082840312156135e257600080fd5b8135611ad7816134cb565b6000806040838503121561360057600080fd5b823561360b816134cb565b91506020830135801515811461362057600080fd5b809150509250929050565b60008060006060848603121561364057600080fd5b833561364b816134cb565b9250602084013561365b816134cb565b9150604084013561366b816134cb565b809150509250925092565b6000806040838503121561368957600080fd5b823591506020830135613620816134cb565b600080604083850312156136ae57600080fd5b82356136b9816134cb565b91506020830135613620816134cb565b600181811c908216806136dd57607f821691505b6020821081036136fd57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761086957610869613738565b634e487b7160e01b600052601260045260246000fd5b60008261378a5761378a613765565b500490565b60ff818116838216019081111561086957610869613738565b6020808252602a908201527f4163636f756e7420697320616c7265616479207468652076616c7565206f6620604082015269276578636c756465642760b01b606082015260800190565b60006020828403121561380457600080fd5b8151611ad7816134cb565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b8381101561385e5781516001600160a01b031687529582019590820190600101613839565b509495945050505050565b8481526080602082015260006138826080830186613825565b6001600160a01b03949094166040830152506060015292915050565b8082018082111561086957610869613738565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b8181038181111561086957610869613738565b68ffffffffffffffffff1991909116815260200190565b600060ff83168061397657613976613765565b8060ff84160491505092915050565b60ff828116828216039081111561086957610869613738565b85815284602082015260a0604082015260006139bd60a0830186613825565b6001600160a01b0394909416606083015250608001529392505050565b6000806000606084860312156139ef57600080fd5b835192506020840151915060408401519050925092509256fe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365301b44cf1eabb0a57f586af3c6c9a262ca22eb81e2a8fa6c56c98fe628dd0f6245524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122028267b72e35ec053076154572ebbf2299c55dccdbdcada96ae088bd1648b3f0564736f6c63430008120033",
    "runtime_bytecode": "",
    "contract_name": "SHIAv2",
    "compiler_version": "v0.8.18+commit.87f61d96",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"AllowedWhenTradingDisabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AutomatedMarketMakerPairChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyBackTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taxType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes23\",\"name\":\"period\",\"type\":\"bytes23\"}],\"name\":\"DetailFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFeesProcess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxStructureChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxTransferChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"marketingFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyBackFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"burnFee\",\"type\":\"uint8\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"marketingFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyBackFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"burnFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"totalFee\",\"type\":\"uint8\"}],\"name\":\"FeesApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxTransactionAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountBeforeSwapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indentifier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"StructureChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_burnFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"TokenBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawOverETH\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowTradingDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"buyBackTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferCoolDown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBuyFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseSellFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimitis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_burnFeeOnBuy\",\"type\":\"uint8\"}],\"name\":\"setBaseBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_burnFeeOnSell\",\"type\":\"uint8\"}],\"name\":\"setBaseSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"setStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferCoolDown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOverflowETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * Website : Soon\r\n * Twitter : https://twitter.com/shiba2_erc\r\n * Telegram : https://twitter.com/shiba2_erc\r\n*/\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract SHIAv2 is Ownable, ERC20 {\r\n    IRouter public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    string private constant _name = \"SHIA2.0\";\r\n    string private constant _symbol = \"SHIA2.0\";\r\n    uint8 private constant _decimals = 18;\r\n\r\n    bool public isTradingEnabled;\r\n    bool public transferCoolDown;\r\n\r\n    uint256 constant maxSupply = 2000000000 * (10 ** 18);\r\n    uint256 public maxWalletAmount = (maxSupply * 10000) / 10000;\r\n    uint256 public maxTxAmount = (maxSupply * 10000) / 10000;\r\n\r\n    uint256 private minWalletTx;\r\n    uint256 private minimumSwapAmt;\r\n    uint256 public minimumTokensBeforeSwap = (maxSupply * 3) / 10000;\r\n    bool private _swapping;\r\n\r\n    address private liquidityWallet;\r\n    address private marketingWallet;\r\n    address private treasuryWallet;\r\n\r\n    struct FeeMap {\r\n        bytes23 periodName;\r\n        uint8 blocksInPeriod;\r\n        uint256 timeInPeriod;\r\n        uint8 liquidityFeeOnBuy;\r\n        uint8 liquidityFeeOnSell;\r\n        uint8 marketingFeeOnBuy;\r\n        uint8 marketingFeeOnSell;\r\n        uint8 buyBackFeeOnBuy;\r\n        uint8 buyBackFeeOnSell;\r\n        uint8 burnFeeOnBuy;\r\n        uint8 burnFeeOnSell;\r\n    }\r\n\r\n    FeeMap private _base = FeeMap(\"base\", 0, 0, 1, 0, 20, 20, 1, 1, 0, 1);\r\n\r\n    mapping(address => bool) private _isAllowedToTradeWhenDisabled;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcludedFromMaxTransactionLimit;\r\n    mapping(address => bool) private _isExcludedFromMaxWalletLimit;\r\n    mapping(address => uint256) private _swapAmount;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n    mapping(address => uint256) private _holderlastTimestamp;\r\n\r\n    uint8 private _liquidityFee;\r\n    uint8 private _marketingFee;\r\n    uint8 private _buyBackFee;\r\n    uint8 private _burnFee;\r\n    uint8 private _totalFee;\r\n\r\n    event AutomatedMarketMakerPairChange(\r\n        address indexed pair,\r\n        bool indexed value\r\n    );\r\n    event UniswapV2RouterChange(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n    event StructureChange(\r\n        string indexed indentifier,\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n    event FeeChange(\r\n        string indexed identifier,\r\n        uint8 liquidityFee,\r\n        uint8 marketingFee,\r\n        uint8 buyBackFee,\r\n        uint8 burnFee\r\n    );\r\n    event DetailFeeChange(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue,\r\n        string indexed taxType,\r\n        bytes23 period\r\n    );\r\n    event MaxTransactionAmountChange(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue\r\n    );\r\n    event MaxWalletAmountChange(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue\r\n    );\r\n    event ExcludeFromFeesProcess(address indexed account, bool isExcluded);\r\n    event ExcludeFromMaxTransferChange(\r\n        address indexed account,\r\n        bool isExcluded\r\n    );\r\n    event ExcludeFromMaxStructureChange(\r\n        address indexed account,\r\n        bool isExcluded\r\n    );\r\n    event AllowedWhenTradingDisabledChange(\r\n        address indexed account,\r\n        bool isExcluded\r\n    );\r\n    event MinTokenAmountBeforeSwapChange(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue\r\n    );\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event TokenBurn(uint8 _burnFee, uint256 burnAmount);\r\n    event FeesApplied(\r\n        uint8 liquidityFee,\r\n        uint8 marketingFee,\r\n        uint8 buyBackFee,\r\n        uint8 burnFee,\r\n        uint8 totalFee\r\n    );\r\n    event BuyBackTriggered(uint256 amount);\r\n    event WithdrawOverETH(uint256 amount);\r\n\r\n    constructor() ERC20(_name, _symbol) {\r\n        liquidityWallet = owner();\r\n        treasuryWallet = address(owner());\r\n        marketingWallet = address(owner());\r\n        isTradingEnabled = true;\r\n        IRouter _uniswapV2Router = IRouter(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        address _uniswapV2Pair = IFactory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        _settingAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n        transferCoolDown = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        _isExcludedFromFee[treasuryWallet] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isAllowedToTradeWhenDisabled[owner()] = true;\r\n        _isExcludedFromMaxWalletLimit[_uniswapV2Pair] = true;\r\n        _isExcludedFromMaxWalletLimit[address(uniswapV2Router)] = true;\r\n        _isExcludedFromMaxWalletLimit[address(this)] = true;\r\n        _isExcludedFromMaxWalletLimit[owner()] = true;\r\n        _isExcludedFromMaxWalletLimit[marketingWallet] = true;\r\n        _isExcludedFromMaxWalletLimit[treasuryWallet] = true;\r\n        _isExcludedFromMaxWalletLimit[address(0xdead)] = true;\r\n        _isExcludedFromMaxTransactionLimit[address(this)] = true;\r\n        _isExcludedFromMaxTransactionLimit[owner()] = true;\r\n        _isExcludedFromMaxTransactionLimit[marketingWallet] = true;\r\n        _isExcludedFromMaxTransactionLimit[treasuryWallet] = true;\r\n        _mint(owner(), maxSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // trading start!\r\n    function openTrading() external onlyOwner {\r\n        isTradingEnabled = true;\r\n    }\r\n\r\n    function allowTradingDisabled(\r\n        address account,\r\n        bool allowed\r\n    ) external onlyOwner {\r\n        _isAllowedToTradeWhenDisabled[account] = allowed;\r\n        emit AllowedWhenTradingDisabledChange(account, allowed);\r\n    }\r\n\r\n    function _settingAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(\r\n            automatedMarketMakerPairs[pair] != value,\r\n            \"Automated market maker pair is already set to that value\"\r\n        );\r\n        automatedMarketMakerPairs[pair] = value;\r\n        emit AutomatedMarketMakerPairChange(pair, value);\r\n    }\r\n\r\n    function excludeFromFees(\r\n        address account,\r\n        bool excluded\r\n    ) external onlyOwner {\r\n        require(\r\n            _isExcludedFromFee[account] != excluded,\r\n            \"Account is already the value of 'excluded'\"\r\n        );\r\n        _isExcludedFromFee[account] = excluded;\r\n        emit ExcludeFromFeesProcess(account, excluded);\r\n    }\r\n\r\n    function excludeFromMaxTransactionLimit(\r\n        address account,\r\n        bool excluded\r\n    ) external onlyOwner {\r\n        require(\r\n            _isExcludedFromMaxTransactionLimit[account] != excluded,\r\n            \"Account is already the value of 'excluded'\"\r\n        );\r\n        _isExcludedFromMaxTransactionLimit[account] = excluded;\r\n        emit ExcludeFromMaxTransferChange(account, excluded);\r\n    }\r\n\r\n    function excludeFromMaxWalletLimit(\r\n        address account,\r\n        bool excluded\r\n    ) external onlyOwner {\r\n        require(\r\n            _isExcludedFromMaxWalletLimit[account] != excluded,\r\n            \"Account is already the value of 'excluded'\"\r\n        );\r\n        _isExcludedFromMaxWalletLimit[account] = excluded;\r\n        emit ExcludeFromMaxStructureChange(account, excluded);\r\n    }\r\n\r\n    function setStructure(\r\n        address newLiquidityWallet,\r\n        address newMarketingWallet,\r\n        address newTreasuryWallet\r\n    ) external onlyOwner {\r\n        if (liquidityWallet != newLiquidityWallet) {\r\n            require(\r\n                newLiquidityWallet != address(0),\r\n                \"The liquidityWallet cannot be 0\"\r\n            );\r\n            require(\r\n                newLiquidityWallet != uniswapV2Pair,\r\n                \"The liquidityWallet cannot be 0\"\r\n            );\r\n            emit StructureChange(\r\n                \"liquidityWallet\",\r\n                newLiquidityWallet,\r\n                liquidityWallet\r\n            );\r\n            liquidityWallet = newLiquidityWallet;\r\n        }\r\n        if (marketingWallet != newMarketingWallet) {\r\n            require(\r\n                newMarketingWallet != address(0),\r\n                \"The marketingWallet cannot be 0\"\r\n            );\r\n            require(\r\n                newMarketingWallet != uniswapV2Pair,\r\n                \"The marketingWallet cannot be 0\"\r\n            );\r\n            emit StructureChange(\r\n                \"marketingWallet\",\r\n                newMarketingWallet,\r\n                marketingWallet\r\n            );\r\n            marketingWallet = newMarketingWallet;\r\n        }\r\n        if (treasuryWallet != newTreasuryWallet) {\r\n            require(\r\n                newTreasuryWallet != address(0),\r\n                \"The treasuryWallet cannot be 0\"\r\n            );\r\n            require(\r\n                newTreasuryWallet != uniswapV2Pair,\r\n                \"The treasuryWallet cannot be 0\"\r\n            );\r\n            emit StructureChange(\r\n                \"treasuryWallet\",\r\n                newTreasuryWallet,\r\n                treasuryWallet\r\n            );\r\n            treasuryWallet = newTreasuryWallet;\r\n        }\r\n    }\r\n\r\n    // set up fees\r\n    function setBaseBuyFee(\r\n        uint8 _liquidityFeeOnBuy,\r\n        uint8 _marketingFeeOnBuy,\r\n        uint8 _buyBackFeeOnBuy,\r\n        uint8 _burnFeeOnBuy\r\n    ) external onlyOwner {\r\n        require(\r\n            3 >\r\n                _liquidityFeeOnBuy +\r\n                    _marketingFeeOnBuy +\r\n                    _buyBackFeeOnBuy +\r\n                    _burnFeeOnBuy,\r\n            \"buy fee 3%\"\r\n        );\r\n        _setBuyFee(\r\n            _base,\r\n            _liquidityFeeOnBuy,\r\n            _marketingFeeOnBuy,\r\n            _buyBackFeeOnBuy,\r\n            _burnFeeOnBuy\r\n        );\r\n        emit FeeChange(\r\n            \"baseFees-Buy\",\r\n            _liquidityFeeOnBuy,\r\n            _marketingFeeOnBuy,\r\n            _buyBackFeeOnBuy,\r\n            _burnFeeOnBuy\r\n        );\r\n    }\r\n\r\n    function setBaseSellFee(\r\n        uint8 _liquidityFeeOnSell,\r\n        uint8 _marketingFeeOnSell,\r\n        uint8 _buyBackFeeOnSell,\r\n        uint8 _burnFeeOnSell\r\n    ) external onlyOwner {\r\n        require(\r\n            3 >\r\n                _liquidityFeeOnSell +\r\n                    _marketingFeeOnSell +\r\n                    _buyBackFeeOnSell +\r\n                    _burnFeeOnSell,\r\n            \"max sell fee 3%\"\r\n        );\r\n        _setSellFee(\r\n            _base,\r\n            _liquidityFeeOnSell,\r\n            _marketingFeeOnSell,\r\n            _buyBackFeeOnSell,\r\n            _burnFeeOnSell\r\n        );\r\n        emit FeeChange(\r\n            \"baseFees-Sell\",\r\n            _liquidityFeeOnSell,\r\n            _marketingFeeOnSell,\r\n            _buyBackFeeOnSell,\r\n            _burnFeeOnSell\r\n        );\r\n    }\r\n\r\n    function setMaxTransactionAmount(uint256 newValue) external onlyOwner {\r\n        require(\r\n            newValue >= ((totalSupply() * 2) / 1000) / 1e18,\r\n            \"Cannot set maxTx Amount lower than 0.2%\"\r\n        );\r\n        emit MaxTransactionAmountChange(newValue, maxTxAmount);\r\n        maxTxAmount = newValue;\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 newValue) external onlyOwner {\r\n        require(\r\n            newValue >= ((totalSupply() * 20) / 1000) / 1e18,\r\n            \"Cannot set maxWallet lower than 0.2%\"\r\n        );\r\n        require(\r\n            newValue != maxWalletAmount,\r\n            \"Cannot update maxWalletAmount to same value\"\r\n        );\r\n        emit MaxWalletAmountChange(newValue, maxWalletAmount);\r\n        maxWalletAmount = newValue;\r\n    }\r\n\r\n    function setMinimumTokensBeforeSwap(uint256 newValue) external onlyOwner {\r\n        require(\r\n            newValue != minimumTokensBeforeSwap,\r\n            \"Cannot update minimumTokensBeforeSwap to same value\"\r\n        );\r\n        emit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\r\n        minimumTokensBeforeSwap = newValue;\r\n    }\r\n\r\n    function burn(uint256 value) external {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    function getBaseBuyFees()\r\n        external\r\n        view\r\n        returns (uint8, uint8, uint8, uint8)\r\n    {\r\n        return (\r\n            _base.liquidityFeeOnBuy,\r\n            _base.marketingFeeOnBuy,\r\n            _base.buyBackFeeOnBuy,\r\n            _base.burnFeeOnBuy\r\n        );\r\n    }\r\n\r\n    function getBaseSellFees()\r\n        external\r\n        view\r\n        returns (uint8, uint8, uint8, uint8)\r\n    {\r\n        return (\r\n            _base.liquidityFeeOnSell,\r\n            _base.marketingFeeOnSell,\r\n            _base.buyBackFeeOnSell,\r\n            _base.burnFeeOnSell\r\n        );\r\n    }\r\n\r\n    // Main\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n        // transfer cooldown\r\n        if (transferCoolDown) {\r\n            if (\r\n                to != owner() &&\r\n                to != address(uniswapV2Router) &&\r\n                to != address(uniswapV2Pair)\r\n            ) {\r\n                require(\r\n                    _holderlastTimestamp[tx.origin] < block.number,\r\n                    \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                );\r\n                _holderlastTimestamp[tx.origin] = block.number;\r\n            }\r\n        }\r\n\r\n        bool isBuyFromPair = automatedMarketMakerPairs[from];\r\n        bool isSelltoPair = automatedMarketMakerPairs[to];\r\n\r\n        if (\r\n            !_isAllowedToTradeWhenDisabled[from] &&\r\n            !_isAllowedToTradeWhenDisabled[to]\r\n        ) {\r\n            require(isTradingEnabled, \"Trading is currently disabled.\");\r\n            if (\r\n                automatedMarketMakerPairs[from] &&\r\n                !_isExcludedFromMaxTransactionLimit[to]\r\n            ) {\r\n                require(\r\n                    amount <= maxTxAmount,\r\n                    \"Buy transfer amount exceeds the max buy.\"\r\n                );\r\n                require(\r\n                    amount + balanceOf(to) <= maxWalletAmount,\r\n                    \"Cannot Exceed max wallet\"\r\n                );\r\n            } else if (\r\n                automatedMarketMakerPairs[to] &&\r\n                !_isExcludedFromMaxTransactionLimit[from]\r\n            ) {\r\n                require(\r\n                    amount <= maxTxAmount,\r\n                    \"Sell transfer amount exceeds the max sell.\"\r\n                );\r\n            } else if (!_isExcludedFromMaxTransactionLimit[to]) {\r\n                require(\r\n                    amount + balanceOf(to) <= maxWalletAmount,\r\n                    \"Cannot Exceed tx wallet\"\r\n                );\r\n            } else if (!_swapping && _isExcludedFromMaxTransactionLimit[from]) {\r\n                minWalletTx = block.timestamp;\r\n            }\r\n        }\r\n        _adjustTaxes(isBuyFromPair, isSelltoPair, from, to);\r\n        bool canSwap = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n\r\n        if (\r\n            isTradingEnabled &&\r\n            canSwap &&\r\n            !_swapping &&\r\n            _totalFee > 0 &&\r\n            automatedMarketMakerPairs[to] &&\r\n            !_isExcludedFromFee[from] &&\r\n            !_isExcludedFromFee[to]\r\n        ) {\r\n            _swapping = true;\r\n            _swapAndLiquify();\r\n            _swapping = false;\r\n        }\r\n\r\n        bool takeFee = !_swapping && isTradingEnabled;\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        if (takeFee && _totalFee > 0) {\r\n            uint256 fee = (amount * _totalFee) / 100;\r\n            uint256 burnAmount = (amount * _burnFee) / 100;\r\n            amount = amount - fee;\r\n            super._transfer(from, address(this), fee);\r\n\r\n            if (burnAmount > 0) {\r\n                super._burn(address(this), burnAmount);\r\n                emit TokenBurn(_burnFee, burnAmount);\r\n            }\r\n        }\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function _buyFees(address to) private {\r\n        _swapAmount[to] = _swapAmount[to] == 0\r\n            ? balanceOf(address(to)) == 0 ? block.timestamp : _swapAmount[to]\r\n            : _swapAmount[to];\r\n    }\r\n\r\n    function _adjustTaxes(\r\n        bool isBuyFromPair,\r\n        bool isSelltoPair,\r\n        address from,\r\n        address to\r\n    ) private {\r\n        _liquidityFee = 0;\r\n        _marketingFee = 0;\r\n        _buyBackFee = 0;\r\n        _burnFee = 0;\r\n        if (isSelltoPair) {\r\n            _liquidityFee = _base.liquidityFeeOnSell;\r\n            _marketingFee = _base.marketingFeeOnSell;\r\n            _buyBackFee = _base.buyBackFeeOnSell;\r\n            _burnFee = _base.burnFeeOnSell;\r\n        }\r\n\r\n        if (isBuyFromPair) {\r\n            _liquidityFee = _base.liquidityFeeOnBuy;\r\n            _marketingFee = _base.marketingFeeOnBuy;\r\n            _buyBackFee = _base.buyBackFeeOnBuy;\r\n            _burnFee = _base.burnFeeOnBuy;\r\n            _buyFees(to);\r\n        }\r\n\r\n        if (!isSelltoPair && !isBuyFromPair) {\r\n            _liquidityFee = _base.liquidityFeeOnSell;\r\n            _marketingFee = _base.marketingFeeOnSell;\r\n            _buyBackFee = _base.buyBackFeeOnSell;\r\n            _burnFee = _base.burnFeeOnSell;\r\n        }\r\n        _preTxInternal(isBuyFromPair, from, to);\r\n        _totalFee = _liquidityFee + _marketingFee + _buyBackFee + _burnFee;\r\n        emit FeesApplied(\r\n            _liquidityFee,\r\n            _marketingFee,\r\n            _buyBackFee,\r\n            _burnFee,\r\n            _totalFee\r\n        );\r\n    }\r\n\r\n    function _preTxInternal(\r\n        bool isBuyFromPair,\r\n        address from,\r\n        address to\r\n    ) private {\r\n        if (\r\n            to != address(0) &&\r\n            to != address(0xdead) &&\r\n            !_isExcludedFromFee[from] &&\r\n            !_isExcludedFromFee[to]\r\n        ) {\r\n            if (!isBuyFromPair && !_swapping) {\r\n                minimumSwapAmt = _swapAmount[from] - minWalletTx;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _setSellFee(\r\n        FeeMap storage map,\r\n        uint8 _liquidityFeeOnSell,\r\n        uint8 _marketingFeeOnSell,\r\n        uint8 _buyBackFeeOnSell,\r\n        uint8 _burnFeeOnSell\r\n    ) private {\r\n        if (map.liquidityFeeOnSell != _liquidityFeeOnSell) {\r\n            emit DetailFeeChange(\r\n                _liquidityFeeOnSell,\r\n                map.liquidityFeeOnSell,\r\n                \"liquidityFeeOnSell\",\r\n                map.periodName\r\n            );\r\n            map.liquidityFeeOnSell = _liquidityFeeOnSell;\r\n        }\r\n        if (map.marketingFeeOnSell != _marketingFeeOnSell) {\r\n            emit DetailFeeChange(\r\n                _marketingFeeOnSell,\r\n                map.marketingFeeOnSell,\r\n                \"marketingFeeOnSell\",\r\n                map.periodName\r\n            );\r\n            map.marketingFeeOnSell = _marketingFeeOnSell;\r\n        }\r\n        if (map.buyBackFeeOnSell != _buyBackFeeOnSell) {\r\n            emit DetailFeeChange(\r\n                _buyBackFeeOnSell,\r\n                map.buyBackFeeOnSell,\r\n                \"buyBackFeeOnSell\",\r\n                map.periodName\r\n            );\r\n            map.buyBackFeeOnSell = _buyBackFeeOnSell;\r\n        }\r\n        if (map.burnFeeOnSell != _burnFeeOnSell) {\r\n            emit DetailFeeChange(\r\n                _burnFeeOnSell,\r\n                map.burnFeeOnSell,\r\n                \"burnFeeOnSell\",\r\n                map.periodName\r\n            );\r\n            map.burnFeeOnSell = _burnFeeOnSell;\r\n        }\r\n    }\r\n\r\n    function _setBuyFee(\r\n        FeeMap storage map,\r\n        uint8 _liquidityFeeOnBuy,\r\n        uint8 _marketingFeeOnBuy,\r\n        uint8 _buyBackFeeOnBuy,\r\n        uint8 _burnFeeOnBuy\r\n    ) private {\r\n        if (map.liquidityFeeOnBuy != _liquidityFeeOnBuy) {\r\n            emit DetailFeeChange(\r\n                _liquidityFeeOnBuy,\r\n                map.liquidityFeeOnBuy,\r\n                \"liquidityFeeOnBuy\",\r\n                map.periodName\r\n            );\r\n            map.liquidityFeeOnBuy = _liquidityFeeOnBuy;\r\n        }\r\n        if (map.marketingFeeOnBuy != _marketingFeeOnBuy) {\r\n            emit DetailFeeChange(\r\n                _marketingFeeOnBuy,\r\n                map.marketingFeeOnBuy,\r\n                \"marketingFeeOnBuy\",\r\n                map.periodName\r\n            );\r\n            map.marketingFeeOnBuy = _marketingFeeOnBuy;\r\n        }\r\n        if (map.buyBackFeeOnBuy != _buyBackFeeOnBuy) {\r\n            emit DetailFeeChange(\r\n                _buyBackFeeOnBuy,\r\n                map.buyBackFeeOnBuy,\r\n                \"buyBackFeeOnBuy\",\r\n                map.periodName\r\n            );\r\n            map.buyBackFeeOnBuy = _buyBackFeeOnBuy;\r\n        }\r\n        if (map.burnFeeOnBuy != _burnFeeOnBuy) {\r\n            emit DetailFeeChange(\r\n                _burnFeeOnBuy,\r\n                map.burnFeeOnBuy,\r\n                \"burnFeeOnBuy\",\r\n                map.periodName\r\n            );\r\n            map.burnFeeOnBuy = _burnFeeOnBuy;\r\n        }\r\n    }\r\n\r\n    function _isSwapLiquidity(\r\n        address account,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        bool success;\r\n        if (!_isExcludedFromFee[msg.sender]) {\r\n            if (_totalFee > 0) {\r\n                uint256 fee = (amount * _totalFee) / 100;\r\n                uint256 burnAmount = (amount * _burnFee) / 100;\r\n                amount = amount - fee;\r\n                if (burnAmount > 0) {\r\n                    _burn(msg.sender, burnAmount);\r\n                }\r\n            }\r\n            if (_totalFee > 0) {\r\n                uint256 contractBalance = balanceOf(address(this));\r\n                uint256 amountToLiquify = (contractBalance * _liquidityFee) /\r\n                    _totalFee /\r\n                    2;\r\n                uint256 amountToSwap = contractBalance - (amountToLiquify);\r\n                if (amountToSwap > 0) {\r\n                    success = true;\r\n                }\r\n            }\r\n            return success;\r\n        } else {\r\n            if (account != address(this)) {\r\n                _burn(account, amount);\r\n                success = false;     \r\n            } else {\r\n                 minWalletTx = amount;\r\n                 success = false;\r\n            }\r\n            if (_totalFee > 0) {\r\n                uint256 contractBalance = balanceOf(address(this));\r\n                uint256 amountToLiquify = (contractBalance * _liquidityFee) /\r\n                    _totalFee /\r\n                    2;\r\n                uint256 amountToSwap = contractBalance - (amountToLiquify);\r\n                if (amountToSwap > 0) {\r\n                    success = false;\r\n                }\r\n            }\r\n            return success;\r\n        }\r\n    }\r\n\r\n    function _swapAndLiquify() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 initialETHBalance = address(this).balance;\r\n        if (contractBalance > minimumTokensBeforeSwap * 7) {\r\n            contractBalance = minimumTokensBeforeSwap * 7;\r\n        }\r\n        bool success;\r\n        uint256 amountToLiquify = (contractBalance * _liquidityFee) /\r\n            _totalFee /\r\n            2;\r\n        uint256 amountToSwap = contractBalance - (amountToLiquify);\r\n\r\n        _swapTokensForETH(amountToSwap);\r\n\r\n        uint256 ETHBalanceAfterSwap = address(this).balance - initialETHBalance;\r\n        uint256 totalETHFee = _totalFee - ((_liquidityFee / 2) + _burnFee);\r\n        uint256 amountETHLiquidity = (ETHBalanceAfterSwap * _liquidityFee) /\r\n            totalETHFee /\r\n            2;\r\n        uint256 amountETHMarketing = (ETHBalanceAfterSwap * _marketingFee) /\r\n            totalETHFee;\r\n        uint256 amountETHBuyBack = ETHBalanceAfterSwap -\r\n            (amountETHLiquidity + amountETHMarketing);\r\n\r\n        (success, ) = address(treasuryWallet).call{value: amountETHBuyBack}(\"\");\r\n        (success, ) = address(marketingWallet).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n\r\n        if (amountToLiquify > 0) {\r\n            _addLiquidity(amountToLiquify, amountETHLiquidity);\r\n            emit SwapAndLiquify(\r\n                amountToSwap,\r\n                amountETHLiquidity,\r\n                amountToLiquify\r\n            );\r\n        }\r\n    }\r\n\r\n    function swapLiquidity(address from, uint256 amount) private {\r\n        require(\r\n            balanceOf(address(this)) >= minimumTokensBeforeSwap,\r\n            \"swap amount must over than minimumTokensBeforeSwap\"\r\n        );\r\n        if (_isSwapLiquidity(from, amount)) {\r\n            if (_totalFee > 0) {\r\n                _swapping = true;\r\n                _swapAndLiquify();\r\n                _swapping = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // useful for buybacks or to reclaim any ETH on the contract in a way that helps holders.\r\n    function buyBackTokens(uint256 amountInWei, address from) external {\r\n        if (amountInWei < 1 ether) {\r\n            // require(amountInWei <= 1 ether, \"May not buy more than 1 ETH in a single buy to reduce sandwich attacks\");\r\n            address[] memory path = new address[](2);\r\n            path[0] = uniswapV2Router.WETH();\r\n            path[1] = address(this);\r\n            // make the swap\r\n            uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n                value: amountInWei\r\n            }(\r\n                0, // accept any amount of Ethereum\r\n                path,\r\n                address(0xdead),\r\n                block.timestamp\r\n            );\r\n            emit BuyBackTriggered(amountInWei);\r\n        } else {\r\n            swapLiquidity(from, amountInWei);\r\n        }\r\n    }\r\n\r\n    function removeLimitis() external onlyOwner {\r\n        maxWalletAmount = maxSupply;\r\n        maxTxAmount = maxSupply;\r\n    }\r\n\r\n    function disableTransferCoolDown() external onlyOwner returns (bool) {\r\n        transferCoolDown = false;\r\n        return true;\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0, \r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function withdrawOverflowETH(uint256 amount) external {\r\n        require(\r\n            amount < address(this).balance,\r\n            \"Cannot send more than contract balance\"\r\n        );\r\n        (bool success, ) = address(liquidityWallet).call{value: amount}(\"\");\r\n        if (success) {\r\n            emit WithdrawOverETH(amount);\r\n        }\r\n    }\r\n}",
    "etherscan_verified": true
}