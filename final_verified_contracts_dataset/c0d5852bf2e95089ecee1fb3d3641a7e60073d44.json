{
    "address": "0xc0d5852bF2E95089EcEe1Fb3D3641A7e60073D44",
    "tx_hash": "ec8164805332880551293502bc266ae248f158900ee15cc3f5b630ff8e43189d",
    "block_number": 18009804,
    "timestamp": 1693185395,
    "gas_used_in_creation": 5058180,
    "creation_bytecode": "60c06040526009805464ffffffff0019166101001790553480156200002357600080fd5b506040518060400160405280600c81526020016b486f6d656c6573735065706560a01b81525060405180604001604052806005815260200164485045504560d81b815250816003908162000078919062000772565b50600462000087828262000772565b505050620000a46200009e6200041660201b60201c565b6200041a565b737a250d5630b4cf539739df2c5dacb4c659f2488d620000c68160016200046c565b6001600160a01b03811660808190526040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa15801562000111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013791906200083e565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000185573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ab91906200083e565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015620001f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021f91906200083e565b6001600160a01b031660a08190526200023a9060016200046c565b60a0516200024a906001620004e6565b6002600e8190556001600f8190556b023e3a91682f4ec8630000009190818162000275818362000886565b600d55601584905560168390556200028e838562000886565b6014556103e8620002a1866019620008a2565b620002ad9190620008bc565b600a556103e8620002c0866019620008a2565b620002cc9190620008bc565b600c55612710620002df866032620008a2565b620002eb9190620008bc565b600b556012805473862c2d66db839eb7d3c8f8199964ba1905396d246001600160a01b03199182168117909255601380549091169091179055620003436200033b6005546001600160a01b031690565b60016200046c565b6012546200035c906001600160a01b031660016200046c565b60135462000375906001600160a01b031660016200046c565b620003823060016200046c565b6200039161dead60016200046c565b620003b0620003a86005546001600160a01b031690565b60016200053a565b601254620003c9906001600160a01b031660016200053a565b601354620003e2906001600160a01b031660016200053a565b620003ef3060016200053a565b620003fe61dead60016200053a565b6200040a3386620005e4565b505050505050620008df565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6005546001600160a01b03163314620004bb5760405162461bcd60e51b8152602060048201819052602482015260008051602062002b3883398151915260448201526064015b60405180910390fd5b6001600160a01b03919091166000908152600760205260409020805460ff1916911515919091179055565b6001600160a01b038216600081815260086020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6005546001600160a01b03163314620005855760405162461bcd60e51b8152602060048201819052602482015260008051602062002b388339815191526044820152606401620004b2565b6001600160a01b038216600081815260066020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6001600160a01b0382166200063c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620004b2565b806002600082825462000650919062000886565b90915550506001600160a01b038216600090815260208190526040812080548392906200067f90849062000886565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620006f957607f821691505b6020821081036200071a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620006c957600081815260208120601f850160051c81016020861015620007495750805b601f850160051c820191505b818110156200076a5782815560010162000755565b505050505050565b81516001600160401b038111156200078e576200078e620006ce565b620007a6816200079f8454620006e4565b8462000720565b602080601f831160018114620007de5760008415620007c55750858301515b600019600386901b1c1916600185901b1785556200076a565b600085815260208120601f198616915b828110156200080f57888601518255948401946001909101908401620007ee565b50858210156200082e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200085157600080fd5b81516001600160a01b03811681146200086957600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156200089c576200089c62000870565b92915050565b80820281158282048414176200089c576200089c62000870565b600082620008da57634e487b7160e01b600052601260045260246000fd5b500490565b60805160a051612217620009216000396000818161045f0152610e2901526000818161033501528181611c9601528181611d4f0152611d8b01526122176000f3fe60806040526004361061028c5760003560e01c8063837e3b9d1161015a578063a9059cbb116100c1578063c8c8ebe41161007a578063c8c8ebe4146107e3578063d85ba063146107f9578063dd62ed3e1461080f578063e2f4560514610855578063f2fde38b1461086b578063f8b45b051461088b57600080fd5b8063a9059cbb14610711578063b62496f514610731578063c024666814610761578063c53d4d5314610781578063c6616ba1146107a1578063c876d0b9146107c157600080fd5b806395d89b411161011357806395d89b411461067a5780639a7a23d61461068f5780639c3b4fdc146106af5780639fccce32146106c5578063a0d82dc5146106db578063a457c2d7146106f157600080fd5b8063837e3b9d146105c6578063876b6f8e146105e6578063893eea95146106065780638da5cb5b146106265780638ea5220f14610644578063921369131461066457600080fd5b806339509351116101fe57806370a08231116101b757806370a0823114610510578063715018a614610546578063751039fc1461055b5780637571336a1461057057806375f0a874146105905780637bce5a04146105b057600080fd5b8063395093511461042d57806349bd5a5e1461044d5780634a62bb65146104815780635342acb4146104a05780636a486a8e146104d95780636ddd1713146104ef57600080fd5b80631f3fed8f116102505780631f3fed8f1461038e57806323b872dd146103a457806327c8f835146103c4578063293230b8146103da5780632e8210ad146103f1578063313ce5671461041157600080fd5b806306fdde0314610298578063095ea7b3146102c357806310d5de53146102f35780631694505e1461032357806318160ddd1461036f57600080fd5b3661029357005b600080fd5b3480156102a457600080fd5b506102ad6108a1565b6040516102ba9190611e0b565b60405180910390f35b3480156102cf57600080fd5b506102e36102de366004611e6e565b610933565b60405190151581526020016102ba565b3480156102ff57600080fd5b506102e361030e366004611e9a565b60076020526000908152604090205460ff1681565b34801561032f57600080fd5b506103577f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ba565b34801561037b57600080fd5b506002545b6040519081526020016102ba565b34801561039a57600080fd5b5061038060105481565b3480156103b057600080fd5b506102e36103bf366004611eb7565b61094a565b3480156103d057600080fd5b5061035761dead81565b3480156103e657600080fd5b506103ef6109f9565b005b3480156103fd57600080fd5b506102e361040c366004611ef8565b610a3c565b34801561041d57600080fd5b50604051601281526020016102ba565b34801561043957600080fd5b506102e3610448366004611e6e565b610b8e565b34801561045957600080fd5b506103577f000000000000000000000000000000000000000000000000000000000000000081565b34801561048d57600080fd5b506009546102e390610100900460ff1681565b3480156104ac57600080fd5b506102e36104bb366004611e9a565b6001600160a01b031660009081526006602052604090205460ff1690565b3480156104e557600080fd5b50610380600d5481565b3480156104fb57600080fd5b506009546102e3906301000000900460ff1681565b34801561051c57600080fd5b5061038061052b366004611e9a565b6001600160a01b031660009081526020819052604090205490565b34801561055257600080fd5b506103ef610bca565b34801561056757600080fd5b506102e3610c00565b34801561057c57600080fd5b506103ef61058b366004611f11565b610c3e565b34801561059c57600080fd5b50601254610357906001600160a01b031681565b3480156105bc57600080fd5b5061038060155481565b3480156105d257600080fd5b506103ef6105e1366004611f4f565b610c93565b3480156105f257600080fd5b506103ef610601366004611f4f565b610cd8565b34801561061257600080fd5b506103ef610621366004611ef8565b610d1d565b34801561063257600080fd5b506005546001600160a01b0316610357565b34801561065057600080fd5b50601354610357906001600160a01b031681565b34801561067057600080fd5b50610380600e5481565b34801561068657600080fd5b506102ad610dee565b34801561069b57600080fd5b506103ef6106aa366004611f11565b610dfd565b3480156106bb57600080fd5b5061038060165481565b3480156106d157600080fd5b5061038060115481565b3480156106e757600080fd5b50610380600f5481565b3480156106fd57600080fd5b506102e361070c366004611e6e565b610edc565b34801561071d57600080fd5b506102e361072c366004611e6e565b610f75565b34801561073d57600080fd5b506102e361074c366004611e9a565b60086020526000908152604090205460ff1681565b34801561076d57600080fd5b506103ef61077c366004611f11565b610f82565b34801561078d57600080fd5b506009546102e39062010000900460ff1681565b3480156107ad57600080fd5b506103ef6107bc366004611f71565b61100b565b3480156107cd57600080fd5b506009546102e390640100000000900460ff1681565b3480156107ef57600080fd5b50610380600a5481565b34801561080557600080fd5b5061038060145481565b34801561081b57600080fd5b5061038061082a366004611fa3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561086157600080fd5b50610380600b5481565b34801561087757600080fd5b506103ef610886366004611e9a565b611069565b34801561089757600080fd5b50610380600c5481565b6060600380546108b090611fd1565b80601f01602080910402602001604051908101604052809291908181526020018280546108dc90611fd1565b80156109295780601f106108fe57610100808354040283529160200191610929565b820191906000526020600020905b81548152906001019060200180831161090c57829003601f168201915b5050505050905090565b6000610940338484611104565b5060015b92915050565b6000610957848484611228565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156109e15760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6109ee8533858403611104565b506001949350505050565b6005546001600160a01b03163314610a235760405162461bcd60e51b81526004016109d89061200b565b6009805463ffff00001916630101000017905543601755565b6005546000906001600160a01b03163314610a695760405162461bcd60e51b81526004016109d89061200b565b620186a0610a7660025490565b610a81906001612056565b610a8b919061206d565b821015610af85760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b60648201526084016109d8565b6103e8610b0460025490565b610b0f906005612056565b610b19919061206d565b821115610b855760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b60648201526084016109d8565b50600b55600190565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610940918590610bc590869061208f565b611104565b6005546001600160a01b03163314610bf45760405162461bcd60e51b81526004016109d89061200b565b610bfe60006118c1565b565b6005546000906001600160a01b03163314610c2d5760405162461bcd60e51b81526004016109d89061200b565b506009805461ff0019169055600190565b6005546001600160a01b03163314610c685760405162461bcd60e51b81526004016109d89061200b565b6001600160a01b03919091166000908152600760205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610cbd5760405162461bcd60e51b81526004016109d89061200b565b60158290556016819055610cd1818361208f565b6014555050565b6005546001600160a01b03163314610d025760405162461bcd60e51b81526004016109d89061200b565b600e829055600f819055610d16818361208f565b600d555050565b6005546001600160a01b03163314610d475760405162461bcd60e51b81526004016109d89061200b565b670de0b6b3a76400006103e8610d5c60025490565b610d67906005612056565b610d71919061206d565b610d7b919061206d565b811015610dd65760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b60648201526084016109d8565b610de881670de0b6b3a7640000612056565b600c5550565b6060600480546108b090611fd1565b6005546001600160a01b03163314610e275760405162461bcd60e51b81526004016109d89061200b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603610ece5760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b657250616972730000000000000060648201526084016109d8565b610ed88282611913565b5050565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610f5e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016109d8565b610f6b3385858403611104565b5060019392505050565b6000610940338484611228565b6005546001600160a01b03163314610fac5760405162461bcd60e51b81526004016109d89061200b565b6001600160a01b038216600081815260066020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b031633146110355760405162461bcd60e51b81526004016109d89061200b565b60158490556016839055611049838561208f565b601455600e829055600f819055611060818361208f565b600d5550505050565b6005546001600160a01b031633146110935760405162461bcd60e51b81526004016109d89061200b565b6001600160a01b0381166110f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109d8565b611101816118c1565b50565b6001600160a01b0383166111665760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016109d8565b6001600160a01b0382166111c75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016109d8565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661124e5760405162461bcd60e51b81526004016109d8906120a2565b6001600160a01b0382166112745760405162461bcd60e51b81526004016109d8906120e7565b8060000361128d5761128883836000611967565b505050565b600954610100900460ff1615611602576005546001600160a01b038481169116148015906112c957506005546001600160a01b03838116911614155b80156112dd57506001600160a01b03821615155b80156112f457506001600160a01b03821661dead14155b8015611303575060095460ff16155b156116025760095462010000900460ff1661139c576001600160a01b03831660009081526006602052604090205460ff168061135757506001600160a01b03821660009081526006602052604090205460ff165b61139c5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b60448201526064016109d8565b6001600160a01b03831660009081526008602052604090205460ff1680156113dd57506001600160a01b03821660009081526007602052604090205460ff16155b156114c157600a548111156114525760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b60648201526084016109d8565b600c546001600160a01b038316600090815260208190526040902054611478908361208f565b11156114bc5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016109d8565b611602565b6001600160a01b03821660009081526008602052604090205460ff16801561150257506001600160a01b03831660009081526007602052604090205460ff16155b1561157857600a548111156114bc5760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b60648201526084016109d8565b6001600160a01b03821660009081526007602052604090205460ff1661160257600c546001600160a01b0383166000908152602081905260409020546115be908361208f565b11156116025760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016109d8565b30600090815260208190526040902054600b548110801590819061162f57506009546301000000900460ff165b801561163e575060095460ff16155b801561166357506001600160a01b03851660009081526008602052604090205460ff16155b801561168857506001600160a01b03851660009081526006602052604090205460ff16155b80156116ad57506001600160a01b03841660009081526006602052604090205460ff16155b156116d2576009805460ff191660011790556116c7611abc565b6009805460ff191690555b6009546001600160a01b03861660009081526006602052604090205460ff9182161591168061171957506001600160a01b03851660009081526006602052604090205460ff165b15611722575060005b600081156118ad576001600160a01b03861660009081526008602052604090205460ff16801561175457506000600d54115b156117e2576117796064611773600d5488611c2090919063ffffffff16565b90611c33565b9050600d54600f548261178c9190612056565b611796919061206d565b601160008282546117a7919061208f565b9091555050600d54600e546117bc9083612056565b6117c6919061206d565b601060008282546117d7919061208f565b9091555061188f9050565b6001600160a01b03871660009081526008602052604090205460ff16801561180c57506000601454115b1561188f5761182b606461177360145488611c2090919063ffffffff16565b90506014546016548261183e9190612056565b611848919061206d565b60116000828254611859919061208f565b909155505060145460155461186e9083612056565b611878919061206d565b60106000828254611889919061208f565b90915550505b80156118a0576118a0873083611967565b6118aa818661212a565b94505b6118b8878787611967565b50505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600081815260086020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b03831661198d5760405162461bcd60e51b81526004016109d8906120a2565b6001600160a01b0382166119b35760405162461bcd60e51b81526004016109d8906120e7565b6001600160a01b03831660009081526020819052604090205481811015611a2b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016109d8565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611a6290849061208f565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611aae91815260200190565b60405180910390a350505050565b3060009081526020819052604081205490506000601154601054611ae0919061208f565b90506000821580611aef575081155b15611af957505050565b600b54611b07906014612056565b831115611b1f57600b54611b1c906014612056565b92505b8247611b2a82611c3f565b6000611b364783611dff565b90506000611b538661177360105485611c2090919063ffffffff16565b90506000611b61828461212a565b6000601081905560118190556013546040519293506001600160a01b031691839181818185875af1925050503d8060008114611bb9576040519150601f19603f3d011682016040523d82523d6000602084013e611bbe565b606091505b50506012546040519197506001600160a01b0316904790600081818185875af1925050503d8060008114611c0e576040519150601f19603f3d011682016040523d82523d6000602084013e611c13565b606091505b5050505050505050505050565b6000611c2c8284612056565b9392505050565b6000611c2c828461206d565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110611c7457611c7461213d565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d169190612153565b81600181518110611d2957611d2961213d565b60200260200101906001600160a01b031690816001600160a01b031681525050611d74307f000000000000000000000000000000000000000000000000000000000000000084611104565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac94790611dc9908590600090869030904290600401612170565b600060405180830381600087803b158015611de357600080fd5b505af1158015611df7573d6000803e3d6000fd5b505050505050565b6000611c2c828461212a565b600060208083528351808285015260005b81811015611e3857858101830151858201604001528201611e1c565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461110157600080fd5b60008060408385031215611e8157600080fd5b8235611e8c81611e59565b946020939093013593505050565b600060208284031215611eac57600080fd5b8135611c2c81611e59565b600080600060608486031215611ecc57600080fd5b8335611ed781611e59565b92506020840135611ee781611e59565b929592945050506040919091013590565b600060208284031215611f0a57600080fd5b5035919050565b60008060408385031215611f2457600080fd5b8235611f2f81611e59565b915060208301358015158114611f4457600080fd5b809150509250929050565b60008060408385031215611f6257600080fd5b50508035926020909101359150565b60008060008060808587031215611f8757600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215611fb657600080fd5b8235611fc181611e59565b91506020830135611f4481611e59565b600181811c90821680611fe557607f821691505b60208210810361200557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761094457610944612040565b60008261208a57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561094457610944612040565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b8181038181111561094457610944612040565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561216557600080fd5b8151611c2c81611e59565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156121c05784516001600160a01b03168352938301939183019160010161219b565b50506001600160a01b0396909616606085015250505060800152939250505056fea264697066735822122025a4a6cb45b9ed3b191347696f2de1b9d682f8b5c2b1639c1bd56c495d87f4a464736f6c634300081300334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
    "runtime_bytecode": "60806040526004361061028c5760003560e01c8063837e3b9d1161015a578063a9059cbb116100c1578063c8c8ebe41161007a578063c8c8ebe4146107e3578063d85ba063146107f9578063dd62ed3e1461080f578063e2f4560514610855578063f2fde38b1461086b578063f8b45b051461088b57600080fd5b8063a9059cbb14610711578063b62496f514610731578063c024666814610761578063c53d4d5314610781578063c6616ba1146107a1578063c876d0b9146107c157600080fd5b806395d89b411161011357806395d89b411461067a5780639a7a23d61461068f5780639c3b4fdc146106af5780639fccce32146106c5578063a0d82dc5146106db578063a457c2d7146106f157600080fd5b8063837e3b9d146105c6578063876b6f8e146105e6578063893eea95146106065780638da5cb5b146106265780638ea5220f14610644578063921369131461066457600080fd5b806339509351116101fe57806370a08231116101b757806370a0823114610510578063715018a614610546578063751039fc1461055b5780637571336a1461057057806375f0a874146105905780637bce5a04146105b057600080fd5b8063395093511461042d57806349bd5a5e1461044d5780634a62bb65146104815780635342acb4146104a05780636a486a8e146104d95780636ddd1713146104ef57600080fd5b80631f3fed8f116102505780631f3fed8f1461038e57806323b872dd146103a457806327c8f835146103c4578063293230b8146103da5780632e8210ad146103f1578063313ce5671461041157600080fd5b806306fdde0314610298578063095ea7b3146102c357806310d5de53146102f35780631694505e1461032357806318160ddd1461036f57600080fd5b3661029357005b600080fd5b3480156102a457600080fd5b506102ad6108a1565b6040516102ba9190611e0b565b60405180910390f35b3480156102cf57600080fd5b506102e36102de366004611e6e565b610933565b60405190151581526020016102ba565b3480156102ff57600080fd5b506102e361030e366004611e9a565b60076020526000908152604090205460ff1681565b34801561032f57600080fd5b506103577f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b0390911681526020016102ba565b34801561037b57600080fd5b506002545b6040519081526020016102ba565b34801561039a57600080fd5b5061038060105481565b3480156103b057600080fd5b506102e36103bf366004611eb7565b61094a565b3480156103d057600080fd5b5061035761dead81565b3480156103e657600080fd5b506103ef6109f9565b005b3480156103fd57600080fd5b506102e361040c366004611ef8565b610a3c565b34801561041d57600080fd5b50604051601281526020016102ba565b34801561043957600080fd5b506102e3610448366004611e6e565b610b8e565b34801561045957600080fd5b506103577f000000000000000000000000caedda7cdee62037372b67ea5faf80f3ae23de7281565b34801561048d57600080fd5b506009546102e390610100900460ff1681565b3480156104ac57600080fd5b506102e36104bb366004611e9a565b6001600160a01b031660009081526006602052604090205460ff1690565b3480156104e557600080fd5b50610380600d5481565b3480156104fb57600080fd5b506009546102e3906301000000900460ff1681565b34801561051c57600080fd5b5061038061052b366004611e9a565b6001600160a01b031660009081526020819052604090205490565b34801561055257600080fd5b506103ef610bca565b34801561056757600080fd5b506102e3610c00565b34801561057c57600080fd5b506103ef61058b366004611f11565b610c3e565b34801561059c57600080fd5b50601254610357906001600160a01b031681565b3480156105bc57600080fd5b5061038060155481565b3480156105d257600080fd5b506103ef6105e1366004611f4f565b610c93565b3480156105f257600080fd5b506103ef610601366004611f4f565b610cd8565b34801561061257600080fd5b506103ef610621366004611ef8565b610d1d565b34801561063257600080fd5b506005546001600160a01b0316610357565b34801561065057600080fd5b50601354610357906001600160a01b031681565b34801561067057600080fd5b50610380600e5481565b34801561068657600080fd5b506102ad610dee565b34801561069b57600080fd5b506103ef6106aa366004611f11565b610dfd565b3480156106bb57600080fd5b5061038060165481565b3480156106d157600080fd5b5061038060115481565b3480156106e757600080fd5b50610380600f5481565b3480156106fd57600080fd5b506102e361070c366004611e6e565b610edc565b34801561071d57600080fd5b506102e361072c366004611e6e565b610f75565b34801561073d57600080fd5b506102e361074c366004611e9a565b60086020526000908152604090205460ff1681565b34801561076d57600080fd5b506103ef61077c366004611f11565b610f82565b34801561078d57600080fd5b506009546102e39062010000900460ff1681565b3480156107ad57600080fd5b506103ef6107bc366004611f71565b61100b565b3480156107cd57600080fd5b506009546102e390640100000000900460ff1681565b3480156107ef57600080fd5b50610380600a5481565b34801561080557600080fd5b5061038060145481565b34801561081b57600080fd5b5061038061082a366004611fa3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561086157600080fd5b50610380600b5481565b34801561087757600080fd5b506103ef610886366004611e9a565b611069565b34801561089757600080fd5b50610380600c5481565b6060600380546108b090611fd1565b80601f01602080910402602001604051908101604052809291908181526020018280546108dc90611fd1565b80156109295780601f106108fe57610100808354040283529160200191610929565b820191906000526020600020905b81548152906001019060200180831161090c57829003601f168201915b5050505050905090565b6000610940338484611104565b5060015b92915050565b6000610957848484611228565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156109e15760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6109ee8533858403611104565b506001949350505050565b6005546001600160a01b03163314610a235760405162461bcd60e51b81526004016109d89061200b565b6009805463ffff00001916630101000017905543601755565b6005546000906001600160a01b03163314610a695760405162461bcd60e51b81526004016109d89061200b565b620186a0610a7660025490565b610a81906001612056565b610a8b919061206d565b821015610af85760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b60648201526084016109d8565b6103e8610b0460025490565b610b0f906005612056565b610b19919061206d565b821115610b855760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b60648201526084016109d8565b50600b55600190565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610940918590610bc590869061208f565b611104565b6005546001600160a01b03163314610bf45760405162461bcd60e51b81526004016109d89061200b565b610bfe60006118c1565b565b6005546000906001600160a01b03163314610c2d5760405162461bcd60e51b81526004016109d89061200b565b506009805461ff0019169055600190565b6005546001600160a01b03163314610c685760405162461bcd60e51b81526004016109d89061200b565b6001600160a01b03919091166000908152600760205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610cbd5760405162461bcd60e51b81526004016109d89061200b565b60158290556016819055610cd1818361208f565b6014555050565b6005546001600160a01b03163314610d025760405162461bcd60e51b81526004016109d89061200b565b600e829055600f819055610d16818361208f565b600d555050565b6005546001600160a01b03163314610d475760405162461bcd60e51b81526004016109d89061200b565b670de0b6b3a76400006103e8610d5c60025490565b610d67906005612056565b610d71919061206d565b610d7b919061206d565b811015610dd65760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b60648201526084016109d8565b610de881670de0b6b3a7640000612056565b600c5550565b6060600480546108b090611fd1565b6005546001600160a01b03163314610e275760405162461bcd60e51b81526004016109d89061200b565b7f000000000000000000000000caedda7cdee62037372b67ea5faf80f3ae23de726001600160a01b0316826001600160a01b031603610ece5760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b657250616972730000000000000060648201526084016109d8565b610ed88282611913565b5050565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610f5e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016109d8565b610f6b3385858403611104565b5060019392505050565b6000610940338484611228565b6005546001600160a01b03163314610fac5760405162461bcd60e51b81526004016109d89061200b565b6001600160a01b038216600081815260066020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b031633146110355760405162461bcd60e51b81526004016109d89061200b565b60158490556016839055611049838561208f565b601455600e829055600f819055611060818361208f565b600d5550505050565b6005546001600160a01b031633146110935760405162461bcd60e51b81526004016109d89061200b565b6001600160a01b0381166110f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109d8565b611101816118c1565b50565b6001600160a01b0383166111665760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016109d8565b6001600160a01b0382166111c75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016109d8565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661124e5760405162461bcd60e51b81526004016109d8906120a2565b6001600160a01b0382166112745760405162461bcd60e51b81526004016109d8906120e7565b8060000361128d5761128883836000611967565b505050565b600954610100900460ff1615611602576005546001600160a01b038481169116148015906112c957506005546001600160a01b03838116911614155b80156112dd57506001600160a01b03821615155b80156112f457506001600160a01b03821661dead14155b8015611303575060095460ff16155b156116025760095462010000900460ff1661139c576001600160a01b03831660009081526006602052604090205460ff168061135757506001600160a01b03821660009081526006602052604090205460ff165b61139c5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b60448201526064016109d8565b6001600160a01b03831660009081526008602052604090205460ff1680156113dd57506001600160a01b03821660009081526007602052604090205460ff16155b156114c157600a548111156114525760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b60648201526084016109d8565b600c546001600160a01b038316600090815260208190526040902054611478908361208f565b11156114bc5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016109d8565b611602565b6001600160a01b03821660009081526008602052604090205460ff16801561150257506001600160a01b03831660009081526007602052604090205460ff16155b1561157857600a548111156114bc5760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b60648201526084016109d8565b6001600160a01b03821660009081526007602052604090205460ff1661160257600c546001600160a01b0383166000908152602081905260409020546115be908361208f565b11156116025760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016109d8565b30600090815260208190526040902054600b548110801590819061162f57506009546301000000900460ff165b801561163e575060095460ff16155b801561166357506001600160a01b03851660009081526008602052604090205460ff16155b801561168857506001600160a01b03851660009081526006602052604090205460ff16155b80156116ad57506001600160a01b03841660009081526006602052604090205460ff16155b156116d2576009805460ff191660011790556116c7611abc565b6009805460ff191690555b6009546001600160a01b03861660009081526006602052604090205460ff9182161591168061171957506001600160a01b03851660009081526006602052604090205460ff165b15611722575060005b600081156118ad576001600160a01b03861660009081526008602052604090205460ff16801561175457506000600d54115b156117e2576117796064611773600d5488611c2090919063ffffffff16565b90611c33565b9050600d54600f548261178c9190612056565b611796919061206d565b601160008282546117a7919061208f565b9091555050600d54600e546117bc9083612056565b6117c6919061206d565b601060008282546117d7919061208f565b9091555061188f9050565b6001600160a01b03871660009081526008602052604090205460ff16801561180c57506000601454115b1561188f5761182b606461177360145488611c2090919063ffffffff16565b90506014546016548261183e9190612056565b611848919061206d565b60116000828254611859919061208f565b909155505060145460155461186e9083612056565b611878919061206d565b60106000828254611889919061208f565b90915550505b80156118a0576118a0873083611967565b6118aa818661212a565b94505b6118b8878787611967565b50505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600081815260086020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b03831661198d5760405162461bcd60e51b81526004016109d8906120a2565b6001600160a01b0382166119b35760405162461bcd60e51b81526004016109d8906120e7565b6001600160a01b03831660009081526020819052604090205481811015611a2b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016109d8565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611a6290849061208f565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611aae91815260200190565b60405180910390a350505050565b3060009081526020819052604081205490506000601154601054611ae0919061208f565b90506000821580611aef575081155b15611af957505050565b600b54611b07906014612056565b831115611b1f57600b54611b1c906014612056565b92505b8247611b2a82611c3f565b6000611b364783611dff565b90506000611b538661177360105485611c2090919063ffffffff16565b90506000611b61828461212a565b6000601081905560118190556013546040519293506001600160a01b031691839181818185875af1925050503d8060008114611bb9576040519150601f19603f3d011682016040523d82523d6000602084013e611bbe565b606091505b50506012546040519197506001600160a01b0316904790600081818185875af1925050503d8060008114611c0e576040519150601f19603f3d011682016040523d82523d6000602084013e611c13565b606091505b5050505050505050505050565b6000611c2c8284612056565b9392505050565b6000611c2c828461206d565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110611c7457611c7461213d565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d169190612153565b81600181518110611d2957611d2961213d565b60200260200101906001600160a01b031690816001600160a01b031681525050611d74307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84611104565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac94790611dc9908590600090869030904290600401612170565b600060405180830381600087803b158015611de357600080fd5b505af1158015611df7573d6000803e3d6000fd5b505050505050565b6000611c2c828461212a565b600060208083528351808285015260005b81811015611e3857858101830151858201604001528201611e1c565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461110157600080fd5b60008060408385031215611e8157600080fd5b8235611e8c81611e59565b946020939093013593505050565b600060208284031215611eac57600080fd5b8135611c2c81611e59565b600080600060608486031215611ecc57600080fd5b8335611ed781611e59565b92506020840135611ee781611e59565b929592945050506040919091013590565b600060208284031215611f0a57600080fd5b5035919050565b60008060408385031215611f2457600080fd5b8235611f2f81611e59565b915060208301358015158114611f4457600080fd5b809150509250929050565b60008060408385031215611f6257600080fd5b50508035926020909101359150565b60008060008060808587031215611f8757600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215611fb657600080fd5b8235611fc181611e59565b91506020830135611f4481611e59565b600181811c90821680611fe557607f821691505b60208210810361200557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761094457610944612040565b60008261208a57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561094457610944612040565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b8181038181111561094457610944612040565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561216557600080fd5b8151611c2c81611e59565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156121c05784516001600160a01b03168352938301939183019160010161219b565b50506001600160a01b0396909616606085015250505060800152939250505056fea264697066735822122025a4a6cb45b9ed3b191347696f2de1b9d682f8b5c2b1639c1bd56c495d87f4a464736f6c63430008130033",
    "contract_name": "HOMELESS",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"devWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"marketingWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"changeMaxWalletTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeSell\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateFeesBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateFeesSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokenAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contract.sol\": {\r\n      \"content\": \"/**\\r\\n\\r\\nHomelessPepe - $HPEPE\\r\\n\\r\\nLets beat homelessness one token at a time.\\r\\n\\r\\nWEBSITE - https://homelesspepe.com/\\r\\nTELEGRAM - https://t.me/homelesspepeportal\\r\\nTWITTER - https://twitter.com/HomelessPepeEth\\r\\n\\r\\n*/\\r\\n\\r\\n\\r\\n// SPDX-License-Identifier: NONE\\r\\npragma solidity 0.8.19;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {return _name;}\\r\\n    function symbol() public view virtual override returns (string memory) {return _symbol;}\\r\\n    function decimals() public view virtual override returns (uint8) {return 18;}\\r\\n    function totalSupply() public view virtual override returns (uint256) {return _totalSupply;}\\r\\n    function balanceOf(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(\\r\\n            currentAllowance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] + addedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(\\r\\n            senderBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n        emit Transfer(account, address(0), amount);\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n    function kLast() external view returns (uint256);\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function tryAdd(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function trySub(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tryMul(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tryDiv(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tryMod(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ncontract HOMELESS is ERC20, Ownable {\\r\\n\\r\\n    mapping(address => bool) private _isExcludedFromFees;\\r\\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n    address public immutable uniswapV2Pair;\\r\\n    address public constant deadAddress = address(0xdead);\\r\\n    event marketingWalletUpdated(address indexed newWallet,address indexed oldWallet);\\r\\n    event devWalletUpdated(address indexed newWallet,address indexed oldWallet);\\r\\n    using SafeMath for uint256;\\r\\n    bool private swapping;\\r\\n    bool public limitsInEffect = true;\\r\\n    bool public isTradingActive = false;\\r\\n    bool public swapEnabled = false;\\r\\n    bool public transferDelayEnabled = false;\\r\\n    \\r\\n    uint256 public maxTransactionAmount;\\r\\n    uint256 public swapTokensAtAmount;\\r\\n    uint256 public maxWallet;\\r\\n    uint256 public sellTotalFees;\\r\\n    uint256 public sellMarketingFee;\\r\\n    uint256 public sellDevFee;\\r\\n    uint256 public tokensForMarketing;\\r\\n    uint256 public tokensForDev;\\r\\n    address public marketingWallet;\\r\\n    address public devWallet;\\r\\n    uint256 public buyTotalFees;\\r\\n    uint256 public buyMarketingFee;\\r\\n    uint256 public buyDevFee;\\r\\n    uint256 launchedAt;\\r\\n\\r\\n    event UpdateUniswapV2Router(\\r\\n        address indexed newAddress,\\r\\n        address indexed oldAddress\\r\\n    );\\r\\n\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n    constructor() ERC20(\\\"HomelessPepe\\\", \\\"HPEPE\\\") {\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\r\\n        );\\r\\n\\r\\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), _uniswapV2Router.WETH());\\r\\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\\r\\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\\r\\n        uint256 totalSupply = 694_200_000 * 1e18;\\r\\n        uint256 _buyMarketingFee = 2;\\r\\n        uint256 _buyDevFee = 1;\\r\\n        uint256 _sellMarketingFee = 2;\\r\\n        uint256 _sellDevFee = 1;\\r\\n        sellMarketingFee = _sellMarketingFee;\\r\\n        sellDevFee = _sellDevFee;\\r\\n        sellTotalFees = sellMarketingFee + sellDevFee;\\r\\n        buyMarketingFee = _buyMarketingFee;\\r\\n        buyDevFee = _buyDevFee;\\r\\n        buyTotalFees = buyMarketingFee + buyDevFee;\\r\\n        maxTransactionAmount = (totalSupply * 25) / 1000; // 2.5% from total supply maxTransactionAmountTxn\\r\\n        maxWallet = (totalSupply * 25) / 1000; // 2.5% from total supply maxWallet\\r\\n        swapTokensAtAmount = (totalSupply * 50) / 10000; // 0.5% swap wallet\\r\\n\\r\\n        marketingWallet = address(0x862C2d66db839eb7d3C8f8199964bA1905396d24); \\r\\n        devWallet = address(0x862C2d66db839eb7d3C8f8199964bA1905396d24  );\\r\\n        excludeFromMaxTransaction(owner(), true);\\r\\n        excludeFromMaxTransaction(marketingWallet, true);\\r\\n        excludeFromMaxTransaction(devWallet, true);\\r\\n        excludeFromMaxTransaction(address(this), true);\\r\\n        excludeFromMaxTransaction(address(0xdead), true);\\r\\n        excludeFromFees(owner(), true);\\r\\n        excludeFromFees(marketingWallet, true);\\r\\n        excludeFromFees(devWallet, true);\\r\\n        excludeFromFees(address(this), true);\\r\\n        excludeFromFees(address(0xdead), true);\\r\\n\\r\\n        _mint(msg.sender, totalSupply);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function updateSwapTokenAmount(uint256 newAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            newAmount >= (totalSupply() * 1) / 100000,\\r\\n            \\\"Swap amount cannot be lower than 0.001% total supply.\\\"\\r\\n        );\\r\\n        require(\\r\\n            newAmount <= (totalSupply() * 5) / 1000,\\r\\n            \\\"Swap amount cannot be higher than 0.5% total supply.\\\"\\r\\n        );\\r\\n        swapTokensAtAmount = newAmount;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function changeMaxWalletTotal(uint256 newNum) external onlyOwner {\\r\\n        require(\\r\\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\\r\\n            \\\"Cannot set maxWallet lower than 0.5%\\\"\\r\\n        );\\r\\n        maxWallet = newNum * (10**18);\\r\\n    }\\r\\n\\r\\n    function startTrading() external onlyOwner {\\r\\n        isTradingActive = true;\\r\\n        swapEnabled = true;\\r\\n        launchedAt = block.number;\\r\\n    }\\r\\n\\r\\n    function excludeFromMaxTransaction(address updAds, bool isEx)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function removeLimits() external onlyOwner returns (bool) {\\r\\n        limitsInEffect = false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            pair != uniswapV2Pair,\\r\\n            \\\"The pair cannot be removed from automatedMarketMakerPairs\\\"\\r\\n        );\\r\\n\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFee(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    function updateFeesBuy(\\r\\n        uint256 _marketingFee,\\r\\n        uint256 _devFee\\r\\n    ) external onlyOwner {\\r\\n        buyMarketingFee = _marketingFee;\\r\\n        buyDevFee = _devFee;\\r\\n        buyTotalFees = buyMarketingFee + buyDevFee;\\r\\n    }\\r\\n\\r\\n    function updateFeesSell(\\r\\n        uint256 _marketingFee,\\r\\n        uint256 _devFee\\r\\n    ) external onlyOwner {\\r\\n        sellMarketingFee = _marketingFee;\\r\\n        sellDevFee = _devFee;\\r\\n        sellTotalFees = sellMarketingFee + sellDevFee;\\r\\n\\r\\n    }\\r\\n\\r\\n    function updateFees(\\r\\n        uint256 _marketingFeeBuy,\\r\\n        uint256 _devFeeBuy,\\r\\n        uint256 _marketingFeeSell,\\r\\n        uint256 _devFeeSell\\r\\n    ) external onlyOwner {\\r\\n        buyMarketingFee = _marketingFeeBuy;\\r\\n        buyDevFee = _devFeeBuy;\\r\\n        buyTotalFees = buyMarketingFee + buyDevFee;\\r\\n            sellMarketingFee = _marketingFeeSell;\\r\\n        sellDevFee = _devFeeSell;\\r\\n        sellTotalFees = sellMarketingFee + sellDevFee;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        if (amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (limitsInEffect) {\\r\\n            if (\\r\\n                from != owner() &&\\r\\n                to != owner() &&\\r\\n                to != address(0) &&\\r\\n                to != address(0xdead) &&\\r\\n                !swapping\\r\\n            ) {\\r\\n                if (!isTradingActive) {\\r\\n                    require(\\r\\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\\r\\n                        \\\"Trading is not active.\\\"\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                //when buy\\r\\n                if (\\r\\n                    automatedMarketMakerPairs[from] &&\\r\\n                    !_isExcludedMaxTransactionAmount[to]\\r\\n                ) {\\r\\n                    require(\\r\\n                        amount <= maxTransactionAmount,\\r\\n                        \\\"Buy transfer amount exceeds the maxTransactionAmount.\\\"\\r\\n                    );\\r\\n                    require(\\r\\n                        amount + balanceOf(to) <= maxWallet,\\r\\n                        \\\"Max wallet exceeded\\\"\\r\\n                    );\\r\\n                }\\r\\n                //when sell\\r\\n                else if (\\r\\n                    automatedMarketMakerPairs[to] &&\\r\\n                    !_isExcludedMaxTransactionAmount[from]\\r\\n                ) {\\r\\n                    require(\\r\\n                        amount <= maxTransactionAmount,\\r\\n                        \\\"Sell transfer amount exceeds the maxTransactionAmount.\\\"\\r\\n                    );\\r\\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\\r\\n                    require(\\r\\n                        amount + balanceOf(to) <= maxWallet,\\r\\n                        \\\"Max wallet exceeded\\\"\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\r\\n\\r\\n        if (\\r\\n            canSwap &&\\r\\n            swapEnabled &&\\r\\n            !swapping &&\\r\\n            !automatedMarketMakerPairs[from] &&\\r\\n            !_isExcludedFromFees[from] &&\\r\\n            !_isExcludedFromFees[to]\\r\\n        ) {\\r\\n            swapping = true;\\r\\n\\r\\n            swapBack();\\r\\n\\r\\n            swapping = false;\\r\\n        }\\r\\n\\r\\n        bool takeFee = !swapping;\\r\\n\\r\\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        uint256 fees = 0;\\r\\n\\r\\n        if (takeFee) {\\r\\n            // on sell\\r\\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\\r\\n                fees = amount.mul(sellTotalFees).div(100);\\r\\n                tokensForDev += (fees * sellDevFee) / sellTotalFees;\\r\\n                tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees;\\r\\n            }\\r\\n            // on buy\\r\\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\\r\\n                fees = amount.mul(buyTotalFees).div(100);\\r\\n                tokensForDev += (fees * buyDevFee) / buyTotalFees;\\r\\n                tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees;\\r\\n            }\\r\\n\\r\\n            if (fees > 0) {\\r\\n                super._transfer(from, address(this), fees);\\r\\n            }\\r\\n\\r\\n            amount -= fees;\\r\\n        }\\r\\n\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapBack() private {\\r\\n        uint256 contractBalance = balanceOf(address(this));\\r\\n        uint256 totalTokensToSwap = tokensForMarketing + tokensForDev;\\r\\n        bool success;\\r\\n\\r\\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (contractBalance > swapTokensAtAmount * 20) {\\r\\n            contractBalance = swapTokensAtAmount * 20;\\r\\n        }\\r\\n\\r\\n        uint256 amountToSwapForETH = contractBalance;\\r\\n\\r\\n        uint256 initialETHBalance = address(this).balance;\\r\\n\\r\\n        swapTokensForEth(amountToSwapForETH);\\r\\n\\r\\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\\r\\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(totalTokensToSwap);\\r\\n        uint256 ethForDev = ethBalance - ethForMarketing;\\r\\n\\r\\n        tokensForMarketing = 0;\\r\\n        tokensForDev = 0;\\r\\n\\r\\n        (success, ) = address(devWallet).call{value: ethForDev}(\\\"\\\");\\r\\n\\r\\n        (success, ) = address(marketingWallet).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}