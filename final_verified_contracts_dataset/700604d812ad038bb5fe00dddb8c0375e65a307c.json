{
    "address": "0x700604d812AD038BB5fE00ddDB8c0375E65A307C",
    "tx_hash": "7512585a704242da15a7990591bff714df716333abf72b1787fa3e689f0d652a",
    "block_number": 18001660,
    "timestamp": 1693086887,
    "gas_used_in_creation": 6819175,
    "creation_bytecode": "608060405264e8d4a510006005556404a817c8006006556404a817c8006007556329b927006008556706f05b59d3b200006009556003600a556003600b556003600c556006600d556003600e556003600f556003601055600e60115560165460125560175460135560185460145560195460155573c21bee45c473c4ce62095af1bdde0478c781c9f8601c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073c21bee45c473c4ce62095af1bdde0478c781c9f8601d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061dead601e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507343d7e65b8ff49698d9550a7f315c87e67344fb59601f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000602160146101000a81548160ff0219169083151502179055506000602160156101000a81548160ff021916908315150217905550348015620001f857600080fd5b5060006200020b6200073060201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506000737a250d5630b4cf539739df2c5dacb4c659f2488d905080602060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200034f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003759190620007cb565b73ffffffffffffffffffffffffffffffffffffffff1663c9c65396308373ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004039190620007cb565b6040518363ffffffff1660e01b8152600401620004229291906200080e565b6020604051808303816000875af115801562000442573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004689190620007cb565b602160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060055460026000620004bf6200073060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160046000620005136200073860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000601e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620006c06200073060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60055460405162000721919062000856565b60405180910390a35062000873565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620007938262000766565b9050919050565b620007a58162000786565b8114620007b157600080fd5b50565b600081519050620007c5816200079a565b92915050565b600060208284031215620007e457620007e362000761565b5b6000620007f484828501620007b4565b91505092915050565b620008088162000786565b82525050565b6000604082019050620008256000830185620007fd565b620008346020830184620007fd565b9392505050565b6000819050919050565b62000850816200083b565b82525050565b60006020820190506200086d600083018462000845565b92915050565b61427b80620008836000396000f3fe6080604052600436106102335760003560e01c80636c0a24eb1161012e578063af465a27116100ab578063e632313c1161006f578063e632313c146107f9578063f2fde38b14610822578063f42938901461084b578063fc588c0414610862578063fd01bd4c1461088b5761023a565b8063af465a2714610710578063d89135cd1461073b578063d9f7e4df14610766578063dc903ba114610791578063dd62ed3e146107bc5761023a565b806395d89b41116100f257806395d89b411461063d57806398620d76146106685780639f58526f14610691578063a1d1d02b146106bc578063a9059cbb146106d35761023a565b80636c0a24eb1461056857806370a0823114610593578063715018a6146105d05780638da5cb5b146105e75780638ea78153146106125761023a565b806323bbf9e7116101bc57806349bd5a5e1161018057806349bd5a5e146104bb57806351bc3c85146104e65780635d098b38146104fd5780635dbc2fe11461052657806366bf686e1461053d5761023a565b806323bbf9e7146103e657806327a14fc2146104115780632e8fa8211461043a578063313ce5671461046557806336cf7c87146104905761023a565b80630cdf2187116102035780630cdf2187146102fd5780631694505e1461032857806318160ddd14610353578063233296f01461037e57806323b872dd146103a95761023a565b8062067d6b1461023f57806306ab002a1461026a57806306fdde0314610295578063095ea7b3146102c05761023a565b3661023a57005b600080fd5b34801561024b57600080fd5b506102546108b6565b6040516102619190613251565b60405180910390f35b34801561027657600080fd5b5061027f6108bc565b60405161028c9190613251565b60405180910390f35b3480156102a157600080fd5b506102aa6108c2565b6040516102b79190613305565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e291906133b6565b6108ff565b6040516102f49190613411565b60405180910390f35b34801561030957600080fd5b5061031261091d565b60405161031f9190613251565b60405180910390f35b34801561033457600080fd5b5061033d610923565b60405161034a919061348b565b60405180910390f35b34801561035f57600080fd5b50610368610949565b6040516103759190613251565b60405180910390f35b34801561038a57600080fd5b50610393610953565b6040516103a09190613251565b60405180910390f35b3480156103b557600080fd5b506103d060048036038101906103cb91906134a6565b610959565b6040516103dd9190613411565b60405180910390f35b3480156103f257600080fd5b506103fb610a32565b6040516104089190613251565b60405180910390f35b34801561041d57600080fd5b50610438600480360381019061043391906134f9565b610a38565b005b34801561044657600080fd5b5061044f610afa565b60405161045c9190613251565b60405180910390f35b34801561047157600080fd5b5061047a610b00565b6040516104879190613542565b60405180910390f35b34801561049c57600080fd5b506104a5610b09565b6040516104b2919061357e565b60405180910390f35b3480156104c757600080fd5b506104d0610b2f565b6040516104dd91906135a8565b60405180910390f35b3480156104f257600080fd5b506104fb610b55565b005b34801561050957600080fd5b50610524600480360381019061051f91906135ef565b610bd9565b005b34801561053257600080fd5b5061053b610cb2565b005b34801561054957600080fd5b50610552610d64565b60405161055f9190613251565b60405180910390f35b34801561057457600080fd5b5061057d610d6a565b60405161058a9190613251565b60405180910390f35b34801561059f57600080fd5b506105ba60048036038101906105b5919061361c565b610d70565b6040516105c79190613251565b60405180910390f35b3480156105dc57600080fd5b506105e5610db9565b005b3480156105f357600080fd5b506105fc610f0c565b60405161060991906135a8565b60405180910390f35b34801561061e57600080fd5b50610627610f35565b6040516106349190613411565b60405180910390f35b34801561064957600080fd5b50610652610f48565b60405161065f9190613305565b60405180910390f35b34801561067457600080fd5b5061068f600480360381019061068a91906134f9565b610f85565b005b34801561069d57600080fd5b506106a6610ff0565b6040516106b39190613251565b60405180910390f35b3480156106c857600080fd5b506106d1610ff6565b005b3480156106df57600080fd5b506106fa60048036038101906106f591906133b6565b611079565b6040516107079190613411565b60405180910390f35b34801561071c57600080fd5b50610725611097565b6040516107329190613251565b60405180910390f35b34801561074757600080fd5b5061075061109d565b60405161075d9190613251565b60405180910390f35b34801561077257600080fd5b5061077b6110a7565b6040516107889190613251565b60405180910390f35b34801561079d57600080fd5b506107a66110ad565b6040516107b39190613251565b60405180910390f35b3480156107c857600080fd5b506107e360048036038101906107de9190613649565b6110b3565b6040516107f09190613251565b60405180910390f35b34801561080557600080fd5b50610820600480360381019061081b91906134f9565b61113a565b005b34801561082e57600080fd5b506108496004803603810190610844919061361c565b6111a5565b005b34801561085757600080fd5b506108606112b5565b005b34801561086e57600080fd5b50610889600480360381019061088491906134f9565b611331565b005b34801561089757600080fd5b506108a06113e4565b6040516108ad9190613251565b60405180910390f35b60115481565b600c5481565b60606040518060400160405280600981526020017f53686961204275726e0000000000000000000000000000000000000000000000815250905090565b600061091361090c6113ea565b84846113f2565b6001905092915050565b600e5481565b602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b60075481565b60006109668484846115bb565b610a27846109726113ea565b610a228560405180606001604052806028815260200161421e60289139600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006109d86113ea565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f519092919063ffffffff16565b6113f2565b600190509392505050565b600a5481565b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610a796113ea565b73ffffffffffffffffffffffffffffffffffffffff1614610a9957600080fd5b610aaf60c8600554611fb590919063ffffffff16565b8111610af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae7906136fb565b60405180910390fd5b8060068190555050565b60085481565b60006006905090565b601e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b966113ea565b73ffffffffffffffffffffffffffffffffffffffff1614610bb657600080fd5b6000610bc130610d70565b90506000811115610bd657610bd581611fff565b5b50565b610be16113ea565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6590613767565b60405180910390fd5b80601d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610cba6113ea565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e90613767565b60405180910390fd5b6001602160156101000a81548160ff021916908315150217905550565b60105481565b60065481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610dc16113ea565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4590613767565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b602160159054906101000a900460ff1681565b60606040518060400160405280600581526020017f5368696142000000000000000000000000000000000000000000000000000000815250905090565b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610fc66113ea565b73ffffffffffffffffffffffffffffffffffffffff1614610fe657600080fd5b8060098190555050565b600d5481565b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110376113ea565b73ffffffffffffffffffffffffffffffffffffffff161461105757600080fd5b60016011819055506002600e819055506002600a819055506001600d81905550565b600061108d6110866113ea565b84846115bb565b6001905092915050565b60055481565b6000601a54905090565b600f5481565b600b5481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661117b6113ea565b73ffffffffffffffffffffffffffffffffffffffff161461119b57600080fd5b8060088190555050565b6111ad6113ea565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461123a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123190613767565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a0906137f9565b60405180910390fd5b6112b281612278565b50565b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112f66113ea565b73ffffffffffffffffffffffffffffffffffffffff161461131657600080fd5b6000479050600081111561132e5761132d8161233c565b5b50565b6402540be400811015611379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137090613865565b60405180910390fd5b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113ba6113ea565b73ffffffffffffffffffffffffffffffffffffffff16146113da57600080fd5b8060078190555050565b601a5481565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611461576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611458906138f7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c790613989565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516115ae9190613251565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361162a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162190613a1b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169090613aad565b60405180910390fd5b600081116116dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d390613b3f565b60405180910390fd5b601b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156117805750601b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b61178957600080fd5b600060019050611797610f0c565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415801561180557506117d5610f0c565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b801561183d57503073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b801561187557503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15611e8c57602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480156119255750602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b80156119d05750600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615806119cf5750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b5b15611a7a576006546119f3836119e586610d70565b61243790919063ffffffff16565b1115611a34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2b90613bd1565b60405180910390fd5b600754821115611a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7090613c63565b60405180910390fd5b5b602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015611b255750602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b8015611b7b5750601b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b8015611bd15750601b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15611bfb57600a54601681905550600b54601781905550600c54601881905550600d546019819055505b602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148015611ca65750602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b8015611cfc5750601b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b8015611d525750601b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15611d7c57600e54601681905550600f546017819055506010546018819055506011546019819055505b602160149054906101000a900460ff16158015611de75750602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b15611e8b576000611df730610d70565b9050600854811115611e0d57611e0c81612495565b5b6000479050602160159054906101000a900460ff16158015611e2f5750600081115b15611e4257611e3d4761233c565b611e88565b602160159054906101000a900460ff168015611e5f575060095481115b15611e87576000611e7a600283611fb590919063ffffffff16565b9050611e85816125be565b505b5b50505b5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680611f2d5750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15611f3757600090505b611f43848484846125d4565b611f4b612b9e565b50505050565b6000838311158290611f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f909190613305565b60405180910390fd5b5060008385611fa89190613cb2565b9050809150509392505050565b6000611ff783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612bc4565b905092915050565b6001602160146101000a81548160ff0219169083151502179055506000600267ffffffffffffffff81111561203757612036613ce6565b5b6040519080825280602002602001820160405280156120655781602001602082028036833780820191505090505b509050308160008151811061207d5761207c613d15565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121489190613d59565b8160018151811061215c5761215b613d15565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506121c330602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846113f2565b602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b8152600401612227959493929190613e7f565b600060405180830381600087803b15801561224157600080fd5b505af1158015612255573d6000803e3d6000fd5b50505050506000602160146101000a81548160ff02191690831515021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc61238c600284611fb590919063ffffffff16565b9081150290604051600060405180830381858888f193505050501580156123b7573d6000803e3d6000fd5b50601d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc612408600284611fb590919063ffffffff16565b9081150290604051600060405180830381858888f19350505050158015612433573d6000803e3d6000fd5b5050565b60008082846124469190613ed9565b90508381101561248b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248290613f7b565b60405180910390fd5b8091505092915050565b6001602160146101000a81548160ff02191690831515021790555060006125176124f46016546124e66019546124d860185460175461243790919063ffffffff16565b61243790919063ffffffff16565b61243790919063ffffffff16565b61250984601654612c2790919063ffffffff16565b611fb590919063ffffffff16565b9050600061252f600283611fb590919063ffffffff16565b905060006125468285612ca190919063ffffffff16565b9050600047905061255682611fff565b600061258f83612581866125738647612ca190919063ffffffff16565b612c2790919063ffffffff16565b611fb590919063ffffffff16565b905061259b8482612ceb565b50505050506000602160146101000a81548160ff02191690831515021790555050565b60008111156125d1576125d081612deb565b5b50565b806125e2576125e1613044565b5b6125ea613209565b612612606461260460175486612c2790919063ffffffff16565b611fb590919063ffffffff16565b816020018181525050612643606461263560165486612c2790919063ffffffff16565b611fb590919063ffffffff16565b816000018181525050612674606461266660185486612c2790919063ffffffff16565b611fb590919063ffffffff16565b8160400181815250506126a5606461269760195486612c2790919063ffffffff16565b611fb590919063ffffffff16565b81606001818152505061270781600001516126f983602001516126eb85606001516126dd87604001518a612ca190919063ffffffff16565b612ca190919063ffffffff16565b612ca190919063ffffffff16565b612ca190919063ffffffff16565b8160800181815250506000612729826020015185612ca190919063ffffffff16565b90506127398683602001516130bf565b61278b81600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ca190919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506128248260800151600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461243790919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506128ff6128858360000151846020015161243790919063ffffffff16565b6128f184606001516128e38660400151600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461243790919063ffffffff16565b61243790919063ffffffff16565b61243790919063ffffffff16565b600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550602160159054906101000a900460ff1680156129ac5750602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b80156129e457503073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b8015612a3e5750602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b8015612aef5750602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480612aee5750602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b5b15612b2557612b24602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683602001516130bf565b5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460800151604051612b869190613251565b60405180910390a3612b96612b9e565b505050505050565b601254601681905550601354601781905550601454601881905550601554601981905550565b60008083118290612c0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c029190613305565b60405180910390fd5b5060008385612c1a9190613fca565b9050809150509392505050565b6000808303612c395760009050612c9b565b60008284612c479190613ffb565b9050828482612c569190613fca565b14612c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c8d906140c7565b60405180910390fd5b809150505b92915050565b6000612ce383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611f51565b905092915050565b612d1830602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846113f2565b602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d719823085600080601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16426040518863ffffffff1660e01b8152600401612da196959493929190614108565b60606040518083038185885af1158015612dbf573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612de4919061417e565b5050505050565b6000600267ffffffffffffffff811115612e0857612e07613ce6565b5b604051908082528060200260200182016040528015612e365781602001602082028036833780820191505090505b509050602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ea6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eca9190613d59565b81600081518110612ede57612edd613d15565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050601f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110612f4f57612f4e613d15565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050602060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6f9de9583600084601e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16426040518663ffffffff1660e01b815260040161300e94939291906141d1565b6000604051808303818588803b15801561302757600080fd5b505af115801561303b573d6000803e3d6000fd5b50505050505050565b600060175414801561305857506000601654145b801561306657506000601854145b801561307457506000601954145b6130bd5760175460138190555060165460128190555060185460148190555060195460158190555060006017819055506000601681905550600060188190555060006019819055505b565b6130c882610d70565b8111156130d457600080fd5b61312681600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ca190919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061317e81600554612ca190919063ffffffff16565b60058190555061319981601a5461243790919063ffffffff16565b601a81905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516131fd9190613251565b60405180910390a35050565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6000819050919050565b61324b81613238565b82525050565b60006020820190506132666000830184613242565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156132a657808201518184015260208101905061328b565b838111156132b5576000848401525b50505050565b6000601f19601f8301169050919050565b60006132d78261326c565b6132e18185613277565b93506132f1818560208601613288565b6132fa816132bb565b840191505092915050565b6000602082019050818103600083015261331f81846132cc565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006133578261332c565b9050919050565b6133678161334c565b811461337257600080fd5b50565b6000813590506133848161335e565b92915050565b61339381613238565b811461339e57600080fd5b50565b6000813590506133b08161338a565b92915050565b600080604083850312156133cd576133cc613327565b5b60006133db85828601613375565b92505060206133ec858286016133a1565b9150509250929050565b60008115159050919050565b61340b816133f6565b82525050565b60006020820190506134266000830184613402565b92915050565b6000819050919050565b600061345161344c6134478461332c565b61342c565b61332c565b9050919050565b600061346382613436565b9050919050565b600061347582613458565b9050919050565b6134858161346a565b82525050565b60006020820190506134a0600083018461347c565b92915050565b6000806000606084860312156134bf576134be613327565b5b60006134cd86828701613375565b93505060206134de86828701613375565b92505060406134ef868287016133a1565b9150509250925092565b60006020828403121561350f5761350e613327565b5b600061351d848285016133a1565b91505092915050565b600060ff82169050919050565b61353c81613526565b82525050565b60006020820190506135576000830184613533565b92915050565b60006135688261332c565b9050919050565b6135788161355d565b82525050565b6000602082019050613593600083018461356f565b92915050565b6135a28161334c565b82525050565b60006020820190506135bd6000830184613599565b92915050565b6135cc8161355d565b81146135d757600080fd5b50565b6000813590506135e9816135c3565b92915050565b60006020828403121561360557613604613327565b5b6000613613848285016135da565b91505092915050565b60006020828403121561363257613631613327565b5b600061364084828501613375565b91505092915050565b600080604083850312156136605761365f613327565b5b600061366e85828601613375565b925050602061367f85828601613375565b9150509250929050565b7f416d6f756e74206d7573742062652067726561746572207468616e20302e352560008201527f206f6620737570706c7900000000000000000000000000000000000000000000602082015250565b60006136e5602a83613277565b91506136f082613689565b604082019050919050565b60006020820190508181036000830152613714816136d8565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613751602083613277565b915061375c8261371b565b602082019050919050565b6000602082019050818103600083015261378081613744565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006137e3602683613277565b91506137ee82613787565b604082019050919050565b60006020820190508181036000830152613812816137d6565b9050919050565b7f6e656761746976652067686f7374207269646572000000000000000000000000600082015250565b600061384f601483613277565b915061385a82613819565b602082019050919050565b6000602082019050818103600083015261387e81613842565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006138e1602483613277565b91506138ec82613885565b604082019050919050565b60006020820190508181036000830152613910816138d4565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613973602283613277565b915061397e82613917565b604082019050919050565b600060208201905081810360008301526139a281613966565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613a05602583613277565b9150613a10826139a9565b604082019050919050565b60006020820190508181036000830152613a34816139f8565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000613a97602383613277565b9150613aa282613a3b565b604082019050919050565b60006020820190508181036000830152613ac681613a8a565b9050919050565b7f5472616e7366657220616d6f756e74206d75737420626520677265617465722060008201527f7468616e207a65726f0000000000000000000000000000000000000000000000602082015250565b6000613b29602983613277565b9150613b3482613acd565b604082019050919050565b60006020820190508181036000830152613b5881613b1c565b9050919050565b7f596f7520617265206265696e67206772656564792e20457863656564696e672060008201527f4d61782057616c6c65742e000000000000000000000000000000000000000000602082015250565b6000613bbb602b83613277565b9150613bc682613b5f565b604082019050919050565b60006020820190508181036000830152613bea81613bae565b9050919050565b7f536c6f7720646f776e2062756464792e2e2e74686572652069732061206d617860008201527f207472616e73616374696f6e0000000000000000000000000000000000000000602082015250565b6000613c4d602c83613277565b9150613c5882613bf1565b604082019050919050565b60006020820190508181036000830152613c7c81613c40565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613cbd82613238565b9150613cc883613238565b925082821015613cdb57613cda613c83565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050613d538161335e565b92915050565b600060208284031215613d6f57613d6e613327565b5b6000613d7d84828501613d44565b91505092915050565b6000819050919050565b6000613dab613da6613da184613d86565b61342c565b613238565b9050919050565b613dbb81613d90565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613df68161334c565b82525050565b6000613e088383613ded565b60208301905092915050565b6000602082019050919050565b6000613e2c82613dc1565b613e368185613dcc565b9350613e4183613ddd565b8060005b83811015613e72578151613e598882613dfc565b9750613e6483613e14565b925050600181019050613e45565b5085935050505092915050565b600060a082019050613e946000830188613242565b613ea16020830187613db2565b8181036040830152613eb38186613e21565b9050613ec26060830185613599565b613ecf6080830184613242565b9695505050505050565b6000613ee482613238565b9150613eef83613238565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f2457613f23613c83565b5b828201905092915050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b6000613f65601b83613277565b9150613f7082613f2f565b602082019050919050565b60006020820190508181036000830152613f9481613f58565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613fd582613238565b9150613fe083613238565b925082613ff057613fef613f9b565b5b828204905092915050565b600061400682613238565b915061401183613238565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561404a57614049613c83565b5b828202905092915050565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b60006140b1602183613277565b91506140bc82614055565b604082019050919050565b600060208201905081810360008301526140e0816140a4565b9050919050565b60006140f282613458565b9050919050565b614102816140e7565b82525050565b600060c08201905061411d6000830189613599565b61412a6020830188613242565b6141376040830187613db2565b6141446060830186613db2565b61415160808301856140f9565b61415e60a0830184613242565b979650505050505050565b6000815190506141788161338a565b92915050565b60008060006060848603121561419757614196613327565b5b60006141a586828701614169565b93505060206141b686828701614169565b92505060406141c786828701614169565b9150509250925092565b60006080820190506141e66000830187613db2565b81810360208301526141f88186613e21565b905061420760408301856140f9565b6142146060830184613242565b9594505050505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122019ef2f0ddb2b35eb5bba498523b7e3da17eca755b58c4f06f6bc438a9db174d164736f6c634300080f0033",
    "runtime_bytecode": "",
    "contract_name": "ShiaBurn",
    "compiler_version": "v0.8.15+commit.e14f2714",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dead\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_burnBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_burnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_liqBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_liqSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_marketingBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_marketingSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_maxtxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_shiaBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"j_shiaSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyShiaToken\",\"type\":\"uint256\"}],\"name\":\"setBuyShiaRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransaction\",\"type\":\"uint256\"}],\"name\":\"setMaxTxn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOnTheBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/*\r\n? Introducing ShiaBurn - Ignite Your Investments! ?\r\n\r\n? Join the revolution of decentralized finance with ShiaBurn ($ShiaB)!\r\n\r\n? Tokenomics:\r\n- 1% Burn of $ShiaB on every transaction\r\n- 1% Automatic Liquidity Pool (LP) generation\r\n- 3% Burn of $Shia on every transaction\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n        \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract ShiaBurn is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private constant _name = \"Shia Burn\";\r\n    string private constant _symbol = unicode\"ShiaB\";\r\n    uint8 private constant _decimals = 6;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 public _tTotal = 1000 * 1e3 * 1e6; //1,000,000\r\n\r\n    uint256 public _maxWalletAmount = 20 * 1e3 * 1e6; //2%\r\n    uint256 public j_maxtxn = 20 * 1e3 * 1e6; //2%\r\n    uint256 public swapAmount = 7 * 1e2 * 1e6; //.07%\r\n    uint256 private buyShiaUpperLimit = 5000 * 1e14; // 0.01\r\n\r\n    // fees\r\n    uint256 public j_liqBuy = 3; \r\n    uint256 public j_burnBuy = 3;\r\n    uint256 public j_shiaBuy = 3;\r\n    uint256 public j_marketingBuy = 6;\r\n\r\n    uint256 public j_liqSell = 3; \r\n    uint256 public j_burnSell = 3;\r\n    uint256 public j_shiaSell = 3;\r\n    uint256 public j_marketingSell = 14;\r\n \r\n    uint256 private j_previousLiqFee = j_liqFee;\r\n    uint256 private j_previousBurnFee = j_burnFee;\r\n    uint256 private j_previousShiaFee = j_shiaFee;\r\n    uint256 private j_previousMarketingTax = j_marketingTax;\r\n    \r\n    uint256 private j_liqFee;\r\n    uint256 private j_burnFee;\r\n    uint256 private j_shiaFee;\r\n    uint256 private j_marketingTax;\r\n\r\n    uint256 public _totalBurned;\r\n\r\n    struct FeeBreakdown {\r\n        uint256 tLiq;\r\n        uint256 tBurn;\r\n        uint256 tShia;\r\n        uint256 tMarketing;\r\n        uint256 tAmount;\r\n    }\r\n\r\n    mapping(address => bool) private bots;\r\n    address payable private shiaburnWallet = payable(0xC21bEe45c473C4cE62095Af1bDdE0478c781c9F8);\r\n    address payable private marketingWallet = payable(0xC21bEe45c473C4cE62095Af1bDdE0478c781c9F8);\r\n\r\n    address payable public dead = payable(0x000000000000000000000000000000000000dEaD);\r\n    address SHIA = 0x43D7E65B8fF49698D9550a7F315c87E67344FB59;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private swapping = false;\r\n    bool public burnMode = false;\r\n\r\n    modifier lockSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor() {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        \r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[shiaburnWallet] = true;\r\n        _isExcludedFromFee[dead] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function totalBurned() public view returns (uint256) {\r\n        return _totalBurned;\r\n    }\r\n\r\n    function burning(address _account, uint _amount) private {  \r\n        require( _amount <= balanceOf(_account));\r\n        _balances[_account] = _balances[_account].sub(_amount);\r\n        _tTotal = _tTotal.sub(_amount);\r\n        _totalBurned = _totalBurned.add(_amount);\r\n        emit Transfer(_account, address(0), _amount);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (j_burnFee == 0 && j_liqFee == 0 && j_shiaFee == 0 && j_marketingTax == 0) return;\r\n        j_previousBurnFee = j_burnFee;\r\n        j_previousLiqFee = j_liqFee;\r\n        j_previousShiaFee = j_shiaFee;\r\n        j_previousMarketingTax = j_marketingTax;\r\n\r\n        j_burnFee = 0;\r\n        j_liqFee = 0;\r\n        j_shiaFee = 0;\r\n        j_marketingTax = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        j_liqFee = j_previousLiqFee;\r\n        j_burnFee = j_previousBurnFee;\r\n        j_shiaFee = j_previousShiaFee;\r\n        j_marketingTax = j_previousMarketingTax;\r\n    }\r\n\r\n    function removeMarketingTax() external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        j_marketingSell = 1;\r\n        j_liqSell = 2;\r\n        j_liqBuy = 2;\r\n        j_marketingBuy = 1;\r\n\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!bots[from] && !bots[to]);\r\n\r\n        bool takeFee = true;\r\n\r\n        if (from != owner() && to != owner() && from != address(this) && to != address(this)) {\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ((!_isExcludedFromFee[from] || !_isExcludedFromFee[to]))) {\r\n                require(balanceOf(to).add(amount) <= _maxWalletAmount, \"You are being greedy. Exceeding Max Wallet.\");\r\n                require(amount <= j_maxtxn, \"Slow down buddy...there is a max transaction\");\r\n            }\r\n            \r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !bots[to] && !bots[from]) {\r\n                j_liqFee = j_liqBuy;\r\n                j_burnFee = j_burnBuy;\r\n                j_shiaFee = j_shiaBuy;\r\n                j_marketingTax = j_marketingBuy;\r\n            }\r\n                \r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router) && !bots[to] && !bots[from]) {\r\n                j_liqFee = j_liqSell;\r\n                j_burnFee = j_burnSell;\r\n                j_shiaFee = j_shiaSell;\r\n                j_marketingTax = j_marketingSell;\r\n            }\r\n           \r\n            if (!swapping && from != uniswapV2Pair) {\r\n\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n                if (contractTokenBalance > swapAmount) {\r\n                    swapAndLiquify(contractTokenBalance);\r\n                }\r\n\r\n                uint256 contractETHBalance = address(this).balance;\r\n            \r\n                if (!burnMode && (contractETHBalance > 0)) {\r\n                    sendETHToFee(address(this).balance);\r\n                } else if (burnMode && (contractETHBalance > buyShiaUpperLimit)) {\r\n                        uint256 buyAmount = (contractETHBalance.div(2));\r\n                    buyShia(buyAmount);\r\n                }                    \r\n            }\r\n        }\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        \r\n        _transferAgain(from, to, amount, takeFee);\r\n        restoreAllFee();\r\n    }\r\n\r\n    function setMaxTxn(uint256 maxTransaction) external {\r\n        require(maxTransaction >= 10 * 1e3 * 1e6,\"negative ghost rider\");\r\n        require(_msgSender() == shiaburnWallet);\r\n        j_maxtxn = maxTransaction;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function swapETHForTokens(uint256 amount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(SHIA);\r\n\r\n      // make the swap\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            dead, // Burn address\r\n            block.timestamp\r\n        );        \r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            shiaburnWallet,\r\n            block.timestamp\r\n          );\r\n    }\r\n  \r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockSwap {\r\n        uint256 autoLPamount = j_liqFee.mul(contractTokenBalance).div(j_burnFee.add(j_shiaFee).add(j_marketingTax).add(j_liqFee));\r\n        uint256 half =  autoLPamount.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(otherHalf);\r\n        uint256 newBalance = ((address(this).balance.sub(initialBalance)).mul(half)).div(otherHalf);\r\n        addLiquidity(half, newBalance);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        shiaburnWallet.transfer((amount).div(2));\r\n        marketingWallet.transfer((amount).div(2));\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance > 0) {\r\n            swapTokensForEth(contractBalance);\r\n        }\r\n    }\r\n\r\n    function manualSend() external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if (contractETHBalance > 0) {\r\n            sendETHToFee(contractETHBalance);\r\n        }\r\n    }\r\n\r\n    function _transferAgain(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee) { \r\n                removeAllFee();\r\n        }\r\n        \r\n        FeeBreakdown memory fees;\r\n        fees.tBurn = amount.mul(j_burnFee).div(100);\r\n        fees.tLiq = amount.mul(j_liqFee).div(100);\r\n        fees.tShia = amount.mul(j_shiaFee).div(100);\r\n        fees.tMarketing = amount.mul(j_marketingTax).div(100);\r\n        \r\n        fees.tAmount = amount.sub(fees.tShia).sub(fees.tMarketing).sub(fees.tBurn).sub(fees.tLiq);\r\n\r\n        uint256 amountPreBurn = amount.sub(fees.tBurn);\r\n        burning(sender, fees.tBurn);\r\n\r\n        _balances[sender] = _balances[sender].sub(amountPreBurn);\r\n        _balances[recipient] = _balances[recipient].add(fees.tAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(fees.tShia).add(fees.tMarketing).add(fees.tBurn.add(fees.tLiq));\r\n        \r\n        if(burnMode && sender != uniswapV2Pair && sender != address(this) && sender != address(uniswapV2Router) && (recipient == address(uniswapV2Router) || recipient == uniswapV2Pair)) {\r\n            burning(uniswapV2Pair, fees.tBurn);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, fees.tAmount);\r\n        restoreAllFee();\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function setMaxWalletAmount(uint256 maxWalletAmount) external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        require(maxWalletAmount > _tTotal.div(200), \"Amount must be greater than 0.5% of supply\");\r\n        _maxWalletAmount = maxWalletAmount;\r\n    }\r\n\r\n    function setSwapAmount(uint256 _swapAmount) external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        swapAmount = _swapAmount;\r\n    }\r\n\r\n    function turnOnTheBurn() public onlyOwner {\r\n        burnMode = true;\r\n    }\r\n\r\n    function buyShia(uint256 amount) private {\r\n    \tif (amount > 0) {\r\n    \t    swapETHForTokens(amount);\r\n\t    }\r\n    }\r\n\r\n    function setBuyShiaRate(uint256 buyShiaToken) external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        buyShiaUpperLimit = buyShiaToken;\r\n    }\r\n\r\n    function setMarketingWallet(address payable _address) external onlyOwner {\r\n        marketingWallet = _address;\r\n    }\r\n\r\n}",
    "etherscan_verified": true
}