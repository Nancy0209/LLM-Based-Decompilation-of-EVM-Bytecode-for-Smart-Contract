{
    "address": "0x73adcB9F7B46BF6E6f1D027BB13eAAfa158A8A09",
    "tx_hash": "b3cbc26144f22bb36fe3c3343ab0db8d43dd7d16c45b7b2a3c934ce0a06c062c",
    "block_number": 18004220,
    "timestamp": 1693117763,
    "gas_used_in_creation": 1194559,
    "creation_bytecode": "60c060405234801562000010575f80fd5b506040516200188d3803806200188d833981810160405281019062000036919062000368565b620000566200004a6200020360201b60201c565b6200020a60201b60201c565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603620000c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000be9062000435565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036200016c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200016390620004a3565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505060405180608001604052808381526020015f81526020018242620001c59190620004f0565b81526020015f81525060015f820151815f0155602082015181600101556040820151816002015560608201518160030155905050505050506200052a565b5f33905090565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620002fa82620002cf565b9050919050565b6200030c81620002ee565b811462000317575f80fd5b50565b5f815190506200032a8162000301565b92915050565b5f819050919050565b620003448162000330565b81146200034f575f80fd5b50565b5f81519050620003628162000339565b92915050565b5f805f8060808587031215620003835762000382620002cb565b5b5f62000392878288016200031a565b9450506020620003a5878288016200031a565b9350506040620003b88782880162000352565b9250506060620003cb8782880162000352565b91505092959194509250565b5f82825260208201905092915050565b7f5a65726f20616464726573733a204752500000000000000000000000000000005f82015250565b5f6200041d601183620003d7565b91506200042a82620003e7565b602082019050919050565b5f6020820190508181035f8301526200044e816200040f565b9050919050565b7f5a65726f20616464726573733a207347525000000000000000000000000000005f82015250565b5f6200048b601283620003d7565b9150620004988262000455565b602082019050919050565b5f6020820190508181035f830152620004bc816200047d565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f620004fc8262000330565b9150620005098362000330565b9250828201905080821115620005245762000523620004c3565b5b92915050565b60805160a0516113026200058b5f395f818161023b01528181610455015281816105c0015281816106a10152818161074d015261099601525f81816102d9015281816103b301528181610603015281816108fb0152610a7b01526113025ff3fe608060405234801561000f575f80fd5b50600436106100cd575f3560e01c8063940050fb1161008a578063af14052c11610064578063af14052c146101c8578063bfe10928146101d2578063d7520f25146101f0578063f2fde38b1461020e576100cd565b8063940050fb146101705780639483c1d71461018e578063adc9772e146101ac576100cd565b806321d0af34146100d15780632986c0e5146100ed578063715018a61461010b57806375619ab5146101155780638da5cb5b14610131578063900cf0cf1461014f575b5f80fd5b6100eb60048036038101906100e69190610d2b565b61022a565b005b6100f5610452565b6040516101029190610d8a565b60405180910390f35b6101136104e5565b005b61012f600480360381019061012a9190610da3565b6104f8565b005b61013961057a565b6040516101469190610ddd565b60405180910390f35b6101576105a1565b6040516101679493929190610df6565b60405180910390f35b6101786105be565b6040516101859190610e94565b60405180910390f35b6101966105e2565b6040516101a39190610d8a565b60405180910390f35b6101c660048036038101906101c19190610ead565b6105f9565b005b6101d061073f565b005b6101da610a54565b6040516101e79190610f0b565b60405180910390f35b6101f8610a79565b6040516102059190610f44565b60405180910390f35b61022860048036038101906102239190610da3565b610a9d565b005b80156102395761023861073f565b5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161029693929190610f5d565b6020604051808303815f875af11580156102b2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d69190610fa6565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103309190610ddd565b602060405180830381865afa15801561034b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061036f9190610fe5565b8211156103b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a890611090565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b815260040161040c9291906110ae565b6020604051808303815f875af1158015610428573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061044c9190610fa6565b50505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632986c0e56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104e09190610fe5565b905090565b6104ed610b1f565b6104f65f610b9d565b565b610500610b1f565b8060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f86719c518c7d99ac94b3d405d462ea876ba5cd0a978461dc9a7c9862a94858868160405161056f9190610ddd565b60405180910390a150565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001805f0154908060010154908060020154908060030154905084565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f426001600201546105f49190611102565b905090565b61060161073f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161065e93929190610f5d565b6020604051808303815f875af115801561067a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061069e9190610fa6565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016106fa9291906110ae565b6020604051808303815f875af1158015610716573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061073a9190610fa6565b505050565b4260016002015411610a52577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663058ecdb460016003015460018001546040518363ffffffff1660e01b81526004016107af929190611135565b6020604051808303815f875af11580156107cb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107ef9190610fe5565b5060015f0154600160020154610805919061115c565b600160020181905550600180015f8154809291906108229061118f565b91905055505f73ffffffffffffffffffffffffffffffffffffffff1660055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108f85760055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156108e1575f80fd5b505af11580156108f3573d5f803e3d5ffd5b505050505b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109529190610ddd565b602060405180830381865afa15801561096d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109919190610fe5565b90505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639358928b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109fd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a219190610fe5565b9050808211610a39575f600160030181905550610a4f565b8082610a459190611102565b6001600301819055505b50505b565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b610aa5610b1f565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0a90611246565b60405180910390fd5b610b1c81610b9d565b50565b610b27610c5e565b73ffffffffffffffffffffffffffffffffffffffff16610b4561057a565b73ffffffffffffffffffffffffffffffffffffffff1614610b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b92906112ae565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610c9282610c69565b9050919050565b610ca281610c88565b8114610cac575f80fd5b50565b5f81359050610cbd81610c99565b92915050565b5f819050919050565b610cd581610cc3565b8114610cdf575f80fd5b50565b5f81359050610cf081610ccc565b92915050565b5f8115159050919050565b610d0a81610cf6565b8114610d14575f80fd5b50565b5f81359050610d2581610d01565b92915050565b5f805f60608486031215610d4257610d41610c65565b5b5f610d4f86828701610caf565b9350506020610d6086828701610ce2565b9250506040610d7186828701610d17565b9150509250925092565b610d8481610cc3565b82525050565b5f602082019050610d9d5f830184610d7b565b92915050565b5f60208284031215610db857610db7610c65565b5b5f610dc584828501610caf565b91505092915050565b610dd781610c88565b82525050565b5f602082019050610df05f830184610dce565b92915050565b5f608082019050610e095f830187610d7b565b610e166020830186610d7b565b610e236040830185610d7b565b610e306060830184610d7b565b95945050505050565b5f819050919050565b5f610e5c610e57610e5284610c69565b610e39565b610c69565b9050919050565b5f610e6d82610e42565b9050919050565b5f610e7e82610e63565b9050919050565b610e8e81610e74565b82525050565b5f602082019050610ea75f830184610e85565b92915050565b5f8060408385031215610ec357610ec2610c65565b5b5f610ed085828601610caf565b9250506020610ee185828601610ce2565b9150509250929050565b5f610ef582610e63565b9050919050565b610f0581610eeb565b82525050565b5f602082019050610f1e5f830184610efc565b92915050565b5f610f2e82610e63565b9050919050565b610f3e81610f24565b82525050565b5f602082019050610f575f830184610f35565b92915050565b5f606082019050610f705f830186610dce565b610f7d6020830185610dce565b610f8a6040830184610d7b565b949350505050565b5f81519050610fa081610d01565b92915050565b5f60208284031215610fbb57610fba610c65565b5b5f610fc884828501610f92565b91505092915050565b5f81519050610fdf81610ccc565b92915050565b5f60208284031215610ffa57610ff9610c65565b5b5f61100784828501610fd1565b91505092915050565b5f82825260208201905092915050565b7f496e73756666696369656e74204752502062616c616e636520696e20636f6e745f8201527f7261637400000000000000000000000000000000000000000000000000000000602082015250565b5f61107a602483611010565b915061108582611020565b604082019050919050565b5f6020820190508181035f8301526110a78161106e565b9050919050565b5f6040820190506110c15f830185610dce565b6110ce6020830184610d7b565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61110c82610cc3565b915061111783610cc3565b925082820390508181111561112f5761112e6110d5565b5b92915050565b5f6040820190506111485f830185610d7b565b6111556020830184610d7b565b9392505050565b5f61116682610cc3565b915061117183610cc3565b9250828201905080821115611189576111886110d5565b5b92915050565b5f61119982610cc3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111cb576111ca6110d5565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f611230602683611010565b915061123b826111d6565b604082019050919050565b5f6020820190508181035f83015261125d81611224565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f611298602083611010565b91506112a382611264565b602082019050919050565b5f6020820190508181035f8301526112c58161128c565b905091905056fea26469706673582212205e48ffb3bbc9961704cd95ea467d80f6f449384d2d7ef785cdf08192b9b997d264736f6c634300081400330000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e0000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001",
    "runtime_bytecode": "608060405234801561000f575f80fd5b50600436106100cd575f3560e01c8063940050fb1161008a578063af14052c11610064578063af14052c146101c8578063bfe10928146101d2578063d7520f25146101f0578063f2fde38b1461020e576100cd565b8063940050fb146101705780639483c1d71461018e578063adc9772e146101ac576100cd565b806321d0af34146100d15780632986c0e5146100ed578063715018a61461010b57806375619ab5146101155780638da5cb5b14610131578063900cf0cf1461014f575b5f80fd5b6100eb60048036038101906100e69190610d2b565b61022a565b005b6100f5610452565b6040516101029190610d8a565b60405180910390f35b6101136104e5565b005b61012f600480360381019061012a9190610da3565b6104f8565b005b61013961057a565b6040516101469190610ddd565b60405180910390f35b6101576105a1565b6040516101679493929190610df6565b60405180910390f35b6101786105be565b6040516101859190610e94565b60405180910390f35b6101966105e2565b6040516101a39190610d8a565b60405180910390f35b6101c660048036038101906101c19190610ead565b6105f9565b005b6101d061073f565b005b6101da610a54565b6040516101e79190610f0b565b60405180910390f35b6101f8610a79565b6040516102059190610f44565b60405180910390f35b61022860048036038101906102239190610da3565b610a9d565b005b80156102395761023861073f565b5b7f0000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161029693929190610f5d565b6020604051808303815f875af11580156102b2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d69190610fa6565b507f0000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103309190610ddd565b602060405180830381865afa15801561034b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061036f9190610fe5565b8211156103b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a890611090565b60405180910390fd5b7f0000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b815260040161040c9291906110ae565b6020604051808303815f875af1158015610428573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061044c9190610fa6565b50505050565b5f7f0000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e73ffffffffffffffffffffffffffffffffffffffff16632986c0e56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104e09190610fe5565b905090565b6104ed610b1f565b6104f65f610b9d565b565b610500610b1f565b8060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f86719c518c7d99ac94b3d405d462ea876ba5cd0a978461dc9a7c9862a94858868160405161056f9190610ddd565b60405180910390a150565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001805f0154908060010154908060020154908060030154905084565b7f0000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e81565b5f426001600201546105f49190611102565b905090565b61060161073f565b7f0000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161065e93929190610f5d565b6020604051808303815f875af115801561067a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061069e9190610fa6565b507f0000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016106fa9291906110ae565b6020604051808303815f875af1158015610716573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061073a9190610fa6565b505050565b4260016002015411610a52577f0000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e73ffffffffffffffffffffffffffffffffffffffff1663058ecdb460016003015460018001546040518363ffffffff1660e01b81526004016107af929190611135565b6020604051808303815f875af11580156107cb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107ef9190610fe5565b5060015f0154600160020154610805919061115c565b600160020181905550600180015f8154809291906108229061118f565b91905055505f73ffffffffffffffffffffffffffffffffffffffff1660055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108f85760055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4fc6b6d6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156108e1575f80fd5b505af11580156108f3573d5f803e3d5ffd5b505050505b5f7f0000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109529190610ddd565b602060405180830381865afa15801561096d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109919190610fe5565b90505f7f0000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e73ffffffffffffffffffffffffffffffffffffffff16639358928b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109fd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a219190610fe5565b9050808211610a39575f600160030181905550610a4f565b8082610a459190611102565b6001600301819055505b50505b565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f0000000000000000000000000a2746d0fe88eeb9538183408295c061593e478e81565b610aa5610b1f565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0a90611246565b60405180910390fd5b610b1c81610b9d565b50565b610b27610c5e565b73ffffffffffffffffffffffffffffffffffffffff16610b4561057a565b73ffffffffffffffffffffffffffffffffffffffff1614610b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b92906112ae565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610c9282610c69565b9050919050565b610ca281610c88565b8114610cac575f80fd5b50565b5f81359050610cbd81610c99565b92915050565b5f819050919050565b610cd581610cc3565b8114610cdf575f80fd5b50565b5f81359050610cf081610ccc565b92915050565b5f8115159050919050565b610d0a81610cf6565b8114610d14575f80fd5b50565b5f81359050610d2581610d01565b92915050565b5f805f60608486031215610d4257610d41610c65565b5b5f610d4f86828701610caf565b9350506020610d6086828701610ce2565b9250506040610d7186828701610d17565b9150509250925092565b610d8481610cc3565b82525050565b5f602082019050610d9d5f830184610d7b565b92915050565b5f60208284031215610db857610db7610c65565b5b5f610dc584828501610caf565b91505092915050565b610dd781610c88565b82525050565b5f602082019050610df05f830184610dce565b92915050565b5f608082019050610e095f830187610d7b565b610e166020830186610d7b565b610e236040830185610d7b565b610e306060830184610d7b565b95945050505050565b5f819050919050565b5f610e5c610e57610e5284610c69565b610e39565b610c69565b9050919050565b5f610e6d82610e42565b9050919050565b5f610e7e82610e63565b9050919050565b610e8e81610e74565b82525050565b5f602082019050610ea75f830184610e85565b92915050565b5f8060408385031215610ec357610ec2610c65565b5b5f610ed085828601610caf565b9250506020610ee185828601610ce2565b9150509250929050565b5f610ef582610e63565b9050919050565b610f0581610eeb565b82525050565b5f602082019050610f1e5f830184610efc565b92915050565b5f610f2e82610e63565b9050919050565b610f3e81610f24565b82525050565b5f602082019050610f575f830184610f35565b92915050565b5f606082019050610f705f830186610dce565b610f7d6020830185610dce565b610f8a6040830184610d7b565b949350505050565b5f81519050610fa081610d01565b92915050565b5f60208284031215610fbb57610fba610c65565b5b5f610fc884828501610f92565b91505092915050565b5f81519050610fdf81610ccc565b92915050565b5f60208284031215610ffa57610ff9610c65565b5b5f61100784828501610fd1565b91505092915050565b5f82825260208201905092915050565b7f496e73756666696369656e74204752502062616c616e636520696e20636f6e745f8201527f7261637400000000000000000000000000000000000000000000000000000000602082015250565b5f61107a602483611010565b915061108582611020565b604082019050919050565b5f6020820190508181035f8301526110a78161106e565b9050919050565b5f6040820190506110c15f830185610dce565b6110ce6020830184610d7b565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61110c82610cc3565b915061111783610cc3565b925082820390508181111561112f5761112e6110d5565b5b92915050565b5f6040820190506111485f830185610d7b565b6111556020830184610d7b565b9392505050565b5f61116682610cc3565b915061117183610cc3565b9250828201905080821115611189576111886110d5565b5b92915050565b5f61119982610cc3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111cb576111ca6110d5565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f611230602683611010565b915061123b826111d6565b604082019050919050565b5f6020820190508181035f83015261125d81611224565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f611298602083611010565b91506112a382611264565b602082019050919050565b5f6020820190508181035f8301526112c58161128c565b905091905056fea26469706673582212205e48ffb3bbc9961704cd95ea467d80f6f449384d2d7ef785cdf08192b9b997d264736f6c63430008140033",
    "contract_name": "GRPStaking",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_GRP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sGRP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondsTillFirstEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"DistributorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GRP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract IDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribute\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sGRP\",\"outputs\":[{\"internalType\":\"contract IsGRP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsToNextEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seconds_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_rebase\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n/*\r\n    https://gotruggedpad.com/\r\n    https://twitter.com/GotRuggedPad\r\n    https://t.me/GotRuggedPad\r\n*/\r\npragma solidity 0.8.20;\r\ninterface IDistributor {\r\n    function distribute() external;\r\n\r\n    function nextRewardAt(uint256 _rate) external view returns (uint256);\r\n\r\n    function nextReward() external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IsGRP is IERC20 {\r\n    function rebase(uint256 amount_, uint epoch_) external returns (uint256);\r\n\r\n    function circulatingSupply() external view returns (uint256);\r\n\r\n    function gonsForBalance(uint amount) external view returns (uint);\r\n\r\n    function balanceForGons(uint gons) external view returns (uint);\r\n\r\n    function index() external view returns (uint);\r\n}\r\n\r\n\r\n/// @title   GRPStaking\r\n/// @notice  GRP Staking\r\ncontract GRPStaking is Ownable {\r\n    /// EVENTS ///\r\n\r\n    event DistributorSet(address distributor);\r\n\r\n    /// DATA STRUCTURES ///\r\n\r\n    struct Epoch {\r\n        uint256 length; // in seconds\r\n        uint256 number; // since inception\r\n        uint256 end; // timestamp\r\n        uint256 distribute; // amount\r\n    }\r\n\r\n    /// STATE VARIABLES ///\r\n\r\n    /// @notice GRP address\r\n    IERC20 public immutable GRP;\r\n    /// @notice sGRP address\r\n    IsGRP public immutable sGRP;\r\n\r\n    /// @notice Current epoch details\r\n    Epoch public epoch;\r\n\r\n    /// @notice Distributor address\r\n    IDistributor public distributor;\r\n\r\n    /// CONSTRUCTOR ///\r\n\r\n    constructor(\r\n        address _GRP,\r\n        address _sGRP,\r\n        uint256 _epochLength,\r\n        uint256 _secondsTillFirstEpoch\r\n    ) {\r\n        require(_GRP != address(0), \"Zero address: GRP\");\r\n        GRP = IERC20(_GRP);\r\n        require(_sGRP != address(0), \"Zero address: sGRP\");\r\n        sGRP = IsGRP(_sGRP);\r\n\r\n        epoch = Epoch({\r\n            length: _epochLength,\r\n            number: 0,\r\n            end: block.timestamp + _secondsTillFirstEpoch,\r\n            distribute: 0\r\n        });\r\n    }\r\n\r\n\r\n    /// @notice stake GRP\r\n    function stake(address _to, uint256 _amount) external {\r\n        rebase();\r\n        GRP.transferFrom(msg.sender, address(this), _amount);\r\n        sGRP.transfer(_to, _amount);\r\n    }\r\n\r\n    /// @notice redeem sGRP for GRP\r\n    function unstake(address _to, uint256 _amount, bool _rebase) external {\r\n        if (_rebase) rebase();\r\n        sGRP.transferFrom(msg.sender, address(this), _amount);\r\n        require(\r\n            _amount <= GRP.balanceOf(address(this)),\r\n            \"Insufficient GRP balance in contract\"\r\n        );\r\n        GRP.transfer(_to, _amount);\r\n    }\r\n\r\n    ///@notice Trigger rebase if epoch over\r\n    function rebase() public {\r\n        if (epoch.end <= block.timestamp) {\r\n            sGRP.rebase(epoch.distribute, epoch.number);\r\n\r\n            epoch.end = epoch.end + epoch.length;\r\n            epoch.number++;\r\n\r\n            if (address(distributor) != address(0)) {\r\n                distributor.distribute();\r\n            }\r\n\r\n            uint256 balance = GRP.balanceOf(address(this));\r\n            uint256 staked = sGRP.circulatingSupply();\r\n\r\n            if (balance <= staked) {\r\n                epoch.distribute = 0;\r\n            } else {\r\n                epoch.distribute = balance - staked;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice         Send sGRP upon staking\r\n    function _send(\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint256 _sent) {\r\n        sGRP.transfer(_to, _amount); // send as sGRP (equal unit as GRP)\r\n        return _amount;\r\n    }\r\n\r\n    /// @notice         Returns the sGRP index, which tracks rebase growth\r\n    function index() public view returns (uint256 index_) {\r\n        return sGRP.index();\r\n    }\r\n\r\n    /// @notice           Returns econds until the next epoch begins\r\n    function secondsToNextEpoch() external view returns (uint256 seconds_) {\r\n        return epoch.end - block.timestamp;\r\n    }\r\n\r\n\r\n    /// @notice              Sets the contract address for LP staking\r\n    function setDistributor(address _distributor) external onlyOwner {\r\n        distributor = IDistributor(_distributor);\r\n        emit DistributorSet(_distributor);\r\n    }\r\n}",
    "etherscan_verified": true
}