{
    "address": "0xaCb8531Fb60d23846f82b8911F28b44D83e2554d",
    "tx_hash": "df3dfa0d6ed44538a16ed4e298b80eb4117901c278f37b4ade5fb8ab780ce8d7",
    "block_number": 18009294,
    "timestamp": 1693179191,
    "gas_used_in_creation": 4116545,
    "creation_bytecode": "6080604052600480546001600160a01b031916739e66931723dc1658b0fc35f5e67215d9d16cfb0117905560326005818155600691909155600781905560085560136009818155600a9182556014600b556000600c5562000060916200049a565b6200006f9062410424620004b2565b600d55600e805460ff19169055600f805460ff60a81b191690553480156200009657600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000737a250d5630b4cf539739df2c5dacb4c659f2488d9050806001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000130573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001569190620004cc565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001a4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ca9190620004cc565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801562000218573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200023e9190620004cc565b600f80546001600160a01b0319166001600160a01b03928316179055600e8054610100600160a81b03191661010092841692909202919091179055620002876009600a6200049a565b62000298906409ebb1be40620004b2565b336000908152600160208190526040822092909255600390620002c36000546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182016000908120805495151560ff199687161790553081526003909352818320805485166001908117909155600454909116835291208054909216179055620003223390565b6001600160a01b031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6200035c6009600a6200049a565b6200036d906409ebb1be40620004b2565b60405190815260200160405180910390a350620004f7565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620003dc578160001904821115620003c057620003c062000385565b80851615620003ce57918102915b93841c9390800290620003a0565b509250929050565b600082620003f55750600162000494565b81620004045750600062000494565b81600181146200041d5760028114620004285762000448565b600191505062000494565b60ff8411156200043c576200043c62000385565b50506001821b62000494565b5060208310610133831016604e8410600b84101617156200046d575081810a62000494565b6200047983836200039b565b806000190482111562000490576200049062000385565b0290505b92915050565b6000620004ab60ff841683620003e4565b9392505050565b808202811582820484141762000494576200049462000385565b600060208284031215620004df57600080fd5b81516001600160a01b0381168114620004ab57600080fd5b6115ed80620005076000396000f3fe6080604052600436106101395760003560e01c806395d89b41116100ab578063cbf6b9931161006f578063cbf6b99314610340578063dc5650a314610360578063dd62ed3e14610380578063de2aa57d146103c6578063ea414b28146103e6578063ef422a181461040657600080fd5b806395d89b4114610145578063a9059cbb146102df578063baeb7a7d146102ff578063bf474bed14610315578063c9567bf91461032b57600080fd5b8063313ce567116100fd578063313ce5671461020a5780633ef947211461022657806349bd5a5e1461023c57806370a0823114610274578063715018a6146102aa5780638da5cb5b146102c157600080fd5b806306fdde0314610145578063095ea7b31461018157806318160ddd146101b157806323b872dd146101d457806327b1a8e9146101f457600080fd5b3661014057005b600080fd5b34801561015157600080fd5b50604080518082018252600481526346726f6760e01b6020820152905161017891906111c3565b60405180910390f35b34801561018d57600080fd5b506101a161019c366004611226565b610426565b6040519015158152602001610178565b3480156101bd57600080fd5b506101c661043d565b604051908152602001610178565b3480156101e057600080fd5b506101a16101ef366004611252565b61045f565b34801561020057600080fd5b506101c6600c5481565b34801561021657600080fd5b5060405160098152602001610178565b34801561023257600080fd5b506101c660085481565b34801561024857600080fd5b50600f5461025c906001600160a01b031681565b6040516001600160a01b039091168152602001610178565b34801561028057600080fd5b506101c661028f366004611293565b6001600160a01b031660009081526001602052604090205490565b3480156102b657600080fd5b506102bf6104c8565b005b3480156102cd57600080fd5b506000546001600160a01b031661025c565b3480156102eb57600080fd5b506101a16102fa366004611226565b610545565b34801561030b57600080fd5b506101c660075481565b34801561032157600080fd5b506101c6600d5481565b34801561033757600080fd5b506102bf610552565b34801561034c57600080fd5b506102bf61035b3660046112b0565b6105ed565b34801561036c57600080fd5b506102bf61037b3660046112b0565b610660565b34801561038c57600080fd5b506101c661039b3660046112c9565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b3480156103d257600080fd5b506102bf6103e13660046112b0565b6106d0565b3480156103f257600080fd5b506102bf610401366004611293565b6106ff565b34801561041257600080fd5b506102bf610421366004611302565b61074b565b60006104333384846107a0565b5060015b92915050565b600061044b6009600a61142f565b61045a906409ebb1be4061143e565b905090565b600061046c8484846108c4565b6104be84336104b985604051806060016040528060288152602001611590602891396001600160a01b038a1660009081526002602090815260408083203384529091529020549190610e04565b6107a0565b5060019392505050565b6000546001600160a01b031633146104fb5760405162461bcd60e51b81526004016104f290611455565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60006104333384846108c4565b6000546001600160a01b0316331461057c5760405162461bcd60e51b81526004016104f290611455565b600f54600160a01b900460ff16156105d65760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104f2565b600f805461ffff60a01b191661010160a01b179055565b6000546001600160a01b031633146106175760405162461bcd60e51b81526004016104f290611455565b6008819055601e81111561065d5760405162461bcd60e51b815260206004820152600d60248201526c6c657373207468616e2033302560981b60448201526064016104f2565b50565b6000546001600160a01b0316331461068a5760405162461bcd60e51b81526004016104f290611455565b6007819055601e81111561065d5760405162461bcd60e51b815260206004820152600d60248201526c6c657373207468616e2033302560981b60448201526064016104f2565b6000546001600160a01b031633146106fa5760405162461bcd60e51b81526004016104f290611455565b600d55565b6000546001600160a01b031633146107295760405162461bcd60e51b81526004016104f290611455565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107755760405162461bcd60e51b81526004016104f290611455565b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b6001600160a01b0383166108025760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104f2565b6001600160a01b0382166108635760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104f2565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166109285760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104f2565b6001600160a01b03821661098a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104f2565b600081116109ec5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104f2565b600f54600160a01b900460ff1680610a1c57506001600160a01b03831660009081526003602052604090205460ff165b80610a3f57506001600160a01b03821660009081526003602052604090205460ff165b610a815760405162461bcd60e51b81526020600482015260136024820152722a3930b234b7339034b9903737ba1037b832b760691b60448201526064016104f2565b6001600160a01b03831660009081526003602052604081205460ff16158015610ac357506001600160a01b03831660009081526003602052604090205460ff16155b15610c2c57600f546001600160a01b038581169116148015610af85750600e546001600160a01b038481166101009092041614155b15610b4157600c8054906000610b0d8361148a565b9190505550610b3e6064610b38600954600c5411610b2d57600554610b31565b6007545b8590610e3e565b90610ec7565b90505b600f546001600160a01b038481169116148015610b6757506001600160a01b0384163014155b15610ba957600c8054906000610b7c8361148a565b9190505550610ba66064610b38600a54600c5411610b9c57600654610b31565b6008548590610e3e565b90505b30600090815260016020526040902054600e5460ff16158015610bd95750600f546001600160a01b038581169116145b8015610bee5750600f54600160a81b900460ff165b8015610bfb5750600d5481115b8015610c0a5750600b54600c54115b15610c2a57610c1881610f09565b478015610c2857610c28476110b6565b505b505b8015610d3b57600b54600c541115610cb65730600090815260016020526040902054610c5890826110f4565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610ca99085815260200190565b60405180910390a3610d3b565b6004546001600160a01b0316600090815260016020526040902054610cdb90826110f4565b600480546001600160a01b03908116600090815260016020908152604091829020949094559154915184815291811692908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b6001600160a01b038416600090815260016020526040902054610d5e9083611153565b6001600160a01b038516600090815260016020526040902055610da3610d848383611153565b6001600160a01b038516600090815260016020526040902054906110f4565b6001600160a01b0380851660008181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610ded8585611153565b60405190815260200160405180910390a350505050565b60008184841115610e285760405162461bcd60e51b81526004016104f291906111c3565b506000610e3584866114a3565b95945050505050565b600082600003610e5057506000610437565b6000610e5c838561143e565b905082610e6985836114b6565b14610ec05760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104f2565b9392505050565b6000610ec083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611195565b600e805460ff1916600117905580156110a957600f54600160a01b900460ff16156110a9576040805160028082526060820183526000926020830190803683370190505090503081600081518110610f6357610f636114d8565b60200260200101906001600160a01b031690816001600160a01b031681525050600e60019054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa91906114ee565b8160018151811061100d5761100d6114d8565b6001600160a01b039283166020918202929092010152600e54611038913091610100900416846107a0565b600e5460405163791ac94760e01b81526101009091046001600160a01b03169063791ac9479061107590859060009086903090429060040161150b565b600060405180830381600087803b15801561108f57600080fd5b505af11580156110a3573d6000803e3d6000fd5b50505050505b50600e805460ff19169055565b6004546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156110f0573d6000803e3d6000fd5b5050565b600080611101838561157c565b905083811015610ec05760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104f2565b6000610ec083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610e04565b600081836111b65760405162461bcd60e51b81526004016104f291906111c3565b506000610e3584866114b6565b600060208083528351808285015260005b818110156111f0578581018301518582016040015282016111d4565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461065d57600080fd5b6000806040838503121561123957600080fd5b823561124481611211565b946020939093013593505050565b60008060006060848603121561126757600080fd5b833561127281611211565b9250602084013561128281611211565b929592945050506040919091013590565b6000602082840312156112a557600080fd5b8135610ec081611211565b6000602082840312156112c257600080fd5b5035919050565b600080604083850312156112dc57600080fd5b82356112e781611211565b915060208301356112f781611211565b809150509250929050565b6000806040838503121561131557600080fd5b823561132081611211565b9150602083013580151581146112f757600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561138657816000190482111561136c5761136c611335565b8085161561137957918102915b93841c9390800290611350565b509250929050565b60008261139d57506001610437565b816113aa57506000610437565b81600181146113c057600281146113ca576113e6565b6001915050610437565b60ff8411156113db576113db611335565b50506001821b610437565b5060208310610133831016604e8410600b8410161715611409575081810a610437565b611413838361134b565b806000190482111561142757611427611335565b029392505050565b6000610ec060ff84168361138e565b808202811582820484141761043757610437611335565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006001820161149c5761149c611335565b5060010190565b8181038181111561043757610437611335565b6000826114d357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561150057600080fd5b8151610ec081611211565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561155b5784516001600160a01b031683529383019391830191600101611536565b50506001600160a01b03969096166060850152505050608001529392505050565b808201808211156104375761043761133556fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212208fe972ead8d02858fc46563338ff38970ab6725162695472527af59ea9ed6bd064736f6c63430008130033",
    "runtime_bytecode": "",
    "contract_name": "Frog",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_finalBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_finalSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTaxSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"taxWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"finalbuytax\",\"type\":\"uint256\"}],\"name\":\"setfinalbuytax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"finalselltax\",\"type\":\"uint256\"}],\"name\":\"setfinalselltax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n *Submitted for verification at Etherscan.io on 2023-08-27\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n**/\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Frog is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    address payable _taxWallet = payable(0x9e66931723DC1658B0fC35f5E67215d9d16CFB01);\r\n\r\n    uint256 private _initialBuyTax=50;\r\n    uint256 private _initialSellTax=50;\r\n    uint256 public _finalBuyTax=5;\r\n    uint256 public _finalSellTax=5;\r\n    uint256 private _reduceBuyTaxAt=19;\r\n    uint256 private _reduceSellTaxAt=19;\r\n    uint256 private _preventSwapBefore=20;\r\n    uint256 public _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 42609000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 4260900 * 10**_decimals;\r\n    string private constant _name = \"Frog\";\r\n    string private constant _symbol = \"Frog\";\r\n    bool private inSwap = false;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private swapEnabled = false;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); \r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function setfinalbuytax(uint256 finalbuytax) external onlyOwner() {\r\n        _finalBuyTax = finalbuytax;\r\n        require(_finalBuyTax<=30, \"less than 30%\");\r\n    }\r\n\r\n    function setfinalselltax(uint256 finalselltax) external onlyOwner() {\r\n        _finalSellTax = finalselltax;\r\n        require(_finalSellTax<=30, \"less than 30%\");\r\n    }\r\n\r\n    function setTaxWallet(address payable taxWallet) external onlyOwner() {\r\n        _taxWallet = taxWallet;\r\n    }\r\n\r\n    function setIsExcludedFromFee(address account, bool newValue) public onlyOwner {\r\n        _isExcludedFromFee[account] = newValue;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        require(tradingOpen || _isExcludedFromFee[from] || _isExcludedFromFee[to], \"Trading is not open\");\r\n\r\n        uint256 taxAmount=0;\r\n        if (!_isExcludedFromFee[from]&& !_isExcludedFromFee[to]) {\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)  ) {\r\n                _buyCount++;\r\n                taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            }\r\n\r\n            if(to == uniswapV2Pair && from!= address(this)){\r\n                _buyCount++;\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n            if(_buyCount>_preventSwapBefore){\r\n                _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n                emit Transfer(from, address(this),taxAmount);\r\n            }else{\r\n                _balances[_taxWallet]=_balances[_taxWallet].add(taxAmount);\r\n                emit Transfer(from, _taxWallet,taxAmount);\r\n            }\r\n\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function setTaxSwapThreshold(uint256 amount) external onlyOwner() {\r\n        _taxSwapThreshold = amount;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        tradingOpen = true;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
    "etherscan_verified": true
}