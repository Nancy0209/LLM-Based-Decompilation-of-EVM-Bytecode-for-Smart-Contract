{
    "address": "0x4103F78C623459b3e985dE5F5d78622944B9dE6D",
    "tx_hash": "e8700999ee09553e255bf45181a510f4ea70fac724e2f483a9b0dad7516dca2d",
    "block_number": 18002066,
    "timestamp": 1693091783,
    "gas_used_in_creation": 4665153,
    "creation_bytecode": "608060405262000018655af3107a40006000196200035b565b62000026906000196200037e565b60065560006008819055600a60098190558190556014600b819055600c829055600d819055600e91909155600f55601280546001600160a01b0319908116735158848ea5e780ddf1fa2c733a59b140b8794a0e9081179092556013805490911690911790556015805461ffff60a81b1916600160b01b1790556502ba7def30006016819055601755633b9aca00601855348015620000c357600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506006543360009081526002602090815260409182902092909255601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d908117909155815163c45a015560e01b815291519092839263c45a015592600480830193928290030181865afa15801562000181573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a79190620003a6565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021b9190620003a6565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801562000269573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200028f9190620003a6565b601580546001600160a01b0319166001600160a01b03928316179055600080548216815260056020526040808220805460ff1990811660019081179092553084528284208054821683179055601254851684528284208054821683179055601354909416835291208054909216179055336001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef655af3107a40006040516200034c91815260200190565b60405180910390a350620003d8565b6000826200037957634e487b7160e01b600052601260045260246000fd5b500690565b81810381811115620003a057634e487b7160e01b600052601160045260246000fd5b92915050565b600060208284031215620003b957600080fd5b81516001600160a01b0381168114620003d157600080fd5b9392505050565b611f6c80620003e86000396000f3fe6080604052600436106101d05760003560e01c80637d1db4a5116100f7578063a2a957bb11610095578063c492f04611610064578063c492f04614610565578063dd62ed3e14610585578063ea1644d5146105cb578063f2fde38b146105eb57600080fd5b8063a2a957bb146104e0578063a9059cbb14610500578063bfd7928414610520578063c3c8cd801461055057600080fd5b80638f70ccf7116100d15780638f70ccf71461045e5780638f9a55c01461047e57806395d89b411461049457806398a5c315146104c057600080fd5b80637d1db4a5146103fd5780637f2feddc146104135780638da5cb5b1461044057600080fd5b8063313ce5671161016f5780636fc3eaec1161013e5780636fc3eaec1461039357806370a08231146103a8578063715018a6146103c857806374010ece146103dd57600080fd5b8063313ce5671461031757806349bd5a5e146103335780636b999053146103535780636d8aa8f81461037357600080fd5b80631694505e116101ab5780631694505e1461028657806318160ddd146102be57806323b872dd146102e15780632fd689e31461030157600080fd5b8062b8cf2a146101dc57806306fdde03146101fe578063095ea7b31461025657600080fd5b366101d757005b600080fd5b3480156101e857600080fd5b506101fc6101f7366004611ad7565b61060b565b005b34801561020a57600080fd5b5060408051808201909152601d81527f566f6c64656d6f7274507574696e446f6c6c6172486564676537696e7500000060208201525b60405161024d9190611b9c565b60405180910390f35b34801561026257600080fd5b50610276610271366004611bea565b6106aa565b604051901515815260200161024d565b34801561029257600080fd5b506014546102a6906001600160a01b031681565b6040516001600160a01b03909116815260200161024d565b3480156102ca57600080fd5b50655af3107a40005b60405190815260200161024d565b3480156102ed57600080fd5b506102766102fc366004611c16565b6106c1565b34801561030d57600080fd5b506102d360185481565b34801561032357600080fd5b506040516009815260200161024d565b34801561033f57600080fd5b506015546102a6906001600160a01b031681565b34801561035f57600080fd5b506101fc61036e366004611c57565b61072a565b34801561037f57600080fd5b506101fc61038e366004611c84565b610775565b34801561039f57600080fd5b506101fc6107bd565b3480156103b457600080fd5b506102d36103c3366004611c57565b610808565b3480156103d457600080fd5b506101fc61082a565b3480156103e957600080fd5b506101fc6103f8366004611c9f565b61089e565b34801561040957600080fd5b506102d360165481565b34801561041f57600080fd5b506102d361042e366004611c57565b60116020526000908152604090205481565b34801561044c57600080fd5b506000546001600160a01b03166102a6565b34801561046a57600080fd5b506101fc610479366004611c84565b6108cd565b34801561048a57600080fd5b506102d360175481565b3480156104a057600080fd5b5060408051808201909152600381526244585960e81b6020820152610240565b3480156104cc57600080fd5b506101fc6104db366004611c9f565b610915565b3480156104ec57600080fd5b506101fc6104fb366004611cb8565b610944565b34801561050c57600080fd5b5061027661051b366004611bea565b610afa565b34801561052c57600080fd5b5061027661053b366004611c57565b60106020526000908152604090205460ff1681565b34801561055c57600080fd5b506101fc610b07565b34801561057157600080fd5b506101fc610580366004611cea565b610b5b565b34801561059157600080fd5b506102d36105a0366004611d6e565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b3480156105d757600080fd5b506101fc6105e6366004611c9f565b610bfc565b3480156105f757600080fd5b506101fc610606366004611c57565b610c2b565b6000546001600160a01b0316331461063e5760405162461bcd60e51b815260040161063590611da7565b60405180910390fd5b60005b81518110156106a65760016010600084848151811061066257610662611ddc565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061069e81611e08565b915050610641565b5050565b60006106b7338484610d15565b5060015b92915050565b60006106ce848484610e39565b610720843361071b85604051806060016040528060288152602001611f0f602891396001600160a01b038a1660009081526004602090815260408083203384529091529020549190611375565b610d15565b5060019392505050565b6000546001600160a01b031633146107545760405162461bcd60e51b815260040161063590611da7565b6001600160a01b03166000908152601060205260409020805460ff19169055565b6000546001600160a01b0316331461079f5760405162461bcd60e51b815260040161063590611da7565b60158054911515600160b01b0260ff60b01b19909216919091179055565b6012546001600160a01b0316336001600160a01b031614806107f257506013546001600160a01b0316336001600160a01b0316145b6107fb57600080fd5b47610805816113af565b50565b6001600160a01b0381166000908152600260205260408120546106bb906113e9565b6000546001600160a01b031633146108545760405162461bcd60e51b815260040161063590611da7565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146108c85760405162461bcd60e51b815260040161063590611da7565b601655565b6000546001600160a01b031633146108f75760405162461bcd60e51b815260040161063590611da7565b60158054911515600160a01b0260ff60a01b19909216919091179055565b6000546001600160a01b0316331461093f5760405162461bcd60e51b815260040161063590611da7565b601855565b6000546001600160a01b0316331461096e5760405162461bcd60e51b815260040161063590611da7565b60048411156109cd5760405162461bcd60e51b815260206004820152602560248201527f4275792072657761726473206d757374206265206265747765656e20302520616044820152646e6420342560d81b6064820152608401610635565b605f821115610a295760405162461bcd60e51b815260206004820152602260248201527f42757920746178206d757374206265206265747765656e20302520616e642039604482015261352560f01b6064820152608401610635565b6004831115610a895760405162461bcd60e51b815260206004820152602660248201527f53656c6c2072657761726473206d757374206265206265747765656e20302520604482015265616e6420342560d01b6064820152608401610635565b605f811115610ae65760405162461bcd60e51b815260206004820152602360248201527f53656c6c20746178206d757374206265206265747765656e20302520616e642060448201526239352560e81b6064820152608401610635565b600893909355600a91909155600955600b55565b60006106b7338484610e39565b6012546001600160a01b0316336001600160a01b03161480610b3c57506013546001600160a01b0316336001600160a01b0316145b610b4557600080fd5b6000610b5030610808565b90506108058161146d565b6000546001600160a01b03163314610b855760405162461bcd60e51b815260040161063590611da7565b60005b82811015610bf6578160056000868685818110610ba757610ba7611ddc565b9050602002016020810190610bbc9190611c57565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610bee81611e08565b915050610b88565b50505050565b6000546001600160a01b03163314610c265760405162461bcd60e51b815260040161063590611da7565b601755565b6000546001600160a01b03163314610c555760405162461bcd60e51b815260040161063590611da7565b6001600160a01b038116610cba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610635565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316610d775760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610635565b6001600160a01b038216610dd85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610635565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610e9d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610635565b6001600160a01b038216610eff5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610635565b60008111610f615760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610635565b6000546001600160a01b03848116911614801590610f8d57506000546001600160a01b03838116911614155b1561126e57601554600160a01b900460ff16611026576000546001600160a01b038481169116146110265760405162461bcd60e51b815260206004820152603f60248201527f544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e642060448201527f746f6b656e7320756e74696c2074726164696e6720697320656e61626c6564006064820152608401610635565b6016548111156110785760405162461bcd60e51b815260206004820152601c60248201527f544f4b454e3a204d6178205472616e73616374696f6e204c696d6974000000006044820152606401610635565b6001600160a01b03831660009081526010602052604090205460ff161580156110ba57506001600160a01b03821660009081526010602052604090205460ff16155b6111125760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a20596f7572206163636f756e7420697320626c61636b6c69737460448201526265642160e81b6064820152608401610635565b6015546001600160a01b03838116911614611197576017548161113484610808565b61113e9190611e21565b106111975760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a2042616c616e636520657863656564732077616c6c65742073696044820152627a652160e81b6064820152608401610635565b60006111a230610808565b6018546016549192508210159082106111bb5760165491505b8080156111d25750601554600160a81b900460ff16155b80156111ec57506015546001600160a01b03868116911614155b80156112015750601554600160b01b900460ff165b801561122657506001600160a01b03851660009081526005602052604090205460ff16155b801561124b57506001600160a01b03841660009081526005602052604090205460ff16155b1561126b576112598261146d565b47801561126957611269476113af565b505b50505b6001600160a01b03831660009081526005602052604090205460019060ff16806112b057506001600160a01b03831660009081526005602052604090205460ff165b806112e257506015546001600160a01b038581169116148015906112e257506015546001600160a01b03848116911614155b156112ef57506000611369565b6015546001600160a01b03858116911614801561131a57506014546001600160a01b03848116911614155b1561132c57600854600c55600954600d555b6015546001600160a01b03848116911614801561135757506014546001600160a01b03858116911614155b1561136957600a54600c55600b54600d555b610bf6848484846115e7565b600081848411156113995760405162461bcd60e51b81526004016106359190611b9c565b5060006113a68486611e34565b95945050505050565b6013546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156106a6573d6000803e3d6000fd5b60006006548211156114505760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b6064820152608401610635565b600061145a611615565b90506114668382611638565b9392505050565b6015805460ff60a81b1916600160a81b17905560408051600280825260608201835260009260208301908036833701905050905030816000815181106114b5576114b5611ddc565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561150e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115329190611e47565b8160018151811061154557611545611ddc565b6001600160a01b03928316602091820292909201015260145461156b9130911684610d15565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac947906115a4908590600090869030904290600401611e64565b600060405180830381600087803b1580156115be57600080fd5b505af11580156115d2573d6000803e3d6000fd5b50506015805460ff60a81b1916905550505050565b806115f4576115f461167a565b6115ff8484846116a8565b80610bf657610bf6600e54600c55600f54600d55565b600080600061162261179f565b90925090506116318282611638565b9250505090565b600061146683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506117db565b600c5415801561168a5750600d54155b1561169157565b600c8054600e55600d8054600f5560009182905555565b6000806000806000806116ba87611809565b6001600160a01b038f16600090815260026020526040902054959b509399509197509550935091506116ec9087611866565b6001600160a01b03808b1660009081526002602052604080822093909355908a168152205461171b90866118a8565b6001600160a01b03891660009081526002602052604090205561173d81611907565b6117478483611951565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161178c91815260200190565b60405180910390a3505050505050505050565b6006546000908190655af3107a40006117b88282611638565b8210156117d257505060065492655af3107a400092509050565b90939092509050565b600081836117fc5760405162461bcd60e51b81526004016106359190611b9c565b5060006113a68486611ed5565b60008060008060008060008060006118268a600c54600d54611975565b9250925092506000611836611615565b905060008060006118498e8787876119ca565b919e509c509a509598509396509194505050505091939550919395565b600061146683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611375565b6000806118b58385611e21565b9050838110156114665760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610635565b6000611911611615565b9050600061191f8383611a1a565b3060009081526002602052604090205490915061193c90826118a8565b30600090815260026020526040902055505050565b60065461195e9083611866565b60065560075461196e90826118a8565b6007555050565b600080808061198f60646119898989611a1a565b90611638565b905060006119a260646119898a89611a1a565b905060006119ba826119b48b86611866565b90611866565b9992985090965090945050505050565b60008080806119d98886611a1a565b905060006119e78887611a1a565b905060006119f58888611a1a565b90506000611a07826119b48686611866565b939b939a50919850919650505050505050565b600082600003611a2c575060006106bb565b6000611a388385611ef7565b905082611a458583611ed5565b146114665760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610635565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461080557600080fd5b8035611ad281611ab2565b919050565b60006020808385031215611aea57600080fd5b823567ffffffffffffffff80821115611b0257600080fd5b818501915085601f830112611b1657600080fd5b813581811115611b2857611b28611a9c565b8060051b604051601f19603f83011681018181108582111715611b4d57611b4d611a9c565b604052918252848201925083810185019188831115611b6b57600080fd5b938501935b82851015611b9057611b8185611ac7565b84529385019392850192611b70565b98975050505050505050565b600060208083528351808285015260005b81811015611bc957858101830151858201604001528201611bad565b506000604082860101526040601f19601f8301168501019250505092915050565b60008060408385031215611bfd57600080fd5b8235611c0881611ab2565b946020939093013593505050565b600080600060608486031215611c2b57600080fd5b8335611c3681611ab2565b92506020840135611c4681611ab2565b929592945050506040919091013590565b600060208284031215611c6957600080fd5b813561146681611ab2565b80358015158114611ad257600080fd5b600060208284031215611c9657600080fd5b61146682611c74565b600060208284031215611cb157600080fd5b5035919050565b60008060008060808587031215611cce57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060408486031215611cff57600080fd5b833567ffffffffffffffff80821115611d1757600080fd5b818601915086601f830112611d2b57600080fd5b813581811115611d3a57600080fd5b8760208260051b8501011115611d4f57600080fd5b602092830195509350611d659186019050611c74565b90509250925092565b60008060408385031215611d8157600080fd5b8235611d8c81611ab2565b91506020830135611d9c81611ab2565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611e1a57611e1a611df2565b5060010190565b808201808211156106bb576106bb611df2565b818103818111156106bb576106bb611df2565b600060208284031215611e5957600080fd5b815161146681611ab2565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611eb45784516001600160a01b031683529383019391830191600101611e8f565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611ef257634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176106bb576106bb611df256fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212206d9a009a3e7a7e4559c5db3d688def2762ce1d6bc5164e76916b3be4d5a800d864736f6c63430008120033",
    "runtime_bytecode": "",
    "contract_name": "VoldemortPutinDollarHedge7inu",
    "compiler_version": "v0.8.18+commit.87f61d96",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"blockBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redisFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redisFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapTokensThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"unblockBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n *\r\n*/\r\n// \r\n//With the Crypto Market giving us flashbacks of the FTX Crash,\r\n//we have decided to make the ultimate HEDGE against it.\r\n//Introducing ticker (DXY) VoldermortPutinDollarHedge7Inu,\r\n//the new meme and hedge against the market \r\n//if you think you've seen only up before, think again\r\n\r\n//https://www.vpdh7inu.live/\r\n//https://t.me/voldemortputindollarhedge7inu\r\n//https://twitter.com/vpdh7inu\r\n\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2880\u2804\u2840\u2804\u2840\u2880\u2804\u2840\u2840\u2820\u2880\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2840\u2820\u2880\u2804\u2845\u2894\u2830\u2868\u28a2\u28a1\u2891\u2814\u2805\u2815\u2804\u2805\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2840\u2805\u2894\u2828\u2890\u2805\u284c\u2886\u28a3\u282a\u286a\u2858\u284c\u286e\u2871\u2861\u28ca\u288c\u2880\u2880\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2820\u2850\u2884\u2815\u2861\u2858\u2894\u28b1\u28a8\u28aa\u28aa\u28aa\u28aa\u287a\u28ea\u289e\u28ae\u28ab\u28ae\u28ba\u2894\u2886\u2862\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2880\u2810\u2808\u2804\u2860\u284a\u288c\u2822\u2851\u284c\u2846\u2847\u2847\u2847\u2847\u28c7\u2897\u28dd\u28ae\u287a\u28ea\u2873\u28f9\u286a\u28de\u28b5\u289d\u2875\u285d\u28d5\u2821\u2880\u2882\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u28a0\u288a\u2882\u2801\u2854\u284c\u2862\u2891\u280c\u2862\u2871\u2878\u2878\u2878\u286a\u287a\u2878\u28d5\u28b5\u2873\u28dd\u28ae\u287a\u28ea\u289e\u28f5\u28eb\u2873\u28d5\u28af\u287a\u286c\u2804\u2815\u2855\u2844\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2847\u2847\u2842\u28a2\u28a3\u28a3\u2828\u2842\u284a\u2894\u2895\u28b1\u2871\u285d\u28dc\u289d\u287a\u28dc\u2875\u28dd\u28ae\u2873\u287d\u28f5\u28fb\u287a\u28fc\u287a\u2875\u28f3\u289d\u286e\u2843\u2855\u287a\u2884\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u28b8\u2871\u2871\u2868\u28aa\u28aa\u28a2\u2821\u2882\u288a\u2822\u2871\u2871\u2871\u285d\u286e\u2873\u28dd\u289e\u28ae\u2897\u286f\u28ef\u28af\u28d7\u286f\u28df\u28ee\u28af\u28df\u28ae\u2873\u28dd\u2887\u2887\u288e\u28b5\u2840\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u28d5\u28b5\u28a3\u28a3\u2891\u2885\u2886\u2883\u2822\u2821\u2861\u2871\u2871\u2879\u286a\u286f\u28fa\u2895\u286f\u28eb\u28af\u28be\u28bd\u28bd\u28fa\u28af\u28d7\u286f\u28d7\u28d7\u2897\u28dd\u28ae\u286b\u28cf\u28ae\u2892\u2885\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2880\u282e\u286a\u28aa\u282a\u2822\u2843\u286a\u2842\u2805\u2895\u2830\u28b1\u28b8\u28b8\u2871\u28dd\u28ae\u2873\u287d\u28ea\u288f\u286f\u286f\u28df\u287e\u28fd\u28fa\u28bd\u28f3\u2873\u28dd\u28ae\u2873\u28eb\u28f3\u28b3\u2871\u2871\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2880\u2843\u286b\u2894\u28a8\u2895\u2895\u2894\u288c\u288c\u2822\u2851\u2871\u2858\u289c\u289c\u28ae\u2873\u28dd\u28de\u28b5\u28eb\u28bf\u28bd\u28fa\u287d\u287e\u28fe\u28bd\u28f3\u28af\u28ae\u2873\u28dd\u28d5\u2897\u28b5\u2851\u2855\u2840\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2810\u2822\u2871\u2850\u2895\u28b5\u28d1\u2851\u2895\u2890\u2815\u2838\u2830\u2851\u2815\u2895\u2895\u283d\u2855\u28cf\u2897\u28bd\u289d\u28bd\u283a\u283d\u283d\u28bd\u28bb\u28bd\u28bd\u28b5\u28bd\u2878\u28ea\u28b3\u28b1\u28b1\u2871\u287d\u2861\u2840\u2804\u2804\r\n//\u2804\u2804\u2828\u2808\u2886\u288a\u288e\u2896\u2882\u2803\u2821\u2810\u2808\u2808\u2804\u2804\u2804\u2804\u2804\u2891\u28b9\u2898\u28dc\u2895\u2811\u2848\u2804\u2848\u28c8\u28d0\u2828\u2818\u285c\u2895\u2873\u28dd\u28ae\u2873\u2871\u2871\u2875\u286f\u286a\u2802\u2804\u2804\r\n//\u2804\u2804\u2804\u2805\u2882\u2811\u2855\u2855\u2804\u2862\u2880\u2804\u2820\u2804\u2801\u2801\u284c\u2820\u28a0\u2804\u2838\u28f8\u28fa\u286a\u28d0\u2805\u28a2\u2888\u2804\u28ac\u288d\u28c6\u28a7\u28f3\u287d\u286e\u28fa\u286a\u287a\u28d8\u28bc\u28dd\u2806\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2828\u2862\u2862\u2863\u2873\u2891\u28b0\u2890\u2820\u284a\u286a\u28e2\u2863\u286a\u2870\u2811\u2840\u2828\u28ea\u28b7\u28dd\u286e\u286b\u286a\u28ea\u28be\u289d\u28ef\u28be\u28dd\u28d7\u286f\u28df\u28ae\u286a\u286f\u2877\u28d7\u286f\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2895\u2804\u2847\u2863\u2851\u2814\u2885\u2807\u2847\u284f\u2856\u2855\u2855\u28cc\u2882\u2802\u280c\u28ae\u28b7\u2873\u286f\u286f\u287e\u2875\u28eb\u28af\u289e\u28d7\u2877\u286f\u28ef\u2873\u28f1\u28b1\u289d\u287d\u28fa\u2801\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2821\u2861\u28b1\u2890\u2828\u2828\u2810\u2861\u2883\u2887\u2887\u284f\u285e\u2854\u2850\u2820\u2891\u28bd\u28bd\u28bd\u28bd\u28bd\u28bd\u28dd\u2897\u286f\u28df\u28be\u28bd\u289d\u285e\u28dc\u289c\u289c\u28fd\u28fa\u280e\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u280a\u2803\u2802\u2850\u2804\u2805\u2850\u2848\u2862\u2843\u2887\u2815\u2862\u2804\u2828\u2898\u28ae\u28af\u28af\u28f3\u286b\u2857\u28d7\u28bd\u289d\u286e\u286f\u286e\u2863\u284f\u28ce\u288e\u281e\u283a\u280a\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2802\u2841\u2882\u2810\u2848\u2862\u2891\u2805\u2855\u2850\u2808\u2828\u2868\u28af\u28fb\u28bd\u28fa\u28ba\u287a\u286a\u28cf\u28b7\u28bd\u2895\u28ef\u286b\u28de\u289c\u289c\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2841\u2804\u2804\u2802\u2842\u280c\u2804\u2895\u2890\u280c\u2884\u2804\u2828\u2828\u2898\u28a5\u2885\u2875\u28dd\u28dd\u28ae\u2873\u287d\u28dd\u286e\u28fa\u28aa\u288e\u28d7\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2882\u2880\u2821\u2804\u280c\u280c\u2882\u2882\u282a\u2810\u284c\u28b0\u28b0\u2898\u28bc\u289d\u28de\u289e\u28de\u2875\u286f\u28de\u28b5\u28eb\u28ae\u2873\u2863\u2873\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2808\u2840\u2810\u2804\u280a\u2804\u2828\u2810\u2820\u2808\u280c\u2818\u281c\u2835\u2862\u28b3\u28b9\u289c\u2895\u2815\u2831\u2879\u286a\u2873\u28d5\u28f3\u28b9\u2878\u2805\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2808\u2884\u2821\u2801\u2820\u2804\u2804\u2840\u2804\u2810\u2814\u2814\u2814\u2862\u2826\u28d2\u288e\u28ce\u28a6\u28a2\u28a9\u286b\u28ce\u28ae\u28a3\u2803\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u28b0\u28c7\u2804\u2810\u2820\u2804\u2801\u2804\u2821\u2880\u2882\u2885\u2894\u2884\u28c6\u28c6\u2895\u28b5\u2879\u28ea\u2873\u28d5\u28b5\u28b1\u2895\u2887\u2847\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2831\u287f\u28f5\u28c0\u2804\u2804\u2804\u2808\u2828\u2828\u2842\u2887\u288e\u2895\u288e\u289e\u287d\u2875\u28dd\u28ae\u28ba\u28b8\u2838\u2858\u28dc\u28bc\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u28b9\u28fa\u28f3\u28e7\u28c4\u2840\u2804\u2804\u2840\u2802\u280c\u2842\u2815\u288c\u280a\u288e\u282a\u282a\u282a\u284a\u2846\u28d5\u28d5\u28a7\u28d3\u28e7\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2808\u28aa\u289e\u28fe\u287d\u28f7\u28ee\u2844\u2810\u2804\u2842\u280c\u288c\u2822\u2891\u2890\u2884\u2885\u2887\u2887\u28d7\u28d5\u2897\u2875\u28fd\u28ff\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2819\u287e\u28fd\u28ef\u28f7\u28ff\u287f\u28ee\u28f0\u28b1\u2871\u28dc\u2894\u2851\u285c\u28dc\u28ae\u28e3\u2873\u28ea\u28b7\u28fd\u28ff\u28ff\u2840\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2818\u2877\u28ff\u28fd\u28ff\u28ff\u28ff\u28ff\u28ff\u28fe\u28ee\u28d7\u28fd\u28b5\u2895\u28d5\u28ae\u287a\u289d\u28f5\u28ff\u28ff\u28ff\u28f7\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2818\u28ef\u287f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f5\u28cf\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u283b\u28df\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u280f\u2809\u2804\u2804\u2804\u2809\u283b\u28bf\u28ff\u28ff\u28ff\u28ff\u2840\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u285f\u2801\u2804\u2804\u2801\u2820\u2804\u2804\u2804\u2808\u283d\u28ff\u28ff\u28ff\u28f7\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u2875\u28c4\u2804\u2804\u2804\u2804\u2801\u2808\u2804\u2804\u28b8\u28f9\u286a\u28ff\u28ff\u28ff\u2842\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n//\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2808\u28bf\u28ff\u28ff\u28fb\u28ff\u28ff\u28ef\u28ff\u28e2\u28c4\u2804\u2804\u2804\u2811\u2820\u28b8\u28ff\u28ff\u28ee\u289e\u28ff\u28e7\u2804\u2804\u2804\u2804\u2804\u2804\u2804\r\n// \r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.18;\r\n \r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n \r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n \r\n    function balanceOf(address account) external view returns (uint256);\r\n \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n \r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n \r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n \r\n}\r\n \r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n \r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n \r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n \r\n    function factory() external pure returns (address);\r\n \r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n \r\ncontract VoldemortPutinDollarHedge7inu is Context, IERC20, Ownable {\r\n \r\n    using SafeMath for uint256;\r\n \r\n    string private constant _name = \"VoldemortPutinDollarHedge7inu\";\r\n    string private constant _symbol = \"DXY\";\r\n    uint8 private constant _decimals = 9;\r\n \r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 100000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _redisFeeOnBuy = 0;  \r\n    uint256 private _taxFeeOnBuy = 10;  \r\n    uint256 private _redisFeeOnSell = 0;  \r\n    uint256 private _taxFeeOnSell = 20;\r\n \r\n    //Original Fee\r\n    uint256 private _redisFee = _redisFeeOnSell;\r\n    uint256 private _taxFee = _taxFeeOnSell;\r\n \r\n    uint256 private _previousredisFee = _redisFee;\r\n    uint256 private _previoustaxFee = _taxFee;\r\n \r\n    mapping(address => bool) public bots; mapping (address => uint256) public _buyMap; \r\n    address payable private _developmentAddress = payable(0x5158848Ea5e780DDF1fA2c733a59b140B8794a0e); \r\n    address payable private _marketingAddress = payable(0x5158848Ea5e780DDF1fA2c733a59b140B8794a0e);\r\n \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n \r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n \r\n    uint256 public _maxTxAmount = 3000 * 10**9; \r\n    uint256 public _maxWalletSize = 3000 * 10**9; \r\n    uint256 public _swapTokensAtAmount = 1 * 10**9;\r\n \r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n \r\n    constructor() {\r\n \r\n        _rOwned[_msgSender()] = _rTotal;\r\n \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_developmentAddress] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n \r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n \r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n \r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n \r\n    function tokenFromReflection(uint256 rAmount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n \r\n    function removeAllFee() private {\r\n        if (_redisFee == 0 && _taxFee == 0) return;\r\n \r\n        _previousredisFee = _redisFee;\r\n        _previoustaxFee = _taxFee;\r\n \r\n        _redisFee = 0;\r\n        _taxFee = 0;\r\n    }\r\n \r\n    function restoreAllFee() private {\r\n        _redisFee = _previousredisFee;\r\n        _taxFee = _previoustaxFee;\r\n    }\r\n \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n \r\n        if (from != owner() && to != owner()) {\r\n \r\n            //Trade start check\r\n            if (!tradingOpen) {\r\n                require(from == owner(), \"TOKEN: This account cannot send tokens until trading is enabled\");\r\n            }\r\n \r\n            require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n            require(!bots[from] && !bots[to], \"TOKEN: Your account is blacklisted!\");\r\n \r\n            if(to != uniswapV2Pair) {\r\n                require(balanceOf(to) + amount < _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");\r\n            }\r\n \r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\r\n \r\n            if(contractTokenBalance >= _maxTxAmount)\r\n            {\r\n                contractTokenBalance = _maxTxAmount;\r\n            }\r\n \r\n            if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n \r\n        bool takeFee = true;\r\n \r\n        //Transfer Tokens\r\n        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n            takeFee = false;\r\n        } else {\r\n \r\n            //Set Fee for Buys\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                _redisFee = _redisFeeOnBuy;\r\n                _taxFee = _taxFeeOnBuy;\r\n            }\r\n \r\n            //Set Fee for Sells\r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                _redisFee = _redisFeeOnSell;\r\n                _taxFee = _taxFeeOnSell;\r\n            }\r\n \r\n        }\r\n \r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n \r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n \r\n    function sendETHToFee(uint256 amount) private {\r\n        _marketingAddress.transfer(amount);\r\n    }\r\n \r\n    function setTrading(bool _tradingOpen) public onlyOwner {\r\n        tradingOpen = _tradingOpen;\r\n    }\r\n \r\n    function manualswap() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n \r\n    function manualsend() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n \r\n    function blockBots(address[] memory bots_) public onlyOwner {\r\n        for (uint256 i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n \r\n    function unblockBot(address notbot) public onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n \r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n \r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n \r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n \r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n \r\n    receive() external payable {}\r\n \r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\r\n            _getTValues(tAmount, _redisFee, _taxFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n            _getRValues(tAmount, tFee, tTeam, currentRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n \r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        uint256 redisFee,\r\n        uint256 taxFee\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = tAmount.mul(redisFee).div(100);\r\n        uint256 tTeam = tAmount.mul(taxFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n \r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTeam,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n \r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n \r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n \r\n    function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {\r\n        require(redisFeeOnBuy >= 0 && redisFeeOnBuy <= 4, \"Buy rewards must be between 0% and 4%\");\r\n        require(taxFeeOnBuy >= 0 && taxFeeOnBuy <= 95, \"Buy tax must be between 0% and 95%\");\r\n        require(redisFeeOnSell >= 0 && redisFeeOnSell <= 4, \"Sell rewards must be between 0% and 4%\");\r\n        require(taxFeeOnSell >= 0 && taxFeeOnSell <= 95, \"Sell tax must be between 0% and 95%\");\r\n\r\n        _redisFeeOnBuy = redisFeeOnBuy;\r\n        _redisFeeOnSell = redisFeeOnSell;\r\n        _taxFeeOnBuy = taxFeeOnBuy;\r\n        _taxFeeOnSell = taxFeeOnSell;\r\n\r\n    }\r\n \r\n    //Set minimum tokens required to swap.\r\n    function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {\r\n        _swapTokensAtAmount = swapTokensAtAmount;\r\n    }\r\n \r\n    //Set minimum tokens required to swap.\r\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n \r\n    //Set maximum transaction\r\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n           _maxTxAmount = maxTxAmount;\r\n        \r\n    }\r\n \r\n    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n        _maxWalletSize = maxWalletSize;\r\n    }\r\n \r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n}",
    "etherscan_verified": true
}