{
    "address": "0x0ecE235bBc6E017D69dEd3e86675bBadd712BD7c",
    "tx_hash": "b89dd5c3bacbc8951407df0f0c9417179b3e12a5e3bf89a940afaf5df1a30cc1",
    "block_number": 18004434,
    "timestamp": 1693120331,
    "gas_used_in_creation": 1698473,
    "creation_bytecode": "60a06040526201d4c0600260146101000a81548163ffffffff021916908363ffffffff160217905550667c585087238000600360006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507f8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef60001b600455662386f26fc1000060055566b1a2bc2ec50000600655600060075560405162001e3d38038062001e3d8339818101604052810190620000cf919062000329565b73271682deb8c4e0901d1a1550ad2e64d568e6990962000104620000f86200021360201b60201c565b6200021b60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505073271682deb8c4e0901d1a1550ad2e64d568e69909600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073514910771af9ca656af840dff83e8264ecf986ca600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260186101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550506200035b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600067ffffffffffffffff82169050919050565b6200030381620002e4565b81146200030f57600080fd5b50565b6000815190506200032381620002f8565b92915050565b600060208284031215620003425762000341620002df565b5b6000620003528482850162000312565b91505092915050565b608051611abf6200037e6000396000818161036501526103b90152611abf6000f3fe6080604052600436106100ab5760003560e01c8063715018a611610064578063715018a6146101b05780638da5cb5b146101c7578063d0821b0e146101f2578063f01daef11461020e578063f0ba844014610239578063f2fde38b14610279576100b2565b806316c58d04146100b757806319521d4a146100e05780631fe543e314610109578063271d2154146101325780632e1a7d4d1461015b5780633c5e310b14610184576100b2565b366100b257005b600080fd5b3480156100c357600080fd5b506100de60048036038101906100d99190610dfb565b6102a2565b005b3480156100ec57600080fd5b5061010760048036038101906101029190610f10565b6102f5565b005b34801561011557600080fd5b50610130600480360381019061012b91906110e4565b610363565b005b34801561013e57600080fd5b5061015960048036038101906101549190611188565b610423565b005b34801561016757600080fd5b50610182600480360381019061017d91906111b5565b610467565b005b34801561019057600080fd5b506101996104b0565b6040516101a79291906111f1565b60405180910390f35b3480156101bc57600080fd5b506101c56104c1565b005b3480156101d357600080fd5b506101dc6104d5565b6040516101e99190611229565b60405180910390f35b61020c6004803603810190610207919061127d565b6104fe565b005b34801561021a57600080fd5b5061022361075d565b60405161023091906112aa565b60405180910390f35b34801561024557600080fd5b50610260600480360381019061025b91906111b5565b610763565b60405161027094939291906112ef565b60405180910390f35b34801561028557600080fd5b506102a0600480360381019061029b9190610dfb565b6107cd565b005b6102aa610851565b8073ffffffffffffffffffffffffffffffffffffffff166108fc6007549081150290604051600060405180830381858888f193505050506102ea57600080fd5b600060078190555050565b6102fd610851565b8460048190555083600260146101000a81548163ffffffff021916908363ffffffff16021790555082600260186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600581905550806006819055505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161040c929190611334565b60405180910390fd5b61041f82826108cf565b5050565b61042b610851565b80600360006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b61046f610851565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050506104ad57600080fd5b50565b600080600554600654915091509091565b6104c9610851565b6104d3600061090b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600554341015610543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053a906113e0565b60405180910390fd5b600654341115610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057f90611472565b60405180910390fd5b4760023461059691906114c1565b11156105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce9061158d565b60405180910390fd5b60008160ff1614806105ec575060018160ff16145b61062b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610622906115f9565b60405180910390fd5b60006106356109cf565b905060405180608001604052803481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020018360ff16815250600860008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555060608201518160010160156101000a81548160ff021916908360ff1602179055509050507f30fd42e2a59d6a8b5702e7cc510a217c129071b809478e72dc89d3daedcd9739333484846040516107519493929190611619565b60405180910390a15050565b60075481565b60086020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060010160159054906101000a900460ff16905084565b6107d5610851565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c906116d0565b60405180910390fd5b61084e8161090b565b50565b610859610aa8565b73ffffffffffffffffffffffffffffffffffffffff166108776104d5565b73ffffffffffffffffffffffffffffffffffffffff16146108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c49061173c565b60405180910390fd5b565b60006002826000815181106108e7576108e661175c565b5b60200260200101516108f991906117ba565b90506109058184610ab0565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600454600260189054906101000a900467ffffffffffffffff166003600260149054906101000a900463ffffffff1660016040518663ffffffff1660e01b8152600401610a6095949392919061187a565b6020604051808303816000875af1158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa391906118e2565b905090565b600033905090565b60008060086000848152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff161515151581526020016001820160159054906101000a900460ff1660ff1660ff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161415610bdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd69061195b565b60405180910390fd5b60008460ff16826060015160ff161415610cc657600190506000670de0b6b3a7640000600360009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168460000151610c4291906114c1565b610c4c919061197b565b90508060076000828254610c6091906119ac565b92505081905550826020015173ffffffffffffffffffffffffffffffffffffffff166108fc8260028660000151610c9791906114c1565b610ca19190611a02565b9081150290604051600060405180830381858888f19350505050610cc457600080fd5b505b7fc6460791be6900ecabb03d901b0e5e1bf4bd27126757a5b8f8a7c4b3abab1f658260200151828460000151856060015188604051610d09959493929190611a36565b60405180910390a1600860008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160146101000a81549060ff02191690556001820160156101000a81549060ff02191690555050809250505092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610dc882610d9d565b9050919050565b610dd881610dbd565b8114610de357600080fd5b50565b600081359050610df581610dcf565b92915050565b600060208284031215610e1157610e10610d93565b5b6000610e1f84828501610de6565b91505092915050565b6000819050919050565b610e3b81610e28565b8114610e4657600080fd5b50565b600081359050610e5881610e32565b92915050565b600063ffffffff82169050919050565b610e7781610e5e565b8114610e8257600080fd5b50565b600081359050610e9481610e6e565b92915050565b600067ffffffffffffffff82169050919050565b610eb781610e9a565b8114610ec257600080fd5b50565b600081359050610ed481610eae565b92915050565b6000819050919050565b610eed81610eda565b8114610ef857600080fd5b50565b600081359050610f0a81610ee4565b92915050565b600080600080600060a08688031215610f2c57610f2b610d93565b5b6000610f3a88828901610e49565b9550506020610f4b88828901610e85565b9450506040610f5c88828901610ec5565b9350506060610f6d88828901610efb565b9250506080610f7e88828901610efb565b9150509295509295909350565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610fd982610f90565b810181811067ffffffffffffffff82111715610ff857610ff7610fa1565b5b80604052505050565b600061100b610d89565b90506110178282610fd0565b919050565b600067ffffffffffffffff82111561103757611036610fa1565b5b602082029050602081019050919050565b600080fd5b600061106061105b8461101c565b611001565b9050808382526020820190506020840283018581111561108357611082611048565b5b835b818110156110ac57806110988882610efb565b845260208401935050602081019050611085565b5050509392505050565b600082601f8301126110cb576110ca610f8b565b5b81356110db84826020860161104d565b91505092915050565b600080604083850312156110fb576110fa610d93565b5b600061110985828601610efb565b925050602083013567ffffffffffffffff81111561112a57611129610d98565b5b611136858286016110b6565b9150509250929050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61116581611140565b811461117057600080fd5b50565b6000813590506111828161115c565b92915050565b60006020828403121561119e5761119d610d93565b5b60006111ac84828501611173565b91505092915050565b6000602082840312156111cb576111ca610d93565b5b60006111d984828501610efb565b91505092915050565b6111eb81610eda565b82525050565b600060408201905061120660008301856111e2565b61121360208301846111e2565b9392505050565b61122381610dbd565b82525050565b600060208201905061123e600083018461121a565b92915050565b600060ff82169050919050565b61125a81611244565b811461126557600080fd5b50565b60008135905061127781611251565b92915050565b60006020828403121561129357611292610d93565b5b60006112a184828501611268565b91505092915050565b60006020820190506112bf60008301846111e2565b92915050565b60008115159050919050565b6112da816112c5565b82525050565b6112e981611244565b82525050565b600060808201905061130460008301876111e2565b611311602083018661121a565b61131e60408301856112d1565b61132b60608301846112e0565b95945050505050565b6000604082019050611349600083018561121a565b611356602083018461121a565b9392505050565b600082825260208201905092915050565b7f496e737566666973616e7420616d6f756e742c20706c6561736520696e63726560008201527f61736520796f7572206265742100000000000000000000000000000000000000602082015250565b60006113ca602d8361135d565b91506113d58261136e565b604082019050919050565b600060208201905081810360008301526113f9816113bd565b9050919050565b7f43616e277420626574206d6f7265207468616e204d41582062657420616d6f7560008201527f6e742e0000000000000000000000000000000000000000000000000000000000602082015250565b600061145c60238361135d565b915061146782611400565b604082019050919050565b6000602082019050818103600083015261148b8161144f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114cc82610eda565b91506114d783610eda565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115105761150f611492565b5b828202905092915050565b7f436f6e747261637420646f6573206e6f74206861766520656e6f75676820626160008201527f6c616e6365000000000000000000000000000000000000000000000000000000602082015250565b600061157760258361135d565b91506115828261151b565b604082019050919050565b600060208201905081810360008301526115a68161156a565b9050919050565b7f4d757374206265206569746865722030206f7220310000000000000000000000600082015250565b60006115e360158361135d565b91506115ee826115ad565b602082019050919050565b60006020820190508181036000830152611612816115d6565b9050919050565b600060808201905061162e600083018761121a565b61163b60208301866111e2565b61164860408301856112e0565b61165560608301846111e2565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006116ba60268361135d565b91506116c58261165e565b604082019050919050565b600060208201905081810360008301526116e9816116ad565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061172660208361135d565b9150611731826116f0565b602082019050919050565b6000602082019050818103600083015261175581611719565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006117c582610eda565b91506117d083610eda565b9250826117e0576117df61178b565b5b828206905092915050565b6117f481610e28565b82525050565b61180381610e9a565b82525050565b600061ffff82169050919050565b61182081611809565b82525050565b61182f81610e5e565b82525050565b6000819050919050565b6000819050919050565b600061186461185f61185a84611835565b61183f565b610e5e565b9050919050565b61187481611849565b82525050565b600060a08201905061188f60008301886117eb565b61189c60208301876117fa565b6118a96040830186611817565b6118b66060830185611826565b6118c3608083018461186b565b9695505050505050565b6000815190506118dc81610ee4565b92915050565b6000602082840312156118f8576118f7610d93565b5b6000611906848285016118cd565b91505092915050565b7f576861743f000000000000000000000000000000000000000000000000000000600082015250565b600061194560058361135d565b91506119508261190f565b602082019050919050565b6000602082019050818103600083015261197481611938565b9050919050565b600061198682610eda565b915061199183610eda565b9250826119a1576119a061178b565b5b828204905092915050565b60006119b782610eda565b91506119c283610eda565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119f7576119f6611492565b5b828201905092915050565b6000611a0d82610eda565b9150611a1883610eda565b925082821015611a2b57611a2a611492565b5b828203905092915050565b600060a082019050611a4b600083018861121a565b611a5860208301876112d1565b611a6560408301866111e2565b611a7260608301856112e0565b611a7f60808301846111e2565b969550505050505056fea2646970667358221220b56b217d1e9bc48d45f6102b6565311f095bcb9b0785f36750795dd934e422bf64736f6c634300080c0033000000000000000000000000000000000000000000000000000000000000033c",
    "runtime_bytecode": "",
    "contract_name": "CoinFlip",
    "compiler_version": "v0.8.12+commit.f00d7308",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"victory\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"choice\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"BetResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"choice\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"NewIdRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_betChoice\",\"type\":\"uint8\"}],\"name\":\"bet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"betOngoing\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"betChoice\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInformations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_val\",\"type\":\"uint128\"}],\"name\":\"setCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_callBackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_minBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBet\",\"type\":\"uint256\"}],\"name\":\"setContractSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// File: @chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you'd like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBaseV2 {\r\n  error OnlyCoordinatorCanFulfill(address have, address want);\r\n  address private immutable vrfCoordinator;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   */\r\n  constructor(address _vrfCoordinator) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomWords the VRF output expanded to the requested number of words\r\n   */\r\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n    if (msg.sender != vrfCoordinator) {\r\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n    }\r\n    fulfillRandomWords(requestId, randomWords);\r\n  }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n  /**\r\n   * @notice Get configuration relevant for making requests\r\n   * @return minimumRequestConfirmations global min for request confirmations\r\n   * @return maxGasLimit global max for request gas limit\r\n   * @return s_provingKeyHashes list of registered key hashes\r\n   */\r\n  function getRequestConfig()\r\n    external\r\n    view\r\n    returns (\r\n      uint16,\r\n      uint32,\r\n      bytes32[] memory\r\n    );\r\n\r\n  /**\r\n   * @notice Request a set of random words.\r\n   * @param keyHash - Corresponds to a particular oracle job which uses\r\n   * that key for generating the VRF proof. Different keyHash's have different gas price\r\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n   * @param subId  - The ID of the VRF subscription. Must be funded\r\n   * with the minimum subscription balance required for the selected keyHash.\r\n   * @param minimumRequestConfirmations - How many blocks you'd like the\r\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n   * for why you may want to request more. The acceptable range is\r\n   * [minimumRequestBlockConfirmations, 200].\r\n   * @param callbackGasLimit - How much gas you'd like to receive in your\r\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n   * may be slightly less than this amount because of gas used calling the function\r\n   * (argument decoding etc.), so you may need to request slightly more than you expect\r\n   * to have inside fulfillRandomWords. The acceptable range is\r\n   * [0, maxGasLimit]\r\n   * @param numWords - The number of uint256 random values you'd like to receive\r\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n   * @return requestId - A unique identifier of the request. Can be used to match\r\n   * a request to a response in fulfillRandomWords.\r\n   */\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  /**\r\n   * @notice Create a VRF subscription.\r\n   * @return subId - A unique subscription id.\r\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n   * @dev Note to fund the subscription, use transferAndCall. For example\r\n   * @dev  LINKTOKEN.transferAndCall(\r\n   * @dev    address(COORDINATOR),\r\n   * @dev    amount,\r\n   * @dev    abi.encode(subId));\r\n   */\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  /**\r\n   * @notice Get a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @return balance - LINK balance of the subscription in juels.\r\n   * @return reqCount - number of requests for this subscription, determines fee tier.\r\n   * @return owner - owner of the subscription.\r\n   * @return consumers - list of consumer address which are able to use this subscription.\r\n   */\r\n  function getSubscription(uint64 subId)\r\n    external\r\n    view\r\n    returns (\r\n      uint96 balance,\r\n      uint64 reqCount,\r\n      address owner,\r\n      address[] memory consumers\r\n    );\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @param newOwner - proposed new owner of the subscription\r\n   */\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @dev will revert if original owner of subId has\r\n   * not requested that msg.sender become the new owner.\r\n   */\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  /**\r\n   * @notice Add a consumer to a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - New consumer which can use the subscription\r\n   */\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Remove a consumer from a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - Consumer to remove from the subscription\r\n   */\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Cancel a subscription\r\n   * @param subId - ID of the subscription\r\n   * @param to - Where to send the remaining LINK to\r\n   */\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n\r\n  /*\r\n   * @notice Check to see if there exists a request commitment consumers\r\n   * for all consumers and keyhashes for a given sub.\r\n   * @param subId - ID of the subscription\r\n   * @return true if there exists at least one unfulfilled request for the subscription, false\r\n   * otherwise.\r\n   */\r\n  function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n\r\n  function name() external view returns (string memory tokenName);\r\n\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external returns (bool success);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool success);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/ETH.sol\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract CoinFlip is Ownable, VRFConsumerBaseV2 {\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n    LinkTokenInterface LINKTOKEN;\r\n\r\n    /* Storage:\r\n     ***********/\r\n\r\n    address constant vrfCoordinator = 0x271682DEB8C4E0901D1a1550aD2e64D568E69909;\r\n    address constant link_token_contract = 0x514910771AF9Ca656af840dff83E8264EcF986CA;\r\n\r\n    uint16 constant requestConfirmations = 3;\r\n    uint32 private callbackGasLimit = 120000;\r\n    uint64 private subscriptionId;\r\n    uint128 private commissionPercentage = 0.035 ether; //0.035%\r\n\r\n    bytes32 private keyHash = 0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef;\r\n    \r\n    uint private minBetAmount = 0.01 ether;\r\n    uint private maxBetAmount = 0.05 ether;\r\n\r\n    uint public pendingCommission = 0 ether;\r\n\r\n\r\n    struct Data {\r\n        uint256 betAmount;\r\n        address playerAddress;\r\n        bool betOngoing;\r\n        uint8 betChoice;\r\n    }\r\n\r\n    mapping(uint256 => Data) public data; //to check who is the sender of a pending bet by Id\r\n\r\n    /* Events:\r\n     *********/\r\n\r\n    event NewIdRequest(address player, uint betAmount, uint8 choice, uint256 requestId);\r\n    event BetResult(address player, bool victory, uint amountBet, uint8 choice, uint256 requestId);\r\n\r\n    /* Constructor:\r\n     **************/\r\n\r\n    constructor(uint64 _subscriptionId) payable VRFConsumerBaseV2(vrfCoordinator) {\r\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n        LINKTOKEN = LinkTokenInterface(link_token_contract);\r\n        subscriptionId = _subscriptionId;\r\n    }\r\n\r\n    /* Modifiers:\r\n     ************/\r\n\r\n    modifier betConditions() {\r\n        require(msg.value >= minBetAmount, \"Insuffisant amount, please increase your bet!\");\r\n        require(msg.value <= maxBetAmount, \"Can't bet more than MAX bet amount.\");\r\n        require((msg.value * 2) <= address(this).balance, \"Contract does not have enough balance\");\r\n        _;\r\n    }\r\n\r\n    /* Functions:\r\n     *************/\r\n\r\n    function bet(uint8 _betChoice) external payable betConditions {\r\n        require(_betChoice == 0 || _betChoice == 1, \"Must be either 0 or 1\");\r\n\r\n        uint256 requestId = requestRandomWords();\r\n\r\n        data[requestId] = Data({\r\n            playerAddress: msg.sender,\r\n            betChoice: _betChoice,\r\n            betOngoing: true,\r\n            betAmount: msg.value\r\n        });\r\n        \r\n        emit NewIdRequest(msg.sender, msg.value, _betChoice, requestId);\r\n    }\r\n\r\n    /// @notice Assumes the subscription is funded sufficiently.\r\n    function requestRandomWords() private returns (uint256) {\r\n        return COORDINATOR.requestRandomWords(keyHash, subscriptionId, requestConfirmations, callbackGasLimit, 1);\r\n    }\r\n\r\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\r\n        uint8 randomResult = uint8(_randomWords[0] % 2);\r\n        checkResult(randomResult, _requestId);\r\n    }\r\n\r\n    function checkResult(uint8 _randomResult, uint256 _requestId) private returns (bool) {\r\n        Data memory obj = data[_requestId];\r\n        require(obj.playerAddress != address(0),\"What?\");\r\n\r\n        bool win = false;\r\n\r\n        if (obj.betChoice == _randomResult) {\r\n            win = true;\r\n            uint betCommission = ((obj.betAmount * commissionPercentage) / 1 ether);\r\n            pendingCommission += betCommission;\r\n\r\n            require(payable(obj.playerAddress).send( (obj.betAmount * 2) - betCommission ));\r\n        }\r\n\r\n        emit BetResult(obj.playerAddress, win, obj.betAmount, obj.betChoice, _requestId);\r\n\r\n        delete (data[_requestId]);\r\n\r\n        return win;\r\n    }\r\n\r\n    //VIEW FUNCTIONS\r\n\r\n    function getInformations() public view returns (uint, uint)\r\n    {\r\n        return(minBetAmount, maxBetAmount);\r\n    }\r\n\r\n    // OWNER FUNCTIONS\r\n\r\n    function setCommission(uint128 _val) external onlyOwner\r\n    {\r\n        commissionPercentage = _val;\r\n    }\r\n\r\n    function setContractSettings(bytes32 _gasLane, uint32 _callBackGasLimit, uint64 _subscriptionId, uint _minBet, uint _maxBet) external onlyOwner {\r\n        keyHash = _gasLane;\r\n        callbackGasLimit = _callBackGasLimit;\r\n        subscriptionId = _subscriptionId;\r\n        minBetAmount = _minBet;\r\n        maxBetAmount = _maxBet;\r\n    }\r\n    function withdrawCommission(address _address) external onlyOwner\r\n    {\r\n        require(payable(_address).send(pendingCommission));\r\n        pendingCommission = 0;\r\n    }\r\n    function withdraw(uint amount) external onlyOwner {\r\n        require(payable(msg.sender).send(amount));\r\n    }\r\n\r\n    receive() external payable{\r\n\r\n    } \r\n}",
    "etherscan_verified": true
}