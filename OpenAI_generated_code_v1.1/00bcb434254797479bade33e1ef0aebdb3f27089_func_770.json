{
    "contract_address": "0x00BCB434254797479bade33e1eF0aEBDB3F27089",
    "heimdall_input": "function setMinimumTokensBeforeSwap(uint256 arg0) public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(arg0 - minimumTokensBeforeSwap, \"Cannot update minimumTokensBeforeSwap to same value\");\n        emit MinTokenAmountBeforeSwapChange(arg0, minimumTokensBeforeSwap);\n        minimumTokensBeforeSwap = arg0;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x33;\n        var_d = 0x43616e6e6f7420757064617465206d696e696d756d546f6b656e734265666f72;\n        var_e = 0x655377617020746f2073616d652076616c756500000000000000000000000000;\n    }",
    "llm_output": "function setMinimumTokensBeforeSwap(uint256 newMinimumTokens) public {\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n    require(newMinimumTokens != minimumTokensBeforeSwap, \"Cannot update minimumTokensBeforeSwap to the same value\");\n\n    emit MinTokenAmountBeforeSwapChange(newMinimumTokens, minimumTokensBeforeSwap);\n    minimumTokensBeforeSwap = newMinimumTokens;\n}",
    "ground_truth": "function setMinimumTokensBeforeSwap(uint256 newValue) external onlyOwner {\r\n        require(\r\n            newValue != minimumTokensBeforeSwap,\r\n            \"Cannot update minimumTokensBeforeSwap to same value\"\r\n        );\r\n        emit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\r\n        minimumTokensBeforeSwap = newValue;\r\n    }"
}