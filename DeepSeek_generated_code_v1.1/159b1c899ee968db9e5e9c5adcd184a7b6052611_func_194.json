{
    "contract_address": "0x159B1C899Ee968Db9E5e9c5adCD184a7B6052611",
    "heimdall_input": "function openTrading() public {\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(store_e / 0x010000000000000000000000000000000000000000)), \"trading is already open\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x17;\n        var_e = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n        store_d = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_d));\n        require(0x08, \"ERC20: approve to the zero address\");\n        require(!0x0f4240 | (0x01 == 0x01), \"ERC20: approve to the zero address\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(address(this) - 0, \"ERC20: approve to the zero address\");\n        require(address(store_d / 0x01) - 0, \"ERC20: approve to the zero address\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x22;\n        var_e = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_h = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        address var_f = address(this);\n        var_i = 0x02;\n        var_f = address(store_d / 0x01);\n        address var_i = keccak256(var_f);\n        storage_map_n[var_f] = 0x0f4240;\n        var_a = 0x0f4240;\n        emit Approval(address(this), address(store_d / 0x01), 0x0f4240);\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_d / 0x01).factory(var_b); // staticcall\n        uint256 var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_j == (address(var_j)));\n        var_k = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_d / 0x01).WETH(var_d); // staticcall\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_j == (address(var_j)));\n        var_l = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_e = address(this);\n        address var_h = address(var_j);\n        (bool success, bytes memory ret0) = address(var_j).Unresolved_c9c65396(var_e); // call\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x24;\n        var_e = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_h = 0x7265737300000000000000000000000000000000000000000000000000000000;\n        if (0x0a) {\n            if (0x0a == 0x01) {\n                if (0x0a == 0x02) {\n                    if (!0x08 > 0xff) {\n                        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_g = 0x11;\n                        if (!0x0100 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                            var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_g = 0x11;\n                            if (!((0x0a < 0x0b) & (0x08 < 0x4e)) | ((0x0a < 0x0133) & (0x08 < 0x20))) {\n                                if (!0x08 > 0x01) {\n                                    if (!0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        var_g = 0x11;\n                                        if (!0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                            var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                            var_g = 0x11;\n                                            if (!0) {\n                                            }\n                                            if (!0x05f5e100 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                                                var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                                var_g = 0x11;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function openTrading() public {\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n    require(!tradingOpen, \"trading is already open\");\n    uniswapV2Router = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    require(true, \"ERC20: approve to the zero address\");\n    require(true, \"ERC20: approve to the zero address\");\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(uniswapV2Router != address(0), \"ERC20: approve to the zero address\");\n    uint256 errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 errorOffset = 0x20;\n    uint256 errorLength = 0x22;\n    uint256 errorPart1 = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    uint256 errorPart2 = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    address allowanceOwner = address(this);\n    uint256 allowanceSpenderSlot;\n    allowanceOwner = uniswapV2Router;\n    bytes32 allowanceSlot = keccak256(abi.encode(allowanceOwner));\n    assembly {\n        sstore(allowanceSlot, 0x0f4240)\n    }\n    emit Approval(address(this), uniswapV2Router, 0x0f4240);\n    address factoryAddress;\n    bytes memory factoryCall = abi.encodeWithSelector(0xc45a0155);\n    (bool success, bytes memory factoryData) = uniswapV2Router.staticcall(factoryCall);\n    require(success && factoryData.length >= 32, \"Static call failed\");\n    assembly {\n        factoryAddress := mload(add(factoryData, 32))\n    }\n    address wethAddress;\n    bytes memory wethCall = abi.encodeWithSelector(0xad5c4648);\n    (success, bytes memory wethData) = uniswapV2Router.staticcall(wethCall);\n    require(success && wethData.length >= 32, \"Static call failed\");\n    assembly {\n        wethAddress := mload(add(wethData, 32))\n    }\n    bytes memory createPairCall = abi.encodeWithSelector(0xc9c65396, address(this), wethAddress);\n    (success, ) = factoryAddress.call(createPairCall);\n    errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x24;\n    errorPart1 = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    errorPart2 = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    if (10 != 0) {\n        if (10 == 1) {\n            if (10 == 2) {\n                if (!(8 > 255)) {\n                    uint256 panicCode = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    uint256 panicArg = 0x11;\n                    if (!(256 > type(uint256).max)) {\n                        panicCode = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        panicArg = 0x11;\n                        if (!((10 < 11) & (8 < 78)) | ((10 < 307) & (8 < 32))) {\n                            if (!(8 > 1)) {\n                                if (!(1 > 0x1999999999999999999999999999999999999999999999999999999999999999)) {\n                                    panicCode = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                    panicArg = 0x11;\n                                    if (!(10 > 0x1999999999999999999999999999999999999999999999999999999999999999)) {\n                                        panicCode = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        panicArg = 0x11;\n                                        if (!false) {\n                                        }\n                                        if (!(100000000 > type(uint256).max)) {\n                                            panicCode = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                            panicArg = 0x11;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "ground_truth": "function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }"
}