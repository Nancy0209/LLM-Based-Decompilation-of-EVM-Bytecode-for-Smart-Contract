{
    "contract_address": "0xE717AFf2e3d325cb5E2c7bdB9CB916ff6AF64ec7",
    "heimdall_input": "function decreaseAllowance(address arg0, uint256 arg1) public payable returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(arg1 == arg1);\n        address var_a = address(msg.sender);\n        var_b = 0x01;\n        var_a = address(arg0);\n        address var_b = keccak256(var_a);\n        require(!(arg1 > storage_map_b[var_a]), \"SafeMath: subtraction overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x1e;\n        var_g = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(storage_map_b[var_a] - arg1) > storage_map_b[var_a]);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(address(msg.sender) - (address(msg.sender)));\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        var_a = address(arg0);\n        var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        uint256 var_c = storage_map_b[var_a] - arg1;\n        emit Approval(address(msg.sender), address(arg0), storage_map_b[var_a] - arg1);\n        var_c = 0x01;\n        return 0x01;\n        var_a = address(arg0);\n        var_b = 0x01;\n        var_a = address(msg.sender);\n        var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        var_c = storage_map_b[var_a] - arg1;\n        emit Approval(address(arg0), address(msg.sender), storage_map_b[var_a] - arg1);\n        var_c = 0x01;\n        return 0x01;\n    }",
    "llm_output": "function decreaseAllowance(address spender, uint256 subtractedValue) public payable returns (bool) {\n    require(spender == address(spender));\n    require(subtractedValue == subtractedValue);\n    address owner = msg.sender;\n    bytes32 key = keccak256(abi.encodePacked(spender));\n    require(!(subtractedValue > allowances[key]), \"SafeMath: subtraction overflow\");\n    uint256 currentAllowance = allowances[key];\n    uint256 newAllowance = currentAllowance - subtractedValue;\n    bool condition = newAllowance == 0;\n    require(uint(condition) > currentAllowance);\n    revert('Decompiler artifact');\n    address owner2 = owner;\n    address spender2 = spender;\n    bytes32 key2 = keccak256(abi.encodePacked(spender2));\n    allowances[key2] = newAllowance;\n    emit Approval(owner2, spender2, newAllowance);\n    return true;\n    address spender3 = spender;\n    address owner3 = owner;\n    bytes32 key3 = keccak256(abi.encodePacked(owner3));\n    allowances[key3] = allowances[key3] - subtractedValue;\n    uint256 newAllowance2 = allowances[key3] - subtractedValue;\n    emit Approval(spender3, owner3, newAllowance2);\n    return true;\n}",
    "ground_truth": "function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }"
}