{
    "contract_address": "0xaEAD18A6f788fb7460aDA9fDFf4C4Cd6Ba72dDBE",
    "heimdall_input": "function transferOwnership(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(!(bytes1(isClaimable / 0x0100)), \"Ownable: new owner is the zero address\");\n        address var_a = msg.sender;\n        var_b = 0x66;\n        var_a = uint32(msg.data[0]);\n        address var_b = keccak256(var_a);\n        require(address(owner) == msg.sender, \"Ownable: new owner is the zero address\");\n        require(bytes1(storage_map_b[var_a]), \"Ownable: new owner is the zero address\");\n        require(address(arg0), \"Ownable: new owner is the zero address\");\n        owner = (address(arg0)) | (uint96(owner));\n        emit OwnershipTransferred(address(owner), address(arg0));\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x26;\n        var_f = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n        var_g = 0x6464726573730000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x1b;\n        var_f = 0x4e6f74206f776e6572206f722061626c6520746f206279706173730000000000;\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x1b;\n        var_f = 0x4e6f74206f776e6572206f722061626c6520746f206279706173730000000000;\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x1b;\n        var_f = 0x4e6f74206f776e6572206f722061626c6520746f206279706173730000000000;\n        require(address(arg0), \"Ownable: new owner is the zero address\");\n        owner = (address(arg0)) | (uint96(owner));\n        emit OwnershipTransferred(address(owner), address(arg0));\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x26;\n        var_f = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n        var_g = 0x6464726573730000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transferOwnership(address newOwner) public {\n    // Redundant self-equivalence check (kept for byte-code fidelity)\n    require(newOwner == address(newOwner));\n\n    // Decompiler-extracted flag check (logic preserved exactly)\n    require(\n        bytes1(uint256(isClaimable) / 0x0100) == bytes1(0),\n        \"Ownable: new owner is the zero address\"\n    );\n\n    // Miscellaneous operations reproduced from original byte-code\n    address callerAddress = msg.sender;\n    uint8 _unusedConstant = 0x66;\n\n    // Load the first 4 bytes of calldata (function selector)\n    uint32 selector;\n    assembly {\n        selector := shr(224, calldataload(0))\n    }\n\n    bytes32 selectorHash = keccak256(abi.encodePacked(selector));\n\n    // Original validation sequence\n    require(address(uint160(owner)) == msg.sender, \"Ownable: new owner is the zero address\");\n    require(\n        bytes1(permissionMap[selectorHash]) != bytes1(0),\n        \"Ownable: new owner is the zero address\"\n    );\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n    // Update owner while preserving lower 96 bits\n    owner = uint256(uint160(newOwner)) | uint96(owner);\n    emit OwnershipTransferred(address(uint160(owner)), newOwner);\n\n    // Duplicated checks intentionally preserved\n    require(address(uint160(owner)) == msg.sender, \"Not owner or able to bypass\");\n    require(address(uint160(owner)) == msg.sender, \"Not owner or able to bypass\");\n    require(address(uint160(owner)) == msg.sender, \"Not owner or able to bypass\");\n\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n    // Second owner update and event emission (matches decompiled logic)\n    owner = uint256(uint160(newOwner)) | uint96(owner);\n    emit OwnershipTransferred(address(uint160(owner)), newOwner);\n}",
    "ground_truth": "function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }"
}