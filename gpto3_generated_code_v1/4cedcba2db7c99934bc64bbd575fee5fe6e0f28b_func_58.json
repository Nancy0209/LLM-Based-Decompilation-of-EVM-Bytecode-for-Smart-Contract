{
    "contract_address": "0x4CEDcba2dB7c99934bC64bBd575FEE5fE6E0F28b",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_j)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_d[var_a]);\n        store_c = 0x01000000000000000000000000000000000000000000 | (uint248(store_c));\n        require(!storage_map_d[var_a]);\n        require(!bytes1(store_c / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_g).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_g), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_g);\n        address var_b = keccak256(var_a);\n        storage_map_d[var_a] = storage_map_d[var_a];\n        address var_k = storage_map_d[var_a];\n        emit Approval(address(this), address(store_g), storage_map_d[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_d[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_g).code.length);\n        (bool success, bytes memory ret0) = address(store_g).Unresolved_791ac947(var_l); // call\n        store_c = uint248(store_c);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_j).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // 1. Restrict execution to the designated treasury address\n    require(msg.sender == treasuryAddress, \"Not authorised\");\n\n    address self = address(this);\n\n    // 2. Replicate opaque flag manipulation from original byte-code\n    uint8 flag = 0x01;\n\n    // 3. Ensure the swap has not already been performed for this contract\n    require(!swapPerformed[self], \"Swap already executed\");\n\n    // 4. Set the high-order status bit exactly as in the original\n    swapStatus = uint248(0x01000000000000000000000000000000000000000000) | swapStatus;\n\n    // 5. Repeat the same protection checks\n    require(!swapPerformed[self], \"Swap already executed\");\n    require(\n        bytes1(uint256(swapStatus) / 0x010000000000000000000000000000000000000000) == bytes1(0),\n        \"Unexpected status flag\"\n    );\n\n    flag = 0x02; // artefact from decompiled logic\n\n    // ---------------------------------------------------------------------\n    // 6. Obtain WETH address from the router \u2013 mirrors the original staticcall\n    // ---------------------------------------------------------------------\n    (bool wethCallOk, bytes memory wethRet) =\n        tokenRouter.staticcall(abi.encodeWithSignature(\"WETH()\"));\n    require(wethCallOk, \"WETH() staticcall failed\");\n\n    // Length check present in the decompiled output\n    require(wethRet.length >= 32, \"ERC20: approve to the zero address\");\n\n    address wethAddress;\n    assembly {\n        wethAddress := mload(add(wethRet, 32))\n    }\n\n    // 7. Additional zero-address assertions preserved verbatim\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(tokenRouter != address(0), \"ERC20: approve to the zero address\");\n\n    // 8. Emit the Approval event exactly once, as done by the original code\n    emit Approval(address(this), tokenRouter, swapPerformed[self] ? 1 : 0);\n\n    // ---------------------------------------------------------------------\n    // 9. Low-level call with selector 0x791ac947 (likely swapExactETHForTokens)\n    // ---------------------------------------------------------------------\n    (bool swapOk, ) = tokenRouter.call(\n        abi.encodeWithSelector(bytes4(0x791ac947), uint256(swapPerformed[self] ? 1 : 0))\n    );\n    require(swapOk, \"Swap failed\");\n\n    // 10. Explicit cast back to uint248 \u2013 mirrors the decompiler\u2019s final write\n    swapStatus = uint248(swapStatus);\n\n    // 11. Ensure the contract holds no Ether before forwarding (original logic)\n    require(address(this).balance == 0, \"Contract balance is not zero\");\n\n    // 12. Forward any residual Ether (expected to be zero) to the treasury\n    (bool ethSent, ) = payable(treasuryAddress).call{value: address(this).balance}(\"\");\n    require(ethSent, \"ETH transfer failed\");\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}