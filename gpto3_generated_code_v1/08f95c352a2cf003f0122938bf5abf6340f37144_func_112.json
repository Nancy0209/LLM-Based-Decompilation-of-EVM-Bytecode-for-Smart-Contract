{
    "contract_address": "0x08f95c352a2CF003F0122938BF5ABf6340F37144",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_c) {\n            if (store_c - ((store_c >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_c >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_c >> 0x01;\n                if (store_c) {\n                    if (store_c - ((store_c >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_c >> 0x01) {\n                            if (0x1f < (store_c >> 0x01)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_c >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory tokenSymbol) {\n    assembly {\n        /*\n            The ERC-20 symbol is stored as a Solidity `string` in storage slot 3.\n            For strings/bytes that fit into 31 bytes, Solidity packs the data and\n            the length flag into the same storage word:\n\n                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 254 \u2026 1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500 0 \u2500\u2500\u2510\n                \u2502                     UTF-8 data                         \u2502\u2502 1/0 \u2502\n                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n            If the least-significant bit is 1, the string is stored \u201cin-place\u201d.\n            Otherwise the word holds a pointer to the keccak256(slot) region, where\n            the first word is the length followed by the string data.\n        */\n\n        // Load raw data from the dedicated storage slot\n        let packed := sload(3)\n\n        // Check whether the string is short (in-place) or long (pointer)\n        switch and(packed, 1)\n        // ---------------------------------------------------------------\n        // Short string  (\u2264 31 bytes)  \u2013 stored directly inside `packed`\n        // ---------------------------------------------------------------\n        case 1 {\n            // Extract length (remove the flag bit)\n            let length := shr(1, packed)\n\n            // Allocate memory for the return value (length + 32 bytes length prefix)\n            tokenSymbol := mload(0x40)\n            let newFreePtr := add(tokenSymbol, and(add(add(length, 0x20), 0x1f), not(0x1f)))\n            mstore(0x40, newFreePtr)\n\n            // Store length\n            mstore(tokenSymbol, length)\n\n            // Store data:\n            // Shift left so that the least-significant byte of `packed`\n            // (the flag) is discarded and the remaining bytes are aligned\n            mstore(add(tokenSymbol, 0x20), shr(9, shl(9, packed)))\n        }\n        // ---------------------------------------------------------------\n        // Long string  (> 31 bytes)  \u2013 stored in separate storage region\n        // ---------------------------------------------------------------\n        default {\n            // Calculate start slot for the dynamic array (keccak256(slot))\n            let dataSlot := keccak256(3, 0x20)\n\n            // Load length (first word at dataSlot)\n            let length := sload(dataSlot)\n\n            // Calculate number of full 32-byte words that hold the data\n            let words := div(add(length, 0x1f), 0x20)\n\n            // Allocate memory (32 bytes length prefix + data)\n            tokenSymbol := mload(0x40)\n            let size := add(0x20, mul(words, 0x20))\n            let newFreePtr := add(tokenSymbol, and(add(size, 0x1f), not(0x1f)))\n            mstore(0x40, newFreePtr)\n\n            // Store length prefix\n            mstore(tokenSymbol, length)\n\n            // Copy data word-by-word from storage to memory\n            for { let i := 0 } lt(i, words) { i := add(i, 1) } {\n                let word := sload(add(dataSlot, add(i, 1)))\n                mstore(add(tokenSymbol, add(0x20, mul(i, 0x20))), word)\n            }\n        }\n    }\n}",
    "ground_truth": "function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }"
}