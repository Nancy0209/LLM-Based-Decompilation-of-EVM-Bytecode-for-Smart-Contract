{
    "contract_address": "0xEA00f45b33879A1D55f91ff260C20c96a577E566",
    "heimdall_input": "function updateMarketingWalletInfo(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        emit marketingWalletUpdated(address(arg0), address(store_v));\n        store_v = (address(arg0)) | (uint96(store_v));\n    }",
    "llm_output": "function updateMarketingWalletInfo(address newMarketingWallet) public {\n    // Original always-true equality check retained for logical fidelity\n    require(newMarketingWallet == address(newMarketingWallet));\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    emit MarketingWalletUpdated(\n        newMarketingWallet,\n        address(uint160(_marketingWalletInfo))\n    );\n\n    // Pack the new marketing wallet (upper 160 bits) with the existing lower 96-bit payload\n    _marketingWalletInfo =\n        uint256(uint160(newMarketingWallet)) |\n        uint256(uint96(_marketingWalletInfo));\n}",
    "ground_truth": "function updateMarketingWalletInfo(address newMarketingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\r\n        marketingWallet = newMarketingWallet;\r\n    }"
}