{
    "contract_address": "0x0167A447Af23ec7E8c7aFE21a84b79A1E3679502",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_h[var_a]);\n        store_g = 0x01000000000000000000000000000000000000000000 | (uint248(store_g));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_f), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_f);\n        address var_b = keccak256(var_a);\n        storage_map_h[var_a] = storage_map_h[var_a];\n        address var_k = storage_map_h[var_a];\n        emit Approval(address(this), address(store_f), storage_map_h[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_h[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_f).code.length);\n        (bool success, bytes memory ret0) = address(store_f).{ value: var_m ether }Unresolved_791ac947(var_l); // call\n        store_g = uint248(store_g);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // Original: require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n    require(\n        msg.sender == address(uint160(_transferDelayEnabled / 0x0100)),\n        \"Invalid caller\"\n    );\n\n    address currentContract = address(this);\n\n    // Original flag usage (kept for semantic fidelity, though not used later)\n    uint8 _flag = 0x01;\n\n    // Original: require(!storage_map_h[var_a]);\n    require(_mappingH[currentContract] == 0, \"Non-zero mapping value\");\n\n    // Original: store_g = 0x01\u2026 | store_g\n    _storeG = uint248(\n        uint248(0x01000000000000000000000000000000000000000000) | _storeG\n    );\n\n    // Original slice of calldata: msg.data[4:68]\n    assembly {\n        let ptr := mload(0x40)\n        calldatacopy(ptr, 4, 64)\n    }\n\n    // Original staticcall to WETH (selector 0xd0e30db0)\n    (bool wethSuccess, bytes memory wethRet) = _router.staticcall(\n        abi.encodeWithSelector(0xd0e30db0)\n    );\n    // (No success check in decompiled code)\n\n    uint256 offsetTracker = 0x60 + wethRet.length;\n\n    // Original two weird ERC20 approve checks\n    require(\n        !(((offsetTracker + wethRet.length) - offsetTracker) < 0x20),\n        \"ERC20: approve to the zero address\"\n    );\n    require(\n        wethRet.length == uint256(uint160(wethRet.length)),\n        \"ERC20: approve to the zero address\"\n    );\n\n    // Original: require(address(this), \u2026) & require(address(store_f), \u2026)\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(_router != address(0), \"ERC20: approve to the zero address\");\n\n    // Emit original Approval event\n    emit Approval(currentContract, _router, _mappingH[currentContract]);\n\n    // Prepare payload for selector 0x791ac947 (purpose unknown)\n    bytes memory swapPayload = abi.encodeWithSelector(\n        0x791ac947,\n        _mappingH[currentContract]\n    );\n\n    uint256 ethValueToSend = 0;\n    uint256 deadline = block.timestamp; // Kept for parity with original code\n\n    // Original: require(address(store_f).code.length);\n    require(_router.code.length > 0, \"Router has no code\");\n\n    // Original external call (no success check)\n    _router.call{value: ethValueToSend}(swapPayload);\n\n    // Original: store_g = uint248(store_g);\n    _storeG = uint248(_storeG);\n\n    // Original: require(!address(this).balance);\n    require(address(this).balance == 0, \"Residual ETH balance\");\n\n    // Original transfer back (return value ignored)\n    payable(address(uint160(_transferDelayEnabled / 0x0100))).transfer(\n        address(this).balance\n    );\n\n    // The following hard-coded constants were present in the decompiled\n    // version but served no effect in Solidity; they are intentionally\n    // omitted because they do not alter state or control flow.\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}