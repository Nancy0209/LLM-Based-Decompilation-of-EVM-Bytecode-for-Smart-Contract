{
    "contract_address": "0x410cA8f9159f88a864DeEc21f30D5D62E8B75619",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (store_a - ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x03;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory tokenName) {\n    // Load the raw contents of storage slot 0 where the token name is kept\n    uint256 rawNameSlot;\n    assembly {\n        rawNameSlot := sload(0)\n    }\n\n    /*\n        The following conditionals (and their associated panic reverts)\n        are retained verbatim from the de-compiled output.  They have no\n        practical effect for well-formed data, but removing them would\n        alter the original control-flow, which is forbidden.\n    */\n    if (\n        rawNameSlot != 0 &&\n        rawNameSlot - (((rawNameSlot / 2) < 0x20) ? 1 : 0) != 0\n    ) {\n        assembly {\n            // panic(0x22)\n            mstore(\n                0x00,\n                0x4e487b7100000000000000000000000000000000000000000000000000000000\n            )\n            mstore(0x04, 0x22)\n            revert(0x00, 0x24)\n        }\n    }\n\n    if (\n        rawNameSlot != 0 &&\n        rawNameSlot - (((rawNameSlot / 2) < 0x20) ? 1 : 0) != 0\n    ) {\n        uint256 half = rawNameSlot / 2;\n        if (half == 0) {\n            if (0x1f < half) {\n                assembly {\n                    // panic(0x22)\n                    mstore(\n                        0x00,\n                        0x4e487b7100000000000000000000000000000000000000000000000000000000\n                    )\n                    mstore(0x04, 0x22)\n                    revert(0x00, 0x24)\n                }\n            }\n        }\n    }\n\n    /*\n        Decode the string stored in slot 0 using Solidity\u2019s short/long\n        string storage rules and return it.\n    */\n    assembly {\n        let isShort := and(rawNameSlot, 1)\n\n        switch isShort\n        // -------------------------------------------------------------\n        // Short string  (\u2264 31 bytes)  \u2013 fully contained in the slot\n        // -------------------------------------------------------------\n        case 1 {\n            // Extract length from the lowest byte ((len \u00d7 2) + 1)\n            let len := shr(1, and(rawNameSlot, 0xff))\n\n            // Allocate memory for the string (length + 32 bytes length prefix)\n            tokenName := mload(0x40)\n            let newFreePtr := add(tokenName, and(add(len, 0x3f), not(0x1f)))\n            mstore(0x40, newFreePtr)\n\n            // Store length\n            mstore(tokenName, len)\n\n            // Right-align the data so that it starts at the least-significant byte\n            let shift := mul(8, sub(32, len))\n            let data := shr(shift, rawNameSlot)\n\n            // Copy data to memory\n            mstore(add(tokenName, 0x20), data)\n        }\n        // -------------------------------------------------------------\n        // Long string  (> 31 bytes)  \u2013 data stored at keccak256(slot)\n        // -------------------------------------------------------------\n        default {\n            let len := div(rawNameSlot, 2) // actual length\n\n            // Calculate the first data slot (keccak256(0))\n            mstore(0x00, 0x00)\n            let dataSlot := keccak256(0x00, 0x20)\n\n            // Allocate memory\n            tokenName := mload(0x40)\n            let newFreePtr := add(tokenName, and(add(len, 0x3f), not(0x1f)))\n            mstore(0x40, newFreePtr)\n\n            // Store length\n            mstore(tokenName, len)\n\n            // Pointer where data will be written\n            let dest := add(tokenName, 0x20)\n\n            // Number of 32-byte words to copy\n            let words := div(add(len, 31), 32)\n\n            // Copy the words from storage to memory\n            for { let i := 0 } lt(i, words) { i := add(i, 1) } {\n                mstore(add(dest, mul(i, 0x20)), sload(add(dataSlot, i)))\n            }\n        }\n    }\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }"
}