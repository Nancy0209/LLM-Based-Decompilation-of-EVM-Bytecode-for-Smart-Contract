{
    "contract_address": "0xe150ed6520Ef0F5269a82638f344541e22298E51",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_c = 0x01000000000000000000000000000000000000000000 | (uint248(store_c));\n        require(!storage_map_b[var_a]);\n        require(!bytes1(store_c / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_e).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_e), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_e);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_e), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_e).code.length);\n        (bool success, bytes memory ret0) = address(store_e).Unresolved_791ac947(var_l); // call\n        store_c = uint248(store_c);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    /* ---------------------------------*\n     *  Decompiler\u2013derived auth check   *\n     * ---------------------------------*/\n    require(msg.sender == address(uint160(transferDelayEnabled / 0x0100)));\n\n    address self = address(this);\n    uint8  initFlag = 0x01;\n\n    /* ---------------------------------*\n     *  Re-entrancy / double-swap guard *\n     * ---------------------------------*/\n    require(allowanceTarget[self] == address(0));\n\n    /* ---------------------------------*\n     *  Bit-flag manipulation (248 bits) *\n     * ---------------------------------*/\n    statusFlag = uint248(statusFlag) | 0x01000000000000000000000000000000000000000000;\n\n    require(allowanceTarget[self] == address(0));\n    require(\n        bytes1(uint248(statusFlag) / 0x010000000000000000000000000000000000000000) == 0x00\n    );\n\n    uint8 secondaryFlag = 0x02;\n    uint256 dynamicOffset = 0x60;\n\n    /* ---------------------------------*\n     *  Calldata slice (bytes 4 \u2013 67)   *\n     * ---------------------------------*/\n    bytes memory calldataSlice = new bytes(64);\n    assembly {\n        calldatacopy(add(calldataSlice, 0x20), 4, 64)\n    }\n\n    /* ---------------------------------*\n     *  Panic constants (unused)        *\n     * ---------------------------------*/\n    bytes32 panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8   panicCode     = 0x32;\n\n    /* ---------------------------------*\n     *  Fetch WETH address via router   *\n     * ---------------------------------*/\n    bytes4 wethSelector = 0xad5c4648; // WETH()\n    (bool /*success*/, bytes memory wethData) =\n        dexRouter.staticcall(abi.encodeWithSelector(wethSelector));\n\n    dynamicOffset += wethData.length + 0x1f;\n\n    require(\n        !(((dynamicOffset + wethData.length) - dynamicOffset) < 0x20),\n        \"ERC20: approve to the zero address\"\n    );\n    require(\n        dynamicOffset == uint256(uint160(dynamicOffset)),\n        \"ERC20: approve to the zero address\"\n    );\n\n    panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    panicCode     = 0x32;\n\n    uint256 dummyCast = uint256(uint160(dynamicOffset));\n\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(dexRouter != address(0),     \"ERC20: approve to the zero address\");\n    require(dexRouter.code.length > 0);\n\n    /* ---------------------------------*\n     *  Revert-message constants (unused)*\n     * ---------------------------------*/\n    bytes4  revertSelector  = 0x08c379a0;\n    uint256 revertOffset    = 0x20;\n    uint256 revertLenShort  = 0x22;\n    bytes32 revertMsgPart1  = 0x45524332303a20617070726f766520746f20746865207a65726f2061646472;\n    bytes32 revertMsgPart2  = 0x7373000000000000000000000000000000000000000000000000000000000000;\n\n    /* ---------------------------------*\n     *  Self-assignment from artefact    *\n     * ---------------------------------*/\n    allowanceTarget[self] = allowanceTarget[self];\n\n    address approvalValue = allowanceTarget[self];\n    emit Approval(address(this), dexRouter, uint256(uint160(approvalValue)));\n\n    /* ---------------------------------*\n     *  Call to mysterious selector      *\n     * ---------------------------------*/\n    bytes4 swapSelector = 0x791ac947;\n    dexRouter.call(abi.encodeWithSelector(swapSelector, approvalValue));\n\n    /* ---------------------------------*\n     *  Trivial cast (kept for fidelity) *\n     * ---------------------------------*/\n    statusFlag = uint248(statusFlag);\n\n    /* ---------------------------------*\n     *  Ensure contract holds no ETH     *\n     * ---------------------------------*/\n    require(address(this).balance == 0);\n\n    /* ---------------------------------*\n     *  Forward any residual ETH         *\n     * ---------------------------------*/\n    address payable feeReceiver =\n        payable(address(uint160(uint256(transferDelayEnabled) / 0x0100)));\n    feeReceiver.transfer(address(this).balance);\n\n    /* ---------------------------------*\n     *  More unused constants from artefact *\n     * ---------------------------------*/\n    revertSelector  = 0x08c379a0;\n    revertOffset    = 0x20;\n    uint256 revertLenLong = 0x24;\n    revertMsgPart1  = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    revertMsgPart2  = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external {\\n        require(_msgSender()==_taxWallet);\\n        uint256 tokenBalance=balanceOf(address(this));\\n        if(tokenBalance>0){\\n          swapTokensForEth(tokenBalance);\\n        }\\n        uint256 ethBalance=address(this).balance;\\n        if(ethBalance>0){\\n          sendETHToFee(ethBalance);\\n        }\\n    }"
}