{
    "contract_address": "0xaB46fe68E6824c1004700052e359F63FB9C2EF8b",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_c) {\n            if (store_c - ((store_c / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_c / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_c / 0x02;\n                if (store_c) {\n                    if (store_c - ((store_c / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_c / 0x02) {\n                            if (0x1f < (store_c / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_c / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    string storage _storedSymbol = _symbol;                      // assumed storage variable that holds the token symbol\n    uint256 len = bytes(_storedSymbol).length;                   // mirrors the original `store_c`\n\n    /* --- BEGIN: faithfully preserved, seemingly-redundant logic from the decompiled output --- */\n    if (len != 0) {\n        // if (len - ((len / 2) < 32 ? 1 : 0)) revert(PANIC_0x22)\n        if (len - ((len / 2) < 0x20 ? 1 : 0) != 0) {\n            assembly {\n                mstore(0x00, 0x4e487b71)\n                mstore(0x04, 0x22)\n                revert(0x00, 0x24)\n            }\n        }\n\n        unchecked {\n            // Variables that were meaningful only for memory-layout math in the decompiler\n            uint256 scratch = 0;\n            scratch = scratch + (0x20 + (((0x1f + (len / 2)) / 0x20) * 0x20));\n            uint256 halfLen = len / 2;\n\n            if (len != 0) {\n                if (len - ((len / 2) < 0x20 ? 1 : 0) != 0) {\n                    assembly {\n                        mstore(0x00, 0x4e487b71)\n                        mstore(0x04, 0x22)\n                        revert(0x00, 0x24)\n                    }\n                }\n\n                if (halfLen == 0) {\n                    if (0x1f < halfLen) {\n                        // revert(0x04, 0x00) \u2013 matches the decompiler\u2019s unconditional 0x04 selector\n                        assembly {\n                            mstore(0x00, 0x04)\n                            revert(0x00, 0x04)\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /* ---  END: preserved decompiled logic  --- */\n\n    // Normal return path\n    return _storedSymbol;\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }"
}