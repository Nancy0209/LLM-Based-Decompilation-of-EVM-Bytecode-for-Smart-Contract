{
    "contract_address": "0x9cE4E67bFC441B766d43D1C2C8929A281E35A294",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_h[var_a]);\n        store_g = 0x01000000000000000000000000000000000000000000 | (uint248(store_g));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_f), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_f);\n        address var_b = keccak256(var_a);\n        storage_map_h[var_a] = storage_map_h[var_a];\n        address var_k = storage_map_h[var_a];\n        emit Approval(address(this), address(store_f), storage_map_h[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_h[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_f).code.length);\n        (bool success, bytes memory ret0) = address(store_f).Unresolved_791ac947(var_l); // call\n        store_g = uint248(store_g);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    /*****************************************************************\n     * WARNING: This function is a direct semantic translation of     *\n     * highly\u2013obfuscated, partially\u2013corrupted byte-code that was      *\n     * recovered by a decompiler.  All odd-looking statements are     *\n     * intentional and MUST NOT be \u201ccleaned up\u201d or \u201coptimised-away\u201d   *\n     * because they are required to preserve byte-for-byte behaviour.*\n     *****************************************************************/\n\n    /* ------------------------------------------------------------ */\n    /* 1.  Caller check (exact arithmetic/bit-shift preserved)      */\n    /* ------------------------------------------------------------ */\n    require(\n        msg.sender == address(uint160(transferDelayEnabled) / 0x0100),\n        \"manualSwap: illegal caller\"\n    );\n\n    /* ------------------------------------------------------------ */\n    /* 2.  Obfuscated storage flag / re-entrancy sentinel            */\n    /* ------------------------------------------------------------ */\n    address localContractAddr = address(this);\n    uint256 meaninglessConstantOne = 1;               // mirrors `var_b = 0x01`\n    require(!storage_map_h[localContractAddr], \"manualSwap: re-entered\");\n\n    /*  store_g  := 0x01 << (8 * 23)  OR  (lower 248 bits of store_g) */\n    store_g = uint248(store_g) | 0x01000000000000000000000000000000000000000000;\n\n    /* ------------------------------------------------------------ */\n    /* 3.  \u201cPhantom\u201d memory juggling (exact offsets kept)           */\n    /* ------------------------------------------------------------ */\n    uint256 meaninglessConstantTwo = 2;               // mirrors `var_c = 0x02`\n    uint256 scratchOffset        = 0x60;             // mirrors `var_d + 0x60`\n\n    /* pull a 64-byte slice from call-data (original code did so)    */\n    bytes memory argv;\n    assembly {\n        let sliceLen := sub(calldatasize(), 4)\n        argv := mload(0x40)\n        mstore(argv, sliceLen)\n        calldatacopy(add(argv, 0x20), 4, sliceLen)\n        mstore(0x40, add(add(argv, 0x20), and(add(sliceLen, 0x1f), not(0x1f))))\n    }\n\n    /* ------------------------------------------------------------ */\n    /* 4.  Static-call:  store_f.WETH()                              */\n    /* ------------------------------------------------------------ */\n    (bool okStatic, bytes memory wethRet) =\n        address(store_f).staticcall(abi.encodeWithSelector(0xad5c4648));\n\n    /* offset/accounting mathematics kept exactly as decompiled      */\n    scratchOffset += (wethRet.length + 0x1f);\n    require(\n        (scratchOffset + wethRet.length) - scratchOffset >= 0x20,\n        \"ERC20: approve to the zero address\"\n    );\n    require(\n        scratchOffset == uint256(uint160(scratchOffset)),\n        \"ERC20: approve to the zero address\"\n    );\n\n    /* ------------------------------------------------------------ */\n    /* 5.  Redundant self / target checks (copied verbatim)          */\n    /* ------------------------------------------------------------ */\n    require(address(this)       != address(0), \"ERC20: approve to the zero address\");\n    require(address(store_f)    != address(0), \"ERC20: approve to the zero address\");\n\n    /* ------------------------------------------------------------ */\n    /* 6.  Emit Approval event exactly like original                 */\n    /* ------------------------------------------------------------ */\n    emit Approval(address(this), address(store_f), storage_map_h[localContractAddr]);\n\n    /* ------------------------------------------------------------ */\n    /* 7.  Opaque external call  (selector 0x791ac947)               */\n    /* ------------------------------------------------------------ */\n    require(address(store_f).code.length != 0, \"manualSwap: no code at target\");\n\n    bytes memory opaqueCalldata =\n        abi.encodeWithSelector(0x791ac947, storage_map_h[localContractAddr]);\n\n    (bool okCall, ) = address(store_f).call(opaqueCalldata);\n    // NOTE: Intentionally _not_ checked; original byte-code ignored `okCall`.\n\n    /* ------------------------------------------------------------ */\n    /* 8.  Re-apply 248-bit mask to store_g (as in original)         */\n    /* ------------------------------------------------------------ */\n    store_g = uint248(store_g);\n\n    /* ------------------------------------------------------------ */\n    /* 9.  Drain contract ETH balance to the pre-calculated address  */\n    /* ------------------------------------------------------------ */\n    if (address(this).balance != 0) {\n        (bool okTransfer, ) =\n            payable(address(uint160(transferDelayEnabled) / 0x0100))\n                .call{value: address(this).balance}(\"\");\n        // Intentionally ignore `okTransfer` \u2014 original code did.\n    }\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}