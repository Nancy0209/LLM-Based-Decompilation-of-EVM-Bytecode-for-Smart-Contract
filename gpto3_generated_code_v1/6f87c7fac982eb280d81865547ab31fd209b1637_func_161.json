{
    "contract_address": "0x6f87c7FAc982eB280d81865547aB31fD209b1637",
    "heimdall_input": "function blacklistLiquidityPool(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(blacklistRenounced / 0x01000000)), \"Cannot blacklist token's v2 router or v2 pool.\");\n        require(!(!(address(arg0)) == 0xae8945d7f48c1f8fc32a117a6987efed6a664c1f), \"Cannot blacklist token's v2 router or v2 pool.\");\n        require(!(address(arg0) == 0xae8945d7f48c1f8fc32a117a6987efed6a664c1f), \"Cannot blacklist token's v2 router or v2 pool.\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x2e;\n        var_d = 0x43616e6e6f7420626c61636b6c69737420746f6b656e277320763220726f7574;\n        var_e = 0x6572206f7220763220706f6f6c2e000000000000000000000000000000000000;\n        address var_f = address(arg0);\n        var_g = 0x0b;\n        storage_map_c[var_f] = 0x01 | (uint248(storage_map_c[var_f]));\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x21;\n        var_d = 0x5465616d20686173207265766f6b656420626c61636b6c697374207269676874;\n        var_e = 0x7300000000000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function blacklistLiquidityPool(address liquidityPool) external {\n    // Decompiler artefact \u2013 kept to preserve exact logic\n    require(liquidityPool == address(liquidityPool));\n\n    // Ownership check\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    // Blacklist-renounce guard (matches decompiled arithmetic/bit logic)\n    uint256 renouncedFlag = blacklistRenounced ? 1 : 0;\n    require(\n        bytes1(renouncedFlag / 0x01000000) == 0x00,\n        \"Cannot blacklist token's v2 router or v2 pool.\"\n    );\n\n    // Cannot blacklist the token\u2019s v2 router or v2 pool (duplicate checks kept)\n    address constant V2_ROUTER_OR_POOL = 0xAE8945D7f48c1F8FC32A117a6987eFED6a664c1F;\n    require(liquidityPool != V2_ROUTER_OR_POOL, \"Cannot blacklist token's v2 router or v2 pool.\");\n    require(liquidityPool != V2_ROUTER_OR_POOL, \"Cannot blacklist token's v2 router or v2 pool.\");\n\n    // Mark the address as blacklisted (sets lowest bit)\n    _blacklist[liquidityPool] = uint256(uint248(_blacklist[liquidityPool]) | 0x01);\n\n    // var_g = 0x0b in decompiled code \u2013 no functional effect here\n}",
    "ground_truth": "function blacklistLiquidityPool(address lpAddress) public onlyOwner {\\n        require(!blacklistRenounced, \\\"Team has revoked blacklist rights\\\");\\n        require(\\n            lpAddress != address(uniswapV2Pair) &&\\n                lpAddress !=\\n                address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D),\\n            \\\"Cannot blacklist token's v2 router or v2 pool.\\\"\\n        );\\n        blacklisted[lpAddress] = true;\\n    }"
}