{
    "contract_address": "0x8a357F1146a32d8a2494bCdaB62452ed3498196a",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_p)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_f = 0x01000000000000000000000000000000000000000000 | (uint248(store_f));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_l).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!((var_d + ret0.length) - var_d) < 0x20);\n        require(var_d.length == (address(var_d.length)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this));\n        require(address(store_l));\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_l);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_l), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_o = var_d.length;\n        address var_p = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_l).code.length);\n        (bool success, bytes memory ret0) = address(store_l).Unresolved_791ac947(var_l); // call\n        store_f = uint248(store_f);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_p).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_p = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_p = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // 1. Access control \u2013 must match original `require(address(msg.sender) == address(store_p))`\n    require(msg.sender == store_p, \"Unauthorized caller\");\n\n    address thisContract = address(this);\n\n    // 2. Dummy flag variables kept to respect original side-effects (no real use)\n    uint8 _flagA = 0x01;\n    _flagA; // silence \u201cunused\u201d warning\n\n    // 3. Do not proceed if the contract address is already marked\n    require(!storage_map_b[thisContract], \"Already processed\");\n\n    // 4. Replicate the bit-wise OR performed on `store_f`\n    store_f = uint248(store_f) | 0x01000000000000000000000000000000000000000000;\n\n    uint8 _flagB = 0x02;\n    _flagB; // silence \u201cunused\u201d warning\n\n    // 5. Best-effort recreation of the external/static calls observed in the decompiled fragment\n    //    \u2013 return values are deliberately ignored to preserve behaviour parity.\n    store_l.staticcall(abi.encodeWithSelector(0xad5c4648)); // selector taken verbatim from fragment\n\n    // 6. Sanity check identical to `require(address(store_l).code.length)`\n    require(address(store_l).code.length > 0, \"Router not deployed\");\n\n    // 7. Emit the Approval event exactly as the fragment does\n    emit Approval(address(this), address(store_l), storage_map_b[thisContract]);\n\n    // 8. Low-level call with selector `0x791ac947\u2026` (taken verbatim)\n    bytes memory payload = abi.encodeWithSelector(\n        bytes4(0x791ac947),\n        storage_map_b[thisContract]\n    );\n    store_l.call(payload); // success flag intentionally unused\n\n    /*\n        9. The remaining portion of the decompiled output is an incoherent series\n           of memory/index checks that ultimately builds a revert string\n           (\u201cERC20: approve to the zero address / from the zero address\u201d).\n           To comply with the transformation rules, replace that block with a\n           single, explicit revert that preserves the always-fail behaviour.\n    */\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function manualSwap() external {\n        require(_msgSender()==_taxWallet);\n        uint256 tokenBalance=balanceOf(address(this));\n        if(tokenBalance>0){\n          swapTokensForEth(tokenBalance);\n        }\n        uint256 ethBalance=address(this).balance;\n        if(ethBalance>0){\n          sendETHToFee(ethBalance);\n        }\n    }"
}