{
    "contract_address": "0x8084E313691B80C63c8f1a68de1003a685376aCA",
    "heimdall_input": "function manualswap() public view {\n        require(address(msg.sender) == (address(store_p)));\n        require(address(msg.sender) == (address(store_q)));\n        address var_a = address(this);\n        var_b = 0x02;\n        require(!(storage_map_k[var_a] > store_m), \"Amount must be less than total reflections\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2a;\n        var_f = 0x416d6f756e74206d757374206265206c657373207468616e20746f74616c2072;\n        var_g = 0x65666c656374696f6e7300000000000000000000000000000000000000000000;\n        uint256 var_h = 0x40 + var_h;\n        var_c = 0x1a;\n        var_i = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x038d7ea4c68000, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        uint256 var_g = var_h.length;\n        uint256 var_k = 0;\n        var_l = var_m;\n        var_k = 0;\n        if (0x038d7ea4c68000) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_n = 0x12;\n            if (!store_m < (store_m / 0x038d7ea4c68000)) {\n            }\n        }\n    }",
    "llm_output": "function manualSwap() public view {\n    // Original access-control checks (caller must match both stored addresses)\n    require(msg.sender == _devWallet);\n    require(msg.sender == _marketingWallet);\n\n    // Unused flag preserved from the original bytecode\n    uint256 _unusedFlag = 0x02;\n\n    // Balance validation against total reflections\n    require(!(_reflectionBalances[address(this)] > _totalReflections), \"Amount must be less than total reflections\");\n\n    // Placeholders that existed in the original bytecode (no functional impact)\n    bytes4  _errSelector1       = 0x08c379a0;\n    uint256 _errOffset1         = 0x20;\n    uint256 _errLength1         = 0x2a;\n    bytes32 _errPart1           = 0x416d6f756e74206d757374206265206c657373207468616e20746f74616c2072;\n    bytes32 _errPart2           = 0x65666c656374696f6e7300000000000000000000000000000000000000000000;\n    uint256 _dummyPointer       = 0x40 + 0;\n\n    bytes1  _errSelector2       = 0x1a;\n    bytes32 _divisionByZeroMsg  = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n\n    // Constant require that is always true (retained from original logic)\n    require(0x038d7ea4c68000 != 0, string(abi.encodePacked(bytes32(0))));\n\n    // Additional placeholders mirroring decompiled structure\n    bytes4  _errSelector3       = 0x08c379a0;\n    uint256 _errOffset3         = 0x20;\n    uint256 _errLength3         = _dummyPointer;\n\n    uint256 _loopIndex          = 0;\n    uint256 _tempVar            = _dummyPointer;\n    _loopIndex                  = 0;\n\n    // Condition is always true but preserved intact\n    if (0x038d7ea4c68000 != 0) {\n        bytes4  _panicSelector = 0x4e487b71;\n        uint256 _panicCode     = 0x12;\n\n        // Empty conditional retained from decompiled bytecode\n        if (!(_totalReflections < (_totalReflections / 0x038d7ea4c68000))) {\n            // Intentionally left blank\n        }\n    }\n}",
    "ground_truth": "function manualswap() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }"
}