{
    "contract_address": "0x0cF6AF04E435c22D26884FAd0682E96BA150CBBb",
    "heimdall_input": "function removeCoal(address arg0) public payable {\n        require(arg0 == (address(arg0)));\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        address var_f = address(arg0);\n        var_g = 0x98;\n        storage_map_i[var_f] = (0 * 0x01) | (uint248(storage_map_i[var_f]));\n    }",
    "llm_output": "function removeCoal(address account) public payable {\n    // Identity check (always true in practice, preserved from decompiled code)\n    require(account == address(account));\n\n    // Owner-only access control\n    require(owner == msg.sender, \"Ownable: caller is not the owner\");\n\n    // Preserve original (no-op) storage assignment\n    addressData[account] = uint248(addressData[account]);\n}",
    "ground_truth": "function removeCoal(address account) public onlyOwner {\\r\\n        coal[account] = false;\\r\\n    }"
}