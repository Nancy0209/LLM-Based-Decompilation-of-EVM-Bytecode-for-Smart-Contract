{
    "contract_address": "0xeF684902f48bf76B9420474Aa213A8e217219674",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_h[var_a]);\n        store_g = 0x01000000000000000000000000000000000000000000 | (uint248(store_g));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_f), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_f);\n        address var_b = keccak256(var_a);\n        storage_map_h[var_a] = storage_map_h[var_a];\n        address var_k = storage_map_h[var_a];\n        emit Approval(address(this), address(store_f), storage_map_h[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_h[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_f).code.length);\n        (bool success, bytes memory ret0) = address(store_f).Unresolved_791ac947(var_l); // call\n        store_g = uint248(store_g);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    /*  \n        Original:  require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        The storage variable `transferDelayEnabled` is a packed word that keeps an\n        address right-shifted by 8 bits.  We reproduce the exact comparison.\n    */\n    require(msg.sender == address(uint160(transferDelayEnabled >> 8)));\n\n    address thisAddress = address(this);\n\n    /*  Original: var_b = 0x01; (unused except for the assignment) */\n    uint8 _unusedFlag = 0x01;\n\n    /*  Original: require(!storage_map_h[var_a]); */\n    require(!swapExecuted[thisAddress]);\n\n    /*  \n        Original: store_g = 0x01000000000000000000000000000000000000000000 | (uint248(store_g));\n        Simply ORs a high-order bit into the 248-bit status word.\n    */\n    someUint248 = uint248(\n        0x01000000000000000000000000000000000000000000 | uint248(someUint248)\n    );\n\n    /* ------------------------------------------------------------\n       The remainder of the function is largely inert bookkeeping\n       that existed in the decompiled bytecode.  All assignments and\n       external calls are preserved so that the behavioural semantics\n       stay identical.\n    ------------------------------------------------------------- */\n\n    uint8 anotherUnusedFlag = 0x02;          // var_c\n    uint256 memPtr          = 0x60;          // var_d initial value + 0x60\n\n    /*  Copy calldata[4:68] into memory (side-effect only) */\n    bytes memory calldataSlice = new bytes(0x40);\n    assembly {\n        calldatacopy(add(calldataSlice, 0x20), 0x04, 0x40)\n    }\n\n    /*  Panic constants that were materialised in the bytecode.  */\n    bytes4   panicSelector = 0x4e487b71;\n    uint256  panicCode     = 0x32;\n\n    /*  Static-call router.WETH()  (selector 0xad5c4648) */\n    (bool wethOk, bytes memory wethData) =\n        router.staticcall(abi.encodeWithSelector(0xad5c4648));\n    wethOk;\n\n    /*  Pointer arithmetic reproduced from the decompiler output. */\n    memPtr += (wethData.length + 0x1f);\n\n    require(\n        !(((memPtr + wethData.length) - memPtr) < 0x20),\n        \"ERC20: approve to the zero address\"\n    );\n    require(\n        memPtr == uint256(uint160(memPtr)),\n        \"ERC20: approve to the zero address\"\n    );\n\n    /*  Repeat of the panic constants (again, decompiler artefact). */\n    panicSelector = 0x4e487b71;\n    panicCode     = 0x32;\n\n    uint256 tmpAddressCast = uint256(uint160(memPtr));\n\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(router        != address(0), \"ERC20: approve to the zero address\");\n\n    /*  Hard-coded revert-string fragments kept verbatim. */\n    bytes4   errorSelector      = 0x08c379a0;\n    uint256  errorOffset        = 0x20;\n    uint256  errorStringLength  = 0x22;\n    bytes32  errorStringPart1   = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    bytes32  errorStringPart2   = 0x7373000000000000000000000000000000000000000000000000000000000000;\n\n    /* ------------------------------------------------------------\n       Storage slot touch & Approval event (unchanged logic)\n    ------------------------------------------------------------- */\n    swapExecuted[router] = swapExecuted[router];\n    emit Approval(thisAddress, router, swapExecuted[router] ? 1 : 0);\n\n    /*  Call into router with selector 0x791ac947 and a single argument. */\n    bytes4 SWAP_SELECTOR = 0x791ac947;\n    address swapParam    = router;       // keeps the original `var_l` semantics\n\n    require(router.code.length > 0);\n    (bool swapOk, ) = router.call(abi.encodeWithSelector(SWAP_SELECTOR, swapParam));\n    swapOk;\n\n    /*  Narrowing cast exactly as in the original code. */\n    someUint248 = uint248(someUint248);\n\n    /*  Original: require(!address(this).balance);   */\n    require(address(this).balance == 0);\n\n    /*  Forward (zero) balance to the extracted address. */\n    (bool ethSent, ) = address(uint160(transferDelayEnabled >> 8))\n        .call{value: address(this).balance}(\"\");\n    ethSent;\n\n    /*  Final set of unused revert-string fragments. */\n    errorSelector      = 0x08c379a0;\n    errorOffset        = 0x20;\n    errorStringLength  = 0x24;\n    errorStringPart1   = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    errorStringPart2   = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}