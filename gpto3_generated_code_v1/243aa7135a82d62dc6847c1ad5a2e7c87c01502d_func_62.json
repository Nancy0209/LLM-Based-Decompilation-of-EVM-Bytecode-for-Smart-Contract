{
    "contract_address": "0x243aA7135A82d62dc6847C1Ad5A2E7c87c01502d",
    "heimdall_input": "function updateLPWallet(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        emit lpWalletUpdated(address(arg0), address(lpWallet / 0x01));\n        lpWallet = (address(arg0) * 0x01) | (uint96(lpWallet));\n    }",
    "llm_output": "function updateLPWallet(address newLpWallet) external {\n    // Solidity\u2019s type-checking makes this tautological, but it exists in the original byte-code\n    require(newLpWallet == address(newLpWallet), \"Invalid address\");\n\n    // Owner authentication (division by 1 in the byte-code is a no-op)\n    require(owner == msg.sender, \"Ownable: caller is not the owner\");\n\n    // Emit the event with both the new and previous LP wallet addresses\n    emit lpWalletUpdated(newLpWallet, lpWallet);\n\n    /*\n        Original byte-code expression:\n            lpWallet = (address(arg0) * 0x01) | (uint96(lpWallet));\n        Multiplication by 1 is a no-op; the intent is to overwrite the\n        upper 160 bits with the new address while preserving the lower\n        96 bits of the existing lpWallet value.\n    */\n    lpWallet = address(\n        uint160(                     // cast back to address\n            (uint256(uint160(newLpWallet)) | uint96(uint160(lpWallet)))\n        )\n    );\n}",
    "ground_truth": "function updateLPWallet(address newLPWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit lpWalletUpdated(newLPWallet, lpWallet);\r\n        lpWallet = newLPWallet;\r\n    }"
}