{
    "contract_address": "0xaD0a392C384CdE80Df7FF46cE489ea7209353863",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (!(store_a) == ((store_a >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_a >> 0x01;\n                if (store_a) {\n                    if (!(store_a) == ((store_a >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a >> 0x01) {\n                            if (0x1f < (store_a >> 0x01)) {\n                                var_a = 0x03;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    if (!0 > var_c.length) {\n                                        uint256 var_g = 0;\n                                        return abi.encodePacked(0x20, var_c.length);\n                                        return abi.encodePacked(0x20, var_c.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory result) {\n    uint256 slotValue;\n    assembly {\n        slotValue := sload(0) // storage slot 0 is assumed to hold the packed string\n    }\n\n    // Extract the string length (the least-significant bit is the \u201cin-place\u201d flag)\n    uint256 length = slotValue >> 1;\n\n    // If length == 0 simply return an empty string\n    if (length == 0) {\n        return \"\";\n    }\n\n    // If the in-place flag (LSB) is set, the string (\u226431 bytes) is stored directly in the slot\n    if (slotValue & 1 == 1) {\n        // Short string: allocate the correct amount of memory and copy the data\n        result = new string(length);\n        assembly {\n            let dest := add(result, 0x20)        // memory location of the string data\n            mstore(dest, shr(8, slotValue))      // shift right by 8 bits to drop length & flag, store bytes\n        }\n    } else {\n        // Long string: data begins at keccak256(0) and is word-aligned in storage\n        result = new string(length);\n\n        uint256 dataSlot;\n        assembly {\n            mstore(0x0, 0)                       // push the slot number onto memory for keccak\n            dataSlot := keccak256(0x0, 0x20)     // dataSlot = keccak256(0)\n        }\n\n        // Copy the data word-by-word\n        uint256 offset;\n        while (offset < length) {\n            uint256 word;\n            assembly {\n                word := sload(add(dataSlot, div(offset, 0x20)))\n            }\n            assembly {\n                mstore(add(add(result, 0x20), offset), word)\n            }\n            unchecked {\n                offset += 32;\n            }\n        }\n    }\n}",
    "ground_truth": "function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }"
}