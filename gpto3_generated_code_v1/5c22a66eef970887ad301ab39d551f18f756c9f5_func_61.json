{
    "contract_address": "0x5c22A66eEf970887AD301Ab39D551F18f756c9f5",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_a >> 0x01;\n                if (store_a) {\n                    if (store_a - ((store_a >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a >> 0x01) {\n                            if (0x1f < (store_a >> 0x01)) {\n                                var_a = 0x03;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory) {\n    /* \n        The variable `packedNameData` is the raw 32-byte storage word that holds\n        the token\u2019s name using Solidity\u2019s packed-string encoding.\n    */\n    uint256 packedNameData;\n    assembly {\n        /* NOTE:\n           The original de-compiled bytecode loads the first storage slot when\n           reading the string.  \n           We therefore mirror that behaviour here by loading slot-0 directly.\n           DO NOT change this without auditing the original storage layout.\n        */\n        packedNameData := sload(0x00)\n    }\n\n    /* \n       The nested, highly specific checks below are reproduced verbatim from the\n       de-compiled output.  They should not be simplified or removed; doing so\n       could alter the contract\u2019s observable behaviour. \n    */\n    if (packedNameData != 0) {\n        if (\n            packedNameData -\n                (\n                    (packedNameData >> 1) < 0x20 ? uint256(1) : 0\n                ) !=\n            0\n        ) {\n            bytes32 errorSelector =\n                0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            uint256 errorCode = 0x22;\n\n            uint256 memoryOffset =\n                0x20 + (((0x1f + (packedNameData >> 1)) / 0x20) * 0x20);\n            uint256 extractedLength = packedNameData >> 1;\n\n            if (packedNameData != 0) {\n                if (\n                    packedNameData -\n                        (\n                            (packedNameData >> 1) < 0x20 ? uint256(1) : 0\n                        ) !=\n                    0\n                ) {\n                    errorSelector =\n                        0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    errorCode = 0x22;\n\n                    if ((packedNameData >> 1) == 0) {\n                        if (0x1f < (packedNameData >> 1)) {\n                            errorSelector = 0x03;\n                            uint256 tmpStorageValue = _storageMap[errorSelector];\n\n                            if (\n                                (0x20 + memoryOffset) + (packedNameData >> 1) >\n                                (0x20 + (0x20 + memoryOffset))\n                            ) {\n                                tmpStorageValue = 0x20;\n                                uint256 tmpLen = memoryOffset;\n                                uint256 unused = 0;\n\n                                /* \n                                   The original de-compiled path returns an ABI\n                                   encoded blob that is *not* a valid UTF-8 \n                                   string.  We reproduce that behaviour exactly.\n                                */\n                                return string(\n                                    abi.encodePacked(uint8(0x20), tmpLen)\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n       Failing all of the above branches, execution reaches an invalid Solidity\n       state (the EVM would revert due to a missing return).  To preserve the\n       original runtime semantics without introducing new logic, we explicitly\n       revert here.\n    */\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }"
}