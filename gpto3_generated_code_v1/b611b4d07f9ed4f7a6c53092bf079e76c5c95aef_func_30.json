{
    "contract_address": "0xb611B4D07f9ED4f7a6C53092BF079e76c5c95AEf",
    "heimdall_input": "function setExecutor(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender) == (address(store_a / 0x01)), \"Access denied\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x0d;\n        var_e = 0x4163636573732064656e69656400000000000000000000000000000000000000;\n        store_a = (address(arg0) * 0x01) | (uint96(store_a));\n    }",
    "llm_output": "function setExecutor(address newExecutor) public {\n    // Redundant but preserved check from original bytecode\n    require(newExecutor == address(newExecutor));\n\n    // Only the current executor (stored in the lower 160 bits) can call this\n    require(\n        msg.sender == address(uint160(executorAndFlags)),\n        \"Access denied\"\n    );\n\n    // Preserve the lower-order 96-bit flags and update the executor address\n    uint256 preservedFlags = uint256(uint96(executorAndFlags));\n    executorAndFlags = uint256(uint160(newExecutor)) | preservedFlags;\n}",
    "ground_truth": "function setExecutor(address _newExector) external {\r\n        require(msg.sender == _executor, \"Access denied\");\r\n        _executor = _newExector;\r\n    }"
}