{
    "contract_address": "0x6B329f435e8cc485Cfd5a922d080d22a3956A709",
    "heimdall_input": "function isBot(address arg0) public view returns (bool) {\n        require(arg0 == (address(arg0)));\n        address var_a = address(arg0);\n        var_b = 0x04;\n        address var_c = !(!bytes1(storage_map_b[var_a] / 0x01));\n        return !(!bytes1(storage_map_b[var_a] / 0x01));\n    }",
    "llm_output": "function isBot(address account) public view returns (bool) {\n    // This odd self-equality check exists in the original bytecode.\n    require(account == address(account));\n\n    uint8 unused = 0x04; // Corresponds to the original `var_b`, intentionally unused.\n\n    // Original logic: return !(!bytes1(storage_map_b[account] / 0x01));\n    bool flag = bytes1(uint8(botFlags[account] / 0x01)) != bytes1(0);\n    bool _temp = flag; // Mirrors the original `var_c` assignment.\n\n    return flag;\n}",
    "ground_truth": "function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }"
}