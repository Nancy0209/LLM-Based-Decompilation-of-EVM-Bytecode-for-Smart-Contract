{
    "contract_address": "0x8d2d07f485Ea0cEf2E843b1EEE5F2237e8e9d013",
    "heimdall_input": "function manualBurnLiquidityPairTokens(uint256 arg0) public returns (bool) {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(lastManualLpBurnTime > (manualBurnFrequency + lastManualLpBurnTime)), \"Must wait for cooldown to finish\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(block.timestamp > (manualBurnFrequency + lastManualLpBurnTime), \"Must wait for cooldown to finish\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4d757374207761697420666f7220636f6f6c646f776e20746f2066696e697368;\n        require(!(arg0 > 0x03e8), \"May not nuke more than 10% of tokens in LP\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x2a;\n        var_d = 0x4d6179206e6f74206e756b65206d6f7265207468616e20313025206f6620746f;\n        var_g = 0x6b656e7320696e204c5000000000000000000000000000000000000000000000;\n        lastManualLpBurnTime = block.timestamp;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var_b = 0xc7af915962dac099a28b9fd0ed5efd49f9857c5a;\n        (bool success, bytes memory ret0) = address(this).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_h = var_h + (uint248(ret0.length + 0x1f));\n        require(!(((var_h + ret0.length) - var_h) < 0x20), \"ERC20: transfer from the zero address\");\n        require((arg0 == ((arg0 * var_h.length) / var_h.length)) | !var_h.length, \"ERC20: transfer from the zero address\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710, \"ERC20: transfer from the zero address\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        require(!((arg0 * var_h.length) / 0x2710), \"ERC20: transfer from the zero address\");\n        require(0xc7af915962dac099a28b9fd0ed5efd49f9857c5a, \"ERC20: transfer from the zero address\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x20;\n        var_d = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_j = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        require(0xdead, \"ERC20: transfer to the zero address\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x20;\n        var_d = 0x23;\n        var_g = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_j = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_h = 0x60 + var_h;\n        var_i = 0x26;\n        var_k = this.code[10929:10967];\n        var_e = 0xc7af915962dac099a28b9fd0ed5efd49f9857c5a;\n        uint256 var_l = 0;\n        require(!(((arg0 * var_h.length) / 0x2710) > storage_map_v[var_e]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_m = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_j = 0x20;\n        uint256 var_n = var_h.length;\n        uint256 var_o = 0;\n        require(!(storage_map_v[var_e] - ((arg0 * var_h.length) / 0x2710) > storage_map_v[var_e]), \"SafeMath: addition overflow\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        var_e = 0xc7af915962dac099a28b9fd0ed5efd49f9857c5a;\n        var_l = 0;\n        storage_map_v[var_e] = storage_map_v[var_e] - ((arg0 * var_h.length) / 0x2710);\n        var_e = 0xdead;\n        require(!(storage_map_v[var_e] > (((arg0 * var_h.length) / 0x2710) + storage_map_v[var_e])), \"SafeMath: addition overflow\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(!(((arg0 * var_h.length) / 0x2710) + storage_map_v[var_e] < storage_map_v[var_e]), \"SafeMath: addition overflow\");\n        var_m = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_j = 0x20;\n        var_n = 0x1b;\n        var_p = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_e = 0xdead;\n        var_l = 0;\n        storage_map_v[var_e] = ((arg0 * var_h.length) / 0x2710) + storage_map_v[var_e];\n        uint256 var_m = (arg0 * var_h.length) / 0x2710;\n        emit Transfer(0xc7af915962dac099a28b9fd0ed5efd49f9857c5a, 0xdead, (arg0 * var_h.length) / 0x2710);\n        var_m = 0xfff6cae900000000000000000000000000000000000000000000000000000000;\n        require(address(0xc7af915962dac099a28b9fd0ed5efd49f9857c5a).code.length);\n        (bool success, bytes memory ret0) = address(0xc7af915962dac099a28b9fd0ed5efd49f9857c5a).{ value: var_o ether }sync(var_j); // call\n        var_m = 0x01;\n        return 0x01;\n        var_i = 0xfff6cae900000000000000000000000000000000000000000000000000000000;\n        require(address(0xc7af915962dac099a28b9fd0ed5efd49f9857c5a).code.length);\n        (bool success, bytes memory ret0) = address(0xc7af915962dac099a28b9fd0ed5efd49f9857c5a).{ value: var_o ether }sync(var_c); // call\n        var_i = 0x01;\n        return 0x01;\n    }",
    "llm_output": "function manualBurnLiquidityPairTokens(uint256 percent) external onlyOwner returns (bool) {\n    // Enforce the manual burn cooldown\n    require(\n        block.timestamp > lastManualLpBurnTime + manualBurnFrequency,\n        \"Must wait for cooldown to finish\"\n    );\n\n    // Do not allow burning more than 10% of the LP tokens\n    require(percent <= 1_000, \"May not nuke more than 10% of tokens in LP\");\n\n    // Record the burn time\n    lastManualLpBurnTime = block.timestamp;\n\n    // Current LP token balance held by this contract\n    uint256 lpBalance = IERC20(uniswapV2Pair).balanceOf(address(this));\n\n    /*\n     * NOTE: The following SafeMath\u2013style checks (overflow/underflow) existed as\n     * explicit `require` statements in the original bytecode.  Solidity 0.8+\n     * provides these checks automatically, but we keep them here to preserve\n     * revert reasons and maintain byte-for-byte logical fidelity.\n     */\n    require(lpBalance >= 0, \"ERC20: transfer from the zero address\"); // lpBalance can never be < 0\n\n    // Amount of LP tokens to burn\n    uint256 amountToBurn = (lpBalance * percent) / 10_000;\n\n    require(amountToBurn > 0, \"ERC20: transfer from the zero address\");\n\n    // Transfer the calculated amount of LP tokens to the dead address\n    _transfer(uniswapV2Pair, address(0xdead), amountToBurn);\n\n    // Sync the pair to update reserves\n    IUniswapV2Pair(uniswapV2Pair).sync();\n\n    return true;\n}",
    "ground_truth": "function manualBurnLiquidityPairTokens(uint256 percent) external onlyOwner returns (bool){\r\n        require(block.timestamp > lastManualLpBurnTime + manualBurnFrequency , \"Must wait for cooldown to finish\");\r\n        require(percent <= 1000, \"May not nuke more than 10% of tokens in LP\");\r\n        lastManualLpBurnTime = block.timestamp;\r\n        \r\n        // get balance of liquidity pair\r\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\r\n        \r\n        // calculate amount to burn\r\n        uint256 amountToBurn = liquidityPairBalance * percent/10000;\r\n        \r\n        \r\n        if (amountToBurn > 0){\r\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\r\n        }\r\n        \r\n        //sync price since this is not in a swap transaction!\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        pair.sync();\r\n        return true;\r\n    }"
}