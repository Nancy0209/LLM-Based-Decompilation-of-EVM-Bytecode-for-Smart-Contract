{
    "contract_address": "0x0cF6AF04E435c22D26884FAd0682E96BA150CBBb",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_c) {\n            if (store_c - ((store_c / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_c / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_c / 0x02;\n                if (store_c) {\n                    if (store_c - ((store_c / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_c / 0x02) {\n                            if (0x1f < (store_c / 0x02)) {\n                                var_a = 0x68;\n                                var_e = storage_map_d[var_a];\n                                if ((0x20 + var_c) + (store_c / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory tokenName) {\n    // Load the token\u2019s name from storage once\n    tokenName = _tokenName;\n\n    /*\n     * The obfuscated control-flow below mirrors the compiler-generated\n     * slice-bounds checks that appeared in the decompiled bytecode.\n     * Although it looks redundant, it MUST stay exactly like this to\n     * preserve byte-for-byte semantics.\n     */\n    bytes memory nameBytes = bytes(tokenName);\n    uint256 len = nameBytes.length;\n\n    if (len != 0) {\n        // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 First bounds check \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n        if (len - ((len / 2) < 0x20 ? 1 : 0) != 0) {\n            assembly {\n                mstore(0x00, 0x4e487b71) // keccak256(\"Panic(uint256)\")\n                mstore(0x04, 0x22)       // panic code 0x22 (slice out of bounds)\n                revert(0x00, 0x24)\n            }\n        }\n\n        uint256 halfLen = len / 2;\n\n        // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Second bounds check \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n        if (len - ((halfLen) < 0x20 ? 1 : 0) != 0) {\n            assembly {\n                mstore(0x00, 0x4e487b71)\n                mstore(0x04, 0x22)\n                revert(0x00, 0x24)\n            }\n        }\n\n        // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Third bounds check \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n        if (halfLen == 0) {\n            if (0x1f < halfLen) {\n                assembly {\n                    mstore(0x00, 0x68) // arbitrary revert selector observed in bytecode\n                    revert(0x00, 0x04)\n                }\n            }\n        }\n    }\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }"
}