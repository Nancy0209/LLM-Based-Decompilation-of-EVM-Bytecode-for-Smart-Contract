{
    "contract_address": "0x058959bb6d006a69D74B22B508eDED1C615E8FDB",
    "heimdall_input": "function allowance(address arg0, address arg1) public view returns (uint256) {\n        address var_a = address(arg0);\n        var_b = 0x05;\n        var_a = address(arg1);\n        address var_b = keccak256(var_a);\n        address var_c = storage_map_d[var_a];\n        return storage_map_d[var_a];\n    }",
    "llm_output": "pragma solidity ^0.8.0;\n\ncontract DecompiledContract {\n    // Represents `storage_map_d` from the decompiled byte-code\n    mapping(address => uint256) private _storageMapD;\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        // var_a = address(arg0);\n        address tempAddress = owner;\n\n        // var_b = 0x05;\n        uint256 _slotId = 0x05;\n\n        // var_a = address(arg1);\n        tempAddress = spender;\n\n        // address var_b = keccak256(var_a);\n        bytes32 _hashed = keccak256(abi.encodePacked(tempAddress));\n\n        // address var_c = storage_map_d[var_a];\n        uint256 storedValue = _storageMapD[tempAddress];\n\n        // return storage_map_d[var_a];\n        return storedValue;\n    }\n}",
    "ground_truth": "function allowance(address owner_, address spender) external view override returns (uint256) {\\r\\n      return _allowances[owner_][spender];\\r\\n    }"
}