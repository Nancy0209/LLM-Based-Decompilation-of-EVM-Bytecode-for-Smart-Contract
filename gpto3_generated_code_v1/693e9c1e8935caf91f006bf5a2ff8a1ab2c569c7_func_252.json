{
    "contract_address": "0x693E9C1e8935caf91F006bf5a2FF8a1aB2C569c7",
    "heimdall_input": "function getCirculatingSupply() public view {\n        address var_a = address(store_v);\n        var_b = 0x06;\n        var_a = address(store_w);\n        var_b = 0x06;\n        uint256 var_c = 0x40 + var_c;\n        var_d = 0x1e;\n        var_e = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(storage_map_k[var_a] > totalSupply), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_f = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        uint256 var_h = var_c.length;\n        uint256 var_i = 0;\n        var_j = var_k;\n        var_i = 0;\n        if (!(totalSupply - storage_map_k[var_a]) > totalSupply) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_l = 0x11;\n        }\n    }",
    "llm_output": "function getCirculatingSupply() public view returns (uint256) {\n    // Address whose balance is excluded from the circulating supply\n    address excludedAddress = _excludedAddress;     // storage slot `store_w`\n\n    uint256 excludedBalance = _balances[excludedAddress];\n\n    // First SafeMath-style check present in original bytecode\n    require(excludedBalance <= _totalSupply, \"SafeMath: subtraction overflow\");\n\n    // Circulating supply calculation\n    uint256 circulatingSupply = _totalSupply - excludedBalance;\n\n    // Second SafeMath-style check present in original bytecode\n    require(circulatingSupply <= _totalSupply, \"SafeMath: subtraction overflow\");\n\n    return circulatingSupply;\n}",
    "ground_truth": "function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }"
}