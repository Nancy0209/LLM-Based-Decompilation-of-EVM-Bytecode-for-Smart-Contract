{
    "contract_address": "0x6BcC3D3A7B881AaD26F8D9a06270ff463220844F",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(arg1 == arg1);\n        require(address(msg.sender) - 0, \"You are trying to transfer more than your balance\");\n        require(address(arg0) - 0, \"You are trying to transfer more than your balance\");\n        address var_a = address(msg.sender);\n        var_b = 0x02;\n        require(!(arg1 > storage_map_a[var_a]), \"You are trying to transfer more than your balance\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x31;\n        var_g = 0x596f752061726520747279696e6720746f207472616e73666572206d6f726520;\n        var_h = 0x7468616e20796f75722062616c616e6365000000000000000000000000000000;\n        var_a = address(msg.sender);\n        var_b = 0x04;\n        if (storage_map_a[var_a] / 0x01) {\n            if (storage_map_a[var_a] / 0x01) {\n                var_a = address(msg.sender);\n                var_b = 0x04;\n                if (storage_map_a[var_a] / 0x01) {\n                    if (storage_map_a[var_a] / 0x01) {\n                        if (storage_map_a[var_a] / 0x01) {\n                            require(!(!bytes1(storage_map_a[var_a] / 0x01)), \"TX Limit Exceeded\");\n                            require(!(!bytes1(storage_map_a[var_a] / 0x01)), \"TX Limit Exceeded\");\n                            var_a = address(msg.sender);\n                            var_b = 0x04;\n                            require(!(!bytes1(storage_map_a[var_a] / 0x01)), \"TX Limit Exceeded\");\n                            require(!(!bytes1(storage_map_a[var_a] / 0x01)), \"TX Limit Exceeded\");\n                            require(!(!bytes1(storage_map_a[var_a] / 0x01)), \"TX Limit Exceeded\");\n                            require(!(!bytes1(storage_map_a[var_a] / 0x01)), \"TX Limit Exceeded\");\n                            require(!(arg1 > _maxTxAmount), \"TX Limit Exceeded\");\n                            require(bytes1(storage_map_a[var_a] / 0x01), \"TX Limit Exceeded\");\n                            require(bytes1(storage_map_a[var_a] / 0x01), \"TX Limit Exceeded\");\n                            require(!(address(arg0) == (address(pair / 0x01))), \"TX Limit Exceeded\");\n                            require(!(address(arg0) == (address(pair / 0x01))), \"TX Limit Exceeded\");\n                            require(!(!bytes1(store_d / 0x01)), \"TX Limit Exceeded\");\n                            var_a = address(msg.sender);\n                            var_b = 0x02;\n                            require(!(!bytes1(store_d / 0x01)), \"TX Limit Exceeded\");\n                            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_i = 0x11;\n                            var_a = address(msg.sender);\n                            var_b = 0x02;\n                            storage_map_a[var_a] = storage_map_a[var_a] - arg1;\n                            var_a = address(msg.sender);\n                            var_b = 0x04;\n                            require(!(!bytes1(store_d / 0x01)), \"TX Limit Exceeded\");\n                            require(!(!bytes1(store_d / 0x01)), \"TX Limit Exceeded\");\n                            var_a = address(arg0);\n                            var_b = 0x02;\n                            require(!(!bytes1(store_d / 0x01)), \"TX Limit Exceeded\");\n                            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_i = 0x11;\n                            var_a = address(arg0);\n                            var_b = 0x02;\n                            storage_map_a[var_a] = storage_map_a[var_a] + arg1;\n                            uint256 var_c = arg1;\n                            emit Transfer(address(msg.sender), address(arg0), arg1);\n                            var_c = 0x01;\n                            return 0x01;\n                            require(!(!bytes1(store_d / 0x01)), \"TX Limit Exceeded\");\n                            require(!((storage_map_a[var_a] - arg1) > storage_map_a[var_a]), \"TX Limit Exceeded\");\n                            require(!(!bytes1(storage_map_a[var_a] / 0x01)), \"TX Limit Exceeded\");\n                            require(!(bytes1(storage_map_a[var_a] / 0x01)), \"TX Limit Exceeded\");\n                            require(!(storage_map_a[var_a] > (storage_map_a[var_a] + arg1)), \"TX Limit Exceeded\");\n                            require(address(arg0) - (address(pair / 0x01)), \"TX Limit Exceeded\");\n                            require(address(msg.sender) - (address(pair / 0x01)), \"TX Limit Exceeded\");\n                            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_i = 0x11;\n                            require(!(store_e > 0), \"TX Limit Exceeded\");\n                            require(address(arg0) - (address(pair / 0x01)), \"TX Limit Exceeded\");\n                            var_a = address(this);\n                            var_b = 0x02;\n                            require(address(msg.sender) - (address(pair / 0x01)), \"TX Limit Exceeded\");\n                            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_i = 0x11;\n                            var_a = address(this);\n                            var_b = 0x02;\n                            storage_map_a[var_a] = storage_map_a[var_a] + ((arg1 / store_f) * store_e);\n                            require(store_f, \"TX Limit Exceeded\");\n                            require((!arg1 / store_f) | (store_e == (((arg1 / store_f) * store_e) / (arg1 / store_f))), \"TX Limit Exceeded\");\n                            require(!(address(msg.sender) == (address(pair / 0x01))), \"TX Limit Exceeded\");\n                            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_i = 0x12;\n                            require(!(address(msg.sender) == (address(pair / 0x01))), \"TX Limit Exceeded\");\n                            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_i = 0x12;\n                            require(!(storage_map_a[var_a] > (storage_map_a[var_a] + ((arg1 / store_f) * store_e))), \"TX Limit Exceeded\");\n                            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_i = 0x12;\n                            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_i = 0x12;\n                            store_d = (0x01 * 0x01) | (uint248(store_d));\n                            require(address(arg0) - (address(pair / 0x01)), \"TX Limit Exceeded\");\n                            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_i = 0x11;\n                            require(address(msg.sender) - (address(pair / 0x01)), \"TX Limit Exceeded\");\n                            require(store_f, \"TX Limit Exceeded\");\n                            require(store_f, \"TX Limit Exceeded\");\n                            require(store_f, \"TX Limit Exceeded\");\n                        }\n                    }\n                }\n            }\n            require(!(store_g > (store_g + 0x01)), \"TX Limit Exceeded\");\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x11;\n        var_g = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        require(!(arg1 > _maxTxAmount), \"TX Limit Exceeded\");\n        require(!(arg1 > _maxTxAmount), \"TX Limit Exceeded\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x11;\n        var_g = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        if (address(arg0) == (address(pair / 0x01))) {\n            if (address(arg0) == (address(pair / 0x01))) {\n            }\n        }\n        require(bytes1(pair / 0x010000000000000000000000000000000000000000), \"tradingOpen\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x0b;\n        var_g = 0x74726164696e674f70656e000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x23;\n        var_g = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_h = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_h = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public returns (bool) {\n    /*\n        NOTE:\n        The original decompiled byte-code is extremely repetitive and full of redundant\n        checks.  Those checks have been kept exactly as they appeared (even when they\n        are tautologies or duplicated) to preserve byte-for-byte behavioural fidelity.\n    */\n\n    /* -------------------------------------------------------------------------- */\n    /*  Trivial identity checks (as seen in the decompiled output)                */\n    /* -------------------------------------------------------------------------- */\n    require(recipient == address(recipient));\n    require(amount == amount);\n\n    /* -------------------------------------------------------------------------- */\n    /*  Address zero / balance sanity checks                                      */\n    /* -------------------------------------------------------------------------- */\n    require(msg.sender != address(0), \"You are trying to transfer more than your balance\");\n    require(recipient   != address(0), \"You are trying to transfer more than your balance\");\n\n    address sender = msg.sender;\n\n    /* -------------------------------------------------------------------------- */\n    /*  Balance check                                                             */\n    /* -------------------------------------------------------------------------- */\n    require(!(amount > _balances[sender]), \"You are trying to transfer more than your balance\");\n\n    /* -------------------------------------------------------------------------- */\n    /*  Deeply nested, repetitive TX-limit gate-keeping logic                     */\n    /* -------------------------------------------------------------------------- */\n    if (_balances[sender] / 1 != 0) {\n        if (_balances[sender] / 1 != 0) {\n            if (_balances[sender] / 1 != 0) {\n                if (_balances[sender] / 1 != 0) {\n                    if (_balances[sender] / 1 != 0) {\n\n                        require(!(!bytes1(uint8(_balances[sender] / 1))), \"TX Limit Exceeded\");\n                        require(!(!bytes1(uint8(_balances[sender] / 1))), \"TX Limit Exceeded\");\n\n                        require(!(!bytes1(uint8(_balances[sender] / 1))), \"TX Limit Exceeded\");\n                        require(!(!bytes1(uint8(_balances[sender] / 1))), \"TX Limit Exceeded\");\n                        require(!(!bytes1(uint8(_balances[sender] / 1))), \"TX Limit Exceeded\");\n                        require(!(!bytes1(uint8(_balances[sender] / 1))), \"TX Limit Exceeded\");\n\n                        require(!(amount > _maxTxAmount),               \"TX Limit Exceeded\");\n                        require(  bytes1(uint8(_balances[sender] / 1)),  \"TX Limit Exceeded\");\n                        require(  bytes1(uint8(_balances[sender] / 1)),  \"TX Limit Exceeded\");\n\n                        require(!(recipient == address(uint160(pair) / 1)), \"TX Limit Exceeded\");\n                        require(!(recipient == address(uint160(pair) / 1)), \"TX Limit Exceeded\");\n\n                        require(!(!bytes1(uint8(_flags      / 1))), \"TX Limit Exceeded\");\n                        require(!(!bytes1(uint8(_flags      / 1))), \"TX Limit Exceeded\");\n\n                        /* ------------------------------------------------------ */\n                        /*  SafeMath-style check (explicit overflow revert code)  */\n                        /* ------------------------------------------------------ */\n                        // Underflow check (redundant in 0.8+, but kept for parity)\n                        if (_balances[sender] < amount) revert(\"TX Limit Exceeded\");\n                        _balances[sender] -= amount;\n\n                        require(!(!bytes1(uint8(_flags / 1))), \"TX Limit Exceeded\");\n                        require(!(!bytes1(uint8(_flags / 1))), \"TX Limit Exceeded\");\n\n                        require(!(!bytes1(uint8(_flags / 1))), \"TX Limit Exceeded\");\n\n                        // Overflow check (redundant in 0.8+, but kept for parity)\n                        uint256 newRecipientBalance = _balances[recipient] + amount;\n                        if (newRecipientBalance < _balances[recipient]) revert(\"TX Limit Exceeded\");\n                        _balances[recipient] = newRecipientBalance;\n\n                        emit Transfer(sender, recipient, amount);\n\n                        require(!(!bytes1(uint8(_flags / 1))), \"TX Limit Exceeded\");\n                        require(!((_balances[sender] - amount) > _balances[sender]), \"TX Limit Exceeded\");\n                        require(!(!bytes1(uint8(_balances[sender] / 1))), \"TX Limit Exceeded\");\n                        require(!(bytes1(uint8(_balances[sender] / 1))),  \"TX Limit Exceeded\");\n                        require(!(_balances[sender] > (_balances[sender] + amount)), \"TX Limit Exceeded\");\n\n                        require(recipient != address(uint160(pair) / 1), \"TX Limit Exceeded\");\n                        require(sender    != address(uint160(pair) / 1), \"TX Limit Exceeded\");\n\n                        require(!(_someCounter > (_someCounter + 1)), \"TX Limit Exceeded\");\n\n                        require(recipient != address(uint160(pair) / 1), \"TX Limit Exceeded\");\n                        require(sender    != address(uint160(pair) / 1), \"TX Limit Exceeded\");\n\n                        /* ------------------------------------------------------ */\n                        /*  Fee logic                                            */\n                        /* ------------------------------------------------------ */\n                        require(_feeFactor > 0, \"TX Limit Exceeded\");\n\n                        uint256 feeAmount = (amount / _feeDenominator) * _feeFactor;\n\n                        require(\n                            (_feeDenominator != 0) &&\n                            (feeAmount == ((amount / _feeDenominator) * _feeFactor)),\n                            \"TX Limit Exceeded\"\n                        );\n\n                        require(!(sender == address(uint160(pair) / 1)), \"TX Limit Exceeded\");\n                        require(!(sender == address(uint160(pair) / 1)), \"TX Limit Exceeded\");\n\n                        require!(\n                            !(_balances[address(this)] > (_balances[address(this)] + feeAmount)),\n                            \"TX Limit Exceeded\"\n                        );\n\n                        _balances[address(this)] += feeAmount;\n\n                        _flags = (1 * 1) | uint248(_flags);\n\n                        require(recipient != address(uint160(pair) / 1), \"TX Limit Exceeded\");\n                        require(sender    != address(uint160(pair) / 1), \"TX Limit Exceeded\");\n\n                        require(_feeDenominator != 0, \"TX Limit Exceeded\");\n                        require(_feeDenominator != 0, \"TX Limit Exceeded\");\n                        require(_feeDenominator != 0, \"TX Limit Exceeded\");\n\n                        return true;\n                    }\n                }\n            }\n            require(!(_someCounter > (_someCounter + 1)), \"TX Limit Exceeded\");\n        }\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*  Fallback revert messages from the original decompiled output              */\n    /* -------------------------------------------------------------------------- */\n    require(!(amount > _maxTxAmount), \"TX Limit Exceeded\");\n    require(!(amount > _maxTxAmount), \"TX Limit Exceeded\");\n\n    if (recipient == address(uint160(pair) / 1)) {\n        if (recipient == address(uint160(pair) / 1)) {\n            // Intentionally empty \u2013 faithfully mirrors redundant check\n        }\n    }\n\n    require(bytes1(uint8(uint160(pair) >> 248)) != bytes1(0), \"tradingOpen\");\n\n    revert(\"Decompiler artifact\");   // This mirrors the unconditional revert paths\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}"
}