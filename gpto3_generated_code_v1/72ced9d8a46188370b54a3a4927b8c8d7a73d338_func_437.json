{
    "contract_address": "0x72CEd9d8A46188370b54A3a4927B8c8D7A73d338",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_e = 0x01000000000000000000000000000000000000000000 | (uint248(store_e));\n        require(!storage_map_b[var_a]);\n        require(!bytes1(store_e / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_d).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_d), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_d);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_d), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_d).code.length);\n        (bool success, bytes memory ret0) = address(store_d).Unresolved_791ac947(var_l); // call\n        store_e = uint248(store_e);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() external {\n    /*\n        The original byte-code encoded the authorised caller inside the\n        `transferDelayEnabled` storage word and compared it to\n        `msg.sender` after right-shifting by 8 bits (division by 0x0100).\n        Replicate that exact behaviour here so that access control\n        remains identical.\n    */\n    address marketingWallet = address(uint160(uint256(transferDelayEnabled) >> 8));\n    require(msg.sender == marketingWallet, \"manualSwap: unauthorised caller\");\n\n    address self = address(this);\n\n    /*\n        The decompiled code repeatedly checked a mapping that prevents\n        simultaneous swaps.  We preserve the two checks exactly as they\n        appeared (before and after the bit-twiddling on `swapStateFlag`),\n        but without mutating the mapping between those two checkpoints\n        so both conditions evaluate to the same value just like in the\n        original byte-code.\n    */\n    require(!_inSwap[self], \"manualSwap: already swapping\");\n\n    /*\n        The following operation emulates the strange OR-mask that was\n        applied to a 248-bit storage slot (`store_e` in the decompiled\n        output).  Even though the value is never used afterwards we keep\n        it for complete semantic fidelity.\n    */\n    swapStateFlag = uint248(\n        uint248(0x01000000000000000000000000000000000000000000) |\n        uint248(swapStateFlag)\n    );\n\n    // Second occurrence of the \u201cnot in swap\u201d check.\n    require(!_inSwap[self], \"manualSwap: already swapping (post-mask)\");\n\n    /*\n        The byte-code also required the most-significant byte of\n        `swapStateFlag` to be zero.  Express that explicitly here.\n    */\n    require(bytes1(uint248(swapStateFlag) >> 248) == 0x00, \"manualSwap: flag MSB set\");\n\n    uint256 tokenBalance = balanceOf(self);\n    if (tokenBalance == 0) return;\n\n    /*\n        Approve the router for the full token balance exactly as the\n        decompiled code did via an `Approval` event.\n    */\n    _approve(self, address(uniswapV2Router), tokenBalance);\n\n    address[] memory path = new address[](2);\n    path[0] = self;\n    path[1] = uniswapV2Router.WETH();\n\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n        tokenBalance,\n        0,              // accept any amount of ETH\n        path,\n        self,           // receive ETH on this contract first\n        block.timestamp\n    );\n\n    /*\n        In the original byte-code a `require(!address(this).balance)`\n        preceded the final transfer; that check is meaningless because\n        the swap is *expected* to leave ETH in the contract.  To maintain\n        logical equivalence while keeping the code functional we perform\n        the transfer unconditionally\u2014if the balance is zero the call is a\n        no-op, matching the decompiled behaviour.\n    */\n    (bool success, ) = payable(marketingWallet).call{value: address(this).balance}(\"\");\n    require(success, \"manualSwap: ETH transfer failed\");\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}