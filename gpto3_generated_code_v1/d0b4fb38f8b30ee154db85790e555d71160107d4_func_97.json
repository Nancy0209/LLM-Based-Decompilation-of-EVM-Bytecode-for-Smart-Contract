{
    "contract_address": "0xd0B4fb38f8B30Ee154db85790e555d71160107d4",
    "heimdall_input": "function openTrading() public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(store_f / 0x010000000000000000000000000000000000000000)), \"trading is already open\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x17;\n        var_d = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n        address var_e = address(this);\n        var_f = 0x01;\n        var_a = 0xf305d71900000000000000000000000000000000000000000000000000000000;\n        address var_b = address(this);\n        address var_c = storage_map_m[var_e];\n        uint256 var_d = 0;\n        uint256 var_g = 0;\n        address var_h = address(owner);\n        uint256 var_i = block.timestamp;\n        (bool success, bytes memory ret0) = address(store_l).{ value: address(this).balance }Unresolved_f305d719(var_b); // call\n        uint256 var_j = var_j + (uint248(ret0.length + 0x1f));\n        require(!((var_j + ret0.length) - var_j) < 0x60);\n        var_k = 0x095ea7b300000000000000000000000000000000000000000000000000000000;\n        var_c = address(store_l);\n        var_d = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        (bool success, bytes memory ret0) = address(store_f).Unresolved_095ea7b3(var_c); // call\n        var_j = var_j + (uint248(ret0.length + 0x1f));\n        require(!((var_j + ret0.length) - var_j) < 0x20);\n        require(var_j.length == var_j.length);\n        store_f = 0x0100010000000000000000000000000000000000000000 | (uint240(store_f));\n        store_n = block.number;\n    }",
    "llm_output": "function openTrading() external {\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n    // trading not already open check (preserves original bit-level semantics)\n    require(\n        bytes1(_tradingFlags / 0x010000000000000000000000000000000000000000) == 0x00,\n        \"trading is already open\"\n    );\n\n    address token = address(this);\n\n    // Shadow-reads that existed in decompiled byte-code (no functional impact)\n    address _unusedPair = _liquidityPools[token];\n    uint256 _unusedZero1 = 0;\n    uint256 _unusedZero2 = 0;\n    address _unusedOwner = owner();\n    uint256 _unusedTimestamp = block.timestamp;\n\n    // Low-level call: addLiquidityETH (selector 0xf305d719) with only `token` param,\n    // value transfers the entire contract ETH balance \u2014 exactly as in the byte-code\n    (bool /*success1*/, bytes memory retAddLiquidity) =\n        _liquidityRouter.call{value: address(this).balance}(\n            abi.encodeWithSelector(0xf305d719, token)\n        );\n\n    // Size check reproduced verbatim from decompiled logic\n    require(!(retAddLiquidity.length < 0x60));\n\n    // Low-level call: approve (selector 0x095ea7b3) for router to spend unlimited tokens\n    (bool /*success2*/, bytes memory retApprove) = address(uint160(_tradingFlags)).call(\n        abi.encodeWithSelector(\n            0x095ea7b3,                // approve(address,uint256)\n            _liquidityRouter,          // spender\n            type(uint256).max          // amount\n        )\n    );\n\n    // Additional decompiler-artifact checks, preserved for fidelity\n    require(!(retApprove.length < 0x20));\n    require(retApprove.length == retApprove.length);\n\n    // Mark trading as open (bit-wise flag operation preserved exactly)\n    _tradingFlags =\n        0x0100010000000000000000000000000000000000000000 |\n        uint240(_tradingFlags);\n\n    _tradingStartBlock = block.number;\n}",
    "ground_truth": "function openTrading() external onlyOwner() {\n        require(!tradingOpen,\"trading is already open\");\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n        swapEnabled = true;\n        tradingOpen = true;\n        firstBlock = block.number;\n    }"
}