{
    "contract_address": "0x620d4B40A1c80D62129bb195e1701e501F9a5d3b",
    "heimdall_input": "function payRoyalty(uint256 arg0) public payable {\n        require(msg.value == arg0, \"Incorrect amount\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x10;\n        var_d = 0x496e636f727265637420616d6f756e7400000000000000000000000000000000;\n        require(!(arg0) & (uint32(ownerd) > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg0)));\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x64);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        (bool success, bytes memory ret0) = address(this).transfer((arg0 * (uint32(ownerd))) / 0x64);\n    }",
    "llm_output": "function payRoyalty(uint256 paymentAmount) external payable {\n    // Ensure the ETH sent matches the declared payment amount\n    require(msg.value == paymentAmount, \"Incorrect amount\");\n\n    // Maintain the original overflow-protection logic\n    require(\n        paymentAmount == 0 || royaltyPercentage <= type(uint256).max / paymentAmount,\n        \"Overflow\"\n    );\n\n    // Preserves the `require(0x64)` statement found in the bytecode\n    require(100 != 0, \"Invariant failed\");\n\n    // Compute and forward the royalty\n    uint256 royaltyValue = (paymentAmount * royaltyPercentage) / 100;\n    payable(address(this)).transfer(royaltyValue);\n}",
    "ground_truth": "function payRoyalty(uint256 _price) public payable {\\r\\n        require(msg.value == _price, \\\"Incorrect amount\\\");\\r\\n\\r\\n        uint256 royaltyAmount = (_price * royaltyPercentage) / 100; \\r\\n        payable(address(this)).transfer(royaltyAmount);\\r\\n    }"
}