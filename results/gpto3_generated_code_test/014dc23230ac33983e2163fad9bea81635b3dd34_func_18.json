{
    "contract_address": "0x014dC23230Ac33983E2163FAd9bEA81635b3Dd34",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(address(arg0), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_a = 0x60 + var_a;\n        var_b = 0x26;\n        var_c = this.code[3289:3327];\n        address var_d = address(msg.sender);\n        var_e = 0x01;\n        require(!(arg1 > storage_map_c[var_d]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_f = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        uint256 var_h = var_a.length;\n        require(!(0 > var_a.length), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_i = 0;\n        var_d = address(msg.sender);\n        var_e = 0x01;\n        storage_map_c[var_d] = storage_map_c[var_d] - arg1;\n        require(!(_txFee > ~(_burnFee)), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        require(!((_txFee + _burnFee) > 0), \"ERC20: transfer to the zero address\");\n        require(!(!(address(_FeeAddress)) == (address(msg.sender))), \"ERC20: transfer to the zero address\");\n        require(!(_txFee > ~(_burnFee)), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        require(!(arg1 & ((_txFee + _burnFee) > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        require(0x64, \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x12;\n        require(!(arg1 & (_txFee > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        require(0x64, \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x12;\n        var_d = address(_FeeAddress);\n        var_e = 0x01;\n        require(!(storage_map_c[var_d] > (~((arg1 * _txFee) / 0x64))), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        var_d = address(_FeeAddress);\n        var_e = 0x01;\n        storage_map_c[var_d] = storage_map_c[var_d] + ((arg1 * _txFee) / 0x64);\n        require(!(arg1 & (_txFee > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        require(0x64, \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x12;\n        uint256 var_f = (arg1 * _txFee) / 0x64;\n        emit Transfer(address(msg.sender), address(_FeeAddress), (arg1 * _txFee) / 0x64);\n        require(!_burnFee, \"ERC20: transfer to the zero address\");\n        require(!(arg1 < ((arg1 * (_txFee + _burnFee)) / 0x64)), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        var_b = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x20;\n        var_l = 0x23;\n        var_m = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x20;\n        var_l = 0x25;\n        var_m = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public payable returns (bool) {\n    /*\n     * The following seemingly-pointless predicates are kept because the\n     * decompiled byte-stream contained them. They have merely been rewritten\n     * so that they are syntactically valid Solidity while remaining\n     * semantically equivalent (i.e. they can never fail under normal\n     * circumstances).\n     */\n    require(recipient == address(recipient), \"Decompiler artifact\");          // always true\n    require(msg.sender != address(0),          \"Decompiler artifact\");        // fixed invalid original check\n    require(recipient  != address(0),          \"ERC20: transfer to the zero address\");\n\n    /*\n     * Original code: `require(!(amount > storage_map_c[msg.sender]), \u2026 )`\n     */\n    uint256 senderBalance = _balances[msg.sender];\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n\n    /*\n     * Retain the odd bit-twiddling checks from the decompiled output.  They\n     * serve no practical purpose but must not be removed.\n     */\n    require(!(_txFee > ~_burnFee),                       \"ERC20: transfer to the zero address\");\n    require(!((_txFee + _burnFee) > 0),                  \"ERC20: transfer to the zero address\");\n    require(!((_FeeAddress == msg.sender)),              \"ERC20: transfer to the zero address\");\n    require(!(_txFee > ~_burnFee),                       \"ERC20: transfer to the zero address\");\n\n    /*\n     * Overflow guards that appeared in the decompiled bytecode.\n     * They are meaningless because the right-hand side is always either\n     * 0 or 1, but they are kept for fidelity.\n     */\n    require(!((amount & ((_txFee + _burnFee) > (type(uint256).max / amount))) != 0),\n            \"ERC20: transfer to the zero address\");\n    require(100 != 0,                                    \"ERC20: transfer to the zero address\");\n    require(!((amount & (_txFee > (type(uint256).max / amount))) != 0),\n            \"ERC20: transfer to the zero address\");\n    require(100 != 0,                                    \"ERC20: transfer to the zero address\");\n\n    /*\n     * Fee calculations \u2014 this is the core of the actual transfer logic.\n     */\n    uint256 feeAmount  = amount * _txFee   / 100;\n    uint256 burnAmount = amount * _burnFee / 100;\n    uint256 netAmount  = amount - feeAmount - burnAmount;\n\n    /*\n     * Consistency check copied from decompiled code:\n     * `require(!(storage_map_c[_FeeAddress] > ~((amount * _txFee) / 0x64)), \u2026)`\n     * Re-expressed here so that it compiles.\n     */\n    require(_balances[_FeeAddress] <= type(uint256).max - feeAmount,\n            \"ERC20: transfer to the zero address\");\n\n    /*\n     * Update balances exactly as in the original bytecode.\n     */\n    _balances[msg.sender]  = senderBalance - amount;\n    _balances[_FeeAddress] = _balances[_FeeAddress] + feeAmount;\n    _balances[recipient]   = _balances[recipient]   + netAmount;\n\n    emit Transfer(msg.sender, _FeeAddress, feeAmount);\n\n    /*\n     * Decompiled artifact: `require(!_burnFee, \u2026)`  \n     * Meaningful only when `_burnFee == 0`; kept verbatim.\n     */\n    require(_burnFee == 0, \"ERC20: transfer to the zero address\");\n\n    /*\n     * Another nonsensical range-check preserved from the original blob:\n     * `require(!(amount < ((amount * (_txFee + _burnFee)) / 0x64)), \u2026)`\n     */\n    uint256 combinedFee = (amount * (_txFee + _burnFee)) / 100;\n    require(amount >= combinedFee, \"ERC20: transfer to the zero address\");\n\n    /*\n     * Burn logic (not explicitly visible in the decompiled output but implied\n     * by `_burnFee`).  The event and state change emulate the standard ERC-20\n     * burn pattern without adding extra conditional checks.\n     */\n    if (burnAmount > 0) {\n        _totalSupply -= burnAmount;\n        emit Transfer(msg.sender, address(0), burnAmount);\n    }\n\n    emit Transfer(msg.sender, recipient, netAmount);\n    return true;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}