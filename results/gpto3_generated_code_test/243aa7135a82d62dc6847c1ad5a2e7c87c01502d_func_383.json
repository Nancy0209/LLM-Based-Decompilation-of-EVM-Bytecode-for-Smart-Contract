{
    "contract_address": "0x243aA7135A82d62dc6847C1Ad5A2E7c87c01502d",
    "heimdall_input": "function updateMaxWalletAmount(uint256 arg0) public view {\n        require(arg0 == arg0);\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!totalSupply | (0x05 == ((totalSupply * 0x05) / totalSupply)));\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x03e8);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n    }",
    "llm_output": "function updateMaxWalletAmount(uint256 newMaxWallet) external {\n    /* \n       Equality self-check present in original byte-code.\n       It does nothing functionally but MUST remain for byte-code fidelity. \n    */\n    require(newMaxWallet == newMaxWallet, \"\");\n\n    /* \n       Owner verification exactly as observed in the decompiled logic.\n       Using owner() accessor preserves semantic intent without altering logic. \n    */\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    /* \n       Safe-math style overflow assertion from original byte-code \n       (totalSupply() * 5) / totalSupply() == 5  when totalSupply() != 0. \n    */\n    require(\n        totalSupply() == 0 || (totalSupply() * 5) / totalSupply() == 5,\n        \"SafeMath: multiplication overflow\"\n    );\n\n    /* \n       Always-true assertion kept for full logical fidelity.\n       Literal `1000` (0x03e8) was used in byte-code. \n    */\n    require(1000 != 0, \"\");\n\n    /* \n       Core state mutation: update the maximum wallet amount.\n       No additional checks are introduced or removed. \n    */\n    maxWallet = newMaxWallet;\n}",
    "ground_truth": "function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot set maxWallet lower than 0.5%\"\r\n        );\r\n        maxWallet = newNum * (10**18);\r\n    }"
}