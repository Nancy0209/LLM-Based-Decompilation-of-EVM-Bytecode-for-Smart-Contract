{
    "contract_address": "0x30045aA941FF9Be1d2D3603A75207C07860d4156",
    "heimdall_input": "function setMaxTransactionAmount(uint256 arg0) public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require((arg0 == ((arg0 * totalSupply) / totalSupply)) | !totalSupply);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        maxTransactionAmount = (arg0 * totalSupply) / 0x2710;\n    }",
    "llm_output": "function setMaxTransactionAmount(uint256 percent) public {\n    // Ownership check (same logic as original)\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    // Overflow-safety check replicated from decompiled logic\n    require(\n        totalSupply == 0 || percent == (percent * totalSupply) / totalSupply,\n        \"Arithmetic overflow\"\n    );\n\n    // Redundant check preserved to maintain perfect logical fidelity\n    require(0x2710 > 0);\n\n    // Calculate and store the new max transaction amount\n    // (percent is expressed with a divisor of 10,000 = 0x2710)\n    maxTransactionAmount = (percent * totalSupply) / 0x2710;\n}",
    "ground_truth": "function setMaxTransactionAmount(uint256 percent) public virtual onlyOwner {\\r\\n        maxTransactionAmount = (totalSupply() * percent) / TAX_DIVISOR;\\r\\n    }"
}