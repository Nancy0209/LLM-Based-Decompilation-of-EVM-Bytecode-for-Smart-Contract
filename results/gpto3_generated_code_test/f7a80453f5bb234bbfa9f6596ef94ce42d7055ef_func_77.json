{
    "contract_address": "0xf7A80453F5BB234Bbfa9f6596Ef94cE42D7055EF",
    "heimdall_input": "function startLottery(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(admin)), \"Only admin can call this function\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x21;\n        var_d = 0x4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f;\n        var_e = 0x6e00000000000000000000000000000000000000000000000000000000000000;\n        require(!(bytes1(lotteryStatus)), \"Lottery is already running\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1a;\n        var_d = 0x4c6f747465727920697320616c72656164792072756e6e696e67000000000000;\n        require(!(address(nftContract)), \"Prize from previous lottery not transferred\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x2b;\n        var_d = 0x5072697a652066726f6d2070726576696f7573206c6f7474657279206e6f7420;\n        var_e = 0x7472616e73666572726564000000000000000000000000000000000000000000;\n        var_a = 0x6352211e00000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = arg1;\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_6352211e(var_b); // staticcall\n        uint256 var_f = var_f + (uint248(ret0.length + 0x1f));\n        require(!(((var_f + ret0.length) - var_f) < 0x20), \"Admin does not own the specified NFT.\");\n        require(var_f.length == (address(var_f.length)), \"Admin does not own the specified NFT.\");\n        require(address(var_f.length) == (address(admin)), \"Admin does not own the specified NFT.\");\n        var_g = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x20;\n        var_d = 0x25;\n        var_e = 0x41646d696e20646f6573206e6f74206f776e2074686520737065636966696564;\n        var_h = 0x204e46542e000000000000000000000000000000000000000000000000000000;\n        nftContract = (address(arg0)) | (uint96(nftContract));\n        tokenId = arg1;\n        lotteryStatus = 0x01 | (uint248(lotteryStatus));\n        emit LotteryStarted();\n        address var_g = address(nftContract);\n        var_i = tokenId;\n        emit NFTPrizeSet(address(nftContract), tokenId);\n    }",
    "llm_output": "function startLottery(address _nftContract, uint256 _tokenId) external {\n    // Decompiler-artifact check (always true, preserved for logical fidelity)\n    require(_nftContract == address(_nftContract));\n\n    // Only admin can start a lottery\n    require(msg.sender == admin, \"Only admin can call this function\");\n\n    // The lottery must not already be running\n    require(!lotteryStatus, \"Lottery is already running\");\n\n    // Previous prize (if any) must have been transferred\n    require(nftContract == address(0), \"Prize from previous lottery not transferred\");\n\n    // Confirm that the admin owns the NFT that will be used as the prize\n    (bool /*success*/, bytes memory returnData) = _nftContract.staticcall(\n        abi.encodeWithSignature(\"ownerOf(uint256)\", _tokenId)\n    );\n    require(returnData.length >= 32, \"Admin does not own the specified NFT.\");\n    address owner = abi.decode(returnData, (address));\n    require(owner == admin, \"Admin does not own the specified NFT.\");\n\n    // Set up the new lottery\n    nftContract   = _nftContract;\n    tokenId       = _tokenId;\n    lotteryStatus = true;\n\n    emit LotteryStarted();\n    emit NFTPrizeSet(_nftContract, _tokenId);\n}",
    "ground_truth": "function startLottery(address _nftContract, uint256 _tokenId) public onlyAdmin {\\n        require(!lotteryStatus, \\\"Lottery is already running\\\"); //Lottery must not be running\\n        require(nftContract == address(0), \\\"Prize from previous lottery not transferred\\\");\\n        require(\\n            ERC721Base(_nftContract).ownerOf(_tokenId) == admin,\\n            \\\"Admin does not own the specified NFT.\\\"\\n        ); //Admin must own the NFT\\n\\n        nftContract = _nftContract;\\n        tokenId = _tokenId;\\n        lotteryStatus = true; //Set the lottery status to true\\n        emit LotteryStarted(); //Emit the event that the lottery has started\\n        emit NFTPrizeSet(nftContract, tokenId); \\n    }"
}