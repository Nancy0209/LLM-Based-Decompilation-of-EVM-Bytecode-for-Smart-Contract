{
    "contract_address": "0xe150ed6520Ef0F5269a82638f344541e22298E51",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_c = 0x01000000000000000000000000000000000000000000 | (uint248(store_c));\n        require(!storage_map_b[var_a]);\n        require(!bytes1(store_c / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_e).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_e), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_e);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_e), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_e).code.length);\n        (bool success, bytes memory ret0) = address(store_e).Unresolved_791ac947(var_l); // call\n        store_c = uint248(store_c);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() external {\n    /*  \n        Manual swap of all tokens accumulated in the contract for ETH.\n        Can only be triggered by the tax-wallet that is packed together\n        with the `transferDelayEnabled` flag in storage slot #X.\n    */\n\n    // ---------------------------------------------------------------------\n    // 1.  Only the tax-wallet may execute this function\n    // ---------------------------------------------------------------------\n    address taxWallet = address(uint160(uint256(_transferDelayPacked) >> 8));\n    require(msg.sender == taxWallet, \"Manual swap: caller is not tax wallet\");\n\n    // ---------------------------------------------------------------------\n    // 2.  Make sure the contract itself is not flagged as a bot\n    // ---------------------------------------------------------------------\n    require(!_isBot[address(this)], \"Manual swap: contract address black-listed\");\n\n    // ---------------------------------------------------------------------\n    // 3.  Prevent re-entrancy with the `_inSwap` flag that occupies the\n    //     lowest byte of the same packed storage word\n    // ---------------------------------------------------------------------\n    require(!_inSwap, \"Manual swap: already in swap\");\n    _inSwap = true;\n\n    // ---------------------------------------------------------------------\n    // 4.  Swap the entire token balance of the contract for ETH\n    // ---------------------------------------------------------------------\n    uint256 contractTokenBalance = balanceOf(address(this));\n    _approve(address(this), address(_router), contractTokenBalance);\n\n    address[] memory path = new address[](2);\n    path[0] = address(this);\n    path[1] = _router.WETH();\n\n    _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n        contractTokenBalance,\n        0,                      // accept any amount of ETH\n        path,\n        address(this),          // receive ETH in the contract\n        block.timestamp\n    );\n\n    // ---------------------------------------------------------------------\n    // 5.  Forward all ETH to the tax-wallet\n    // ---------------------------------------------------------------------\n    payable(taxWallet).transfer(address(this).balance);\n\n    // ---------------------------------------------------------------------\n    // 6.  Clear the in-swap flag\n    // ---------------------------------------------------------------------\n    _inSwap = false;\n\n    // ---------------------------------------------------------------------\n    // 7.  Emit a standard approval event (router allowance set to zero)\n    // ---------------------------------------------------------------------\n    emit Approval(address(this), address(_router), 0);\n}",
    "ground_truth": "function manualSwap() external {\\n        require(_msgSender()==_taxWallet);\\n        uint256 tokenBalance=balanceOf(address(this));\\n        if(tokenBalance>0){\\n          swapTokensForEth(tokenBalance);\\n        }\\n        uint256 ethBalance=address(this).balance;\\n        if(ethBalance>0){\\n          sendETHToFee(ethBalance);\\n        }\\n    }"
}