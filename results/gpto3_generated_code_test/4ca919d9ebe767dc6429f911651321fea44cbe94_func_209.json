{
    "contract_address": "0x4cA919d9EBE767dC6429f911651321feA44cbe94",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        address var_a = address(msg.sender);\n        var_b = 0x01;\n        require(!(storage_map_b[var_a] < arg1), \"balanceNotEnough\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x10;\n        var_f = 0x62616c616e63654e6f74456e6f75676800000000000000000000000000000000;\n        if (!_uniswapPair) {\n            var_a = address(msg.sender);\n            var_b = 0x01;\n            if (!(storage_map_b[var_a] - arg1) > storage_map_b[var_a]) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_g = 0x11;\n                storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n                var_a = address(arg0);\n                var_b = 0x01;\n                require(!bytes1(_uniswapPair));\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_g = 0x11;\n                storage_map_b[var_a] = arg1 + storage_map_b[var_a];\n                uint256 var_c = arg1;\n                emit Transfer(address(msg.sender), address(arg0), arg1);\n                var_c = 0x01;\n                return 0x01;\n                var_a = address(arg0);\n                var_b = 0x0b;\n                require(!(storage_map_b[var_a] - arg1) > storage_map_b[var_a]);\n                require(!storage_map_b[var_a] > (arg1 + storage_map_b[var_a]));\n                require(!bytes1(storage_map_b[var_a]));\n                require(bytes1(_uniswapPair));\n                require(bytes1(_uniswapPair));\n                var_a = address(msg.sender);\n                var_b = 0x08;\n                require(bytes1(_uniswapPair));\n                require(bytes1(_uniswapPair));\n                require(bytes1(storage_map_b[var_a]));\n                require(bytes1(storage_map_b[var_a]));\n                var_a = address(msg.sender);\n                var_b = 0x0b;\n                require(bytes1(storage_map_b[var_a]));\n                require(startTradeBlock > 0);\n                var_a = address(arg0);\n                var_b = 0x08;\n                require(!bytes1(storage_map_b[var_a]));\n                require(bytes1(storage_map_b[var_a]));\n                require(!bytes1(remainHolder));\n                require(!bytes1(remainHolder));\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_g = 0x12;\n                require(0x2710);\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_g = 0x11;\n                require(_buyCount + 0x01);\n            }\n        }\n        var_a = address(this);\n        var_b = 0x01;\n        require(!arg1 > storage_map_b[var_a]);\n        var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a] > store_q);\n        _uniswapPair = var_b | (uint248(_uniswapPair));\n        var_c = 0x02;\n        uint256 var_h = var_h + 0x60;\n        var_i = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x32;\n        address var_j = address(this);\n        var_k = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(_uniswapRouter).WETH(var_l); // staticcall\n        var_h = var_h + (uint248(ret0.length + 0x1f));\n        require(!((var_h + ret0.length) - var_h) < 0x20);\n        require(var_h.length == (address(var_h.length)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x32;\n        uint256 var_m = address(var_h.length);\n        var_n = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_o = storage_map_b[var_a];\n        uint256 var_p = 0;\n        var_q = 0xa0;\n        uint256 var_r = var_h.length;\n        address var_s = address(this);\n        uint256 var_t = block.timestamp;\n        require(address(_uniswapRouter).code.length);\n        (bool success, bytes memory ret0) = address(_uniswapRouter).{ value: var_p ether }Unresolved_791ac947(var_o); // call\n        require(!address(this).balance > 0x02c68af0bb140000);\n        require(0x0a);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        (bool success, bytes memory ret0) = address(mkt).transfer(address(this).balance / 0x0a);\n        (bool success, bytes memory ret0) = address(store_t).transfer(address(this).balance);\n        if (!_buyCount > store_i) {\n        }\n        if (!storage_map_b[var_a]) {\n            if (!storage_map_b[var_a]) {\n                if (!storage_map_b[var_a]) {\n                }\n            }\n        }\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public returns (bool) {\n    // make sure the sender has enough balance\n    require(_balances[msg.sender] >= amount, \"balanceNotEnough\");\n\n    bool takeFee = true;\n\n    // no fees for excluded addresses\n    if (_isExcludeFromFee[msg.sender] || _isExcludeFromFee[recipient]) {\n        takeFee = false;\n    }\n\n    uint256 feeAmount = 0;\n\n    if (takeFee) {\n        uint256 taxRate;\n\n        // buy  ------------------------------------------------------------\n        if (isMarketPair[msg.sender]) {\n            taxRate = _buyCount > _reduceBuyTaxAt ? _finalBuyTax : _initialBuyTax;\n            _buyCount += 1;\n        }\n        // sell ------------------------------------------------------------\n        else if (isMarketPair[recipient]) {\n            taxRate = _buyCount > _reduceSellTaxAt ? _finalSellTax : _initialSellTax;\n        }\n\n        if (taxRate > 0) {\n            feeAmount = (amount * taxRate) / 100;\n        }\n    }\n\n    uint256 transferAmount = amount - feeAmount;\n\n    // update balances\n    _balances[msg.sender] -= amount;\n    _balances[recipient] += transferAmount;\n\n    // keep the fees in the contract\n    if (feeAmount > 0) {\n        _balances[address(this)] += feeAmount;\n    }\n\n    emit Transfer(msg.sender, recipient, transferAmount);\n\n    // wallet max check ----------------------------------------------------\n    if (\n        remainHolder &&\n        !isMarketPair[recipient] &&\n        !_isExcludeFromFee[recipient]\n    ) {\n        require(\n            _balances[recipient] <= _walletMAX,\n            \"Max wallet exceeded\"\n        );\n    }\n\n    // swap & distribute ---------------------------------------------------\n    uint256 contractTokenBalance = _balances[address(this)];\n\n    if (\n        contractTokenBalance >= swapAtAmount &&\n        !inSwap &&\n        isMarketPair[recipient] &&\n        _buyCount > _preventSwapBefore\n    ) {\n        inSwap = true;\n\n        _swapTokensForETH(contractTokenBalance);\n\n        uint256 contractETHBalance = address(this).balance;\n        if (contractETHBalance > 0) {\n            _distributeFee(contractETHBalance);\n        }\n\n        inSwap = false;\n    }\n\n    return true;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }"
}