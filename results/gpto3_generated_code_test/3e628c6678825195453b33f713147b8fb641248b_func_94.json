{
    "contract_address": "0x3e628c6678825195453B33f713147B8fb641248b",
    "heimdall_input": "function buyBackTokens(uint256 arg0) public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(arg0 > 0x8ac7230489e80000), \"May not buy more than 10 ETH in a single buy to reduce sandwich attacks\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x47;\n        var_d = 0x4d6179206e6f7420627579206d6f7265207468616e2031302045544820696e20;\n        var_e = 0x612073696e676c652062757920746f207265647563652073616e647769636820;\n        var_f = 0x61747461636b7300000000000000000000000000000000000000000000000000;\n        var_a = 0x02;\n        uint256 var_g = var_g + 0x60;\n        var_h = msg.data[4:68];\n        var_i = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(dexRouter).WETH(var_e); // staticcall\n        var_g = var_g + (uint248(ret0.length + 0x1f));\n        require(!((var_g + ret0.length) - var_g) < 0x20);\n        require(var_g.length == (address(var_g.length)));\n        var_j = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x32;\n        uint256 var_l = address(var_g.length);\n        var_j = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x32;\n        address var_m = address(this);\n        var_n = 0xb6f9de9500000000000000000000000000000000000000000000000000000000;\n        uint256 var_f = 0;\n        var_o = 0x80;\n        uint256 var_p = var_g.length;\n        var_q = 0xdead;\n        uint256 var_r = block.timestamp;\n        require(address(dexRouter).code.length);\n        (bool success, bytes memory ret0) = address(dexRouter).{ value: arg0 }Unresolved_b6f9de95(var_f); // call\n        uint256 var_n = arg0;\n        emit BuyBackTriggered(arg0);\n    }",
    "llm_output": "function buyBackTokens(uint256 amountInWei) external onlyOwner {\n    require(\n        amountInWei <= 10 ether,\n        \"May not buy more than 10 ETH in a single buy to reduce sandwich attacks\"\n    );\n\n    address[] memory path = new address[](2);\n    path[0] = dexRouter.WETH();\n    path[1] = address(this);\n\n    dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountInWei}(\n        0,\n        path,\n        address(0xdead),\n        block.timestamp\n    );\n\n    emit BuyBackTriggered(amountInWei);\n}",
    "ground_truth": "function buyBackTokens(uint256 amountInWei) external onlyOwner {\r\n        require(amountInWei <= 10 ether, \"May not buy more than 10 ETH in a single buy to reduce sandwich attacks\");\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = dexRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountInWei}(\r\n            0, // accept any amount of Ethereum\r\n            path,\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n        emit BuyBackTriggered(amountInWei);\r\n    }"
}