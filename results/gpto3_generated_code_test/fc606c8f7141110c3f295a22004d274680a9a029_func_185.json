{
    "contract_address": "0xfc606C8F7141110c3f295a22004D274680A9A029",
    "heimdall_input": "function withdrawEth(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        (bool success, bytes memory ret0) = address(arg0).transfer(address(this).balance);\n        require(ret0.length == 0, \"Failed to send Ether\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x14;\n        var_d = 0x4661696c656420746f2073656e64204574686572000000000000000000000000;\n        uint256 var_e = var_e + (uint248(ret0.length + 0x3f));\n        uint256 var_a = ret0.length;\n        var_f = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_g = 0x14;\n        var_h = 0x4661696c656420746f2073656e64204574686572000000000000000000000000;\n    }",
    "llm_output": "function withdrawEth(address payable _to) external {\n    // Solidity-level tautological check retained from decompiled code\n    require(_to == address(_to));\n\n    // Ownership check (matches original logic)\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    // Send the entire contract balance to the specified address\n    (bool /* success */, bytes memory returnData) = _to.call{value: address(this).balance}(\"\");\n    \n    // Replicates original requirement that the call must not return data\n    require(returnData.length == 0, \"Failed to send Ether\");\n}",
    "ground_truth": "function withdrawEth(address payable _to) public onlyOwner {\r\n        (bool sent, bytes memory data) = _to.call{value: address(this).balance}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }"
}