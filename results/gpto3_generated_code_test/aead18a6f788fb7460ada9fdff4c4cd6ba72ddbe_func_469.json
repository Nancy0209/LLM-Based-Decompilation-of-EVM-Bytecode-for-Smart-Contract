{
    "contract_address": "0xaEAD18A6f788fb7460aDA9fDFf4C4Cd6Ba72dDBE",
    "heimdall_input": "function explicitOwnershipsOf(uint256[] arg0) public view returns (bytes memory) {\n        require(!arg0 > 0xffffffffffffffff);\n        require(!(arg0) > 0xffffffffffffffff);\n        uint256 var_a = (arg0);\n        uint256 var_b = 0x20 + (var_b + (arg0 << 0x05));\n        if (!(arg0) << 0x05) {\n            var_b = var_b + 0x80;\n            uint256 var_c = 0;\n            uint256 var_d = 0;\n            uint256 var_e = 0;\n            uint256 var_f = 0;\n            if (((0x20 + (arg0)) + (arg0 << 0x05) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) < 0x01) {\n                if (!((0x20 + (arg0)) + (arg0 << 0x05) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) < totalSupply) {\n                    uint256 var_g = ((0x20 + (arg0)) + (arg0 << 0x05) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0);\n                    var_h = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n                    if (storage_map_o[var_g]) {\n                        var_b = var_b + 0x80;\n                        uint256 var_i = 0;\n                        uint256 var_j = 0;\n                        uint256 var_k = 0;\n                        uint256 var_l = 0;\n                        var_g = ((0x20 + (arg0)) + (arg0 << 0x05) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0);\n                        var_h = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n                        var_b = var_b + 0x80;\n                        uint256 var_m = 0;\n                        uint256 var_n = 0;\n                        uint256 var_o = 0;\n                        uint256 var_p = 0;\n                        var_m = address(storage_map_o[var_g]);\n                        var_n = uint64(storage_map_o[var_g] >> 0xa0);\n                        var_o = !(!bytes1(storage_map_o[var_g]));\n                        var_p = storage_map_o[var_g] >> 0xe8;\n                        var_a = var_b;\n                        require(!(arg0) << 0x05);\n                        var_q = 0x20;\n                        uint256 var_r = var_b.length;\n                        return abi.encodePacked(0x20, var_b.length);\n                        var_g = ((0x20 + (arg0)) + (arg0 << 0x05) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n                        var_h = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n                        require(((0x20 + (arg0)) + (arg0 << 0x05) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) < 0x01);\n                        var_g = (((0x20 + (arg0)) + (arg0 << 0x05) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n                        var_h = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n                        require(!((0x20 + (arg0)) + (arg0 << 0x05) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) < totalSupply);\n                        var_g = ((((0x20 + (arg0)) + (arg0 << 0x05) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n                        var_h = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n                        require(!(arg0 << 0x05) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0);\n                    }\n                }\n            }\n        }\n        var_c = 0x20;\n        var_d = var_b.length;\n        return abi.encodePacked(0x20, var_b.length);\n    }",
    "llm_output": "function explicitOwnershipsOf(uint256[] calldata tokenIds)\n    public\n    view\n    returns (IERC721AUpgradeable.TokenOwnership[] memory)\n{\n    unchecked {\n        uint256 length = tokenIds.length;\n        IERC721AUpgradeable.TokenOwnership[] memory ownerships = new IERC721AUpgradeable.TokenOwnership[](length);\n\n        for (uint256 i = 0; i < length; ++i) {\n            ownerships[i] = explicitOwnershipOf(tokenIds[i]);\n        }\n\n        return ownerships;\n    }\n}",
    "ground_truth": "function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}"
}