{
    "contract_address": "0x634190EAD9c756794D33e5C4F052774Ab41EB189",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_h[var_a]);\n        store_g = 0x01000000000000000000000000000000000000000000 | (uint248(store_g));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_f), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_f);\n        address var_b = keccak256(var_a);\n        storage_map_h[var_a] = storage_map_h[var_a];\n        address var_k = storage_map_h[var_a];\n        emit Approval(address(this), address(store_f), storage_map_h[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_h[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_f).code.length);\n        (bool success, bytes memory ret0) = address(store_f).Unresolved_791ac947(var_l); // call\n        store_g = uint248(store_g);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() external {\n    // The decompiled byte-code shows that this function\n    // is restricted to a specific internally stored address.\n    // That address is the fee / tax wallet used throughout the contract.\n    require(msg.sender == _taxWallet, \"manualSwap: caller is not tax wallet\");\n\n    // The original code explicitly checked that the contract\n    // address itself is *not* marked as fee-exempt.\n    require(!_isExcludedFromFee[address(this)], \"manualSwap: contract is fee-exempt\");\n\n    // Toggle a high-order control-flag exactly as the byte-code did.\n    // (0x01 << 200)  ==  0x0100\u2026000  (25-byte constant seen in the dump)\n    _swapFlags = uint248(_swapFlags) | uint248(0x01000000000000000000000000000000000000000000);\n\n    // Approve the router to spend the entire token balance held by the contract.\n    // The decompiled fragment contained the standard ERC-20 zero-address checks.\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(address(_uniswapV2Router) != address(0), \"ERC20: approve to the zero address\");\n    _approve(address(this), address(_uniswapV2Router), balanceOf(address(this)));\n\n    // Build the swap path: this token -> WETH.\n    address[] memory path = new address[](2);\n    path[0] = address(this);\n    path[1] = _uniswapV2Router.WETH();\n\n    // Execute the exact-token-for-ETH swap, forwarding ETH to this contract.\n    _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n        balanceOf(address(this)),\n        0,              // accept any amount of ETH\n        path,\n        address(this),  // receive ETH here first\n        block.timestamp\n    );\n\n    // Forward all accumulated ETH to the tax wallet.\n    payable(_taxWallet).transfer(address(this).balance);\n}",
    "ground_truth": "function manualSwap() external {\\r\\n        require(_msgSender()==_taxWallet);\\r\\n        uint256 tokenBalance=balanceOf(address(this));\\r\\n        if(tokenBalance>0){\\r\\n          swapTokensForEth(tokenBalance);\\r\\n        }\\r\\n        uint256 ethBalance=address(this).balance;\\r\\n        if(ethBalance>0){\\r\\n          sendETHToFee(ethBalance);\\r\\n        }\\r\\n    }"
}