{
    "contract_address": "0xeE4121EC610aD03ad4b4b4151ccFB6999022Df86",
    "heimdall_input": "function GemAdjustPeakTxnBounds(uint256 arg0) public view {\n        require(arg0 == arg0);\n        require(address(_owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!totalSupply | (0x05 == ((totalSupply * 0x05) / totalSupply)));\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x03e8);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n    }",
    "llm_output": "function GemAdjustPeakTxnBounds(uint256 newNum) public view {\n    // No-op check preserved from decompiled byte-code\n    require(newNum == newNum);\n\n    // Ownership check (original code performed `_owner / 0x01` which resolves to `_owner`)\n    require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n\n    // Overflow safety/consistency check exactly as seen in the decompiled logic\n    uint256 supply = totalSupply();\n    require(supply == 0 || 5 == (supply * 5) / supply);\n\n    // Dummy require(0x03e8) from the original byte-code; `true` is functionally identical\n    require(true);\n}",
    "ground_truth": "function GemAdjustPeakTxnBounds(uint256 newNum) external onlyOwner {\\r\\n        require(\\r\\n            newNum >= ((totalSupply() * 5) / 1000) / 1e9,\\r\\n            \\\"Cannot set maxTxAmount lower than 0.5%\\\"\\r\\n        );\\r\\n        maxTxAmount = newNum * (10**9);\\r\\n    }"
}