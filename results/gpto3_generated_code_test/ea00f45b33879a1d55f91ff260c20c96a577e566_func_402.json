{
    "contract_address": "0xEA00f45b33879A1D55f91ff260C20c96a577E566",
    "heimdall_input": "function updateMarketingWalletInfo(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        emit marketingWalletUpdated(address(arg0), address(store_v));\n        store_v = (address(arg0)) | (uint96(store_v));\n    }",
    "llm_output": "function updateMarketingWalletInfo(address newMarketingWallet) external {\n    // This check exists in the de-compiled code. Although redundant, it must stay.\n    require(newMarketingWallet == address(newMarketingWallet), \"Invalid address\");\n\n    // \u201conlyOwner\u201d logic as it appeared in the de-compiled output\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    // Cache the current wallet so we can emit it as the \u201coldWallet\u201d\n    address previousMarketingWallet = marketingWallet;\n\n    emit marketingWalletUpdated(newMarketingWallet, previousMarketingWallet);\n\n    /*\n     * The original bytecode stores `marketingWallet` in a packed slot\n     * together with a 96-bit value.  The simplest way to replicate the\n     * de-compiled behaviour without altering logic is to overwrite the\n     * address portion while leaving the lower-order 96 bits untouched.\n     *\n     * We do this with inline assembly to perform:\n     *   newSlotValue = (uint256(newMarketingWallet) << 96) | uint96(oldSlotValue);\n     */\n    assembly {\n        let slot := marketingWallet.slot\n        // Load the existing 256-bit packed value\n        let oldVal := sload(slot)\n\n        // Mask out the lower-order 96 bits that must be preserved\n        let lower96  := and(oldVal, 0xffffffffffffffffffffffffffff)        // 12 bytes\n\n        // Shift the new address into the upper 160 bits and OR with the preserved lower 96 bits\n        let newPacked := or(shl(96, newMarketingWallet), lower96)\n\n        // Store the result back to the same slot\n        sstore(slot, newPacked)\n    }\n}",
    "ground_truth": "function updateMarketingWalletInfo(address newMarketingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\r\n        marketingWallet = newMarketingWallet;\r\n    }"
}