{
    "contract_address": "0x4c5CbB44F1F835E2BbE255d8dBFb91A364b0D36B",
    "heimdall_input": "function ownerOf(uint256 arg0) public view returns (address) {\n        uint256 var_a = 0x40 + var_a;\n        uint256 var_b = 0;\n        uint256 var_c = 0;\n        require(totalSupply > arg0, \"ERC721A: unable to determine the owner of token\");\n        require(arg0 < 0x06, \"ERC721A: unable to determine the owner of token\");\n        require(!((arg0 - 0x06) > arg0), \"ERC721A: unable to determine the owner of token\");\n        require(!(0x01 > ((arg0 - 0x06) + 0x01)), \"ERC721A: unable to determine the owner of token\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_e = 0x11;\n        require(arg0 < ((arg0 - 0x06) + 0x01), \"ERC721A: unable to determine the owner of token\");\n        uint256 var_d = arg0;\n        var_f = 0x03;\n        var_a = 0x40 + var_a;\n        uint256 var_g = address(storage_map_s[var_d]);\n        uint256 var_h = uint64(storage_map_s[var_d] / 0x010000000000000000000000000000000000000000);\n        require(!(address(storage_map_s[var_d])), \"ERC721A: unable to determine the owner of token\");\n        uint256 var_i = address(var_a.length);\n        return address(var_a.length);\n        require(arg0, \"ERC721A: unable to determine the owner of token\");\n        require((0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + arg0) < ((arg0 - 0x06) + 0x01), \"ERC721A: unable to determine the owner of token\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_j = 0x20;\n        var_k = 0x2f;\n        var_l = 0x455243373231413a20756e61626c6520746f2064657465726d696e6520746865;\n        var_m = 0x206f776e6572206f6620746f6b656e0000000000000000000000000000000000;\n        var_d = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + arg0;\n        var_f = 0x03;\n        var_a = 0x40 + var_a;\n        var_i = address(storage_map_s[var_d]);\n        uint256 var_n = uint64(storage_map_s[var_d] / 0x010000000000000000000000000000000000000000);\n        require(!(address(storage_map_s[var_d])), \"ERC721A: unable to determine the owner of token\");\n        uint256 var_o = address(var_a.length);\n        return address(var_a.length);\n        require(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + arg0, \"ERC721A: unable to determine the owner of token\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_e = 0x11;\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_e = 0x11;\n        var_g = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        var_q = 0x2f;\n        var_j = 0x455243373231413a20756e61626c6520746f2064657465726d696e6520746865;\n        var_k = 0x206f776e6572206f6620746f6b656e0000000000000000000000000000000000;\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_e = 0x11;\n        var_g = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        var_q = 0x2a;\n        var_j = 0x455243373231413a206f776e657220717565727920666f72206e6f6e65786973;\n        var_k = 0x74656e7420746f6b656e00000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function ownerOf(uint256 tokenId) public view returns (address) {\n    // Make sure the token exists.\n    require(totalSupply() > tokenId, \"ERC721A: owner query for nonexistent token\");\n\n    // Start at the token ID and iterate backwards until we find a packed\n    // ownership record that contains a non-zero owner address.\n    uint256 currentId = tokenId;\n\n    unchecked {\n        while (true) {\n            uint256 packedOwnership = _packedOwnerships[currentId];\n\n            // If the packed data contains a non-zero address, we've found the owner.\n            if (packedOwnership & _BITMASK_ADDRESS != 0) {\n                return address(uint160(packedOwnership));\n            }\n\n            // Otherwise step backwards. This can never underflow because\n            // `currentId` is known to be > 0 whenever we enter the loop.\n            currentId--;\n        }\n    }\n\n    // Execution should be impossible to reach, but keep it for completeness.\n    revert(\"ERC721A: unable to determine the owner of token\");\n}",
    "ground_truth": "function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n    return ownershipOf(tokenId).addr;\\r\\n  }"
}