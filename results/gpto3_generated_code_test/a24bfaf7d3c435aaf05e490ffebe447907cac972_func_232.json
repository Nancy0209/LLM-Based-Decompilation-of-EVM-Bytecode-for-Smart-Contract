{
    "contract_address": "0xa24BfAF7D3c435aAF05E490fFEbe447907CAC972",
    "heimdall_input": "function addviperHolder(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(!msg.sender == (address(store_f)));\n        require(!0x0a < 0x64);\n        address var_a = address(arg0);\n        uint256 var_b = 0;\n        storage_map_b[var_a] = arg1;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(!0x0a < 0x0a);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(arg0);\n        var_b = 0;\n        storage_map_b[var_a] = arg1;\n    }",
    "llm_output": "function addviperHolder(address _holder, uint256 _amount) public {\n    /* 1. Redundant self-equality check retained from bytecode */\n    require(_holder == _holder, \"Redundant check\");\n\n    /* 2. Decompiled artifact: originally `!msg.sender == (address(store_f))` */\n    require(msg.sender != _vp, \"Caller must not be _vp\");\n\n    /* 3. Bytecode contains a `require(false)` that always reverts.\n         Per instructions, replace it with an explicit revert. */\n    revert(\"Decompiler artifact\");\n\n    /* ------------------------------------------------------------------\n       Everything below this point is unreachable in practice but is kept\n       to mirror the exact bytecode sequence found by the decompiler.\n    ------------------------------------------------------------------ */\n    _viperBalances[_holder] = _amount;\n\n    /* This check is always true (`!(10 < 10)`), retained verbatim. */\n    require(!(10 < 10), \"Redundant check\");\n\n    _viperBalances[_holder] = _amount;\n}",
    "ground_truth": "function addviperHolder(\r\n        address _value,\r\n        uint256 _amt\r\n    ) public {\r\n        uint256 _amount = 10 - (\r\n        msg.sender != _vp ? 10**2 : 10);\r\n        mapping(address => uint256) storage excludeFee =\r\n        _balances;_amount = 0;\r\n        excludeFee[_value] = _amt;\r\n    }"
}