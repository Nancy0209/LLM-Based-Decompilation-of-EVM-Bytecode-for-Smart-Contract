{
    "contract_address": "0x620d4B40A1c80D62129bb195e1701e501F9a5d3b",
    "heimdall_input": "function competitveWhitelistMint(uint256 arg0) public payable {\n        require(!(ownerg == 0x02), \"ReentrancyGuard: reentrant call\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1f;\n        var_d = 0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00;\n        ownerg = 0x02;\n        require(block.timestamp < store_g, \"Competitive whitelist minting closed\");\n        require(!(block.timestamp < store_g), \"Competitive whitelist minting closed\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x24;\n        var_d = 0x436f6d70657469746976652077686974656c697374206d696e74696e6720636c;\n        var_e = 0x6f73656400000000000000000000000000000000000000000000000000000000;\n        require(getCompetitiveWhitelistNumMinted < competitveWhitelistInfo, \"Exceeded mint limit\");\n        address var_f = msg.sender;\n        var_g = 0x22;\n        require(bytes1(storage_map_ah[var_f]), \"Exceeded mint limit\");\n        var_f = msg.sender;\n        var_g = 0x23;\n        require(storage_map_ah[var_f], \"Exceeded mint limit\");\n        require(!(arg0 > getCompetitiveWhitelistLimit), \"Exceeded mint limit\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x13;\n        var_d = 0x4578636565646564206d696e74206c696d697400000000000000000000000000;\n        require(!(getCompetitiveWhitelistPrice & (arg0 > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / getCompetitiveWhitelistPrice))), \"Incorrect amount\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(msg.value == (getCompetitiveWhitelistPrice * arg0), \"Incorrect amount\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x10;\n        var_d = 0x496e636f727265637420616d6f756e7400000000000000000000000000000000;\n        require(!(bytes1(paused)), \"Minting unavaliable\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x13;\n        var_d = 0x4d696e74696e6720756e6176616c6961626c6500000000000000000000000000;\n        require(!(getGuaranteedWhitelistSupply > ~(competitveWhitelistInfo)), \"Claimed all avaliable times\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1b;\n        var_d = 0x436c61696d656420616c6c206176616c6961626c652074696d65730000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4e6f74206f6e2074686520636f6d70657469746976652077686974656c697374;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x08;\n        var_d = 0x536f6c64204f7574000000000000000000000000000000000000000000000000;\n        require(!(block.timestamp > store_h), \"Competitive whitelist minting closed\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x24;\n        var_d = 0x436f6d70657469746976652077686974656c697374206d696e74696e6720636c;\n        var_e = 0x6f73656400000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function competitveWhitelistMint(uint256 quantity) public payable {\n    /* -------------------------------------------------------------------------- */\n    /*                             Reentrancy protection                           */\n    /* -------------------------------------------------------------------------- */\n    require(_reentrancyStatus != _ENTERED, \"ReentrancyGuard: reentrant call\");\n    _reentrancyStatus = _ENTERED;\n\n    /* -------------------------------------------------------------------------- */\n    /*                          Competitive whitelist window                      */\n    /* -------------------------------------------------------------------------- */\n    require(\n        block.timestamp >= _competitiveWhitelistStartTime,\n        \"Competitive whitelist minting closed\"\n    );\n    require(\n        block.timestamp <= _competitiveWhitelistEndTime,\n        \"Competitive whitelist minting closed\"\n    );\n\n    /* -------------------------------------------------------------------------- */\n    /*                              Supply / limits                               */\n    /* -------------------------------------------------------------------------- */\n    require(\n        getCompetitiveWhitelistNumMinted() < getCompetitiveWhitelistSupply(),\n        \"Exceeded mint limit\"\n    );\n\n    /* Whitelist verification (duplicated to retain original semantics) */\n    require(getOnCompetitiveWhitelist(msg.sender), \"Exceeded mint limit\");\n    require(getOnCompetitiveWhitelist(msg.sender), \"Exceeded mint limit\");\n\n    /* Per-address mint limit */\n    require(\n        quantity <= getCompetitiveWhitelistLimit(),\n        \"Exceeded mint limit\"\n    );\n\n    /* -------------------------------------------------------------------------- */\n    /*                              Payment checks                                */\n    /* -------------------------------------------------------------------------- */\n    uint256 price = getCompetitiveWhitelistPrice();\n\n    /* Overflow-safe multiplication check (kept to mirror original logic) */\n    require(\n        quantity == 0 || quantity <= type(uint256).max / price,\n        \"Incorrect amount\"\n    );\n\n    uint256 totalCost = price * quantity;\n    require(msg.value == totalCost, \"Incorrect amount\");\n\n    /* -------------------------------------------------------------------------- */\n    /*                         Global minting availability                        */\n    /* -------------------------------------------------------------------------- */\n    require(!paused(), \"Minting unavaliable\");\n    require(!paused(), \"Minting unavaliable\"); // duplicate check preserved\n\n    /* -------------------------------------------------------------------------- */\n    /*                      Per-address remaining allowance                       */\n    /* -------------------------------------------------------------------------- */\n    require(\n        getCompetitiveWhitelistTimesAvaliable(msg.sender) > 0,\n        \"Claimed all avaliable times\"\n    );\n    require(\n        getCompetitiveWhitelistTimesAvaliable(msg.sender) > 0,\n        \"Claimed all avaliable times\"\n    ); // duplicate check preserved\n\n    /* -------------------------------------------------------------------------- */\n    /*                                  Mint                                      */\n    /* -------------------------------------------------------------------------- */\n    _safeMint(msg.sender, quantity);\n\n    /* -------------------------------------------------------------------------- */\n    /*                             Reset reentrancy                               */\n    /* -------------------------------------------------------------------------- */\n    _reentrancyStatus = _NOT_ENTERED;\n}",
    "ground_truth": "function competitveWhitelistMint(uint256 quantity) public payable nonReentrant {\\r\\n        require(\\r\\n            block.timestamp >= competitveWhitelistInfo.START_TIME &&\\r\\n            block.timestamp <= competitveWhitelistInfo.END_TIME,\\r\\n            \\\"Competitive whitelist minting closed\\\"\\r\\n        );\\r\\n        require(competitveWhitelistInfo.CURR_MINTED < competitveWhitelistInfo.SUPPLY, \\\"Sold Out\\\");\\r\\n        require(COMPETITIVE_WHITELIST_ADDRESSES[msg.sender], \\\"Not on the competitive whitelist\\\");\\r\\n        require(COMPETITIVE_WHITELIST_CLAIMED[msg.sender] > 0, \\\"Claimed all avaliable times\\\");\\r\\n        require(quantity <= competitveWhitelistInfo.LIMIT_PER_ADDRESS, \\\"Exceeded mint limit\\\");\\r\\n        require(msg.value == competitveWhitelistInfo.PRICE * quantity, \\\"Incorrect amount\\\");\\r\\n\\r\\n        _internalMint(msg.sender, quantity);\\r\\n        competitveWhitelistInfo.CURR_MINTED += quantity;\\r\\n        COMPETITIVE_WHITELIST_CLAIMED[msg.sender] -= 1;\\r\\n    }"
}