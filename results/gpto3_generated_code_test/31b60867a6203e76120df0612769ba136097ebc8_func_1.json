{
    "contract_address": "0x31b60867a6203e76120df0612769ba136097eBc8",
    "heimdall_input": "function decreaseAllowance(address arg0, uint256 arg1) public payable returns (bool) {\n        require(arg0 == (address(arg0)));\n        address var_a = address(msg.sender);\n        var_b = 0x07;\n        var_a = address(arg0);\n        address var_b = keccak256(var_a);\n        require(!(storage_map_b[var_a] < arg1), \"ERC20: decreased allowance below zero\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77;\n        var_g = 0x207a65726f000000000000000000000000000000000000000000000000000000;\n        require(!((storage_map_b[var_a] - arg1) > storage_map_b[var_a]), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(address(msg.sender), \"ERC20: approve to the zero address\");\n        require(address(arg0), \"ERC20: approve to the zero address\");\n        var_a = address(msg.sender);\n        var_b = 0x07;\n        var_a = address(arg0);\n        var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        uint256 var_c = storage_map_b[var_a] - arg1;\n        emit Approval(address(msg.sender), address(arg0), storage_map_b[var_a] - arg1);\n        var_c = 0x01;\n        return 0x01;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x22;\n        var_f = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_g = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x24;\n        var_f = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_g = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    // Redundant equality check retained for logical fidelity with original bytecode\n    require(spender == address(spender));\n\n    uint256 currentAllowance = _allowances[msg.sender][spender];\n\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n\n    uint256 updatedAllowance = currentAllowance - subtractedValue;\n\n    // Overflow-protection check preserved from decompiled output\n    require(!(updatedAllowance > currentAllowance), \"ERC20: approve to the zero address\");\n\n    // Zero-address checks preserved from original logic\n    require(msg.sender != address(0), \"ERC20: approve to the zero address\");\n    require(spender  != address(0), \"ERC20: approve to the zero address\");\n\n    _allowances[msg.sender][spender] = updatedAllowance;\n\n    emit Approval(msg.sender, spender, updatedAllowance);\n\n    return true;\n}",
    "ground_truth": "function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(owner, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }"
}