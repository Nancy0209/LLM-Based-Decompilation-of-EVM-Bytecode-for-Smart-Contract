{
    "contract_address": "0x531f60e490298A93bd6379E2cCe84E087818c93d",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public view {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender), \"TOKEN: Max Transaction Limit\");\n        require(address(arg0), \"TOKEN: Max Transaction Limit\");\n        require(arg1 > 0, \"TOKEN: Max Transaction Limit\");\n        require(address(owner) == (address(msg.sender)), \"TOKEN: Max Transaction Limit\");\n        require(!(!(address(owner)) == (address(arg0))), \"TOKEN: Max Transaction Limit\");\n        require(bytes1(uniswapV2Pair / 0x010000000000000000000000000000000000000000), \"TOKEN: Max Transaction Limit\");\n        require(!(arg1 > _maxTxAmount), \"TOKEN: Max Transaction Limit\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1c;\n        var_d = 0x544f4b454e3a204d6178205472616e73616374696f6e204c696d697400000000;\n        address var_e = address(msg.sender);\n        var_f = 0x10;\n        require(!(!bytes1(storage_map_e[var_e])), \"TOKEN: Your account is blacklisted!\");\n        require(!(bytes1(storage_map_e[var_e])), \"TOKEN: Your account is blacklisted!\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x23;\n        var_d = 0x544f4b454e3a20596f7572206163636f756e7420697320626c61636b6c697374;\n        var_g = 0x6564210000000000000000000000000000000000000000000000000000000000;\n        require(address(uniswapV2Pair) == (address(arg0)), \"Amount must be less than total reflections\");\n        var_e = address(arg0);\n        var_f = 0x02;\n        require(!(storage_map_e[var_e] > store_f), \"Amount must be less than total reflections\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x2a;\n        var_d = 0x416d6f756e74206d757374206265206c657373207468616e20746f74616c2072;\n        var_g = 0x65666c656374696f6e7300000000000000000000000000000000000000000000;\n        uint256 var_h = 0x40 + var_h;\n        var_a = 0x1a;\n        var_i = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x016345785d8a0000, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        uint256 var_g = var_h.length;\n        require(!(0 > var_h.length), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_k = 0;\n        var_l = var_m;\n        require(!(0x20 > var_h.length), \"SafeMath: division by zero\");\n        var_k = 0;\n        if (0x016345785d8a0000) {\n            var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_n = 0x12;\n            require(0x016345785d8a0000, \"TOKEN: This account cannot send tokens until trading is enabled\");\n        }\n        require(address(owner) == (address(msg.sender)), \"TOKEN: This account cannot send tokens until trading is enabled\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x3f;\n        var_d = 0x544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e6420;\n        var_g = 0x746f6b656e7320756e74696c2074726164696e6720697320656e61626c656400;\n        var_e = address(msg.sender);\n        var_f = 0x05;\n        if (storage_map_e[var_e]) {\n            if (storage_map_e[var_e]) {\n                if (!storage_map_e[var_e]) {\n                    if (0) {\n                        if (store_g) {\n                            if (store_g) {\n                            }\n                        }\n                        if (!(address(uniswapV2Pair)) == (address(msg.sender))) {\n                            require(bytes1(storage_map_e[var_e]), \"Transfer amount must be greater than zero\");\n                            require(bytes1(storage_map_e[var_e]), \"Transfer amount must be greater than zero\");\n                            require(!(bytes1(storage_map_e[var_e])), \"Transfer amount must be greater than zero\");\n                            require(0, \"Transfer amount must be greater than zero\");\n                            require(!(address(uniswapV2Pair) == (address(msg.sender))), \"Transfer amount must be greater than zero\");\n                            require(!(address(uniswapV2Pair) == (address(msg.sender))), \"Transfer amount must be greater than zero\");\n                        }\n                    }\n                    require(!(address(uniswapV2Pair) == (address(arg0))), \"Transfer amount must be greater than zero\");\n                }\n                require(!(address(uniswapV2Pair) == (address(arg0))), \"Transfer amount must be greater than zero\");\n            }\n            require(0x01, \"Transfer amount must be greater than zero\");\n        }\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x29;\n        var_d = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_g = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x23;\n        var_d = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x25;\n        var_d = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "pragma solidity ^0.8.17;\n\n// NOTE: this snippet only shows the refined `transfer` function. \n// It assumes that the following symbols are already declared elsewhere in the contract:\n//\n// * mapping(address => bool)          public bots;\n// * mapping(address => uint256)       public _buyMap;\n// * address                           public owner;\n// * address                           public uniswapV2Pair;\n// * uint256                           public _maxTxAmount;\n// * uint256                           public _maxWalletSize;\n// * uint256                           public _swapTokensAtAmount;\n// * bool                              public tradingOpen;\n// * bool                              public swapEnabled;\n// * bool                              private inSwap;\n// * function balanceOf(address)       external view returns (uint256);\n// * function _transfer(\n//       address from,\n//       address to,\n//       uint256 amount,\n//       bool takeFee\n//   ) internal;\n// * function swapTokensForEth(uint256 tokenAmount) internal;\n// * function sendETHToFee(uint256 amount) internal;\n// * using SafeMath for uint256;       (or Solidity 0.8 built-ins)\n\nfunction transfer(address recipient, uint256 amount) public returns (bool) {\n    /* --------------------------------------------------------------------- */\n    /* 1. Sanity checks copied from de-compiled artifacts (retained logic)   */\n    /* --------------------------------------------------------------------- */\n\n    // pointless self-comparison (kept for fidelity)\n    require(recipient == address(recipient));\n\n    // de-compiler produced `require(address(msg.sender), \u2026 )`\n    // which only fails for the zero-address; we preserve that meaning\n    require(msg.sender != address(0), \"TOKEN: Max Transaction Limit\");\n    require(recipient  != address(0), \"TOKEN: Max Transaction Limit\");\n\n    // original artifact restricted non-owner transfers; keep it exactly\n    require(msg.sender == owner, \"TOKEN: Max Transaction Limit\");\n\n    // double-negated comparison in artifact \u2192 owner must differ from recipient\n    require(owner != recipient, \"TOKEN: Max Transaction Limit\");\n\n    // nonsense bit-math on the pair address boiled down to \u201cpair must exist\u201d\n    require(uniswapV2Pair != address(0), \"TOKEN: Max Transaction Limit\");\n\n    // enforce maximum tx size\n    require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\n\n    // blacklist (bots) logic\n    require(!bots[msg.sender],  \"TOKEN: Your account is blacklisted!\");\n    require(!bots[recipient],   \"TOKEN: Your account is blacklisted!\");\n\n    // de-compiler had: `require(address(uniswapV2Pair) == arg0, \u2026 )`\n    // preserve literally: recipient must be the pair\n    require(recipient == uniswapV2Pair, \"Amount must be less than total reflections\");\n\n    // replicated cryptic check on _buyMap vs some threshold\n    require(_buyMap[recipient] <= _maxWalletSize, \"Amount must be less than total reflections\");\n\n    /* --------------------------------------------------------------------- */\n    /* 2. Trading / swapping restrictions copied in readable form            */\n    /* --------------------------------------------------------------------- */\n\n    // the decompiled blob hinted at a tradingOpen gate;\n    // if trading isn't open, only owner can transfer\n    if (!tradingOpen) {\n        require(msg.sender == owner, \"TOKEN: This account cannot send tokens until trading is enabled\");\n    }\n\n    /* --------------------------------------------------------------------- */\n    /* 3.  Swap-and-liquify section (inferred from variable names)            */\n    /* --------------------------------------------------------------------- */\n\n    uint256 contractTokenBalance = balanceOf(address(this));\n    bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\n\n    if (\n        canSwap &&\n        swapEnabled &&\n        !inSwap &&\n        msg.sender != uniswapV2Pair\n    ) {\n        inSwap = true;\n        swapTokensForEth(contractTokenBalance);\n        uint256 contractEthBalance = address(this).balance;\n        if (contractEthBalance > 0) {\n            sendETHToFee(contractEthBalance);\n        }\n        inSwap = false;\n    }\n\n    /* --------------------------------------------------------------------- */\n    /* 4.  Execute transfer                                                   */\n    /* --------------------------------------------------------------------- */\n\n    bool takeFee = true; // original token likely had fee toggles; left as constant\n    _transfer(msg.sender, recipient, amount, takeFee);\n    return true;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}