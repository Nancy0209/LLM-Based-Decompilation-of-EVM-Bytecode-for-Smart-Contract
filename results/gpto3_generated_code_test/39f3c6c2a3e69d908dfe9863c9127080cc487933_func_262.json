{
    "contract_address": "0x39f3C6C2a3E69D908DFE9863C9127080CC487933",
    "heimdall_input": "function rescueERC20(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        var_a = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        address var_b = address(owner);\n        uint256 var_c = arg1;\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_a9059cbb(var_b); // call\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == var_e.length);\n    }",
    "llm_output": "function rescueERC20(address tokenAdd, uint256 amount) external {\n    // Redundant check preserved from decompiled byte-code\n    require(tokenAdd == address(tokenAdd));\n\n    // Access control exactly as in the original logic\n    require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n\n    // Transfer the requested ERC20 tokens from this contract to the owner\n    IERC20(tokenAdd).transfer(_owner, amount);\n}",
    "ground_truth": "function rescueERC20(address tokenAdd, uint256 amount) external onlyOwner {\r\n        IERC20(tokenAdd).transfer(owner(), amount);\r\n    }"
}