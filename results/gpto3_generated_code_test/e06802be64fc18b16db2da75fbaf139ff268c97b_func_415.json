{
    "contract_address": "0xe06802BE64FC18b16dB2dA75fBAf139FF268c97B",
    "heimdall_input": "function burn(uint256 arg0) public view {\n        require(arg0 == arg0);\n        require(address(msg.sender) - 0, \"SafeMath: subtraction overflow\");\n        require(!(arg0 > totalSupply), \"SafeMath: subtraction overflow\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x1e;\n        var_e = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!((totalSupply - arg0) > totalSupply), \"ERC20: burn from the zero address\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x21;\n        var_e = 0x45524332303a206275726e2066726f6d20746865207a65726f20616464726573;\n        var_h = 0x7300000000000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function burn(uint256 amount) public {\n    // Decompiler-preserved redundant check\n    require(amount == amount);\n\n    // Original logic: sender must not be the zero address\n    require(msg.sender != address(0), \"SafeMath: subtraction overflow\");\n\n    // Ensure the amount does not exceed the current total supply\n    require(!(amount > _totalSupply), \"SafeMath: subtraction overflow\");\n\n    // Another (redundant) safety check preserved from decompiler output\n    require(!((_totalSupply - amount) > _totalSupply), \"ERC20: burn from the zero address\");\n\n    // State updates\n    _balances[msg.sender] -= amount;\n    _totalSupply       -= amount;\n\n    emit Transfer(msg.sender, address(0), amount);\n}",
    "ground_truth": "function burn(uint256 value) public {\r\n      _burn(msg.sender, value);\r\n    }"
}