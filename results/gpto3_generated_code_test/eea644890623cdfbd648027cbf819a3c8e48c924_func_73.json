{
    "contract_address": "0xEea644890623CdfBD648027cbf819A3C8e48C924",
    "heimdall_input": "function excludeFromReward(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        address var_e = address(arg0);\n        var_f = 0x1c;\n        require(!(bytes1(storage_map_j[var_e])), \"Account is not included\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x17;\n        var_d = 0x4163636f756e74206973206e6f7420696e636c75646564000000000000000000;\n        var_e = address(arg0);\n        var_f = 0x18;\n        require(!storage_map_j[var_e], \"Amount must be less than total reflections\");\n        var_e = address(arg0);\n        var_f = 0x18;\n        require(!(storage_map_j[var_e] > store_q), \"Amount must be less than total reflections\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x2a;\n        var_d = 0x416d6f756e74206d757374206265206c657373207468616e20746f74616c2072;\n        var_g = 0x65666c656374696f6e7300000000000000000000000000000000000000000000;\n        if (!0 < store_k) {\n            if (0 < store_k) {\n                var_e = 0x1d;\n                var_e = address(storage_map_v[var_e]);\n                var_f = 0x18;\n                require(!0 < store_k);\n                require(0 < store_k);\n                require(storage_map_j[var_e] > store_q);\n                var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x12;\n                require(!storage_map_j[var_e] > store_q);\n                var_e = 0x1d;\n                var_e = address(storage_map_v[var_e]);\n                var_f = 0x18;\n                require(totalSupply);\n                var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x11;\n                require(0 < store_k);\n                var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x32;\n                var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x32;\n                require(!store_q < storage_map_j[var_e]);\n                var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x32;\n                var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x32;\n                require(0 < store_k);\n                require(0 < store_k);\n                require(!totalSupply);\n            }\n            var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x12;\n            require(totalSupply);\n        }\n        var_e = address(arg0);\n        var_f = 0x1c;\n        storage_map_j[var_e] = 0x01 | (uint248(storage_map_j[var_e]));\n        store_k = store_k + 0x01;\n        var_e = 0x1d;\n        store_w = (address(arg0)) | (uint96(store_w));\n    }",
    "llm_output": "function excludeFromReward(address account) public {\n        /* ---------------------------------- *\n         *  Section faithfully mirrors checks\n         *  observed in the de-compiled byte-code\n         * ---------------------------------- */\n        require(account == address(account), \"Invalid address comparison\");\n        require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n        /* Reject if the account is already excluded */\n        require(!_isExcluded[account], \"Account is not included\");\n\n        /* Redundant / mirrored checks kept intact to preserve logic fidelity */\n        require(_rOwned[account] <= _reflectedSupply, \"Amount must be less than total reflections\");\n        require(!(_rOwned[account] > _reflectedSupply), \"Amount must be less than total reflections\");\n\n        /* A long chain of byte-code-level validations was present. They are\n           purposefully preserved (even when redundant or contradictory). */\n        if (!(_excluded.length > 0)) {\n            if (_excluded.length > 0) {\n                address tempAccount = _excluded[0x1d];\n\n                require(!(_excluded.length > 0));\n                require(_excluded.length > 0);\n\n                require(_rOwned[tempAccount] > _reflectedSupply);\n                require(!(_rOwned[tempAccount] > _reflectedSupply));\n\n                require(totalSupply() > 0);\n                require(_excluded.length > 0);\n\n                require(!(_reflectedSupply < _rOwned[tempAccount]));\n                require(_reflectedSupply < _rOwned[tempAccount]);\n\n                require(_excluded.length > 0);\n                require(_excluded.length > 0);\n                require(totalSupply() != 0);\n            }\n            require(totalSupply() != 0);\n        }\n\n        /* ============================================ *\n         *  Actual exclusion logic (same as original)\n         * ============================================ */\n        if (_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }",
    "ground_truth": "function excludeFromReward(address account) external onlyOwner {\r\n        require(!_isExcludedFromRewards[account], \"Account is not included\");\r\n        _exclude(account);\r\n    }"
}