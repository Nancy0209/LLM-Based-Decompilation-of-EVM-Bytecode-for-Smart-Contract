{
    "contract_address": "0x06e40f90072DCE06667641Dd9c0015803dc0c3b5",
    "heimdall_input": "function emergencyWithdraw(uint256 arg0) public payable {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        var_a = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        address var_b = msg.sender;\n        uint256 var_c = arg0;\n        (bool success, bytes memory ret0) = address(rewardToken).Unresolved_a9059cbb(var_b); // call\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == var_e.length);\n    }",
    "llm_output": "function emergencyWithdraw(uint256 amount) external {\n    // Ownership check (inlined to preserve original logic)\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    // Transfer the requested reward tokens to the owner\n    rewardToken.transfer(msg.sender, amount);\n}",
    "ground_truth": "function emergencyWithdraw(uint256 amount) external onlyOwner {\\r\\n        rewardToken.transfer(msg.sender, amount);\\r\\n    }"
}