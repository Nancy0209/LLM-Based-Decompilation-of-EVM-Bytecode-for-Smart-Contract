{
    "contract_address": "0x95f7bFda575e002777B856665bD36D954c3aaa59",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(arg1 == arg1);\n        require(!(bytes1(store_b / 0x01)), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_a = 0x40 + var_a;\n        var_b = 0x14;\n        var_c = 0x496e73756666696369656e742042616c616e6365000000000000000000000000;\n        address var_d = address(msg.sender);\n        var_e = 0x05;\n        require(!(arg1 > storage_map_c[var_d]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_f = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_g = ((0x04 + var_a) + 0x20) - (0x04 + var_a);\n        uint256 var_h = var_a.length;\n        require(!(0 > var_a.length), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_i = 0;\n        var_j = var_k;\n        require(!(0x20 > var_a.length), \"Insufficient Balance\");\n        var_i = 0;\n        require(!(storage_map_c[var_d] < arg1), \"SafeMath: addition overflow\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_l = 0x11;\n        var_d = address(msg.sender);\n        var_e = 0x05;\n        storage_map_c[var_d] = storage_map_c[var_d] - arg1;\n        var_d = address(arg0);\n        var_e = 0x05;\n        require(!(storage_map_c[var_d] > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff - arg1)), \"SafeMath: addition overflow\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_l = 0x11;\n        require(!((storage_map_c[var_d] + arg1) < storage_map_c[var_d]), \"SafeMath: addition overflow\");\n        var_f = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = ((0x04 + var_a) + 0x20) - (0x04 + var_a);\n        var_h = 0x1b;\n        var_j = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_d = address(arg0);\n        var_e = 0x05;\n        storage_map_c[var_d] = storage_map_c[var_d] + arg1;\n        uint256 var_f = arg1;\n        emit Transfer(address(msg.sender), address(arg0), arg1);\n        var_f = 0x01;\n        return 0x01;\n        require(!(!(address(arg0)) == (address(pair / 0x01))), \"SafeMath: multiplication overflow\");\n        require(!(!(address(arg0)) == (address(store_e / 0x01))), \"SafeMath: multiplication overflow\");\n        var_d = address(arg0);\n        var_e = 0x08;\n        require(bytes1(storage_map_c[var_d] / 0x01), \"SafeMath: multiplication overflow\");\n        require(bytes1(storage_map_c[var_d] / 0x01), \"SafeMath: multiplication overflow\");\n        require(!(!(address(msg.sender)) == (address(pair / 0x01))), \"SafeMath: multiplication overflow\");\n        require(!(!bytes1(store_b / 0x01)), \"SafeMath: multiplication overflow\");\n        require(!(!bytes1(store_b / 0x01)), \"SafeMath: multiplication overflow\");\n        require(!(!bytes1(store_b / 0x01)), \"SafeMath: multiplication overflow\");\n        store_b = (0x01 * 0x01) | (uint248(store_b));\n        require(!(swapThreshold == 0), \"SafeMath: multiplication overflow\");\n        require(!(swapThreshold & (store_g > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / swapThreshold))), \"SafeMath: multiplication overflow\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_l = 0x11;\n        require(swapThreshold, \"SafeMath: multiplication overflow\");\n        require(((swapThreshold * store_g) / swapThreshold) == store_g, \"SafeMath: multiplication overflow\");\n        var_b = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_m = ((0x04 + var_a) + 0x20) - (0x04 + var_a);\n        var_n = 0x21;\n        var_g = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_h = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        var_a = 0x40 + var_a;\n        var_b = 0x1a;\n        var_c = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(store_h > 0, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(store_h, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_l = 0x12;\n        var_f = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = ((0x04 + var_a) + 0x20) - (0x04 + var_a);\n        var_h = var_a.length;\n        require(!(0 > var_a.length), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_o = 0;\n        var_j = var_k;\n        require(!(0x20 > var_a.length), \"SafeMath: division by zero\");\n        var_o = 0;\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_l = 0x12;\n        if (!pair / 0x010000000000000000000000000000000000000000) {\n            if (!pair / 0x010000000000000000000000000000000000000000) {\n            }\n        }\n        if (address(msg.sender) == (address(pair / 0x01))) {\n        }\n        var_b = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_m = ((0x04 + var_a) + 0x20) - (0x04 + var_a);\n        var_n = 0x25;\n        var_g = 0x5472616e7366657220616d6f756e742065786365656473207468652062616720;\n        var_h = 0x73697a652e000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public override returns (bool) {\n    return _transferFrom(msg.sender, recipient, amount);\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }"
}