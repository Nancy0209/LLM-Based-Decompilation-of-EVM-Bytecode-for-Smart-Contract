{
    "contract_address": "0x7006A0F5D09b07a365Ff1306467407E57312cF29",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_h[var_a] > 0);\n        store_g = (0x01 * 0x01000000000000000000000000000000000000000000) | (uint248(store_g));\n        require(!0x02 > 0xffffffffffffffff);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x41;\n        var_d = 0x02;\n        uint256 var_e = var_e + 0x60;\n        require(!0x02);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        address var_f = address(this);\n        var_g = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f / 0x01).WETH(var_h); // staticcall\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!(((var_e + ret0.length) - var_e) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_i == (address(var_i)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        address var_j = address(var_i);\n        require(address(this) - 0, \"ERC20: approve to the zero address\");\n        require(address(store_f / 0x01) - 0, \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_l = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_f / 0x01);\n        address var_b = keccak256(var_a);\n        storage_map_h[var_a] = storage_map_h[var_a];\n        address var_k = storage_map_h[var_a];\n        emit Approval(address(this), address(store_f / 0x01), storage_map_h[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        var_l = storage_map_h[var_a];\n        uint256 var_m = 0;\n        uint256 var_n = ((0x04 + var_e) + 0xa0) - (0x04 + var_e);\n        uint256 var_p = var_e.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_f / 0x01).code.length);\n        (bool success, bytes memory ret0) = address(store_f / 0x01).Unresolved_791ac947(var_l); // call\n        store_g = (0 * 0x01000000000000000000000000000000000000000000) | (uint248(store_g));\n        require(!address(this).balance > 0);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    require(msg.sender == address(transferDelayEnabled / 0x0100), \"Unauthorized sender\");\n    address contractAddress = address(this);\n    uint256 flag = 0x01;\n    require(storage_map_h[contractAddress] == 0, \"Storage map check failed\");\n    store_g = (0x01 * 0x01000000000000000000000000000000000000000000) | uint248(store_g);\n    require(!(0x02 > 0xffffffffffffffff), \"Invalid condition\");\n    uint256 errorCode = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 errorLocation = 0x41;\n    uint256 errorType = 0x02;\n    uint256 offset = offset + 0x60;\n    require(!(0x02), \"Invalid condition\");\n    errorCode = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorLocation = 0x32;\n    address thisAddress = address(this);\n    uint256 callData = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n    (bool success, bytes memory ret0) = address(store_f / 0x01).staticcall(abi.encodeWithSignature(\"WETH(uint256)\", var_h));\n    offset = offset + uint248(ret0.length + 0x1f);\n    require(!(((offset + ret0.length) - offset) < 0x20), \"ERC20: approve to the zero address\");\n    require(var_i == address(var_i), \"ERC20: approve to the zero address\");\n    errorCode = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorLocation = 0x32;\n    address var_j = address(var_i);\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(address(store_f / 0x01) != address(0), \"ERC20: approve to the zero address\");\n    uint256 revertData = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 revertLength = ((0x04 + offset) + 0x20) - (0x04 + offset);\n    uint256 revertLocation = 0x22;\n    uint256 revertMessage = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    uint256 revertSuffix = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    contractAddress = address(this);\n    flag = 0x02;\n    contractAddress = address(store_f / 0x01);\n    address hashedAddress = keccak256(abi.encodePacked(contractAddress));\n    storage_map_h[contractAddress] = storage_map_h[contractAddress];\n    address storedAddress = storage_map_h[contractAddress];\n    emit Approval(address(this), address(store_f / 0x01), storage_map_h[contractAddress]);\n    uint256 callData2 = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n    uint256 storedValue = storage_map_h[contractAddress];\n    uint256 zeroValue = 0;\n    uint256 offset2 = ((0x04 + offset) + 0xa0) - (0x04 + offset);\n    uint256 length = offset.length;\n    address currentAddress = address(this);\n    uint256 currentTimestamp = block.timestamp;\n    require(address(store_f / 0x01).code.length > 0, \"Invalid code length\");\n    (bool success2, bytes memory ret1) = address(store_f / 0x01).call(abi.encodeWithSignature(\"Unresolved_791ac947(uint256)\", storedValue));\n    store_g = (0 * 0x01000000000000000000000000000000000000000000) | uint248(store_g);\n    require(address(this).balance == 0, \"Balance check failed\");\n    (bool success3, bytes memory ret2) = address(transferDelayEnabled / 0x0100).call{value: address(this).balance}(\"\");\n    revertData = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    revertLength = ((0x04 + offset) + 0x20) - (0x04 + offset);\n    revertLocation = 0x24;\n    revertMessage = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    revertSuffix = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}