{
    "contract_address": "0x46c4C3ef9A1557017955E74D4F3550971C2700A3",
    "heimdall_input": "function setBreakdown(uint256 arg0, uint256 arg1, uint256 arg2, uint256 arg3, uint256 arg4, uint256 arg5) public {\n        require(msg.sender == (address(getOwner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        store_i = arg0;\n        store_j = arg1;\n        store_k = arg2;\n        store_l = arg3;\n        store_m = arg4;\n        require(!(arg0 > (arg1 + arg0)), \"SafeMath: addition overflow\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(!((arg1 + arg0) < arg0), \"SafeMath: addition overflow\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1b;\n        var_d = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n    }",
    "llm_output": "function setBreakdown(\n    uint256 liquidityFee,\n    uint256 stakingFee,\n    uint256 marketingFee,\n    uint256 devFee,\n    uint256 burnFee,\n    uint256 feeDenominator\n) public {\n    require(msg.sender == getOwner(), \"Ownable: caller is not the owner\");\n\n    // Update fee breakdown\n    _liquidityFee = liquidityFee;\n    _stakingFee = stakingFee;\n    _marketingFee = marketingFee;\n    _devFee = devFee;\n    _burnFee = burnFee;\n\n    // Ensure no overflow in fee calculations\n    require(liquidityFee + stakingFee + marketingFee + devFee + burnFee <= feeDenominator, \"SafeMath: addition overflow\");\n}",
    "ground_truth": "function setBreakdown(uint256 _liquidityFee, uint256 _stakingFee, uint256 _marketingFee, uint256 _devFee, uint256 _burnFee, uint256 _feeDenominator) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        stakingFee = _stakingFee;\r\n        marketingFee = _marketingFee;\r\n        devFee = _devFee;\r\n        burnFee = _burnFee;\r\n        totalFee = _liquidityFee.add(_stakingFee).add(_marketingFee).add(_devFee).add(_burnFee);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee < feeDenominator / 2, \"Fees can not be more than 10%\"); \r\n        set_fees();\r\n    }"
}