{
    "contract_address": "0xD551F2Bd835B49DB742f0382d441Ede9C7C1Ee30",
    "heimdall_input": "function process_Tokens_Now(uint256 arg0) public {\n        require(arg0 == arg0);\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(noFeeToTransfer / 0x010000000000000000000000000000000000000000)), \"Currently processing, try later.\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x43757272656e746c792070726f63657373696e672c20747279206c617465722e;\n        address var_f = address(this);\n        var_g = 0x01;\n        require(!storage_map_p[var_f] | (arg0 == ((storage_map_p[var_f] * arg0) / storage_map_p[var_f])));\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(0x64);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        noFeeToTransfer = (0x01 * 0x010000000000000000000000000000000000000000) | (uint248(noFeeToTransfer));\n        require(!0x02 > 0xffffffffffffffff);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x41;\n        var_a = 0x02;\n        uint256 var_c = var_c + 0x60;\n        require(!0x02);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x32;\n        address var_i = address(this);\n        var_j = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(uniswapV2Router / 0x01).WETH(var_k); // staticcall\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_l == (address(var_l)));\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x32;\n        address var_m = address(var_l);\n        require(address(this) == 0);\n        require(!(address(uniswapV2Router / 0x01)) == 0);\n        var_f = address(this);\n        var_g = 0x02;\n        var_f = address(uniswapV2Router / 0x01);\n        address var_g = keccak256(var_f);\n        storage_map_p[var_f] = (storage_map_p[var_f] * arg0) / 0x64;\n        address var_n = (storage_map_p[var_f] * arg0) / 0x64;\n        emit Approval(address(this), address(uniswapV2Router / 0x01), (storage_map_p[var_f] * arg0) / 0x64);\n        var_n = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_o = (storage_map_p[var_f] * arg0) / 0x64;\n        uint256 var_p = 0;\n        uint256 var_q = ((0x04 + var_c) + 0xa0) - (0x04 + var_c);\n        uint256 var_r = var_c.length;\n        address var_s = address(this);\n        uint256 var_t = block.timestamp;\n        require(address(uniswapV2Router / 0x01).code.length);\n        (bool success, bytes memory ret0) = address(uniswapV2Router / 0x01).{ value: var_p ether }Unresolved_791ac947(var_o); // call\n        (bool success, bytes memory ret0) = address(noBlackList / 0x0100).transfer(address(this).balance);\n        noFeeToTransfer = (0 * 0x010000000000000000000000000000000000000000) | (uint248(noFeeToTransfer));\n        var_n = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_o = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_p = 0x11;\n        var_q = 0x4552523a207a65726f2061646472657373000000000000000000000000000000;\n    }",
    "llm_output": "function processTokensNow(uint256 percentOfTokensToProcess) public {\n    require(percentOfTokensToProcess == percentOfTokensToProcess, \"Invalid input\");\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    require(!inSwapAndLiquify, \"Currently processing, try later.\");\n\n    inSwapAndLiquify = true;\n\n    uint256 contractTokenBalance = balanceOf(address(this));\n    uint256 tokensToProcess = (contractTokenBalance * percentOfTokensToProcess) / 100;\n\n    require(tokensToProcess > 0, \"No tokens to process\");\n\n    uint256 initialBalance = address(this).balance;\n\n    // Swap tokens for ETH\n    swapTokensForEth(tokensToProcess);\n\n    uint256 ethReceived = address(this).balance - initialBalance;\n\n    // Transfer ETH to the development wallet\n    payable(devWallet).transfer(ethReceived);\n\n    inSwapAndLiquify = false;\n\n    emit SwapAndLiquify(tokensToProcess, ethReceived, 0);\n}",
    "ground_truth": "function process_Tokens_Now (uint256 percent_Of_Tokens_To_Process) public onlyOwner {\r\n        // Do not trigger if already in swap\r\n        require(!inSwapAndLiquify, \"Currently processing, try later.\"); \r\n        if (percent_Of_Tokens_To_Process > 100){percent_Of_Tokens_To_Process == 100;}\r\n        uint256 tokensOnContract = balanceOf(address(this));\r\n        uint256 sendTokens = tokensOnContract*percent_Of_Tokens_To_Process/100;\r\n        swapAndLiquify(sendTokens);\r\n    }"
}