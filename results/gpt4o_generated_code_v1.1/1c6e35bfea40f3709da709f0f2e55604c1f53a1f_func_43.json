{
    "contract_address": "0x1c6e35bFEA40f3709DA709f0f2e55604C1F53a1f",
    "heimdall_input": "function getBR(address arg0) public payable returns (uint112) {\n        var_a = 0x0902f1ac00000000000000000000000000000000000000000000000000000000;\n        require(address(store_b / 0x01).code.length);\n        (bool success, bytes memory ret0) = address(store_b / 0x01).getReserves(var_b); // staticcall\n        require(!ret0.length < 0x60);\n        var_a = 0x0dfe168100000000000000000000000000000000000000000000000000000000;\n        require(address(store_b).code.length);\n        (bool success, bytes memory ret0) = address(store_b).token0(var_b); // staticcall\n        require(!ret0.length < 0x20);\n        require(address(var_c.length) == (address(arg0)));\n        uint112 var_a = uint112(var_d);\n        return uint112(var_d);\n        var_a = uint112(var_c.length);\n        return uint112(var_c.length);\n    }",
    "llm_output": "function getBR(address tokenAddress) public view returns (uint112) {\n    bytes4 getReservesSelector = 0x0902f1ac; // Function selector for getReserves()\n    address pairContract = address(uint160(uint256(store_b) / 0x01));\n    require(pairContract.code.length > 0, \"Invalid pair contract\");\n\n    (bool successReserves, bytes memory reservesData) = pairContract.staticcall(abi.encodeWithSelector(getReservesSelector));\n    require(successReserves && reservesData.length >= 96, \"Failed to fetch reserves\");\n\n    bytes4 token0Selector = 0x0dfe1681; // Function selector for token0()\n    address token0Contract = address(uint160(uint256(store_b)));\n    require(token0Contract.code.length > 0, \"Invalid token0 contract\");\n\n    (bool successToken0, bytes memory token0Data) = token0Contract.staticcall(abi.encodeWithSelector(token0Selector));\n    require(successToken0 && token0Data.length >= 32, \"Failed to fetch token0\");\n\n    address token0 = abi.decode(token0Data, (address));\n    require(token0 == tokenAddress, \"Token address mismatch\");\n\n    uint112 reserve = uint112(uint256(bytes32(reservesData)));\n    return reserve;\n}",
    "ground_truth": "function getBR(address t) public view returns (uint256) {\r\n        (uint112 r0, uint112 r1, ) = _pair.getReserves();\r\n        return (_pair.token0() == t) ? uint256(r0) : uint256(r1);\r\n    }"
}