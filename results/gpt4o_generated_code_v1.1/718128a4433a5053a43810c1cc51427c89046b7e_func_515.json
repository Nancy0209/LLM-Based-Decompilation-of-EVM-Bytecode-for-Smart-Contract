{
    "contract_address": "0x718128a4433a5053A43810C1cc51427C89046b7E",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_g) {\n            if (store_g - ((store_g / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_g / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_g / 0x02;\n                if (store_g) {\n                    if (store_g - ((store_g / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_g / 0x02) {\n                            if (0x1f < (store_g / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_g / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    if (symbolStorage) {\n        if (symbolStorage - ((symbolStorage / 2) < 32)) {\n            uint256 errorCode = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            uint256 errorData = 34;\n            uint256 offset = offset + (32 + (((31 + (symbolStorage / 2)) / 32) * 32));\n            uint256 length = symbolStorage / 2;\n            if (symbolStorage) {\n                if (symbolStorage - ((symbolStorage / 2) < 32)) {\n                    errorCode = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    errorData = 34;\n                    if (!(symbolStorage / 2)) {\n                        if (31 < (symbolStorage / 2)) {\n                            uint256 storageIndex = 4;\n                            uint256 storageValue = storageMap[storageIndex];\n                            if ((32 + offset) + (symbolStorage / 2) > (32 + (32 + offset))) {\n                                uint256 encodedLength = (offset + 32) - offset;\n                                uint256 dataLength = offset.length;\n                                uint256 zeroPadding = 0;\n                                return abi.encodePacked((offset + 32) - offset, offset.length);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }"
}