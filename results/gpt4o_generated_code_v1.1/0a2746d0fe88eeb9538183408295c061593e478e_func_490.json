{
    "contract_address": "0x0a2746D0FE88EeB9538183408295c061593E478e",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_f) {\n            if (store_f - ((store_f / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_f / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_f / 0x02;\n                if (store_f) {\n                    if (store_f - ((store_f / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_f / 0x02) {\n                            if (0x1f < (store_f / 0x02)) {\n                                var_a = 0x05;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_f / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    if (symbolStorage.length > 0) {\n        uint256 symbolLength = symbolStorage.length / 2;\n        if (symbolLength < 32) {\n            revert(\"Decompiler artifact\");\n        }\n\n        uint256 symbolDataOffset = 32 + ((31 + symbolLength) / 32) * 32;\n        if (symbolStorage.length > 0) {\n            if (symbolLength < 32) {\n                revert(\"Decompiler artifact\");\n            }\n\n            if (symbolLength > 0) {\n                if (31 < symbolLength) {\n                    bytes memory symbolData = new bytes(symbolLength);\n                    for (uint256 i = 0; i < symbolLength; i++) {\n                        symbolData[i] = symbolStorage[i];\n                    }\n                    return string(symbolData);\n                }\n            }\n        }\n    }\n    return \"\";\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }"
}