{
    "contract_address": "0x16E04d776e1B647BE948C6D2f51Bca26401DC011",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_l) {\n            if (store_l - ((store_l >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_l >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_l >> 0x01;\n                if (store_l) {\n                    if (store_l - ((store_l >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_l >> 0x01) {\n                            if (0x1f < (store_l >> 0x01)) {\n                                var_a = 0x05;\n                                var_e = storage_map_d[var_a];\n                                if ((0x20 + var_c) + (store_l >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    if (symbolStorage) {\n        if (symbolStorage - ((symbolStorage >> 1) < 32)) {\n            revert('Decompiler artifact');\n        }\n        uint256 offset = 32 + (((31 + (symbolStorage >> 1)) / 32) * 32);\n        bytes32 symbolData = symbolStorage >> 1;\n        if (symbolStorage) {\n            if (symbolStorage - ((symbolStorage >> 1) < 32)) {\n                revert('Decompiler artifact');\n            }\n            if (!(symbolStorage >> 1)) {\n                if (31 < (symbolStorage >> 1)) {\n                    revert('Decompiler artifact');\n                }\n                bytes memory symbolBytes = symbolStorageMap[5];\n                if ((32 + offset) + (symbolStorage >> 1) > (32 + (32 + offset))) {\n                    revert('Decompiler artifact');\n                }\n                return abi.encodePacked(32, symbolBytes.length);\n            }\n        }\n    }\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) { return _symbol; }"
}