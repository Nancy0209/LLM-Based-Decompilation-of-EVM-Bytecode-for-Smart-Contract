{
    "contract_address": "0x4CEDcba2dB7c99934bC64bBd575FEE5fE6E0F28b",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_j)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_d[var_a]);\n        store_c = 0x01000000000000000000000000000000000000000000 | (uint248(store_c));\n        require(!storage_map_d[var_a]);\n        require(!bytes1(store_c / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_g).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_g), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_g);\n        address var_b = keccak256(var_a);\n        storage_map_d[var_a] = storage_map_d[var_a];\n        address var_k = storage_map_d[var_a];\n        emit Approval(address(this), address(store_g), storage_map_d[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_d[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_g).code.length);\n        (bool success, bytes memory ret0) = address(store_g).Unresolved_791ac947(var_l); // call\n        store_c = uint248(store_c);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_j).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    require(msg.sender == feeAddress, \"Unauthorized access\");\n    address contractAddress = address(this);\n    uint8 operationFlag = 0x01;\n    require(!isOperationLocked[contractAddress], \"Operation is locked\");\n    operationState = 0x01000000000000000000000000000000000000000000 | uint248(operationState);\n    require(!isOperationLocked[contractAddress], \"Operation is locked\");\n    require(!bytes1(operationState / 0x010000000000000000000000000000000000000000), \"Invalid operation state\");\n    operationFlag = 0x02;\n    uint256 offset = offset + 0x60;\n    bytes memory data = msg.data[4:68];\n    bytes32 errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8 errorLength = 0x32;\n    address wethAddress = address(this);\n    bytes32 wethSelector = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n    (bool success, bytes memory returnData) = address(router).staticcall(abi.encodeWithSelector(wethSelector, wethAddress));\n    offset = offset + uint248(returnData.length + 0x1f);\n    require(!(((offset + returnData.length) - offset) < 0x20), \"ERC20: approve to the zero address\");\n    require(returnData.length == uint256(returnData.length), \"ERC20: approve to the zero address\");\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorLength = 0x32;\n    uint256 returnDataLength = uint256(returnData.length);\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(address(router) != address(0), \"ERC20: approve to the zero address\");\n    bytes32 revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint8 revertLength = 0x20;\n    uint8 revertMessageLength = 0x22;\n    bytes32 revertMessage = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    bytes32 revertMessagePadding = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    contractAddress = address(this);\n    operationFlag = 0x02;\n    address routerAddress = address(router);\n    bytes32 operationHash = keccak256(abi.encodePacked(contractAddress));\n    isOperationLocked[contractAddress] = isOperationLocked[contractAddress];\n    address approvalAddress = isOperationLocked[contractAddress];\n    emit Approval(address(this), address(router), isOperationLocked[contractAddress]);\n    bytes32 transferSelector = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n    address transferAddress = isOperationLocked[contractAddress];\n    uint256 transferAmount = 0;\n    uint8 transferOffset = 0xa0;\n    uint256 returnDataSize = returnData.length;\n    address senderAddress = address(this);\n    uint256 currentTimestamp = block.timestamp;\n    require(address(router).code.length > 0, \"Router code is empty\");\n    (bool callSuccess, bytes memory callReturnData) = address(router).call(abi.encodeWithSelector(transferSelector, transferAddress));\n    operationState = uint248(operationState);\n    require(address(this).balance == 0, \"Contract balance is not zero\");\n    (bool transferSuccess, bytes memory transferReturnData) = feeAddress.call{value: address(this).balance}(\"\");\n    revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    revertLength = 0x20;\n    revertMessageLength = 0x24;\n    revertMessage = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    revertMessagePadding = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}