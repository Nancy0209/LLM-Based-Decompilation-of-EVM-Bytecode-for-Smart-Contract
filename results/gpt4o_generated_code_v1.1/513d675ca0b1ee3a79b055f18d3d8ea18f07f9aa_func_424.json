{
    "contract_address": "0x513D675cA0b1EE3A79B055F18D3D8Ea18F07F9aA",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_c) {\n            if (store_c - ((store_c >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_c >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_c >> 0x01;\n                if (store_c) {\n                    if (store_c - ((store_c >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_c >> 0x01) {\n                            if (0x1f < (store_c >> 0x01)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_c >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    if (symbolStorage != 0) {\n        uint256 symbolLength = symbolStorage >> 1;\n        if (symbolLength < 0x20) {\n            revert(\"Decompiler artifact\");\n        }\n\n        uint256 symbolDataOffset = 0x20 + ((0x1f + symbolLength) / 0x20) * 0x20;\n        bytes32 symbolData = bytes32(symbolStorage >> 1);\n\n        if (symbolStorage != 0) {\n            if (symbolLength < 0x20) {\n                revert(\"Decompiler artifact\");\n            }\n\n            if (symbolData == 0) {\n                if (symbolLength > 0x1f) {\n                    bytes memory symbolBytes = new bytes(symbolLength);\n                    for (uint256 i = 0; i < symbolLength; i++) {\n                        symbolBytes[i] = bytes1(storageMap[symbolDataOffset + i]);\n                    }\n                    return string(symbolBytes);\n                }\n            }\n        }\n    }\n    return \"\";\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }"
}