{
    "contract_address": "0xEA00f45b33879A1D55f91ff260C20c96a577E566",
    "heimdall_input": "function manualBurnLiquidityPairTokens(uint256 arg0) public returns (bool) {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(lastManualLpBurnTime > ~(manualBurnFrequency)), \"Must wait for cooldown to finish\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(block.timestamp > (lastManualLpBurnTime + manualBurnFrequency), \"Must wait for cooldown to finish\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4d757374207761697420666f7220636f6f6c646f776e20746f2066696e697368;\n        require(!(arg0 > 0x03e8), \"May not nuke more than 10% of tokens in LP\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x2a;\n        var_d = 0x4d6179206e6f74206e756b65206d6f7265207468616e20313025206f6620746f;\n        var_g = 0x6b656e7320696e204c5000000000000000000000000000000000000000000000;\n        lastManualLpBurnTime = block.timestamp;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var_b = 0xc7520dbedcd17d84b4f9c25632afdb926ac64c1f;\n        (bool success, bytes memory ret0) = address(this).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_h = var_h + (uint248(ret0.length + 0x1f));\n        require(!(((var_h + ret0.length) - var_h) < 0x20), \"ERC20: transfer from the zero address\");\n        require(!(var_h.length & (arg0 > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / var_h.length))), \"ERC20: transfer from the zero address\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710, \"ERC20: transfer from the zero address\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        require(!((var_h.length * arg0) / 0x2710), \"ERC20: transfer from the zero address\");\n        require(0xc7520dbedcd17d84b4f9c25632afdb926ac64c1f, \"ERC20: transfer from the zero address\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x20;\n        var_d = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_j = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        require(0xdead, \"ERC20: transfer to the zero address\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x20;\n        var_d = 0x23;\n        var_g = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_j = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_e = 0xc7520dbedcd17d84b4f9c25632afdb926ac64c1f;\n        uint256 var_k = 0;\n        require(!(storage_map_t[var_e] < ((var_h.length * arg0) / 0x2710)), \"ERC20: transfer amount exceeds balance\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x20;\n        var_d = 0x26;\n        var_g = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        var_j = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n        var_e = 0xc7520dbedcd17d84b4f9c25632afdb926ac64c1f;\n        var_k = 0;\n        storage_map_t[var_e] = storage_map_t[var_e] - ((var_h.length * arg0) / 0x2710);\n        var_e = 0xdead;\n        require(!storage_map_t[var_e] > (~((var_h.length * arg0) / 0x2710)));\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        storage_map_t[var_e] = storage_map_t[var_e] + ((var_h.length * arg0) / 0x2710);\n        uint256 var_i = (var_h.length * arg0) / 0x2710;\n        emit Transfer(0xc7520dbedcd17d84b4f9c25632afdb926ac64c1f, 0xdead, (var_h.length * arg0) / 0x2710);\n        var_i = 0xfff6cae900000000000000000000000000000000000000000000000000000000;\n        require(address(0xc7520dbedcd17d84b4f9c25632afdb926ac64c1f).code.length);\n        (bool success, bytes memory ret0) = address(0xc7520dbedcd17d84b4f9c25632afdb926ac64c1f).{ value: var_k ether }sync(var_c); // call\n        emit ManualNukeLP();\n        var_i = 0x01;\n        return 0x01;\n    }",
    "llm_output": "function manualBurnLiquidityPairTokens(uint256 percent) public returns (bool) {\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n    require(block.timestamp > lastManualLpBurnTime + manualBurnFrequency, \"Must wait for cooldown to finish\");\n    require(percent <= 1000, \"May not nuke more than 10% of tokens in LP\");\n\n    lastManualLpBurnTime = block.timestamp;\n\n    uint256 lpBalance = balanceOf(uniswapV2Pair);\n    uint256 amountToBurn = (lpBalance * percent) / 10000;\n\n    require(amountToBurn > 0, \"ERC20: transfer amount must be greater than zero\");\n    require(lpBalance >= amountToBurn, \"ERC20: transfer amount exceeds balance\");\n\n    _transfer(uniswapV2Pair, deadAddress, amountToBurn);\n\n    IUniswapV2Pair(uniswapV2Pair).sync();\n\n    emit ManualNukeLP();\n    return true;\n}",
    "ground_truth": "function manualBurnLiquidityPairTokens(uint256 percent)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            block.timestamp > lastManualLpBurnTime + manualBurnFrequency,\r\n            \"Must wait for cooldown to finish\"\r\n        );\r\n        require(percent <= 1000, \"May not nuke more than 10% of tokens in LP\");\r\n        lastManualLpBurnTime = block.timestamp;\r\n\r\n        // get balance of liquidity pair\r\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\r\n\r\n        // calculate amount to burn\r\n        uint256 amountToBurn = liquidityPairBalance.mul(percent).div(10000);\r\n\r\n        // pull tokens from pancakePair liquidity and move to dead address permanently\r\n        if (amountToBurn > 0) {\r\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\r\n        }\r\n\r\n        //sync price since this is not in a swap transaction!\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        pair.sync();\r\n        emit ManualNukeLP();\r\n        return true;\r\n    }"
}