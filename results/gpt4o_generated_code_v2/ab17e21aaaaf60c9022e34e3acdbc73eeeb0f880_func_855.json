{
    "contract_address": "0xAB17E21aaAaF60C9022E34e3AcdBC73EEeb0f880",
    "heimdall_input": "function manualBurnLiquidityPairTokens(uint256 arg0) public returns (bool) {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(lastManualLpBurnTime > (manualBurnFrequency + lastManualLpBurnTime)), \"Must wait for cooldown to finish\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(block.timestamp > (manualBurnFrequency + lastManualLpBurnTime), \"Must wait for cooldown to finish\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4d757374207761697420666f7220636f6f6c646f776e20746f2066696e697368;\n        require(!(arg0 > 0x64), \"May not nuke more than 10% of tokens in LP\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x2a;\n        var_d = 0x4d6179206e6f74206e756b65206d6f7265207468616e20313025206f6620746f;\n        var_g = 0x6b656e7320696e204c5000000000000000000000000000000000000000000000;\n        lastManualLpBurnTime = block.timestamp;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var_b = 0xf82cf8e4225ebbea534c3ac06db0c1254160a111;\n        (bool success, bytes memory ret0) = address(this).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_h = var_h + (uint248(ret0.length + 0x1f));\n        require(!(((var_h + ret0.length) - var_h) < 0x20), \"ERC20: transfer from the zero address\");\n        require((arg0 == ((arg0 * var_h.length) / var_h.length)) | !var_h.length, \"ERC20: transfer from the zero address\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x03e8, \"ERC20: transfer from the zero address\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        require(!((arg0 * var_h.length) / 0x03e8), \"ERC20: transfer from the zero address\");\n        require(0xf82cf8e4225ebbea534c3ac06db0c1254160a111, \"ERC20: transfer from the zero address\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x20;\n        var_d = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_j = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        require(0xdead, \"ERC20: transfer to the zero address\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x20;\n        var_d = 0x23;\n        var_g = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_j = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_e = 0xf82cf8e4225ebbea534c3ac06db0c1254160a111;\n        uint256 var_k = 0;\n        require(!(storage_map_t[var_e] < ((arg0 * var_h.length) / 0x03e8)), \"ERC20: transfer amount exceeds balance\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x20;\n        var_d = 0x26;\n        var_g = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        var_j = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n        var_e = 0xf82cf8e4225ebbea534c3ac06db0c1254160a111;\n        var_k = 0;\n        storage_map_t[var_e] = storage_map_t[var_e] - ((arg0 * var_h.length) / 0x03e8);\n        var_e = 0xdead;\n        require(!storage_map_t[var_e] > (((arg0 * var_h.length) / 0x03e8) + storage_map_t[var_e]));\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        storage_map_t[var_e] = ((arg0 * var_h.length) / 0x03e8) + storage_map_t[var_e];\n        uint256 var_i = (arg0 * var_h.length) / 0x03e8;\n        emit Transfer(0xf82cf8e4225ebbea534c3ac06db0c1254160a111, 0xdead, (arg0 * var_h.length) / 0x03e8);\n        var_i = 0xfff6cae900000000000000000000000000000000000000000000000000000000;\n        require(address(0xf82cf8e4225ebbea534c3ac06db0c1254160a111).code.length);\n        (bool success, bytes memory ret0) = address(0xf82cf8e4225ebbea534c3ac06db0c1254160a111).sync(var_c); // call\n        emit ManualNukeLP();\n        var_i = 0x01;\n        return 0x01;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract LiquidityBurner {\n    address public owner;\n    uint256 public lastManualLpBurnTime;\n    uint256 public manualBurnFrequency = 1 days; // Example cooldown period\n    uint256 public constant MAX_BURN_PERCENTAGE = 10; // Maximum 10% of LP tokens can be burned\n    address public liquidityPairAddress = 0xf82cf8e4225ebbea534c3ac06db0c1254160a111; // Example LP token address\n\n    mapping(address => uint256) private balances;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event ManualNukeLP();\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function manualBurnLiquidityPairTokens(uint256 percentage) external onlyOwner returns (bool) {\n        require(percentage <= MAX_BURN_PERCENTAGE, \"Cannot burn more than 10% of LP tokens\");\n        require(block.timestamp > lastManualLpBurnTime + manualBurnFrequency, \"Cooldown period not finished\");\n\n        lastManualLpBurnTime = block.timestamp;\n\n        uint256 lpTokenBalance = IERC20(liquidityPairAddress).balanceOf(address(this));\n        uint256 burnAmount = (lpTokenBalance * percentage) / 100;\n\n        require(burnAmount > 0, \"Burn amount must be greater than zero\");\n        require(burnAmount <= lpTokenBalance, \"Burn amount exceeds balance\");\n\n        // Burn the LP tokens by transferring them to the dead address\n        address deadAddress = 0x000000000000000000000000000000000000dEaD;\n        IERC20(liquidityPairAddress).transfer(deadAddress, burnAmount);\n\n        emit Transfer(address(this), deadAddress, burnAmount);\n        emit ManualNukeLP();\n\n        return true;\n    }\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n```\n\n### Key Improvements:\n1. **Readability**: The code has been rewritten with clear variable names and proper formatting.\n2. **Removed Redundant Code**: Unnecessary variables and operations from the decompiled code have been removed.\n3. **Added Comments**: Comments have been added to explain the purpose of key sections.\n4. **Constants**: Introduced constants for values like `MAX_BURN_PERCENTAGE` and the dead address.\n5. **Interface Usage**: Added an `IERC20` interface for interacting with the LP token contract.\n6. **Events**: Properly defined and emitted events for transfers and manual LP burns.\n7. **Error Messages**: Improved error messages for clarity.\n\nThis refactored code is now clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function manualBurnLiquidityPairTokens(uint256 percent)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            block.timestamp > lastManualLpBurnTime + manualBurnFrequency,\r\n            \"Must wait for cooldown to finish\"\r\n        );\r\n        require(percent <= 100, \"May not nuke more than 10% of tokens in LP\");\r\n        lastManualLpBurnTime = block.timestamp;\r\n\r\n        // get balance of liquidity pair\r\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\r\n\r\n        // calculate amount to burn\r\n        uint256 amountToBurn = liquidityPairBalance.mul(percent).div(1000);\r\n\r\n        // pull tokens from pancakePair liquidity and move to dead address permanently\r\n        if (amountToBurn > 0) {\r\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\r\n        }\r\n\r\n        //sync price since this is not in a swap transaction!\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        pair.sync();\r\n        emit ManualNukeLP();\r\n        return true;\r\n    }"
}