{
    "contract_address": "0xEA96F358096DB436A74f5C974F59fdE3Bc5185e7",
    "heimdall_input": "function setMaxSize(uint256 arg0, uint256 arg1, uint256 arg2) public {\n        require(msg.sender == (address(getOwner)), \"Ownable: Caller is not owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1c;\n        var_d = 0x4f776e61626c653a2043616c6c6572206973206e6f74206f776e657200000000;\n        require((arg0 == ((arg0 * store_l) / store_l)) | !store_l);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        require((arg1 == ((arg1 * store_l) / store_l)) | !store_l);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        require((arg2 == ((arg2 * store_l) / store_l)) | !store_l);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        _maxxTrxSize = (arg0 * store_l) / 0x2710;\n        _maxxTransferSize = (arg1 * store_l) / 0x2710;\n        _maxxWalletSize = (arg2 * store_l) / 0x2710;\n        var_g = 0x18;\n        var_e = 0xdead;\n        require(!(store_l - store_n) > store_l);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MaxSizeManager {\n    address private owner;\n    uint256 private constant SCALE_FACTOR = 10000; // Equivalent to 0x2710 in hexadecimal\n    uint256 private storeL; // Placeholder for some stored value\n    uint256 private storeN; // Placeholder for some stored value\n\n    uint256 public maxTransactionSize;\n    uint256 public maxTransferSize;\n    uint256 public maxWalletSize;\n\n    event MaxSizesUpdated(uint256 maxTransactionSize, uint256 maxTransferSize, uint256 maxWalletSize);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: Caller is not the owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function setMaxSizes(uint256 transactionSize, uint256 transferSize, uint256 walletSize) external onlyOwner {\n        // Ensure the inputs are valid and do not cause overflow\n        require(isValidSize(transactionSize), \"Invalid transaction size\");\n        require(isValidSize(transferSize), \"Invalid transfer size\");\n        require(isValidSize(walletSize), \"Invalid wallet size\");\n\n        // Update the maximum sizes\n        maxTransactionSize = (transactionSize * storeL) / SCALE_FACTOR;\n        maxTransferSize = (transferSize * storeL) / SCALE_FACTOR;\n        maxWalletSize = (walletSize * storeL) / SCALE_FACTOR;\n\n        // Ensure the updated values are within acceptable limits\n        require(storeL - storeN <= storeL, \"Invalid state after update\");\n\n        emit MaxSizesUpdated(maxTransactionSize, maxTransferSize, maxWalletSize);\n    }\n\n    function isValidSize(uint256 size) private view returns (bool) {\n        // Check for overflow and ensure the size is valid\n        return (size == (size * storeL) / storeL) || storeL == 0;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}\n```\n\n### Key Improvements:\n1. **Readability**: Improved variable names to make the code more understandable (`transactionSize`, `transferSize`, `walletSize`, etc.).\n2. **Removed Redundant Code**: Removed unnecessary variables and repeated code blocks.\n3. **Constants**: Introduced a constant `SCALE_FACTOR` to replace the hardcoded value `0x2710`.\n4. **Modifiers**: Added an `onlyOwner` modifier to enforce access control.\n5. **Events**: Added an event `MaxSizesUpdated` to log updates to the maximum sizes.\n6. **Helper Function**: Created a helper function `isValidSize` to encapsulate the size validation logic.\n7. **Comments**: Added comments to explain the purpose of each section of the code.\n\nThis refactored code is clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function setMaxSize(uint256 _buy, uint256 _sell, uint256 _wallet) external onlyOwner {\r\n        uint256 newTx = _supplyTotal.mul(_buy).div(10000); uint256 newTransfer = _supplyTotal.mul(_sell).div(10000); uint256 newWallet = _supplyTotal.mul(_wallet).div(10000);\r\n        _maxxTrxSize = newTx; _maxxTransferSize = newTransfer; _maxxWalletSize = newWallet;\r\n        uint256 limit = totalSupply().mul(5).div(1000);\r\n        require(newTx >= limit && newTransfer >= limit && newWallet >= limit, \"Max TXs and Max Wallet cannot be less than .5%\");\r\n    }"
}