{
    "contract_address": "0x311f785e0fcb5A7c8990cdBe114e59A787116705",
    "heimdall_input": "function updateSellFees(uint256 arg0, uint256 arg1) public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        store_j = arg0;\n        store_k = arg1;\n        require(!(arg0 > (arg1 + arg0)), \"Must keep fees at 90% or less\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        sellTotalFees = store_k + arg0;\n        store_m = store_k + arg0;\n        require(!(0x5a < (arg1 + arg0)), \"Must keep fees at 90% or less\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1d;\n        var_d = 0x4d757374206b656570206665657320617420393025206f72206c657373000000;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract FeeManager {\n    address public owner;\n    uint256 public sellTotalFees;\n\n    event SellFeesUpdated(uint256 buyFee, uint256 sellFee);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Updates the buy and sell fees. The total fees must not exceed 90%.\n     * @param buyFee The fee for buying.\n     * @param sellFee The fee for selling.\n     */\n    function updateSellFees(uint256 buyFee, uint256 sellFee) public onlyOwner {\n        require(buyFee + sellFee <= 90, \"Must keep fees at 90% or less\");\n\n        sellTotalFees = buyFee + sellFee;\n\n        emit SellFeesUpdated(buyFee, sellFee);\n    }\n}\n```\n\n### Explanation of Improvements:\n1. **Readable Variable Names**: Replaced cryptic variable names like `arg0`, `arg1`, `store_j`, and `store_k` with meaningful names like `buyFee` and `sellFee`.\n2. **Removed Redundant Code**: Removed unnecessary variables and operations that were not contributing to the logic.\n3. **Added Comments**: Added comments to explain the purpose of the function and its parameters.\n4. **Event Emission**: Added an event `SellFeesUpdated` to log updates to the fees, which is a good practice for transparency.\n5. **Modifier for Ownership Check**: Introduced a `onlyOwner` modifier to simplify the ownership check and make the code reusable.\n6. **Constructor**: Added a constructor to initialize the `owner` variable.\n7. **Modern Solidity Practices**: Used Solidity 0.8.0+ features, such as built-in overflow checks, eliminating the need for manual checks.\n\nThis refactored code is clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function updateSellFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee\r\n    ) external onlyOwner {\r\n        sellMarketingFee = _marketingFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee;\r\n        previousFee = sellTotalFees;\r\n        require(sellTotalFees <= 90, \"Must keep fees at 90% or less\");\r\n    }"
}