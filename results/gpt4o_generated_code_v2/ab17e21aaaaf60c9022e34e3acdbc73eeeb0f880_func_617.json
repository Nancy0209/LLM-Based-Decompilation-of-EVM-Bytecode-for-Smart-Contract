{
    "contract_address": "0xAB17E21aaAaF60C9022E34e3AcdBC73EEeb0f880",
    "heimdall_input": "function updateBuyFees(uint256 arg0, uint256 arg1, uint256 arg2) public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        lastLpBurnTimee = arg0;\n        buyLiquidityFee = arg1;\n        buyDevFee = arg2;\n        require(!arg0 > (arg1 + arg0));\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract FeeManager {\n    address public owner;\n    uint256 public lastLpBurnTime;\n    uint256 public buyLiquidityFee;\n    uint256 public buyDevFee;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function updateBuyFees(uint256 _lastLpBurnTime, uint256 _buyLiquidityFee, uint256 _buyDevFee) public onlyOwner {\n        require(_lastLpBurnTime <= _buyLiquidityFee + _lastLpBurnTime, \"Invalid fee configuration\");\n\n        lastLpBurnTime = _lastLpBurnTime;\n        buyLiquidityFee = _buyLiquidityFee;\n        buyDevFee = _buyDevFee;\n    }\n}\n```\n\n### Explanation:\n- **Contract Name**: Changed to `FeeManager` for clarity.\n- **Owner Check**: Added a `modifier` called `onlyOwner` to simplify the owner check.\n- **Constructor**: Initializes the `owner` to the contract deployer.\n- **Function Parameters**: Renamed to `_lastLpBurnTime`, `_buyLiquidityFee`, and `_buyDevFee` for clarity.\n- **Require Statement**: Simplified the logic to ensure valid fee configuration.\n- **Removed Unused Variables**: Removed unnecessary variables from the decompiled code.",
    "ground_truth": "function updateBuyFees(\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        buyMarketingFee = _marketingFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyDevFee = _devFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\r\n        require(buyTotalFees <= 39, \"Must keep fees at 35% or less\");\r\n    }"
}