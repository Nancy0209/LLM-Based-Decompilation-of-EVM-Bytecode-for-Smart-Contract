{
    "contract_address": "0x2196c73Bee850827528bf2e164c33441834dFe03",
    "heimdall_input": "function balanceOf(address arg0) public view returns (uint64) {\n        require(arg0 == (address(arg0)));\n        require(address(arg0), CustomError_8f4eb604());\n        address var_a = address(arg0);\n        var_b = 0x05;\n        address var_c = uint64(storage_map_b[var_a]);\n        return uint64(storage_map_b[var_a]);\n        var_c = 0x8f4eb60400000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract TokenBalance {\n    // Mapping to store balances of addresses\n    mapping(address => uint64) private balances;\n\n    // Custom error for invalid address\n    error InvalidAddress();\n\n    /**\n     * @dev Returns the balance of the given address.\n     * @param account The address to query the balance of.\n     * @return The balance of the given address.\n     */\n    function balanceOf(address account) public view returns (uint64) {\n        // Ensure the provided address is valid\n        if (account == address(0)) {\n            revert InvalidAddress();\n        }\n\n        // Return the balance of the given address\n        return balances[account];\n    }\n}",
    "ground_truth": "function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }"
}