{
    "contract_address": "0x926911A3809B6e15FA9dab87A4beAE0E83361C75",
    "heimdall_input": "function updateMaxWalletAmount(uint256 arg0) public view {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(0x05) & (totalSupply > 0x3333333333333333333333333333333333333333333333333333333333333333));\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x03e8);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MaxWalletUpdater {\n    address private owner;\n    uint256 private totalSupply;\n\n    event MaxWalletAmountUpdated(uint256 newMaxWalletAmount);\n\n    constructor(uint256 _totalSupply) {\n        owner = msg.sender;\n        totalSupply = _totalSupply;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function updateMaxWalletAmount(uint256 newMaxWalletAmount) public onlyOwner {\n        require(totalSupply > 0, \"Total supply must be greater than zero\");\n        require(newMaxWalletAmount > 0, \"Max wallet amount must be greater than zero\");\n        require(newMaxWalletAmount <= totalSupply / 3, \"Max wallet amount exceeds one-third of total supply\");\n\n        emit MaxWalletAmountUpdated(newMaxWalletAmount);\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n\n    function getTotalSupply() external view returns (uint256) {\n        return totalSupply;\n    }\n}\n```\n\n### Explanation of Improvements:\n1. **Readable Function and Variable Names**: \n   - Renamed the function to `updateMaxWalletAmount` to reflect its purpose.\n   - Used descriptive variable names like `newMaxWalletAmount` and `totalSupply`.\n\n2. **Owner Check**:\n   - Added an `onlyOwner` modifier to simplify the owner check logic.\n\n3. **Require Statements**:\n   - Added clear and meaningful error messages for each `require` statement.\n   - Ensured the logic is clear and concise.\n\n4. **Event Emission**:\n   - Added an event `MaxWalletAmountUpdated` to log updates to the max wallet amount.\n\n5. **Constructor**:\n   - Added a constructor to initialize the `owner` and `totalSupply`.\n\n6. **Getter Functions**:\n   - Added getter functions `getOwner` and `getTotalSupply` for better contract usability.\n\nThis refactored code is clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 5 / 1000)/1e18, \"Cannot set maxWallet lower than 0.5%\");\r\n        maxWallet = newNum * (10**18);\r\n    }"
}