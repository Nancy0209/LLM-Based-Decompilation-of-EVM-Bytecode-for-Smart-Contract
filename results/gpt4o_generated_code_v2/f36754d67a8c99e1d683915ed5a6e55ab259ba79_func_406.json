{
    "contract_address": "0xF36754d67a8C99e1D683915ED5A6E55aB259ba79",
    "heimdall_input": "function set_Max_Transaction_Percent(uint256 arg0) public {\n        require(arg0 == arg0);\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!totalSupply | (arg0 == ((totalSupply * arg0) / totalSupply)));\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x2710);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        _maxTxAmount = (totalSupply * arg0) / 0x2710;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract TransactionLimit {\n    address public owner;\n    uint256 public totalSupply;\n    uint256 public maxTransactionAmount;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor(uint256 _totalSupply) {\n        owner = msg.sender;\n        totalSupply = _totalSupply;\n    }\n\n    /**\n     * @dev Sets the maximum transaction amount as a percentage of the total supply.\n     * @param percentage The percentage (in basis points, e.g., 10000 = 100%) of the total supply to set as the max transaction amount.\n     */\n    function setMaxTransactionPercent(uint256 percentage) external onlyOwner {\n        require(percentage > 0 && percentage <= 10000, \"Invalid percentage value\");\n        maxTransactionAmount = (totalSupply * percentage) / 10000;\n    }\n}\n```\n\n### Explanation of Changes:\n1. **Improved Naming**:\n   - Renamed the function to `setMaxTransactionPercent` for clarity.\n   - Renamed variables like `_maxTxAmount` to `maxTransactionAmount` for better readability.\n\n2. **Removed Redundant Code**:\n   - Removed unnecessary variables and operations that were not contributing to the logic.\n   - Simplified the logic to directly calculate the `maxTransactionAmount`.\n\n3. **Added `onlyOwner` Modifier**:\n   - Encapsulated the ownership check in a reusable `onlyOwner` modifier.\n\n4. **Validation**:\n   - Added a check to ensure the percentage is within a valid range (greater than 0 and less than or equal to 10000 basis points).\n\n5. **Constructor**:\n   - Added a constructor to initialize the `owner` and `totalSupply`.\n\n6. **Readability**:\n   - Used clear and concise comments to explain the function's purpose and parameters.\n\nThis refactored code is clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function set_Max_Transaction_Percent(uint256 maxTxPercent_x10000) external onlyOwner() {\r\n        _maxTxAmount = _tTotal*maxTxPercent_x10000/10000;\r\n    }"
}