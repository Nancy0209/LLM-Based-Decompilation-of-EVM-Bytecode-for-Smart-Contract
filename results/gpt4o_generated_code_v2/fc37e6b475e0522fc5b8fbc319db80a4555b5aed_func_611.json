{
    "contract_address": "0xfC37E6b475e0522fc5B8FBc319dB80a4555B5AeD",
    "heimdall_input": "function withdrawBalance() public {\n        require(msg.sender == (address(admin)), \"Only admin can call this function\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x21;\n        var_d = 0x4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f;\n        var_e = 0x6e00000000000000000000000000000000000000000000000000000000000000;\n        require(address(this).balance > 0, \"No balance to withdraw.\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x17;\n        var_d = 0x4e6f2062616c616e636520746f2077697468647261772e000000000000000000;\n        (bool success, bytes memory ret0) = address(admin).transfer(address(this).balance);\n        uint256 var_a = address(this).balance;\n        emit BalanceWithdrawn(address(this).balance);\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract BalanceManager {\n    address public admin;\n\n    event BalanceWithdrawn(uint256 amount);\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    function withdrawBalance() public {\n        require(msg.sender == admin, \"Only admin can call this function\");\n        require(address(this).balance > 0, \"No balance to withdraw.\");\n\n        uint256 balance = address(this).balance;\n        (bool success, ) = payable(admin).call{value: balance}(\"\");\n        require(success, \"Transfer failed.\");\n\n        emit BalanceWithdrawn(balance);\n    }\n\n    // Fallback function to receive Ether\n    receive() external payable {}\n}\n```\n\n### Explanation:\n1. **Contract Name**: I named the contract `BalanceManager` to reflect its purpose.\n2. **Admin Address**: The `admin` address is set in the constructor to the deployer of the contract.\n3. **Events**: An event `BalanceWithdrawn` is declared and emitted after a successful withdrawal.\n4. **Function Logic**: The `withdrawBalance` function checks if the caller is the admin and if there is a balance to withdraw. It then transfers the balance to the admin and emits an event.\n5. **Receive Function**: A `receive` function is added to allow the contract to accept Ether.",
    "ground_truth": "function withdrawBalance() public onlyAdmin {\\n        require(address(this).balance > 0, \\\"No balance to withdraw.\\\");\\n        uint256 amount = address(this).balance;\\n        payable(admin).transfer(amount);\\n        emit BalanceWithdrawn(amount);\\n    }"
}