{
    "contract_address": "0x4c5CbB44F1F835E2BbE255d8dBFb91A364b0D36B",
    "heimdall_input": "function setDefaultRoyalty(address arg0, uint96 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(arg1 == (uint96(arg1)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(uint96(arg1) > 0x2710), \"ERC2981: royalty fee will exceed salePrice\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x2a;\n        var_d = 0x455243323938313a20726f79616c7479206665652077696c6c20657863656564;\n        var_e = 0x2073616c65507269636500000000000000000000000000000000000000000000;\n        require(address(arg0), \"ERC2981: invalid receiver\");\n        uint256 var_f = 0x40 + var_f;\n        address var_a = address(arg0);\n        uint96 var_g = uint96(arg1);\n        store_r = (uint96(arg1) * 0x010000000000000000000000000000000000000000) | (address(arg0));\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x19;\n        var_d = 0x455243323938313a20696e76616c696420726563656976657200000000000000;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\ncontract RoyaltyManager is Ownable {\n    // Struct to store royalty information\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction; // Royalty fraction in basis points (e.g., 100 = 1%)\n    }\n\n    RoyaltyInfo private defaultRoyalty;\n\n    /**\n     * @dev Sets the default royalty information.\n     * @param receiver The address of the royalty receiver.\n     * @param royaltyFraction The royalty percentage in basis points (max 10000 = 100%).\n     */\n    function setDefaultRoyalty(address receiver, uint96 royaltyFraction) external onlyOwner {\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n        require(royaltyFraction <= 10000, \"ERC2981: royalty fee will exceed sale price\");\n\n        defaultRoyalty = RoyaltyInfo({\n            receiver: receiver,\n            royaltyFraction: royaltyFraction\n        });\n    }\n\n    /**\n     * @dev Returns the default royalty information.\n     * @return receiver The address of the royalty receiver.\n     * @return royaltyFraction The royalty percentage in basis points.\n     */\n    function getDefaultRoyalty() external view returns (address receiver, uint96 royaltyFraction) {\n        return (defaultRoyalty.receiver, defaultRoyalty.royaltyFraction);\n    }\n}\n```\n\n### Explanation of Changes:\n1. **Improved Naming**:\n   - Renamed variables to meaningful names (`arg0` \u2192 `receiver`, `arg1` \u2192 `royaltyFraction`).\n   - Introduced a `RoyaltyInfo` struct to encapsulate royalty data.\n\n2. **Removed Redundant Code**:\n   - Removed unnecessary intermediate variables (`var_a`, `var_b`, etc.).\n   - Simplified the logic to directly set the `defaultRoyalty`.\n\n3. **Validation**:\n   - Added checks to ensure the `receiver` is not the zero address.\n   - Added a check to ensure the `royaltyFraction` does not exceed 10000 basis points (100%).\n\n4. **Use of OpenZeppelin Contracts**:\n   - Imported `Ownable` for ownership management.\n   - Used `onlyOwner` modifier to restrict access to the `setDefaultRoyalty` function.\n\n5. **Readability**:\n   - Added comments to explain the purpose of each function and parameter.\n   - Organized the code into logical sections.\n\nThis refactored code is clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function setDefaultRoyalty(address receiver, uint96 feeNumerator) public onlyOwner {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }"
}