{
    "contract_address": "0x6ddfeC08B7597e9392abbC41CB8a74A0d59188C1",
    "heimdall_input": "function checkPremissionList(address arg0) public view returns (bool) {\n        require(arg0 == (address(arg0)));\n        address var_a = address(arg0);\n        var_b = 0x11;\n        address var_c = !(!bytes1(storage_map_b[var_a]));\n        return !(!bytes1(storage_map_b[var_a]));\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract PermissionChecker {\n    // Mapping to store the permission status of addresses\n    mapping(address => bool) private permissionList;\n\n    /**\n     * @dev Checks if an address is in the permission list.\n     * @param user The address to check.\n     * @return True if the address is in the permission list, false otherwise.\n     */\n    function isAddressPermitted(address user) public view returns (bool) {\n        require(user != address(0), \"Invalid address\");\n        return permissionList[user];\n    }\n\n    /**\n     * @dev Adds an address to the permission list.\n     * @param user The address to add.\n     */\n    function addAddressToPermissionList(address user) external {\n        require(user != address(0), \"Invalid address\");\n        permissionList[user] = true;\n    }\n\n    /**\n     * @dev Removes an address from the permission list.\n     * @param user The address to remove.\n     */\n    function removeAddressFromPermissionList(address user) external {\n        require(user != address(0), \"Invalid address\");\n        permissionList[user] = false;\n    }\n}",
    "ground_truth": "function checkPremissionList(address _user) external view returns (bool) {\r\n        return premissionList[_user];\r\n    }"
}