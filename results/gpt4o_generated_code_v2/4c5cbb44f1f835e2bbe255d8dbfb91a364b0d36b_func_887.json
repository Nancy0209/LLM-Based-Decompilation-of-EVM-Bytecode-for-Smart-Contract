{
    "contract_address": "0x4c5CbB44F1F835E2BbE255d8dBFb91A364b0D36B",
    "heimdall_input": "function royaltyInfo(uint256 arg0, uint256 arg1) public view returns (bytes memory) {\n        uint256 var_a = arg0;\n        var_b = 0x0b;\n        uint256 var_c = 0x40 + var_c;\n        uint256 var_d = address(storage_map_b[var_a]);\n        uint256 var_e = uint96(storage_map_b[var_a] / 0x010000000000000000000000000000000000000000);\n        require(address(storage_map_b[var_a]));\n        require(uint96(var_f) == ((uint96(var_f) * arg1) / arg1) | !arg1);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x2710);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        uint256 var_h = address(var_c.length);\n        uint256 var_i = (uint96(var_f) * arg1) / 0x2710;\n        return abi.encodePacked(address(var_c.length), (uint96(var_j) * arg1) / 0x2710);\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract RoyaltyInfo {\n    // Mapping to store royalty information: tokenId => (receiver address, royalty percentage in basis points)\n    mapping(uint256 => Royalty) private _royalties;\n\n    struct Royalty {\n        address receiver;\n        uint96 basisPoints; // Royalty percentage in basis points (1% = 100 basis points)\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token ID.\n     * @param tokenId The token ID for which to set the royalty information.\n     * @param receiver The address of the royalty receiver.\n     * @param basisPoints The royalty percentage in basis points (1% = 100 basis points).\n     */\n    function setRoyaltyInfo(\n        uint256 tokenId,\n        address receiver,\n        uint96 basisPoints\n    ) external {\n        require(receiver != address(0), \"Invalid receiver address\");\n        require(basisPoints <= 10000, \"Basis points exceed 100%\"); // 10000 basis points = 100%\n\n        _royalties[tokenId] = Royalty(receiver, basisPoints);\n    }\n\n    /**\n     * @dev Returns the royalty information for a given token ID and sale price.\n     * @param tokenId The token ID for which to retrieve the royalty information.\n     * @param salePrice The sale price of the token.\n     * @return receiver The address of the royalty receiver.\n     * @return royaltyAmount The calculated royalty amount based on the sale price.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        Royalty memory royalty = _royalties[tokenId];\n        require(royalty.receiver != address(0), \"Royalty info not set\");\n\n        royaltyAmount = (salePrice * royalty.basisPoints) / 10000; // Calculate royalty amount\n        return (royalty.receiver, royaltyAmount);\n    }\n}\n```\n\n### Explanation of Changes:\n1. **Improved Naming**:\n   - Renamed variables to meaningful names (`arg0` \u2192 `tokenId`, `arg1` \u2192 `salePrice`, etc.).\n   - Introduced a `Royalty` struct to store royalty information for better readability.\n\n2. **Removed Redundant Code**:\n   - Removed unnecessary variables and operations that were not contributing to the logic.\n\n3. **Added Validation**:\n   - Added checks to ensure the receiver address is valid and the basis points are within a valid range (0\u201310000).\n\n4. **Simplified Logic**:\n   - Simplified the royalty calculation logic to make it clear and concise.\n\n5. **Added Comments**:\n   - Added comments to explain the purpose of each function and the logic within.\n\n6. **Modern Solidity Practices**:\n   - Used `pragma solidity ^0.8.0` to leverage the latest Solidity features, such as built-in overflow checks.\n\nThis refactored code is clean, readable, and ready for deployment.",
    "ground_truth": "function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }"
}