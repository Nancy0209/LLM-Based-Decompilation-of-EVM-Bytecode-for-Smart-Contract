{
    "contract_address": "0xc921a48b2bBd243aC30422B266edf58F472Eca7F",
    "heimdall_input": "function setRewardsWallet(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        store_h = (address(arg0)) | (uint96(store_h));\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract RewardsWalletManager {\n    address public owner;\n    address public rewardsWallet;\n\n    event RewardsWalletUpdated(address indexed newRewardsWallet);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function setRewardsWallet(address newRewardsWallet) public onlyOwner {\n        require(newRewardsWallet != address(0), \"Invalid address: zero address\");\n        rewardsWallet = newRewardsWallet;\n        emit RewardsWalletUpdated(newRewardsWallet);\n    }\n}\n```\n\n### Explanation:\n- **Contract Name**: Changed to `RewardsWalletManager` to reflect its purpose.\n- **Owner Management**: Added an `owner` state variable and a constructor to set the contract deployer as the owner.\n- **Modifiers**: Introduced `onlyOwner` modifier to handle owner checks.\n- **Events**: Added an event `RewardsWalletUpdated` to log changes to the rewards wallet.\n- **Functionality**: Simplified the `setRewardsWallet` function to update the `rewardsWallet` address and emit an event.\n- **Error Handling**: Added a check to prevent setting the rewards wallet to the zero address.",
    "ground_truth": "function setRewardsWallet(address _wallet) public onlyOwner {\\r\\n        rewardsWallet = _wallet;\\r\\n    }"
}