{
    "contract_address": "0x54eEA875389f51FB46A26Ea5a5DbBa480ca74339",
    "heimdall_input": "function withdrawStuckTokens(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(this);\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!(((var_e + ret0.length) - var_e) < 0x20), \"No tokens\");\n        require(var_e.length > 0, \"No tokens\");\n        var_f = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x20;\n        var_d = 0x09;\n        var_g = 0x4e6f20746f6b656e730000000000000000000000000000000000000000000000;\n        var_f = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_c = address(this);\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_70a08231(var_c); // staticcall\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract TokenRecovery {\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Allows the owner to withdraw any ERC20 tokens mistakenly sent to the contract.\n     * @param tokenAddress The address of the ERC20 token to withdraw.\n     */\n    function withdrawStuckTokens(address tokenAddress) external onlyOwner {\n        require(tokenAddress != address(0), \"Invalid token address\");\n\n        // Get the token balance of this contract\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\n        require(tokenBalance > 0, \"No tokens to withdraw\");\n\n        // Transfer the tokens to the owner\n        bool success = IERC20(tokenAddress).transfer(owner, tokenBalance);\n        require(success, \"Token transfer failed\");\n    }\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n```\n\n### Explanation of Changes:\n1. **Contract Name**: Renamed the contract to `TokenRecovery` to reflect its purpose.\n2. **Owner Management**: Added an `owner` state variable and a constructor to initialize it. Introduced an `onlyOwner` modifier for access control.\n3. **ERC20 Interface**: Added an `IERC20` interface to interact with ERC20 tokens. This makes the code clean and adheres to best practices.\n4. **Functionality**: Simplified the logic to check the token balance and transfer tokens using the ERC20 interface.\n5. **Error Messages**: Added meaningful error messages for better debugging.\n6. **Readability**: Removed unnecessary variables and replaced them with clear and concise logic.\n\nThis code is now clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function withdrawStuckTokens(address tkn) public onlyOwner {\r\n        require(IERC20(tkn).balanceOf(address(this)) > 0, \"No tokens\");\r\n        uint256 amount = IERC20(tkn).balanceOf(address(this));\r\n        IERC20(tkn).transfer(msg.sender, amount);\r\n    }"
}