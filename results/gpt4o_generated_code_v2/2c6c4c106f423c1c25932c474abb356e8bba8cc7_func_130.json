{
    "contract_address": "0x2C6C4c106F423c1C25932c474Abb356e8BBa8cC7",
    "heimdall_input": "function supportsInterface(bytes4 arg0) public pure returns (bool) {\n        require(arg0 == (uint32(arg0)));\n        require(0x7965db0b00000000000000000000000000000000000000000000000000000000 == (uint32(arg0)));\n        uint32 var_a = !(!0x7965db0b00000000000000000000000000000000000000000000000000000000 == (uint32(arg0)));\n        return !(!0x7965db0b00000000000000000000000000000000000000000000000000000000 == (uint32(arg0)));\n        require(0x780e9d6300000000000000000000000000000000000000000000000000000000 == (uint32(arg0)));\n        var_a = !(!0x780e9d6300000000000000000000000000000000000000000000000000000000 == (uint32(arg0)));\n        return !(!0x780e9d6300000000000000000000000000000000000000000000000000000000 == (uint32(arg0)));\n        require(0x80ac58cd00000000000000000000000000000000000000000000000000000000 == (uint32(arg0)));\n        require(0x80ac58cd00000000000000000000000000000000000000000000000000000000 == (uint32(arg0)));\n        var_a = !(!0x80ac58cd00000000000000000000000000000000000000000000000000000000 == (uint32(arg0)));\n        return !(!0x80ac58cd00000000000000000000000000000000000000000000000000000000 == (uint32(arg0)));\n        var_a = !(!(uint32(arg0)) == 0x01ffc9a700000000000000000000000000000000000000000000000000000000);\n        return !(!(uint32(arg0)) == 0x01ffc9a700000000000000000000000000000000000000000000000000000000);\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract InterfaceSupport {\n    // Define constants for the supported interface IDs\n    bytes4 private constant INTERFACE_ID_ERC165 = 0x01ffc9a7;\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\n    bytes4 private constant INTERFACE_ID_ERC721_METADATA = 0x780e9d63;\n    bytes4 private constant INTERFACE_ID_ERC721_ENUMERABLE = 0x7965db0b;\n\n    /**\n     * @dev Checks if the contract supports a given interface.\n     * @param interfaceId The interface identifier, as specified in ERC-165.\n     * @return True if the contract supports the given interface, false otherwise.\n     */\n    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\n        return interfaceId == INTERFACE_ID_ERC165 ||\n               interfaceId == INTERFACE_ID_ERC721 ||\n               interfaceId == INTERFACE_ID_ERC721_METADATA ||\n               interfaceId == INTERFACE_ID_ERC721_ENUMERABLE;\n    }\n}\n```\n\n### Explanation of Changes:\n1. **Constants for Interface IDs**: The interface IDs are defined as constants with descriptive names, making the code easier to understand and maintain.\n2. **Simplified Logic**: The redundant and convoluted logic has been replaced with a simple `return` statement that checks if the `interfaceId` matches any of the supported interface IDs.\n3. **ERC-165 Compliance**: The function is written to comply with the ERC-165 standard, which specifies how contracts declare support for interfaces.\n4. **Readability**: The code is now clean, readable, and self-explanatory, with proper naming conventions and comments.\n\nThis refactored code is ready to be compiled and deployed.",
    "ground_truth": "function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }"
}