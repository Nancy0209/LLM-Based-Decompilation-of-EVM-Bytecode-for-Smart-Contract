{
    "contract_address": "0x842FD31eAd327AE42D19B7BFbdB045d3A219c662",
    "heimdall_input": "function recoverERC20(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(0xf6f50011df50e1180dc78f4a8237f293f30a3b27 == msg.sender);\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(this);\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        var_d = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        var_e = 0xf6f50011df50e1180dc78f4a8237f293f30a3b27;\n        uint256 var_f = var_c.length;\n        (bool success, bytes memory ret0) = address(arg0).{ value: 0 ether }Unresolved_a9059cbb(var_e); // call\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_c.length == var_c.length);\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_e = 0x2a;\n        var_f = 0x4f6e6c79206f726967696e616c206f776e65722063616e2063616c6c20746869;\n        var_g = 0x732066756e6374696f6e00000000000000000000000000000000000000000000;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract ERC20Recovery {\n    address private immutable owner;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    /**\n     * @notice Allows the contract owner to recover ERC20 tokens accidentally sent to this contract.\n     * @param tokenAddress The address of the ERC20 token to recover.\n     */\n    function recoverERC20(address tokenAddress) external {\n        require(msg.sender == owner, \"Only the contract owner can call this function\");\n        require(tokenAddress != address(0), \"Invalid token address\");\n\n        // Get the token balance of this contract\n        uint256 contractBalance = IERC20(tokenAddress).balanceOf(address(this));\n        require(contractBalance > 0, \"No tokens to recover\");\n\n        // Transfer the tokens to the owner\n        bool success = IERC20(tokenAddress).transfer(owner, contractBalance);\n        require(success, \"Token transfer failed\");\n    }\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n```\n\n### Key Improvements:\n1. **Added SPDX License Identifier**: Ensures compliance with Solidity standards.\n2. **Used `pragma solidity ^0.8.0`**: Specifies the Solidity version and avoids issues like integer overflow/underflow.\n3. **Introduced `IERC20` Interface**: Provides a clean and standard way to interact with ERC20 tokens.\n4. **Renamed Variables**: Improved readability by using descriptive names like `tokenAddress`, `contractBalance`, and `owner`.\n5. **Simplified Logic**: Removed unnecessary computations and replaced them with direct calls to the ERC20 interface.\n6. **Added Error Messages**: Provides clear feedback when a requirement fails.\n7. **Used `immutable` for `owner`**: Optimizes gas usage and ensures the owner cannot be changed after deployment.\n\nThis code is now clean, readable, and ready for deployment.",
    "ground_truth": "function recoverERC20(address _token) external {\r\n        require(msg.sender == originalOwner, \"Only original owner can call this function\");\r\n        uint256 fullAmount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(originalOwner, fullAmount);\r\n    }"
}