{
    "contract_address": "0x4c5CbB44F1F835E2BbE255d8dBFb91A364b0D36B",
    "heimdall_input": "function setSalePhase(uint256 arg0) public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        salePhase = arg0;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SalePhaseManager {\n    address public owner;\n    uint256 public salePhase;\n\n    // Modifier to restrict access to the owner\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    // Constructor to set the initial owner\n    constructor() {\n        owner = msg.sender;\n    }\n\n    // Function to update the sale phase\n    function setSalePhase(uint256 _salePhase) public onlyOwner {\n        salePhase = _salePhase;\n    }\n}\n```\n\n### Explanation of Improvements:\n1. **Added SPDX License Identifier**: Ensures compliance with best practices.\n2. **Updated Solidity Version**: Used `pragma solidity ^0.8.0` for modern features and safety (e.g., built-in overflow checks).\n3. **Improved Naming**: Renamed `arg0` to `_salePhase` for clarity and readability.\n4. **Removed Unnecessary Variables**: The decompiled code contained unused variables (`var_a`, `var_b`, `var_c`, `var_d`) that were irrelevant to the function's logic.\n5. **Added `onlyOwner` Modifier**: Simplified the ownership check by introducing a reusable modifier.\n6. **Added Constructor**: Ensures the `owner` is set when the contract is deployed.\n7. **Clean and Readable Code**: The function is now concise and adheres to Solidity best practices.",
    "ground_truth": "function setSalePhase(uint256 phase) external onlyOwner {\\n        salePhase = phase;\\n    }"
}