{
    "contract_address": "0x15C20cF168b7A84E9C56ADbf233b80Fc40090e7a",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_c) {\n            if (store_c - ((store_c / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_c / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_c / 0x02;\n                if (store_c) {\n                    if (store_c - ((store_c / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_c / 0x02) {\n                            if (0x1f < (store_c / 0x02)) {\n                                var_a = 0x68;\n                                var_e = storage_map_d[var_a];\n                                if ((0x20 + var_c) + (store_c / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "pragma solidity ^0.8.0;\n\ncontract RefactoredContract {\n    string private contractName;\n    mapping(uint256 => bytes32) private storageMap;\n\n    constructor(string memory _name) {\n        contractName = _name;\n    }\n\n    function name() public view returns (string memory) {\n        uint256 nameLength = bytes(contractName).length;\n        if (nameLength == 0) {\n            return \"\";\n        }\n\n        uint256 halfLength = nameLength / 2;\n        if (halfLength < 32) {\n            revert(\"Invalid name length\");\n        }\n\n        uint256 paddedLength = ((halfLength + 31) / 32) * 32;\n        bytes memory encodedName = abi.encodePacked(contractName);\n\n        if (paddedLength + halfLength > paddedLength + 32) {\n            uint256 offset = paddedLength - halfLength;\n            return string(encodedName[offset:]);\n        }\n\n        return contractName;\n    }\n}\n```\n\n### Explanation:\n1. **Contract Name**: The contract is given a meaningful name `RefactoredContract`.\n2. **State Variables**: `contractName` is used to store the name of the contract, and `storageMap` is a mapping for demonstration purposes.\n3. **Constructor**: Initializes the contract with a name.\n4. **Function `name`**: \n   - Calculates the length of the contract name.\n   - Checks if the name length is valid.\n   - Computes the padded length for encoding.\n   - Encodes the name using `abi.encodePacked`.\n   - Returns the name or a substring based on the calculated offset.\n5. **Error Handling**: Uses `revert` for invalid conditions.",
    "ground_truth": "function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }"
}