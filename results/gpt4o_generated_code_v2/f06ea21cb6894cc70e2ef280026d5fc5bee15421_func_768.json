{
    "contract_address": "0xf06ea21cB6894CC70e2EF280026D5Fc5bEE15421",
    "heimdall_input": "function disableStaking() public payable {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        isStakingAvilable = uint248(isStakingAvilable);\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract StakingContract {\n    address public owner;\n    bool public isStakingAvailable;\n\n    constructor() {\n        owner = msg.sender;\n        isStakingAvailable = true;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function disableStaking() public onlyOwner {\n        isStakingAvailable = false;\n    }\n}\n```\n\n### Explanation:\n- **Contract Name**: Renamed the contract to `StakingContract` for clarity.\n- **Owner Management**: Added an `owner` state variable and initialized it in the constructor.\n- **Modifier**: Created an `onlyOwner` modifier to handle owner checks, improving code readability and reusability.\n- **State Variable**: Changed `isStakingAvilable` to `isStakingAvailable` and used a `bool` type for clarity.\n- **Function Logic**: Simplified the `disableStaking` function to set `isStakingAvailable` to `false`, removing unnecessary variables and operations.",
    "ground_truth": "function disableStaking() external onlyOwner{\r\n        isStakingAvilable=false;\r\n    }"
}