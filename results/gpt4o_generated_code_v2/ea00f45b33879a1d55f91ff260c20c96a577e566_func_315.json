{
    "contract_address": "0xEA00f45b33879A1D55f91ff260C20c96a577E566",
    "heimdall_input": "function updateMaxWalletAmount(uint256 arg0) public view {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(0x05) & (totalSupply > 0x3333333333333333333333333333333333333333333333333333333333333333));\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x03e8);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MaxWalletUpdater {\n    address public owner;\n    uint256 public maxWalletAmount;\n    uint256 public totalSupply;\n\n    event MaxWalletAmountUpdated(uint256 newMaxWalletAmount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor(uint256 _totalSupply) {\n        owner = msg.sender;\n        totalSupply = _totalSupply;\n    }\n\n    /**\n     * @dev Updates the maximum wallet amount.\n     * @param newMaxWalletAmount The new maximum wallet amount to be set.\n     */\n    function updateMaxWalletAmount(uint256 newMaxWalletAmount) external onlyOwner {\n        require(\n            newMaxWalletAmount > 0 && newMaxWalletAmount <= totalSupply / 3,\n            \"Invalid max wallet amount: must be greater than 0 and less than or equal to one-third of total supply\"\n        );\n\n        maxWalletAmount = newMaxWalletAmount;\n        emit MaxWalletAmountUpdated(newMaxWalletAmount);\n    }\n}\n```\n\n### Explanation of Changes:\n1. **Improved Naming**:\n   - Renamed the function to `updateMaxWalletAmount` for clarity.\n   - Used descriptive variable names like `owner`, `maxWalletAmount`, and `totalSupply`.\n\n2. **Added Constructor**:\n   - Added a constructor to initialize the `owner` and `totalSupply` variables.\n\n3. **Added Modifier**:\n   - Created an `onlyOwner` modifier to simplify the ownership check.\n\n4. **Simplified Logic**:\n   - Removed unnecessary variables and replaced them with clear and concise logic.\n   - Added a proper validation for `newMaxWalletAmount` to ensure it is within acceptable bounds.\n\n5. **Event Emission**:\n   - Added an event `MaxWalletAmountUpdated` to log changes to the `maxWalletAmount`.\n\n6. **Modern Solidity Syntax**:\n   - Used `pragma solidity ^0.8.0` to leverage modern Solidity features like built-in overflow checks.\n\nThis refactored code is clean, readable, and ready for deployment.",
    "ground_truth": "function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot set maxWallet lower than 0.5%\"\r\n        );\r\n        maxWallet = newNum * (10**18);\r\n    }"
}