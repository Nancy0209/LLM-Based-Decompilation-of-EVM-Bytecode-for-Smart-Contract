{
    "contract_address": "0x780c7f2FdF0D47F25f5858975DBd0159DB50C1B2",
    "heimdall_input": "function updatePebbleDevLevySecureCache(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(address(_owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        emit PebbleDevLevySecureCacheUpdated(address(arg0), address(PebbleDevLevySecureCache / 0x01));\n        PebbleDevLevySecureCache = (address(arg0) * 0x01) | (uint96(PebbleDevLevySecureCache));\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract PebbleDevLevySecureCacheManager {\n    address private owner;\n    address private pebbleDevLevySecureCache;\n\n    event PebbleDevLevySecureCacheUpdated(address indexed newAddress, address indexed oldAddress);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function updatePebbleDevLevySecureCache(address newAddress) public onlyOwner {\n        require(newAddress != address(0), \"Invalid address\");\n\n        address oldAddress = pebbleDevLevySecureCache;\n        pebbleDevLevySecureCache = newAddress;\n\n        emit PebbleDevLevySecureCacheUpdated(newAddress, oldAddress);\n    }\n\n    function getPebbleDevLevySecureCache() public view returns (address) {\n        return pebbleDevLevySecureCache;\n    }\n}\n```\n\n### Explanation:\n- **Owner Management**: Added an `owner` state variable and a `modifier` called `onlyOwner` to restrict access to the `updatePebbleDevLevySecureCache` function.\n- **Event Emission**: The event `PebbleDevLevySecureCacheUpdated` is emitted with both the new and old addresses for better traceability.\n- **Constructor**: Initializes the `owner` to the address that deploys the contract.\n- **Address Validation**: Added a check to ensure the new address is not the zero address.\n- **Getter Function**: Added a public getter function `getPebbleDevLevySecureCache` to retrieve the current address of `pebbleDevLevySecureCache`.",
    "ground_truth": "function updatePebbleDevLevySecureCache(address newWallet) external onlyOwner {\\r\\n        emit PebbleDevLevySecureCacheUpdated(newWallet, PebbleDevLevySecureCache);\\r\\n        PebbleDevLevySecureCache = newWallet;\\r\\n    }"
}