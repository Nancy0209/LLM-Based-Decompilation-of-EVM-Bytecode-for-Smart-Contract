{
    "contract_address": "0x2196c73Bee850827528bf2e164c33441834dFe03",
    "heimdall_input": "function getApproved(uint256 arg0) public view returns (address) {\n        require(!(!0x01 > arg0), CustomError_cf4700e4());\n        require(!(arg0 < totalSupply), CustomError_cf4700e4());\n        uint256 var_a = arg0;\n        var_b = 0x04;\n        require(!(bytes1(storage_map_b[var_a])), CustomError_cf4700e4());\n        var_c = 0xcf4700e400000000000000000000000000000000000000000000000000000000;\n        var_a = arg0;\n        var_b = 0x06;\n        uint256 var_c = address(storage_map_b[var_a]);\n        return address(storage_map_b[var_a]);\n        require(arg0 < totalSupply, CustomError_cf4700e4());\n        var_a = arg0;\n        var_b = 0x06;\n        var_c = address(storage_map_b[var_a]);\n        return address(storage_map_b[var_a]);\n        var_c = 0xcf4700e400000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract TokenApproval {\n    // State variables\n    uint256 public totalSupply;\n    mapping(uint256 => address) private tokenApprovals;\n\n    // Custom error for invalid token ID\n    error InvalidTokenId();\n\n    /**\n     * @dev Returns the approved address for a specific token ID.\n     * @param tokenId The ID of the token to query the approval for.\n     * @return The address approved for the given token ID.\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        // Ensure the token ID is valid\n        if (tokenId >= totalSupply) {\n            revert InvalidTokenId();\n        }\n\n        // Return the approved address for the token ID\n        return tokenApprovals[tokenId];\n    }\n}\n```\n\n### Explanation of Changes:\n1. **Improved Naming**:\n   - Renamed `arg0` to `tokenId` for clarity.\n   - Renamed `storage_map_b` to `tokenApprovals` to better reflect its purpose.\n\n2. **Removed Redundant Code**:\n   - Removed unnecessary variables (`var_a`, `var_b`, `var_c`) and redundant operations.\n   - Simplified the logic to directly return the approved address.\n\n3. **Custom Error**:\n   - Introduced a custom error `InvalidTokenId` for better gas efficiency and readability.\n\n4. **Modern Solidity Practices**:\n   - Used `pragma solidity ^0.8.0` to leverage the latest features and built-in overflow checks.\n   - Added a `totalSupply` state variable to represent the total number of tokens.\n\n5. **Clean Structure**:\n   - Organized the code into a readable and logical format.\n   - Added comments to explain the functionality.\n\nThis refactored code is clean, readable, and adheres to modern Solidity best practices.",
    "ground_truth": "function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId].value;\r\n    }"
}