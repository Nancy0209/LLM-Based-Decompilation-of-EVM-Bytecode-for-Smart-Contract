{
    "contract_address": "0x54eEA875389f51FB46A26Ea5a5DbBa480ca74339",
    "heimdall_input": "function decreaseAllowance(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        address var_a = address(msg.sender);\n        var_b = 0x01;\n        var_a = address(arg0);\n        address var_b = keccak256(var_a);\n        require(!(storage_map_b[var_a] < arg1), \"ERC20: decreased allowance below zero\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77;\n        var_g = 0x207a65726f000000000000000000000000000000000000000000000000000000;\n        require(address(msg.sender), \"ERC20: approve to the zero address\");\n        require(address(arg0), \"ERC20: approve to the zero address\");\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        var_a = address(arg0);\n        var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        uint256 var_c = storage_map_b[var_a] - arg1;\n        emit Approval(address(msg.sender), address(arg0), storage_map_b[var_a] - arg1);\n        var_c = 0x01;\n        return 0x01;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x22;\n        var_f = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_g = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x24;\n        var_f = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_g = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "pragma solidity ^0.8.0;\n\ncontract ERC20Token {\n    mapping(address => mapping(address => uint256)) private allowances;\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function decreaseAllowance(address spender, uint256 amount) public returns (bool) {\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        address owner = msg.sender;\n        uint256 currentAllowance = allowances[owner][spender];\n        require(currentAllowance >= amount, \"ERC20: decreased allowance below zero\");\n\n        unchecked {\n            allowances[owner][spender] = currentAllowance - amount;\n        }\n\n        emit Approval(owner, spender, allowances[owner][spender]);\n        return true;\n    }\n}\n```\n\n### Explanation:\n1. **Pragma Directive**: The code specifies the Solidity version to ensure compatibility and security.\n2. **Contract Name**: The contract is named `ERC20Token` to reflect its purpose.\n3. **State Variables**: A mapping `allowances` is used to track the allowances of each owner-spender pair.\n4. **Event Declaration**: The `Approval` event is declared to log changes in allowances.\n5. **Function `decreaseAllowance`**:\n   - **Input Validation**: Checks if the `spender` address is not zero.\n   - **Allowance Check**: Ensures the current allowance is sufficient to cover the decrease.\n   - **Allowance Update**: Uses `unchecked` to safely subtract the allowance without overflow checks, as the requirement ensures safety.\n   - **Event Emission**: Emits the `Approval` event to log the updated allowance.\n   - **Return Value**: Returns `true` to indicate successful execution.",
    "ground_truth": "function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }"
}