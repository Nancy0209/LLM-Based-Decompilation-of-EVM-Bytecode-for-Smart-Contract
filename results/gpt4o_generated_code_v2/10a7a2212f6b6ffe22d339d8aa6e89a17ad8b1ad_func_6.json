{
    "contract_address": "0x10A7A2212f6b6ffE22d339D8Aa6e89a17ad8b1ad",
    "heimdall_input": "function withdrawStuckEth(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender) == (address(devWallet / 0x01)));\n        (bool success, bytes memory ret0) = address(arg0).transfer(address(this).balance);\n        require(ret0.length == 0);\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract StuckEthRecovery {\n    address public devWallet;\n\n    constructor(address _devWallet) {\n        require(_devWallet != address(0), \"Invalid developer wallet address\");\n        devWallet = _devWallet;\n    }\n\n    /**\n     * @notice Allows the developer to withdraw all Ether stuck in the contract.\n     * @param recipient The address to which the Ether will be sent.\n     */\n    function withdrawStuckEth(address payable recipient) external {\n        require(msg.sender == devWallet, \"Only the developer can withdraw\");\n        require(recipient != address(0), \"Invalid recipient address\");\n\n        uint256 contractBalance = address(this).balance;\n        require(contractBalance > 0, \"No Ether to withdraw\");\n\n        (bool success, ) = recipient.call{value: contractBalance}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    // Fallback function to accept Ether\n    receive() external payable {}\n}",
    "ground_truth": "function withdrawStuckEth(address toAddr) external onlyDev {\n        (bool success, ) = toAddr.call{value: address(this).balance}(\"\");\n        require(success);\n    }"
}