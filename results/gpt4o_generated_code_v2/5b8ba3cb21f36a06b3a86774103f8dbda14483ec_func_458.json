{
    "contract_address": "0x5B8BA3cb21F36a06b3a86774103F8dBDa14483EC",
    "heimdall_input": "function mint() public payable {\n        require(store_l < 0x01bc, \"Maximum supply reached\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x16;\n        var_e = 0x4d6178696d756d20737570706c79207265616368656400000000000000000000;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var_b = address(msg.sender);\n        (bool success, bytes memory ret0) = address(0xfb6b23ade938ed16f769833b2ff92ca26303390b).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_f == (var_f));\n        require(!(var_f < currentPrice), \"Insufficient payment token balance\");\n        var_g = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_d = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_e = 0x22;\n        var_h = 0x496e73756666696369656e74207061796d656e7420746f6b656e2062616c616e;\n        var_i = 0x6365000000000000000000000000000000000000000000000000000000000000;\n        var_g = 0xdd62ed3e00000000000000000000000000000000000000000000000000000000;\n        var_d = address(msg.sender);\n        address var_e = address(this);\n        (bool success, bytes memory ret0) = address(0xfb6b23ade938ed16f769833b2ff92ca26303390b).Unresolved_dd62ed3e(var_d); // staticcall\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MintingContract {\n    address private constant TOKEN_ADDRESS = 0xfb6b23ade938ed16f769833b2ff92ca26303390b;\n    uint256 private constant MAX_SUPPLY = 0x01bc;\n    uint256 private constant INSUFFICIENT_BALANCE_ERROR = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 private constant INSUFFICIENT_PAYMENT_ERROR = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 private constant BALANCE_OF_SELECTOR = 0x70a08231;\n    uint256 private constant ALLOWANCE_SELECTOR = 0xdd62ed3e;\n\n    uint256 public currentPrice;\n    uint256 public totalSupply;\n\n    function mint() public payable {\n        require(totalSupply < MAX_SUPPLY, \"Maximum supply reached\");\n\n        // Check token balance of the sender\n        uint256 senderBalance = getTokenBalance(msg.sender);\n        require(senderBalance >= currentPrice, \"Insufficient payment token balance\");\n\n        // Check token allowance\n        uint256 senderAllowance = getTokenAllowance(msg.sender);\n        require(senderAllowance >= currentPrice, \"Insufficient token allowance\");\n\n        // Mint logic here\n        totalSupply += 1;\n    }\n\n    function getTokenBalance(address account) internal view returns (uint256) {\n        (bool success, bytes memory data) = TOKEN_ADDRESS.staticcall(\n            abi.encodeWithSelector(BALANCE_OF_SELECTOR, account)\n        );\n        require(success, \"Failed to get token balance\");\n        return abi.decode(data, (uint256));\n    }\n\n    function getTokenAllowance(address account) internal view returns (uint256) {\n        (bool success, bytes memory data) = TOKEN_ADDRESS.staticcall(\n            abi.encodeWithSelector(ALLOWANCE_SELECTOR, account, address(this))\n        );\n        require(success, \"Failed to get token allowance\");\n        return abi.decode(data, (uint256));\n    }\n}\n```\n\n### Explanation:\n- **Constants**: Defined constants for token address, maximum supply, and error messages to improve readability.\n- **Selectors**: Used `abi.encodeWithSelector` for balance and allowance checks.\n- **Functions**: Created helper functions `getTokenBalance` and `getTokenAllowance` to encapsulate logic for balance and allowance checks.\n- **Error Handling**: Used `require` statements with clear error messages.\n- **State Variables**: Added `currentPrice` and `totalSupply` to manage minting logic.",
    "ground_truth": "function mint() external {\r\n        require(_tokenIdCounter.current() < MAX_SUPPLY, \"Maximum supply reached\");\r\n        require(paymentToken.balanceOf(msg.sender) >= currentPrice, \"Insufficient payment token balance\");\r\n        require(paymentToken.allowance(msg.sender, address(this)) >= currentPrice, \"Token allowance not provided\");\r\n\r\n        paymentToken.transferFrom(msg.sender, owner(), currentPrice);\r\n\r\n        _tokenIdCounter.increment();\r\n        uint256 newTokenId = _tokenIdCounter.current();\r\n        _safeMint(msg.sender, newTokenId);\r\n    }"
}