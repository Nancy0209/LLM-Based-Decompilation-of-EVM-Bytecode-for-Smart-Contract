{
    "contract_address": "0xa5f88146Cff0673fCea44A32ddB845302c835619",
    "heimdall_input": "function updateMaxWalletAmount(uint256 arg0) public view {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require((totalSupply == ((totalSupply * 0x05) / 0x05)) | !0x05);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x03e8);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract TokenContract {\n    address private owner;\n    uint256 private totalSupply;\n    uint256 private maxWalletAmount;\n\n    event MaxWalletAmountUpdated(uint256 newMaxWalletAmount);\n\n    constructor(uint256 _totalSupply) {\n        owner = msg.sender;\n        totalSupply = _totalSupply;\n        maxWalletAmount = (totalSupply * 5) / 100; // Default to 5% of total supply\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Updates the maximum wallet amount. Only the owner can call this function.\n     * @param newMaxWalletAmount The new maximum wallet amount.\n     */\n    function updateMaxWalletAmount(uint256 newMaxWalletAmount) external onlyOwner {\n        require(newMaxWalletAmount > 0, \"Invalid amount: must be greater than zero\");\n        require(newMaxWalletAmount <= totalSupply, \"Invalid amount: exceeds total supply\");\n\n        maxWalletAmount = newMaxWalletAmount;\n\n        emit MaxWalletAmountUpdated(newMaxWalletAmount);\n    }\n\n    /**\n     * @dev Returns the current maximum wallet amount.\n     */\n    function getMaxWalletAmount() external view returns (uint256) {\n        return maxWalletAmount;\n    }\n\n    /**\n     * @dev Returns the total supply of the token.\n     */\n    function getTotalSupply() external view returns (uint256) {\n        return totalSupply;\n    }\n}\n```\n\n### Explanation of Changes:\n1. **Improved Naming**: Variables and functions are renamed to meaningful names (`owner`, `totalSupply`, `maxWalletAmount`, etc.) for better readability.\n2. **Removed Redundant Code**: The decompiled code had unnecessary variables and operations that were removed.\n3. **Added Constructor**: A constructor initializes the `owner` and `totalSupply` values.\n4. **Added Modifier**: The `onlyOwner` modifier ensures that only the contract owner can call certain functions.\n5. **Validation Checks**: Added proper `require` statements to validate the input for `updateMaxWalletAmount`.\n6. **Event Emission**: Added an event `MaxWalletAmountUpdated` to log changes to the `maxWalletAmount`.\n7. **Getter Functions**: Added getter functions for `maxWalletAmount` and `totalSupply` to allow external access.\n\nThis refactored code is clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 5 / 1000)/1e18, \"Cannot set maxWallet lower than 0.5%\");\r\n        maxWallet = newNum * (10**18);\r\n    }"
}