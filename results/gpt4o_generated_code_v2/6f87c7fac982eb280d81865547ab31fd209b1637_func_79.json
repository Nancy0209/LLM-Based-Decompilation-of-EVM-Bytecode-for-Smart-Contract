{
    "contract_address": "0x6f87c7FAc982eB280d81865547aB31fD209b1637",
    "heimdall_input": "function withdrawStuckEth(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        (bool success, bytes memory ret0) = address(arg0).transfer(address(this).balance);\n        require(ret0.length == 0);\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract WithdrawStuckEth {\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Allows the owner to withdraw all Ether stuck in the contract to a specified address.\n     * @param recipient The address to receive the withdrawn Ether.\n     */\n    function withdrawStuckEth(address payable recipient) external onlyOwner {\n        require(recipient != address(0), \"Invalid recipient address\");\n        uint256 contractBalance = address(this).balance;\n        require(contractBalance > 0, \"No Ether available to withdraw\");\n\n        (bool success, ) = recipient.call{value: contractBalance}(\"\");\n        require(success, \"Ether transfer failed\");\n    }\n\n    // Fallback function to receive Ether\n    receive() external payable {}\n}\n```\n\n### Explanation of Improvements:\n1. **Added SPDX License Identifier**: Ensures compliance with best practices.\n2. **Updated Solidity Version**: Used `pragma solidity ^0.8.0` for modern features and safety.\n3. **Improved Naming**: Renamed the function and variables for clarity (`withdrawStuckEth`, `recipient`, `contractBalance`).\n4. **Added Constructor**: Initializes the `owner` variable to the contract deployer.\n5. **Added `onlyOwner` Modifier**: Simplifies ownership checks and improves readability.\n6. **Added Validations**: Ensures the recipient address is valid and the contract has a positive balance.\n7. **Used `call` for Ether Transfer**: Modern and recommended approach for transferring Ether.\n8. **Fallback Function**: Added a `receive` function to allow the contract to receive Ether.\n9. **Removed Unnecessary Variables**: Eliminated unused variables (`var_a`, `var_b`, etc.) from the decompiled code.\n\nThis refactored code is clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function withdrawStuckEth(address toAddr) external onlyOwner {\\n        (bool success, ) = toAddr.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }"
}