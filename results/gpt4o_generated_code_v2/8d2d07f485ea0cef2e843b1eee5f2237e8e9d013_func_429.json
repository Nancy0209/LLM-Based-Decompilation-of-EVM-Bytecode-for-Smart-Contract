{
    "contract_address": "0x8d2d07f485Ea0cEf2E843b1EEE5F2237e8e9d013",
    "heimdall_input": "function updateMaxTxnAmount(uint256 arg0, uint256 arg1) public view {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(arg0 < 0x01), \"Cannot set maxTransactionAmount lower than 1%\");\n        require((arg0 == ((arg0 * totalSupply) / totalSupply)) | !totalSupply, \"Cannot set maxTransactionAmount lower than 1%\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x64, \"Cannot set maxTransactionAmount lower than 1%\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x2d;\n        var_d = 0x43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e7420;\n        var_g = 0x6c6f776572207468616e20312500000000000000000000000000000000000000;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MaxTransactionManager {\n    address public owner;\n    uint256 public totalSupply;\n    uint256 public maxTransactionAmount;\n\n    event MaxTransactionAmountUpdated(uint256 newMaxTransactionAmount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor(uint256 _totalSupply) {\n        owner = msg.sender;\n        totalSupply = _totalSupply;\n        maxTransactionAmount = _totalSupply; // Default to total supply\n    }\n\n    /**\n     * @dev Updates the maximum transaction amount as a percentage of the total supply.\n     * @param percentage The new maximum transaction amount as a percentage (1% = 1, 100% = 100).\n     */\n    function updateMaxTransactionAmount(uint256 percentage) external onlyOwner {\n        require(percentage >= 1, \"Cannot set maxTransactionAmount lower than 1%\");\n        require(totalSupply > 0, \"Total supply must be greater than 0\");\n\n        uint256 newMaxTransactionAmount = (percentage * totalSupply) / 100;\n        require(newMaxTransactionAmount > 0, \"Max transaction amount must be greater than 0\");\n\n        maxTransactionAmount = newMaxTransactionAmount;\n\n        emit MaxTransactionAmountUpdated(maxTransactionAmount);\n    }\n}\n```\n\n### Explanation of Changes:\n1. **Improved Naming**:\n   - Renamed the function to `updateMaxTransactionAmount` for clarity.\n   - Used descriptive variable names like `percentage` and `newMaxTransactionAmount`.\n\n2. **Removed Redundant Code**:\n   - Removed unnecessary variables (`var_a`, `var_b`, etc.) and unused code.\n\n3. **Added Events**:\n   - Added an event `MaxTransactionAmountUpdated` to log changes to the `maxTransactionAmount`.\n\n4. **Added Constructor**:\n   - Added a constructor to initialize the `owner` and `totalSupply`.\n\n5. **Added Modifier**:\n   - Added an `onlyOwner` modifier to enforce ownership checks.\n\n6. **Simplified Logic**:\n   - Simplified the logic for calculating and validating the new `maxTransactionAmount`.\n\n7. **Readability**:\n   - Improved code formatting and added comments for better readability.\n\nThis refactored code is clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function updateMaxTxnAmount(uint256 txNum, uint256 walNum) external onlyOwner {\r\n        require(txNum >= 1, \"Cannot set maxTransactionAmount lower than 1%\");\r\n        maxTransactionAmount = (totalSupply() * txNum / 100)/1e18;\r\n        require(walNum >= 1, \"Cannot set maxWallet lower than 1%\");\r\n        maxWallet = (totalSupply() * walNum / 100)/1e18;\r\n    }"
}