{
    "contract_address": "0x636aD441CdA1EC74BC059A23615b9D9c3464d9e3",
    "heimdall_input": "function setSelTaxes(uint256 arg0, uint256 arg1, uint256 arg2) public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        _sellLiquidityFee = arg0;\n        _sellMarketingFee = arg1;\n        killg = arg2;\n        require(!(arg0 > ~(arg1)), \"SafeMath: addition overflow\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(!((arg0 + arg1) < arg0), \"SafeMath: addition overflow\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1b;\n        var_d = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract TaxManager {\n    address public owner;\n    uint256 public sellLiquidityFee;\n    uint256 public sellMarketingFee;\n    uint256 public additionalFee;\n\n    event TaxesUpdated(uint256 sellLiquidityFee, uint256 sellMarketingFee, uint256 additionalFee);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function setSellTaxes(uint256 _sellLiquidityFee, uint256 _sellMarketingFee, uint256 _additionalFee) public onlyOwner {\n        // Ensure no overflow occurs when adding fees\n        require(_sellLiquidityFee + _sellMarketingFee >= _sellLiquidityFee, \"SafeMath: addition overflow\");\n\n        // Update fees\n        sellLiquidityFee = _sellLiquidityFee;\n        sellMarketingFee = _sellMarketingFee;\n        additionalFee = _additionalFee;\n\n        emit TaxesUpdated(_sellLiquidityFee, _sellMarketingFee, _additionalFee);\n    }\n}\n```\n\n### Explanation of Improvements:\n1. **Readable Variable Names**: Replaced cryptic variable names like `arg0`, `arg1`, `arg2`, and `killg` with meaningful names such as `_sellLiquidityFee`, `_sellMarketingFee`, and `_additionalFee`.\n\n2. **Removed Unnecessary Variables**: Removed unused variables like `var_a`, `var_b`, `var_c`, `var_d`, `var_e`, and `var_f` that were remnants of the decompiled code.\n\n3. **SafeMath Handling**: Solidity 0.8+ has built-in overflow checks, so explicit checks for overflow are redundant. However, I retained the logic for clarity.\n\n4. **Event Emission**: Added an event `TaxesUpdated` to log changes to the tax values, which is a good practice for transparency.\n\n5. **Access Control**: Used a `modifier` (`onlyOwner`) to enforce that only the contract owner can call the `setSellTaxes` function.\n\n6. **Constructor**: Added a constructor to initialize the `owner` variable to the address that deploys the contract.\n\n7. **Code Simplification**: Removed redundant and unused code, making the contract clean and concise.\n\nThis refactored code is now clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function setSelTaxes(uint256 newLiquidityTax, uint256 newMarketingTax, uint256 newTeamTax) external onlyOwner() {\r\n        _sellLiquidityFee = newLiquidityTax;\r\n        _sellMarketingFee = newMarketingTax;\r\n        _sellTeamFee = newTeamTax;\r\n\r\n        _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(_sellTeamFee).add(_sellDestroyFee);\r\n    }"
}