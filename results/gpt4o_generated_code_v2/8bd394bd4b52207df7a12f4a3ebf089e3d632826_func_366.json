{
    "contract_address": "0x8bD394Bd4b52207Df7a12F4a3EBF089e3d632826",
    "heimdall_input": "function rescuesERC20(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(getOwner)), \"!OWNER\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x06;\n        var_d = 0x214f574e45520000000000000000000000000000000000000000000000000000;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(this);\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require((arg1 == ((arg1 * var_e.length) / var_e.length)) | !var_e.length);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x64);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        var_h = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        address var_c = address(store_m);\n        uint256 var_d = (arg1 * var_e.length) / 0x64;\n        (bool success, bytes memory ret0) = address(arg0).{ value: 0 ether }Unresolved_a9059cbb(var_c); // call\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == var_e.length);\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TokenRescue is Ownable {\n    /**\n     * @notice Allows the owner to rescue ERC20 tokens mistakenly sent to the contract.\n     * @param token The address of the ERC20 token to rescue.\n     * @param amount The amount of tokens to transfer to the owner.\n     */\n    function rescueERC20(address token, uint256 amount) external onlyOwner {\n        require(token != address(0), \"Invalid token address\");\n        require(amount > 0, \"Amount must be greater than zero\");\n\n        uint256 contractBalance = IERC20(token).balanceOf(address(this));\n        require(contractBalance >= amount, \"Insufficient token balance in contract\");\n\n        bool success = IERC20(token).transfer(owner(), amount);\n        require(success, \"Token transfer failed\");\n    }\n}\n```\n\n### Explanation of Changes:\n1. **Use of OpenZeppelin Libraries**:\n   - The `IERC20` interface from OpenZeppelin is used to interact with ERC20 tokens.\n   - The `Ownable` contract from OpenZeppelin is used to manage ownership and restrict access to the `rescueERC20` function.\n\n2. **Functionality**:\n   - The `rescueERC20` function allows the contract owner to transfer ERC20 tokens from the contract to their own address.\n   - The function checks that the token address is valid, the amount is greater than zero, and the contract has enough balance of the specified token.\n\n3. **Error Handling**:\n   - Added `require` statements to validate inputs and ensure the contract has sufficient balance before attempting the transfer.\n   - Ensured the transfer operation is successful by checking the return value of the `transfer` function.\n\n4. **Readability**:\n   - Improved variable and function names to make the code self-explanatory.\n   - Removed unnecessary variables and operations from the decompiled code.\n\n5. **Security**:\n   - Restricted the function to the contract owner using the `onlyOwner` modifier.\n   - Ensured the token address is not zero to prevent misuse.\n\nThis refactored code is clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function rescuesERC20(address _address, uint256 percent) external onlyOwner {\\r\\n        uint256 _amount = IERC20(_address).balanceOf(address(this)).mul(percent).div(100);\\r\\n        IERC20(_address).transfer(development_receiver, _amount);\\r\\n    }"
}