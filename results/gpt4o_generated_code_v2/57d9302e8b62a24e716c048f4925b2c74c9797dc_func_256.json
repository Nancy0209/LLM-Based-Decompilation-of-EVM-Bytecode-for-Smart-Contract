{
    "contract_address": "0x57D9302e8B62a24e716C048f4925b2c74c9797dC",
    "heimdall_input": "function setMaxTxnAmount(uint256 arg0) public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        _maxTxAmount = arg0;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract TransactionLimit {\n    address private owner;\n    uint256 private maxTxAmount;\n\n    event MaxTxAmountUpdated(uint256 newMaxTxAmount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function setMaxTxAmount(uint256 newMaxTxAmount) public onlyOwner {\n        maxTxAmount = newMaxTxAmount;\n        emit MaxTxAmountUpdated(newMaxTxAmount);\n    }\n\n    function getMaxTxAmount() public view returns (uint256) {\n        return maxTxAmount;\n    }\n}\n```\n\n### Explanation:\n- **Owner Management**: The `onlyOwner` modifier ensures that only the contract owner can call the `setMaxTxAmount` function.\n- **Event Emission**: An event `MaxTxAmountUpdated` is emitted whenever the maximum transaction amount is updated, providing transparency.\n- **Constructor**: The constructor sets the initial owner of the contract to the deployer.\n- **Getter Function**: A `getMaxTxAmount` function is added to allow external access to the current maximum transaction amount.",
    "ground_truth": "function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n        _maxTxAmount = maxTxAmount;\r\n    }"
}