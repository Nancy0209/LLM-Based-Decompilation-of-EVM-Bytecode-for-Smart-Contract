{
    "contract_address": "0x636aD441CdA1EC74BC059A23615b9D9c3464d9e3",
    "heimdall_input": "function setMaxDesAmount(uint256 arg0) public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        _maxDestroyAmount = arg0;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MaxDestroyAmount {\n    address private owner;\n    uint256 private maxDestroyAmount;\n\n    // Event to log changes to the maxDestroyAmount\n    event MaxDestroyAmountUpdated(uint256 newAmount);\n\n    // Constructor to set the contract owner\n    constructor() {\n        owner = msg.sender;\n    }\n\n    // Modifier to restrict access to the owner\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    // Function to set the maximum destroy amount\n    function setMaxDestroyAmount(uint256 _amount) external onlyOwner {\n        maxDestroyAmount = _amount;\n        emit MaxDestroyAmountUpdated(_amount);\n    }\n\n    // Function to retrieve the current max destroy amount\n    function getMaxDestroyAmount() external view returns (uint256) {\n        return maxDestroyAmount;\n    }\n\n    // Function to retrieve the contract owner\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}",
    "ground_truth": "function setMaxDesAmount(uint256 maxDestroy) public onlyOwner {\r\n        _maxDestroyAmount = maxDestroy;\r\n    }"
}