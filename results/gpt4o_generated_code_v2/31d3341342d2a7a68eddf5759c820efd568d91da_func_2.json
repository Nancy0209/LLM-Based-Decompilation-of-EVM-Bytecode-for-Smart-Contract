{
    "contract_address": "0x31d3341342D2A7a68EDDF5759C820eFD568D91dA",
    "heimdall_input": "function getApproved(uint256 arg0) public view returns (address) {\n        uint256 var_a = arg0;\n        var_b = 0x02;\n        require(address(storage_map_b[var_a]), \"ERC721: approved query for nonexistent token\");\n        var_a = arg0;\n        var_b = 0x04;\n        uint256 var_c = address(storage_map_b[var_a]);\n        return address(storage_map_b[var_a]);\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2c;\n        var_f = 0x4552433732313a20617070726f76656420717565727920666f72206e6f6e6578;\n        var_g = 0x697374656e7420746f6b656e0000000000000000000000000000000000000000;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract ERC721 {\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    /**\n     * @dev Returns the approved address for a specific token ID.\n     * Reverts if the token does not exist.\n     * @param tokenId The ID of the token to query.\n     * @return The address that is approved for the given token ID.\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        // Ensure the token exists by checking if an approval address is set\n        address approvedAddress = _tokenApprovals[tokenId];\n        require(approvedAddress != address(0), \"ERC721: approved query for nonexistent token\");\n\n        return approvedAddress;\n    }\n}\n```\n\n### Explanation of Changes:\n1. **Improved Naming**: Replaced generic variable names (`var_a`, `var_b`, etc.) with meaningful names like `tokenId` and `approvedAddress`.\n2. **Removed Unnecessary Code**: Removed unused variables and redundant operations (`var_c`, `var_d`, etc.) that were irrelevant to the function's purpose.\n3. **Simplified Logic**: Directly returned the approved address after checking its existence.\n4. **Added Comments**: Included comments to explain the purpose of the function and the mapping.\n5. **Modern Solidity Version**: Used `pragma solidity ^0.8.0` for better safety features like built-in overflow checks.\n6. **ERC721 Context**: Added context to indicate this function is part of an ERC721 contract.\n\nThis code is now clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }"
}