{
    "contract_address": "0x5B8BA3cb21F36a06b3a86774103F8dBDa14483EC",
    "heimdall_input": "function withdrawStuckEther() public payable {\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        (bool success, bytes memory ret0) = address(owner / 0x01).transfer(address(this).balance);\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract StuckEtherWithdrawable {\n    address private owner;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function withdrawStuckEther() external onlyOwner {\n        uint256 contractBalance = address(this).balance;\n        require(contractBalance > 0, \"No Ether available to withdraw\");\n\n        (bool success, ) = owner.call{value: contractBalance}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    // Fallback function to receive Ether\n    receive() external payable {}\n}\n```\n\n### Explanation of Improvements:\n1. **Improved Naming**: Renamed the function and variables to meaningful names for better readability.\n2. **Added `onlyOwner` Modifier**: Simplified the ownership check using a modifier.\n3. **Removed Unnecessary Variables**: Removed unused variables (`var_a`, `var_b`, `var_c`, `var_d`, `var_e`) and simplified the logic.\n4. **Error Handling**: Added a `require` statement to ensure the contract has a balance before attempting to transfer Ether.\n5. **Fallback Function**: Added a `receive` function to allow the contract to receive Ether.\n6. **Modern Solidity Syntax**: Used Solidity 0.8.0 features like `call` with value transfer and removed outdated constructs like `var`.\n\nThis code is clean, readable, and adheres to best practices for Solidity development.",
    "ground_truth": "function withdrawStuckEther() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }"
}