{
    "contract_address": "0x172F7a6F8C76321376cf077c4b68f6C0A0907d2f",
    "heimdall_input": "function manualSend() public {\n        require(address(msg.sender) == (address(getOwner / 0x01)), \"!Owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x06;\n        var_e = 0x214f776e65720000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(marketingWallet / 0x01).transfer(address(this).balance);\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract RefactoredContract {\n    address private owner;\n    address private marketingWallet;\n\n    constructor(address _marketingWallet) {\n        owner = msg.sender;\n        marketingWallet = _marketingWallet;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Caller is not the owner\");\n        _;\n    }\n\n    function manualSend() external onlyOwner {\n        require(marketingWallet != address(0), \"Marketing wallet address is not set\");\n        \n        uint256 contractBalance = address(this).balance;\n        require(contractBalance > 0, \"Contract balance is zero\");\n\n        (bool success, ) = marketingWallet.call{value: contractBalance}(\"\");\n        require(success, \"Transfer to marketing wallet failed\");\n    }\n\n    // Fallback function to receive Ether\n    receive() external payable {}\n}\n```\n\n### Explanation of Changes:\n1. **Improved Naming**: Renamed variables and functions to meaningful names (`manualSend`, `owner`, `marketingWallet`, etc.).\n2. **Added Constructor**: Added a constructor to initialize the `owner` and `marketingWallet` addresses.\n3. **Added Modifier**: Created an `onlyOwner` modifier to simplify the ownership check.\n4. **Removed Unnecessary Variables**: Removed unused variables (`var_a`, `var_b`, `var_c`, etc.) and simplified the logic.\n5. **Error Handling**: Added checks for zero balance and invalid `marketingWallet` address.\n6. **Fallback Function**: Added a `receive` function to allow the contract to receive Ether.\n7. **Modern Solidity Syntax**: Used `call` with `{value: contractBalance}` for transferring Ether, which is more flexible and recommended over `transfer`.\n\nThis code is clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function manualSend() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        payable(marketingWallet).transfer(contractETHBalance);\r\n    }"
}