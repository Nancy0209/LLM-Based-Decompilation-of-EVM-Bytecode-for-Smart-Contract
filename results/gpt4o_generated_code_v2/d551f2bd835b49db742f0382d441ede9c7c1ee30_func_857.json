{
    "contract_address": "0xD551F2Bd835B49DB742f0382d441Ede9C7C1Ee30",
    "heimdall_input": "function set_Max_Transaction_Percent(uint256 arg0) public {\n        require(arg0 == arg0);\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!totalSupply | (arg0 == ((totalSupply * arg0) / totalSupply)));\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x2710);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        _maxTxAmount = (totalSupply * arg0) / 0x2710;\n    }",
    "llm_output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Token {\n    address private _owner;\n    uint256 private _totalSupply;\n    uint256 private _maxTxAmount;\n\n    event MaxTransactionAmountUpdated(uint256 maxTxAmount);\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor(uint256 totalSupply_) {\n        _owner = msg.sender;\n        _totalSupply = totalSupply_;\n        _maxTxAmount = totalSupply_; // Default to 100% of total supply\n    }\n\n    /**\n     * @dev Sets the maximum transaction amount as a percentage of the total supply.\n     * @param percentage The percentage (in basis points, where 10000 = 100%) of the total supply.\n     */\n    function setMaxTransactionPercent(uint256 percentage) external onlyOwner {\n        require(percentage > 0 && percentage <= 10000, \"Invalid percentage value\");\n        _maxTxAmount = (_totalSupply * percentage) / 10000;\n        emit MaxTransactionAmountUpdated(_maxTxAmount);\n    }\n\n    /**\n     * @dev Returns the maximum transaction amount.\n     */\n    function maxTransactionAmount() external view returns (uint256) {\n        return _maxTxAmount;\n    }\n\n    /**\n     * @dev Returns the total supply of the token.\n     */\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the owner of the contract.\n     */\n    function owner() external view returns (address) {\n        return _owner;\n    }\n}\n```\n\n### Explanation of Changes:\n1. **Improved Naming**: Renamed variables and functions to meaningful names (`set_Max_Transaction_Percent` \u2192 `setMaxTransactionPercent`, `_maxTxAmount`, `_totalSupply`, etc.).\n2. **Removed Redundant Code**: Removed unnecessary calculations and unused variables from the decompiled code.\n3. **Added Comments**: Added comments to explain the purpose of each function and parameter.\n4. **Added Events**: Introduced an event `MaxTransactionAmountUpdated` to log changes to the maximum transaction amount.\n5. **Validation**: Added a check to ensure the `percentage` parameter is within a valid range (1 to 10000 basis points).\n6. **Readability**: Organized the code into sections and used consistent formatting for better readability.\n7. **Access Control**: Used a `modifier` (`onlyOwner`) to enforce that only the owner can call certain functions.\n\nThis refactored code is clean, readable, and adheres to Solidity best practices.",
    "ground_truth": "function set_Max_Transaction_Percent(uint256 maxTxPercent_x100) external onlyOwner() {\r\n        _maxTxAmount = _tTotal*maxTxPercent_x100/10000;\r\n    }"
}