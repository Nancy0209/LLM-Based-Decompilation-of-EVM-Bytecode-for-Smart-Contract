{
    "contract_address": "0x10A7A2212f6b6ffE22d339D8Aa6e89a17ad8b1ad",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_w) {\n            if (store_w - ((store_w / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_w / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_w / 0x02;\n                if (store_w) {\n                    if (store_w - ((store_w / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_w / 0x02) {\n                            if (0x1f < (store_w / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_w / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    if (_symbol.length > 0) {\n        uint256 symbolLength = bytes(_symbol).length;\n        uint256 paddedLength = (symbolLength + 31) / 32 * 32; // Round up to nearest 32 bytes\n        uint256 offset = 32 + paddedLength;\n\n        if (symbolLength > 0) {\n            if (symbolLength < 32) {\n                revert(\"Decompiler artifact\");\n            }\n\n            uint256 halfLength = symbolLength / 2;\n            if (halfLength > 0) {\n                if (symbolLength - halfLength < 32) {\n                    revert(\"Decompiler artifact\");\n                }\n\n                uint256 storageOffset = halfLength;\n                bytes memory encodedSymbol = new bytes(symbolLength);\n\n                for (uint256 i = 0; i < symbolLength; i++) {\n                    encodedSymbol[i] = bytes(_symbol)[i];\n                }\n\n                return string(encodedSymbol);\n            }\n        }\n    }\n\n    return \"\";\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }"
}