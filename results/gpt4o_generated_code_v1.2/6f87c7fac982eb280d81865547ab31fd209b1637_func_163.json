{
    "contract_address": "0x6f87c7FAc982eB280d81865547aB31fD209b1637",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_r) {\n            if (!(store_r) == ((store_r >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_r >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_r >> 0x01;\n                if (store_r) {\n                    if (!(store_r) == ((store_r >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_r >> 0x01) {\n                            if (0x1f < (store_r >> 0x01)) {\n                                var_a = 0x04;\n                                var_e = storage_map_e[var_a];\n                                if ((0x20 + var_c) + (store_r >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    if (!0 > var_c.length) {\n                                        uint256 var_g = 0;\n                                        return abi.encodePacked(0x20, var_c.length);\n                                        return abi.encodePacked(0x20, var_c.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    bytes32 storedValue = store_r;\n\n    if (storedValue != 0) {\n        uint256 length = uint256(storedValue >> 1);\n\n        if (length < 32) {\n            revert(\"Invalid symbol length\");\n        }\n\n        uint256 offset = 32 + ((31 + length) / 32) * 32;\n        bytes32 symbolData = storedValue >> 1;\n\n        if (storedValue != 0) {\n            if (length < 32) {\n                revert(\"Invalid symbol length\");\n            }\n\n            if (length > 31) {\n                bytes memory result = new bytes(length);\n                for (uint256 i = 0; i < length; i++) {\n                    result[i] = bytes1(uint8(uint256(symbolData) >> (8 * (31 - i))));\n                }\n                return string(result);\n            }\n        }\n    }\n\n    revert(\"Symbol not set\");\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }"
}