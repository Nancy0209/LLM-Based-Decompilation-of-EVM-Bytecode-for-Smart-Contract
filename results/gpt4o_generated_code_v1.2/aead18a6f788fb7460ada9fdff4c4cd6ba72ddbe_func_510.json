{
    "contract_address": "0xaEAD18A6f788fb7460aDA9fDFf4C4Cd6Ba72dDBE",
    "heimdall_input": "function removeBypassRule(address arg0, bytes4 arg1, uint256 arg2) public {\n        require(arg0 == (address(arg0)));\n        require(arg1 == (uint32(arg1)));\n        require(!(bytes1(isClaimable / 0x0100)), \"Not owner or able to bypass\");\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        require(bytes1(isClaimable / 0x0100), \"Not owner or able to bypass\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1b;\n        var_d = 0x4e6f74206f776e6572206f722061626c6520746f206279706173730000000000;\n        address var_e = address(arg0);\n        var_f = 0x66;\n        var_e = uint32(arg1);\n        address var_f = keccak256(var_e);\n        storage_map_q[var_e] = uint248(storage_map_q[var_e]);\n        require(!arg2, \"Not owner or able to bypass\");\n        var_e = address(arg0);\n        var_f = 0x67;\n        var_e = arg2;\n        var_f = keccak256(var_e);\n        storage_map_q[var_e] = 0x01 | (uint248(storage_map_q[var_e]));\n        var_e = msg.sender;\n        var_f = 0x66;\n        var_e = uint32(msg.data[0]);\n        var_f = keccak256(var_e);\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        require(bytes1(storage_map_q[var_e]), \"Not owner or able to bypass\");\n        var_e = address(arg0);\n        var_f = 0x66;\n        var_e = uint32(arg1);\n        var_f = keccak256(var_e);\n        storage_map_q[var_e] = uint248(storage_map_q[var_e]);\n        require(!arg2, \"Not owner or able to bypass\");\n        var_e = address(arg0);\n        var_f = 0x67;\n        var_e = arg2;\n        var_f = keccak256(var_e);\n        storage_map_q[var_e] = 0x01 | (uint248(storage_map_q[var_e]));\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1b;\n        var_d = 0x4e6f74206f776e6572206f722061626c6520746f206279706173730000000000;\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1b;\n        var_d = 0x4e6f74206f776e6572206f722061626c6520746f206279706173730000000000;\n    }",
    "llm_output": "function removeBypassRule(address operator, bytes4 functionSignature, uint256 ruleId) public {\n    require(operator == address(operator), \"Invalid operator address\");\n    require(functionSignature == bytes4(functionSignature), \"Invalid function signature\");\n    require(msg.sender == owner, \"Caller is not the owner\");\n    \n    bytes32 ruleKey = keccak256(abi.encodePacked(operator, functionSignature));\n    require(storage_map_q[ruleKey] != 0, \"Rule does not exist\");\n\n    storage_map_q[ruleKey] = 0; // Remove the rule\n\n    bytes32 ruleIdKey = keccak256(abi.encodePacked(operator, ruleId));\n    require(storage_map_q[ruleIdKey] != 0, \"Rule ID does not exist\");\n\n    storage_map_q[ruleIdKey] = 0; // Remove the rule ID\n}",
    "ground_truth": "function removeBypassRule(address who, bytes4 functionSig, uint256 id) public onlyOwner {\\n        byPassableFunction[who][functionSig] = false;\\n        if (id !=0) {\\n            byPassableIds[who][id] = true;\\n        }\\n    }"
}