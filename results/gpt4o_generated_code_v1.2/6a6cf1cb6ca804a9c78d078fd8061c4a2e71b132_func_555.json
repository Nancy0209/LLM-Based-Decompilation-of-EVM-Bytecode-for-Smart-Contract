{
    "contract_address": "0x6a6CF1CB6cA804a9c78d078Fd8061c4a2E71B132",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_c) {\n            if (store_c - ((store_c >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_c >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_c >> 0x01;\n                if (store_c) {\n                    if (store_c - ((store_c >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_c >> 0x01) {\n                            if (0x1f < (store_c >> 0x01)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_c >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    if (symbolStorage != 0) {\n        uint256 symbolLength = symbolStorage >> 1;\n        if (symbolLength < 32) {\n            revert(\"Decompiler artifact\");\n        }\n\n        uint256 symbolDataLocation = symbolStorage & ((1 << 255) - 1);\n        bytes memory symbolBytes;\n\n        if (symbolLength > 0) {\n            if (symbolLength <= 31) {\n                symbolBytes = abi.encodePacked(bytes32(symbolDataLocation));\n            } else {\n                symbolBytes = new bytes(symbolLength);\n                uint256 offset = 0;\n                for (uint256 i = 0; i < symbolLength; i += 32) {\n                    bytes32 chunk = storageMap[symbolDataLocation + offset];\n                    assembly {\n                        mstore(add(add(symbolBytes, 0x20), offset), chunk)\n                    }\n                    offset += 32;\n                }\n            }\n        }\n\n        return string(symbolBytes);\n    } else {\n        return \"\";\n    }\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }"
}