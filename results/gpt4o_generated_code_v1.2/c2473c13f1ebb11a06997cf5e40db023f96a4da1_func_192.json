{
    "contract_address": "0xc2473C13f1Ebb11A06997Cf5e40dB023F96A4DA1",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_h[var_a]);\n        store_g = 0x01000000000000000000000000000000000000000000 | (uint248(store_g));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_f), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_f);\n        address var_b = keccak256(var_a);\n        storage_map_h[var_a] = storage_map_h[var_a];\n        address var_k = storage_map_h[var_a];\n        emit Approval(address(this), address(store_f), storage_map_h[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_h[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_f).code.length);\n        (bool success, bytes memory ret0) = address(store_f).Unresolved_791ac947(var_l); // call\n        store_g = uint248(store_g);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    require(msg.sender == address(uint160(transferDelayEnabled / 0x0100)), \"Unauthorized caller\");\n\n    address contractAddress = address(this);\n    uint8 flag = 0x01;\n    require(!storage_map_h[contractAddress], \"Already processed\");\n\n    store_g = 0x01000000000000000000000000000000000000000000 | uint248(store_g);\n\n    uint8 anotherFlag = 0x02;\n    uint256 offset = 0x60;\n    bytes memory inputData = msg.data[4:68];\n\n    uint256 errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8 errorCode = 0x32;\n\n    address wethAddress = address(this);\n    uint256 wethSelector = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n\n    (bool success, bytes memory wethResponse) = address(store_f).staticcall(abi.encodeWithSelector(wethSelector));\n    require(success, \"WETH call failed\");\n\n    offset += uint248(wethResponse.length + 0x1f);\n    require(wethResponse.length >= 0x20, \"Invalid response length\");\n\n    require(wethResponse.length == uint256(uint160(wethResponse.length)), \"Invalid response data\");\n\n    uint256 anotherErrorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8 anotherErrorCode = 0x32;\n\n    uint256 responseAddress = uint256(uint160(wethResponse.length));\n    require(address(this) != address(0), \"Invalid contract address\");\n    require(address(store_f) != address(0), \"Invalid store address\");\n\n    uint256 revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 revertDataLength = 0x20;\n    uint256 revertMessageLength = 0x22;\n    bytes32 revertMessage = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    bytes32 revertMessagePadding = 0x7373000000000000000000000000000000000000000000000000000000000000;\n\n    address storeAddress = address(store_f);\n    bytes32 hashedAddress = keccak256(abi.encodePacked(storeAddress));\n    storage_map_h[storeAddress] = storage_map_h[storeAddress];\n\n    address approvalAddress = storage_map_h[storeAddress];\n    emit Approval(address(this), storeAddress, storage_map_h[storeAddress]);\n\n    uint256 transferSelector = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n    address transferAddress = storage_map_h[storeAddress];\n    uint256 transferAmount = 0;\n    uint256 transferOffset = 0xa0;\n    uint256 transferDataLength = wethResponse.length;\n    address transferSender = address(this);\n    uint256 transferTimestamp = block.timestamp;\n\n    require(address(store_f).code.length > 0, \"Invalid store code\");\n\n    (bool transferSuccess, bytes memory transferResponse) = address(store_f).call(abi.encodeWithSelector(transferSelector, transferAddress));\n    require(transferSuccess, \"Transfer failed\");\n\n    store_g = uint248(store_g);\n    require(address(this).balance == 0, \"Non-zero balance\");\n\n    (bool finalTransferSuccess, ) = address(uint160(transferDelayEnabled / 0x0100)).call{value: address(this).balance}(\"\");\n    require(finalTransferSuccess, \"Final transfer failed\");\n\n    uint256 finalRevertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 finalRevertDataLength = 0x20;\n    uint256 finalRevertMessageLength = 0x24;\n    bytes32 finalRevertMessage = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    bytes32 finalRevertMessagePadding = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external {\\r\\n        require(_msgSender()==_taxWallet);\\r\\n        uint256 tokenBalance=balanceOf(address(this));\\r\\n        if(tokenBalance>0){\\r\\n          swapTokensForEth(tokenBalance);\\r\\n        }\\r\\n        uint256 ethBalance=address(this).balance;\\r\\n        if(ethBalance>0){\\r\\n          sendETHToFee(ethBalance);\\r\\n        }\\r\\n    }"
}