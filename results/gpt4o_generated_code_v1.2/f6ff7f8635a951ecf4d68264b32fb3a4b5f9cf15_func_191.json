{
    "contract_address": "0xF6FF7F8635a951ecF4D68264b32FB3a4b5f9cf15",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender), \"You have been blacklisted from transfering tokens\");\n        require(address(arg0), \"You have been blacklisted from transfering tokens\");\n        address var_a = address(arg0);\n        var_b = 0x14;\n        require(!(!bytes1(storage_map_r[var_a])), \"You have been blacklisted from transfering tokens\");\n        require(!(bytes1(storage_map_r[var_a])), \"You have been blacklisted from transfering tokens\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x31;\n        var_f = 0x596f752068617665206265656e20626c61636b6c69737465642066726f6d2074;\n        var_g = 0x72616e73666572696e6720746f6b656e73000000000000000000000000000000;\n        require(0 - arg1, \"SafeMath: multiplication overflow\");\n        require(!(bytes1(tradingActive)), \"SafeMath: multiplication overflow\");\n        require(address(owner) == (address(msg.sender)), \"SafeMath: multiplication overflow\");\n        require(!(!(address(owner)) == (address(arg0))), \"SafeMath: multiplication overflow\");\n        require(!(address(arg0)), \"SafeMath: multiplication overflow\");\n        require(!(!0xdead == (address(arg0))), \"SafeMath: multiplication overflow\");\n        require(!(!0xdead == (address(arg0))), \"SafeMath: multiplication overflow\");\n        require(!(0 > (lastLpBurnTimea + 0)), \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(!(!block.number > (lastLpBurnTimea + 0)), \"SafeMath: multiplication overflow\");\n        require(!(!block.number > (lastLpBurnTimea + 0)), \"SafeMath: multiplication overflow\");\n        require(!(!block.number > (lastLpBurnTimea + 0)), \"SafeMath: multiplication overflow\");\n        var_a = address(this);\n        uint256 var_b = 0;\n        require(storage_map_r[var_a] < swapTokensAtAmount, \"SafeMath: multiplication overflow\");\n        require(!(!storage_map_r[var_a] < swapTokensAtAmount), \"SafeMath: multiplication overflow\");\n        require(!(!storage_map_r[var_a] < swapTokensAtAmount), \"SafeMath: multiplication overflow\");\n        require(!(!storage_map_r[var_a] < swapTokensAtAmount), \"SafeMath: multiplication overflow\");\n        require(!(!storage_map_r[var_a] < swapTokensAtAmount), \"SafeMath: multiplication overflow\");\n        require(!(!storage_map_r[var_a] < swapTokensAtAmount), \"SafeMath: multiplication overflow\");\n        require(!(!bytes1(owner / 0x010000000000000000000000000000000000000000)), \"SafeMath: multiplication overflow\");\n        require(!(!bytes1(owner / 0x010000000000000000000000000000000000000000)), \"SafeMath: multiplication overflow\");\n        require(!(!bytes1(owner / 0x010000000000000000000000000000000000000000)), \"SafeMath: multiplication overflow\");\n        require(!(!bytes1(owner / 0x010000000000000000000000000000000000000000)), \"SafeMath: multiplication overflow\");\n        require(!(!bytes1(owner / 0x010000000000000000000000000000000000000000)), \"SafeMath: multiplication overflow\");\n        var_a = address(msg.sender);\n        var_b = 0x24;\n        require(bytes1(storage_map_r[var_a]), \"SafeMath: multiplication overflow\");\n        require(!(bytes1(storage_map_r[var_a])), \"SafeMath: multiplication overflow\");\n        require(!0, \"SafeMath: multiplication overflow\");\n        var_a = address(arg0);\n        var_b = 0x26;\n        require(!(bytes1(storage_map_r[var_a])), \"SafeMath: multiplication overflow\");\n        require(!(lastLpBurnTimec > 0), \"SafeMath: multiplication overflow\");\n        require(0 - arg1, \"SafeMath: multiplication overflow\");\n        require((lastLpBurnTimec == ((lastLpBurnTimec * arg1) / arg1)) | !arg1, \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((lastLpBurnTimec * arg1) / arg1) == lastLpBurnTimec, \"SafeMath: multiplication overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x21;\n        var_f = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_g = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        uint256 var_i = 0x40 + var_i;\n        var_c = 0x1a;\n        var_j = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x64, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        uint256 var_g = var_i.length;\n        uint256 var_l = 0;\n        var_m = var_n;\n        var_l = 0;\n        if (0x64) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x12;\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x12;\n            var_a = address(msg.sender);\n            var_b = 0x26;\n            require(0x64, \"SafeMath: addition overflow\");\n            require(!(bytes1(storage_map_r[var_a])), \"SafeMath: addition overflow\");\n            require(!(lastLpBurnTimej > 0), \"SafeMath: addition overflow\");\n        }\n        require(!0, \"SafeMath: addition overflow\");\n        require(address(msg.sender), \"SafeMath: addition overflow\");\n        require(address(this), \"SafeMath: addition overflow\");\n        var_i = 0x60 + var_i;\n        var_c = 0x26;\n        var_o = this.code[13559:13597];\n        var_a = address(msg.sender);\n        var_b = 0;\n        require(!(0 > storage_map_r[var_a]), \"SafeMath: addition overflow\");\n        require(!((storage_map_r[var_a] - 0) > storage_map_r[var_a]), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(msg.sender);\n        var_b = 0;\n        storage_map_r[var_a] = storage_map_r[var_a] - 0;\n        var_a = address(this);\n        require(!(storage_map_r[var_a] > (0 + storage_map_r[var_a])), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(!((0 + storage_map_r[var_a]) < storage_map_r[var_a]), \"SafeMath: addition overflow\");\n        var_p = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        var_m = 0x1b;\n        var_q = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        require(address(msg.sender), \"ERC20: transfer from the zero address\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        require(!(!bytes1(owner / 0x010000000000000000000000000000000000000000)), \"ERC20: transfer from the zero address\");\n        require(address(msg.sender), \"ERC20: transfer from the zero address\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        var_a = address(arg0);\n        var_b = 0x26;\n        if (!storage_map_r[var_a]) {\n            if (!lastLpBurnTimec > 0) {\n                if (0 - arg1) {\n                }\n                var_a = address(msg.sender);\n                var_b = 0x26;\n                require(!bytes1(storage_map_r[var_a]));\n                require(!lastLpBurnTimec > 0);\n                require(!bytes1(storage_map_r[var_a]));\n            }\n            require(!lastLpBurnTimej > 0);\n        }\n        lastLpBurnTime = block.timestamp;\n        var_c = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var_d = 0xb50f92ed8dbac74e7d0526c8f52765ff598f8b06;\n        (bool success, bytes memory ret0) = address(this).balanceOf(var_d); // staticcall\n        var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!(((var_i + ret0.length) - var_i) < 0x20), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(0 - var_i.length, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_i = 0x40 + var_i;\n        var_j = 0x1a;\n        var_k = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x2710, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_p = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        uint256 var_m = var_i.length;\n        uint256 var_r = 0;\n        var_q = var_n;\n        var_r = 0;\n        require(0x2710, \"ERC20: transfer from the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        require(!0, \"ERC20: transfer from the zero address\");\n        require(0xb50f92ed8dbac74e7d0526c8f52765ff598f8b06, \"ERC20: transfer from the zero address\");\n        var_p = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        var_m = 0x25;\n        var_q = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_s = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        require(0xdead, \"ERC20: transfer to the zero address\");\n        var_p = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        var_m = 0x23;\n        var_q = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_s = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_i = 0x60 + var_i;\n        var_p = 0x26;\n        var_o = this.code[13559:13597];\n        var_a = 0xb50f92ed8dbac74e7d0526c8f52765ff598f8b06;\n        var_b = 0;\n        require(!(0 > storage_map_r[var_a]), \"SafeMath: addition overflow\");\n        require(!((storage_map_r[var_a] - 0) > storage_map_r[var_a]), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = 0xb50f92ed8dbac74e7d0526c8f52765ff598f8b06;\n        var_b = 0;\n        storage_map_r[var_a] = storage_map_r[var_a] - 0;\n        var_a = 0xdead;\n        require(!(storage_map_r[var_a] > (0 + storage_map_r[var_a])), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(!((0 + storage_map_r[var_a]) < storage_map_r[var_a]), \"SafeMath: addition overflow\");\n        var_t = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_s = 0x20;\n        var_u = 0x1b;\n        var_v = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = 0xdead;\n        var_b = 0;\n        storage_map_r[var_a] = var_b + storage_map_r[var_a];\n        uint256 var_t = 0;\n        emit Transfer(0xb50f92ed8dbac74e7d0526c8f52765ff598f8b06, 0xdead, 0);\n        var_t = 0xfff6cae900000000000000000000000000000000000000000000000000000000;\n        require(address(0xb50f92ed8dbac74e7d0526c8f52765ff598f8b06).code.length);\n        (bool success, bytes memory ret0) = address(0xb50f92ed8dbac74e7d0526c8f52765ff598f8b06).{ value: var_b ether }sync(var_s); // call\n        var_p = 0xfff6cae900000000000000000000000000000000000000000000000000000000;\n        require(address(0xb50f92ed8dbac74e7d0526c8f52765ff598f8b06).code.length);\n        (bool success, bytes memory ret0) = address(0xb50f92ed8dbac74e7d0526c8f52765ff598f8b06).{ value: var_b ether }sync(var_g); // call\n        require((percentForLPBurn == ((percentForLPBurn * var_i.length) / var_i.length)) | !var_i.length);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        if (!lpBurnEnabled) {\n            if (!lpBurnEnabled) {\n                if (!lpBurnEnabled) {\n                }\n            }\n        }\n        var_a = address(arg0);\n        var_b = 0x26;\n        if (!storage_map_r[var_a]) {\n        }\n        if (tradingActive / 0x0100) {\n            var_a = address(msg.sender);\n            var_b = 0x24;\n            require(bytes1(tradingActive / 0x0100), \"Sell transfer amount exceeds the maxTransactionAmount.\");\n            require(bytes1(storage_map_r[var_a]), \"Sell transfer amount exceeds the maxTransactionAmount.\");\n            require(!(bytes1(transferDelayEnabled)), \"Sell transfer amount exceeds the maxTransactionAmount.\");\n            require(address(owner) == (address(arg0)), \"Sell transfer amount exceeds the maxTransactionAmount.\");\n            require(!(!(address(arg0)) == 0x7a250d5630b4cf539739df2c5dacb4c659f2488d), \"Sell transfer amount exceeds the maxTransactionAmount.\");\n            require(!(!(address(arg0)) == 0x7a250d5630b4cf539739df2c5dacb4c659f2488d), \"Sell transfer amount exceeds the maxTransactionAmount.\");\n            var_a = address(msg.sender);\n            var_b = 0x26;\n            require(!(bytes1(storage_map_r[var_a])), \"Sell transfer amount exceeds the maxTransactionAmount.\");\n            var_a = address(arg0);\n            var_b = 0x25;\n            require(!(!bytes1(storage_map_r[var_a])), \"Sell transfer amount exceeds the maxTransactionAmount.\");\n            var_a = address(arg0);\n            var_b = 0x26;\n            require(!(bytes1(storage_map_r[var_a])), \"Sell transfer amount exceeds the maxTransactionAmount.\");\n            var_a = address(msg.sender);\n            var_b = 0x25;\n            require(!(!bytes1(storage_map_r[var_a])), \"Sell transfer amount exceeds the maxTransactionAmount.\");\n            var_a = address(arg0);\n            var_b = 0x25;\n            require(bytes1(storage_map_r[var_a]), \"Sell transfer amount exceeds the maxTransactionAmount.\");\n        }\n        require(!(arg1 > lastLpBurnTimeh), \"Sell transfer amount exceeds the maxTransactionAmount.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x36;\n        var_f = 0x53656c6c207472616e7366657220616d6f756e74206578636565647320746865;\n        var_g = 0x206d61785472616e73616374696f6e416d6f756e742e00000000000000000000;\n        if (!storage_map_r[var_a]) {\n        }\n        require(!(arg1 > lastLpBurnTimeh), \"Buy transfer amount exceeds the maxTransactionAmount.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x35;\n        var_f = 0x427579207472616e7366657220616d6f756e7420657863656564732074686520;\n        var_g = 0x6d61785472616e73616374696f6e416d6f756e742e0000000000000000000000;\n        if (!storage_map_r[var_a]) {\n        }\n        var_a = tx.origin;\n        var_b = 0x12;\n        require(block.number > storage_map_r[var_a], \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x49;\n        var_f = 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c;\n        var_g = 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b;\n        var_m = 0x20616c6c6f7765642e0000000000000000000000000000000000000000000000;\n        if (address(owner) == (address(arg0))) {\n            if (address(owner) == (address(arg0))) {\n            }\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x16;\n        var_f = 0x54726164696e67206973206e6f74206163746976652e00000000000000000000;\n        if (!address(arg0)) {\n            if (!address(arg0)) {\n            }\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public {\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\n    require(msg.sender != address(0), \"ERC20: transfer from the zero address\");\n\n    // Check if sender is blacklisted\n    require(!_isBlacklisted[msg.sender], \"You have been blacklisted from transferring tokens\");\n\n    // Check if recipient is blacklisted\n    require(!_isBlacklisted[recipient], \"You have been blacklisted from transferring tokens\");\n\n    // Ensure trading is active\n    require(tradingActive, \"Trading is not active\");\n\n    // Check if the sender is excluded from max transaction amount\n    if (!_isExcludedMaxTransactionAmount[msg.sender]) {\n        require(amount <= maxTransactionAmount, \"Transfer amount exceeds the maxTransactionAmount\");\n    }\n\n    // Check if the recipient is excluded from max wallet amount\n    if (!_isExcludedMaxTransactionAmount[recipient]) {\n        require(balanceOf(recipient) + amount <= maxWallet, \"Transfer amount exceeds the maxWallet\");\n    }\n\n    // Transfer logic\n    _balances[msg.sender] -= amount;\n    _balances[recipient] += amount;\n\n    emit Transfer(msg.sender, recipient, amount);\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }"
}