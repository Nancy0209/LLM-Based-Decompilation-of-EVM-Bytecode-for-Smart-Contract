{
    "contract_address": "0xF36754d67a8C99e1D683915ED5A6E55aB259ba79",
    "heimdall_input": "function set_Max_Transaction_Percent(uint256 arg0) public {\n        require(arg0 == arg0);\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!totalSupply | (arg0 == ((totalSupply * arg0) / totalSupply)));\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x2710);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        _maxTxAmount = (totalSupply * arg0) / 0x2710;\n    }",
    "llm_output": "function setMaxTransactionPercent(uint256 percentBasisPoints) external {\n    // No-op check preserved from decompiled output\n    require(percentBasisPoints == percentBasisPoints);\n\n    // Owner check (division by 1 kept to mirror decompiled logic)\n    require(msg.sender == owner / 1, \"Ownable: caller is not the owner\");\n\n    // Preserved quirky supply check from decompiled code\n    require(\n        totalSupply == 0 || percentBasisPoints == (totalSupply * percentBasisPoints) / totalSupply\n    );\n\n    // Always-true require kept exactly as in the original logic\n    require(0x2710 != 0);\n\n    // Set the max transaction amount\n    _maxTxAmount = (totalSupply * percentBasisPoints) / 0x2710;\n}",
    "ground_truth": "function set_Max_Transaction_Percent(uint256 maxTxPercent_x10000) external onlyOwner() {\r\n        _maxTxAmount = _tTotal*maxTxPercent_x10000/10000;\r\n    }"
}