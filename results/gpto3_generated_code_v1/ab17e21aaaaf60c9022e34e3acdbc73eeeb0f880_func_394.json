{
    "contract_address": "0xAB17E21aaAaF60C9022E34e3AcdBC73EEeb0f880",
    "heimdall_input": "function updateMarketingWallet(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        emit MarketingWalletUpdated(address(arg0), address(lastLpBurnTimec));\n        lastLpBurnTimec = (address(arg0)) | (uint96(lastLpBurnTimec));\n    }",
    "llm_output": "function updateMarketingWallet(address newMarketingWallet) public {\n    // Redundant, but preserved for logical fidelity with the decompiled byte-code\n    require(newMarketingWallet == address(newMarketingWallet));\n\n    // Ownership check\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    // Emit the event with the previous marketing wallet extracted from the packed variable\n    emit MarketingWalletUpdated(\n        newMarketingWallet,\n        address(uint160(marketingWalletPacked))\n    );\n\n    // Update the packed storage slot:\n    // upper 160 bits  <- new marketing wallet\n    // lower  96 bits  <- keep existing data\n    marketingWalletPacked =\n        uint256(uint160(newMarketingWallet)) |\n        uint256(uint96(marketingWalletPacked));\n}",
    "ground_truth": "function updateMarketingWallet(address newMarketingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit MarketingWalletUpdated(newMarketingWallet, MarketingWallet);\r\n        MarketingWallet = newMarketingWallet;\r\n    }"
}