{
    "contract_address": "0x3D93F860f4f6f4C54B79eDa0c09A1E70cc79947b",
    "heimdall_input": "function openTrading() public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(store_c / 0x010000000000000000000000000000000000000000)), \"trading is already open\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x17;\n        var_d = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n        store_e = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_e));\n        require(0x08, \"ERC20: approve to the zero address\");\n        require((0x01 == 0x01) | !0x0bebc200, \"ERC20: approve to the zero address\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(0x7a250d5630b4cf539739df2c5dacb4c659f2488d, \"ERC20: approve to the zero address\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x22;\n        var_d = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_g = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        address var_e = address(this);\n        var_h = 0x02;\n        var_e = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n        address var_h = keccak256(var_e);\n        storage_map_l[var_e] = 0x0bebc200;\n        var_a = 0x0bebc200;\n        emit Approval(address(this), 0x7a250d5630b4cf539739df2c5dacb4c659f2488d, 0x0bebc200);\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_e).factory(var_b); // staticcall\n        uint256 var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x20);\n        require(var_i.length == (address(var_i.length)));\n        var_j = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_e / 0x01).WETH(var_c); // staticcall\n        var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x20);\n        require(var_i.length == (address(var_i.length)));\n        var_k = 0xe6a4390500000000000000000000000000000000000000000000000000000000;\n        address var_d = address(this);\n        uint256 var_g = address(var_i.length);\n        (bool success, bytes memory ret0) = address(var_i.length).Unresolved_e6a43905(var_d); // staticcall\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x24;\n        var_d = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_g = 0x7265737300000000000000000000000000000000000000000000000000000000;\n        if (0x0a) {\n            if (0x0a == 0x01) {\n                if (0x0a == 0x02) {\n                    if (!0x08 > 0xff) {\n                        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_f = 0x11;\n                        if (!((0x0a < 0x0b) & (0x08 < 0x4e)) | ((0x0a < 0x0133) & (0x08 < 0x20))) {\n                            if (!0x08 > 0x01) {\n                                if (!0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                    var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                    var_f = 0x11;\n                                    if (!0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        var_f = 0x11;\n                                        if (!0) {\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function openTrading() public {\n    // Replicates: require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    // Replicates: require(!(bytes1(store_c / 0x010000000000000000000000000000000000000000)), \"trading is already open\");\n    require(!tradingOpen, \"trading is already open\");\n\n    // Constant taken directly from the decompiled byte-code\n    IUniswapV2Router02 router = IUniswapV2Router02(\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n    );\n\n    /*\n     * The following four `require` statements appear\u2014albeit in an obfuscated\n     * form\u2014in the decompiled byte-code.  They are retained here verbatim so\n     * that the observable execution behaviour is identical.\n     */\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");                    // require(address(this), ...)\n    require(address(router) != address(0), \"ERC20: approve to the zero address\");                  // require(router, ...)\n    require(0x08 != 0, \"ERC20: approve to the zero address\");                                      // require(0x08,  ...)\n    require((0x01 == 0x01) || !(0x0bebc200 != 0), \"ERC20: approve to the zero address\");           // require((0x01==0x01)|!0x0bebc200, ...)\n\n    /*\n     * Replicates: storage_map_l[var_e] = 0x0bebc200;\n     * This corresponds to giving the router an allowance of 200,000,000 units.\n     */\n    uint256 allowanceAmount = 0x0bebc200; // 200,000,000\n    _approve(address(this), address(router), allowanceAmount);\n    emit Approval(address(this), address(router), allowanceAmount);\n\n    /*\n     * Replicates the factory/WETH/pair logic that appeared\u2014via static calls\u2014\n     * in the decompiled listing.\n     */\n    address factory = router.factory();\n    address weth    = router.WETH();\n    uniswapV2Pair   = IUniswapV2Factory(factory).createPair(address(this), weth);\n\n    tradingOpen = true;\n}",
    "ground_truth": "function openTrading() external onlyOwner() {\\n        require(!tradingOpen,\\\"trading is already open\\\");\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        IUniswapV2Factory factory=IUniswapV2Factory(uniswapV2Router.factory());\\n        uniswapV2Pair = factory.getPair(address(this),uniswapV2Router.WETH());\\n        if(uniswapV2Pair==address(0x0)){\\n          uniswapV2Pair = factory.createPair(address(this), uniswapV2Router.WETH());\\n        }\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        swapEnabled = true;\\n        tradingOpen = true;\\n    }"
}