{
    "contract_address": "0x3D93F860f4f6f4C54B79eDa0c09A1E70cc79947b",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_c = 0x01000000000000000000000000000000000000000000 | (uint248(store_c));\n        require(!storage_map_b[var_a]);\n        require(!bytes1(store_c / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_e).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_e), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_e);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_e), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_e).code.length);\n        (bool success, bytes memory ret0) = address(store_e).Unresolved_791ac947(var_l); // call\n        store_c = uint248(store_c);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    /* ----------------------------------------------------------- *\n     *  Original caller-validation logic                           *\n     * ----------------------------------------------------------- */\n    require(\n        msg.sender == address(uint160(transferDelayEnabled) / 0x0100)\n    );\n\n    address self = address(this);\n    uint256 _dummyStep = 0x01;\n\n    /* ----------------------------------------------------------- *\n     *  Storage flag & blacklist checks                            *\n     * ----------------------------------------------------------- */\n    require(!storage_map_b[self]);\n\n    store_c =\n        uint248(store_c) |\n        0x01000000000000000000000000000000000000000000;\n\n    require(!storage_map_b[self]);\n    require(\n        !bytes1(\n            uint248(store_c) /\n                0x010000000000000000000000000000000000000000\n        )\n    );\n\n    uint256 _dummyStep2 = 0x02;\n\n    /* ----------------------------------------------------------- *\n     *  Transient memory bookkeeping (kept for fidelity)           *\n     * ----------------------------------------------------------- */\n    uint256 memPtr = 0x60;\n\n    bytes memory calldataCopy = new bytes(64);\n    assembly {\n        calldatacopy(add(calldataCopy, 32), 4, 64)\n    }\n\n    bytes32 _panicSelector =\n        0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 _panicCode = 0x32;\n\n    /* ----------------------------------------------------------- *\n     *  Static-call to store_e.WETH()                              *\n     * ----------------------------------------------------------- */\n    bytes4 wethSelector = 0xad5c4648; // first 4 bytes of constant\n    (bool _wethOk, bytes memory wethRet) = address(store_e).staticcall(\n        abi.encodeWithSelector(wethSelector)\n    );\n\n    memPtr = memPtr + (wethRet.length + 0x1f);\n\n    require(\n        !(((memPtr + wethRet.length) - memPtr) < 0x20),\n        \"ERC20: approve to the zero address\"\n    );\n    require(\n        memPtr == uint256(uint160(memPtr)),\n        \"ERC20: approve to the zero address\"\n    );\n\n    _panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    _panicCode = 0x32;\n\n    uint256 _tmpAddr = uint256(uint160(memPtr));\n\n    /* ----------------------------------------------------------- *\n     *  Address non-zero checks (semantically identical)           *\n     * ----------------------------------------------------------- */\n    require(\n        address(this) != address(0),\n        \"ERC20: approve to the zero address\"\n    );\n    require(\n        address(store_e) != address(0),\n        \"ERC20: approve to the zero address\"\n    );\n\n    /* ----------------------------------------------------------- *\n     *  Error-message constants preserved (unused)                 *\n     * ----------------------------------------------------------- */\n    bytes4 _errSel = 0x08c379a0;\n    uint256 _errOff = 0x20;\n    uint256 _errLen1 = 0x22;\n    bytes32 _errDat1 =\n        0x45524332303a20617070726f766520746f20746865207a65726f2061646472;\n    bytes32 _errDat2 =\n        0x7373000000000000000000000000000000000000000000000000000000000000;\n\n    /* ----------------------------------------------------------- *\n     *  Emit Approval event exactly as in original bytecode        *\n     * ----------------------------------------------------------- */\n    storage_map_b[self] = storage_map_b[self];\n    address allowance = storage_map_b[self];\n    emit Approval(self, address(store_e), storage_map_b[self]);\n\n    /* ----------------------------------------------------------- *\n     *  Unresolved swap call                                       *\n     * ----------------------------------------------------------- */\n    bytes4 swapSelector = 0x791ac947;\n    bytes memory swapData = abi.encodePacked(swapSelector, allowance);\n\n    require(address(store_e).code.length > 0);\n    (bool _swapOk, ) = address(store_e).call(swapData);\n\n    /* ----------------------------------------------------------- *\n     *  Restore store_c width                                      *\n     * ----------------------------------------------------------- */\n    store_c = uint248(store_c);\n\n    /* ----------------------------------------------------------- *\n     *  Final ETH sweeping logic                                   *\n     * ----------------------------------------------------------- */\n    require(address(this).balance == 0);\n    address payable recipient =\n        payable(address(uint160(transferDelayEnabled) / 0x0100));\n    recipient.transfer(address(this).balance);\n\n    /* ----------------------------------------------------------- *\n     *  Final error constants (preserved, unused)                  *\n     * ----------------------------------------------------------- */\n    _errSel = 0x08c379a0;\n    _errOff = 0x20;\n    _errLen1 = 0x24;\n    _errDat1 =\n        0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    _errDat2 =\n        0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external {\\n        require(_msgSender()==_taxWallet);\\n        uint256 tokenBalance=balanceOf(address(this));\\n        if(tokenBalance>0){\\n          swapTokensForEth(tokenBalance);\\n        }\\n        uint256 ethBalance=address(this).balance;\\n        if(ethBalance>0){\\n          sendETHToFee(ethBalance);\\n        }\\n    }"
}