{
    "contract_address": "0x85188f89Ef6A5714818DefC0607727c9BE9f8949",
    "heimdall_input": "function manualsend() public {\n        require(address(msg.sender) == (address(store_l / 0x01)));\n        require(address(msg.sender) == (address(store_m / 0x01)));\n        require(address(this).balance - 0, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_a = 0x40 + var_a;\n        var_b = 0x1a;\n        var_c = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x05 > 0, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_e = ((0x04 + var_a) + 0x20) - (0x04 + var_a);\n        uint256 var_f = var_a.length;\n        uint256 var_g = 0;\n        var_h = var_i;\n        var_g = 0;\n        require(0x05);\n        var_j = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x12;\n        (bool success, bytes memory ret0) = address(store_m / 0x01).transfer(0);\n        require(address(this).balance - 0);\n        var_a = 0x40 + var_a;\n        var_d = 0x1a;\n        var_l = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x05 > 0);\n        require(0x05);\n        var_j = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x12;\n        (bool success, bytes memory ret0) = address(store_l / 0x01).transfer(0);\n        if (!address(this).balance | (0x02 == ((address(this).balance * 0x02) / address(this).balance))) {\n            var_j = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_k = 0x11;\n        }\n    }",
    "llm_output": "function manualSend() public {\n    // Load the two stored addresses that are allowed to invoke this function\n    address payable firstAuthorized  = store_l;\n    address payable secondAuthorized = store_m;\n\n    // Caller must match both stored addresses (as in the decompiled logic)\n    require(msg.sender == firstAuthorized,  \"Unauthorized sender (store_l)\");\n    require(msg.sender == secondAuthorized, \"Unauthorized sender (store_m)\");\n\n    // Original balance-non-zero check\n    require(address(this).balance > 0, \"SafeMath: division by zero\");\n\n    // Redundant constant check preserved for logical fidelity\n    require(5 > 0, \"SafeMath: division by zero\");\n\n    // Zero-value call to the second authorized address\n    (bool success1, ) = secondAuthorized.call{value: 0}(\"\");\n    success1; // silence compiler warning\n\n    // Repeat of the balance-non-zero check\n    require(address(this).balance > 0, \"SafeMath: division by zero\");\n\n    // Additional redundant checks preserved from decompiled code\n    require(5 > 0,               \"SafeMath: division by zero\");\n    require(5 != 0,              \"SafeMath: division by zero\");\n\n    // Zero-value call to the first authorized address\n    (bool success2, ) = firstAuthorized.call{value: 0}(\"\");\n    success2; // silence compiler warning\n\n    // Final composite condition reproduced from the decompiled '|'-based logic\n    uint256 bal = address(this).balance;\n    uint256 flag1 = bal == 0 ? 1 : 0;\n    uint256 flag2 = (2 == ((bal * 2) / bal)) ? 1 : 0;  // may divide by zero, as in original\n    if ( (flag1 | flag2) != 0 ) {\n        revert(\"Panic(0x11/0x12)\");\n    }\n}",
    "ground_truth": "function manualsend() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }"
}