{
    "contract_address": "0x8a357F1146a32d8a2494bCdaB62452ed3498196a",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_p)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_f = 0x01000000000000000000000000000000000000000000 | (uint248(store_f));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_l).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!((var_d + ret0.length) - var_d) < 0x20);\n        require(var_d.length == (address(var_d.length)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this));\n        require(address(store_l));\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_l);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_l), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_o = var_d.length;\n        address var_p = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_l).code.length);\n        (bool success, bytes memory ret0) = address(store_l).Unresolved_791ac947(var_l); // call\n        store_f = uint248(store_f);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_p).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_p = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_p = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    /* \n        Access control: only the designated controller address may trigger this\n        routine, mirroring `require(address(msg.sender) == (address(store_p)));`.\n    */\n    require(msg.sender == controller, \"Manual swap: unauthorized\");\n\n    address self = address(this);\n\n    /* \n        Original bytecode checks that the current contract address has not been\n        processed yet: `require(!storage_map_b[var_a]);`.  \n        The mapping has been renamed to `swapPerformed`.\n    */\n    require(!swapPerformed[self], \"Manual swap: already executed\");\n\n    /*\n        Bitwise OR against a hard-coded mask, exactly as in the decompiled\n        snippet:  \n        `store_f = 0x0100\u2026 | (uint248(store_f));`\n    */\n    flags = uint248(flags) | 0x01000000000000000000000000000000000000000000;\n\n    /*\n        Retrieve WETH address from the router with the same staticcall pattern\n        found in the bytecode.\n    */\n    (bool wethOk, bytes memory wethData) =\n        address(router).staticcall(abi.encodeWithSelector(bytes4(keccak256(\"WETH()\"))));\n    require(wethOk && wethData.length >= 32, \"Manual swap: WETH() failed\");\n    address weth = abi.decode(wethData, (address));\n\n    /*\n        The original bytecode contains two seemingly redundant `require`\n        statements: `require(address(this));` and `require(address(store_l));`.\n    */\n    require(self != address(0), \"Manual swap: zero self\");\n    require(address(router) != address(0), \"Manual swap: zero router\");\n\n    /*\n        The bytecode performs a no-op assignment\n        `storage_map_b[var_a] = storage_map_b[var_a];`\n        followed by an `Approval` event.  We replicate the observable behaviour\n        without mutating storage.\n    */\n    emit Approval(self, address(router), _allowances[self][address(router)]);\n\n    /*\n        Raw call into the router using selector `0x791ac947`\n        (`Unresolved_791ac947` in the decompiled output).\n    */\n    bytes memory swapPayload = abi.encodeWithSelector(0x791ac947, weth);\n    (bool swapOk, ) = address(router).call(swapPayload);\n    require(swapOk, \"Manual swap: router call failed\");\n\n    /*\n        Cast back to `uint248` exactly like `store_f = uint248(store_f);`\n        even though the value is already `uint248`.\n    */\n    flags = uint248(flags);\n\n    /*\n        Original bytecode: `require(!address(this).balance);`\n        Enforces that balance must be zero.\n    */\n    require(address(this).balance == 0, \"Manual swap: non-zero balance\");\n\n    /*\n        Forward whatever balance might remain (expected to be zero) to the\n        controller address, preserving the original transfer logic.\n    */\n    payable(controller).transfer(address(this).balance);\n}",
    "ground_truth": "function manualSwap() external {\n        require(_msgSender()==_taxWallet);\n        uint256 tokenBalance=balanceOf(address(this));\n        if(tokenBalance>0){\n          swapTokensForEth(tokenBalance);\n        }\n        uint256 ethBalance=address(this).balance;\n        if(ethBalance>0){\n          sendETHToFee(ethBalance);\n        }\n    }"
}