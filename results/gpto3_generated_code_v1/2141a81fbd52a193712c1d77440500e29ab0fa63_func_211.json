{
    "contract_address": "0x2141a81Fbd52a193712C1d77440500e29aB0Fa63",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_h[var_a]);\n        store_g = 0x01000000000000000000000000000000000000000000 | (uint248(store_g));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_f), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_f);\n        address var_b = keccak256(var_a);\n        storage_map_h[var_a] = storage_map_h[var_a];\n        address var_k = storage_map_h[var_a];\n        emit Approval(address(this), address(store_f), storage_map_h[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_h[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_f).code.length);\n        (bool success, bytes memory ret0) = address(store_f).Unresolved_791ac947(var_l); // call\n        store_g = uint248(store_g);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // Original authentication check\n    require(\n        msg.sender == address(uint160(transferDelayEnabled / 0x0100)),\n        \"Unauthorized caller\"\n    );\n\n    address self = address(this);\n\n    // Misc. constants preserved from the original byte-code\n    uint8 _placeholder1 = 0x01;\n\n    // Prevent re-entry / double-execution (semantics identical to `!storage_map_h[self]`)\n    require(storage_map_h[self] == 0, \"Already processed\");\n\n    // Bit-wise operation on `store_g` exactly as in the decompiled output\n    store_g = uint248(store_g) | 0x01000000000000000000000000000000000000000000;\n\n    uint8 _placeholder2 = 0x02;\n\n    // Scratch pointer (memory management artefact)\n    uint256 memPtr = 0x60;\n\n    // Unused calldata fragment kept for semantic parity\n    bytes memory _callDataFragment = msg.data;\n\n    // ---------------------------------------------------------------------\n    // External static-call: `WETH()` on the router held in `store_f`\n    // ---------------------------------------------------------------------\n    bytes4 WETH_SELECTOR = 0xad5c4648; // Function selector for `WETH()`\n    (bool _wethOk, bytes memory wethRet) = address(store_f).staticcall(\n        abi.encodeWithSelector(WETH_SELECTOR)\n    );\n\n    // Maintain the original pointer arithmetic\n    memPtr += wethRet.length + 0x1f;\n\n    // Legacy / placeholder checks from the original byte-code\n    require(\n        !(((memPtr + wethRet.length) - memPtr) < 0x20),\n        \"ERC20: approve to the zero address\"\n    );\n    require(\n        wethRet.length == uint256(uint160(wethRet.length)),\n        \"ERC20: approve to the zero address\"\n    );\n\n    // Further placeholder checks retained verbatim\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(address(store_f) != address(0), \"ERC20: approve to the zero address\");\n\n    // ---------------------------------------------------------------------\n    // Mapping mutation & Approval event emission\n    // ---------------------------------------------------------------------\n    storage_map_h[self] = storage_map_h[self]; // No-op write kept for fidelity\n    uint256 currentValue = storage_map_h[self];\n\n    emit Approval(self, address(store_f), currentValue);\n\n    // ---------------------------------------------------------------------\n    // External call: `swapExactETHForTokens`-style selector (0x791ac947)\n    // ---------------------------------------------------------------------\n    bytes4 SWAP_SELECTOR = 0x791ac947;\n    (bool _swapOk, bytes memory _swapRet) = address(store_f).call(\n        abi.encodeWithSelector(SWAP_SELECTOR, currentValue)\n    );\n\n    // Re-casting `store_g` \u2013 mirrors the original, functionally no-op\n    store_g = uint248(store_g);\n\n    // Ensure contract holds no residual ETH, then forward anything left\n    require(address(this).balance == 0, \"Non-zero ETH balance after swap\");\n    payable(address(uint160(transferDelayEnabled / 0x0100))).transfer(address(this).balance);\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}