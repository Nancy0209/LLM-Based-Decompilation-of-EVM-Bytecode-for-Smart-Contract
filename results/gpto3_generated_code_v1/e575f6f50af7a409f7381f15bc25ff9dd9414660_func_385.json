{
    "contract_address": "0xE575f6f50AF7A409F7381F15bC25Ff9dD9414660",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (store_a - ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x03;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory tokenName) {\n    assembly {\n        // The string is stored at storage slot 0\n        let slotValue := sload(0)\n\n        // If the least-significant bit is 1, the string is a \u201cshort\u201d (\u226431 bytes) string\n        switch and(slotValue, 1)\n        case 1 {\n            /* -------------------------------------------------------------\n             * Short string (\u226431 bytes) packed into a single storage word.\n             *\n             * Layout of `slotValue` (lowest byte on the right):\n             * [     string data (31 bytes)      |  length * 2 + 1  ]\n             * -----------------------------------------------------------*/\n            let length := shr(1, and(slotValue, 0xFF)) // (len * 2 + 1) >> 1\n\n            // Allocate memory for the return value\n            tokenName := mload(0x40)       // grab free memory pointer\n            mstore(tokenName, length)      // store string length\n\n            // Copy the packed data\n            let dataWord := shr(8, slotValue)          // drop the length byte\n            let shift := mul(sub(32, length), 8)       // left-shift to right-align\n            mstore(add(tokenName, 0x20), shl(shift, dataWord))\n\n            // Advance free memory pointer\n            mstore(0x40, add(add(tokenName, 0x20), and(add(length, 31), not(31))))\n        }\n        default {\n            /* -------------------------------------------------------------\n             * Long string (>31 bytes) stored out-of-line.\n             *\n             * slotValue >> 1  \u2192  start slot of the string in storage.\n             * That slot stores the length, and the data words follow.\n             * -----------------------------------------------------------*/\n            let dataSlot := shr(1, slotValue)          // starting slot\n            let length   := sload(dataSlot)            // string length\n\n            // Allocate memory for the return value\n            tokenName := mload(0x40)\n            mstore(tokenName, length)\n\n            let destPtr := add(tokenName, 0x20)        // where data will be copied\n            let words   := div(add(length, 31), 32)    // number of 32-byte words\n\n            // Copy each 32-byte word from storage to memory\n            for { let i := 0 } lt(i, words) { i := add(i, 1) } {\n                mstore(add(destPtr, mul(i, 32)), sload(add(add(dataSlot, 1), i)))\n            }\n\n            // Advance free memory pointer\n            mstore(0x40, add(destPtr, mul(words, 32)))\n        }\n    }\n}",
    "ground_truth": "function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n    function kLast() external view returns (uint256);\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}"
}