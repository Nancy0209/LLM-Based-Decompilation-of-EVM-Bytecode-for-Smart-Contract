{
    "contract_address": "0x54eEA875389f51FB46A26Ea5a5DbBa480ca74339",
    "heimdall_input": "function withdrawStuckTokens(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(this);\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!(((var_e + ret0.length) - var_e) < 0x20), \"No tokens\");\n        require(var_e.length > 0, \"No tokens\");\n        var_f = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x20;\n        var_d = 0x09;\n        var_g = 0x4e6f20746f6b656e730000000000000000000000000000000000000000000000;\n        var_f = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_c = address(this);\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_70a08231(var_c); // staticcall\n    }",
    "llm_output": "function withdrawStuckTokens(address token) public {\n    // Solidity tautology preserved from decompiled code\n    require(token == address(token));\n\n    // Only the contract owner may execute\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    // First balanceOf check\n    (bool success, bytes memory data) = token.staticcall(\n        abi.encodeWithSelector(bytes4(0x70a08231), address(this)) // balanceOf(address)\n    );\n    require(success && data.length >= 32, \"No tokens\");\n\n    uint256 balance;\n    assembly {\n        balance := mload(add(data, 0x20))\n    }\n    require(balance > 0, \"No tokens\");\n\n    // Second balanceOf call (redundant but kept to match original logic)\n    token.staticcall(\n        abi.encodeWithSelector(bytes4(0x70a08231), address(this))\n    );\n}",
    "ground_truth": "function withdrawStuckTokens(address tkn) public onlyOwner {\r\n        require(IERC20(tkn).balanceOf(address(this)) > 0, \"No tokens\");\r\n        uint256 amount = IERC20(tkn).balanceOf(address(this));\r\n        IERC20(tkn).transfer(msg.sender, amount);\r\n    }"
}