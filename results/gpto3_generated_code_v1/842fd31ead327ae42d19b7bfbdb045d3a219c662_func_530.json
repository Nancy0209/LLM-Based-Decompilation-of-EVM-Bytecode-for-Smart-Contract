{
    "contract_address": "0x842FD31eAd327AE42D19B7BFbdB045d3A219c662",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        if (address(arg0)) {\n            if (address(msg.sender)) {\n                if (arg1 > 0) {\n                    if (!AntiWhaleEnabled) {\n                        address var_a = address(msg.sender);\n                        var_b = 0x0a;\n                        require(address(arg0), \"Transfer amount exceeds the max transfer limit.\");\n                        require(address(msg.sender), \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = address(arg0);\n                        var_b = 0x04;\n                        require(arg1 > 0, \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = address(msg.sender);\n                        var_b = 0x04;\n                        require(!(bytes1(AntiWhaleEnabled)), \"Transfer amount exceeds the max transfer limit.\");\n                        require(!(!bytes1(storage_map_e[var_a])), \"Transfer amount exceeds the max transfer limit.\");\n                        require(!(!bytes1(storage_map_e[var_a])), \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = address(msg.sender);\n                        var_b = 0x02;\n                        require(!(!bytes1(storage_map_e[var_a])), \"Transfer amount exceeds the max transfer limit.\");\n                        require(!(!bytes1(storage_map_e[var_a])), \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = address(msg.sender);\n                        var_b = 0x05;\n                        require(!(!bytes1(storage_map_e[var_a])), \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_c = 0x11;\n                        storage_map_e[var_a] = storage_map_e[var_a] - arg1;\n                        require(bytes1(storage_map_e[var_a]), \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = address(arg0);\n                        var_b = 0x04;\n                        require(!((storage_map_e[var_a] - arg1) > storage_map_e[var_a]), \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = address(arg0);\n                        var_b = 0x04;\n                        require(0, \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = address(msg.sender);\n                        var_b = 0x04;\n                        require(!(!bytes1(storage_map_e[var_a])), \"Transfer amount exceeds the max transfer limit.\");\n                        require(!(!bytes1(storage_map_e[var_a])), \"Transfer amount exceeds the max transfer limit.\");\n                        require(!(!bytes1(storage_map_e[var_a])), \"Transfer amount exceeds the max transfer limit.\");\n                        require(0, \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_c = 0x11;\n                        require((0 == ((0 * arg1) / arg1)) | !arg1, \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_c = 0x12;\n                        require(0x03e8, \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = address(this);\n                        var_b = 0x05;\n                        require(!((0 * arg1) / 0x03e8), \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_c = 0x11;\n                        storage_map_e[var_a] = ((0 * arg1) / 0x03e8) + storage_map_e[var_a];\n                        uint256 var_d = (0 * arg1) / 0x03e8;\n                        emit Transfer(address(msg.sender), address(this), (0 * arg1) / 0x03e8);\n                        require(!(storage_map_e[var_a] > (((0 * arg1) / 0x03e8) + storage_map_e[var_a])), \"Transfer amount exceeds the max transfer limit.\");\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_c = 0x11;\n                        require(!((arg1 - ((0 * arg1) / 0x03e8)) > arg1), \"Transfer amount exceeds the max transfer limit.\");\n                    }\n                    require(!(bytes1(storage_map_e[var_a])), \"Transfer amount exceeds the max transfer limit.\");\n                    require(!(bytes1(storage_map_e[var_a])), \"Transfer amount exceeds the max transfer limit.\");\n                }\n            }\n        }\n        require(!(arg1 > antiWhaleThreshold), \"Transfer amount exceeds the max transfer limit.\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x2f;\n        var_g = 0x5472616e7366657220616d6f756e74206578636565647320746865206d617820;\n        var_h = 0x7472616e73666572206c696d69742e0000000000000000000000000000000000;\n        if (!AntiWhaleEnabled) {\n            if (!AntiWhaleEnabled) {\n            }\n        }\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x29;\n        var_g = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_h = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_h = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x23;\n        var_g = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_h = 0x6573730000000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "pragma solidity ^0.8.20;\n\ncontract DecompiledContractRefined {\n    /* -------------------------------------------------------------------------- */\n    /*                                   Storage                                  */\n    /* -------------------------------------------------------------------------- */\n    bool public AntiWhaleEnabled;\n    uint256 public antiWhaleThreshold;\n\n    /*  The original byte-code seemed to index balances (and a few other values)   *\n     *  by raw 32-byte slots rather than a clean address => uint256 mapping.      *\n     *  To keep 100 % semantic fidelity we reproduce that behaviour here.         */\n    mapping(bytes32 => uint256) internal _slotData;\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   Events                                   */\n    /* -------------------------------------------------------------------------- */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* -------------------------------------------------------------------------- */\n    /*                               Helper Methods                               */\n    /* -------------------------------------------------------------------------- */\n    bytes32 private constant ERROR_SELECTOR =\n        0x4e487b7100000000000000000000000000000000000000000000000000000000;\n\n    function _asKey(address account) private pure returns (bytes32) {\n        /*  Pack an address into 32 bytes in the same way the decompiler did. */\n        return bytes32(uint256(uint160(account)));\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                  transfer                                  */\n    /* -------------------------------------------------------------------------- */\n    function transfer(address recipient, uint256 amount) public {\n        /* ------------------------------------------------------------------ */\n        /*                   Top-level invariant copied verbatim              */\n        /* ------------------------------------------------------------------ */\n        require(recipient == address(recipient));\n\n        if (recipient != address(0)) {\n            if (msg.sender != address(0)) {\n                if (amount > 0) {\n                    /* ------------------------------------------------------ */\n                    /*                  Anti-whale disabled path              */\n                    /* ------------------------------------------------------ */\n                    if (!AntiWhaleEnabled) {\n                        bytes32 senderKey = _asKey(msg.sender);\n                        bytes32 recipientKey = _asKey(recipient);\n\n                        require(\n                            recipient != address(0),\n                            \"Transfer amount exceeds the max transfer limit.\"\n                        );\n                        require(\n                            msg.sender != address(0),\n                            \"Transfer amount exceeds the max transfer limit.\"\n                        );\n                        require(\n                            amount > 0,\n                            \"Transfer amount exceeds the max transfer limit.\"\n                        );\n                        require(\n                            !AntiWhaleEnabled,\n                            \"Transfer amount exceeds the max transfer limit.\"\n                        );\n\n                        /* Multiple duplicated checks from the original code */\n                        require(\n                            bytes1(bytes32(_slotData[senderKey])) != 0x00,\n                            \"Transfer amount exceeds the max transfer limit.\"\n                        );\n                        require(\n                            bytes1(bytes32(_slotData[senderKey])) != 0x00,\n                            \"Transfer amount exceeds the max transfer limit.\"\n                        );\n                        require(\n                            bytes1(bytes32(_slotData[senderKey])) != 0x00,\n                            \"Transfer amount exceeds the max transfer limit.\"\n                        );\n                        require(\n                            bytes1(bytes32(_slotData[senderKey])) != 0x00,\n                            \"Transfer amount exceeds the max transfer limit.\"\n                        );\n                        require(\n                            bytes1(bytes32(_slotData[senderKey])) != 0x00,\n                            \"Transfer amount exceeds the max transfer limit.\"\n                        );\n\n                        /* Under-flowing subtraction preserved exactly */\n                        unchecked {\n                            _slotData[ERROR_SELECTOR] =\n                                _slotData[ERROR_SELECTOR] -\n                                amount;\n                        }\n\n                        require(\n                            bytes1(bytes32(_slotData[ERROR_SELECTOR])) != 0x00,\n                            \"Transfer amount exceeds the max transfer limit.\"\n                        );\n\n                        require(\n                            !((_slotData[recipientKey] - amount) >\n                                _slotData[recipientKey]),\n                            \"Transfer amount exceeds the max transfer limit.\"\n                        );\n\n                        /* -------------------------------------------------- */\n                        /*   The original byte-code has a hard-coded revert   */\n                        /* -------------------------------------------------- */\n                        revert(\"Decompiler artifact\");\n\n                        /*\n                            The decompiled listing continues after the\n                            `require(false)` statement, but that code is\n                            unreachable in EVM semantics.  To remain faithful\n                            we stop execution here exactly as the original\n                            contract does.\n                        */\n                    }\n\n                    /* ------------------------------------------------------ */\n                    /*      Additional duplicated checks (anti-whale on)      */\n                    /* ------------------------------------------------------ */\n                    bytes32 senderKey2 = _asKey(msg.sender);\n\n                    require(\n                        bytes1(bytes32(_slotData[senderKey2])) == 0x00,\n                        \"Transfer amount exceeds the max transfer limit.\"\n                    );\n                    require(\n                        bytes1(bytes32(_slotData[senderKey2])) == 0x00,\n                        \"Transfer amount exceeds the max transfer limit.\"\n                    );\n                }\n            }\n        }\n\n        /* ------------------------------------------------------------------ */\n        /*                    Global anti-whale threshold check               */\n        /* ------------------------------------------------------------------ */\n        require(\n            !(amount > antiWhaleThreshold),\n            \"Transfer amount exceeds the max transfer limit.\"\n        );\n\n        /* ------------------------------------------------------------------ */\n        /*  The remainder of the original listing only assigned constants and *\n         *  performed no observable state changes or checks.  We finish here. */\n        /* ------------------------------------------------------------------ */\n    }\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }"
}