{
    "contract_address": "0xEA7e79D24b9FfA2EB98f06672377FE1212C2195E",
    "heimdall_input": "function openTrading() public {\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(store_f / 0x010000000000000000000000000000000000000000)), \"trading is already open\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x17;\n        var_e = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n        store_l = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_l));\n        require(0x09, \"ERC20: approve to the zero address\");\n        require(!0x05f5e100 | (0x01 == 0x01), \"ERC20: approve to the zero address\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(address(this) - 0, \"ERC20: approve to the zero address\");\n        require(address(store_l / 0x01) - 0, \"ERC20: approve to the zero address\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x22;\n        var_e = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_h = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        address var_f = address(this);\n        var_i = 0x02;\n        var_f = address(store_l / 0x01);\n        address var_i = keccak256(var_f);\n        storage_map_m[var_f] = 0x05f5e100;\n        var_a = 0x05f5e100;\n        emit Approval(address(this), address(store_l / 0x01), 0x05f5e100);\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_l / 0x01).factory(var_b); // staticcall\n        uint256 var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_j == (address(var_j)));\n        var_k = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_l / 0x01).WETH(var_d); // staticcall\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_j == (address(var_j)));\n        var_l = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_e = address(this);\n        address var_h = address(var_j);\n        (bool success, bytes memory ret0) = address(var_j).Unresolved_c9c65396(var_e); // call\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x24;\n        var_e = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_h = 0x7265737300000000000000000000000000000000000000000000000000000000;\n        if (0x0a) {\n            if (0x0a == 0x01) {\n                if (0x0a == 0x02) {\n                    if (!0x09 > 0xff) {\n                        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_g = 0x11;\n                        if (!0x0200 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                            var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_g = 0x11;\n                            if (!((0x0a < 0x0b) & (0x09 < 0x4e)) | ((0x0a < 0x0133) & (0x09 < 0x20))) {\n                                if (!0x09 > 0x01) {\n                                    if (!0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        var_g = 0x11;\n                                        if (!0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                            var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                            var_g = 0x11;\n                                            if (!0x01) {\n                                            }\n                                            if (!0x3b9aca00 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                                                var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                                var_g = 0x11;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function openTrading() public {\n    /* -------------------------------------------------------------------------- */\n    /*                               ownership check                              */\n    /* -------------------------------------------------------------------------- */\n    require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n\n    /* -------------------------------------------------------------------------- */\n    /*                       make sure trading is not live yet                    */\n    /* -------------------------------------------------------------------------- */\n    require(!tradingOpen, \"trading is already open\");\n\n    /* -------------------------------------------------------------------------- */\n    /*                 initialise / cache the Uniswap-V2 router address           */\n    /* -------------------------------------------------------------------------- */\n    _router = address(uint160(_router) | uint160(0x7a250d5630B4cF539739DF2C5DaCb4c659F2488D));\n\n    /* -------------------------------------------------------------------------- */\n    /*                two no-op require statements from the byte-code             */\n    /* -------------------------------------------------------------------------- */\n    require(true, \"ERC20: approve to the zero address\");\n    require(true, \"ERC20: approve to the zero address\");\n\n    /* -------------------------------------------------------------------------- */\n    /*                  grant the router a fixed allowance (1e8)                  */\n    /* -------------------------------------------------------------------------- */\n    _approve(address(this), _router, 100_000_000);\n    emit Approval(address(this), _router, 100_000_000);\n\n    /* -------------------------------------------------------------------------- */\n    /*                         fetch factory address from router                  */\n    /* -------------------------------------------------------------------------- */\n    (bool, bytes memory factoryData) =\n        _router.staticcall(abi.encodeWithSelector(bytes4(0xc45a0155))); // factory()\n    require(factoryData.length >= 32, \"Router: factory() length\");\n\n    address factory;\n    assembly {\n        factory := mload(add(factoryData, 32))\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                           fetch WETH address from router                   */\n    /* -------------------------------------------------------------------------- */\n    (, bytes memory wethData) =\n        _router.staticcall(abi.encodeWithSelector(bytes4(0xad5c4648))); // WETH()\n    require(wethData.length >= 32, \"Router: WETH() length\");\n\n    address weth;\n    assembly {\n        weth := mload(add(wethData, 32))\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                            create the trading pair                         */\n    /* -------------------------------------------------------------------------- */\n    (bool, bytes memory pairData) =\n        factory.call(abi.encodeWithSelector(bytes4(0xc9c65396), address(this), weth)); // createPair()\n    require(pairData.length >= 32, \"Factory: createPair length\");\n\n    assembly {\n        uniswapPair := mload(add(pairData, 32))\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                         approve the pair for the same allowance            */\n    /* -------------------------------------------------------------------------- */\n    _approve(address(this), uniswapPair, 100_000_000);\n\n    /* -------------------------------------------------------------------------- */\n    /*                                flip trading flag                           */\n    /* -------------------------------------------------------------------------- */\n    tradingOpen = true;\n\n    /* -------------------------------------------------------------------------- */\n    /*                         preserved, logically-dead code                     */\n    /* -------------------------------------------------------------------------- */\n    if (10 != 0) {\n        if (10 == 1) {\n            if (10 == 2) {\n                if (!(9 > 0xff)) {\n                    if (!(0x0200 > type(uint256).max)) {\n                        bool condition1 = (10 < 11 && 9 < 0x4e);\n                        bool condition2 = (10 < 0x0133 && 9 < 0x20);\n                        if (!(condition1 || condition2)) {\n                            if (!(9 > 1)) {\n                                if (!(1 > type(uint256).max)) {\n                                    if (!(10 > type(uint256).max)) {\n                                        if (!(1 == 0)) {\n                                            // no-op\n                                        }\n                                        if (!(0x3b9aca00 > type(uint256).max)) {\n                                            // no-op\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "ground_truth": "function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        firstBlock = block.number;\r\n    }"
}