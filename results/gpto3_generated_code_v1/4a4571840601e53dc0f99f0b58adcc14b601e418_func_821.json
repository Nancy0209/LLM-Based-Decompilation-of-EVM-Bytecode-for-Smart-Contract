{
    "contract_address": "0x4a4571840601e53dC0f99F0b58AdCC14B601e418",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (!(store_a) == ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (!(store_a) == ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x03;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    if (!0 > var_c.length) {\n                                        uint256 var_g = 0;\n                                        return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                        return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory tokenName) {\n    assembly {\n        // Load the raw value stored in slot 0.  \n        // Solidity stores short strings (\u226431 bytes) directly in the slot,\n        // while longer strings are stored at keccak256(slot) and the slot\n        // itself holds (length * 2) + 1.\n        let slotValue := sload(0)\n\n        // --------------------------------------------------------------------- \n        // Handle an empty string early.\n        // --------------------------------------------------------------------- \n        if iszero(slotValue) {\n            tokenName := mload(0x40)      // grab free-memory pointer\n            mstore(tokenName, 0)          // zero length\n            mstore(0x40, add(tokenName, 0x20))\n            leave\n        }\n\n        // --------------------------------------------------------------------- \n        // Distinguish between short (in-place) and long (external) strings.\n        // --------------------------------------------------------------------- \n        switch and(slotValue, 1)\n        // -----------------------------------------------------------------    \n        // SHORT STRING  (in-place, \u226431 bytes)\n        // -----------------------------------------------------------------    \n        case 0 {\n            // Length is stored in the higher 255 bits (divided by 2).\n            let length := shr(1, slotValue)\n\n            // -----------------------------------------------------------------\n            // Allocate memory for the return string.\n            // -----------------------------------------------------------------\n            tokenName := mload(0x40)      // current free memory pointer\n            mstore(tokenName, length)     // store length\n\n            // Copy string bytes.  \n            // Shift left by 8 bits to discard the lowest byte (flags) and\n            // align the remaining 31 bytes to the right end of the word.\n            let data := shr(8, mul(slotValue, 0x100))\n            mstore(add(tokenName, 0x20), data)\n\n            // Update free memory pointer (round length up to next multiple of 32).\n            let allocSize := and(add(length, 31), not(31))\n            mstore(0x40, add(add(tokenName, 0x20), allocSize))\n        }\n        // -----------------------------------------------------------------    \n        // LONG STRING  (external, >31 bytes)\n        // -----------------------------------------------------------------    \n        default {\n            // Extract length.\n            let length := shr(1, slotValue)\n\n            // Compute the starting slot of the string data: keccak256(0).\n            mstore(0x00, 0)\n            let dataSlot := keccak256(0x00, 0x20)\n\n            // -----------------------------------------------------------------\n            // Allocate memory for the return string.\n            // -----------------------------------------------------------------\n            tokenName := mload(0x40)\n            mstore(tokenName, length)\n            let dataPtr := add(tokenName, 0x20)\n\n            // Copy words from storage to memory.\n            for { let offset := 0 } lt(offset, length) { offset := add(offset, 32) } {\n                mstore(add(dataPtr, offset), sload(add(dataSlot, div(offset, 32))))\n            }\n\n            // Update free memory pointer (round length up to next multiple of 32).\n            let allocSize := and(add(length, 31), not(31))\n            mstore(0x40, add(dataPtr, allocSize))\n        }\n    }\n}",
    "ground_truth": "function name() public view returns (string memory) {\r\n        return _name;\r\n    }"
}