{
    "contract_address": "0x210a768a5146f4d3C1068bB37dD780304c6D648D",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_p)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_f = 0x01000000000000000000000000000000000000000000 | (uint248(store_f));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_l).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!((var_d + ret0.length) - var_d) < 0x20);\n        require(var_d.length == (address(var_d.length)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this));\n        require(address(store_l));\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_l);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_l), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_o = var_d.length;\n        address var_p = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_l).code.length);\n        (bool success, bytes memory ret0) = address(store_l).Unresolved_791ac947(var_l); // call\n        store_f = uint248(store_f);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_p).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_p = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_p = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    /* --------------------------------- Access Control --------------------------------- */\n    // Only the pre-configured controller (stored in `store_p`) can call this function.\n    require(msg.sender == store_p, \"manualSwap: caller is not authorised\");\n\n    /* ------------------------------- Re-entrancy Check -------------------------------- */\n    address self = address(this);\n\n    // Ensure this contract address has not been processed before.\n    require(!storage_map_b[self], \"manualSwap: already processed\");\n\n    /* ------------------------------ Configuration Flags ------------------------------- */\n    // Update `store_f` by OR-ing with the hard-coded flag value.\n    store_f = uint248(store_f) | 0x01000000000000000000000000000000000000000000;\n\n    /* ----------------------------- External Static Call ------------------------------ */\n    // Call `WETH()` on the external contract referenced by `store_l`.\n    (bool wethCallSuccess, bytes memory wethReturn) =\n        address(store_l).staticcall(abi.encodeWithSignature(\"WETH()\"));\n\n    // The original bytecode contained a length check on the returned data; reproduce it here.\n    require(wethReturn.length >= 32, \"manualSwap: invalid WETH() return\");\n\n    // Decode the returned WETH address (kept for parity with the original logic, even if unused).\n    address wethAddress = abi.decode(wethReturn, (address));\n    wethAddress; // suppress unused-variable warning\n\n    /* ----------------------------- Self-Assignment (N-O-P) --------------------------- */\n    // The decompiled bytecode wrote the existing value back to the same mapping slot.\n    storage_map_b[self] = storage_map_b[self];\n\n    /* ------------------------------------ Event -------------------------------------- */\n    emit Approval(self, address(store_l), storage_map_b[self]);\n\n    /* ----------------------------- External Swap Call -------------------------------- */\n    // Build calldata for the function with selector `0x791ac947` (exact signature unknown).\n    bytes memory swapData = abi.encodeWithSelector(\n        0x791ac947,\n        storage_map_b[self]     // The original code forwarded this value as the first parameter.\n    );\n\n    // Execute the external call; success or failure behaviour is preserved (no explicit checks).\n    address(store_l).call(swapData);\n\n    /* ------------------------------ Post-Swap Housekeeping --------------------------- */\n    // The original code required the contract to hold no ether at this point.\n    require(address(this).balance == 0, \"manualSwap: non-zero ether balance\");\n\n    // Forward any (zero) balance to `store_p`; return value deliberately unchecked to match original behaviour.\n    store_p.call{value: address(this).balance}(\"\");\n}",
    "ground_truth": "function manualSwap() external {\n        require(_msgSender()==_taxWallet);\n        uint256 tokenBalance=balanceOf(address(this));\n        if(tokenBalance>0){\n          swapTokensForEth(tokenBalance);\n        }\n        uint256 ethBalance=address(this).balance;\n        if(ethBalance>0){\n          sendETHToFee(ethBalance);\n        }\n    }"
}