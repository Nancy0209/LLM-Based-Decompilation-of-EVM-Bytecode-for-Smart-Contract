{
    "contract_address": "0x0a2746D0FE88EeB9538183408295c061593E478e",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (store_a - ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory tokenName) {\n    assembly {\n        // Load the raw string value stored in slot 0\n        let raw := sload(0)\n\n        // Case 1: empty string\n        switch raw\n        case 0 {\n            tokenName := mload(0x40)      // free-memory pointer\n            mstore(tokenName, 0)          // length := 0\n            mstore(0x40, add(tokenName, 0x20))\n        }\n        default {\n            tokenName := mload(0x40)      // start allocating return data\n\n            // If the lowest bit is 0 the string is short (<= 31 bytes)\n            switch and(raw, 1)\n            case 0 {\n                let len := div(raw, 2)        // actual string length\n                mstore(tokenName, len)        // store length\n\n                // Shift right so the bytes are aligned at the right end\n                let shifted := shr(mul(sub(32, len), 8), raw)\n                mstore(add(tokenName, 0x20), shifted)\n\n                // Update free-memory pointer, rounding up to the next 32-byte word\n                mstore(0x40, add(tokenName, and(add(len, 0x3f), not(0x1f))))\n            }\n            // Otherwise it's a long string (> 31 bytes) and the data starts at keccak256(slot)\n            default {\n                let len := div(raw, 2)\n                mstore(tokenName, len)\n\n                // Calculate the starting storage slot of the string data\n                mstore(0x00, 0)                     // slot 0\n                let dataSlot := keccak256(0x00, 0x20)\n\n                // Pointer in memory where string data will be copied\n                let destPtr := add(tokenName, 0x20)\n\n                // Copy the string data word by word\n                for { let offset := 0 } lt(offset, len) { offset := add(offset, 0x20) } {\n                    mstore(add(destPtr, offset), sload(add(dataSlot, div(offset, 0x20))))\n                }\n\n                // Update free-memory pointer\n                mstore(0x40, and(add(add(destPtr, len), 0x1f), not(0x1f)))\n            }\n        }\n    }\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }"
}