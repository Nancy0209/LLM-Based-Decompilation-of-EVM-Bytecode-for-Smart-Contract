{
    "contract_address": "0x050355a5eA2d1590C7FBB1aA354b4f698d221b37",
    "heimdall_input": "function updateMaxTxnAmount(uint256 arg0) public view {\n        require(arg0 == arg0);\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(totalSupply) & (0x05 > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / totalSupply)));\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x03e8);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n    }",
    "llm_output": "function updateMaxTxnAmount(uint256 newMaxTxnAmount) public view {\n    // No-op equality check preserved from decompiled code\n    require(newMaxTxnAmount == newMaxTxnAmount, \"Self-equality check failed\");\n\n    // Owner check (original decompiled logic divided by 1, which is a no-op)\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    // Obscure overflow/bitwise condition kept verbatim in spirit\n    uint256 overflowCondition = (~totalSupply) & (\n        (5 > (type(uint256).max / totalSupply) ? 1 : 0)\n    );\n    require(overflowCondition != 0, \"Condition failed\");\n\n    // Constant true requirement (was `require(0x03e8);`)\n    require(1000 != 0, \"Constant condition failed\");\n}",
    "ground_truth": "function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot set maxTransactionAmount lower than 0.5%\"\r\n        );\r\n        maxTransactionAmount = newNum * (10**18);\r\n    }"
}