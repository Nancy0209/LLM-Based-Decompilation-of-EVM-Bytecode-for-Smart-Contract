{
    "contract_address": "0xB108eB679AAD7822009ad3A318Cc7daC6198f03b",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (store_a - ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x68;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory tokenName) {\n    assembly {\n        /** \n         * The original decompiled variable `store_a` is the raw value kept in\n         * storage slot \u2011 0.  According to the decompiler it represents\n         * (length * 2) of the actual string that must be returned.\n         */\n        let rawSlot0 := sload(0)\n\n        /**\n         * Fast-exit: if nothing is stored just return an empty string.\n         */\n        switch iszero(rawSlot0)\n        case 1 {\n            tokenName := mload(0x40)       // free-memory pointer\n            mstore(tokenName, 0)           // length = 0\n            mstore(0x40, add(tokenName, 0x20))\n        }\n        default {\n            /**\n             * The decompiled routine performed the following check:\n             *\n             *    if (rawSlot0 - ((rawSlot0 / 2) < 0x20)) { panic(0x22); }\n             *\n             * Solidity cannot subtract a boolean from a uint directly, so we\n             * re-implement it in Yul exactly as it was.\n             */\n            let halfLen      := div(rawSlot0, 2)\n            let subCondition := sub(rawSlot0, lt(halfLen, 0x20))\n\n            if subCondition {\n                // panic(uint256) selector \u2011 0x4e487b71  |  panic code 0x22\n                mstore(0x00, 0x4e487b71)\n                mstore(0x04, 0x22)\n                revert(0x00, 0x24)\n            }\n\n            /**\n             * At this point `halfLen` is the real byte length of the string.\n             * The bytes are stored starting at keccak256(0) (standard Solidity\n             * dynamic-array layout). We copy them from storage to memory and\n             * return the freshly built string.\n             */\n            let memPtr := mload(0x40)      // current free-memory pointer\n            mstore(memPtr, halfLen)        // store string length\n\n            // Destination and source pointers\n            let dest := add(memPtr, 0x20)\n            let src  := keccak256(0x00, 0x20)\n\n            // Copy 32-byte chunks from storage to memory\n            for { let copied := 0 } lt(copied, halfLen) { copied := add(copied, 0x20) } {\n                mstore(add(dest, copied), sload(add(src, div(copied, 0x20))))\n            }\n\n            // Update free-memory pointer\n            mstore(0x40, add(dest, and(add(halfLen, 0x1f), not(0x1f))))\n\n            tokenName := memPtr\n        }\n    }\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }"
}