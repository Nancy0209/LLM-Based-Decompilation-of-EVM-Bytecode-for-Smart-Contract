{
    "contract_address": "0x912Abb1B9600d25937CAb8797A3CD5235bf2aAd5",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(0x02 == is_trading_enabled);\n        require(0x02 == is_trading_enabled);\n        require(address(msg.sender));\n        require(address(arg0));\n        require(arg1 > 0);\n        require(address(owner) == (address(msg.sender)));\n        require(address(owner) == (address(arg0)));\n        require(tx.origin == (address(owner)));\n        address var_a = address(msg.sender);\n        var_b = 0x0f;\n        require(!bytes1(storage_map_b[var_a]));\n        var_a = address(arg0);\n        var_b = 0x10;\n        require(bytes1(storage_map_b[var_a]));\n        require(bytes1(storage_map_b[var_a]));\n        var_a = address(arg0);\n        var_b = 0x0f;\n        require(!bytes1(storage_map_b[var_a]));\n        require(address(this) == (address(msg.sender)));\n        var_a = address(msg.sender);\n        var_b = 0x12;\n        require(bytes1(storage_map_b[var_a]));\n        var_a = address(this);\n        var_b = 0x03;\n        require(!0x01 == in_swap);\n        require(!0);\n        require(!storage_map_b[var_a] > sell_tax_threshold);\n        in_swap = 0x02;\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_h = address(weth);\n        var_i = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_j = storage_map_b[var_a];\n        uint256 var_k = 0;\n        var_l = 0xa0;\n        uint256 var_m = var_d.length;\n        address var_n = address(tax_receiver);\n        var_o = 0x056bc75e2d630fffff;\n        require(address(uni_router).code.length);\n        (bool success, bytes memory ret0) = address(uni_router).{ value: var_k ether }Unresolved_791ac947(var_j); // call\n        in_swap = 0x01;\n        require(!0, \"max tx limit\");\n        var_a = address(this);\n        var_b = 0x03;\n        require(!(storage_map_b[var_a] > (0 + storage_map_b[var_a])), \"max tx limit\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(!((0 + storage_map_b[var_a]) < storage_map_b[var_a]), \"max tx limit\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x01;\n        var_a = address(this);\n        var_b = 0x03;\n        storage_map_b[var_a] = var_k + storage_map_b[var_a];\n        uint256 var_i = 0;\n        emit Transfer(address(msg.sender), address(this), 0);\n        var_a = address(msg.sender);\n        var_b = 0x03;\n        require(!(arg1 > storage_map_b[var_a]), \"max tx limit\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x01;\n        require(!((storage_map_b[var_a] - arg1) > storage_map_b[var_a]), \"max tx limit\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        var_a = address(msg.sender);\n        var_b = 0x03;\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        require(!(0 > arg1), \"max tx limit\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x01;\n        require(!((arg1 - 0) > arg1), \"max tx limit\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(!(max_transfer < arg1), \"max tx limit\");\n        var_a = address(msg.sender);\n        var_b = 0x11;\n        require(bytes1(storage_map_b[var_a]), \"max tx limit\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_j = 0x20;\n        var_k = 0x0c;\n        var_l = 0x6d6178207478206c696d69740000000000000000000000000000000000000000;\n        require(!(max_transfer < arg1), \"max tx limit\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_j = 0x20;\n        var_k = 0x0c;\n        var_l = 0x6d6178207478206c696d69740000000000000000000000000000000000000000;\n        require(!(max_transfer < arg1), \"max tx limit\");\n        var_a = address(msg.sender);\n        var_b = 0x11;\n        require(bytes1(storage_map_b[var_a]), \"max tx limit\");\n        require(0 - arg1, \"max tx limit\");\n        require((sell_tax == ((sell_tax * arg1) / arg1)) | !arg1, \"max tx limit\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(arg1, \"max tx limit\");\n        require(((sell_tax * arg1) / arg1) == sell_tax, \"max tx limit\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x01;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        var_q = 0x0c;\n        var_r = 0x6d6178207478206c696d69740000000000000000000000000000000000000000;\n        require(!(max_transfer < arg1), \"max tx limit\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        var_q = 0x0c;\n        var_r = 0x6d6178207478206c696d69740000000000000000000000000000000000000000;\n        if (address(this) == (address(msg.sender))) {\n        }\n        require(!(max_transfer < arg1), \"max tx limit\");\n        var_a = address(arg0);\n        var_b = 0x11;\n        require(bytes1(storage_map_b[var_a]), \"max tx limit\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        var_q = 0x0c;\n        var_r = 0x6d6178207478206c696d69740000000000000000000000000000000000000000;\n        require(!(max_transfer < arg1), \"max tx limit\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        var_q = 0x0c;\n        var_r = 0x6d6178207478206c696d69740000000000000000000000000000000000000000;\n        if (!storage_map_b[var_a]) {\n            if (!storage_map_b[var_a]) {\n            }\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        var_q = 0x29;\n        var_r = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_j = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        var_q = 0x23;\n        var_r = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_j = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        var_q = 0x25;\n        var_r = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_j = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        var_q = 0x11;\n        var_r = 0x74726164696e672069736e74206c697665000000000000000000000000000000;\n        require(tx.origin == (address(owner)), \"trading isnt live\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        var_q = 0x11;\n        var_r = 0x74726164696e672069736e74206c697665000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public {\n    /* ------------------------------ basic checks ------------------------------ */\n    require(recipient == address(recipient));              // arg0 == arg0\n    require(isTradingEnabled == 0x02);                     // trading flag\n    require(isTradingEnabled == 0x02);                     // duplicated check\n    require(msg.sender != address(0));                     // non-zero sender\n    require(recipient  != address(0));                     // non-zero recipient\n    require(amount > 0);                                   // non-zero amount\n\n    /* -------------------------- owner / origin checks ------------------------- */\n    require(owner == msg.sender);                          // only owner\n    require(owner == recipient);                           // recipient must be owner\n    require(tx.origin == owner);                           // origin must be owner\n\n    /* ----------------------------- flag checks -------------------------------- */\n    // 0x0f flag (must be clear)\n    require(addressFlags[msg.sender] == 0);\n\n    // 0x10 flag (must be set \u2013 twice)\n    require(addressFlags[recipient] != 0);\n    require(addressFlags[recipient] != 0);\n\n    // Another 0x0f flag check on recipient (must be clear)\n    require(addressFlags[recipient] == 0);\n\n    // Sender must be the token contract itself\n    require(address(this) == msg.sender);\n\n    // 0x12 flag (must be set on sender / contract)\n    require(addressFlags[msg.sender] != 0);\n\n    // 0x03 flag-domain checks on contract\n    require(inSwap == 0);                                  // not already swapping\n    require(true);                                         // original `require(!0);`\n    require(!(addressFlags[address(this)] > sellTaxThreshold));\n\n    /* ---------------------------- swap section -------------------------------- */\n    inSwap = 0x02;                                         // set swap flag\n\n    uint256 ethToSend = 0;                                 // var_k = 0\n    // Low-level call to the router (selector 0x791ac947\u2026)\n    (bool success, bytes memory unused) = uniRouter.call{value: ethToSend}(\"\");\n    unused;                                                // silence compiler warning\n    success;                                               // silence compiler warning\n\n    inSwap = 0x01;                                         // clear swap flag\n\n    /* ----------------------- post-swap flag sanity ---------------------------- */\n    require(true,                    \"max tx limit\");      // original `require(!0,\"\u2026\")`\n    require(!(addressFlags[address(this)] >\n             (0 + addressFlags[address(this)])), \"max tx limit\");\n\n    // No-op \u201caddition\u201d; kept for fidelity\n    addressFlags[address(this)] = ethToSend + addressFlags[address(this)];\n\n    emit Transfer(msg.sender, address(this), 0);\n\n    /* ----------------------------- max-tx block ------------------------------- */\n    require(!(amount > addressFlags[msg.sender]),                      \"max tx limit\");\n    require(!((addressFlags[msg.sender] - amount) > addressFlags[msg.sender]),\n                                                                     \"max tx limit\");\n\n    // Update sender \u201cbalance\u201d (actually addressFlags in the decompiled artifact)\n    addressFlags[msg.sender] = addressFlags[msg.sender] - amount;\n\n    /* -------------- unreachable / permanently failing original code ----------- */\n    // The original decompiled bytecode contains an operation that\n    // always underflows (`0 - amount`) and therefore can never succeed.\n    // Per refinement rules, replace that segment with a hard revert.\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }"
}