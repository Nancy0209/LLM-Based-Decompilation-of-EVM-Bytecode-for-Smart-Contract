{
    "contract_address": "0x7ccFBc00423e429844f344aA62D726E3C0DCbfCA",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_a >> 0x01;\n                if (store_a) {\n                    if (store_a - ((store_a >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a >> 0x01) {\n                            if (0x1f < (store_a >> 0x01)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory result) {\n    assembly {\n        // Load the raw contents of storage slot 0 where the string is stored\n        let raw := sload(0x00)\n\n        // If the slot is zero, the string is empty \u2013 return an empty string\n        if iszero(raw) {\n            result := mload(0x40)          // free-memory pointer\n            mstore(result, 0)              // zero length\n            mstore(0x40, add(result, 0x20))// advance free-memory pointer\n            leave\n        }\n\n        // Lowest bit tells us if the bytes are in-place (1) or in a separate location (0)\n        let isInline := and(raw, 1)\n        // All remaining bits (shifted right one) represent the length\n        let len := shr(1, raw)\n\n        // Original bytecode reverts with panic(0x22) if the data is marked as\n        // inline but its length is >= 32 bytes\n        if and(isInline, iszero(lt(len, 0x20))) {\n            mstore(0x00, 0x4e487b71)   // panic selector\n            mstore(0x04, 0x22)         // panic code 0x22 (index out of bounds)\n            revert(0x00, 0x24)\n        }\n\n        // ------------------------------------------------------------------\n        // Prepare return string in memory\n        // ------------------------------------------------------------------\n        result := mload(0x40)          // free-memory pointer\n        mstore(result, len)            // store length\n        let dataPtr := add(result, 0x20)\n\n        // ------------------------------------------------------------------\n        // Copy data from storage to memory\n        // ------------------------------------------------------------------\n        switch isInline\n        case 1 {\n            // Inline data: left-shift by 8 bits to drop the lowest byte (flag)\n            mstore(dataPtr, shl(8, raw))\n        }\n        default {\n            // External data: located at keccak256(slot)\n            mstore(0x00, 0x00)\n            let storagePtr := keccak256(0x00, 0x20)\n\n            // Copy 32-byte words\n            let words := div(add(len, 0x1f), 0x20)  // ceil(len / 32)\n            for { let i := 0 } lt(i, words) { i := add(i, 1) } {\n                mstore(add(dataPtr, mul(i, 0x20)), sload(add(storagePtr, i)))\n            }\n        }\n\n        // ------------------------------------------------------------------\n        // Update free-memory pointer\n        // ------------------------------------------------------------------\n        mstore(0x40, add(dataPtr, and(add(len, 0x1f), not(0x1f))))\n    }\n}",
    "ground_truth": "function name() public view returns (string memory) {\r\n        return _Tokename;\r\n    }"
}