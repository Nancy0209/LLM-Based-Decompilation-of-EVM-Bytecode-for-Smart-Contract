{
    "contract_address": "0x122B0769A36fBe22EE9FF866fdF7012C9697569e",
    "heimdall_input": "function updateSwapTokensAtAmount(uint256 arg0) public view {\n        require(arg0 == arg0);\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(totalSupply & (0x01 > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / totalSupply))), \"Swap amount cannot be lower than 0.001% total supply.\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x0186a0, \"Swap amount cannot be lower than 0.001% total supply.\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        require(!(arg0 < ((totalSupply * 0x01) / 0x0186a0)), \"Swap amount cannot be lower than 0.001% total supply.\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x35;\n        var_e = 0x5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e;\n        var_h = 0x20302e3030312520746f74616c20737570706c792e0000000000000000000000;\n    }",
    "llm_output": "function updateSwapTokensAtAmount(uint256 newAmount) external {\n    // Ownership check (matches decompiled logic)\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    uint256 supply = totalSupply();\n\n    // Replicates the always-passing overflow/underflow safety check from decompiled code\n    require(\n        !((supply & ((1 > (type(uint256).max / supply)) ? 1 : 0)) != 0),\n        \"Swap amount cannot be lower than 0.001% total supply.\"\n    );\n\n    // Trivial check that always succeeds in original bytecode\n    require(100000 != 0, \"Swap amount cannot be lower than 0.001% total supply.\");\n\n    // Main threshold check\n    require(\n        newAmount >= (supply * 1) / 100000,\n        \"Swap amount cannot be lower than 0.001% total supply.\"\n    );\n\n    // State update (implied by function name/bytecode intent)\n    swapTokensAtAmount = newAmount;\n}",
    "ground_truth": "function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){\r\n  \t    require(newAmount >= totalSupply() * 1 / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\r\n  \t    require(newAmount <= totalSupply() * 5 / 1000, \"Swap amount cannot be higher than 0.5% total supply.\");\r\n  \t    swapTokensAtAmount = newAmount;\r\n  \t    return true;\r\n  \t}"
}