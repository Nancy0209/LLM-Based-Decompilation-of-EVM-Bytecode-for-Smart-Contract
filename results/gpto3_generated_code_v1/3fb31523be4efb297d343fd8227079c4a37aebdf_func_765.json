{
    "contract_address": "0x3fB31523Be4Efb297D343fD8227079C4A37aEbdF",
    "heimdall_input": "function balanceOf(address arg0) public view {\n        require(arg0 == (address(arg0)));\n        address var_a = address(arg0);\n        var_b = 0x05;\n        require(!(storage_map_d[var_a] > store_g), \"Amount must be less than total reflections\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2a;\n        var_f = 0x416d6f756e74206d757374206265206c657373207468616e20746f74616c2072;\n        var_g = 0x65666c656374696f6e7300000000000000000000000000000000000000000000;\n        uint256 var_h = 0x40 + var_h;\n        var_c = 0x1a;\n        var_i = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x03bd913e6c1df40000, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        uint256 var_g = var_h.length;\n        uint256 var_k = 0;\n        var_l = var_m;\n        var_k = 0;\n        if (0x03bd913e6c1df40000) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_n = 0x12;\n            require(0x03bd913e6c1df40000);\n        }\n    }",
    "llm_output": "pragma solidity ^0.8.17;\n\ncontract DecompiledContract {\n    /* --------------------------------------------------------------- *\n     *                        Storage Variables                        *\n     * --------------------------------------------------------------- */\n    // Mapping that was referred to as `storage_map_d`\n    mapping(address => uint256) private _reflectedBalances;\n\n    // Variable that was referred to as `store_g`\n    uint256 private _totalReflections;\n\n    /* --------------------------------------------------------------- *\n     *                             Methods                             *\n     * --------------------------------------------------------------- */\n    /**\n     * Decompiled version of `balanceOf`.\n     * NOTE: The original decompiled output did not return a value, so\n     * this refined version also has no return statement.\n     */\n    function balanceOf(address account) public view {\n        /*------------------------------------------------------------*\n         *                    Decompiled Requirements                  *\n         *------------------------------------------------------------*/\n        // This is effectively a no-op but is kept for fidelity.\n        require(account == address(account));\n\n        // `var_b = 0x05;` \u2013 preserved as an unused constant.\n        uint256 _unusedConstant = 5;\n\n        // Original sanity-check on the mapping versus total.\n        require(\n            !(_reflectedBalances[account] > _totalReflections),\n            \"Amount must be less than total reflections\"\n        );\n\n        // The decompiler showed a SafeMath-style require that is\n        // always true due to the hard-coded non-zero constant.\n        require(uint256(0x03bd913e6c1df40000) != 0, \"\");\n\n        // Block guarded by an always-true constant.\n        if (uint256(0x03bd913e6c1df40000) != 0) {\n            // No-op assignments kept purely for semantic parity.\n            uint256 _irrelevantConstant = 0x4e487b71;\n            uint256 _anotherIrrelevantConstant = 0x12;\n\n            require(uint256(0x03bd913e6c1df40000) != 0);\n        }\n    }\n}",
    "ground_truth": "function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }"
}