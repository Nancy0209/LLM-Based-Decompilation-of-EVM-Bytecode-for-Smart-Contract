{
    "contract_address": "0x5Ccbc0cbaFAB8311086076C7B5f245D7fD080981",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_a >> 0x01;\n                if (store_a) {\n                    if (store_a - ((store_a >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a >> 0x01) {\n                            if (0x1f < (store_a >> 0x01)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory) {\n    /*\n        The following inline-assembly load is required to reproduce the\n        exact sequence of low-level checks that the decompiled bytecode\n        performed on the raw storage word that backs the `string` data.\n    */\n    uint256 rawNameWord;\n    assembly {\n        rawNameWord := sload(_tokenName.slot)\n    }\n\n    /*\n        START OF BYTECODE-LEVEL CHECKS\n        These seemingly redundant conditions are kept verbatim to\n        preserve 100 % logical fidelity with the original contract.\n    */\n    if (rawNameWord != 0) {\n        bool isShortString = ((rawNameWord >> 1) < 0x20);\n\n        // First overflow / format check\n        if (rawNameWord - (isShortString ? 1 : 0) != 0) {\n            revert(\"Decompiler artifact\");\n        }\n\n        // Identical second check (present in the decompiled code)\n        if (rawNameWord - (isShortString ? 1 : 0) != 0) {\n            revert(\"Decompiler artifact\");\n        }\n\n        // Unreachable in practice, but existed in the original logic\n        if ((rawNameWord >> 1) == 0) {\n            if ((rawNameWord >> 1) > 0x1f) {\n                revert(\"Decompiler artifact\");\n            }\n        }\n    }\n    /*\n        END OF BYTECODE-LEVEL CHECKS\n    */\n\n    // After the original safety checks succeed, return the stored value.\n    return _tokenName;\n}",
    "ground_truth": "function name() public view returns (string memory) {\r\n        return _Tokename;\r\n    }"
}