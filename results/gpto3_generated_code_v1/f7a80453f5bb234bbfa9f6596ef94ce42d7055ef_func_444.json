{
    "contract_address": "0xf7A80453F5BB234Bbfa9f6596Ef94cE42D7055EF",
    "heimdall_input": "function getTokenCostInfo(uint256 arg0) public view returns (uint256) {\n        require(arg0 < store_e);\n        var_a = 0x0b;\n        uint256 var_b = storage_map_l[(arg0 * 0x02) + keccak256(var_a)];\n        return storage_map_l[(arg0 * 0x02) + keccak256(var_a)];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n    }",
    "llm_output": "function getTokenCostInfo(uint256 tokenIndex) public view returns (uint256 cost) {\n    // Original check: require(arg0 < store_e);\n    require(tokenIndex < totalTokens);\n\n    // The mapping is stored at slot 11; calculate its starting keccak slot.\n    uint256 baseSlot = uint256(keccak256(abi.encode(uint256(11))));\n    uint256 dataSlot = baseSlot + (tokenIndex * 2);\n\n    assembly {\n        cost := sload(dataSlot)\n    }\n}",
    "ground_truth": "function getTokenCostInfo(uint256 _pid) public view returns (uint256){\\n        TokenInfo storage tokens = AllowedCrypto[_pid];\\n        IERC20 paytoken;\\n        paytoken = tokens.paytoken;\\n        uint256 cost;\\n        cost = tokens.costvalue;\\n        return cost;\\n    }"
}