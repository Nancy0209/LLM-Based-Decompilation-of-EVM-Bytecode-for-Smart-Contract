{
    "contract_address": "0x620d4B40A1c80D62129bb195e1701e501F9a5d3b",
    "heimdall_input": "function ownerOf(uint256 arg0) public view returns (address) {\n        require(0x01 > arg0, CustomError_df2d9b42());\n        require(!(arg0 < totalSupply), CustomError_df2d9b42());\n        uint256 var_a = arg0;\n        var_b = 0x04;\n        require(bytes1(storage_map_n[var_a]), CustomError_df2d9b42());\n        var_c = 0xdf2d9b4200000000000000000000000000000000000000000000000000000000;\n        require(storage_map_n[var_a], CustomError_df2d9b42());\n        uint256 var_c = address(storage_map_n[var_a]);\n        return address(storage_map_n[var_a]);\n        var_a = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + arg0;\n        var_b = 0x04;\n        require(storage_map_n[var_a], CustomError_df2d9b42());\n        var_c = address(storage_map_n[var_a]);\n        return address(storage_map_n[var_a]);\n        var_a = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + arg0);\n        var_b = 0x04;\n        require(storage_map_n[var_a], CustomError_df2d9b42());\n        var_c = address(storage_map_n[var_a]);\n        return address(storage_map_n[var_a]);\n        var_a = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + arg0));\n        var_b = 0x04;\n        require(storage_map_n[var_a], CustomError_df2d9b42());\n        var_c = address(storage_map_n[var_a]);\n        return address(storage_map_n[var_a]);\n        var_c = 0xdf2d9b4200000000000000000000000000000000000000000000000000000000;\n        var_c = 0xdf2d9b4200000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function ownerOf(uint256 tokenId) public view returns (address) {\n    // Initial bounds checks\n    if (!(1 > tokenId)) revert CustomError_df2d9b42();\n    if (tokenId < totalSupply) revert CustomError_df2d9b42();\n\n    // Primary index lookup\n    uint256 index = tokenId;\n    if (_owners[index] == address(0)) revert CustomError_df2d9b42();\n    return _owners[index];\n\n    // ---------------------------------------------------------------------\n    // The following blocks are intentionally unreachable but have been kept\n    // to mirror the exact control-flow structure of the decompiled bytecode.\n    // ---------------------------------------------------------------------\n\n    // First overflowed index:  MAX_UINT + tokenId\n    unchecked {\n        index = type(uint256).max + tokenId;\n    }\n    if (_owners[index] == address(0)) revert CustomError_df2d9b42();\n    return _owners[index];\n\n    // Second overflowed index: (MAX_UINT * 2) + tokenId\n    unchecked {\n        index = type(uint256).max;         // MAX_UINT\n        index = index + index;             // (MAX_UINT * 2)  \u2192 wraps to MAX_UINT - 1\n        index = index + tokenId;\n    }\n    if (_owners[index] == address(0)) revert CustomError_df2d9b42();\n    return _owners[index];\n\n    // Third overflowed index: (MAX_UINT * 4) + tokenId\n    unchecked {\n        index = type(uint256).max;         // MAX_UINT\n        index = index + index;             // *2\n        index = index + index;             // *4\n        index = index + tokenId;\n    }\n    if (_owners[index] == address(0)) revert CustomError_df2d9b42();\n    return _owners[index];\n}",
    "ground_truth": "function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }"
}