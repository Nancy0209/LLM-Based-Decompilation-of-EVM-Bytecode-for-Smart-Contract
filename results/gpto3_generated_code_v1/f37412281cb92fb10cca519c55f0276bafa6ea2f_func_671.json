{
    "contract_address": "0xF37412281Cb92fb10ccA519C55F0276BAFa6Ea2f",
    "heimdall_input": "function openTrading() public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(store_g / 0x010000000000000000000000000000000000000000)), \"trading is already open\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x17;\n        var_d = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n        store_f = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_f));\n        require(0x09, \"ERC20: approve to the zero address\");\n        require((0x01 == 0x01) | !0x3b9aca00, \"ERC20: approve to the zero address\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(0x7a250d5630b4cf539739df2c5dacb4c659f2488d, \"ERC20: approve to the zero address\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x22;\n        var_d = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_g = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        address var_e = address(this);\n        var_h = 0x02;\n        var_e = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n        address var_h = keccak256(var_e);\n        storage_map_n[var_e] = 0x3b9aca00;\n        var_a = 0x3b9aca00;\n        emit Approval(address(this), 0x7a250d5630b4cf539739df2c5dacb4c659f2488d, 0x3b9aca00);\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f / 0x01).factory(var_b); // staticcall\n        uint256 var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x20);\n        require(var_i.length == (address(var_i.length)));\n        var_j = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f / 0x01).WETH(var_c); // staticcall\n        var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x20);\n        require(var_i.length == (address(var_i.length)));\n        var_k = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_d = address(this);\n        uint256 var_g = address(var_i.length);\n        (bool success, bytes memory ret0) = address(var_i.length).Unresolved_c9c65396(var_d); // call\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x24;\n        var_d = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_g = 0x7265737300000000000000000000000000000000000000000000000000000000;\n        if (0x0a) {\n            if (0x0a == 0x01) {\n                if (0x0a == 0x02) {\n                    if (!0x09 > 0xff) {\n                        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_f = 0x11;\n                        if (!((0x0a < 0x0b) & (0x09 < 0x4e)) | ((0x0a < 0x0133) & (0x09 < 0x20))) {\n                            if (!0x09 > 0x01) {\n                                if (!0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                    var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                    var_f = 0x11;\n                                    if (!0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        var_f = 0x11;\n                                        if (!0x01) {\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function openTrading() public {\n    // ---------------------------------------------------------------------\n    // Access control\n    // ---------------------------------------------------------------------\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    // ---------------------------------------------------------------------\n    // Trading state check\n    // ---------------------------------------------------------------------\n    require(!_tradingOpen, \"trading is already open\");\n\n    // ---------------------------------------------------------------------\n    // Initialise (or overwrite) router address \u2013 bit-wise OR exactly matches\n    // the original decompiler artefact\n    // ---------------------------------------------------------------------\n    uniswapV2Router =\n        address(uint160(0x7a250d5630b4cf539739df2c5dacb4c659f2488d) |\n        uint160(uint160(uniswapV2Router)));\n\n    // ---------------------------------------------------------------------\n    // Series of meaningless but original `require` statements\n    // ---------------------------------------------------------------------\n    require(uint256(0x09) != 0,                      \"ERC20: approve to the zero address\");\n    require(((1 == 1) || !(0x3b9aca00 != 0)),        \"ERC20: approve to the zero address\");\n    require(address(this) != address(0),             \"ERC20: approve to the zero address\");\n    require(address(0x7a250d5630B4cF539739dF2C5daCb4c659F2488d) != address(0),\n                                                        \"ERC20: approve to the zero address\");\n\n    // ---------------------------------------------------------------------\n    // Give the router an allowance of 1e9 tokens\n    // ---------------------------------------------------------------------\n    _allowances[address(this)][uniswapV2Router] = 0x3b9aca00;          // 1 000 000 000\n    emit Approval(address(this), uniswapV2Router, 0x3b9aca00);\n\n    // ---------------------------------------------------------------------\n    // Low-level static calls to router for factory() and WETH()\n    // ---------------------------------------------------------------------\n    (bool factorySuccess, bytes memory factoryData) =\n        uniswapV2Router.staticcall(abi.encodeWithSignature(\"factory()\"));\n\n    uint256 tmp = 0;\n    tmp += uint248(factoryData.length + 0x1f);\n    require(!(((tmp + factoryData.length) - tmp) < 0x20), \"openTrading\");\n    require(factoryData.length == factoryData.length,            \"openTrading\");\n\n    (bool wethSuccess, bytes memory wethData) =\n        uniswapV2Router.staticcall(abi.encodeWithSignature(\"WETH()\"));\n\n    tmp  = 0;\n    tmp += uint248(wethData.length + 0x1f);\n    require(!(((tmp + wethData.length) - tmp) < 0x20), \"openTrading\");\n    require(wethData.length == wethData.length,                \"openTrading\");\n\n    // ---------------------------------------------------------------------\n    // Create the trading pair through the factory contract\n    // (selector 0xc9c65396)\n    // ---------------------------------------------------------------------\n    address factoryAddress;\n    if (factoryData.length >= 32) {\n        factoryAddress = abi.decode(factoryData, (address));\n    }\n    (bool pairSuccess, ) =\n        factoryAddress.call(abi.encodeWithSelector(0xc9c65396, address(this)));\n\n    // ---------------------------------------------------------------------\n    // Absolutely pointless nested conditions preserved verbatim\n    // ---------------------------------------------------------------------\n    if (10 != 0) {\n        if (10 == 1) {\n            if (10 == 2) {\n                if (!(9 > 0xff)) {\n                    bytes32 uselessSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    uint256 uselessCode     = 0x11;\n\n                    if (!((10 < 11) && (9 < 0x4e)) || ((10 < 0x0133) && (9 < 0x20))) {\n                        if (!(9 > 1)) {\n                            if (!(1 > 0x1999999999999999999999999999999999999999999999999999999999999999)) {\n                                uselessSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                uselessCode     = 0x11;\n\n                                if (!(10 > 0x1999999999999999999999999999999999999999999999999999999999999999)) {\n                                    uselessSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                    uselessCode     = 0x11;\n\n                                    if (!(1 != 0)) {\n                                        // Intentionally left blank\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Mark trading as open\n    // ---------------------------------------------------------------------\n    _tradingOpen = true;\n}",
    "ground_truth": "function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }"
}