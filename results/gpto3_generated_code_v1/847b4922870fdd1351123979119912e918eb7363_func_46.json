{
    "contract_address": "0x847B4922870Fdd1351123979119912e918eb7363",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_c) {\n            if (store_c - ((store_c >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_c >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_c >> 0x01;\n                if (store_c) {\n                    if (store_c - ((store_c >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_c >> 0x01) {\n                            if (0x1f < (store_c >> 0x01)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_c >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory tokenSymbol) {\n    assembly {\n        // Location (slot) where the packed string is stored.\n        // The exact slot index is the same one the original compiler used;\n        // here we assume it is slot 0, which preserves the original logic.\n        let slot := 0x0\n\n        // Read the packed string header.\n        // Least\u2013significant bit:\n        //   0 \u2014 short (\u226431 bytes) and stored in the slot itself\n        //   1 \u2014 long  (>31 bytes) and stored at keccak256(slot)\n        let header := sload(slot)\n\n        switch and(header, 1)\n        // ---------------------------------------------------\n        // SHORT STRING  (length \u2264 31 bytes)\n        // ---------------------------------------------------\n        case 0 {\n            // Extract length (bits 1..255)\n            let len := shr(1, header)\n\n            // Allocate 64 bytes (length + 32-byte length prefix).\n            tokenSymbol := mload(0x40)\n            mstore(0x40, add(tokenSymbol, 0x40))\n\n            // Store the length and the data (left-aligned) into memory.\n            mstore(tokenSymbol, len)\n            mstore(add(tokenSymbol, 0x20), shl(8, header))\n        }\n        // ---------------------------------------------------\n        // LONG STRING  (length > 31 bytes)\n        // ---------------------------------------------------\n        default {\n            // Extract length.\n            let len := shr(1, header)\n\n            // Compute the storage slot where the first 32-byte word of data sits.\n            let dataSlot := keccak256(slot, 0x20)\n\n            // Allocate enough memory for the string (padded to 32-byte boundary)\n            tokenSymbol := mload(0x40)\n            // Pointer to where the data starts in memory\n            let memPtr := add(tokenSymbol, 0x20)\n            // Pointer to the end of the data in memory\n            let endPtr := add(memPtr, len)\n\n            // Store length\n            mstore(tokenSymbol, len)\n\n            // Copy the string word-by-word from storage to memory\n            for { let storagePtr := dataSlot } lt(memPtr, endPtr) {\n                storagePtr := add(storagePtr, 1)\n                memPtr := add(memPtr, 0x20)\n            } {\n                mstore(memPtr, sload(storagePtr))\n            }\n\n            // Update free-memory pointer (aligned to 32-byte boundary)\n            mstore(0x40, and(add(add(endPtr, 0x1f), 0x20), not(0x1f)))\n        }\n    }\n}",
    "ground_truth": "function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }"
}