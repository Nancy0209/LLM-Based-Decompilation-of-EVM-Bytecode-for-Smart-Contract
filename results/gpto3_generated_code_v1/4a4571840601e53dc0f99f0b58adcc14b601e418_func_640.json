{
    "contract_address": "0x4a4571840601e53dC0f99F0b58AdCC14B601e418",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (!(store_a) == ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (!(store_a) == ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x03;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    if (!0 > var_c.length) {\n                                        uint256 var_g = 0;\n                                        return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                        return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory) {\n        // This variable corresponds to `store_a` in the de-compiled byte-code.\n        uint256 packedData = uint256(_packedName);\n\n        if (packedData != 0) {\n            /*\n             *  Keeps the original, slightly odd comparison:\n             *  `if (!(store_a) == ((store_a / 0x02) < 0x20)) { \u2026 }`\n             */\n            if (((packedData == 0 ? 1 : 0) == ((packedData / 2) < 0x20 ? 1 : 0))) {\n                uint256 _panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                uint256 _panicCode     = 0x22;\n\n                uint256 dynPtr   = 0x20 + (((0x1f + (packedData / 2)) / 0x20) * 0x20);\n                uint256 halfWord = packedData / 2;\n\n                if (packedData != 0) {\n                    if (((packedData == 0 ? 1 : 0) == ((packedData / 2) < 0x20 ? 1 : 0))) {\n                        _panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        _panicCode     = 0x22;\n\n                        if (halfWord == 0) {\n                            if (0x1f < halfWord) {\n                                uint256 lookupKey   = 0x03;\n                                bytes32 lookupValue = _auxStorage[lookupKey]; // `storage_map_b` in the de-compiled code\n\n                                if ((0x20 + dynPtr) + halfWord > (0x20 + (0x20 + dynPtr))) {\n                                    uint256 sliceSize = (dynPtr + 0x20) - dynPtr;\n                                    uint256 sliceLen  = halfWord;\n\n                                    if (!(0 > sliceLen)) {\n                                        uint256 _unused = 0; // mirrors an unused local from the original byte-code\n                                        return abi.encodePacked(sliceSize, sliceLen);\n                                        return abi.encodePacked(sliceSize, sliceLen); // duplicated on purpose\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Falls back to a hard revert identical in spirit to the original logic.\n        revert(\"Decompiler artifact\");\n    }",
    "ground_truth": "function name() public view returns (string memory) {\r\n        return _name;\r\n    }"
}