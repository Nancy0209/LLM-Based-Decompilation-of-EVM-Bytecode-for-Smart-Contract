{
    "contract_address": "0x014dC23230Ac33983E2163FAd9bEA81635b3Dd34",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(address(arg0), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_a = 0x60 + var_a;\n        var_b = 0x26;\n        var_c = this.code[3289:3327];\n        address var_d = address(msg.sender);\n        var_e = 0x01;\n        require(!(arg1 > storage_map_c[var_d]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_f = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        uint256 var_h = var_a.length;\n        require(!(0 > var_a.length), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_i = 0;\n        var_d = address(msg.sender);\n        var_e = 0x01;\n        storage_map_c[var_d] = storage_map_c[var_d] - arg1;\n        require(!(_txFee > ~(_burnFee)), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        require(!((_txFee + _burnFee) > 0), \"ERC20: transfer to the zero address\");\n        require(!(!(address(_FeeAddress)) == (address(msg.sender))), \"ERC20: transfer to the zero address\");\n        require(!(_txFee > ~(_burnFee)), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        require(!(arg1 & ((_txFee + _burnFee) > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        require(0x64, \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x12;\n        require(!(arg1 & (_txFee > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        require(0x64, \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x12;\n        var_d = address(_FeeAddress);\n        var_e = 0x01;\n        require(!(storage_map_c[var_d] > (~((arg1 * _txFee) / 0x64))), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        var_d = address(_FeeAddress);\n        var_e = 0x01;\n        storage_map_c[var_d] = storage_map_c[var_d] + ((arg1 * _txFee) / 0x64);\n        require(!(arg1 & (_txFee > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        require(0x64, \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x12;\n        uint256 var_f = (arg1 * _txFee) / 0x64;\n        emit Transfer(address(msg.sender), address(_FeeAddress), (arg1 * _txFee) / 0x64);\n        require(!_burnFee, \"ERC20: transfer to the zero address\");\n        require(!(arg1 < ((arg1 * (_txFee + _burnFee)) / 0x64)), \"ERC20: transfer to the zero address\");\n        var_d = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_j = 0x11;\n        var_b = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x20;\n        var_l = 0x23;\n        var_m = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x20;\n        var_l = 0x25;\n        var_m = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public payable returns (bool) {\n    /* Decompiler-preserved checks */\n    require(recipient == recipient, \"\");                       // always true\n    require(msg.sender != address(0), \"\");                     // sender not zero\n    require(recipient != address(0), \"\");                      // recipient not zero\n    require(!(amount > _balances[msg.sender]), \"\");            // sufficient balance\n\n    /* Fee/burn related decompiler artifacts (kept verbatim for fidelity) */\n    require(!(_txFee > ~_burnFee), \"ERC20: transfer to the zero address\");\n    require(!((_txFee + _burnFee) > 0), \"ERC20: transfer to the zero address\");\n    require(!(address(_feeAddress) == msg.sender), \"ERC20: transfer to the zero address\");\n    require(!(_txFee > ~_burnFee), \"ERC20: transfer to the zero address\");\n    require(!(amount & ((_txFee + _burnFee) > (type(uint256).max / amount))), \"ERC20: transfer to the zero address\");\n    require(true, \"ERC20: transfer to the zero address\");      // original literal 0x64 (100)\n    require(!(amount & (_txFee > (type(uint256).max / amount))), \"ERC20: transfer to the zero address\");\n    require(true, \"ERC20: transfer to the zero address\");      // original literal 0x64 (100)\n\n    /* Balance bookkeeping */\n    _balances[msg.sender] -= amount;\n\n    /* Fee distribution */\n    uint256 feeAmount = (amount * _txFee) / 100;\n    require(!(_balances[_feeAddress] > ~feeAmount), \"ERC20: transfer to the zero address\");\n    _balances[_feeAddress] += feeAmount;\n\n    emit Transfer(msg.sender, _feeAddress, feeAmount);\n\n    /* Additional decompiler-preserved checks */\n    require(_burnFee == 0, \"ERC20: transfer to the zero address\");\n    require(!(amount < ((amount * (_txFee + _burnFee)) / 100)), \"ERC20: transfer to the zero address\");\n\n    return true;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}