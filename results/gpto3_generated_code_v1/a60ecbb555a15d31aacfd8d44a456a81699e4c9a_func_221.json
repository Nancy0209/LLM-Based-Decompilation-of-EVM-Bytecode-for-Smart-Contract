{
    "contract_address": "0xa60ecbb555a15D31AaCfd8d44a456A81699e4C9a",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_c) {\n            if (!(store_c) == ((store_c / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_c / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_c / 0x02;\n                if (store_c) {\n                    if (!(store_c) == ((store_c / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_c / 0x02) {\n                            if (0x1f < (store_c / 0x02)) {\n                                var_a = 0x05;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_c / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    if (!0 > var_c.length) {\n                                        uint256 var_g = 0;\n                                        return abi.encodePacked(0x20, var_c.length);\n                                        return abi.encodePacked(0x20, var_c.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    uint256 symbolRaw = _symbolData;               // renamed from `store_c`\n    if (symbolRaw != 0) {\n        /* -------------------------------------------------------------\n           First revert-condition block (kept exactly as in decompiled)\n        --------------------------------------------------------------*/\n        if ((!symbolRaw) == ((symbolRaw / 2) < 0x20)) {\n            revert(\"Decompiler artifact\");\n        }\n\n        /* -------------------------------------------------------------\n           All variables below keep the arithmetic the decompiler showed\n        --------------------------------------------------------------*/\n        uint256 dynamicPtr = 0x20 + (((0x1f + (symbolRaw / 2)) / 0x20) * 0x20);\n        uint256 halfRaw    = symbolRaw / 2;\n\n        if (symbolRaw != 0) {\n            if ((!symbolRaw) == ((symbolRaw / 2) < 0x20)) {\n                revert(\"Decompiler artifact\");\n            }\n\n            /*  `!symbolRaw / 2`  \u2192 original pattern was `if (!store_c / 0x02)` */\n            if ((symbolRaw / 2) == 0) {\n                // fall-through (no action \u2013 mirrors the decompiled noop branch)\n            } else {\n                if (0x1f < (symbolRaw / 2)) {\n                    uint256 tmpStorageValue = _storageMapB[0x05];   // renamed from `storage_map_b[5]`\n\n                    if ((0x20 + dynamicPtr) + (symbolRaw / 2) > (0x20 + (0x20 + dynamicPtr))) {\n                        tmpStorageValue = 0x20;                    // assignment preserved\n\n                        uint256 lenPlaceholder = dynamicPtr;       // mirrors `var_c.length`\n                        /* original: `if (!0 > var_c.length)` */\n                        if (!(0 > lenPlaceholder)) {\n                            bytes memory encoded = abi.encodePacked(uint256(0x20), lenPlaceholder);\n                            /*  Decompiler duplicated this return; keep single, identical return  */\n                            return string(encoded);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /* Default return path (not present in decompiled byte-noise but required for Solidity) */\n    return \"\";\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }"
}