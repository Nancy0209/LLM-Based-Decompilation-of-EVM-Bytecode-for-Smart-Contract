{
    "contract_address": "0x433261F4DCdF51419232FFe4eD44BA793AA2B9f7",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_e = 0x01000000000000000000000000000000000000000000 | (uint248(store_e));\n        require(!storage_map_b[var_a]);\n        require(!bytes1(store_e / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_d).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_d), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_d);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_d), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_d).code.length);\n        (bool success, bytes memory ret0) = address(store_d).Unresolved_791ac947(var_l); // call\n        store_e = uint248(store_e);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // Original sender check (logic preserved)\n    require(\n        msg.sender == address(uint160(uint256(transferDelayEnabled) / 0x0100))\n    );\n\n    address thisAddress   = address(this);\n    uint8   flagOne       = 0x01;\n\n    require(!storage_map_b[thisAddress]);\n\n    // Bit-wise operation on the stored 248-bit value (logic preserved)\n    store_e = uint248(store_e) | 0x01000000000000000000000000000000000000000000;\n\n    require(!storage_map_b[thisAddress]);\n    require(\n        bytes1(uint248(store_e) / 0x010000000000000000000000000000000000000000) \n            == bytes1(0)\n    );\n\n    uint8   flagTwo = 0x02;\n\n    // Offset arithmetic (decompiler artefact kept intact)\n    uint256 offset = 0;\n    offset += 0x60;\n\n    // Slice of calldata (unused but kept for fidelity)\n    bytes32 calldataSlice;\n    assembly {\n        calldataSlice := calldataload(4)\n    }\n\n    // Panic selector & code (not used further, kept for fidelity)\n    bytes32 panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 panicCode     = 0x32;\n\n    // ---------------------------------------------------------------------\n    //  External STATICCALL to `store_d` with selector 0xad5c4648 (decompiled)\n    // ---------------------------------------------------------------------\n    bytes4 wethSelector = 0xad5c4648;               // unknown selector\n    (bool wethSuccess, bytes memory wethData) = address(store_d)\n        .staticcall(abi.encodeWithSelector(wethSelector));\n\n    offset += ((wethData.length + 0x1f) & ~uint256(0x1f));\n\n    require(\n        !(((offset + wethData.length) - offset) < 0x20),\n        \"ERC20: approve to the zero address\"\n    );\n    require(\n        wethData.length == uint256(uint160(wethData.length)),\n        \"ERC20: approve to the zero address\"\n    );\n\n    panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    panicCode     = 0x32;\n\n    uint256 dummyCast = uint256(uint160(wethData.length));\n\n    require(address(this)   != address(0), \"ERC20: approve to the zero address\");\n    require(address(store_d) != address(0), \"ERC20: approve to the zero address\");\n\n    // ---------------------------------------------------------------------\n    //  Error\u2013string constants (kept for logical fidelity)\n    // ---------------------------------------------------------------------\n    bytes4  errSelector       = 0x08c379a0;\n    uint256 errOffset         = 0x20;\n    uint256 errStringLength   = 0x22;\n    bytes32 errStringPartOne  = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    bytes32 errStringPartTwo  = 0x7373000000000000000000000000000000000000000000000000000000000000;\n\n    // ---------------------------------------------------------------------\n    //  Mapping self-assignment and Approval event emission\n    // ---------------------------------------------------------------------\n    thisAddress               = address(store_d);\n    bytes32 unusedKey         = keccak256(abi.encodePacked(thisAddress));\n\n    storage_map_b[thisAddress] = storage_map_b[thisAddress];  // no-op (fidelity)\n    uint256 allowanceAmount    = storage_map_b[thisAddress];\n\n    emit Approval(address(this), address(store_d), allowanceAmount);\n\n    // ---------------------------------------------------------------------\n    //  CALL with selector 0x791ac947 (decompiled)\n    // ---------------------------------------------------------------------\n    bytes4 swapSelector = 0x791ac947;\n    require(address(store_d).code.length > 0);\n    (bool swapSuccess, bytes memory swapData) = address(store_d)\n        .call(abi.encodeWithSelector(swapSelector, allowanceAmount));\n\n    // Restore original type width (no-op in effect)\n    store_e = uint248(store_e);\n\n    // ---------------------------------------------------------------------\n    //  Final ether-balance checks & transfer\n    // ---------------------------------------------------------------------\n    require(address(this).balance == 0);\n\n    (bool transferSuccess, ) = address(\n        uint160(uint256(transferDelayEnabled) / 0x0100)\n    ).call{value: address(this).balance}(\"\");\n\n    // Additional error-string constants (kept for fidelity)\n    errSelector       = 0x08c379a0;\n    errOffset         = 0x20;\n    errStringLength   = 0x24;\n    errStringPartOne  = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    errStringPartTwo  = 0x7265737300000000000000000000000000000000000000000000000000000000;\n\n    // Silence compiler warnings for unused variables\n    wethSuccess; panicSelector; panicCode; unusedKey;\n    flagOne; flagTwo; dummyCast; errSelector; errOffset; errStringLength;\n    errStringPartOne; errStringPartTwo; transferSuccess; swapSuccess; swapData;\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}