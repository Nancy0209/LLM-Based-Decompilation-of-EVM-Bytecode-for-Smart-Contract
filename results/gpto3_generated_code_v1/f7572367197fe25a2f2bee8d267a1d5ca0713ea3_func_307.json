{
    "contract_address": "0xf7572367197fE25A2F2bEe8d267a1d5cA0713ea3",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public payable returns (bool) {\n        require(address(msg.sender));\n        require(address(arg0));\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(msg.sender);\n        require(address(0x5491305204daca75317a0bc8c332dd61dbb77bc8).code.length);\n        (bool success, bytes memory ret0) = address(0x5491305204daca75317a0bc8c332dd61dbb77bc8).Unresolved_70a08231(var_b); // staticcall\n        require(!(ret0.length < 0x20), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        address var_c = msg.sender;\n        var_d = 0x06;\n        require(!storage_map_b[var_c], \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!(var_e.length > 0), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_e = 0x60 + var_e;\n        var_a = 0x26;\n        var_f = this.code[3161:3199];\n        var_c = address(msg.sender);\n        var_d = 0x04;\n        require(!(arg1 > storage_map_b[var_c]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_g = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_h = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        uint256 var_i = var_e.length;\n        require(!(bytes1(var_e.length)), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_j = (~((0x0100 ** (0x20 - (bytes1(var_e.length)))) - 0x01)) & (var_k);\n        var_c = address(msg.sender);\n        var_d = 0x04;\n        storage_map_b[var_c] = storage_map_b[var_c] - arg1;\n        var_c = address(arg0);\n        var_d = 0x04;\n        require(!((arg1 + storage_map_b[var_c]) < storage_map_b[var_c]), \"SafeMath: addition overflow\");\n        var_g = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_h = 0x20;\n        var_i = 0x1b;\n        var_l = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_c = address(arg0);\n        var_d = 0x04;\n        storage_map_b[var_c] = arg1 + storage_map_b[var_c];\n        uint256 var_g = arg1;\n        emit Transfer(address(msg.sender), address(arg0), arg1);\n        var_g = 0x01;\n        return 0x01;\n        var_e = 0x60 + var_e;\n        var_a = 0x26;\n        var_f = this.code[3161:3199];\n        require(!(arg1 > storage_map_b[var_c]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_g = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_h = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        var_i = var_e.length;\n        require(!(bytes1(var_e.length)), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = (~((0x0100 ** (0x20 - (bytes1(var_e.length)))) - 0x01)) & (var_k);\n        if (!storage_map_b[var_c]) {\n        }\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        var_m = 0x23;\n        var_n = this.code[3092:3127];\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        var_m = 0x25;\n        var_n = this.code[3239:3276];\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public returns (bool) {\n    /* 1. original: require(address(msg.sender));              */\n    require(msg.sender != address(0), \"\");                     \n\n    /* 2. original: require(address(arg0));                    */\n    require(recipient != address(0), \"\");                      \n\n    /* 3. original: require(address(0x5491...bc8).code.length) */\n    address externalToken = 0x5491305204dACA75317A0bC8c332Dd61dBb77Bc8;\n    require(externalToken.code.length > 0, \"\");                \n\n    /* 4. original: staticcall selector 0x70a08231             */\n    (bool ok, bytes memory ret) =\n        externalToken.staticcall(abi.encodeWithSelector(0x70a08231, msg.sender));\n    require(ok, \"\");                                          \n    /* 5. original: require(!(ret0.length < 0x20))             */\n    require(ret.length >= 32, \"\");                             \n\n    /* 6. original: require(!storage_map_b[msg.sender])        */\n    require(!_isFlagged[msg.sender], \"\");                      \n\n    /* 7 & 8. placeholder length checks kept verbatim          */\n    bytes memory placeholder = new bytes(0);\n    require(!(placeholder.length > 0), \"\");                    \n    require(bytes1(placeholder.length) == 0x00, \"\");           \n\n    /* 9. original: require(!(amount > balances[msg.sender]))  */\n    require(amount <= _balances[msg.sender], \"\");              \n\n    /* 10. original overflow guard                             */\n    require(_balances[recipient] + amount >= _balances[recipient],\n            \"SafeMath: addition overflow\");\n\n    /* 11. state updates                                        */\n    _balances[msg.sender] -= amount;\n    _balances[recipient] += amount;\n\n    /* 12. original Transfer event                              */\n    emit Transfer(msg.sender, recipient, amount);\n\n    return true;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n      _transfer(msg.sender, recipient, amount);\\r\\n      return true;\\r\\n    }"
}