{
    "contract_address": "0xf7A80453F5BB234Bbfa9f6596Ef94cE42D7055EF",
    "heimdall_input": "function getWinner() public view returns (bytes memory) {\n        uint256 var_a = var_a + (0x20 + (0x20 * store_i));\n        var_b = store_i;\n        if (!store_i) {\n            var_c = 0x04;\n            address var_d = address(storage_map_z[var_c]);\n            if ((0x20 + var_a) + (0x20 * store_i) > (0x20 + (0x20 + var_a))) {\n                address var_e = address(storage_map_aa[var_c]);\n                if ((0x20 + var_a) + (0x20 * store_i) > (0x20 + (0x20 + (0x20 + var_a)))) {\n                    var_d = 0x20;\n                    var_e = var_a.length;\n                    return abi.encodePacked(0x20, var_a.length);\n                }\n            }\n        }\n    }",
    "llm_output": "function getWinner() public view returns (bytes memory) {\n    // `entryCount` \u2013 assumed storage variable maintaining some counter\n    uint256 count = entryCount;\n\n    // Prepare a bytes blob so we can later access `.length`\n    bytes memory encodedOffset = abi.encodePacked(uint256(0x20 + (0x20 * count)));\n\n    if (count == 0) {\n        uint256 key = 0x04;\n\n        // Storage mappings that exist elsewhere in the contract\n        address primary = addressMapA[key];\n\n        // First conditional branch\n        if ((0x20 + (0x20 + (0x20 * count))) + (0x20 * count) >\n            (0x20 + (0x20 + (0x20 + (0x20 * count))))\n        ) {\n            address secondary = addressMapB[key];\n\n            // Nested conditional branch\n            if ((0x20 + (0x20 + (0x20 * count))) + (0x20 * count) >\n                (0x20 + (0x20 + (0x20 + (0x20 + (0x20 * count)))))\n            ) {\n                primary   = address(uint160(0x20));\n                secondary = address(uint160(encodedOffset.length));\n\n                return abi.encodePacked(uint256(0x20), encodedOffset.length);\n            }\n        }\n    }\n\n    // Fall-back return to satisfy the compiler \u2014 mirrors the original end-of-function behavior\n    return bytes(\"\");\n}",
    "ground_truth": "function getWinner() public view returns (address[] memory) {\\n        return winnerOfPrize;\\n     }"
}