{
    "contract_address": "0x4EEB531934eb03F55032CF7468957e9cc3b9Ce7d",
    "heimdall_input": "function removeERCToken(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(0 - arg1);\n        address var_a = address(arg0);\n        uint256 var_b = arg1;\n        emit ClearToken(address(arg0), arg1);\n        var_a = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        address var_c = address(store_r);\n        uint256 var_d = arg1;\n        (bool success, bytes memory ret0) = address(arg0).many_msg_babbage(var_c); // call\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == var_e.length);\n        var_b = var_e.length;\n        return var_e.length;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var_c = address(this);\n        (bool success, bytes memory ret0) = address(arg0).balanceOf(var_c); // staticcall\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        var_b = address(arg0);\n        uint256 var_f = var_e.length;\n        emit ClearToken(address(arg0), var_e.length);\n        var_b = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        var_d = address(store_r);\n        uint256 var_g = var_e.length;\n        (bool success, bytes memory ret0) = address(arg0).many_msg_babbage(var_d); // call\n    }",
    "llm_output": "function removeERCToken(address token, uint256 amount) public returns (bool) {\n    // Redundant check kept to preserve original logic\n    require(token == address(token), \"Address mismatch\");\n\n    // `require(0 - amount)` from the decompiled code is equivalent to ensuring `amount` is non-zero\n    require(amount != 0, \"Amount cannot be zero\");\n\n    // Emit original event\n    emit ClearToken(token, amount);\n\n    // Prepare calldata for ERC-20 `transfer(address,uint256)`\n    bytes memory payload = abi.encodeWithSelector(\n        0xa9059cbb,        // transfer(address,uint256)\n        storedRecipient,   // address that receives the swept tokens (matches `store_r` in decompiled code)\n        amount\n    );\n\n    // Perform the low-level call\n    (bool callSuccess, bytes memory returnData) = token.call(payload);\n    callSuccess; // Explicitly ignored to retain original behaviour\n\n    // The original code required at least 32 bytes of return data\n    require(returnData.length >= 32, \"Short return data\");\n\n    // No-op equality check preserved from decompiler artefact\n    assert(returnData.length == returnData.length);\n\n    // Forward the decoded boolean result\n    return abi.decode(returnData, (bool));\n}",
    "ground_truth": "function removeERCToken(address tokenAddress, uint256 tokens) external returns (bool success) {\r\n            if(tokens == 0){\r\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\r\n        }\r\n        emit ClearToken(tokenAddress, tokens);\r\n        return ERC20(tokenAddress).transfer(autoLiquidityReceiver, tokens);\r\n    }"
}