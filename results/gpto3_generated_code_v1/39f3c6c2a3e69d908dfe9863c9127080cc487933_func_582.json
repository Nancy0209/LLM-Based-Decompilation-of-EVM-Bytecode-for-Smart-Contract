{
    "contract_address": "0x39f3C6C2a3E69D908DFE9863C9127080CC487933",
    "heimdall_input": "function stealthLaunch() public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(router / 0x01).factory(var_b); // staticcall\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == (address(var_e.length)));\n        var_f = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(router / 0x01).WETH(var_c); // staticcall\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == (address(var_e.length)));\n        var_g = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_d = address(this);\n        uint256 var_h = address(var_e.length);\n        (bool success, bytes memory ret0) = address(var_e.length).Unresolved_c9c65396(var_d); // call\n    }",
    "llm_output": "function stealthLaunch() public {\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    /* --------------------------------- factory() --------------------------------- */\n    bytes4 factorySelector = 0xc45a0155; // keccak256(\"factory()\")\n    (bool factorySuccess, bytes memory factoryReturn) =\n        address(router).staticcall(abi.encodeWithSelector(factorySelector));\n\n    // original bytecode checked the size of the return data, not the success flag\n    require(factoryReturn.length >= 32, \"Invalid factory() return data\");\n    address factory = abi.decode(factoryReturn, (address));\n\n    /* ---------------------------------- WETH() ----------------------------------- */\n    bytes4 wethSelector = 0xad5c4648; // keccak256(\"WETH()\")\n    (bool wethSuccess, bytes memory wethReturn) =\n        address(router).staticcall(abi.encodeWithSelector(wethSelector));\n\n    // same length check as decompiled logic\n    require(wethReturn.length >= 32, \"Invalid WETH() return data\");\n    address weth = abi.decode(wethReturn, (address));\n\n    /* --------------------------- pairFor(address,address) ------------------------- */\n    bytes4 pairForSelector = 0xc9c65396; // keccak256(\"pairFor(address,address)\")\n    bytes memory pairForCalldata =\n        abi.encodeWithSelector(pairForSelector, address(this), weth);\n\n    (bool pairForSuccess, ) = factory.call(pairForCalldata);\n\n    // variables kept to preserve exact semantics (no further checks in original)\n    factorySuccess;\n    wethSuccess;\n    pairForSuccess;\n}",
    "ground_truth": "function stealthLaunch() external onlyOwner {\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n        approve(address(router), type(uint256).max);\r\n        router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0, \r\n            0, \r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        require(!tradingEnabled, \"Trading is already enabled\");\r\n        tradingEnabled = true;\r\n        genesis_block = block.number;\r\n    }"
}