{
    "contract_address": "0xd3a031b4752eE83c310988Ad7277A7C2cD0bC631",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_k)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_d[var_a]);\n        store_c = 0x01000000000000000000000000000000000000000000 | (uint248(store_c));\n        require(!storage_map_d[var_a]);\n        require(!bytes1(store_c / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_g).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_g), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_g);\n        address var_b = keccak256(var_a);\n        storage_map_d[var_a] = storage_map_d[var_a];\n        address var_k = storage_map_d[var_a];\n        emit Approval(address(this), address(store_g), storage_map_d[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_d[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_g).code.length);\n        (bool success, bytes memory ret0) = address(store_g).Unresolved_791ac947(var_l); // call\n        store_c = uint248(store_c);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_k).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // The original byte-code allows only one specific address to execute this\n    require(msg.sender == authorizedAddress, \"manualSwap: caller is not authorised\");\n\n    address self = address(this);\n\n    // These two identical checks exist in the original byte-code \u2013 keep them both\n    require(!swapStatus[self], \"manualSwap: swap already in progress\");\n\n    // `swapFlag` is a 248-bit storage word.  \n    // The original code ORs it with the following constant.\n    swapFlag = uint248(0x010000000000000000000000000000000000000000) | swapFlag;\n\n    // Same check again (yes, it is redundant \u2013 but that is how the byte-code looks)\n    require(!swapStatus[self], \"manualSwap: swap already in progress\");\n\n    // Odd flag-check that exists in the on-chain byte-code\n    require(\n        bytes1(uint248(swapFlag) / 0x010000000000000000000000000000000000000000) == 0x00,\n        \"manualSwap: flag already set\"\n    );\n\n    // -------------------------------------------------------------------------\n    // Static-call WETH() on the router\n    // -------------------------------------------------------------------------\n    uint256 dynamicOffset = 0x60;\n    (bool wethSuccess, bytes memory wethRet) =\n        address(uniswapRouter).staticcall(abi.encodeWithSignature(\"WETH()\"));\n    require(wethSuccess, \"manualSwap: WETH() staticcall failed\");\n\n    // Offset arithmetics copied one-to-one from the decompiled byte-code\n    dynamicOffset += wethRet.length + 0x1f;\n\n    //  require(!(((dynamicOffset + wethRet.length) - dynamicOffset) < 0x20), \u2026)\n    //  boils down to the following:\n    require(!(wethRet.length < 0x20), \"ERC20: approve to the zero address\");\n\n    // The original decompiler produced an impossible equality check;\n    // representing it with an unconditional truth keeps the logic intact.\n    require(true, \"ERC20: approve to the zero address\");\n\n    // -------------------------------------------------------------------------\n    // Approve the router to spend this contract\u2019s token balance\n    // -------------------------------------------------------------------------\n    uint256 tokenBalance = IERC20(self).balanceOf(self);\n    require(self != address(0), \"ERC20: approve to the zero address\");\n    require(address(uniswapRouter) != address(0), \"ERC20: approve to the zero address\");\n\n    IERC20(self).approve(address(uniswapRouter), tokenBalance);\n    emit Approval(self, address(uniswapRouter), tokenBalance);\n\n    // -------------------------------------------------------------------------\n    // Execute swapExactTokensForETHSupportingFeeOnTransferTokens\n    // -------------------------------------------------------------------------\n    address[] memory path = new address[](2);\n    path[0] = self;\n    path[1] = abi.decode(wethRet, (address));\n\n    require(address(uniswapRouter).code.length > 0, \"manualSwap: router empty code\");\n\n    uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n        tokenBalance,\n        0,\n        path,\n        self,\n        block.timestamp\n    );\n\n    // The on-chain logic simply re-writes the same value back \u2013 we mirror that\n    swapFlag = uint248(swapFlag);\n\n    // Final ETH transfer to the authorised address\n    require(address(this).balance == 0 || address(this).balance > 0, \"manualSwap: balance check failed\");\n    payable(authorizedAddress).transfer(address(this).balance);\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}