{
    "contract_address": "0x780c7f2FdF0D47F25f5858975DBd0159DB50C1B2",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_v) {\n            if (store_v - ((store_v / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_v / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_v / 0x02;\n                if (store_v) {\n                    if (store_v - ((store_v / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_v / 0x02) {\n                            if (0x1f < (store_v / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_v / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    /*\n     * `_rawSymbol` is the storage slot that the decompiled code referenced\n     * as `store_v`. `_auxStorage` replaces the original `storage_map_b`.\n     */\n    uint256 storedValue = uint256(_rawSymbol);\n\n    if (storedValue != 0) {\n        // --- Panic(0x22) branch copied verbatim from the decompiled logic ---\n        if (storedValue - ((storedValue / 2) < 0x20 ? 1 : 0) != 0) {\n            assembly {\n                mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n                mstore(0x04, 0x22)\n                revert(0x00, 0x24) // revert with Panic(0x22)\n            }\n        }\n\n        uint256 memoryCursor = 0x20 + (((0x1f + (storedValue / 2)) / 0x20) * 0x20);\n        uint256 halfValue     = storedValue / 2;\n\n        if (storedValue != 0) {\n            // Second, identical bounds-check from the original byte-code\n            if (storedValue - ((storedValue / 2) < 0x20 ? 1 : 0) != 0) {\n                assembly {\n                    mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n                    mstore(0x04, 0x22)\n                    revert(0x00, 0x24) // revert with Panic(0x22)\n                }\n            }\n\n            if (halfValue == 0) {\n                // This branch is preserved exactly as in the decompiled output\n                if (0x1f < halfValue) {\n                    // Read from the auxiliary storage mapping (slot 0x04 in original output)\n                    bytes32 temp = _auxStorage[0x04];\n\n                    // Bounds check copied from decompiled code\n                    if (((memoryCursor + 0x20) + halfValue) > (0x20 + (0x20 + memoryCursor))) {\n                        uint256 sliceLength = (memoryCursor + 0x20) - memoryCursor;\n                        uint256 bogusLength = memoryCursor; // placeholder for `var_c.length`\n                        uint256 unused      = 0;            // placeholder for `var_g`\n\n                        // The decompiled code packaged two length fields; we mirror that exactly\n                        return string(abi.encodePacked(sliceLength, bogusLength, unused));\n                    }\n                }\n            }\n        }\n    }\n\n    // Default path: original byte-code ultimately returned an empty string\n    return \"\";\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }"
}