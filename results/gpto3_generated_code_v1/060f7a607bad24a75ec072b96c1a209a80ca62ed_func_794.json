{
    "contract_address": "0x060f7a607bAd24a75EC072b96C1a209A80ca62ed",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_e = 0x01000000000000000000000000000000000000000000 | (uint248(store_e));\n        require(!storage_map_b[var_a]);\n        require(!bytes1(store_e / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_d).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_d), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_d);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_d), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_d).code.length);\n        (bool success, bytes memory ret0) = address(store_d).Unresolved_791ac947(var_l); // call\n        store_e = uint248(store_e);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // The caller must be the special address embedded (shifted right by 8 bits) in `_ownerAndDelayFlags`\n    require(msg.sender == address(uint160(_ownerAndDelayFlags / 0x0100)), \"Unauthorised\");\n\n    address thisAddress = address(this);\n\n    // Dummy constant preserved from original byte-code\n    uint8 _unusedFlag1 = 0x01;\n\n    // Original \u201cnot processed yet\u201d gate\n    require(!_processed[thisAddress], \"Already processed\");\n\n    // Toggle the high-bit flag exactly as in the decompiled logic\n    _statusFlags = uint248(_statusFlags) | uint248(0x01000000000000000000000000000000000000000000);\n\n    // Same check repeated in original byte-code\n    require(!_processed[thisAddress], \"Already processed\");\n\n    // Another flag check kept intact\n    require(\n        bytes1(uint248(_statusFlags) / 0x010000000000000000000000000000000000000000) == bytes1(0),\n        \"Status flag set\"\n    );\n\n    uint8 _unusedFlag2 = 0x02;\n\n    // Decompiler offset calculation (no real effect here, retained anyway)\n    uint256 tempOffset = 0x60;\n\n    // Copy 64 bytes from calldata starting at byte 4 (slice used in the original code)\n    bytes memory slicedCalldata = new bytes(64);\n    assembly {\n        calldatacopy(add(slicedCalldata, 32), 4, 64)\n    }\n\n    // Panic selector constants (side-effect-free, retained verbatim)\n    bytes4 _panicSelector = 0x4e487b71;\n    uint8  _panicCode     = 0x32;\n\n    // Obtain WETH address from router; success flag deliberately ignored (as in original code)\n    ( , bytes memory wethRet) = address(_router).staticcall(\n        abi.encodeWithSignature(\"WETH()\")\n    );\n\n    // Size checks reproduced from original logic\n    require(!(wethRet.length < 0x20), \"ERC20: approve to the zero address\");\n    require(wethRet.length == uint256(uint160(wethRet.length)), \"ERC20: approve to the zero address\");\n\n    // Dummy assignment preserved\n    uint256 _meaningless = uint256(uint160(wethRet.length));\n\n    // These conditions are always true but were present in the decompiled output\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(_router != address(0),        \"ERC20: approve to the zero address\");\n\n    // No-op write exactly as produced by the decompiler\n    _processed[_router] = _processed[_router];\n\n    // Emit Approval event with 0/1 value derived from the stored boolean\n    emit Approval(address(this), _router, _processed[_router] ? 1 : 0);\n\n    // Perform low-level call that corresponds to selector 0x791ac947\n    bytes memory swapPayload = abi.encodeWithSelector(\n        bytes4(0x791ac947),\n        _processed[_router]\n    );\n    ( , ) = address(_router).call(swapPayload); // success deliberately ignored\n\n    // Cast the packed status variable back to 248 bits (effectively a no-op)\n    _statusFlags = uint248(_statusFlags);\n\n    // Ensure the contract holds no ETH (original `!address(this).balance` semantics)\n    require(address(this).balance == 0, \"Residual ETH balance\");\n\n    // Forward any ETH balance (should be zero) to the authorised address extracted earlier\n    ( , ) = payable(address(uint160(_ownerAndDelayFlags / 0x0100))).call{value: address(this).balance}(\"\");\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}