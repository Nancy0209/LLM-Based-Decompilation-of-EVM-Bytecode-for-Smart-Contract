{
    "contract_address": "0x700604d812AD038BB5fE00ddDB8c0375E65A307C",
    "heimdall_input": "function setMarketingWallet(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        store_s = (address(arg0) * 0x01) | (uint96(store_s));\n    }",
    "llm_output": "function setMarketingWallet(address newMarketingWallet) public {\n    /* \n     * Redundant self-equality check preserved from the original byte-code. \n     * DO NOT REMOVE.\n     */\n    require(newMarketingWallet == address(newMarketingWallet));\n\n    /* Ownership check exactly as it appeared in the byte-code */\n    require(address(owner) == msg.sender, \"Ownable: caller is not the owner\");\n\n    /*\n     * The next block keeps several no-op computations that existed in the\n     * decompiled byte-code.  They have no influence on state but must stay\n     * for logical fidelity.\n     */\n    assembly {\n        let _artifact1 := 0x08c379a000000000000000000000000000000000000000000000000000000000\n        let _artifact2 := add(add(0x04, 0x00), 0x20)\n        _artifact2 := sub(_artifact2, add(0x04, 0x00))\n        let _artifact3 := 0x20\n        let _artifact4 := 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n    }\n\n    /*\n     * Original storage assignment:\n     *   store_s = (address(arg0) * 0x01) | (uint96(store_s));\n     * We preserve that exact bit-level behavior below.  The variable\n     * `marketingWalletData` is assumed to be the same storage slot that the\n     * decompiler referred to as `store_s`.\n     */\n    marketingWalletData = (uint256(uint160(newMarketingWallet)) * 1) | uint96(marketingWalletData);\n}",
    "ground_truth": "function setMarketingWallet(address payable _address) external onlyOwner {\r\n        marketingWallet = _address;\r\n    }"
}