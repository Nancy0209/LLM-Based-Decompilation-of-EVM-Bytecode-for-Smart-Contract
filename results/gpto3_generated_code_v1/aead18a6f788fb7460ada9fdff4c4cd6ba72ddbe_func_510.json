{
    "contract_address": "0xaEAD18A6f788fb7460aDA9fDFf4C4Cd6Ba72dDBE",
    "heimdall_input": "function removeBypassRule(address arg0, bytes4 arg1, uint256 arg2) public {\n        require(arg0 == (address(arg0)));\n        require(arg1 == (uint32(arg1)));\n        require(!(bytes1(isClaimable / 0x0100)), \"Not owner or able to bypass\");\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        require(bytes1(isClaimable / 0x0100), \"Not owner or able to bypass\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1b;\n        var_d = 0x4e6f74206f776e6572206f722061626c6520746f206279706173730000000000;\n        address var_e = address(arg0);\n        var_f = 0x66;\n        var_e = uint32(arg1);\n        address var_f = keccak256(var_e);\n        storage_map_q[var_e] = uint248(storage_map_q[var_e]);\n        require(!arg2, \"Not owner or able to bypass\");\n        var_e = address(arg0);\n        var_f = 0x67;\n        var_e = arg2;\n        var_f = keccak256(var_e);\n        storage_map_q[var_e] = 0x01 | (uint248(storage_map_q[var_e]));\n        var_e = msg.sender;\n        var_f = 0x66;\n        var_e = uint32(msg.data[0]);\n        var_f = keccak256(var_e);\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        require(bytes1(storage_map_q[var_e]), \"Not owner or able to bypass\");\n        var_e = address(arg0);\n        var_f = 0x66;\n        var_e = uint32(arg1);\n        var_f = keccak256(var_e);\n        storage_map_q[var_e] = uint248(storage_map_q[var_e]);\n        require(!arg2, \"Not owner or able to bypass\");\n        var_e = address(arg0);\n        var_f = 0x67;\n        var_e = arg2;\n        var_f = keccak256(var_e);\n        storage_map_q[var_e] = 0x01 | (uint248(storage_map_q[var_e]));\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1b;\n        var_d = 0x4e6f74206f776e6572206f722061626c6520746f206279706173730000000000;\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1b;\n        var_d = 0x4e6f74206f776e6572206f722061626c6520746f206279706173730000000000;\n    }",
    "llm_output": "function removeBypassRule(address target, bytes4 selector, uint256 index) public {\n    // Redundant type-consistency checks retained\n    require(target == address(target));\n    require(selector == bytes4(selector));\n\n    // Series of permission checks exactly as in the decompiled output\n    require(bytes1(uint256(isClaimable) / 0x0100) == bytes1(0x00), \"Not owner or able to bypass\");\n    require(owner == msg.sender, \"Not owner or able to bypass\");\n    require(bytes1(uint256(isClaimable) / 0x0100) != bytes1(0x00), \"Not owner or able to bypass\");\n\n    // No-op read/update on selector-based rule\n    bytes32 selectorKey = keccak256(abi.encodePacked(uint32(selector)));\n    bypassRules[selectorKey] = uint248(bypassRules[selectorKey]);\n\n    // Negated index check (original: `require(!arg2, ...)`)\n    require(index == 0, \"Not owner or able to bypass\");\n\n    // Flag manipulation on index-based rule\n    bytes32 indexKey = keccak256(abi.encodePacked(index));\n    bypassRules[indexKey] = uint248(bypassRules[indexKey]) | uint248(0x01);\n\n    // Caller-based rule check\n    bytes32 callerKey = keccak256(abi.encodePacked(uint32(bytes4(msg.sig))));\n    require(owner == msg.sender, \"Not owner or able to bypass\");\n    require(bytes1(uint248(bypassRules[callerKey])) != bytes1(0x00), \"Not owner or able to bypass\");\n\n    // Repeat of earlier logic (mirrors decompiled structure)\n    selectorKey = keccak256(abi.encodePacked(uint32(selector)));\n    bypassRules[selectorKey] = uint248(bypassRules[selectorKey]);\n\n    require(index == 0, \"Not owner or able to bypass\");\n\n    indexKey = keccak256(abi.encodePacked(index));\n    bypassRules[indexKey] = uint248(bypassRules[indexKey]) | uint248(0x01);\n\n    // Final redundant owner check\n    require(owner == msg.sender, \"Not owner or able to bypass\");\n}",
    "ground_truth": "function removeBypassRule(address who, bytes4 functionSig, uint256 id) public onlyOwner {\\n        byPassableFunction[who][functionSig] = false;\\n        if (id !=0) {\\n            byPassableIds[who][id] = true;\\n        }\\n    }"
}