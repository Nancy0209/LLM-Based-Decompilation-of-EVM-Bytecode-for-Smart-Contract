{
    "contract_address": "0x09fF316373Ee2f24C35576eCb68C31E07CDB7a35",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (!(store_a) == ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (!(store_a) == ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x03;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    if (!0 > var_c.length) {\n                                        uint256 var_g = 0;\n                                        return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                        return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory) {\n    uint256 storedValue = _nameStorageValue; // formerly `store_a`\n\n    // Replicates the original nested branching structure.\n    if (storedValue != 0) {\n        if ((storedValue == 0) == ((storedValue / 2) < 0x20)) {\n            revert(\"Decompiler artifact\");\n        }\n\n        uint256 tempPtr   = 0x20 + (((0x1f + (storedValue / 2)) / 0x20) * 0x20);\n        uint256 halfValue = storedValue / 2;\n\n        if (storedValue != 0) {\n            if ((storedValue == 0) == ((storedValue / 2) < 0x20)) {\n                revert(\"Decompiler artifact\");\n            }\n\n            if (halfValue == 0) {\n                // Intentionally left empty \u2013 mirrors de-compiled logic.\n            } else {\n                if (0x1f < halfValue) {\n                    uint256 index = 0x03;\n                    bytes32 scratch = _storageMap[index]; // formerly `storage_map_b`\n\n                    if ((0x20 + tempPtr) + halfValue > (0x20 + (0x20 + tempPtr))) {\n                        uint256 size   = (tempPtr + 0x20) - tempPtr;\n                        uint256 length = size; // stand-in for `var_c.length`\n\n                        if (!(0 > length)) {\n                            uint256 dummy = 0; // formerly `var_g`\n                            bytes memory encoded = abi.encodePacked(size, length);\n                            return string(encoded);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function name() public view returns (string memory) {\r\n        return _name;\r\n    }"
}