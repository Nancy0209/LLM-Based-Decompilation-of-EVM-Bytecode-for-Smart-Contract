{
    "contract_address": "0x842FD31eAd327AE42D19B7BFbdB045d3A219c662",
    "heimdall_input": "function recoverERC20(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(0xf6f50011df50e1180dc78f4a8237f293f30a3b27 == msg.sender);\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(this);\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        var_d = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        var_e = 0xf6f50011df50e1180dc78f4a8237f293f30a3b27;\n        uint256 var_f = var_c.length;\n        (bool success, bytes memory ret0) = address(arg0).{ value: 0 ether }Unresolved_a9059cbb(var_e); // call\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_c.length == var_c.length);\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_e = 0x2a;\n        var_f = 0x4f6e6c79206f726967696e616c206f776e65722063616e2063616c6c20746869;\n        var_g = 0x732066756e6374696f6e00000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function recoverERC20(address token) public {\n    // Retain no-op address check from decompiled output\n    require(token == address(token));\n\n    // Hard-coded owner extracted from bytecode\n    address owner = 0xf6F50011dF50e1180dC78f4a8237f293f30a3b27;\n    require(msg.sender == owner);\n\n    /* --------------------------------------------------------------- *\n     * 1. Read this contract\u2019s token balance via low-level staticcall   *\n     * --------------------------------------------------------------- */\n    bytes memory balanceOfCalldata = abi.encodeWithSelector(\n        bytes4(0x70a08231),         // balanceOf(address)\n        address(this)\n    );\n\n    (bool balanceCallSuccess, bytes memory balanceRet) = token.staticcall(balanceOfCalldata);\n    // Success flag intentionally unused to preserve original semantics\n\n    unchecked {\n        uint256 tmp = uint256(uint248(balanceRet.length + 0x1f));\n        require(!(((tmp + balanceRet.length) - tmp) < 0x20));\n    }\n\n    uint256 balance = 0;\n    if (balanceRet.length >= 32) {\n        balance = abi.decode(balanceRet, (uint256));\n    }\n\n    /* --------------------------------------------------------------- *\n     * 2. Transfer the entire balance to the hard-coded owner           *\n     * --------------------------------------------------------------- */\n    bytes memory transferCalldata = abi.encodeWithSelector(\n        bytes4(0xa9059cbb),         // transfer(address,uint256)\n        owner,\n        balance\n    );\n\n    (bool transferCallSuccess, bytes memory transferRet) = token.call(transferCalldata);\n    // Success flag intentionally unused to preserve original semantics\n\n    unchecked {\n        uint256 tmp2 = uint256(uint248(transferRet.length + 0x1f));\n        require(!(((tmp2 + transferRet.length) - tmp2) < 0x20));\n        require(transferRet.length == transferRet.length);\n    }\n}",
    "ground_truth": "function recoverERC20(address _token) external {\r\n        require(msg.sender == originalOwner, \"Only original owner can call this function\");\r\n        uint256 fullAmount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(originalOwner, fullAmount);\r\n    }"
}