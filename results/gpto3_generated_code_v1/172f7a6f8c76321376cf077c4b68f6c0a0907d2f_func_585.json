{
    "contract_address": "0x172F7a6F8C76321376cf077c4b68f6C0A0907d2f",
    "heimdall_input": "function getTotalDividends() public returns (uint256) {\n        var_a = 0x997664d700000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(blacklistEnabled / 0x01).totalDividends(var_b); // staticcall\n        uint256 var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_d == (var_d));\n        var_e = var_d;\n        return var_d;\n    }",
    "llm_output": "function getTotalDividends() public view returns (uint256) {\n    // Function selector for `totalDividends()`\n    bytes4 TOTAL_DIVIDENDS_SELECTOR = 0x997664d7;\n\n    // Replicates `address(blacklistEnabled / 0x01)` from the decompiled code\n    address dividendsContract = address(uint160(uint256(blacklistEnabled) / 0x01));\n\n    // Low-level static call\n    (bool /* success */, bytes memory returndata) =\n        dividendsContract.staticcall(abi.encodeWithSelector(TOTAL_DIVIDENDS_SELECTOR));\n\n    // Mimic original length arithmetic and check\n    uint256 temp = uint256(returndata.length + 0x1f);\n    require(!(returndata.length < 0x20), \"Invalid return data length\");\n\n    // Decode the uint256 return value\n    uint256 totalDividends;\n    assembly {\n        totalDividends := mload(add(returndata, 0x20))\n    }\n\n    // Redundant equality check preserved from original bytecode\n    require(totalDividends == totalDividends, \"Redundant check\");\n\n    // Mirrors `var_e = var_d` (effectively a no-op)\n    uint256 _unused = totalDividends;\n    _unused;\n\n    return totalDividends;\n}",
    "ground_truth": "function getTotalDividends() external view returns (uint256) {\r\n        return distributor.totalDividends();\r\n    }"
}