{
    "contract_address": "0x0571e4201619916DB35214e935F0E46F037BBd2D",
    "heimdall_input": "function rescueERC20(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(getOwner)), \"!OWNER\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x06;\n        var_d = 0x214f574e45520000000000000000000000000000000000000000000000000000;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(this);\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require((arg1 == ((arg1 * var_e.length) / var_e.length)) | !var_e.length);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x64);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        var_h = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        address var_c = address(store_v);\n        uint256 var_d = (arg1 * var_e.length) / 0x64;\n        (bool success, bytes memory ret0) = address(arg0).{ value: 0 ether }Unresolved_a9059cbb(var_c); // call\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == var_e.length);\n    }",
    "llm_output": "function rescueERC20(address token, uint256 percentage) public {\n    // Trivial identity check preserved from original byte-code\n    require(token == token);\n\n    // Ownership check\n    require(msg.sender == address(getOwner()), \"!OWNER\");\n\n    // ---------------------------------------------------------------------\n    // Read this contract\u2019s balance of the given ERC-20 token\n    // ---------------------------------------------------------------------\n    (bool balanceSuccess, bytes memory balanceData) = token.staticcall(\n        abi.encodeWithSelector(0x70a08231, address(this)) // balanceOf(address)\n    );\n\n    // The original byte-code manipulated a scratch variable; keep behaviour\n    uint256 scratch = uint256(uint248(balanceData.length + 0x1f));\n\n    // Ensure at least one word of return data (matches decompiled logic)\n    require(balanceData.length >= 32);\n\n    uint256 balance = abi.decode(balanceData, (uint256));\n\n    // Overflow/consistency check exactly as observed in decompiled output\n    require(\n        (percentage == ((percentage * balance) / balance)) || balance == 0\n    );\n\n    // `require(0x64)` in the decompiled code (always true)\n    require(0x64 != 0);\n\n    // ---------------------------------------------------------------------\n    // Calculate amount and transfer to the predefined receiver\n    // ---------------------------------------------------------------------\n    uint256 amount = (percentage * balance) / 0x64; // divide by 100 (0x64)\n\n    (bool transferSuccess, bytes memory transferData) = token.call(\n        abi.encodeWithSelector(0xa9059cbb, treasury, amount) // transfer(address,uint256)\n    );\n\n    // Mirror the same return-data size checks from the decompiled code\n    scratch = scratch + uint256(uint248(transferData.length + 0x1f));\n    require(transferData.length >= 32);\n\n    // Final tautological check kept verbatim\n    require(balance == balance);\n}",
    "ground_truth": "function rescueERC20(address _address, uint256 percent) external onlyOwner {\r\n        uint256 _amount = IERC20(_address).balanceOf(address(this)).mul(percent).div(100);\r\n        IERC20(_address).transfer(development_receiver, _amount);\r\n    }"
}