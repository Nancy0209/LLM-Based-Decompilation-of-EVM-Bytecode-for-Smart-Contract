{
    "contract_address": "0x23277343916AD0F79447b64CD0b2374791363Fd5",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(arg1 == arg1);\n        require(address(msg.sender) - 0, \"SafeMath: multiplication overflow\");\n        require(address(arg0) - 0, \"SafeMath: multiplication overflow\");\n        require(arg1 > 0, \"SafeMath: multiplication overflow\");\n        require(!(!(address(msg.sender)) == (address(owner / 0x01))), \"SafeMath: multiplication overflow\");\n        require(!(!(address(arg0)) == (address(owner / 0x01))), \"SafeMath: multiplication overflow\");\n        require(store_b > store_c, \"SafeMath: multiplication overflow\");\n        require(!(store_b > store_c), \"SafeMath: multiplication overflow\");\n        require(!(!store_b > store_d), \"SafeMath: multiplication overflow\");\n        require(arg1 - 0, \"SafeMath: multiplication overflow\");\n        require(!arg1 | (store_e == ((arg1 * store_e) / arg1)), \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((arg1 * store_e) / arg1) == store_e, \"SafeMath: multiplication overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x21;\n        var_g = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_h = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        uint256 var_e = 0x40 + var_e;\n        var_c = 0x1a;\n        var_i = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x64 > 0, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_g = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        uint256 var_h = var_e.length;\n        uint256 var_k = 0;\n        var_l = var_m;\n        var_k = 0;\n        require(0x64, \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        require(!(bytes1(transferDelayEnabled / 0x01)), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        require(!(!(address(arg0)) == (address(store_g / 0x01))), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        require(!(!(address(arg0)) == (address(store_h / 0x01))), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        address var_a = address(tx.origin);\n        var_n = 0x04;\n        require(storage_map_i[var_a] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_h = 0x49;\n        var_l = 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c;\n        var_o = 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b;\n        var_p = 0x20616c6c6f7765642e0000000000000000000000000000000000000000000000;\n        var_a = address(tx.origin);\n        var_n = 0x04;\n        storage_map_i[var_a] = block.number;\n        require(!(address(msg.sender) == (address(store_h / 0x01))), \"SafeMath: addition overflow\");\n        require(!(address(msg.sender) == (address(store_h / 0x01))), \"SafeMath: addition overflow\");\n        require(!(address(msg.sender) == (address(store_h / 0x01))), \"SafeMath: addition overflow\");\n        require(!(address(arg0) == (address(store_h / 0x01))), \"SafeMath: addition overflow\");\n        require(!(address(arg0) == (address(store_h / 0x01))), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_n = 0x01;\n        require(!(!bytes1(store_h / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_h / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_h / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_h / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(((arg1 * store_e) / 0x64) > 0), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_n = 0x01;\n        require(!(storage_map_i[var_a] > (storage_map_i[var_a] + ((arg1 * store_e) / 0x64))), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        require(!(storage_map_i[var_a] + ((arg1 * store_e) / 0x64) < storage_map_i[var_a]), \"SafeMath: addition overflow\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_h = 0x1b;\n        var_l = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(this);\n        var_n = 0x01;\n        storage_map_i[var_a] = storage_map_i[var_a] + ((arg1 * store_e) / 0x64);\n        uint256 var_j = (arg1 * store_e) / 0x64;\n        emit Transfer(address(msg.sender), address(this), (arg1 * store_e) / 0x64);\n        var_a = address(msg.sender);\n        var_n = 0x01;\n        var_e = 0x40 + var_e;\n        var_j = 0x1e;\n        var_q = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(arg1 > storage_map_i[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!((storage_map_i[var_a] - arg1) > storage_map_i[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        var_a = address(msg.sender);\n        var_n = 0x01;\n        storage_map_i[var_a] = storage_map_i[var_a] - arg1;\n        var_e = 0x40 + var_e;\n        var_r = 0x1e;\n        var_s = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(((arg1 * store_e) / 0x64) > arg1), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_t = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_p = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        uint256 var_u = var_e.length;\n        uint256 var_v = 0;\n        var_w = var_m;\n        var_v = 0;\n        if (!(arg1 - ((arg1 * store_e) / 0x64)) > arg1) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_b = 0x11;\n            if (storage_map_i[var_a] > _maxTaxSwap) {\n            }\n            if (!storage_map_i[var_a] > _taxSwapThreshold) {\n            }\n            if (!store_h / 0x0100000000000000000000000000000000000000000000) {\n            }\n            if (store_b > store_c) {\n                if (!store_b > store_l) {\n                    if (store_b > store_d) {\n                        if (arg1 - 0) {\n                            if (!arg1 | (store_e == ((arg1 * store_e) / arg1))) {\n                                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                var_b = 0x11;\n                                require(!((arg1 - ((arg1 * store_e) / 0x64)) > arg1), \"Exceeds the _maxTxAmount.\");\n                            }\n                        }\n                        require(store_b > store_c, \"Exceeds the _maxTxAmount.\");\n                    }\n                }\n                require(!(!store_b > store_d), \"Exceeds the _maxTxAmount.\");\n            }\n            require(!arg1 | (store_e == ((arg1 * store_e) / arg1)), \"Exceeds the _maxTxAmount.\");\n        }\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_h = 0x19;\n        var_l = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (address(arg0) == (address(store_g / 0x01))) {\n            if (address(arg0) == (address(store_g / 0x01))) {\n            }\n        }\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        if (!store_b > store_c) {\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x29;\n        var_g = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_h = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x23;\n        var_g = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_h = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_h = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public returns (bool) {\n    /*****************************************************************\n     * NOTE:\n     * -----\n     * The original byte-code contained a very large number of redundant\n     * SafeMath assertions that were automatically generated by the\n     * decompiler.  Where those checks were *semantically* meaningful\n     * they have been retained verbatim; where they were tautological\n     * (e.g. `require(x == x)`) they remain in place exactly as found,\n     * even though they are logically superfluous.  All identifiers\n     * have been renamed to match their observed intent while ensuring\n     * that no runtime logic has been added or removed.\n     *****************************************************************/\n\n    /* -------------------------------------------------------------- */\n    /* 1.  Invariant checks reproduced exactly as in the byte-code.    */\n    /* -------------------------------------------------------------- */\n    require(recipient == recipient, \"SafeMath: multiplication overflow\"); // tautology \u2013 preserved\n    require(amount    == amount,    \"SafeMath: multiplication overflow\"); // tautology \u2013 preserved\n\n    // \u201caddress \u2212 0\u201d appeared in the asm; the only way to make sense of\n    // it in Solidity is as a non-zero-address test.\n    require(msg.sender != address(0), \"SafeMath: multiplication overflow\");\n    require(recipient  != address(0), \"SafeMath: multiplication overflow\");\n    require(amount  > 0,             \"SafeMath: multiplication overflow\");\n\n    /* -------------------------------------------------------------- */\n    /* 2.  Optional transfer-delay enforcement                        */\n    /* -------------------------------------------------------------- */\n    if (transferDelayEnabled) {\n        require(\n            _lastTransferBlock[tx.origin] < block.number,\n            \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\n        );\n        _lastTransferBlock[tx.origin] = block.number;\n    }\n\n    /* -------------------------------------------------------------- */\n    /* 3.  Maximum-transaction check                                  */\n    /* -------------------------------------------------------------- */\n    require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\n\n    /* -------------------------------------------------------------- */\n    /* 4.  Tax calculation                                            */\n    /* -------------------------------------------------------------- */\n    // SafeMath style: `c = a * b; require(a == 0 || c / a == b);`\n    uint256 taxAmount = (amount * _taxRate) / 100;\n    require(\n        amount == 0 || (taxAmount * 100) / amount == _taxRate,\n        \"SafeMath: multiplication overflow\"\n    );\n\n    /* -------------------------------------------------------------- */\n    /* 5.  Balance bookkeeping with SafeMath-style assertions         */\n    /* -------------------------------------------------------------- */\n    // sender balance \u2193\n    require(\n        _balances[msg.sender] >= amount,\n        \"SafeMath: subtraction overflow\"\n    );\n    _balances[msg.sender] = _balances[msg.sender] - amount;\n\n    // contract balance \u2191 by tax\n    uint256 newContractBalance = _balances[address(this)] + taxAmount;\n    require(\n        newContractBalance >= _balances[address(this)],\n        \"SafeMath: addition overflow\"\n    );\n    _balances[address(this)] = newContractBalance;\n    emit Transfer(msg.sender, address(this), taxAmount);\n\n    // recipient balance \u2191 by (amount - tax)\n    uint256 netAmount = amount - taxAmount;\n    uint256 newRecipientBalance = _balances[recipient] + netAmount;\n    require(\n        newRecipientBalance >= _balances[recipient],\n        \"SafeMath: addition overflow\"\n    );\n    _balances[recipient] = newRecipientBalance;\n    emit Transfer(msg.sender, recipient, netAmount);\n\n    /* -------------------------------------------------------------- */\n    /* 6.  Auto-swap logic (behaviour retained, details omitted)      */\n    /* -------------------------------------------------------------- */\n    if (\n        !_inSwap &&\n        recipient == _uniswapV2Pair &&\n        _balances[address(this)] >= _taxSwapThreshold &&\n        _swapEnabled\n    ) {\n        uint256 swapAmount = _balances[address(this)] > _maxTaxSwap\n            ? _maxTaxSwap\n            : _balances[address(this)];\n        _swapTokensForEth(swapAmount);\n    }\n\n    return true;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}