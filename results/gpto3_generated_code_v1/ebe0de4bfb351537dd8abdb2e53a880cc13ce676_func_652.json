{
    "contract_address": "0xEBe0De4bfB351537dd8Abdb2e53a880Cc13ce676",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_k)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_c[var_a]);\n        uniswapV2Pair = 0x01000000000000000000000000000000000000000000 | (uint248(uniswapV2Pair));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_h).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_h), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_h);\n        address var_b = keccak256(var_a);\n        storage_map_c[var_a] = storage_map_c[var_a];\n        address var_k = storage_map_c[var_a];\n        emit Approval(address(this), address(store_h), storage_map_c[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_c[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_h).code.length);\n        (bool success, bytes memory ret0) = address(store_h).{ value: var_m ether }Unresolved_791ac947(var_l); // call\n        uniswapV2Pair = uint248(uniswapV2Pair);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_k).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // Original check: require(address(msg.sender) == (address(store_k)));\n    require(msg.sender == owner, \"Caller is not owner\");\n\n    address self = address(this);\n\n    // Original: require(!storage_map_c[var_a]);\n    require(!isSwapped[self], \"Already swapped\");\n\n    // Original bit-twiddling on the pair address (kept verbatim for fidelity)\n    uniswapV2Pair = uint248(0x01000000000000000000000000000000000000000000) | uniswapV2Pair;\n\n    // No-op arithmetic preserved from the decompiled artifact\n    uint256 tempCounter = 0;\n    tempCounter += 0x60;\n\n    // Original staticcall: (bool success, bytes memory ret0) = address(store_h).WETH(var_i);\n    (bool wethSuccess, bytes memory wethData) =\n        router.staticcall(abi.encodeWithSignature(\"WETH()\"));\n    require(wethSuccess, \"WETH() call failed\");\n\n    // Decompiled length check\n    require(!(wethData.length < 0x20), \"ERC20: approve to the zero address\");\n\n    // Decompiled require statements that evaluated the address as a boolean\n    require(self != address(0),  \"ERC20: approve to the zero address\");\n    require(address(router) != address(0), \"ERC20: approve to the zero address\");\n\n    // Dummy mapping read/write kept for fidelity\n    isSwapped[self] = isSwapped[self];\n    uint256 approvalAmount = isSwapped[self] ? 1 : 0;\n\n    emit Approval(self, address(router), approvalAmount);\n\n    // Original dynamic call: 0x791ac947 selector (swapExactTokensForETHSupportingFeeOnTransferTokens)\n    require(address(router).code.length > 0, \"Router code length is zero\");\n    (bool swapSuccess, ) = address(router).call(\n        abi.encodeWithSelector(0x791ac947, approvalAmount)\n    );\n    require(swapSuccess, \"Swap failed\");\n\n    // Reset pair back to its original lower 248 bits (kept verbatim)\n    uniswapV2Pair = uint248(uniswapV2Pair);\n\n    // Original: require(!address(this).balance);\n    require(address(this).balance == 0, \"Unexpected ETH balance\");\n\n    // Original ETH transfer to owner\n    (bool transferSuccess, ) = owner.call{ value: address(this).balance }(\"\");\n    require(transferSuccess, \"ETH transfer failed\");\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}