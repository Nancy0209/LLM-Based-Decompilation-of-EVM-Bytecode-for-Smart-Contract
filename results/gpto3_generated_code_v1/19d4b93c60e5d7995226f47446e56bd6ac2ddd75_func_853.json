{
    "contract_address": "0x19d4B93c60e5D7995226F47446e56bD6ac2DDD75",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_p)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_f = 0x01000000000000000000000000000000000000000000 | (uint248(store_f));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_l).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!((var_d + ret0.length) - var_d) < 0x20);\n        require(var_d.length == (address(var_d.length)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this));\n        require(address(store_l));\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_l);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_l), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_o = var_d.length;\n        address var_p = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_l).code.length);\n        (bool success, bytes memory ret0) = address(store_l).Unresolved_791ac947(var_l); // call\n        store_f = uint248(store_f);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_p).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_p = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_p = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "pragma solidity ^0.8.20;\n\ncontract ManualSwapContract {\n    /* -------------------------------------------------------------------------- */\n    /*                                   Storage                                  */\n    /* -------------------------------------------------------------------------- */\n\n    // store_p\n    address public immutable owner;\n\n    // store_l\n    address public router;\n\n    // storage_map_b\n    mapping(address => uint256) internal processed;\n\n    // store_f\n    uint248 internal flag;\n\n    /* -------------------------------------------------------------------------- */\n    /*                                    Events                                  */\n    /* -------------------------------------------------------------------------- */\n\n    // ERC-20 Approval event (used exactly as in the byte-code)\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 value);\n\n    /* -------------------------------------------------------------------------- */\n    /*                                  Constructor                               */\n    /* -------------------------------------------------------------------------- */\n\n    constructor(address _router) {\n        owner  = msg.sender;\n        router = _router;\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                               Public Functions                             */\n    /* -------------------------------------------------------------------------- */\n\n    /**\n     * This function is a direct, semantically-preserved translation of the\n     * decompiled `manualSwap()` routine located at 0x19d4B93c60e5D7995226F47446e56bD6ac2DDD75.\n     * The seemingly odd logic has been kept intact on purpose.\n     */\n    function manualSwap() external {\n        /* ------------------------------------------------------------------ */\n        /*                       Authorization & Re-entrancy                   */\n        /* ------------------------------------------------------------------ */\n\n        // require(address(msg.sender) == address(store_p));\n        require(msg.sender == owner, \"Unauthorized caller\");\n\n        /* ------------------------------------------------------------------ */\n        /*                       One-time execution guard                      */\n        /* ------------------------------------------------------------------ */\n\n        // require(!storage_map_b[address(this)]);\n        require(processed[address(this)] == 0, \"Already executed\");\n\n        /* ------------------------------------------------------------------ */\n        /*                               Flags                                 */\n        /* ------------------------------------------------------------------ */\n\n        // store_f = 0x01\u2026 | store_f;\n        flag = uint248(0x01000000000000000000000000000000000000000000 | uint248(flag));\n\n        /* ------------------------------------------------------------------ */\n        /*                      Copy calldata[4:68] (64 bytes)                */\n        /* ------------------------------------------------------------------ */\n\n        bytes memory callDataSlice = new bytes(64);\n        assembly {\n            calldatacopy(add(callDataSlice, 32), 4, 64)\n        }\n\n        /* ------------------------------------------------------------------ */\n        /*                      Static call: router.WETH()                     */\n        /* ------------------------------------------------------------------ */\n\n        (bool ok, bytes memory wethData) = router.staticcall(\n            abi.encodeWithSignature(\"WETH()\")\n        );\n        require(ok, \"WETH() staticcall failed\");\n\n        // require(!((var_d + ret0.length) - var_d) < 0x20);\n        require(!(wethData.length < 32), \"Invalid WETH data\");\n\n        // require(var_d.length == (address(var_d.length)));\n        require(\n            wethData.length == uint256(uint160(wethData.length)),\n            \"Length mismatch\"\n        );\n\n        /* ------------------------------------------------------------------ */\n        /*                      Event emission (Approval)                      */\n        /* ------------------------------------------------------------------ */\n\n        emit Approval(address(this), router, processed[address(this)]);\n\n        /* ------------------------------------------------------------------ */\n        /*                      Low-level router call                          */\n        /* ------------------------------------------------------------------ */\n\n        // router.call(0x791ac947\u2026)\n        (ok, ) = router.call(abi.encodeWithSelector(bytes4(0x791ac947)));\n        require(ok, \"Router 0x791ac947 call failed\");\n\n        /* ------------------------------------------------------------------ */\n        /*                      Preserve flag side-effect                      */\n        /* ------------------------------------------------------------------ */\n\n        flag = uint248(flag);\n\n        /* ------------------------------------------------------------------ */\n        /*                      Post-execution Ether check                     */\n        /* ------------------------------------------------------------------ */\n\n        // require(!address(this).balance);\n        require(address(this).balance == 0, \"Non-zero ETH balance\");\n\n        // Transfer (potentially zero) balance to owner\n        (ok, ) = payable(owner).call{value: address(this).balance}(\"\");\n        require(ok, \"ETH transfer failed\");\n    }\n}",
    "ground_truth": "function manualSwap() external {\n        require(_msgSender()==_taxWallet);\n        uint256 tokenBalance=balanceOf(address(this));\n        if(tokenBalance>0){\n          swapTokensForEth(tokenBalance);\n        }\n        uint256 ethBalance=address(this).balance;\n        if(ethBalance>0){\n          sendETHToFee(ethBalance);\n        }\n    }"
}