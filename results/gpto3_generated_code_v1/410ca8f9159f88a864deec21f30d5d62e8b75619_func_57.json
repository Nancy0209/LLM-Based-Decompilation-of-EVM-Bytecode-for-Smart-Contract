{
    "contract_address": "0x410cA8f9159f88a864DeEc21f30D5D62E8B75619",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (store_a - ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x03;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory) {\n    // The original decompiled code loads a value from storage slot \u201cstore_a\u201d.\n    // In the reconstructed source we assume this slot corresponds to\n    // the contract-level string variable `_tokenName`.\n    string memory localName = _tokenName;\n    uint256 nameLength = bytes(localName).length;\n\n    // Preserve the (highly-obscure) arithmetic branch that may revert.\n    // It mirrors the pattern `store_a - ((store_a / 0x02) < 0x20)` seen\n    // in the decompiled output, which\u2014when non-zero\u2014ultimately triggers\n    // a panic with error code 0x22.\n    if (nameLength != 0) {\n        uint256 check = nameLength - (((nameLength / 2) < 0x20) ? 1 : 0);\n        if (check != 0) {\n            revert(\"Decompiler artifact\");\n        }\n    }\n\n    return localName;\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }"
}