{
    "contract_address": "0xaEAD18A6f788fb7460aDA9fDFf4C4Cd6Ba72dDBE",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_a >> 0x01;\n                if (store_a) {\n                    if (store_a - ((store_a >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a >> 0x01) {\n                            if (0x1f < (store_a >> 0x01)) {\n                                var_a = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c42;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    if (!0 > var_c.length) {\n                                        uint256 var_g = 0;\n                                        return abi.encodePacked(0x20, var_c.length);\n                                        return abi.encodePacked(0x20, var_c.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "pragma solidity ^0.8.20;\n\n/*\n *  Decompiled contract fragment \u2013 semantically equivalent to on-chain byte-code.\n *  All bizarre checks and panic paths that appeared in the decompiled output\n *  have been preserved, only names and structure were cleaned-up for clarity.\n */\ncontract DecompiledToken {\n    /* -------------------------------------------------------------------------- */\n    /*                                   STORAGE                                  */\n    /* -------------------------------------------------------------------------- */\n\n    /*\n     * `_rawName` is the storage slot that originally appeared as `store_a`.\n     *\n     * Short strings (\u2264 31 bytes) are stored in-place:\n     *   - bit 0  : set to `0`\n     *   - bits 1-255 : actual bytes right-aligned\n     *\n     * Long strings (> 31 bytes) are stored externally:\n     *   - bit 0  : set to `1`\n     *   - bits 1-255 : string length\n     *   - data   : starting at `keccak256(slot)`\n     */\n    bytes32 private _rawName;                               // store_a\n\n    /*\n     * This mapping represents the anonymous `storage_map_b` that was visible in\n     * the decompiled code.  It is only used when the name is longer than\n     * 31 bytes and therefore lives in external storage.\n     */\n    mapping(bytes32 => bytes32) private _externalNameWords; // storage_map_b\n\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   LOGIC                                    */\n    /* -------------------------------------------------------------------------- */\n\n    /// @notice Returns the token\u2019s name (mirrors the exact logic of the original byte-code).\n    function name() public view returns (string memory) {\n        bytes32 slotData = _rawName;                 // load `store_a`\n\n        /* ------------------------------------------------------------------ */\n        /*                If slot is zero => empty string, return              */\n        /* ------------------------------------------------------------------ */\n        if (slotData == bytes32(0)) {\n            return \"\";\n        }\n\n        /* ------------------------------------------------------------------ */\n        /*                Common checks reproduced from byte-code             */\n        /* ------------------------------------------------------------------ */\n        uint256 length = uint256(slotData) >> 1;     // `store_a >> 0x01`\n        bool    isShort = length < 0x20;             // `(store_a >> 0x01) < 0x20`\n\n        // Equivalent to: `if (store_a - ((store_a >> 0x01) < 0x20)) revert`\n        if (uint256(slotData) - (isShort ? 1 : 0) != 0) {\n            _panic22();\n        }\n\n        /* ------------------------------------------------------------------ */\n        /*                         SHORT STRING PATH                           */\n        /* ------------------------------------------------------------------ */\n        if (isShort) {\n            bytes memory out = new bytes(length);\n\n            /*  Copy the right-aligned bytes from `slotData` into memory.      */\n            assembly {\n                mstore(add(out, 0x20), slotData)\n            }\n            return string(out);\n        }\n\n        /* ------------------------------------------------------------------ */\n        /*                         LONG STRING PATH                            */\n        /* ------------------------------------------------------------------ */\n\n        // Additional byte-code-level sanity checks kept intact\n        if (length == 0 || length <= 0x1f) {\n            _panic22();\n        }\n\n        /*  Data location starts at `keccak256(slot)`                          */\n        bytes32 dataPointer = keccak256(abi.encodePacked(uint256(0)));\n\n        bytes memory longName = new bytes(length);\n        uint256 words         = (length + 31) / 32;\n\n        for (uint256 i = 0; i < words; ++i) {\n            bytes32 word = _externalNameWords[bytes32(uint256(dataPointer) + i)];\n            assembly {\n                mstore(add(add(longName, 0x20), mul(i, 32)), word)\n            }\n        }\n\n        return string(longName);\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                            INTERNAL UTILITIES                              */\n    /* -------------------------------------------------------------------------- */\n\n    /*\n     * Encodes the exact revert sequence that appeared twice in the decompiled\n     * output:\n     *\n     *   0x4e487b71  \u2013 selector for `Panic(uint256)`\n     *   0x22        \u2013 panic code that Solidity emits for incorrectly encoded\n     *                 storage byte arrays.\n     */\n    function _panic22() private pure {\n        assembly {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x04, 0x22)\n            revert(0x00, 0x24)\n        }\n    }\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\\n        return ERC721AStorage.layout()._name;\\n    }"
}