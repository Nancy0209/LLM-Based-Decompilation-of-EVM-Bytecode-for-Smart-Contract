{
    "contract_address": "0xe4a62805E925F427A0429586fFEf8b2647a3a534",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(bytes1(store_a / 0x01000000000000000000000000000000000000000000));\n        require(bytes1(store_a / 0x01000000000000000000000000000000000000000000));\n        require(bytes1(store_a / 0x01000000000000000000000000000000000000000000));\n        require(bytes1(store_a / 0x01000000000000000000000000000000000000000000));\n        require(bytes1(store_a / 0x01000000000000000000000000000000000000000000));\n        require(bytes1(store_a / 0x01000000000000000000000000000000000000000000));\n        address var_a = address(msg.sender);\n        var_b = 0x02;\n        require(!(storage_map_b[var_a] - arg1) > storage_map_b[var_a]);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        require(!(address(store_a)) == (address(arg0)));\n        require(!(address(store_a)) == (address(arg0)));\n        require(!(address(store_a)) == (address(arg0)));\n        require(address(this) == (address(msg.sender)));\n        require(address(store_a) == (address(msg.sender)));\n        require((store_c == ((store_c * arg1) / arg1)) | !arg1);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(0x64);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x12;\n        var_a = address(arg0);\n        var_b = 0x02;\n        require(!storage_map_b[var_a] > (arg1 + storage_map_b[var_a]));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        storage_map_b[var_a] = arg1 + storage_map_b[var_a];\n        uint256 var_d = arg1;\n        emit Transfer(address(msg.sender), address(arg0), arg1);\n        var_d = 0x01;\n        return 0x01;\n        store_a = 0x010000000000000000000000000000000000000000 | (uint248(store_a));\n        var_d = 0x02;\n        uint256 var_e = var_e + 0x60;\n        var_f = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        address var_g = address(this);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        var_h = 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2;\n        require(0x12);\n        require((0x01 == 0x01) | !0x0f4240);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(0x64);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x12;\n        var_i = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        var_j = 0x2710;\n        uint256 var_k = 0;\n        var_l = 0xa0;\n        uint256 var_m = var_e.length;\n        address var_n = address(this);\n        uint256 var_o = block.timestamp;\n        require(address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).code.length);\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).{ value: var_k ether }Unresolved_791ac947(var_j); // call\n        (bool success, bytes memory ret0) = address(0x7182500ae7e73933a0d74e8b225e465851550103).transfer(address(this).balance);\n        if (0x0a) {\n            if (0x0a == 0x01) {\n                require(0x0a);\n                require(0x0a == 0x01);\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_c = 0x11;\n                require(0x0a == 0x02);\n                require(!0x12 > 0xff);\n                require(!((0x0a < 0x0b) & (0x12 < 0x4e)) | ((0x0a < 0x0133) & (0x12 < 0x20)));\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_c = 0x11;\n                require(!0x12 > 0x01);\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_c = 0x11;\n                require(!0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999);\n            }\n            require(!0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999);\n        }\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public returns (bool) {\n    /* --------------------------------------------------------------------- */\n    /*                    Original (de-compiled) invariant checks            */\n    /* --------------------------------------------------------------------- */\n\n    /* 1. Trivial identity check (always true, preserved for fidelity) */\n    require(recipient == address(recipient), \"Invariant: address mismatch\");\n\n    /* 2-7. Repeated opaque assertions on a stored address                */\n    /*     (exact arithmetic preserved; six identical checks)             */\n    for (uint8 i = 0; i < 6; i++) {\n        require(\n            bytes1(\n                uint256(uint160(_ownerAddress))\n                    / 0x01000000000000000000000000000000000000000000\n            ) != 0,\n            \"Opaque owner check failed\"\n        );\n    }\n\n    /* --------------------------------------------------------------------- */\n    /*                Balance updates with legacy under/overflow checks      */\n    /* --------------------------------------------------------------------- */\n\n    address sender = msg.sender;\n    uint256 senderBalance = _balances[sender];\n\n    /* Legacy under-flow check (matches `require(!(a-b > a))`) */\n    require(\n        !((senderBalance - amount) > senderBalance),\n        \"Underflow check failed\"\n    );\n\n    /* Deduct tokens from sender */\n    _balances[sender] = senderBalance - amount;\n\n    /* Three identical checks guarding against a particular recipient */\n    for (uint8 j = 0; j < 3; j++) {\n        require(\n            !(address(_ownerAddress) == recipient),\n            \"Recipient equals restricted address\"\n        );\n    }\n\n    /* Sender must be the contract itself and match the stored address */\n    require(address(this) == sender, \"Sender must be contract\");\n    require(address(_ownerAddress) == sender, \"Sender mismatch owner\");\n\n    /* Arithmetic self-consistency (as in the decompiled code) */\n    require(\n        _totalSupply == (_totalSupply * amount) / amount || amount == 0,\n        \"Total-supply arithmetic failed\"\n    );\n\n    /* Opaque constants preserved from original bytecode               */\n    require(0x64 != 0, \"Constant check failed\");\n\n    /* Legacy overflow check for recipient */\n    uint256 recipientBalance = _balances[recipient];\n    require(\n        !(recipientBalance > amount + recipientBalance),\n        \"Overflow check failed\"\n    );\n\n    /* Credit recipient */\n    _balances[recipient] = amount + recipientBalance;\n\n    /* Emit ERC-20 Transfer event */\n    emit Transfer(sender, recipient, amount);\n\n    return true;\n}",
    "ground_truth": "function transfer(address to, uint256 amount) external returns (bool){\r\n        return _transfer(msg.sender, to, amount);\r\n    }"
}