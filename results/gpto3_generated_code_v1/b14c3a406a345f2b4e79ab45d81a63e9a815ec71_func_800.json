{
    "contract_address": "0xB14c3a406A345F2b4E79aB45d81A63E9a815ec71",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_aa) {\n            if (!(store_aa) == ((store_aa / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_aa / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_aa / 0x02;\n                if (store_aa) {\n                    if (!(store_aa) == ((store_aa / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_aa / 0x02) {\n                            if (0x1f < (store_aa / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_aa / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    if (!0 > var_c.length) {\n                                        uint256 var_g = 0;\n                                        return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                        return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory tokenSymbol) {\n    assembly {\n        /* \n            The original decompiler referred to \u201cstore_aa\u201d;  \n            we treat that as the dedicated storage slot that keeps\n            the ERC-20/721 symbol string. \n        */\n        let SYMBOL_SLOT := 0xaa\n\n        /* ----------------------------------------------------- */\n        /*               Load packed storage value               */\n        /* ----------------------------------------------------- */\n        let packed := sload(SYMBOL_SLOT)\n\n        /* ----------------------------------------------------- */\n        /*         Prepare memory for the return value           */\n        /* ----------------------------------------------------- */\n        let memPtr := mload(0x40)          // free memory pointer\n        /*  result will ultimately start at memPtr              */\n\n        /* ----------------------------------------------------- */\n        /*    Check if string is \u201cshort\u201d (\u2264 31 bytes, LSB = 1)   */\n        /* ----------------------------------------------------- */\n        switch and(packed, 1)\n        case 1 {\n            /* ---------------- Short string path --------------- */\n            /* length is stored in the final byte, shifted right 1 */\n            let length := shr(1, and(packed, 0xFF))\n\n            /* store length */\n            mstore(memPtr, length)\n\n            /* isolate the actual data bytes (everything except the final byte) */\n            /* the data is already left-aligned in the word; we simply store it */\n            mstore(add(memPtr, 0x20), shr(8, packed))\n\n            /* advance free-memory pointer (round up to word boundary) */\n            mstore(0x40, add(memPtr, add(0x20, and(add(length, 0x1F), not(0x1F)))))\n\n            tokenSymbol := memPtr\n        }\n        default {\n            /* ---------------- Long string path ---------------- */\n            /* storage layout:\n               keccak256(SYMBOL_SLOT)       -> length (bytes)\n               keccak256(SYMBOL_SLOT) + 1   -> first 32 data bytes\n               keccak256(SYMBOL_SLOT) + 2   -> second 32 data bytes \u2026\n            */\n\n            /* compute keccak256(SYMBOL_SLOT) */\n            mstore(0x00, SYMBOL_SLOT)\n            let dataSlot := keccak256(0x00, 0x20)\n\n            /* read length */\n            let length := sload(dataSlot)\n\n            /* store length at the head of return buffer */\n            mstore(memPtr, length)\n\n            /* copy string data from storage to memory */\n            let words := div(add(length, 31), 32)          // number of 32-byte words\n            let dest  := add(memPtr, 0x20)                 // first data word position\n\n            for { let i := 0 } lt(i, words) { i := add(i, 1) } {\n                mstore(add(dest, mul(i, 0x20)), sload(add(dataSlot, add(i, 1))))\n            }\n\n            /* advance free-memory pointer */\n            mstore(0x40, add(dest, mul(words, 0x20)))\n\n            tokenSymbol := memPtr\n        }\n    }\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }"
}