{
    "contract_address": "0xbaAAc69029Fd7edcbcf3222Ec5831aFB9Cd832b8",
    "heimdall_input": "function setUniSwapPair(address arg0) public payable {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender) == (address(owner / 0x0100)), \"Not the contract owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x16;\n        var_e = 0x4e6f742074686520636f6e7472616374206f776e657200000000000000000000;\n        uniSwapPair = (address(arg0) * 0x01) | (uint96(uniSwapPair));\n    }",
    "llm_output": "pragma solidity ^0.8.0;\n\ncontract DecompiledContract {\n    address public owner;\n    address public uniSwapPair;\n\n    /**\n     * The logic in this function is preserved exactly as it appeared in the\n     * decompiled output. Some operations may appear redundant or odd.\n     */\n    function setUniSwapPair(address newPair) public payable {\n        // Redundant self\u2013equality check kept to preserve original logic\n        require(newPair == newPair);\n\n        // Owner check reproduced from decompiled code (owner divided by 0x0100)\n        require(\n            msg.sender == address(uint160(owner) / 0x0100),\n            \"Not the contract owner\"\n        );\n\n        // Bit-wise OR combining the new pair and the existing stored value\n        uniSwapPair = address(\n            uint160(newPair) | uint160(uint96(uint160(uniSwapPair)))\n        );\n    }\n}",
    "ground_truth": "function setUniSwapPair(address _pair) external onlyOwner {\r\n        uniSwapPair = _pair;\r\n    }"
}