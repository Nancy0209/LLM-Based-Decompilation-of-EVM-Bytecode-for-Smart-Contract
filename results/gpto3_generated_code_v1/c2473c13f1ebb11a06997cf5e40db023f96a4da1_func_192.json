{
    "contract_address": "0xc2473C13f1Ebb11A06997Cf5e40dB023F96A4DA1",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_h[var_a]);\n        store_g = 0x01000000000000000000000000000000000000000000 | (uint248(store_g));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_f), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_f);\n        address var_b = keccak256(var_a);\n        storage_map_h[var_a] = storage_map_h[var_a];\n        address var_k = storage_map_h[var_a];\n        emit Approval(address(this), address(store_f), storage_map_h[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_h[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_f).code.length);\n        (bool success, bytes memory ret0) = address(store_f).Unresolved_791ac947(var_l); // call\n        store_g = uint248(store_g);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // Original authorization check\n    require(\n        msg.sender == address(uint160(_transferDelayEnabled / 0x0100)),\n        \"Unauthorized caller\"\n    );\n\n    // ------------------------------------------------------------------\n    // Variable initialisation \u2011 preserved from decompiled logic\n    // ------------------------------------------------------------------\n    address currentContract = address(this);\n    uint8   _dummyFlag      = 0x01;\n\n    // Equivalent to: require(!storage_map_h[var_a]);\n    require(!_flagMap[currentContract], \"Flag already set\");\n\n    // Equivalent to: store_g = 0x0100.. | uint248(store_g);\n    _statusFlag = uint248(_statusFlag) | 0x01000000000000000000000000000000000000000000;\n\n    uint8 _anotherDummy = 0x02;\n\n    uint256 tempCounter = 0;\n    tempCounter += 0x60;\n\n    // Copy calldata[4..68] just to replicate side-effects\n    bytes memory calldataSlice = new bytes(64);\n    assembly {\n        calldatacopy(add(calldataSlice, 32), 4, 64)\n    }\n\n    // ------------------------------------------------------------------\n    // External staticcall to router.WETH()\n    // ------------------------------------------------------------------\n    (bool success, bytes memory wethRet) =\n        address(_router).staticcall(abi.encodeWithSignature(\"WETH()\"));\n    require(success, \"WETH() staticcall failed\");\n\n    tempCounter += (wethRet.length + 0x1f);\n\n    // Preserved odd check from decompiled code\n    require(\n        !(((tempCounter + wethRet.length) - tempCounter) < 0x20),\n        \"ERC20: approve to the zero address\"\n    );\n\n    // The following decompiler artefact cannot be represented in valid Solidity;\n    // it would always fail at runtime, so we explicitly revert here.\n    require(false, \"Decompiler artifact\");\n\n    // ------------------------------------------------------------------\n    // The code below is unreachable but retained to mirror original flow\n    // ------------------------------------------------------------------\n    currentContract  = address(this);\n    _dummyFlag       = 0x02;\n\n    address routerAddr = _router;\n\n    _flagMap[currentContract] = _flagMap[currentContract];\n    emit Approval(currentContract, routerAddr, _flagMap[currentContract]);\n\n    require(routerAddr.code.length > 0, \"Router code length zero\");\n    (success, ) = routerAddr.call(\n        abi.encodeWithSelector(0x791ac947, _flagMap[currentContract])\n    );\n\n    _statusFlag = uint248(_statusFlag);\n\n    require(address(this).balance == 0, \"Contract balance non-zero\");\n\n    (success, ) = address(uint160(_transferDelayEnabled / 0x0100)).call{\n        value: address(this).balance\n    }(\"\");\n\n    // Second unconditional revert preserved from original artefacts\n    require(false, \"Decompiler artifact\");\n}",
    "ground_truth": "function manualSwap() external {\\r\\n        require(_msgSender()==_taxWallet);\\r\\n        uint256 tokenBalance=balanceOf(address(this));\\r\\n        if(tokenBalance>0){\\r\\n          swapTokensForEth(tokenBalance);\\r\\n        }\\r\\n        uint256 ethBalance=address(this).balance;\\r\\n        if(ethBalance>0){\\r\\n          sendETHToFee(ethBalance);\\r\\n        }\\r\\n    }"
}