{
    "contract_address": "0xD551F2Bd835B49DB742f0382d441Ede9C7C1Ee30",
    "heimdall_input": "function Wallet_Update_Dev(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        noBlackList = (address(arg0) * 0x0100) | (uint96(noBlackList));\n        address var_f = address(noBlackList / 0x0100);\n        var_g = 0x03;\n        storage_map_p[var_f] = (0x01 * 0x01) | (uint248(storage_map_p[var_f]));\n    }",
    "llm_output": "function updateDeveloperWallet(address newDeveloperWallet) public {\n    // Original no-op check retained for logical fidelity\n    require(newDeveloperWallet == address(newDeveloperWallet));\n\n    // Ownership check (kept exactly as decompiled, including the pointless division by 1)\n    require(address(owner / 0x01) == msg.sender, \"Ownable: caller is not the owner\");\n\n    // The following three local variables exist in the decompiled byte-code but have no\n    // effect on state; they are preserved here to maintain 1:1 semantics.\n    bytes32 _errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 _twentyBytes      = 0x20;\n    bytes32 _errorMessage   = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n\n    // Pack the new developer wallet address into the lower 248 bits of `noBlackList`\n    noBlackList = (uint256(uint160(newDeveloperWallet)) * 0x0100) | uint96(noBlackList);\n\n    // Retrieve the stored address (shift right by 8 bits) for flag manipulation\n    address developerWallet = address(uint160(noBlackList / 0x0100));\n\n    // Another decompiler artefact; preserved for byte-level fidelity\n    uint256 _three = 0x03;\n\n    // Set the least significant bit in the mapping slot corresponding to the wallet\n    walletFlags[developerWallet] = (0x01 * 0x01) | uint248(walletFlags[developerWallet]);\n}",
    "ground_truth": "function Wallet_Update_Dev(address payable wallet) public onlyOwner() {\r\n        Wallet_Dev = wallet;\r\n        _isExcludedFromFee[Wallet_Dev] = true;\r\n    }"
}