{
    "contract_address": "0xb4F77c4Cb758aeA0364f50892D20E267be9805c4",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_a >> 0x01;\n                if (store_a) {\n                    if (store_a - ((store_a >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a >> 0x01) {\n                            if (0x1f < (store_a >> 0x01)) {\n                                var_a = 0x08;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory tokenName) {\n    assembly {\n        // Load the storage word that encodes the string.\n        // For short strings (<=31 bytes) the whole string is stored in the slot itself.\n        // For long strings  (>31 bytes) the slot stores (length << 1) | 1 and the data\n        // is stored starting at keccak256(slot).\n        let meta := sload(_name.slot)\n\n        // If the least-significant bit is zero we have a short string, otherwise a long string\n        switch and(meta, 1)\n        case 0 {\n            // ---------------------------\n            // Short string branch (\u2264 31 B)\n            // ---------------------------\n            let len := shr(1, and(meta, 0xFF))          // length = (low byte) >> 1\n            let ptr := mload(0x40)                      // Get free memory pointer\n            mstore(ptr, len)                            // Store length\n\n            // Store the actual string bytes (shift right to drop the length byte)\n            mstore(add(ptr, 0x20), shr(8, meta))\n\n            // Update the free memory pointer\n            mstore(0x40, add(ptr, 0x40))\n\n            tokenName := ptr\n        }\n        default {\n            // --------------------------\n            // Long string branch (> 31 B)\n            // --------------------------\n            let len := shr(1, meta)                     // length = meta >> 1\n            let dataSlot := keccak256(_name.slot, 1)    // First slot that holds string data\n\n            let ptr := mload(0x40)                      // Get free memory pointer\n            mstore(ptr, len)                            // Store length\n\n            // Copy string data word-by-word from storage to memory\n            let offset := 0\n            for { } lt(offset, len) { offset := add(offset, 0x20) } {\n                mstore(add(ptr, add(0x20, offset)), sload(add(dataSlot, div(offset, 0x20))))\n            }\n\n            // Move the free memory pointer forward (word-aligned)\n            mstore(0x40, add(add(ptr, 0x20), mul(div(add(len, 0x1f), 0x20), 0x20)))\n\n            tokenName := ptr\n        }\n    }\n}",
    "ground_truth": "function name() public view override returns (string memory) {\r\n        return name_;\r\n    }"
}