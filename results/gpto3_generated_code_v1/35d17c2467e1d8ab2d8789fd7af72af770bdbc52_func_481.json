{
    "contract_address": "0x35D17C2467E1D8aB2d8789FD7af72af770BDBc52",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public payable returns (bool) {\n        require(address(msg.sender));\n        require(address(arg0));\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(msg.sender);\n        require(address(0x5491305204daca75317a0bc8c332dd61dbb77bc8).code.length);\n        (bool success, bytes memory ret0) = address(0x5491305204daca75317a0bc8c332dd61dbb77bc8).Unresolved_70a08231(var_b); // staticcall\n        require(!(ret0.length < 0x20), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        address var_c = msg.sender;\n        var_d = 0x06;\n        require(!storage_map_b[var_c], \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!(var_e.length > 0), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_e = 0x60 + var_e;\n        var_a = 0x26;\n        var_f = this.code[3161:3199];\n        var_c = address(msg.sender);\n        var_d = 0x04;\n        require(!(arg1 > storage_map_b[var_c]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_g = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_h = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        uint256 var_i = var_e.length;\n        require(!(bytes1(var_e.length)), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_j = (~((0x0100 ** (0x20 - (bytes1(var_e.length)))) - 0x01)) & (var_k);\n        var_c = address(msg.sender);\n        var_d = 0x04;\n        storage_map_b[var_c] = storage_map_b[var_c] - arg1;\n        var_c = address(arg0);\n        var_d = 0x04;\n        require(!((arg1 + storage_map_b[var_c]) < storage_map_b[var_c]), \"SafeMath: addition overflow\");\n        var_g = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_h = 0x20;\n        var_i = 0x1b;\n        var_l = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_c = address(arg0);\n        var_d = 0x04;\n        storage_map_b[var_c] = arg1 + storage_map_b[var_c];\n        uint256 var_g = arg1;\n        emit Transfer(address(msg.sender), address(arg0), arg1);\n        var_g = 0x01;\n        return 0x01;\n        var_e = 0x60 + var_e;\n        var_a = 0x26;\n        var_f = this.code[3161:3199];\n        require(!(arg1 > storage_map_b[var_c]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_g = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_h = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        var_i = var_e.length;\n        require(!(bytes1(var_e.length)), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = (~((0x0100 ** (0x20 - (bytes1(var_e.length)))) - 0x01)) & (var_k);\n        if (!storage_map_b[var_c]) {\n        }\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        var_m = 0x23;\n        var_n = this.code[3092:3127];\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = (0x20 + (0x04 + var_e)) - (0x04 + var_e);\n        var_m = 0x25;\n        var_n = this.code[3239:3276];\n    }",
    "llm_output": "pragma solidity ^0.8.0;\n\ninterface IExternalToken {\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract DecompiledRefined {\n    mapping(address => uint256) private _balances;      // storage_map_b  \n    mapping(address => bool)    private _flagged;       // slot 6 in original code\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * Semantically-refined version of the decompiled `transfer` function.\n     * The logic is preserved exactly as observed in the bytecode.\n     */\n    function transfer(address to, uint256 amount) public returns (bool) {\n        /* --------------------------------- */\n        /*  1. Sanity-checks on addresses    */\n        /* --------------------------------- */\n        require(msg.sender != address(0), \"\");  // require(address(msg.sender))\n        require(to         != address(0), \"\");  // require(address(arg0))\n\n        /* ------------------------------------------------------- */\n        /*  2. Mysterious external static-call (kept verbatim)    */\n        /* ------------------------------------------------------- */\n        address externalContract = 0x5491305204dAca75317A0bC8c332dd61dBb77bC8;\n        require(externalContract.code.length > 0, \"\");\n\n        (bool ok, bytes memory ret) = externalContract.staticcall(\n            abi.encodeWithSelector(IExternalToken.balanceOf.selector, msg.sender)\n        );\n        require(ret.length >= 32, \"\");  // require(!(ret0.length < 0x20))\n        require(ok, \"\");                // matches revert-behaviour of original\n\n        /* ----------------------------------------- */\n        /*  3. Black-list style check (slot 6)       */\n        /* ----------------------------------------- */\n        require(!_flagged[msg.sender], \"\");\n\n        /* ----------------------------------------------------------------------- */\n        /*  4. Decompiled artefact \u2013 keep exact conditional form (always passes)   */\n        /* ----------------------------------------------------------------------- */\n        bytes memory _placeholder = new bytes(0);\n        require(!(_placeholder.length > 0), \"\");\n\n        /* ------------------------------------ */\n        /*  5. Balance accounting & events      */\n        /* ------------------------------------ */\n        require(amount <= _balances[msg.sender], \"\");                 // !(arg1 > storage_map_b[msg.sender])\n        require(_balances[to] + amount >= _balances[to], \"SafeMath: addition overflow\");\n\n        _balances[msg.sender] -= amount;\n        _balances[to]          += amount;\n\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n      _transfer(msg.sender, recipient, amount);\\r\\n      return true;\\r\\n    }"
}