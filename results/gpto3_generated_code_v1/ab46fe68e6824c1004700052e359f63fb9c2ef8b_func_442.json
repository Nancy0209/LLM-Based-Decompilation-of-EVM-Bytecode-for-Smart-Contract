{
    "contract_address": "0xaB46fe68E6824c1004700052e359F63FB9C2EF8b",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_c) {\n            if (store_c - ((store_c / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_c / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_c / 0x02;\n                if (store_c) {\n                    if (store_c - ((store_c / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_c / 0x02) {\n                            if (0x1f < (store_c / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_c / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory tokenSymbol) {\n    assembly {\n        // Storage slot that holds the `symbol` string (ex-`store_c` in the decompiled code)\n        let slot := 2\n        let data := sload(slot)\n\n        // If the lowest bit is 0, the string is stored directly in the slot (\u2264 31 bytes).\n        switch and(data, 1)\n        case 0 {\n            // Extract length: the least-significant byte stores (length * 2).\n            let length := shr(1, and(data, 0xFF))\n\n            // Prepare memory for the return value.\n            tokenSymbol := mload(0x40)          // Get free-memory pointer.\n            mstore(tokenSymbol, length)         // Store length.\n\n            // Move the string data to memory (drop the length byte).\n            // `shr(8, data)` discards the least-significant byte that held the length flag.\n            mstore(add(tokenSymbol, 0x20), shr(8, data))\n\n            // Advance free-memory pointer.\n            mstore(0x40, add(add(tokenSymbol, 0x20), 0x20))\n        }\n        default {\n            // For long strings (> 31 bytes) the slot holds a pointer.\n            // The actual data starts at keccak256(slot) + 1.\n            mstore(0x00, slot)\n            let base := keccak256(0x00, 0x20)\n\n            // Load length (first word at `base`).\n            let length := sload(base)\n\n            tokenSymbol := mload(0x40)          // Get free-memory pointer.\n            mstore(tokenSymbol, length)         // Store length.\n\n            // Number of 32-byte words to copy.\n            let words := div(add(length, 31), 32)\n\n            // Copy each 32-byte word from storage to memory.\n            for { let i := 0 } lt(i, words) { i := add(i, 1) } {\n                mstore(\n                    add(tokenSymbol, add(0x20, mul(i, 0x20))),\n                    sload(add(base, add(i, 1)))\n                )\n            }\n\n            // Advance free-memory pointer.\n            mstore(0x40, add(add(tokenSymbol, 0x20), mul(words, 0x20)))\n        }\n    }\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }"
}