{
    "contract_address": "0xF47024a2e10D77927767cBE5aADf5F8BB02782c9",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public payable returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(arg1 == arg1);\n        require(address(msg.sender) - 0, \"Value exceeds balance\");\n        require(address(arg0) - 0, \"Value exceeds balance\");\n        require(!(!(address(msg.sender)) == (address(owner / 0x01))), \"Value exceeds balance\");\n        address var_a = address(msg.sender);\n        var_b = 0x97;\n        require(!(!bytes1(storage_map_d[var_a] / 0x01)), \"Value exceeds balance\");\n        require(!(!bytes1(storage_map_d[var_a] / 0x01)), \"Value exceeds balance\");\n        var_a = address(msg.sender);\n        var_b = 0x65;\n        require(!(storage_map_d[var_a] < arg1), \"Value exceeds balance\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x15;\n        var_g = 0x56616c756520657863656564732062616c616e63650000000000000000000000;\n        if (address(msg.sender) == (address(owner / 0x01))) {\n            var_a = address(msg.sender);\n            var_b = 0x97;\n            if (storage_map_d[var_a] / 0x01) {\n                if (storage_map_d[var_a] / 0x01) {\n                    var_a = address(msg.sender);\n                    var_b = 0x65;\n                    require(bytes1(storage_map_d[var_a] / 0x01));\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_h = 0x11;\n                    var_a = address(msg.sender);\n                    var_b = 0x65;\n                    storage_map_d[var_a] = storage_map_d[var_a] - arg1;\n                    var_a = address(arg0);\n                    var_b = 0x65;\n                    require(bytes1(storage_map_d[var_a] / 0x01));\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_h = 0x11;\n                    var_a = address(arg0);\n                    var_b = 0x65;\n                    storage_map_d[var_a] = storage_map_d[var_a] + arg1;\n                    uint256 var_c = arg1;\n                    emit Transfer(address(msg.sender), address(arg0), arg1);\n                    var_c = 0x01;\n                    return 0x01;\n                    require(!(storage_map_d[var_a] - arg1) > storage_map_d[var_a]);\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_h = 0x11;\n                    require(!storage_map_d[var_a] > (storage_map_d[var_a] + arg1));\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_h = 0x12;\n                    require(!(arg1) & (fee > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1)));\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_h = 0x11;\n                    require(0x64);\n                }\n                require(!(arg1 - ((arg1 * fee) / 0x64)) > arg1);\n            }\n        }\n        var_a = address(msg.sender);\n        var_b = 0x98;\n        require(!bytes1(storage_map_d[var_a] / 0x01));\n        require(!numbers > 0);\n        require(!arg1 > numbers);\n        require(!(bytes1(reward / 0x01)), \"Error\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x05;\n        var_g = 0x4572726f72000000000000000000000000000000000000000000000000000000;\n        require(!limits > 0);\n        var_a = address(msg.sender);\n        var_b = 0x65;\n        require(!storage_map_d[var_a] > limits);\n        if (!autoCoal / 0x01) {\n        }\n        if (address(msg.sender) == (address(owner / 0x01))) {\n            if (address(msg.sender) == (address(owner / 0x01))) {\n            }\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x23;\n        var_g = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_i = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_i = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public payable returns (bool) {\n    /* -------------------------------------------------------------------------- */\n    /*                          Tautological/Identity Checks                      */\n    /* -------------------------------------------------------------------------- */\n    require(recipient == address(recipient), \"\");  // decompiler artefact\n    require(amount == amount, \"\");                // decompiler artefact\n\n    /* -------------------------------------------------------------------------- */\n    /*                               Basic Validations                            */\n    /* -------------------------------------------------------------------------- */\n    require(msg.sender != address(0),                 \"Value exceeds balance\"); // address(msg.sender) - 0\n    require(recipient  != address(0),                 \"Value exceeds balance\"); // address(recipient)  - 0\n    require(true,                                      \"Value exceeds balance\"); // placeholder for opaque decompiled logic\n\n    /* -------------------------------------------------------------------------- */\n    /*                              Balance Assertions                            */\n    /* -------------------------------------------------------------------------- */\n    require(balances[msg.sender] != 0,                \"Value exceeds balance\"); // !(!bytes1(balance))\n    require(balances[msg.sender] != 0,                \"Value exceeds balance\"); // duplicate check\n    require(balances[msg.sender] >= amount,           \"Value exceeds balance\"); // !(balance < amount)\n\n    /* -------------------------------------------------------------------------- */\n    /*                          Owner-Specific Transfer Path                      */\n    /* -------------------------------------------------------------------------- */\n    if (msg.sender == owner) {\n        if (balances[msg.sender] != 0) {\n            if (balances[msg.sender] != 0) {\n\n                require(balances[msg.sender] != 0,     \"Value exceeds balance\"); // bytes1(balance) check\n\n                /* -------------------------- SafeMath Mirror -------------------------- */\n                require(\n                    balances[msg.sender] - amount <= balances[msg.sender],\n                    \"SafeMath: subtraction overflow\"\n                );\n\n                balances[msg.sender] = balances[msg.sender] - amount;\n\n                require(balances[recipient] != 0,       \"Value exceeds balance\"); // bytes1(balance) check\n\n                require(\n                    balances[recipient] + amount >= balances[recipient],\n                    \"SafeMath: addition overflow\"\n                );\n\n                balances[recipient] = balances[recipient] + amount;\n\n                /* ---------- Multiplication Overflow Check (decompiler artefact) ------- */\n                require(\n                    amount == 0 || fee <= type(uint256).max / amount,\n                    \"SafeMath: multiplication overflow\"\n                );\n\n                require(100 != 0, \"Value exceeds balance\"); // literal 0x64 check\n\n                emit Transfer(msg.sender, recipient, amount);\n                return true;\n            }\n\n            /* ---------------------------------------------------------------------- */\n            /*                 Underflow Check for Fee Deduction Path                 */\n            /* ---------------------------------------------------------------------- */\n            require(!(amount - ((amount * fee) / 100) > amount), \"SafeMath: subtraction overflow\");\n        }\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                            Miscellaneous Checks                            */\n    /* -------------------------------------------------------------------------- */\n    require(!(balances[msg.sender] != 0),             \"Value exceeds balance\"); // !bytes1(balance)\n    require(!(numbers > 0),                            \"\");                     // !numbers > 0\n    require(!(amount  > numbers),                      \"\");                     // !amount  > numbers\n    require(bytes1(uint8(reward)) == bytes1(0),        \"Error\");                // !(bytes1(reward))\n    require(!(limits  > 0),                            \"\");                     // !limits > 0\n    require(!(balances[msg.sender] > limits),          \"Value exceeds balance\");\n\n    /* --------------------------------- No-Op ----------------------------------- */\n    if (!autoCoal) {\n        // intentionally left blank (decompiled no-op)\n    }\n\n    if (msg.sender == owner) {\n        if (msg.sender == owner) {\n            // intentionally left blank (decompiled no-op)\n        }\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                        Final Revert (decompiler artefact)                  */\n    /* -------------------------------------------------------------------------- */\n    revert(\"ERC20: transfer from/to the zero address\");\n}",
    "ground_truth": "function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}"
}