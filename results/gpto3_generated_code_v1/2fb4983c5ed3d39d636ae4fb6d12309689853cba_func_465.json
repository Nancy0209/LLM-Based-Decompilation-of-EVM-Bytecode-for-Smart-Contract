{
    "contract_address": "0x2FB4983c5Ed3d39d636aE4fb6D12309689853cbA",
    "heimdall_input": "function openTrading() public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(store_g / 0x010000000000000000000000000000000000000000)), \"Trading is already open\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x17;\n        var_d = 0x54726164696e6720697320616c7265616479206f70656e000000000000000000;\n        store_f = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_f));\n        require(0x09, \"ERC20: approve to the zero address\");\n        require((0x01 == 0x01) | !0x3b9aca00, \"ERC20: approve to the zero address\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(0x7a250d5630b4cf539739df2c5dacb4c659f2488d, \"ERC20: approve to the zero address\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x22;\n        var_d = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_g = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        address var_e = address(this);\n        var_h = 0x02;\n        var_e = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n        address var_h = keccak256(var_e);\n        storage_map_n[var_e] = 0x3b9aca00;\n        var_a = 0x3b9aca00;\n        emit Approval(address(this), 0x7a250d5630b4cf539739df2c5dacb4c659f2488d, 0x3b9aca00);\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f / 0x01).factory(var_b); // staticcall\n        uint256 var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x20);\n        require(var_i.length == (address(var_i.length)));\n        var_j = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f / 0x01).WETH(var_c); // staticcall\n        var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x20);\n        require(var_i.length == (address(var_i.length)));\n        var_k = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_d = address(this);\n        uint256 var_g = address(var_i.length);\n        (bool success, bytes memory ret0) = address(var_i.length).Unresolved_c9c65396(var_d); // call\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x24;\n        var_d = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_g = 0x7265737300000000000000000000000000000000000000000000000000000000;\n        if (0x0a) {\n            if (0x0a == 0x01) {\n                if (0x0a == 0x02) {\n                    if (!0x09 > 0xff) {\n                        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_f = 0x11;\n                        if (!((0x0a < 0x0b) & (0x09 < 0x4e)) | ((0x0a < 0x0133) & (0x09 < 0x20))) {\n                            if (!0x09 > 0x01) {\n                                if (!0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                    var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                    var_f = 0x11;\n                                    if (!0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        var_f = 0x11;\n                                        if (!0x01) {\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function openTrading() public {\n    /* --------------------------------------------------------------------- */\n    /*  Ownable check                                                        */\n    /* --------------------------------------------------------------------- */\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    /* --------------------------------------------------------------------- */\n    /*  Trading status check                                                 */\n    /* --------------------------------------------------------------------- */\n    require(!tradingOpen, \"Trading is already open\");\n\n    /* --------------------------------------------------------------------- */\n    /*  Initialise Uniswap-V2 router address (bit-wise OR kept from bytecode)*/\n    /* --------------------------------------------------------------------- */\n    address _previousRouter = address(uniswapV2Router);\n    uniswapV2Router = IUniswapV2Router02(\n        address(\n            uint160(\n                uint256(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) |\n                    uint256(uint96(uint160(_previousRouter)))\n            )\n        )\n    );\n\n    /* --------------------------------------------------------------------- */\n    /*  Redundant requires preserved from original byte-code                 */\n    /* --------------------------------------------------------------------- */\n    require(uint256(0x09) != 0, \"ERC20: approve to the zero address\");\n    require(((0x01 == 0x01) | !(0x3b9aca00 != 0)), \"ERC20: approve to the zero address\");\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(address(uniswapV2Router) != address(0), \"ERC20: approve to the zero address\");\n\n    /* --------------------------------------------------------------------- */\n    /*  Grant router allowance                                               */\n    /* --------------------------------------------------------------------- */\n    uint256 maxApproval = 1_000_000_000; // 0x3b9aca00\n    _allowances[address(this)][address(uniswapV2Router)] = maxApproval;\n    emit Approval(address(this), address(uniswapV2Router), maxApproval);\n\n    /* --------------------------------------------------------------------- */\n    /*  Retrieve factory address                                             */\n    /* --------------------------------------------------------------------- */\n    (bool successFactory, bytes memory factoryData) = address(uniswapV2Router).staticcall(\n        abi.encodeWithSelector(bytes4(0xC45A0155)) // factory()\n    );\n    require(successFactory, \"openTrading: factory call failed\");\n    require(factoryData.length == 32, \"openTrading: invalid factory data length\");\n    address factory;\n    assembly {\n        factory := mload(add(factoryData, 32))\n    }\n\n    /* --------------------------------------------------------------------- */\n    /*  Retrieve WETH address                                                */\n    /* --------------------------------------------------------------------- */\n    (bool successWETH, bytes memory wethData) = address(uniswapV2Router).staticcall(\n        abi.encodeWithSelector(bytes4(0xAD5C4648)) // WETH()\n    );\n    require(successWETH, \"openTrading: WETH call failed\");\n    require(wethData.length == 32, \"openTrading: invalid WETH data length\");\n    address weth;\n    assembly {\n        weth := mload(add(wethData, 32))\n    }\n\n    /* --------------------------------------------------------------------- */\n    /*  Create the Uniswap pair                                              */\n    /* --------------------------------------------------------------------- */\n    uniswapV2Pair = IUniswapV2Factory(factory).createPair(address(this), weth);\n\n    /* --------------------------------------------------------------------- */\n    /*  Finalise                                                             */\n    /* --------------------------------------------------------------------- */\n    tradingOpen = true;\n\n    /* --------------------------------------------------------------------- */\n    /*  Decompiler artefact \u2013 retained but functionally inert                */\n    /* --------------------------------------------------------------------- */\n    if (true) {\n        if (false) {\n            if (false) {\n                if (!(9 > 0xff)) {\n                    if (false) {\n                        if (!(1 > type(uint256).max)) {\n                            if (!(10 > type(uint256).max)) {\n                                if (!true) {\n                                    /* no-op */\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "ground_truth": "function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"Trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }"
}