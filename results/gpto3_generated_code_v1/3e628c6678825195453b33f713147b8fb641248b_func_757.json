{
    "contract_address": "0x3e628c6678825195453B33f713147B8fb641248b",
    "heimdall_input": "function updateMaxWalletAmount(uint256 arg0) public view {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require((totalSupply == ((totalSupply * 0x03) / 0x03)) | !0x03);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x03e8);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n    }",
    "llm_output": "function updateMaxWalletAmount(uint256 /* newMaxWalletAmount */) external view {\n    // Only the contract owner can call this function\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    // Decompiler-derived integrity check (effectively always true unless overflow occurs)\n    uint256 supply = totalSupply();\n    require(supply == (supply * 3) / 3, \"Decompiler artifact\");\n\n    // Redundant check preserved from original bytecode\n    require(true, \"Decompiler artifact\");\n}",
    "ground_truth": "function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 3 / 1000)/1e18, \"Cannot set max wallet amount lower than 0.3%\");\r\n        maxWalletAmount = newNum * (10**18);\r\n        emit UpdatedMaxWalletAmount(maxWalletAmount);\r\n    }"
}