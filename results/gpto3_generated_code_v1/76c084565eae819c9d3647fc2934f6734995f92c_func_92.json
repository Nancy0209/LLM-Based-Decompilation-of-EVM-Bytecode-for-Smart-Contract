{
    "contract_address": "0x76c084565eAE819c9D3647FC2934f6734995f92C",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (store_a - ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x08;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory) {\n    assembly {\n        /* --------------------------------------------------------------------- */\n        /*  Step-1 : Load the raw `name` data length from storage slot #0        */\n        /* --------------------------------------------------------------------- */\n        let rawLen := sload(0)\n\n        /* If no data is present, immediately return an empty string.           */\n        if iszero(rawLen) {\n            mstore(0x00, 0x20)      /* offset */\n            mstore(0x20, 0x00)      /* length */\n            return(0x00, 0x40)\n        }\n\n        /* --------------------------------------------------------------------- */\n        /*  Step-2 : First bounds check (kept exactly as in the decompiled code) */\n        /* --------------------------------------------------------------------- */\n        if sub(rawLen, lt(div(rawLen, 2), 0x20)) {\n            /* Panic(0x22) \u2014 same behaviour as original byte-code               */\n            mstore(0x00, 0x4e487b71)\n            mstore(0x04, 0x22)\n            revert(0x00, 0x24)\n        }\n\n        /* --------------------------------------------------------------------- */\n        /*  Step-3 : Prepare helper variables used by the subsequent branches    */\n        /* --------------------------------------------------------------------- */\n        let memOffset := add(0x20, mul(div(add(0x1f, div(rawLen, 2)), 0x20), 0x20))\n        let halfLen   := div(rawLen, 2)\n\n        /* --------------------------------------------------------------------- */\n        /*  Step-4 : Replicate the nested checks from the decompiled output      */\n        /* --------------------------------------------------------------------- */\n        if rawLen {\n            if sub(rawLen, lt(halfLen, 0x20)) {\n                mstore(0x00, 0x4e487b71)\n                mstore(0x04, 0x22)\n                revert(0x00, 0x24)\n            }\n\n            if iszero(halfLen) {\n                if gt(halfLen, 0x1f) {\n                    /* The original byte-code accessed storage slot #8 here.     */\n                    let _ := sload(0x08)\n\n                    if gt(add(add(0x20, memOffset), halfLen), add(0x20, add(0x20, memOffset))) {\n                        let offset := sub(add(memOffset, 0x20), memOffset)\n                        let length := mload(memOffset)\n\n                        /* Return using the exact ABI layout seen in the output  */\n                        mstore(0x00, offset)\n                        mstore(0x20, length)\n                        return(0x00, 0x40)\n                    }\n                }\n            }\n        }\n\n        /* --------------------------------------------------------------------- */\n        /*  Fallback \u2014 this path should be unreachable in the original logic     */\n        /* --------------------------------------------------------------------- */\n        revert(0x00, 0x00)\n    }\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }"
}