{
    "contract_address": "0x620d4B40A1c80D62129bb195e1701e501F9a5d3b",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (ownerf) {\n            if (!(ownerf) == ((ownerf >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (ownerf >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = ownerf >> 0x01;\n                if (ownerf) {\n                    if (!(ownerf) == ((ownerf >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!ownerf >> 0x01) {\n                            if (0x1f < (ownerf >> 0x01)) {\n                                var_a = 0x02;\n                                var_e = storage_map_n[var_a];\n                                if ((0x20 + var_c) + (ownerf >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    if (!0 > var_c.length) {\n                                        uint256 var_g = 0;\n                                        return abi.encodePacked(0x20, var_c.length);\n                                        return abi.encodePacked(0x20, var_c.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory) {\n    /*\n        The original decompiled variable names were meaningless.\n        `ownerf`    -> assumed on-chain word that encodes the string\u2019s length & pointer\n        `var_c`     -> `calculatedOffset`\n        `var_e/f/g` -> folded into clearer locals\n        `storage_map_n` -> some on-chain mapping we must not alter\n    */\n\n    uint256 storedDataWord = ownerf;  // original `ownerf`\n\n    if (storedDataWord != 0) {\n        // Re-create the panic-style check found in the decompiled output\n        if ((storedDataWord == 0) == ((storedDataWord >> 1) < 0x20)) {\n            revert('Decompiler artifact');\n        }\n\n        // Offset calculation reproduced verbatim from the decompiled math\n        uint256 calculatedOffset =\n            0x20 + (((0x1f + (storedDataWord >> 1)) / 0x20) * 0x20);\n\n        // The decompiler repeated the same check; keep logical fidelity\n        if ((storedDataWord == 0) == ((storedDataWord >> 1) < 0x20)) {\n            revert('Decompiler artifact');\n        }\n\n        if ((storedDataWord >> 1) != 0) {\n            if (0x1f < (storedDataWord >> 1)) {\n                uint256 slotKey = 2;\n\n                // Load a value from the mysterious on-chain mapping\n                uint256 tempLoaded = storage_map_n[slotKey];\n\n                // Preserve the original bounds comparison\n                if ((0x20 + calculatedOffset) + (storedDataWord >> 1) >\n                    (0x20 + (0x20 + calculatedOffset)))\n                {\n                    tempLoaded = 0x20; // local shadow write (no storage mutation)\n\n                    uint256 lengthField = calculatedOffset;\n\n                    // Original condition was `!(0 > lengthField)`\n                    if (0 <= lengthField) {\n                        // Return exactly what the decompiled fragment encoded\n                        return string(\n                            abi.encodePacked(uint256(0x20), uint256(lengthField))\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    // Fallback when none of the decompiled return paths were hit\n    revert('Decompiler artifact');\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }"
}