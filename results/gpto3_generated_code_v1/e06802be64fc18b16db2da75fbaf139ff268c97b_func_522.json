{
    "contract_address": "0xe06802BE64FC18b16dB2dA75fBAf139FF268c97B",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (store_a - ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory tokenName) {\n    assembly {\n        // Load the raw contents of storage slot 0, where the string is stored\n        let raw := sload(0)\n\n        // If the slot is empty, simply return an empty string\n        if iszero(raw) {\n            tokenName := 0\n        }\n\n        // The least-significant bit determines whether the string is stored\n        // in-place (<= 31 bytes) or out-of-place (> 31 bytes).\n        switch and(raw, 1)\n        case 0 {\n            // -----------------------------------------\n            // In-place string  (<= 31 bytes)\n            // -----------------------------------------\n            // The final byte holds length*2, so retrieve the real length.\n            let len := shr(1, and(raw, 0xFF))\n\n            // Allocate memory for the string (length word + data)\n            let ptr := mload(0x40)\n            mstore(ptr, len)                       // Store length\n\n            // Copy string bytes.\n            // Shift right by 8 bits to drop the length*2 byte,\n            // then store the 31-byte payload right-aligned.\n            mstore(add(ptr, 0x20), shr(8, raw))\n\n            // Zero-pad the last partial word to avoid dirty memory\n            mstore(add(ptr, add(0x20, len)), 0)\n\n            // Update the free-memory pointer\n            mstore(0x40, add(ptr, and(add(len, 0x3F), not(0x1F))))\n\n            tokenName := ptr\n        }\n        default {\n            // -----------------------------------------\n            // Out-of-place string  (> 31 bytes)\n            // -----------------------------------------\n            // The slot stores (offset * 2) + 1  \u279c  offset = raw / 2\n            let offset := shr(1, raw)\n\n            // First word at `offset` holds the string length\n            let len := sload(offset)\n\n            // Compute the number of 32-byte words occupied by the data\n            let words := div(add(len, 31), 32)\n\n            // Allocate memory for length + data words\n            let ptr := mload(0x40)\n            mstore(ptr, len)                       // Store length\n\n            // Copy the data words from storage to memory\n            for { let i := 0 } lt(i, words) { i := add(i, 1) } {\n                mstore(add(ptr, mul(add(i, 1), 0x20)), sload(add(offset, add(1, i))))\n            }\n\n            // Zero-pad the last partial word\n            mstore(add(ptr, add(0x20, len)), 0)\n\n            // Update the free-memory pointer\n            mstore(0x40, add(ptr, and(add(len, 0x3F), not(0x1F))))\n\n            tokenName := ptr\n        }\n    }\n}",
    "ground_truth": "function name() public view returns (string memory) {\r\n      return _name;\r\n    }"
}