{
    "contract_address": "0x4CEDcba2dB7c99934bC64bBd575FEE5fE6E0F28b",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_j)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_d[var_a]);\n        store_c = 0x01000000000000000000000000000000000000000000 | (uint248(store_c));\n        require(!storage_map_d[var_a]);\n        require(!bytes1(store_c / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_g).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_g), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_g);\n        address var_b = keccak256(var_a);\n        storage_map_d[var_a] = storage_map_d[var_a];\n        address var_k = storage_map_d[var_a];\n        emit Approval(address(this), address(store_g), storage_map_d[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_d[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_g).code.length);\n        (bool success, bytes memory ret0) = address(store_g).Unresolved_791ac947(var_l); // call\n        store_c = uint248(store_c);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_j).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    /* ------------------------------------*\n     *  1. Caller must be the treasury.     *\n     * ------------------------------------*/\n    require(msg.sender == treasury, \"manualSwap: caller is not treasury\");\n\n    address self = address(this);\n\n    /* ------------------------------------*\n     *  2. Black-list checks (duplicated).  *\n     * ------------------------------------*/\n    require(!isBlocked[self], \"manualSwap: blocked (1)\");\n\n    // Toggle the re-entrancy/status bit as in the original byte-code.\n    statusFlag = uint248(\n        bytes31(0x01000000000000000000000000000000000000000000) |\n        bytes31(statusFlag)\n    );\n\n    require(!isBlocked[self], \"manualSwap: blocked (2)\");\n\n    // This mimics `require(!bytes1(store_c / 0x01\u2026))` from the decompiled code.\n    require(\n        bytes1(statusFlag / 0x010000000000000000000000000000000000000000) == 0x00,\n        \"manualSwap: status flag check\"\n    );\n\n    /* --------------------------------------------------------------*\n     *  3.  Obscure stack gymnastics preserved for logical fidelity.  *\n     * --------------------------------------------------------------*/\n    uint256 scratch = 0;\n    scratch += 0x60;\n\n    // The decompiled code grabs part of calldata but never uses it.\n    bytes memory _unused = msg.data;\n\n    bytes32 _errSig  = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8   _errCode = 0x32;\n\n    /* --------------------------------------------------------------*\n     *  4.  staticcall: router.WETH()                                 *\n     * --------------------------------------------------------------*/\n    (bool wethOk, bytes memory wethData) =\n        router.staticcall(abi.encodeWithSignature(\"WETH()\"));\n    require(wethOk, \"manualSwap: WETH() staticcall failed\");\n\n    scratch += ((wethData.length + 0x1f) & ~uint256(0x1f)); // same padding math\n    require(\n        !(((scratch + wethData.length) - scratch) < 0x20),\n        \"ERC20: approve to the zero address\"          // original revert string\n    );\n    require(\n        wethData.length == uint256(uint160(wethData.length)),\n        \"ERC20: approve to the zero address\"\n    );\n\n    // Re-apply error selector / code (dead assignments, kept for parity)\n    _errSig  = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    _errCode = 0x32;\n\n    uint256 _asAddr = uint256(uint160(wethData.length));\n\n    /* --------------------------------------------------------------*\n     *  5.  More duplicated checks from the byte-code.                *\n     * --------------------------------------------------------------*/\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(router       != address(0), \"ERC20: approve to the zero address\");\n\n    /* --------------------------------------------------------------*\n     *  6.  Emit Approval event (parameters preserved).               *\n     * --------------------------------------------------------------*/\n    emit Approval(self, router, isBlocked[self] ? 1 : 0);\n\n    /* --------------------------------------------------------------*\n     *  7.  Low-level call to unknown selector 0x791ac947.            *\n     * --------------------------------------------------------------*/\n    require(router.code.length > 0, \"manualSwap: router has no code\");\n    (bool swapOk, ) = router.call(\n        abi.encodeWithSelector(0x791ac947, isBlocked[self])\n    );\n    require(swapOk, \"manualSwap: 0x791ac947 call failed\");\n\n    /* --------------------------------------------------------------*\n     *  8.  Forward any ETH dust back to treasury.                    *\n     * --------------------------------------------------------------*/\n    require(address(this).balance == 0, \"manualSwap: unexpected ETH balance\");\n\n    (bool sent, ) = treasury.call{value: address(this).balance}(\"\");\n    require(sent, \"manualSwap: ETH transfer failed\");\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}