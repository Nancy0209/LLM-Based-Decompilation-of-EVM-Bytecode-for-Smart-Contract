{
    "contract_address": "0x30F674e5399B6493A6096d239153b21331fbC670",
    "heimdall_input": "function updateMarketingWalletInfo(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        emit marketingWalletUpdated(address(arg0), address(store_v));\n        store_v = (address(arg0)) | (uint96(store_v));\n    }",
    "llm_output": "function updateMarketingWalletInfo(address newMarketingWallet) public {\n    // Redundant but preserved check from the decompiled byte-code\n    require(newMarketingWallet == address(newMarketingWallet));\n    // Owner-only modifier preserved exactly as in the original logic\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    // Cache the current packed value before mutation (matches `store_v` in the decompiled code)\n    uint256 previousPackedValue = _marketingWalletPacked;\n\n    // Emit event before state change, exactly as in the original byte-code order\n    emit MarketingWalletUpdated(\n        newMarketingWallet,\n        address(uint160(previousPackedValue))\n    );\n\n    // Update: keep the lower 96 bits from the previous value, replace the lower-order\n    // 160 bits (address) with the new marketing wallet\n    _marketingWalletPacked =\n        uint256(uint160(newMarketingWallet)) |\n        uint256(uint96(previousPackedValue));\n}",
    "ground_truth": "function updateMarketingWalletInfo(address newMarketingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\r\n        marketingWallet = newMarketingWallet;\r\n    }"
}