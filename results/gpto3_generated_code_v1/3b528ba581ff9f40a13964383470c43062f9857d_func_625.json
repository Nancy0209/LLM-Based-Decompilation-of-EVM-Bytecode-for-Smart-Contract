{
    "contract_address": "0x3B528BA581ff9f40A13964383470c43062F9857D",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender));\n        require(address(arg0));\n        require(arg1 > 0);\n        require(address(owner) == (address(msg.sender)));\n        require(address(owner) == (address(arg0)));\n        address var_a = address(msg.sender);\n        var_b = 0x04;\n        require(bytes1(storage_map_b[var_a]));\n        require(!bytes1(storage_map_b[var_a]));\n        require(!(bytes1(transferDelayEnabled)), \"Only one transfer per block allowed.\");\n        require(address(store_d) == (address(arg0)), \"Only one transfer per block allowed.\");\n        require(!(!(address(store_e)) == (address(arg0))), \"Only one transfer per block allowed.\");\n        var_a = tx.origin;\n        var_b = 0x05;\n        require(block.number > storage_map_b[var_a], \"Only one transfer per block allowed.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x24;\n        var_f = 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f;\n        var_g = 0x7765642e00000000000000000000000000000000000000000000000000000000;\n        var_a = tx.origin;\n        var_b = 0x05;\n        storage_map_b[var_a] = block.number;\n        require(!(address(store_e) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(store_e) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(store_e) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(store_f > store_g, \"SafeMath: multiplication overflow\");\n        require(0 - arg1, \"SafeMath: multiplication overflow\");\n        require((store_h == ((store_h * arg1) / arg1)) | !arg1, \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((store_h * arg1) / arg1) == store_h, \"SafeMath: multiplication overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x21;\n        var_f = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_g = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        uint256 var_i = 0x40 + var_i;\n        var_c = 0x1a;\n        var_j = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x64, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        uint256 var_g = var_i.length;\n        uint256 var_l = 0;\n        var_m = var_n;\n        var_l = 0;\n        require(0x64, \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        require(!(address(store_e) == (address(arg0))), \"SafeMath: addition overflow\");\n        require(!(address(store_e) == (address(arg0))), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x01;\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!((store_h * arg1) / 0x64), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x01;\n        require(!(storage_map_b[var_a] > (((store_h * arg1) / 0x64) + storage_map_b[var_a])), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(!(((store_h * arg1) / 0x64) + storage_map_b[var_a] < storage_map_b[var_a]), \"SafeMath: addition overflow\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x1b;\n        var_m = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(this);\n        var_b = 0x01;\n        storage_map_b[var_a] = ((store_h * arg1) / 0x64) + storage_map_b[var_a];\n        uint256 var_k = (store_h * arg1) / 0x64;\n        emit Transfer(address(msg.sender), address(this), (store_h * arg1) / 0x64);\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        var_i = 0x40 + var_i;\n        var_k = 0x1e;\n        var_o = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(arg1 > storage_map_b[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!((storage_map_b[var_a] - arg1) > storage_map_b[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        var_i = 0x40 + var_i;\n        var_p = 0x1e;\n        var_q = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(((store_h * arg1) / 0x64) > arg1), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_r = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_s = 0x20;\n        uint256 var_t = var_i.length;\n        uint256 var_u = 0;\n        var_v = var_n;\n        var_u = 0;\n        if (!(arg1 - ((store_h * arg1) / 0x64)) > arg1) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x11;\n            if (storage_map_b[var_a] > _maxTaxSwap) {\n            }\n            if (!store_f > store_j) {\n            }\n            if (!storage_map_b[var_a] > _taxSwapThreshold) {\n            }\n            require(!((arg1 - ((store_h * arg1) / 0x64)) > arg1), \"Exceeds the _maxTxAmount.\");\n        }\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x19;\n        var_m = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (store_f > store_m) {\n            if (0 - arg1) {\n            }\n            if (0 - arg1) {\n            }\n            require(store_f > store_m, \"Exceeds the _maxTxAmount.\");\n        }\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x19;\n        var_f = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (address(store_d) == (address(arg0))) {\n            if (address(store_d) == (address(arg0))) {\n            }\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_g = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public {\n    /* -------------------------------------------------------------------------- */\n    /*                             Basic sanity checks                            */\n    /* -------------------------------------------------------------------------- */\n    require(recipient == address(recipient));\n    require(address(msg.sender) != address(0));\n    require(address(recipient) != address(0));\n    require(amount > 0);\n\n    /* -------------------------------------------------------------------------- */\n    /*                        Owner-specific redundant checks                     */\n    /* -------------------------------------------------------------------------- */\n    require(address(owner) == address(msg.sender));\n    require(address(owner) == address(recipient));\n\n    /* -------------------------------------------------------------------------- */\n    /*                        Transfer-delay related section                      */\n    /* -------------------------------------------------------------------------- */\n    address senderAddr = msg.sender;\n    uint8  tmpFlag     = 0x04;\n    require(bytes1(storage_map_b[senderAddr]));\n    require(!bytes1(storage_map_b[senderAddr]));\n    require(!bytes1(transferDelayEnabled), \"Only one transfer per block allowed.\");\n    require(address(store_d) == address(recipient), \"Only one transfer per block allowed.\");\n    require(!(!(address(store_e)) == address(recipient)), \"Only one transfer per block allowed.\");\n\n    senderAddr = tx.origin;\n    tmpFlag    = 0x05;\n    require(block.number > storage_map_b[senderAddr], \"Only one transfer per block allowed.\");\n\n    /* Update last-transfer block for the origin address */\n    senderAddr         = tx.origin;\n    tmpFlag            = 0x05;\n    storage_map_b[senderAddr] = block.number;\n\n    /* -------------------------------------------------------------------------- */\n    /*                      Verbose SafeMath-style assertions                     */\n    /* -------------------------------------------------------------------------- */\n    require(!(address(store_e) == address(msg.sender)), \"SafeMath: multiplication overflow\");\n    require(!(address(store_e) == address(msg.sender)), \"SafeMath: multiplication overflow\");\n    require(!(address(store_e) == address(msg.sender)), \"SafeMath: multiplication overflow\");\n    require(store_f > store_g,                           \"SafeMath: multiplication overflow\");\n    require(0 - amount != 0,                             \"SafeMath: multiplication overflow\");\n    require((store_h == ((store_h * amount) / amount)) || !amount, \"SafeMath: multiplication overflow\");\n    require(amount != 0,                                 \"SafeMath: multiplication overflow\");\n    require(((store_h * amount) / amount) == store_h,    \"SafeMath: multiplication overflow\");\n\n    /* Arbitrary decompiler artefact that must stay intact */\n    require(0x64 != 0, \"\");\n    require(0x64 != 0, \"SafeMath: addition overflow\");\n\n    /* More SafeMath-style assertions */\n    require(!(address(store_e) == address(recipient)), \"SafeMath: addition overflow\");\n    require(!(address(store_e) == address(recipient)), \"SafeMath: addition overflow\");\n\n    address thisContract = address(this);\n    tmpFlag              = 0x01;\n    require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n    require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n    require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n    require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n    require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n    require(!(((store_h * amount) / 0x64) == 0),        \"SafeMath: addition overflow\");\n\n    thisContract = address(this);\n    tmpFlag      = 0x01;\n    require(!(storage_map_b[thisContract] > (((store_h * amount) / 0x64) + storage_map_b[thisContract])), \"SafeMath: addition overflow\");\n    require(!(((store_h * amount) / 0x64) + storage_map_b[thisContract] < storage_map_b[thisContract]),    \"SafeMath: addition overflow\");\n\n    /* -------------------------------------------------------------------------- */\n    /*                       Apply \u201ctax\u201d  and emit Transfer                       */\n    /* -------------------------------------------------------------------------- */\n    storage_map_b[thisContract] = ((store_h * amount) / 0x64) + storage_map_b[thisContract];\n    uint256 taxAmount           = (store_h * amount) / 0x64;\n    emit Transfer(msg.sender, address(this), taxAmount);\n\n    /* -------------------------------------------------------------------------- */\n    /*                        Deduct sender\u2019s balance array                       */\n    /* -------------------------------------------------------------------------- */\n    senderAddr = msg.sender;\n    tmpFlag    = 0x01;\n    require(!(amount > storage_map_b[senderAddr]), \"\");\n    require(!((storage_map_b[senderAddr] - amount) > storage_map_b[senderAddr]), \"\");\n    storage_map_b[senderAddr] = storage_map_b[senderAddr] - amount;\n\n    /* Further SafeMath-style check */\n    require(!(((store_h * amount) / 0x64) > amount), \"\");\n\n    /* -------------------------------------------------------------------------- */\n    /*                 _maxTxAmount / _taxSwapThreshold logic block               */\n    /* -------------------------------------------------------------------------- */\n    if (!((amount - ((store_h * amount) / 0x64)) > amount)) {\n        if (storage_map_b[thisContract] > _maxTaxSwap) {}\n        if (!(store_f > store_j))                {}\n        if (!(storage_map_b[thisContract] > _taxSwapThreshold)) {}\n        require(!((amount - ((store_h * amount) / 0x64)) > amount), \"Exceeds the _maxTxAmount.\");\n    }\n\n    require(!(amount > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n\n    if (store_f > store_m) {\n        if (0 - amount != 0) {}\n        if (0 - amount != 0) {}\n        require(store_f > store_m, \"Exceeds the _maxTxAmount.\");\n    }\n\n    require(!(amount > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n\n    /* -------------------------------------------------------------------------- */\n    /*                           Miscellaneous artefacts                          */\n    /* -------------------------------------------------------------------------- */\n    if (address(store_d) == address(recipient)) {\n        if (address(store_d) == address(recipient)) {}\n    }\n\n    /* Additional revert-message artefacts retained for byte-code fidelity */\n    /* (They have no functional impact inside Solidity source code) */\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}