{
    "contract_address": "0xa037974C7653cB0ffdA7332E6E96c0C691eBE1F7",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_e = 0x01000000000000000000000000000000000000000000 | (uint248(store_e));\n        require(!storage_map_b[var_a]);\n        require(!bytes1(store_e / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_d).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_d), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_d);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_d), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_d).code.length);\n        (bool success, bytes memory ret0) = address(store_d).Unresolved_791ac947(var_l); // call\n        store_e = uint248(store_e);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // Original authorisation check\n    require(\n        msg.sender == address(uint160(transferDelayEnabled / 0x0100)),\n        \"manualSwap: unauthorised caller\"\n    );\n\n    /* --------------------------------------------------------------------- */\n    /*                       State-mutation bookkeeping                      */\n    /* --------------------------------------------------------------------- */\n    address thisAddress = address(this);\n    uint8   _tmpFlag01  = 0x01;                 // dummy variable \u2013 kept for fidelity\n\n    // The mapping must be clear for the current contract\n    require(!storage_map_b[thisAddress], \"manualSwap: already processed\");\n\n    // Toggle the high-order flag inside `store_e`\n    store_e = uint248(0x01000000000000000000000000000000000000000000) | store_e;\n\n    // Re-check (exists twice in the decompiled output)\n    require(!storage_map_b[thisAddress], \"manualSwap: already processed\");\n\n    // Ensure the specific flag in `store_e` is NOT set\n    require(\n        bytes1(\n            uint8(\n                store_e\n                    / 0x010000000000000000000000000000000000000000 /* divisor found in byte-code */\n            )\n        ) == 0x00,\n        \"manualSwap: invalid flag\"\n    );\n\n    uint8 _tmpFlag02 = 0x02;                    // another dummy \u2013 mirrors original\n\n    /* --------------------------------------------------------------------- */\n    /*                        Calldata / memory juggling                     */\n    /* --------------------------------------------------------------------- */\n    uint256 memOffset = 0x60;\n\n    // Copy calldata[4 : 68] into memory \u2013 strictly to reflect the\n    // decompiled operations; the data is never used afterwards.\n    bytes memory slicedCalldata = new bytes(64);\n    if (msg.data.length >= 68) {\n        unchecked {\n            for (uint256 i; i < 64; ++i) {\n                slicedCalldata[i] = msg.data[4 + i];\n            }\n        }\n    }\n\n    bytes32 _panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8   _panicCode     = 0x32;               // 0x32 == \u201cdivision by zero\u201d in Solidity 0.8 panic codes\n\n    /* --------------------------------------------------------------------- */\n    /*                   External static-call to fetch WETH                  */\n    /* --------------------------------------------------------------------- */\n    bytes4 WETH_SELECTOR = 0xad5c4648;            // WETH()\n\n    (bool wethCallSuccess, bytes memory wethRet) =\n        address(store_d).staticcall(abi.encodeWithSelector(WETH_SELECTOR));\n\n    // The decompiled code never checked `success`, therefore we purposefully\n    // ignore it as well to stay 100 % faithful.\n    wethCallSuccess;\n\n    memOffset += wethRet.length + 0x1f;\n\n    // Copy-pasted odd safety checks from the original output\n    require(\n        !(((memOffset + wethRet.length) - memOffset) < 0x20),\n        \"ERC20: approve to the zero address\"\n    );\n    require(\n        wethRet.length == uint256(uint160(wethRet.length)),\n        \"ERC20: approve to the zero address\"\n    );\n\n    _panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    _panicCode     = 0x32;\n\n    uint256 wethDecodedLen = uint256(uint160(wethRet.length));\n\n    // Two more duplicated checks preserved verbatim\n    require(address(this)   != address(0), \"ERC20: approve to the zero address\");\n    require(address(store_d) != address(0), \"ERC20: approve to the zero address\");\n\n    /* --------------------------------------------------------------------- */\n    /*                      Dummy revert-string constants                    */\n    /* --------------------------------------------------------------------- */\n    bytes32 _errSelector  = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    bytes32 _errDataOfs   = 0x20;\n    bytes32 _errDataLen   = 0x22;\n    bytes32 _errDataPart1 = 0x45524332303a20617070726f766520746f20746865207a65726f2061646472;\n    bytes32 _errDataPart2 = 0x7373000000000000000000000000000000000000000000000000000000000000;\n\n    /* --------------------------------------------------------------------- */\n    /*                       Mapping self-assignment & event                 */\n    /* --------------------------------------------------------------------- */\n    storage_map_b[thisAddress] = storage_map_b[thisAddress];        // no-op, kept\n\n    emit Approval(address(this), address(store_d), storage_map_b[thisAddress]);\n\n    /* --------------------------------------------------------------------- */\n    /*                 External call (selector 0x791ac947 \u2026)                 */\n    /* --------------------------------------------------------------------- */\n    bytes4 ADD_LIQ_SELECTOR = 0x791ac947;                            // unknown \u2013 kept\n    address liquidityRecipient = storage_map_b[thisAddress];\n\n    require(address(store_d).code.length > 0, \"manualSwap: target code empty\");\n\n    (bool addLiqSuccess, bytes memory addLiqRet) =\n        address(store_d).call(\n            abi.encodePacked(ADD_LIQ_SELECTOR, liquidityRecipient)\n        );\n\n    // Again: success/result deliberately unused to mimic original behaviour\n    (addLiqSuccess, addLiqRet);\n\n    /* --------------------------------------------------------------------- */\n    /*                             Final cleanup                             */\n    /* --------------------------------------------------------------------- */\n    store_e = uint248(store_e);              // casting back \u2013 effectively no-op\n\n    require(address(this).balance == 0, \"manualSwap: residual ETH present\");\n\n    // Forward any ETH (expected to be zero) to the pre-defined address\n    payable(address(uint160(transferDelayEnabled / 0x0100))).transfer(\n        address(this).balance\n    );\n\n    // Second unused revert-string block (exists in the byte-code)\n    _errSelector  = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    _errDataOfs   = 0x20;\n    _errDataLen   = 0x24;\n    _errDataPart1 = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    _errDataPart2 = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}