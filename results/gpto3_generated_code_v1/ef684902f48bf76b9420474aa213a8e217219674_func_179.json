{
    "contract_address": "0xeF684902f48bf76B9420474Aa213A8e217219674",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_h[var_a]);\n        store_g = 0x01000000000000000000000000000000000000000000 | (uint248(store_g));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_f), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_f);\n        address var_b = keccak256(var_a);\n        storage_map_h[var_a] = storage_map_h[var_a];\n        address var_k = storage_map_h[var_a];\n        emit Approval(address(this), address(store_f), storage_map_h[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_h[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_f).code.length);\n        (bool success, bytes memory ret0) = address(store_f).Unresolved_791ac947(var_l); // call\n        store_g = uint248(store_g);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    require(msg.sender == address(uint160(transferDelayEnabled / 0x0100)));\n\n    address self = address(this);\n    uint8  flagOne = 0x01;               // placeholder, mirrors decompiled assignment\n    require(!storage_map_h[self]);\n\n    // Bitwise operation preserved from decompiled code\n    store_g = uint248(store_g) | 0x01000000000000000000000000000000000000000000;\n\n    uint8  flagTwo  = 0x02;              // additional placeholder\n    uint256 offset  = 0x60;              // corresponds to var_d adjustment\n\n    bytes memory ignoredData;            // placeholder for msg.data slice\n\n    // Constants reproduced from decompiled output\n    uint256 errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8   errorOffset   = 0x32;\n\n    // Static-call to `store_f` using hard-coded selector\n    bytes4 wethSelector = 0xad5c4648;    // selector for WETH()\n    (bool wethCallSuccess, bytes memory wethReturn) =\n        address(store_f).staticcall(abi.encodeWithSelector(wethSelector));\n\n    offset += wethReturn.length + 0x1f;\n\n    require(!(((offset + wethReturn.length) - offset) < 0x20), \"ERC20: approve to the zero address\");\n    require(wethReturn.length == uint256(uint160(wethReturn.length)), \"ERC20: approve to the zero address\");\n\n    // Re-assign constants (mirrors redundant decompiled steps)\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorOffset   = 0x32;\n\n    uint256 dummyAddress = uint256(uint160(wethReturn.length));\n\n    require(address(this) != address(0),        \"ERC20: approve to the zero address\");\n    require(address(store_f) != address(0),     \"ERC20: approve to the zero address\");\n\n    // Additional revert-message constants kept for fidelity\n    uint256 revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 revertOffset   = 0x20;\n    uint256 revertLength   = 0x22;\n    uint256 revertData1    = 0x45524332303a20617070726f766520746f20746865207a65726f2061646472;\n    uint256 revertData2    = 0x7373000000000000000000000000000000000000000000000000000000000000;\n\n    // Mapping update and event emission preserved\n    storage_map_h[self] = storage_map_h[self];\n    emit Approval(address(this), address(store_f), storage_map_h[self]);\n\n    // Low-level call that mirrors `Unresolved_791ac947`\n    bytes4 swapSelector = 0x791ac947;\n    address swapRecipient = storage_map_h[self];\n\n    uint256 amountIn      = 0;           // var_m\n    uint256 amountOutMin  = 0xa0;        // var_n\n    uint256 swapDataLen   = wethReturn.length; // var_p\n    address sender        = address(this);     // var_o\n    uint256 deadline      = block.timestamp;   // var_q\n\n    require(address(store_f).code.length > 0);\n\n    (bool swapCallSuccess, bytes memory swapReturn) =\n        address(store_f).call(abi.encodeWithSelector(swapSelector, swapRecipient));\n\n    // Redundant cast replicated from decompiled code\n    store_g = uint248(store_g);\n\n    require(address(this).balance == 0);\n\n    // Forward any remaining ETH\n    (bool transferSuccess, ) =\n        address(uint160(transferDelayEnabled) / 0x0100).call{value: address(this).balance}(\"\");\n\n    // Final set of unused constants (kept to match byte-code)\n    revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    revertOffset   = 0x20;\n    revertLength   = 0x24;\n    revertData1    = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    revertData2    = 0x7265737300000000000000000000000000000000000000000000000000000000;\n\n    // Suppress compiler warnings about unused variables\n    (wethCallSuccess, swapCallSuccess, transferSuccess, flagOne, flagTwo, ignoredData, dummyAddress, errorSelector, errorOffset, revertSelector, revertOffset, revertLength, revertData1, revertData2);\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}