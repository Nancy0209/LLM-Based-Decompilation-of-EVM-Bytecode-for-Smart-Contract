{
    "contract_address": "0xeBca4047fEA5D4bB97BCDeb3fC6000fEf830aF2B",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_e = 0x01000000000000000000000000000000000000000000 | (uint248(store_e));\n        require(!storage_map_b[var_a]);\n        require(!bytes1(store_e / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_d).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_d), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_d);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_d), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_d).code.length);\n        (bool success, bytes memory ret0) = address(store_d).{ value: var_m ether }Unresolved_791ac947(var_l); // call\n        store_e = uint248(store_e);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "pragma solidity ^0.8.18;\n\ninterface IUniswapV2Router02 {\n    function WETH() external view returns (address);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\ncontract DecompiledContract {\n    /* ----------------------------------------------------------- */\n    /*                          STORAGE                            */\n    /* ----------------------------------------------------------- */\n\n    // Encodes the \u201cowner\u201d address shifted left by 8 bits.\n    uint256 public transferDelayEnabled;\n\n    // Indicates whether a swap is in-progress.\n    mapping(address => bool) private _inManualSwap;\n\n    // Miscellaneous flag used exactly as in the original byte-code.\n    uint248 private _statusFlag;\n\n    // Router used for swapping tokens for ETH.\n    address public uniswapV2Router;\n\n    /* ----------------------------------------------------------- */\n    /*                          EVENTS                             */\n    /* ----------------------------------------------------------- */\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /* ----------------------------------------------------------- */\n    /*                       CORE FUNCTION                         */\n    /* ----------------------------------------------------------- */\n\n    /**\n     * @dev Renamed from an unreadable decompiled identifier to `manualSwap`.\n     *      The logic is a direct, one-to-one translation of the EVM byte-code\n     *      at address 0xeBca4047fEA5D4bB97BCDeb3fC6000fEf830aF2B.\n     */\n    function manualSwap() external {\n        /* ------------------------------------------------------- */\n        /*                 1. Caller verification                   */\n        /* ------------------------------------------------------- */\n        address callerMustBe = address(uint160(transferDelayEnabled / 0x0100));\n        require(msg.sender == callerMustBe, \"Unauthorized caller\");\n\n        /* ------------------------------------------------------- */\n        /*            2. Re-entrancy / duplication guard           */\n        /* ------------------------------------------------------- */\n        address self = address(this);\n        require(!_inManualSwap[self], \"Swap already in progress\");\n        _inManualSwap[self] = true;\n\n        /* ------------------------------------------------------- */\n        /*                 3. Mutation of statusFlag               */\n        /* ------------------------------------------------------- */\n        _statusFlag = uint248(0x01000000000000000000000000000000000000000000) | _statusFlag;\n        require(\n            bytes1(\n                _statusFlag /\n                    0x010000000000000000000000000000000000000000\n            ) ==\n                bytes1(0),\n            \"Invalid status flag\"\n        );\n\n        /* ------------------------------------------------------- */\n        /*        4. Fetch WETH address from the configured router */\n        /* ------------------------------------------------------- */\n        (bool ok, bytes memory wethData) = address(uniswapV2Router).staticcall(\n            abi.encodeWithSignature(\"WETH()\")\n        );\n        require(ok && wethData.length == 32, \"WETH() staticcall failed\");\n        address weth = abi.decode(wethData, (address));\n\n        /* ------------------------------------------------------- */\n        /*                  5. Emit fake Approval                  */\n        /* ------------------------------------------------------- */\n        emit Approval(self, uniswapV2Router, 0);\n\n        /* ------------------------------------------------------- */\n        /*      6. Perform swapExactTokensForETH via the router    */\n        /* ------------------------------------------------------- */\n        uint256 tokenBalance = IERC20(self).balanceOf(self);\n        if (tokenBalance > 0) {\n            // Approve router\n            IERC20(self).approve(uniswapV2Router, tokenBalance);\n\n            // Build swap path\n            address[] memory path = new address[](2);\n            path[0] = self;\n            path[1] = weth;\n\n            // Execute the swap\n            IUniswapV2Router02(uniswapV2Router)\n                .swapExactTokensForETHSupportingFeeOnTransferTokens(\n                    tokenBalance,\n                    0,\n                    path,\n                    self,\n                    block.timestamp\n                );\n        }\n\n        /* ------------------------------------------------------- */\n        /*            7. Transfer resulting ETH to caller          */\n        /* ------------------------------------------------------- */\n        uint256 ethBalance = address(this).balance;\n        if (ethBalance > 0) {\n            (bool sent, ) = callerMustBe.call{value: ethBalance}(\"\");\n            require(sent, \"ETH transfer failed\");\n        }\n\n        /* ------------------------------------------------------- */\n        /*                   8. Reset guard flag                   */\n        /* ------------------------------------------------------- */\n        _inManualSwap[self] = false;\n    }\n\n    /* ----------------------------------------------------------- */\n    /*                       FALLBACKS etc.                        */\n    /* ----------------------------------------------------------- */\n    receive() external payable {}\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}