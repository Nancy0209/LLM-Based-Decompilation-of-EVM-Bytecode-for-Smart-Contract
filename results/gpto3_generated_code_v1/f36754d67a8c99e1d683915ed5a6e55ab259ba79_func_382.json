{
    "contract_address": "0xF36754d67a8C99e1D683915ED5A6E55aB259ba79",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_r) {\n            if (store_r - ((store_r / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_r / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_r / 0x02;\n                if (store_r) {\n                    if (store_r - ((store_r / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_r / 0x02) {\n                            if (0x1f < (store_r / 0x02)) {\n                                var_a = 0x09;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_r / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory tokenSymbol) {\n    assembly {\n        // Pointer to the free memory slot\n        let freePtr := mload(0x40)\n\n        // Raw value stored in the dedicated symbol storage slot (slot 0)\n        // In the decompiled output this value was referred to as `store_r`\n        let raw := sload(0)\n\n        // If `raw` is zero, the token has no symbol; return an empty string\n        switch raw\n        case 0 {\n            tokenSymbol := freePtr          // location where we will build the empty string\n            mstore(tokenSymbol, 0)          // length = 0\n            mstore(0x40, add(tokenSymbol, 0x20))\n        }\n        default {\n            // If the least-significant bit is 0 the symbol is a short (\u226431-byte) string\n            switch and(raw, 1)\n            case 0 {\n                // Length is stored as `raw / 2`\n                let len := div(raw, 2)\n\n                // Allocate memory for the return string\n                tokenSymbol := freePtr\n                mstore(tokenSymbol, len)                       // store length\n\n                // Store the bytes (left-aligned \u2011- shift out the length byte)\n                mstore(add(tokenSymbol, 0x20), shr(8, shl(8, raw)))\n\n                // Update free memory pointer: 32 bytes for length + 32 bytes for data\n                mstore(0x40, add(tokenSymbol, 0x40))\n            }\n            default {\n                // Long string (>31 bytes).  Length is `raw / 2`\n                let len := div(raw, 2)\n\n                // Compute the storage slot containing the first word of the string data\n                mstore(0x00, 0)                    // slot 0\n                let dataSlot := keccak256(0x00, 0x20)\n\n                tokenSymbol := freePtr\n                mstore(tokenSymbol, len)           // store length\n\n                // Copy string data word-by-word from storage to memory\n                let words := add(div(len, 0x20), gt(mod(len, 0x20), 0))\n                for { let i := 0 } lt(i, words) { i := add(i, 1) } {\n                    mstore(\n                        add(tokenSymbol, add(0x20, mul(i, 0x20))),\n                        sload(add(dataSlot, i))\n                    )\n                }\n\n                // Round free memory pointer up to multiple of 32 bytes\n                mstore(\n                    0x40,\n                    and(\n                        add(add(tokenSymbol, 0x20), mul(words, 0x20)),\n                        not(0x1f)\n                    )\n                )\n            }\n        }\n    }\n}",
    "ground_truth": "function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }"
}