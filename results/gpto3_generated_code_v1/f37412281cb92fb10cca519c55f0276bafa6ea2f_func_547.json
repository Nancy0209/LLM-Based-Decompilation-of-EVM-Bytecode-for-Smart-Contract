{
    "contract_address": "0xF37412281Cb92fb10ccA519C55F0276BAFa6Ea2f",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_h[var_a]);\n        store_g = 0x01000000000000000000000000000000000000000000 | (uint248(store_g));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_f), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_f);\n        address var_b = keccak256(var_a);\n        storage_map_h[var_a] = storage_map_h[var_a];\n        address var_k = storage_map_h[var_a];\n        emit Approval(address(this), address(store_f), storage_map_h[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_h[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_f).code.length);\n        (bool success, bytes memory ret0) = address(store_f).Unresolved_791ac947(var_l); // call\n        store_g = uint248(store_g);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() external {\n    // Authorised caller check\n    require(msg.sender == address(uint160(executorEncoded / 0x0100)));\n\n    // Prevent re-execution for this contract address\n    require(allowances[address(this)] == 0);\n\n    // Flip the designated status bit\n    statusBits = 0x01000000000000000000000000000000000000000000 | statusBits;\n\n    // Retrieve the WETH address from the router (static call)\n    (bool wethCallSuccess, bytes memory wethData) =\n        router.staticcall(abi.encodeWithSignature(\"WETH()\"));\n    wethCallSuccess; // silence compiler warning\n\n    // Size sanity checks (mirrors the original byte-code logic)\n    require(!(wethData.length < 0x20), \"ERC20: approve to the zero address\");\n    require(\n        wethData.length == uint256(uint160(wethData.length)),\n        \"ERC20: approve to the zero address\"\n    );\n\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(router != address(0), \"ERC20: approve to the zero address\");\n\n    // Emit Approval with the stored allowance value\n    uint256 currentAllowance = allowances[address(this)];\n    emit Approval(address(this), router, currentAllowance);\n\n    // Low-level call with selector 0x791ac947 (purpose preserved)\n    (bool swapCallSuccess, ) =\n        router.call(abi.encodeWithSelector(0x791ac947, currentAllowance));\n    swapCallSuccess; // silence compiler warning\n\n    // Cast back to 248-bit value as per original behaviour\n    statusBits = uint248(statusBits);\n\n    // Ensure the contract holds no ETH after the operation\n    require(address(this).balance == 0);\n\n    // Forward any remaining ETH (expected to be zero) to the authorised executor\n    payable(address(uint160(executorEncoded / 0x0100))).transfer(address(this).balance);\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}