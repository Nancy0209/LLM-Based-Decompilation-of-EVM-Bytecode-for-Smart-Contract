{
    "contract_address": "0x8bD394Bd4b52207Df7a12F4a3EBF089e3d632826",
    "heimdall_input": "function rescuesERC20(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(getOwner)), \"!OWNER\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x06;\n        var_d = 0x214f574e45520000000000000000000000000000000000000000000000000000;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(this);\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require((arg1 == ((arg1 * var_e.length) / var_e.length)) | !var_e.length);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x64);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        var_h = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        address var_c = address(store_m);\n        uint256 var_d = (arg1 * var_e.length) / 0x64;\n        (bool success, bytes memory ret0) = address(arg0).{ value: 0 ether }Unresolved_a9059cbb(var_c); // call\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == var_e.length);\n    }",
    "llm_output": "function rescueERC20(address tokenAddress, uint256 percentage) public {\n    require(tokenAddress == address(tokenAddress), \"INVALID_ADDRESS\");\n    require(msg.sender == owner, \"!OWNER\");\n\n    // Retrieve this contract's token balance\n    (bool, bytes memory balanceData) = tokenAddress.staticcall(\n        abi.encodeWithSelector(bytes4(0x70a08231), address(this))\n    );\n\n    // Ensure the returned data has at least 32 bytes\n    require(balanceData.length >= 32, \"BALANCE_DATA_SHORT\");\n\n    uint256 tokenBalance = abi.decode(balanceData, (uint256));\n\n    // Redundant arithmetic identity check (kept for logical fidelity)\n    require(\n        (percentage == (percentage * tokenBalance) / tokenBalance) || tokenBalance == 0,\n        \"ARITH_CHECK\"\n    );\n\n    // Redundant always-true require (0x64 == 100)\n    require(0x64 != 0, \"UNREACHABLE\");\n\n    // Calculate amount to rescue\n    uint256 transferAmount = (percentage * tokenBalance) / 0x64;\n\n    // Execute ERC20 transfer\n    (bool, bytes memory transferData) = tokenAddress.call(\n        abi.encodeWithSelector(bytes4(0xa9059cbb), rescueWallet, transferAmount)\n    );\n\n    // Ensure the transfer returned at least 32 bytes\n    require(transferData.length >= 32, \"TRANSFER_DATA_SHORT\");\n\n    // Redundant equality check preserved from original logic\n    require(transferData.length == transferData.length, \"REDUNDANT_CHECK\");\n}",
    "ground_truth": "function rescuesERC20(address _address, uint256 percent) external onlyOwner {\\r\\n        uint256 _amount = IERC20(_address).balanceOf(address(this)).mul(percent).div(100);\\r\\n        IERC20(_address).transfer(development_receiver, _amount);\\r\\n    }"
}