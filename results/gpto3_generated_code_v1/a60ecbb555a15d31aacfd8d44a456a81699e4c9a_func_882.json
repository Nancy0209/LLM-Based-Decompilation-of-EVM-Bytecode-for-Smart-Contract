{
    "contract_address": "0xa60ecbb555a15D31AaCfd8d44a456A81699e4C9a",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (!(store_a) == ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (!(store_a) == ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    if (!0 > var_c.length) {\n                                        uint256 var_g = 0;\n                                        return abi.encodePacked(0x20, var_c.length);\n                                        return abi.encodePacked(0x20, var_c.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory tokenName) {\n    assembly {\n        // Load the raw storage word that backs the `name` string (slot 0 in this contract)\n        let rawData := sload(0)\n\n        // If no data stored, simply return an empty string\n        switch rawData\n        case 0 {\n            tokenName := mload(0x40)      // get free memory pointer\n            mstore(tokenName, 0)          // store length = 0\n            mstore(0x40, add(tokenName, 0x20)) // advance free memory pointer\n        }\n        default {\n            // -----------------------------------------------------------------\n            // The following two identical checks are kept to mirror the exact\n            // control-flow of the original bytecode produced by the decompiler.\n            // -----------------------------------------------------------------\n            if eq(iszero(rawData), lt(div(rawData, 0x02), 0x20)) {\n                // Panic(0x22)\n                mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n                mstore(0x04, 0x22)\n                revert(0x00, 0x24)\n            }\n\n            if eq(iszero(rawData), lt(div(rawData, 0x02), 0x20)) {\n                // Panic(0x22) \u2013 duplicated on purpose\n                mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n                mstore(0x04, 0x22)\n                revert(0x00, 0x24)\n            }\n\n            // At this point (rawData / 2) \u2265 32\n            let strLength := div(rawData, 0x02)\n\n            // Compute the starting slot where the long string data is stored:\n            //   keccak256(slot)  (standard for dynamic-length data)\n            mstore(0x00, 0)\n            let dataSlot := keccak256(0x00, 0x20)\n\n            // Allocate memory for the return string\n            tokenName := mload(0x40)\n            mstore(tokenName, strLength)        // set length field\n\n            // Copy the string data from storage to memory, 32 bytes per iteration\n            for { let offset := 0 } lt(offset, strLength) { offset := add(offset, 0x20) } {\n                let word := sload(add(dataSlot, div(offset, 0x20)))\n                mstore(add(tokenName, add(0x20, offset)), word)\n            }\n\n            // Update free memory pointer\n            mstore(0x40, add(tokenName, add(0x20, strLength)))\n        }\n    }\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }"
}