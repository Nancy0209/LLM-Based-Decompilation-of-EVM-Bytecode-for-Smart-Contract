{
    "contract_address": "0x30045aA941FF9Be1d2D3603A75207C07860d4156",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_t) {\n            if (store_t - ((store_t >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_t >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_t >> 0x01;\n                if (store_t) {\n                    if (store_t - ((store_t >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_t >> 0x01) {\n                            if (0x1f < (store_t >> 0x01)) {\n                                var_a = 0x03;\n                                var_e = storage_map_f[var_a];\n                                if ((0x20 + var_c) + (store_t >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory) {\n    bytes32 storedName = store_t; // Assuming `store_t` is a storage variable holding the name\n    if (storedName != 0) {\n        uint256 nameLength = uint256(storedName >> 1); // Extract length from the stored value\n        if (nameLength < 32) {\n            // Name is stored inline\n            return string(abi.encodePacked(storedName));\n        } else {\n            // Name is stored in a separate storage slot\n            bytes memory nameBytes = new bytes(nameLength);\n            uint256 storagePointer = uint256(storedName);\n            for (uint256 i = 0; i < nameLength; i++) {\n                nameBytes[i] = bytes1(storage_map_f[storagePointer + i]); // Assuming `storage_map_f` maps storage slots\n            }\n            return string(nameBytes);\n        }\n    }\n    return \"\";\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }"
}