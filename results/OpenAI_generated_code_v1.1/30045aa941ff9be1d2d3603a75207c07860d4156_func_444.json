{
    "contract_address": "0x30045aA941FF9Be1d2D3603A75207C07860d4156",
    "heimdall_input": "function setAutoLiquidityPercent(uint16 arg0) public {\n        require(arg0 == (uint16(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(uint16(arg0) > (buyBackPercent + (uint16(arg0)))), \"Percent cant be higher than 100%\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(!((buyBackPercent + (uint16(arg0))) > 0x2710), \"Percent cant be higher than 100%\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x50657263656e742063616e7420626520686967686572207468616e2031303025;\n        autoLiquidityPercent = uint16(arg0);\n    }",
    "llm_output": "function setAutoLiquidityPercent(uint16 newPercent) public {\n    require(newPercent == uint16(newPercent), \"Invalid percent value\");\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n    require(!(newPercent > buyBackPercent + newPercent), \"Percent can't be higher than 100%\");\n    require(!(buyBackPercent + newPercent > 10000), \"Percent can't be higher than 100%\");\n    autoLiquidityPercent = newPercent;\n}",
    "ground_truth": "function setAutoLiquidityPercent(uint16 newPercent) external onlyOwner {\\r\\n        require(\\r\\n            newPercent + buyBackPercent <= TAX_DIVISOR,\\r\\n            \\\"Percent cant be higher than 100%\\\"\\r\\n        );\\r\\n        autoLiquidityPercent = newPercent;\\r\\n    }"
}