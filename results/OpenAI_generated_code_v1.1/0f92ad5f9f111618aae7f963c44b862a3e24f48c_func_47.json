{
    "contract_address": "0x0F92AD5f9f111618AAE7F963c44B862A3e24f48c",
    "heimdall_input": "function name() public view returns (string memory) {\n        bytes1 var_a = 0x20 + (var_a + (0x20 * (((store_a & (((!bytes1(store_a)) * 0x0100) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x02) + 0x1f) / 0x20)));\n        bytes1 var_b = (store_a & (((!bytes1(store_a)) * 0x0100) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) / 0x02;\n        if (!(store_a & (((!store_a) * 0x0100) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) / 0x02) {\n            if (0x1f < (store_a & (((!store_a) * 0x0100) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x02)) {\n                var_c = 0x03;\n                var_d = storage_map_b[var_c];\n                if ((var_a + 0x20) + (store_a & (((!store_a) * 0x0100) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x02) > (0x20 + (var_a + 0x20))) {\n                    var_d = 0x20;\n                    bytes1 var_e = var_a.length;\n                    if (!var_a.length) {\n                        bytes1 var_f = (~((0x0100 ** (0x20 - (bytes1(var_a.length)))) - 0x01)) & (var_g);\n                        return abi.encodePacked(0x20, var_a.length, (~((0x0100 ** (0x20 - (bytes1(var_a.length)))) - 0x01)) & (var_g));\n                        return abi.encodePacked(0x20, var_a.length);\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory) {\n    uint256 length = uint256(bytes32(store_a)) / 2;\n    uint256 offset = 0x20 + (length + 0x1f) / 0x20 * 0x20;\n    if (length == 0) {\n        return \"\";\n    }\n    if (length > 0x1f) {\n        uint256 index = 0x03;\n        bytes32 data = storage_map_b[index];\n        if (offset + length > offset + 0x20) {\n            uint256 dataLength = uint256(bytes1(data));\n            if (dataLength == 0) {\n                bytes32 mask = ~(bytes32(0x0100 ** (0x20 - dataLength) - 1));\n                return abi.encodePacked(bytes32(0x20), dataLength, mask & data);\n            }\n        }\n    }\n    return \"\";\n}",
    "ground_truth": "function name() public view virtual returns (string memory) {\\n        return _name;\\n    }"
}