{
    "contract_address": "0xe3023a720d6f4d03b78763EDB3587f123565Cc6D",
    "heimdall_input": "function investorOrderIds(address arg0) public view returns (bytes memory) {\n        require(arg0 == (address(arg0)));\n        address var_a = address(arg0);\n        var_b = 0x08;\n        address var_c = 0x20 + (var_c + (0x20 * storage_map_c[var_a]));\n        address var_d = storage_map_c[var_a];\n        require(!storage_map_c[var_a]);\n        var_a = keccak256(var_a);\n        address var_e = storage_map_c[var_a];\n        require((var_c + 0x20) + (0x20 * storage_map_c[var_a]) > (0x20 + (var_c + 0x20)));\n        var_e = 0x20;\n        address var_f = var_c.length;\n        return abi.encodePacked(0x20, var_c.length);\n    }",
    "llm_output": "function investorOrderIds(address investor) public view returns (uint256[] memory) {\n    require(investor == address(investor), \"Invalid address\");\n    uint256 orderCount = investorOrders[investor].length;\n    uint256[] memory orderIds = new uint256[](orderCount);\n    for (uint256 i = 0; i < orderCount; i++) {\n        orderIds[i] = investorOrders[investor][i];\n    }\n    return orderIds;\n}",
    "ground_truth": "function investorOrderIds(address investor)\r\n        external\r\n        view\r\n        returns (uint256[] memory ids)\r\n    {\r\n        uint256[] memory arr = orderIds[investor];\r\n        return arr;\r\n    }"
}