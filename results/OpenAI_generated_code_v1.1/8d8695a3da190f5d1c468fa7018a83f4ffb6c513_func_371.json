{
    "contract_address": "0x8D8695A3Da190f5D1C468FA7018a83F4FFb6c513",
    "heimdall_input": "function Live_Uniswap() public {\n        require(address(msg.sender) == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(store_f / 0x010000000000000000000000000000000000000000)), \"trading is already open\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x17;\n        var_d = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n        store_l = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_l));\n        require(0x12, \"ERC20: approve to the zero address\");\n        require(!(0x174876e800 & (0x01 > 0x0afebff0bcb24aafef78f69a51539d748f2ff38ca3eda88b093e034f)), \"ERC20: approve to the zero address\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_l))), \"ERC20: approve to the zero address\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x22;\n        var_d = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_g = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        address var_e = address(this);\n        var_h = 0x02;\n        var_e = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_l)));\n        address var_h = keccak256(var_e);\n        storage_map_m[var_e] = 0x174876e800;\n        var_a = 0x174876e800;\n        emit Approval(address(this), address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_l))), 0x174876e800);\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        require(address(store_l / 0x01).code.length);\n        (bool success, bytes memory ret0) = address(store_l / 0x01).factory(var_b); // staticcall\n        uint256 var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x20);\n        require(var_i.length == (address(var_i.length)));\n        var_j = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        require(address(store_l / 0x01).code.length);\n        (bool success, bytes memory ret0) = address(store_l / 0x01).WETH(var_c); // staticcall\n        var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x20);\n        require(var_i.length == (address(var_i.length)));\n        var_k = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_d = address(this);\n        uint256 var_g = address(var_i.length);\n        require(address(var_i.length).code.length);\n        (bool success, bytes memory ret0) = address(var_i.length).{ value: 0 ether }Unresolved_c9c65396(var_d); // call\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x24;\n        var_d = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_g = 0x7265737300000000000000000000000000000000000000000000000000000000;\n        if (0x0a) {\n            if (0x0a == 0x01) {\n                if (0x0a == 0x02) {\n                    if (!0x12 > 0xff) {\n                        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_f = 0x11;\n                        if (!0x040000 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                            var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_f = 0x11;\n                            if (!((0x0a < 0x0b) & (0x12 < 0x4e)) | ((0x0a < 0x0133) & (0x12 < 0x20))) {\n                                if (0x12 > 0x01) {\n                                    if (!0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        var_f = 0x11;\n                                        if (!0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                            var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                            var_f = 0x11;\n                                            if (!0) {\n                                            }\n                                            if (!0x0de0b6b3a7640000 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                                                var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                                var_f = 0x11;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function Live_Uniswap() public {\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n    \n    bytes32 errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 errorOffset = 0x20;\n    uint256 errorLength = 0x20;\n    bytes32 errorMessage = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n    \n    require(!(bytes1(tradingOpen / 0x010000000000000000000000000000000000000000)), \"trading is already open\");\n    \n    errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x17;\n    errorMessage = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n    \n    tradingOpen = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d | uint96(tradingOpen);\n    \n    require(0x12, \"ERC20: approve to the zero address\");\n    require(!(0x174876e800 & (0x01 > 0x0afebff0bcb24aafef78f69a51539d748f2ff38ca3eda88b093e034f)), \"ERC20: approve to the zero address\");\n    \n    bytes32 revertSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 revertOffset = 0x11;\n    \n    require(address(this), \"ERC20: approve to the zero address\");\n    require(address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d | uint96(tradingOpen)), \"ERC20: approve to the zero address\");\n    \n    errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x22;\n    errorMessage = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    \n    bytes32 zeroAddress = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    address contractAddress = address(this);\n    uint256 zeroAddressOffset = 0x02;\n    contractAddress = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d | uint96(tradingOpen));\n    address zeroAddressHash = keccak256(abi.encodePacked(contractAddress));\n    \n    allowances[contractAddress] = 0x174876e800;\n    uint256 approvalAmount = 0x174876e800;\n    emit Approval(address(this), address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d | uint96(tradingOpen)), approvalAmount);\n    \n    bytes32 callSelector = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n    require(address(tradingOpen / 0x01).code.length > 0);\n    (bool success, bytes memory ret0) = address(tradingOpen / 0x01).staticcall(abi.encodeWithSelector(callSelector, errorOffset));\n    \n    uint256 ret0Length = ret0.length;\n    uint256 ret0Offset = ret0Length + 0x1f;\n    require(ret0Offset >= 0x20);\n    require(ret0Length == address(ret0Length));\n    \n    bytes32 wethSelector = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n    require(address(tradingOpen / 0x01).code.length > 0);\n    (success, ret0) = address(tradingOpen / 0x01).staticcall(abi.encodeWithSelector(wethSelector, errorLength));\n    \n    ret0Length = ret0.length;\n    ret0Offset = ret0Length + 0x1f;\n    require(ret0Offset >= 0x20);\n    require(ret0Length == address(ret0Length));\n    \n    bytes32 unresolvedSelector = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n    address thisAddress = address(this);\n    uint256 ret0Address = address(ret0Length);\n    require(address(ret0Length).code.length > 0);\n    (success, ret0) = address(ret0Length).call{value: 0 ether}(abi.encodeWithSelector(unresolvedSelector, thisAddress));\n    \n    errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x24;\n    errorMessage = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    \n    zeroAddress = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    \n    if (0x0a != 0) {\n        if (0x0a == 0x01) {\n            if (0x0a == 0x02) {\n                if (!(0x12 > 0xff)) {\n                    revertSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    revertOffset = 0x11;\n                    if (!(0x040000 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) {\n                        revertSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        revertOffset = 0x11;\n                        if (!((0x0a < 0x0b) & (0x12 < 0x4e)) | ((0x0a < 0x0133) & (0x12 < 0x20))) {\n                            if (0x12 > 0x01) {\n                                if (!(0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999)) {\n                                    revertSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                    revertOffset = 0x11;\n                                    if (!(0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999)) {\n                                        revertSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        revertOffset = 0x11;\n                                        if (!false) {\n                                        }\n                                        if (!(0x0de0b6b3a7640000 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)) {\n                                            revertSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                            revertOffset = 0x11;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "ground_truth": "function Live_Uniswap() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        firstBlock = block.number;\r\n    }"
}