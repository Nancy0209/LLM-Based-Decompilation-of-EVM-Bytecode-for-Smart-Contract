{
    "contract_address": "0xc89FB1a9e0817a046a6E1ff4E065A4e837Ba50C2",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender));\n        require(address(arg0));\n        require(arg1 > 0);\n        require(address(owner) == (address(msg.sender)));\n        require(address(owner) == (address(arg0)));\n        address var_a = address(msg.sender);\n        var_b = 0x05;\n        require(bytes1(storage_map_b[var_a]));\n        require(!bytes1(storage_map_b[var_a]));\n        require(!(bytes1(transferDelayEnabled)), \"Only one transfer per block allowed.\");\n        require(address(store_d) == (address(arg0)), \"Only one transfer per block allowed.\");\n        require(!(!(address(store_e)) == (address(arg0))), \"Only one transfer per block allowed.\");\n        var_a = tx.origin;\n        var_b = 0x06;\n        require(block.number > storage_map_b[var_a], \"Only one transfer per block allowed.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x24;\n        var_f = 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f;\n        var_g = 0x7765642e00000000000000000000000000000000000000000000000000000000;\n        var_a = tx.origin;\n        var_b = 0x06;\n        storage_map_b[var_a] = block.number;\n        require(!(address(store_e) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(store_e) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(store_e) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(store_f > store_g, \"SafeMath: multiplication overflow\");\n        require(0 - arg1, \"SafeMath: multiplication overflow\");\n        require((store_h == ((store_h * arg1) / arg1)) | !arg1, \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((store_h * arg1) / arg1) == store_h, \"SafeMath: multiplication overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x21;\n        var_f = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_g = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        uint256 var_i = 0x40 + var_i;\n        var_c = 0x1a;\n        var_j = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x64, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        uint256 var_g = var_i.length;\n        uint256 var_l = 0;\n        var_m = var_n;\n        var_l = 0;\n        require(0x64, \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        require(!(address(store_e) == (address(arg0))), \"SafeMath: addition overflow\");\n        require(!(address(store_e) == (address(arg0))), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x01;\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_e / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!((store_h * arg1) / 0x64), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x01;\n        require(!(storage_map_b[var_a] > (((store_h * arg1) / 0x64) + storage_map_b[var_a])), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(!(((store_h * arg1) / 0x64) + storage_map_b[var_a] < storage_map_b[var_a]), \"SafeMath: addition overflow\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x1b;\n        var_m = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(this);\n        var_b = 0x01;\n        storage_map_b[var_a] = ((store_h * arg1) / 0x64) + storage_map_b[var_a];\n        uint256 var_k = (store_h * arg1) / 0x64;\n        emit Transfer(address(msg.sender), address(this), (store_h * arg1) / 0x64);\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        var_i = 0x40 + var_i;\n        var_k = 0x1e;\n        var_o = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(arg1 > storage_map_b[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!((storage_map_b[var_a] - arg1) > storage_map_b[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        var_i = 0x40 + var_i;\n        var_p = 0x1e;\n        var_q = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(((store_h * arg1) / 0x64) > arg1), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_r = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_s = 0x20;\n        uint256 var_t = var_i.length;\n        uint256 var_u = 0;\n        var_v = var_n;\n        var_u = 0;\n        if (!(arg1 - ((store_h * arg1) / 0x64)) > arg1) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x11;\n            if (storage_map_b[var_a] > _maxTaxSwap) {\n            }\n            if (!store_f > store_j) {\n            }\n            if (!storage_map_b[var_a] > _taxSwapThreshold) {\n            }\n            require(!((arg1 - ((store_h * arg1) / 0x64)) > arg1), \"Exceeds the _maxTxAmount.\");\n        }\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x19;\n        var_m = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (store_f > store_m) {\n            if (0 - arg1) {\n            }\n            if (0 - arg1) {\n            }\n            require(store_f > store_m, \"Exceeds the _maxTxAmount.\");\n        }\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x19;\n        var_f = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (address(store_d) == (address(arg0))) {\n            if (address(store_d) == (address(arg0))) {\n            }\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_g = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public {\n    require(recipient == address(recipient));\n    require(msg.sender != address(0));\n    require(recipient != address(0));\n    require(amount > 0);\n    require(owner == msg.sender);\n    require(owner == recipient);\n    address sender = msg.sender;\n    uint256 mapSlot = 0x05;\n    require(storage_map_b[sender] != bytes1(0));\n    require(storage_map_b[sender] == bytes1(0));\n    require(!transferDelayEnabled, \"Only one transfer per block allowed.\");\n    require(store_d == recipient, \"Only one transfer per block allowed.\");\n    require(store_e != recipient, \"Only one transfer per block allowed.\");\n    address txOrigin = tx.origin;\n    mapSlot = 0x06;\n    require(block.number > storage_map_b[txOrigin], \"Only one transfer per block allowed.\");\n    uint256 errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 errorOffset = 0x20;\n    uint256 errorLength = 0x24;\n    bytes32 errorPart1 = 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f;\n    bytes32 errorPart2 = 0x7765642e00000000000000000000000000000000000000000000000000000000;\n    txOrigin = tx.origin;\n    mapSlot = 0x06;\n    storage_map_b[txOrigin] = block.number;\n    require(store_e != msg.sender, \"SafeMath: multiplication overflow\");\n    require(store_e != msg.sender, \"SafeMath: multiplication overflow\");\n    require(store_e != msg.sender, \"SafeMath: multiplication overflow\");\n    require(store_f > store_g, \"SafeMath: multiplication overflow\");\n    require(0 - amount != 0, \"SafeMath: multiplication overflow\");\n    require((store_h == (store_h * amount) / amount) || (amount == 0), \"SafeMath: multiplication overflow\");\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 errorArg = 0x11;\n    require(amount != 0, \"SafeMath: multiplication overflow\");\n    require((store_h * amount) / amount == store_h, \"SafeMath: multiplication overflow\");\n    errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x21;\n    errorPart1 = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n    errorPart2 = 0x7700000000000000000000000000000000000000000000000000000000000000;\n    uint256 temp = 0x40 + temp;\n    uint256 errorCode = 0x1a;\n    bytes32 errorData = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n    require(100 != 0, \"\");\n    errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    uint256 stringLength = temp.length;\n    uint256 i = 0;\n    bytes memory memData = new bytes(0);\n    i = 0;\n    require(100 != 0, \"SafeMath: addition overflow\");\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorArg = 0x12;\n    require(store_e != recipient, \"SafeMath: addition overflow\");\n    require(store_e != recipient, \"SafeMath: addition overflow\");\n    address contractAddress = address(this);\n    mapSlot = 0x01;\n    require(store_e / 0x01000000000000000000000000000000000000000000 != bytes1(0), \"SafeMath: addition overflow\");\n    require(store_e / 0x01000000000000000000000000000000000000000000 != bytes1(0), \"SafeMath: addition overflow\");\n    require(store_e / 0x01000000000000000000000000000000000000000000 != bytes1(0), \"SafeMath: addition overflow\");\n    require(store_e / 0x01000000000000000000000000000000000000000000 != bytes1(0), \"SafeMath: addition overflow\");\n    require(store_e / 0x01000000000000000000000000000000000000000000 != bytes1(0), \"SafeMath: addition overflow\");\n    require((store_h * amount) / 100 != 0, \"SafeMath: addition overflow\");\n    contractAddress = address(this);\n    mapSlot = 0x01;\n    require(storage_map_b[contractAddress] <= ((store_h * amount) / 100) + storage_map_b[contractAddress], \"SafeMath: addition overflow\");\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorArg = 0x11;\n    require(((store_h * amount) / 100) + storage_map_b[contractAddress] >= storage_map_b[contractAddress], \"SafeMath: addition overflow\");\n    errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x1b;\n    errorPart1 = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n    contractAddress = address(this);\n    mapSlot = 0x01;\n    storage_map_b[contractAddress] += (store_h * amount) / 100;\n    uint256 taxAmount = (store_h * amount) / 100;\n    emit Transfer(msg.sender, address(this), taxAmount);\n    sender = msg.sender;\n    mapSlot = 0x01;\n    temp = 0x40 + temp;\n    errorCode = 0x1e;\n    errorData = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n    require(amount <= storage_map_b[sender], \"\");\n    require(storage_map_b[sender] - amount <= storage_map_b[sender], \"\");\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorArg = 0x11;\n    sender = msg.sender;\n    mapSlot = 0x01;\n    storage_map_b[sender] -= amount;\n    temp = 0x40 + temp;\n    uint256 errorType = 0x1e;\n    bytes32 errorInfo = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n    require(taxAmount <= amount, \"\");\n    uint256 selector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 offset = 0x20;\n    stringLength = temp.length;\n    uint256 j = 0;\n    bytes memory memBuffer = new bytes(0);\n    j = 0;\n    if (!(amount - taxAmount <= amount)) {\n        errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        errorArg = 0x11;\n        if (storage_map_b[contractAddress] > _maxTaxSwap) {\n        }\n        if (!(store_f > store_j)) {\n        }\n        if (!(storage_map_b[contractAddress] > _taxSwapThreshold)) {\n        }\n        require(amount - taxAmount <= amount, \"Exceeds the _maxTxAmount.\");\n    }\n    require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\n    selector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    offset = 0x20;\n    errorLength = 0x19;\n    errorPart1 = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n    if (store_f > store_m) {\n        if (0 - amount != 0) {\n        }\n        if (0 - amount != 0) {\n        }\n        require(store_f > store_m, \"Exceeds the _maxTxAmount.\");\n    }\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorArg = 0x12;\n    require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\n    selector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    offset = 0x20;\n    errorLength = 0x19;\n    errorPart1 = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n    if (store_d == recipient) {\n        if (store_d == recipient) {\n        }\n    }\n    selector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    offset = 0x20;\n    errorLength = 0x29;\n    errorPart1 = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n    errorPart2 = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n    selector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    offset = 0x20;\n    errorLength = 0x23;\n    errorPart1 = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n    errorPart2 = 0x6573730000000000000000000000000000000000000000000000000000000000;\n    selector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    offset = 0x20;\n    errorLength = 0x25;\n    errorPart1 = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n    errorPart2 = 0x6472657373000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}