{
    "contract_address": "0xEA96F358096DB436A74f5C974F59fdE3Bc5185e7",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender), \"You are trying to transfer more than your balance\");\n        require(address(arg0), \"You are trying to transfer more than your balance\");\n        address var_a = address(msg.sender);\n        var_b = 0x18;\n        require(!(arg1 > storage_map_b[var_a]), \"You are trying to transfer more than your balance\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x31;\n        var_f = 0x596f752061726520747279696e6720746f207472616e73666572206d6f726520;\n        var_g = 0x7468616e20796f75722062616c616e6365000000000000000000000000000000;\n        var_a = address(msg.sender);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = address(msg.sender);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(address(uniPairAddy) == (address(msg.sender)), \"ERC20: transfer to the zero address\");\n        require(!(arg1 > _maxxTransferSize), \"ERC20: transfer to the zero address\");\n        var_a = address(msg.sender);\n        var_b = 0x17;\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(!(arg1 > _maxxTrxSize), \"ERC20: transfer to the zero address\");\n        var_a = address(msg.sender);\n        var_b = 0x17;\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(!(address(uniPairAddy) == (address(arg0))), \"ERC20: transfer to the zero address\");\n        require(!(address(uniPairAddy) == (address(arg0))), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        var_a = address(msg.sender);\n        var_b = 0x18;\n        require(!((storage_map_b[var_a] - arg1) > storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(msg.sender);\n        var_b = 0x18;\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        var_b = 0x17;\n        require(!(bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = address(arg0);\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] > (arg1 + storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(arg0);\n        var_b = 0x18;\n        storage_map_b[var_a] = arg1 + storage_map_b[var_a];\n        uint256 var_c = arg1;\n        emit Transfer(address(msg.sender), address(arg0), arg1);\n        var_c = 0x01;\n        return 0x01;\n        var_a = address(arg0);\n        var_b = 0x17;\n        require(!(bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(address(arg0) - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(address(msg.sender) - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(!(store_g > 0), \"ERC20: transfer to the zero address\");\n        require(address(arg0) - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(address(msg.sender) - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(store_h, \"ERC20: transfer to the zero address\");\n        require((store_g == ((store_g * (arg1 / store_h)) / (arg1 / store_h))) | (!arg1 / store_h), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] > ((store_g * (arg1 / store_h)) + storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        storage_map_b[var_a] = (store_g * (arg1 / store_h)) + storage_map_b[var_a];\n        var_c = store_g * (arg1 / store_h);\n        emit Transfer(address(msg.sender), address(this), store_g * (arg1 / store_h));\n        require(!(store_i > 0), \"ERC20: transfer to the zero address\");\n        require(address(arg0) - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(address(msg.sender) - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(!(store_g > store_i), \"ERC20: transfer to the zero address\");\n        require(store_h, \"ERC20: transfer to the zero address\");\n        require((store_i == ((store_i * (arg1 / store_h)) / (arg1 / store_h))) | (!arg1 / store_h), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(address(this), \"ERC20: transfer to the zero address\");\n        require(0xdead, \"ERC20: transfer to the zero address\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x18;\n        require(!((store_i * (arg1 / store_h)) > storage_map_b[var_a]), \"You are trying to transfer more than your balance\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x31;\n        var_f = 0x596f752061726520747279696e6720746f207472616e73666572206d6f726520;\n        var_g = 0x7468616e20796f75722062616c616e6365000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(address(uniPairAddy) == (address(this)), \"ERC20: transfer to the zero address\");\n        require(!((store_i * (arg1 / store_h)) > _maxxTransferSize), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(!((store_i * (arg1 / store_h)) > _maxxTrxSize), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(!(address(uniPairAddy) == 0xdead), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] - (store_i * (arg1 / store_h)) > storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        storage_map_b[var_a] = storage_map_b[var_a] - (store_i * (arg1 / store_h));\n        var_b = 0x17;\n        require(!(bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0xdead;\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] > ((store_i * (arg1 / store_h)) + storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = 0xdead;\n        var_b = 0x17;\n        require(!(bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(0xdead - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(!(store_j > 0), \"ERC20: transfer to the zero address\");\n        require(0xdead - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(store_h, \"ERC20: transfer to the zero address\");\n        require((store_j == ((store_j * ((store_i * (arg1 / store_h)) / store_h)) / ((store_i * (arg1 / store_h)) / store_h))) | (!(store_i * (arg1 / store_h)) / store_h), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] > ((store_j * ((store_i * (arg1 / store_h)) / store_h)) + storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        storage_map_b[var_a] = (store_j * ((store_i * (arg1 / store_h)) / store_h)) + storage_map_b[var_a];\n        var_c = store_j * ((store_i * (arg1 / store_h)) / store_h);\n        emit Transfer(address(this), address(this), store_j * ((store_i * (arg1 / store_h)) / store_h));\n        require(!(store_i > 0), \"ERC20: transfer to the zero address\");\n        require(0xdead - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(!(store_j > store_i), \"ERC20: transfer to the zero address\");\n        require(store_h, \"ERC20: transfer to the zero address\");\n        require((store_i == ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / ((store_i * (arg1 / store_h)) / store_h))) | (!(store_i * (arg1 / store_h)) / store_h), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(address(this), \"ERC20: transfer to the zero address\");\n        require(0xdead, \"ERC20: transfer to the zero address\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x18;\n        require(!((store_i * ((store_i * (arg1 / store_h)) / store_h)) > storage_map_b[var_a]), \"You are trying to transfer more than your balance\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x31;\n        var_f = 0x596f752061726520747279696e6720746f207472616e73666572206d6f726520;\n        var_g = 0x7468616e20796f75722062616c616e6365000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(address(uniPairAddy) == (address(this)), \"ERC20: transfer to the zero address\");\n        require(!((store_i * ((store_i * (arg1 / store_h)) / store_h)) > _maxxTransferSize), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(!((store_i * ((store_i * (arg1 / store_h)) / store_h)) > _maxxTrxSize), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(!(address(uniPairAddy) == 0xdead), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] - (store_i * ((store_i * (arg1 / store_h)) / store_h)) > storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        storage_map_b[var_a] = storage_map_b[var_a] - (store_i * ((store_i * (arg1 / store_h)) / store_h));\n        var_b = 0x17;\n        require(!(bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0xdead;\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] > ((store_i * ((store_i * (arg1 / store_h)) / store_h)) + storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = 0xdead;\n        var_b = 0x17;\n        require(!(bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(0xdead - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(!(store_j > 0), \"ERC20: transfer to the zero address\");\n        require(0xdead - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(store_h, \"ERC20: transfer to the zero address\");\n        require((store_j == ((store_j * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h))) | (!(store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] > ((store_j * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) + storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        storage_map_b[var_a] = (store_j * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) + storage_map_b[var_a];\n        var_c = store_j * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h);\n        emit Transfer(address(this), address(this), store_j * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h));\n        require(!(store_i > 0), \"ERC20: transfer to the zero address\");\n        require(0xdead - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(!(store_j > store_i), \"ERC20: transfer to the zero address\");\n        require(store_h, \"ERC20: transfer to the zero address\");\n        require((store_i == ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h))) | (!(store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(address(this), \"ERC20: transfer to the zero address\");\n        require(0xdead, \"ERC20: transfer to the zero address\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x18;\n        require(!((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) > storage_map_b[var_a]), \"You are trying to transfer more than your balance\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x31;\n        var_f = 0x596f752061726520747279696e6720746f207472616e73666572206d6f726520;\n        var_g = 0x7468616e20796f75722062616c616e6365000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(address(uniPairAddy) == (address(this)), \"ERC20: transfer to the zero address\");\n        require(!((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) > _maxxTransferSize), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(!((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) > _maxxTrxSize), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(!(address(uniPairAddy) == 0xdead), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] - (store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) > storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        storage_map_b[var_a] = storage_map_b[var_a] - (store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h));\n        var_b = 0x17;\n        require(!(bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0xdead;\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] > ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) + storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = 0xdead;\n        var_b = 0x17;\n        require(!(bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(0xdead - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(!(store_j > 0), \"ERC20: transfer to the zero address\");\n        require(0xdead - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(store_h, \"ERC20: transfer to the zero address\");\n        require((store_j == ((store_j * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h))) | (!(store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] > ((store_j * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) + storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        storage_map_b[var_a] = (store_j * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) + storage_map_b[var_a];\n        var_c = store_j * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h);\n        emit Transfer(address(this), address(this), store_j * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h));\n        require(!(store_i > 0), \"ERC20: transfer to the zero address\");\n        require(0xdead - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(!(store_j > store_i), \"ERC20: transfer to the zero address\");\n        require(store_h, \"ERC20: transfer to the zero address\");\n        require((store_i == ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h))) | (!(store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(address(this), \"ERC20: transfer to the zero address\");\n        require(0xdead, \"ERC20: transfer to the zero address\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x18;\n        require(!((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) > storage_map_b[var_a]), \"You are trying to transfer more than your balance\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x31;\n        var_f = 0x596f752061726520747279696e6720746f207472616e73666572206d6f726520;\n        var_g = 0x7468616e20796f75722062616c616e6365000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(address(uniPairAddy) == (address(this)), \"ERC20: transfer to the zero address\");\n        require(!((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) > _maxxTransferSize), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(!((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) > _maxxTrxSize), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(bytes1(storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        require(!(address(uniPairAddy) == 0xdead), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x17;\n        require(!(!bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        require(!(!bytes1(store_f)), \"ERC20: transfer to the zero address\");\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] - (store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) > storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        storage_map_b[var_a] = storage_map_b[var_a] - (store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h));\n        var_b = 0x17;\n        require(!(bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0xdead;\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] > ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) + storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = 0xdead;\n        var_b = 0x17;\n        require(!(bytes1(storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        require(0xdead - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(!(store_j > 0), \"ERC20: transfer to the zero address\");\n        require(0xdead - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(store_h, \"ERC20: transfer to the zero address\");\n        require((store_j == ((store_j * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) / ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h))) | (!(store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] > ((store_j * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) + storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(this);\n        var_b = 0x18;\n        storage_map_b[var_a] = (store_j * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) + storage_map_b[var_a];\n        var_c = store_j * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h);\n        emit Transfer(address(this), address(this), store_j * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h));\n        require(!(store_i > 0), \"ERC20: transfer to the zero address\");\n        require(0xdead - (address(uniPairAddy)), \"ERC20: transfer to the zero address\");\n        require(!(store_j > store_i), \"ERC20: transfer to the zero address\");\n        require(store_h, \"ERC20: transfer to the zero address\");\n        require((store_i == ((store_i * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) / ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h))) | (!(store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h), \"ERC20: transfer to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(address(this), \"ERC20: transfer to the zero address\");\n        require(0xdead, \"ERC20: transfer to the zero address\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x18;\n        require(!((store_i * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) > storage_map_b[var_a]), \"You are trying to transfer more than your balance\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x31;\n        var_f = 0x596f752061726520747279696e6720746f207472616e73666572206d6f726520;\n        var_g = 0x7468616e20796f75722062616c616e6365000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x17;\n        if (storage_map_b[var_a]) {\n            if (storage_map_b[var_a]) {\n                var_a = address(this);\n                var_b = 0x17;\n                if (storage_map_b[var_a]) {\n                    if (storage_map_b[var_a]) {\n                        if (storage_map_b[var_a]) {\n                            if (storage_map_b[var_a]) {\n                                if (address(uniPairAddy) == (address(this))) {\n                                    if (!(store_i * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) > _maxxTransferSize) {\n                                        var_a = address(this);\n                                        var_b = 0x17;\n                                        if (storage_map_b[var_a]) {\n                                            if (storage_map_b[var_a]) {\n                                                require(!(!bytes1(storage_map_b[var_a])), \"TX Limit Exceeded\");\n                                                var_a = address(this);\n                                                var_b = 0x17;\n                                                require(!(!bytes1(storage_map_b[var_a])), \"TX Limit Exceeded\");\n                                                require(!(!bytes1(storage_map_b[var_a])), \"TX Limit Exceeded\");\n                                                require(!(!bytes1(storage_map_b[var_a])), \"TX Limit Exceeded\");\n                                                var_a = address(this);\n                                                var_b = 0x17;\n                                                require(!(!bytes1(storage_map_b[var_a])), \"TX Limit Exceeded\");\n                                                var_a = address(this);\n                                                var_b = 0x18;\n                                                require(!(!bytes1(storage_map_b[var_a])), \"TX Limit Exceeded\");\n                                                require(address(uniPairAddy) == (address(this)), \"TX Limit Exceeded\");\n                                                require(!((store_i * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) > _maxxTransferSize), \"TX Limit Exceeded\");\n                                                require(bytes1(storage_map_b[var_a]), \"TX Limit Exceeded\");\n                                                require(bytes1(storage_map_b[var_a]), \"TX Limit Exceeded\");\n                                                require(!((store_i * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) > _maxxTrxSize), \"TX Limit Exceeded\");\n                                                require(bytes1(storage_map_b[var_a]), \"TX Limit Exceeded\");\n                                                require(bytes1(storage_map_b[var_a]), \"TX Limit Exceeded\");\n                                                var_a = address(this);\n                                                var_b = 0x18;\n                                                require(!(!bytes1(storage_map_b[var_a])), \"TX Limit Exceeded\");\n                                                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                                var_h = 0x11;\n                                                var_a = address(this);\n                                                var_b = 0x18;\n                                                storage_map_b[var_a] = storage_map_b[var_a] - (store_i * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h));\n                                                var_b = 0x17;\n                                                require(!(!bytes1(store_f)), \"TX Limit Exceeded\");\n                                                var_a = 0xdead;\n                                                var_b = 0x18;\n                                                require(!(!bytes1(store_f)), \"TX Limit Exceeded\");\n                                                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                                var_h = 0x11;\n                                                var_a = 0xdead;\n                                                var_b = 0x17;\n                                                require(!(!bytes1(store_f)), \"TX Limit Exceeded\");\n                                                require(!(!bytes1(store_f)), \"TX Limit Exceeded\");\n                                                require(!(!bytes1(store_f)), \"TX Limit Exceeded\");\n                                                require(!(!bytes1(store_f)), \"TX Limit Exceeded\");\n                                                require(!(!bytes1(store_f)), \"TX Limit Exceeded\");\n                                            }\n                                            store_f = 0x01 | (uint248(store_f));\n                                            require(!(!bytes1(store_f)), \"TX Limit Exceeded\");\n                                            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                            var_h = 0x11;\n                                            require(!(storage_map_b[var_a] - (store_i * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) > storage_map_b[var_a]), \"TX Limit Exceeded\");\n                                            require(!(bytes1(storage_map_b[var_a])), \"TX Limit Exceeded\");\n                                            require(!(storage_map_b[var_a] > ((store_i * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) + storage_map_b[var_a])), \"TX Limit Exceeded\");\n                                        }\n                                    }\n                                }\n                            }\n                            require(!(bytes1(storage_map_b[var_a])), \"TX Limit Exceeded\");\n                            require(0xdead - (address(uniPairAddy)), \"TX Limit Exceeded\");\n                            require(!(store_j > 0), \"TX Limit Exceeded\");\n                        }\n                    }\n                }\n                require(0xdead - (address(uniPairAddy)), \"TX Limit Exceeded\");\n            }\n            require(!(store_k > (0x01 + store_k)), \"TX Limit Exceeded\");\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        require(!((store_i * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) > _maxxTrxSize), \"TX Limit Exceeded\");\n        require(!((store_i * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) > _maxxTrxSize), \"TX Limit Exceeded\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        require(!((store_i * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) > _maxxTransferSize), \"TX Limit Exceeded\");\n        require(!((store_i * ((store_i * ((store_i * ((store_i * ((store_i * (arg1 / store_h)) / store_h)) / store_h)) / store_h)) / store_h)) > _maxxTransferSize), \"TX Limit Exceeded\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        if (0xdead == 0xdead) {\n        }\n        require(bytes1(uniPairAddy / 0x010000000000000000000000000000000000000000), \"enabledTrading\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x0e;\n        var_f = 0x656e61626c656454726164696e67000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x12;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x11;\n        var_f = 0x5458204c696d6974204578636565646564000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_full_output": "The provided code is extremely lengthy, repetitive, and appears to be a decompiled version of a Solidity contract. Decompiled code often contains redundant and obfuscated logic, making it difficult to interpret. Below, I will attempt to analyze and refine the code step-by-step.\n\n---\n\n### Analysis:\nThe function appears to implement a token transfer mechanism, likely for an ERC20 token. However, the code is heavily obfuscated, with redundant checks, unclear variable names, and excessive use of `require` statements. The function seems to enforce transfer limits, validate addresses, and update balances while emitting transfer events.\n\n---\n\n### Rename Plan:\n| Original Name       | Proposed Name          | Description                                   |\n|---------------------|------------------------|-----------------------------------------------|\n| `arg0`              | `to`                  | The recipient address for the transfer.       |\n| `arg1`              | `amount`              | The amount of tokens to transfer.             |\n| `storage_map_b`     | `balances`            | Mapping of addresses to their token balances. |\n| `uniPairAddy`       | `uniswapPairAddress`  | Address of the Uniswap pair (if applicable).  |\n| `_maxxTransferSize` | `maxTransferSize`     | Maximum allowed transfer size.                |\n| `_maxxTrxSize`      | `maxTransactionSize`  | Maximum allowed transaction size.             |\n| `store_f`           | `isTradingEnabled`    | Boolean flag for trading status.              |\n| `store_g`           | `reserveG`            | Reserve variable for calculations.            |\n| `store_h`           | `reserveH`            | Reserve variable for calculations.            |\n| `store_i`           | `reserveI`            | Reserve variable for calculations.            |\n| `store_j`           | `reserveJ`            | Reserve variable for calculations.            |\n| `store_k`           | `reserveK`            | Reserve variable for calculations.            |\n\n---\n\n### Refined Code:\nBelow is the refined version of the code, focusing on clarity, removing redundancy, and adhering to Solidity best practices. Note that some parts of the original code are unclear or nonsensical, so assumptions have been made to simplify and improve readability.\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Token {\n    mapping(address => uint256) private balances;\n    address public uniswapPairAddress;\n    uint256 public maxTransferSize;\n    uint256 public maxTransactionSize;\n    bool public isTradingEnabled;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor() {\n        isTradingEnabled = true;\n    }\n\n    function transfer(address to, uint256 amount) public returns (bool) {\n        address from = msg.sender;\n\n        // Ensure the recipient address is valid\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        // Ensure trading is enabled\n        require(isTradingEnabled, \"Trading is currently disabled\");\n\n        // Ensure the sender has enough balance\n        require(balances[from] >= amount, \"Insufficient balance\");\n\n        // Ensure the transfer amount does not exceed the maximum transfer size\n        require(amount <= maxTransferSize, \"Transfer amount exceeds the maximum limit\");\n\n        // Ensure the transaction size does not exceed the maximum transaction size\n        require(amount <= maxTransactionSize, \"Transaction size exceeds the maximum limit\");\n\n        // Update balances\n        balances[from] -= amount;\n        balances[to] += amount;\n\n        // Emit the transfer event\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    // Additional functions to set parameters (e.g., maxTransferSize, maxTransactionSize, etc.)\n    function setMaxTransferSize(uint256 _maxTransferSize) external {\n        maxTransferSize = _maxTransferSize;\n    }\n\n    function setMaxTransactionSize(uint256 _maxTransactionSize) external {\n        maxTransactionSize = _maxTransactionSize;\n    }\n\n    function setTradingEnabled(bool _isTradingEnabled) external {\n        isTradingEnabled = _isTradingEnabled;\n    }\n\n    function balanceOf(address account) external view returns (uint256) {\n        return balances[account];\n    }\n}\n```\n\n---\n\n### Explanation of Refinements:\n1. **Removed Redundancy**: The original code had repetitive `require` statements and unnecessary variables. These were removed to simplify the logic.\n2. **Meaningful Names**: Variables and parameters were renamed to meaningful names to improve readability.\n3. **ERC20 Compliance**: The refined code adheres to the ERC20 standard for the `transfer` function.\n4. **Trading Flag**: Added a `isTradingEnabled` flag to control whether transfers are allowed.\n5. **Balance Updates**: Simplified the logic for updating balances.\n6. **Event Emission**: Ensured the `Transfer` event is emitted as per the ERC20 standard.\n\n---\n\n### Notes:\n- The original code contains many unclear and redundant operations, which may indicate obfuscation or an attempt to hide malicious behavior.\n- The refined code assumes standard ERC20 behavior and removes unnecessary complexity.\n- If additional functionality is required (e.g., handling Uniswap pairs), it can be added explicitly with clear logic.",
    "llm_refined_code": "Model did not follow the expected output format.",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}"
}