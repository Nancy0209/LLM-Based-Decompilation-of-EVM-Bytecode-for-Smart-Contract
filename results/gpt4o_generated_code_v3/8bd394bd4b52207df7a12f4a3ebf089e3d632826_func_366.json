{
    "contract_address": "0x8bD394Bd4b52207Df7a12F4a3EBF089e3d632826",
    "heimdall_input": "function rescuesERC20(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(getOwner)), \"!OWNER\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x06;\n        var_d = 0x214f574e45520000000000000000000000000000000000000000000000000000;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(this);\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require((arg1 == ((arg1 * var_e.length) / var_e.length)) | !var_e.length);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x64);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        var_h = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        address var_c = address(store_m);\n        uint256 var_d = (arg1 * var_e.length) / 0x64;\n        (bool success, bytes memory ret0) = address(arg0).{ value: 0 ether }Unresolved_a9059cbb(var_c); // call\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == var_e.length);\n    }",
    "llm_full_output": "### Analysis:\nThe function appears to be designed to allow the contract owner to rescue or transfer ERC20 tokens from the contract to a specified address. It includes checks for ownership and ensures the transfer amount is valid.\n\n### Rename Plan:\n- `arg0` -> `tokenAddress` (The address of the ERC20 token to be rescued)\n- `arg1` -> `amount` (The amount of tokens to be rescued)\n- `getOwner` -> `owner` (The function or variable that retrieves the contract owner)\n- `var_a` -> `errorSelector` (Used for error handling)\n- `var_b` -> `contractAddress` (The address of the contract itself)\n- `var_c` -> `errorMessageLength` (Length of the error message)\n- `var_d` -> `errorMessage` (The error message itself)\n- `var_e` -> `balance` (The balance of the ERC20 token in the contract)\n- `var_f` -> `errorSelector2` (Another error selector for handling)\n- `var_g` -> `errorCode` (Error code for specific failure cases)\n- `var_h` -> `transferSelector` (Function selector for ERC20 transfer)\n- `store_m` -> `recipient` (The address to which the tokens are sent)\n\n### Refined Code:\n```solidity\npragma solidity ^0.8.0;\n\ncontract RescueERC20 {\n    address public owner;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"!OWNER\");\n        _;\n    }\n\n    function rescuesERC20(address tokenAddress, uint256 amount, address recipient) public onlyOwner {\n        require(tokenAddress != address(0), \"Invalid token address\");\n        require(recipient != address(0), \"Invalid recipient address\");\n\n        // Check the token balance of the contract\n        bytes4 balanceOfSelector = bytes4(keccak256(\"balanceOf(address)\"));\n        (bool success, bytes memory balanceData) = tokenAddress.staticcall(abi.encodeWithSelector(balanceOfSelector, address(this)));\n        require(success, \"Failed to fetch token balance\");\n        uint256 balance = abi.decode(balanceData, (uint256));\n\n        // Ensure the requested amount is valid\n        require(amount <= balance, \"Insufficient token balance\");\n\n        // Transfer the tokens to the recipient\n        bytes4 transferSelector = bytes4(keccak256(\"transfer(address,uint256)\"));\n        (bool transferSuccess, ) = tokenAddress.call(abi.encodeWithSelector(transferSelector, recipient, amount));\n        require(transferSuccess, \"Token transfer failed\");\n    }\n}\n```\n\n### Explanation of Refinements:\n1. **Ownership Check:** Added a modifier `onlyOwner` to simplify ownership validation.\n2. **Error Handling:** Improved error messages for clarity and added checks for invalid addresses.\n3. **Token Balance Check:** Used `balanceOf` to fetch the contract's token balance and ensure the requested amount is valid.\n4. **Token Transfer:** Used the `transfer` function selector to send tokens to the recipient.\n5. **Parameter Addition:** Added `recipient` as a parameter to specify the destination address for the rescued tokens.\n6. **Code Clarity:** Removed unnecessary variables and replaced them with meaningful names and direct logic.",
    "llm_refined_code": "pragma solidity ^0.8.0;\n\ncontract RescueERC20 {\n    address public owner;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"!OWNER\");\n        _;\n    }\n\n    function rescuesERC20(address tokenAddress, uint256 amount, address recipient) public onlyOwner {\n        require(tokenAddress != address(0), \"Invalid token address\");\n        require(recipient != address(0), \"Invalid recipient address\");\n\n        // Check the token balance of the contract\n        bytes4 balanceOfSelector = bytes4(keccak256(\"balanceOf(address)\"));\n        (bool success, bytes memory balanceData) = tokenAddress.staticcall(abi.encodeWithSelector(balanceOfSelector, address(this)));\n        require(success, \"Failed to fetch token balance\");\n        uint256 balance = abi.decode(balanceData, (uint256));\n\n        // Ensure the requested amount is valid\n        require(amount <= balance, \"Insufficient token balance\");\n\n        // Transfer the tokens to the recipient\n        bytes4 transferSelector = bytes4(keccak256(\"transfer(address,uint256)\"));\n        (bool transferSuccess, ) = tokenAddress.call(abi.encodeWithSelector(transferSelector, recipient, amount));\n        require(transferSuccess, \"Token transfer failed\");\n    }\n}\n```\n\n### Explanation of Refinements:\n1. **Ownership Check:** Added a modifier `onlyOwner` to simplify ownership validation.\n2. **Error Handling:** Improved error messages for clarity and added checks for invalid addresses.\n3. **Token Balance Check:** Used `balanceOf` to fetch the contract's token balance and ensure the requested amount is valid.\n4. **Token Transfer:** Used the `transfer` function selector to send tokens to the recipient.\n5. **Parameter Addition:** Added `recipient` as a parameter to specify the destination address for the rescued tokens.\n6. **Code Clarity:** Removed unnecessary variables and replaced them with meaningful names and direct logic.",
    "ground_truth": "function rescuesERC20(address _address, uint256 percent) external onlyOwner {\\r\\n        uint256 _amount = IERC20(_address).balanceOf(address(this)).mul(percent).div(100);\\r\\n        IERC20(_address).transfer(development_receiver, _amount);\\r\\n    }"
}