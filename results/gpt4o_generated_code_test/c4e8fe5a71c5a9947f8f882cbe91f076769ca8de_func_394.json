{
    "contract_address": "0xC4e8fE5a71C5a9947F8f882CbE91F076769ca8de",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender), \"SafeMath: multiplication overflow\");\n        require(address(arg0), \"SafeMath: multiplication overflow\");\n        require(arg1 > 0, \"SafeMath: multiplication overflow\");\n        require(address(owner) == (address(msg.sender)), \"SafeMath: multiplication overflow\");\n        require(!(!(address(owner)) == (address(arg0))), \"SafeMath: multiplication overflow\");\n        require(store_b > store_c, \"SafeMath: multiplication overflow\");\n        require(!(store_b > store_c), \"SafeMath: multiplication overflow\");\n        require(!(!store_b > store_d), \"SafeMath: multiplication overflow\");\n        require(0 - arg1, \"SafeMath: multiplication overflow\");\n        require((store_e == ((store_e * arg1) / arg1)) | !arg1, \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((store_e * arg1) / arg1) == store_e, \"SafeMath: multiplication overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x21;\n        var_f = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_g = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        uint256 var_h = 0x40 + var_h;\n        var_c = 0x1a;\n        var_i = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x64, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        uint256 var_g = var_h.length;\n        uint256 var_k = 0;\n        var_l = var_m;\n        var_k = 0;\n        require(0x64, \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        require(bytes1(transferDelayEnabled / 0x01000000000000000000000000000000000000000000), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        require(!(bytes1(transferDelayEnabled / 0x010000000000000000000000000000000000000000000000)), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        require(address(store_g) == (address(arg0)), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        require(!(!(address(transferDelayEnabled)) == (address(arg0))), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        address var_a = tx.origin;\n        var_n = 0x08;\n        require(block.number > storage_map_h[var_a], \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x48;\n        var_l = 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c;\n        var_o = 0x65642e204f6e6c79206f6e652070757263686173652070657220626c6f636b20;\n        var_p = 0x616c6c6f7765642e000000000000000000000000000000000000000000000000;\n        var_a = tx.origin;\n        var_n = 0x08;\n        storage_map_h[var_a] = block.number;\n        require(!(address(transferDelayEnabled) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(transferDelayEnabled) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(transferDelayEnabled) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(transferDelayEnabled) == (address(arg0))), \"SafeMath: addition overflow\");\n        require(!(address(transferDelayEnabled) == (address(arg0))), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_n = 0x05;\n        require(!(!bytes1(transferDelayEnabled / 0x010000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(transferDelayEnabled / 0x010000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(transferDelayEnabled / 0x010000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(transferDelayEnabled / 0x010000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(transferDelayEnabled / 0x010000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(transferDelayEnabled / 0x010000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!((store_e * arg1) / 0x64), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_n = 0x05;\n        require(!(storage_map_h[var_a] > (((store_e * arg1) / 0x64) + storage_map_h[var_a])), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        require(!(((store_e * arg1) / 0x64) + storage_map_h[var_a] < storage_map_h[var_a]), \"SafeMath: addition overflow\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x1b;\n        var_l = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(this);\n        var_n = 0x05;\n        storage_map_h[var_a] = ((store_e * arg1) / 0x64) + storage_map_h[var_a];\n        uint256 var_j = (store_e * arg1) / 0x64;\n        emit Transfer(address(msg.sender), address(this), (store_e * arg1) / 0x64);\n        var_a = address(msg.sender);\n        var_n = 0x05;\n        var_h = 0x40 + var_h;\n        var_j = 0x1e;\n        var_q = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(arg1 > storage_map_h[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!((storage_map_h[var_a] - arg1) > storage_map_h[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        var_a = address(msg.sender);\n        var_n = 0x05;\n        storage_map_h[var_a] = storage_map_h[var_a] - arg1;\n        var_h = 0x40 + var_h;\n        var_r = 0x1e;\n        var_s = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(((store_e * arg1) / 0x64) > arg1), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_t = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        uint256 var_u = var_h.length;\n        uint256 var_v = 0;\n        var_w = var_m;\n        var_v = 0;\n        require(!((arg1 - ((store_e * arg1) / 0x64)) > arg1), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        var_a = address(store_i);\n        var_n = 0x05;\n        require(0 - storage_map_h[var_a], \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require((0x03e8 == ((0x03e8 * storage_map_h[var_a]) / storage_map_h[var_a])) | !storage_map_h[var_a], \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        require(storage_map_h[var_a], \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require((0x03e8 * storage_map_h[var_a]) / storage_map_h[var_a] == 0x03e8, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_h = 0x40 + var_h;\n        var_j = 0x1e;\n        var_q = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!((0x03e8 * storage_map_h[var_a]) > _maxTaxSwap), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_r = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        uint256 var_o = var_h.length;\n        uint256 var_x = 0;\n        var_p = var_m;\n        var_x = 0;\n        if (!(_maxTaxSwap - (0x03e8 * storage_map_h[var_a])) > _maxTaxSwap) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_b = 0x11;\n            require(!((_maxTaxSwap - (0x03e8 * storage_map_h[var_a])) > _maxTaxSwap), \"SafeMath: multiplication overflow\");\n        }\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x21;\n        var_l = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_o = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        if (!storage_map_h[var_a] > _taxSwapThreshold) {\n            if (!storage_map_h[var_a] > _taxSwapThreshold) {\n                if (!storage_map_h[var_a] > _taxSwapThreshold) {\n                }\n            }\n        }\n        if (!transferDelayEnabled / 0x0100000000000000000000000000000000000000000000) {\n            if (!transferDelayEnabled / 0x0100000000000000000000000000000000000000000000) {\n            }\n        }\n        if (store_b > store_c) {\n            if (!store_b > store_l) {\n                if (store_b > store_m) {\n                }\n                if (!store_b > store_l) {\n                }\n            }\n            require(store_b > store_c, \"_transfer:: Exceeds the _maxTxAmount.\");\n        }\n        require(!(arg1 > _maxTxAmount), \"_transfer:: Exceeds the _maxTxAmount.\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x25;\n        var_l = 0x5f7472616e736665723a3a204578636565647320746865205f6d61785478416d;\n        var_o = 0x6f756e742e000000000000000000000000000000000000000000000000000000;\n        if (address(store_g) == (address(arg0))) {\n            if (address(store_g) == (address(arg0))) {\n            }\n        }\n        var_a = address(msg.sender);\n        var_n = 0x07;\n        require(bytes1(storage_map_h[var_a]), \"_transfer:: Trading is not active.\");\n        require(bytes1(storage_map_h[var_a]), \"_transfer:: Trading is not active.\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x22;\n        var_l = 0x5f7472616e736665723a3a2054726164696e67206973206e6f74206163746976;\n        var_o = 0x652e000000000000000000000000000000000000000000000000000000000000;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        if (!store_b > store_c) {\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_g = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public {\n    require(recipient != address(0), \"Transfer: recipient address cannot be zero\");\n    require(amount > 0, \"Transfer: amount must be greater than zero\");\n    require(msg.sender != address(0), \"Transfer: sender address cannot be zero\");\n\n    // Check if trading is active\n    require(tradingOpen, \"Transfer: trading is not active\");\n\n    // Check transfer delay if enabled\n    if (transferDelayEnabled) {\n        require(block.number > lastTransferBlock[tx.origin], \"Transfer: only one purchase per block allowed\");\n        lastTransferBlock[tx.origin] = block.number;\n    }\n\n    // Check maximum transaction amount\n    require(amount <= _maxTxAmount, \"Transfer: exceeds the maximum transaction amount\");\n\n    // Check maximum wallet size\n    if (recipient != uniswapV2Pair && recipient != address(this)) {\n        require(balanceOf(recipient) + amount <= _maxWalletSize, \"Transfer: exceeds the maximum wallet size\");\n    }\n\n    // Calculate tax amount if applicable\n    uint256 taxAmount = 0;\n    if (!isExcludedFromFee[msg.sender] && !isExcludedFromFee[recipient]) {\n        if (recipient == uniswapV2Pair) {\n            // Sell transaction\n            taxAmount = (amount * _finalSellTax) / 100;\n        } else if (msg.sender == uniswapV2Pair) {\n            // Buy transaction\n            taxAmount = (amount * _finalBuyTax) / 100;\n        }\n    }\n\n    // Transfer the taxed amount to the contract\n    if (taxAmount > 0) {\n        _transfer(msg.sender, address(this), taxAmount);\n    }\n\n    // Transfer the remaining amount to the recipient\n    uint256 transferAmount = amount - taxAmount;\n    _transfer(msg.sender, recipient, transferAmount);\n\n    emit Transfer(msg.sender, recipient, transferAmount);\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}