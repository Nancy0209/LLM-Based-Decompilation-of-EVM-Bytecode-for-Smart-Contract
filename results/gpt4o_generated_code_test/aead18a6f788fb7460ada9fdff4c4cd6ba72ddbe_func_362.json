{
    "contract_address": "0xaEAD18A6f788fb7460aDA9fDFf4C4Cd6Ba72dDBE",
    "heimdall_input": "function addBypassRule(address arg0, bytes4 arg1, uint256 arg2) public {\n        require(arg0 == (address(arg0)));\n        require(arg1 == (uint32(arg1)));\n        require(!(bytes1(isClaimable / 0x0100)), \"Not owner or able to bypass\");\n        address var_a = msg.sender;\n        var_b = 0x66;\n        var_a = uint32(msg.data[0]);\n        address var_b = keccak256(var_a);\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        require(bytes1(storage_map_b[var_a]), \"Not owner or able to bypass\");\n        var_a = address(arg0);\n        var_b = 0x66;\n        var_a = uint32(arg1);\n        var_b = keccak256(var_a);\n        storage_map_b[var_a] = 0x01 | (uint248(storage_map_b[var_a]));\n        require(!arg2, \"Not owner or able to bypass\");\n        var_a = address(arg0);\n        var_b = 0x67;\n        var_a = arg2;\n        var_b = keccak256(var_a);\n        storage_map_b[var_a] = 0x01 | (uint248(storage_map_b[var_a]));\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x1b;\n        var_f = 0x4e6f74206f776e6572206f722061626c6520746f206279706173730000000000;\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x1b;\n        var_f = 0x4e6f74206f776e6572206f722061626c6520746f206279706173730000000000;\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        require(address(owner) == msg.sender, \"Not owner or able to bypass\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x1b;\n        var_f = 0x4e6f74206f776e6572206f722061626c6520746f206279706173730000000000;\n        var_a = address(arg0);\n        var_b = 0x66;\n        var_a = uint32(arg1);\n        var_b = keccak256(var_a);\n        storage_map_b[var_a] = 0x01 | (uint248(storage_map_b[var_a]));\n        require(!arg2);\n        var_a = address(arg0);\n        var_b = 0x67;\n        var_a = arg2;\n        var_b = keccak256(var_a);\n        storage_map_b[var_a] = 0x01 | (uint248(storage_map_b[var_a]));\n    }",
    "llm_output": "function addBypassRule(address operator, bytes4 functionSig, uint256 id) public {\n    require(operator == address(operator), \"Invalid operator address\");\n    require(functionSig == bytes4(functionSig), \"Invalid function signature\");\n    require(!isClaimable, \"Not owner or able to bypass\");\n\n    address sender = msg.sender;\n    uint256 bypassType = 0x66;\n    uint256 hashedFunctionSig = uint256(keccak256(abi.encodePacked(functionSig)));\n    require(owner == sender, \"Not owner or able to bypass\");\n    require(storageMap[hashedFunctionSig] != 0, \"Not owner or able to bypass\");\n\n    uint256 hashedOperator = uint256(keccak256(abi.encodePacked(operator)));\n    storageMap[hashedFunctionSig] = 0x01 | (uint248(storageMap[hashedFunctionSig]));\n    require(id != 0, \"Not owner or able to bypass\");\n\n    bypassType = 0x67;\n    uint256 hashedId = uint256(keccak256(abi.encodePacked(id)));\n    storageMap[hashedId] = 0x01 | (uint248(storageMap[hashedId]));\n\n    revert(\"Not owner or able to bypass\");\n}",
    "ground_truth": "function addBypassRule(address who, bytes4 functionSig, uint256 id) public onlyOwner {\\n        byPassableFunction[who][functionSig] = true;\\n        if (id != 0) {\\n            byPassableIds[who][id] = true;\\n        }        \\n    }"
}