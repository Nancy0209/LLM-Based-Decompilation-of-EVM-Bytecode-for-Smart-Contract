{
    "contract_address": "0xe150ed6520Ef0F5269a82638f344541e22298E51",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_c = 0x01000000000000000000000000000000000000000000 | (uint248(store_c));\n        require(!storage_map_b[var_a]);\n        require(!bytes1(store_c / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_e).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_e), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_e);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_e), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_e).code.length);\n        (bool success, bytes memory ret0) = address(store_e).Unresolved_791ac947(var_l); // call\n        store_c = uint248(store_c);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    require(msg.sender == address(uint160(transferDelayEnabled / 0x0100)), \"Unauthorized\");\n    address contractAddress = address(this);\n    uint8 flag = 0x01;\n    require(!isBot[contractAddress], \"Contract is a bot\");\n    store_c = 0x01000000000000000000000000000000000000000000 | uint248(store_c);\n    require(!isBot[contractAddress], \"Contract is a bot\");\n    require(!bytes1(store_c / 0x010000000000000000000000000000000000000000), \"Invalid state\");\n    flag = 0x02;\n    uint256 offset = offset + 0x60;\n    bytes memory data = msg.data[4:68];\n    bytes32 errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8 errorLength = 0x32;\n    address thisAddress = address(this);\n    bytes32 callSelector = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n    (bool success, bytes memory returnData) = address(store_e).staticcall(abi.encodeWithSelector(callSelector, var_i));\n    offset = offset + uint248(returnData.length + 0x1f);\n    require(!(((offset + returnData.length) - offset) < 0x20), \"ERC20: approve to the zero address\");\n    require(returnData.length == uint256(returnData.length), \"ERC20: approve to the zero address\");\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorLength = 0x32;\n    uint256 lengthCheck = uint256(returnData.length);\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(address(store_e) != address(0), \"ERC20: approve to the zero address\");\n    bytes32 revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint8 revertLength = 0x20;\n    uint8 revertMessageLength = 0x22;\n    bytes32 revertMessage = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    bytes32 revertMessagePadding = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    contractAddress = address(this);\n    flag = 0x02;\n    contractAddress = address(store_e);\n    address hashAddress = keccak256(abi.encodePacked(contractAddress));\n    isBot[contractAddress] = isBot[contractAddress];\n    address approvalAddress = isBot[contractAddress];\n    emit Approval(address(this), address(store_e), isBot[contractAddress]);\n    bytes32 transferSelector = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n    address transferAddress = isBot[contractAddress];\n    uint256 zeroValue = 0;\n    uint8 transferOffset = 0xa0;\n    uint256 dataLength = returnData.length;\n    address senderAddress = address(this);\n    uint256 currentTime = block.timestamp;\n    require(address(store_e).code.length > 0, \"Invalid contract\");\n    (bool callSuccess, bytes memory callReturnData) = address(store_e).call(abi.encodeWithSelector(transferSelector, transferAddress));\n    store_c = uint248(store_c);\n    require(address(this).balance == 0, \"Non-zero balance\");\n    (bool transferSuccess, bytes memory transferReturnData) = address(uint160(transferDelayEnabled / 0x0100)).call{value: address(this).balance}(\"\");\n    revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    revertLength = 0x20;\n    uint8 revertMessageLength2 = 0x24;\n    bytes32 revertMessage2 = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    bytes32 revertMessagePadding2 = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external {\\n        require(_msgSender()==_taxWallet);\\n        uint256 tokenBalance=balanceOf(address(this));\\n        if(tokenBalance>0){\\n          swapTokensForEth(tokenBalance);\\n        }\\n        uint256 ethBalance=address(this).balance;\\n        if(ethBalance>0){\\n          sendETHToFee(ethBalance);\\n        }\\n    }"
}