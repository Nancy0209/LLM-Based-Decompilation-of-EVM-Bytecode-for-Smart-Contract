{
    "contract_address": "0x2C6C4c106F423c1C25932c474Abb356e8BBa8cC7",
    "heimdall_input": "function tokenOfOwnerByIndex(address arg0, uint256 arg1) public view returns (uint256) {\n        require(arg0 == (address(arg0)));\n        require(address(arg0), \"ERC721Enumerable: owner index out of bounds\");\n        address var_a = address(arg0);\n        var_b = 0x03;\n        require(arg1 < storage_map_b[var_a], \"ERC721Enumerable: owner index out of bounds\");\n        var_a = address(arg0);\n        var_b = 0x06;\n        var_a = arg1;\n        address var_b = keccak256(var_a);\n        address var_c = storage_map_b[var_a];\n        return storage_map_b[var_a];\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2b;\n        var_f = 0x455243373231456e756d657261626c653a206f776e657220696e646578206f75;\n        var_g = 0x74206f6620626f756e6473000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x4552433732313a2061646472657373207a65726f206973206e6f742061207661;\n        var_g = 0x6c6964206f776e65720000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n    require(owner == address(owner), \"ERC721Enumerable: invalid address\");\n    require(index < _ownedTokensCount[owner], \"ERC721Enumerable: owner index out of bounds\");\n    \n    return _ownedTokens[owner][index];\n}",
    "ground_truth": "function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply}"
}