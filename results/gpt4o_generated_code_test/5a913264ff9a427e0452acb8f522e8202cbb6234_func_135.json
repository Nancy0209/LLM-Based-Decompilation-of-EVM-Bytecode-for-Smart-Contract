{
    "contract_address": "0x5a913264FF9a427e0452acB8f522E8202CBB6234",
    "heimdall_input": "function topUpOperator(uint256 arg0) public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(arg0 > operatorTopUpLimit), \"too much\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x08;\n        var_d = 0x746f6f206d756368000000000000000000000000000000000000000000000000;\n        require(address(operatorAddress), \"Address: insufficient balance for call\");\n        require(arg0, \"Address: insufficient balance for call\");\n        require(0, \"Address: insufficient balance for call\");\n        address var_c = address(operatorAddress);\n        uint256 var_d = arg0;\n        uint256 var_a = ((0x64 + var_e) - var_e) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0;\n        uint256 var_e = 0x64 + var_e;\n        uint224 var_f = 0xa9059cbb00000000000000000000000000000000000000000000000000000000 | (uint224(var_g));\n        var_e = 0x40 + var_e;\n        var_h = 0x20;\n        var_i = 0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564;\n        require(!(address(this).balance < 0), \"Address: insufficient balance for call\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x20;\n        var_l = 0x26;\n        var_m = 0x416464726573733a20696e73756666696369656e742062616c616e636520666f;\n        var_n = 0x722063616c6c0000000000000000000000000000000000000000000000000000;\n        require(!0 > var_e.length);\n        uint256 var_m = 0;\n        (bool success, bytes memory ret0) = address(0).{ value: var_m ether }Unresolved_08c379a0(var_k); // call\n        require(ret0.length == 0);\n        require(!var_o);\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x20;\n        uint256 var_l = var_e.length;\n        require(!(0 > var_e.length), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_n = 0;\n        var_m = var_p;\n        require(var_o, \"SafeERC20: ERC20 operation did not succeed\");\n        require(0 == var_o, \"SafeERC20: ERC20 operation did not succeed\");\n        require(!(((0x80 + var_o) - 0x80) < 0x20), \"SafeERC20: ERC20 operation did not succeed\");\n        require(var_a == var_a, \"SafeERC20: ERC20 operation did not succeed\");\n        require(var_a, \"SafeERC20: ERC20 operation did not succeed\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x20;\n        var_l = 0x2a;\n        var_m = 0x5361666545524332303a204552433230206f7065726174696f6e20646964206e;\n        var_n = 0x6f74207375636365656400000000000000000000000000000000000000000000;\n        require(address(0).code.length, \"Address: call to non-contract\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x20;\n        var_l = 0x1d;\n        var_m = 0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000;\n        var_e = var_e + (uint248(ret0.length + 0x3f));\n        uint256 var_j = ret0.length;\n        require(!var_e.length);\n        require(var_e.length, \"Address: call to non-contract\");\n        require(address(0).code.length, \"Address: call to non-contract\");\n        var_q = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_m = 0x20;\n        var_n = 0x1d;\n        var_r = 0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000;\n        require(0 == var_e.length, \"SafeERC20: ERC20 operation did not succeed\");\n        require(0 == var_e.length, \"SafeERC20: ERC20 operation did not succeed\");\n        var_q = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_m = 0x20;\n        var_n = 0x2a;\n        var_r = 0x5361666545524332303a204552433230206f7065726174696f6e20646964206e;\n        var_s = 0x6f74207375636365656400000000000000000000000000000000000000000000;\n        require(!arg0 > address(this).balance);\n        require(!arg0 < address(this).balance);\n        var_a = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = var_d - address(this).balance;\n        require(address(store_i).code.length);\n        (bool success, bytes memory ret0) = address(store_i).{ value: 0 ether }withdraw(var_b); // call\n        (bool success, bytes memory ret0) = address(operatorAddress).transfer(arg0);\n        require(ret0.length == 0, \"call failed\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x0b;\n        var_d = 0x63616c6c206661696c6564000000000000000000000000000000000000000000;\n        var_t = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_u = 0x11;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x11;\n        var_d = 0x696e76616c696420726563697069656e74000000000000000000000000000000;\n    }",
    "llm_output": "function topUpOperator(uint256 amount) public {\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n    require(amount <= operatorTopUpLimit, \"Amount exceeds top-up limit\");\n    require(operatorAddress != address(0), \"Invalid operator address\");\n    require(amount > 0, \"Amount must be greater than zero\");\n\n    (bool success, ) = operatorAddress.call{value: amount}(\"\");\n    require(success, \"Transfer to operator failed\");\n}",
    "ground_truth": "function topUpOperator(uint256 amount) external onlyOwner {\\n        require(amount <= operatorTopUpLimit, \\\"too much\\\");\\n        _withdraw(address(0), operatorAddress, amount);\\n    }"
}