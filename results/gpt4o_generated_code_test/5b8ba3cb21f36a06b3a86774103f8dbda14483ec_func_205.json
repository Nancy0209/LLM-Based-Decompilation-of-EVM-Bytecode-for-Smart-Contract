{
    "contract_address": "0x5B8BA3cb21F36a06b3a86774103F8dBDa14483EC",
    "heimdall_input": "function tokenURI(uint256 arg0) public view {\n        require(arg0 == arg0);\n        require(bytes1(store_e));\n        require(bytes1(store_e) - ((store_e / 0x02) < 0x20));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x22;\n        uint256 var_c = var_c + (0x20 + (((0x1f + (store_e / 0x02)) / 0x20) * 0x20));\n        uint256 var_d = store_e / 0x02;\n        require(bytes1(store_e));\n        require(bytes1(store_e) - ((store_e / 0x02) < 0x20));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x22;\n        require(!store_e / 0x02);\n        require(0x1f < (store_e / 0x02));\n        var_a = 0x0c;\n        var_e = storage_map_b[var_a];\n        require((0x20 + var_c) + (store_e / 0x02) > (0x20 + (0x20 + var_c)));\n        require(var_c.length > 0);\n        require(arg0 < 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000);\n        require(0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        require((arg0 / 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000) < 0x04ee2d6d415b85acef8100000000);\n        require(0x04ee2d6d415b85acef8100000000);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        require(((arg0 / 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000) / 0x04ee2d6d415b85acef8100000000) < 0x2386f26fc10000);\n        require(0x2386f26fc10000);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        require((((arg0 / 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000) / 0x04ee2d6d415b85acef8100000000) / 0x2386f26fc10000) < 0x05f5e100);\n        require(0x05f5e100);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        require(((((arg0 / 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000) / 0x04ee2d6d415b85acef8100000000) / 0x2386f26fc10000) / 0x05f5e100) < 0x2710);\n        require(0x2710);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        require((((((arg0 / 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000) / 0x04ee2d6d415b85acef8100000000) / 0x2386f26fc10000) / 0x05f5e100) / 0x2710) < 0x64);\n        require(0x64);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        require(((((((arg0 / 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000) / 0x04ee2d6d415b85acef8100000000) / 0x2386f26fc10000) / 0x05f5e100) / 0x2710) / 0x64) < 0x0a);\n        require(!0x80 > 0xffffffffffffffff);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x41;\n        var_e = 0x80;\n        var_c = var_c + 0xa0;\n        require(!0x80);\n        require(!0x01);\n        uint256 var_f = 0;\n        var_g = 0x3031323334353637383961626364656600000000000000000000000000000000;\n        require(0x0a);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n        require((arg0 / 0x0a) - 0);\n        require(!0x01);\n        var_h = 0x3031323334353637383961626364656600000000000000000000000000000000;\n        require(0x0a);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x12;\n    }",
    "llm_output": "function tokenURI(uint256 tokenId) public view returns (string memory) {\n    // Validate the tokenId\n    require(tokenId == tokenId, \"Invalid tokenId\");\n\n    // Placeholder for decompiler artifacts\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        string memory base = _baseURI();\r\n        return bytes(base).length > 0\r\n            ? string(abi.encodePacked(base, tokenId.toString(), \".json\"))\r\n            : '';\r\n    }"
}