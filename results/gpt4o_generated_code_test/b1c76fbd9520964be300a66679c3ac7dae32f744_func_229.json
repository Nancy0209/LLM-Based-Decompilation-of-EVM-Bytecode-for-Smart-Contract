{
    "contract_address": "0xB1C76Fbd9520964Be300A66679C3ac7dae32f744",
    "heimdall_input": "function updateUniswapV2Router(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(address(arg0) - (address(mainRouter)));\n        emit UpdateUniswapV2Router(address(arg0), address(mainRouter));\n        mainRouter = (address(arg0)) | (uint96(mainRouter));\n        require(address(this));\n        require(address(arg0));\n        address var_e = address(this);\n        var_f = 0x01;\n        var_e = address(arg0);\n        address var_f = keccak256(var_e);\n        storage_map_d[var_e] = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var_a = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        emit Approval(address(this), address(arg0), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        var_a = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(mainRouter / 0x01).WETH(var_b); // staticcall\n        uint256 var_g = var_g + (uint248(ret0.length + 0x1f));\n        require(!((var_g + ret0.length) - var_g) < 0x20);\n        require(var_g.length == (address(var_g.length)));\n        require(address(var_g.length) == (address(sellMarketingFee)));\n        var_h = 0x095ea7b300000000000000000000000000000000000000000000000000000000;\n        address var_c = address(mainRouter);\n        var_d = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        (bool success, bytes memory ret0) = address(sellMarketingFee).{ value: 0 ether }Unresolved_095ea7b3(var_c); // call\n        var_g = var_g + (uint248(ret0.length + 0x1f));\n        require(!((var_g + ret0.length) - var_g) < 0x20);\n        require(var_g.length == var_g.length);\n        var_i = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(mainRouter).factory(var_d); // staticcall\n        var_g = var_g + (uint248(ret0.length + 0x1f));\n        require(!((var_g + ret0.length) - var_g) < 0x20);\n        require(var_g.length == (address(var_g.length)));\n        var_j = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_k = address(this);\n        address var_l = address(sellMarketingFee);\n        (bool success, bytes memory ret0) = address(var_g.length).{ value: 0 ether }Unresolved_c9c65396(var_k); // call\n        var_h = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(mainRouter).factory(var_c); // staticcall\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x22;\n        var_d = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_k = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x24;\n        var_d = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_k = 0x7265737300000000000000000000000000000000000000000000000000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x23;\n        var_d = 0x54686520726f7574657220616c72656164792068617320746861742061646472;\n        var_k = 0x6573730000000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function updateUniswapV2Router(address newRouter) public {\n    require(newRouter != address(0), \"Invalid router address\");\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    // Emit event for router update\n    emit UpdateUniswapV2Router(newRouter, address(mainRouter));\n\n    // Update the main router address\n    mainRouter = IUniswapV2Router02(newRouter);\n\n    // Approve the new router to spend the maximum token amount\n    _approve(address(this), newRouter, type(uint256).max);\n}",
    "ground_truth": "function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        require(\r\n            newAddress != address(mainRouter),\r\n            \"The router already has that address\"\r\n        );\r\n        emit UpdateUniswapV2Router(newAddress, address(mainRouter));\r\n        mainRouter = IUniswapV2Router02(newAddress);\r\n        _approve(address(this), address(mainRouter), MAX);\r\n        if(baseTokenForPair != mainRouter.WETH()){\r\n            IERC20(baseTokenForPair).approve(address(mainRouter), MAX);            \r\n        }        \r\n        address _mainPair = IUniswapV2Factory(mainRouter.factory()).createPair(\r\n            address(this),\r\n            baseTokenForPair\r\n        );\r\n        mainPair = _mainPair;\r\n        _setAutomatedMarketMakerPair(mainPair, true);\r\n    }"
}