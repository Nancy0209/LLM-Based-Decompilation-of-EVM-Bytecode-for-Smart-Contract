{
    "contract_address": "0x2196c73Bee850827528bf2e164c33441834dFe03",
    "heimdall_input": "function ownerOf(uint256 arg0) public view returns (address) {\n        require(0x01 > arg0, CustomError_df2d9b42());\n        require(!(arg0 < totalSupply), CustomError_df2d9b42());\n        uint256 var_a = arg0;\n        var_b = 0x04;\n        require(bytes1(storage_map_b[var_a]), CustomError_df2d9b42());\n        var_c = 0xdf2d9b4200000000000000000000000000000000000000000000000000000000;\n        require(storage_map_b[var_a], CustomError_df2d9b42());\n        uint256 var_c = address(storage_map_b[var_a]);\n        return address(storage_map_b[var_a]);\n        var_a = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + arg0;\n        var_b = 0x04;\n        require(storage_map_b[var_a], CustomError_df2d9b42());\n        var_c = address(storage_map_b[var_a]);\n        return address(storage_map_b[var_a]);\n        var_a = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + arg0);\n        var_b = 0x04;\n        require(storage_map_b[var_a], CustomError_df2d9b42());\n        var_c = address(storage_map_b[var_a]);\n        return address(storage_map_b[var_a]);\n        var_a = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + arg0));\n        var_b = 0x04;\n        require(storage_map_b[var_a], CustomError_df2d9b42());\n        var_c = address(storage_map_b[var_a]);\n        return address(storage_map_b[var_a]);\n        var_c = 0xdf2d9b4200000000000000000000000000000000000000000000000000000000;\n        var_c = 0xdf2d9b4200000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function ownerOf(uint256 tokenId) public view returns (address) {\n    // Ensure the tokenId is valid and within the total supply range\n    if (tokenId >= totalSupply()) {\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    // Retrieve the packed ownership data for the given tokenId\n    uint256 packedOwnership = _packedOwnerships[tokenId];\n\n    // Check if the token has been initialized (not burned or unowned)\n    if (packedOwnership == 0) {\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    // Extract the owner's address from the packed ownership data\n    address owner = address(uint160(packedOwnership));\n    return owner;\n}",
    "ground_truth": "function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        return address(uint160(_packedOwnershipOf(tokenId)));\r\n    }"
}