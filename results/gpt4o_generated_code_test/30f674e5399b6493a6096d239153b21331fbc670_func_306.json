{
    "contract_address": "0x30F674e5399B6493A6096d239153b21331fbC670",
    "heimdall_input": "function manualswap() public {\n        require(address(msg.sender) == (address(store_u)));\n        require(address(msg.sender) == (address(store_v)));\n        address var_a = address(this);\n        uint256 var_b = 0;\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(0x7a250d5630b4cf539739df2c5dacb4c659f2488d, \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x01;\n        var_a = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n        var_b = keccak256(var_a);\n        storage_map_d[var_a] = storage_map_d[var_a];\n        address var_k = storage_map_d[var_a];\n        emit Approval(address(this), 0x7a250d5630b4cf539739df2c5dacb4c659f2488d, storage_map_d[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_d[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).code.length);\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).{ value: var_m ether }Unresolved_791ac947(var_l); // call\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    require(msg.sender == store_u, \"Unauthorized\");\n    require(msg.sender == store_v, \"Unauthorized\");\n\n    address contractAddress = address(this);\n    uint256 zeroValue = 0;\n    uint256 offset = 0x60;\n    bytes memory data = msg.data[4:68];\n    bytes32 errorSignature = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 errorOffset = 0x32;\n    address uniswapRouter = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d;\n\n    (bool success, bytes memory returnData) = uniswapRouter.staticcall(abi.encodeWithSignature(\"WETH()\"));\n    require(success, \"Static call failed\");\n\n    uint256 returnDataLength = returnData.length;\n    require(returnDataLength >= 0x20, \"Invalid return data length\");\n\n    address returnAddress = address(uint160(uint256(keccak256(returnData))));\n    require(returnAddress != address(0), \"ERC20: approve to the zero address\");\n\n    bytes32 approvalErrorSignature = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 approvalErrorOffset = 0x20;\n    uint256 approvalErrorLength = 0x22;\n    bytes32 approvalErrorMessage = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265737300000000000000000000000000000000000000000000000000000000000000;\n\n    address storageAddress = address(this);\n    uint256 storageValue = storage_map_d[storageAddress];\n    emit Approval(storageAddress, uniswapRouter, storageValue);\n\n    uint256 callValue = 0;\n    uint256 callOffset = 0xa0;\n    uint256 callTimestamp = block.timestamp;\n    require(uniswapRouter.code.length > 0, \"Invalid router address\");\n\n    (bool callSuccess, bytes memory callReturnData) = uniswapRouter.call{value: callValue}(abi.encodeWithSignature(\"Unresolved_791ac947(address)\", storageAddress));\n    require(callSuccess, \"Call failed\");\n\n    bytes32 callErrorSignature = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 callErrorOffset = 0x20;\n    uint256 callErrorLength = 0x24;\n    bytes32 callErrorMessage = 0x45524332303a20617070726f76652066726f6d20746865207a65726f206164647265737300000000000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualswap() external {\r\n        require(\r\n            _msgSender() == developmentWallet ||\r\n                _msgSender() == marketingWallet\r\n        );\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }"
}