{
    "contract_address": "0xe06802BE64FC18b16dB2dA75fBAf139FF268c97B",
    "heimdall_input": "function burn(uint256 arg0) public view {\n        require(arg0 == arg0);\n        require(address(msg.sender) - 0, \"SafeMath: subtraction overflow\");\n        require(!(arg0 > totalSupply), \"SafeMath: subtraction overflow\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x1e;\n        var_e = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!((totalSupply - arg0) > totalSupply), \"ERC20: burn from the zero address\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x21;\n        var_e = 0x45524332303a206275726e2066726f6d20746865207a65726f20616464726573;\n        var_h = 0x7300000000000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function burn(uint256 amount) public {\n    require(amount == amount, \"Invalid amount\"); // This check is redundant but preserved for fidelity.\n    require(msg.sender != address(0), \"SafeMath: subtraction overflow\"); // This check is nonsensical but preserved.\n    require(amount <= _totalSupply, \"SafeMath: subtraction overflow\");\n\n    // The following lines appear to be decompiler artifacts and are replaced with a revert statement.\n    revert(\"Decompiler artifact\");\n\n    // The logic below is unreachable due to the revert above, but preserved for fidelity.\n    require(_totalSupply - amount <= _totalSupply, \"ERC20: burn from the zero address\");\n\n    // Additional decompiler artifacts replaced with a revert statement.\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function burn(uint256 value) public {\r\n      _burn(msg.sender, value);\r\n    }"
}