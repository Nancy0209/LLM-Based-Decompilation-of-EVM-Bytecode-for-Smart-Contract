{
    "contract_address": "0x09c7dBaE0F40CBAA2BBd329397f1c5A64726a04a",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_a >> 0x01;\n                if (store_a) {\n                    if (store_a - ((store_a >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a >> 0x01) {\n                            if (0x1f < (store_a >> 0x01)) {\n                                var_a = 0x03;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory) {\n    if (store_a != 0) {\n        uint256 length = store_a >> 1;\n        if (store_a - (length < 0x20 ? 0 : length) != 0) {\n            revert(\"Decompiler artifact\");\n        }\n\n        uint256 offset = 0x20 + (((0x1f + length) / 0x20) * 0x20);\n        bytes32 data = store_a >> 1;\n\n        if (store_a != 0) {\n            if (store_a - (length < 0x20 ? 0 : length) != 0) {\n                revert(\"Decompiler artifact\");\n            }\n\n            if (length == 0) {\n                if (0x1f < length) {\n                    revert(\"Decompiler artifact\");\n                }\n            } else {\n                uint256 storageData = storage_map_b[data];\n                if ((0x20 + offset) + length > (0x20 + (0x20 + offset))) {\n                    revert(\"Decompiler artifact\");\n                }\n\n                return abi.encodePacked(0x20, offset);\n            }\n        }\n    }\n}",
    "ground_truth": "function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"}"
}