{
    "contract_address": "0x8A9Fc31209981A2BC667f39654Fa6BE6ce8611d7",
    "heimdall_input": "function manualSwap() public {\n        require(msg.sender == (address(store_n)));\n        address var_a = address(this);\n        var_b = 0x02;\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_j).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!((var_d + ret0.length) - var_d) < 0x20);\n        require(var_d.length == (address(var_d.length)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this));\n        require(address(store_j));\n        var_a = address(this);\n        var_b = 0x03;\n        var_a = address(store_j);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_j), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_o = var_d.length;\n        address var_p = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_j).code.length);\n        (bool success, bytes memory ret0) = address(store_j).Unresolved_791ac947(var_l); // call\n        (bool success, bytes memory ret0) = address(msg.sender).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_p = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_p = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    require(msg.sender == _owner, \"Not authorized\");\n    \n    address contractAddress = address(this);\n    uint256 initialBalance = address(this).balance;\n    \n    // Interact with the router to swap tokens for ETH\n    (bool success, bytes memory data) = address(router).call(abi.encodeWithSignature(\"WETH()\"));\n    require(success, \"Router call failed\");\n    \n    uint256 deltaBalance = address(this).balance - initialBalance;\n    require(deltaBalance > 0, \"No ETH received\");\n    \n    // Approve the router to spend tokens\n    emit Approval(contractAddress, address(router), deltaBalance);\n    \n    // Transfer ETH to the sender\n    (bool transferSuccess, ) = msg.sender.call{value: address(this).balance}(\"\");\n    require(transferSuccess, \"Transfer failed\");\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(msg.sender == marketingReceiver);\r\n        swapTokensForETH(balanceOf(address(this)));\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }"
}