{
    "contract_address": "0x30045aA941FF9Be1d2D3603A75207C07860d4156",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_t) {\n            if (store_t - ((store_t >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_t >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_t >> 0x01;\n                if (store_t) {\n                    if (store_t - ((store_t >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_t >> 0x01) {\n                            if (0x1f < (store_t >> 0x01)) {\n                                var_a = 0x03;\n                                var_e = storage_map_f[var_a];\n                                if ((0x20 + var_c) + (store_t >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory) {\n    if (store_t != 0) {\n        uint256 length = store_t >> 1; // Extract the length of the string\n        if (length < 0x20) {\n            revert(\"Decompiler artifact\");\n        }\n\n        uint256 offset = 0x20 + (((0x1f + length) / 0x20) * 0x20);\n        bytes32 data = store_t >> 1;\n\n        if (store_t != 0) {\n            if (length < 0x20) {\n                revert(\"Decompiler artifact\");\n            }\n\n            if (length > 0x1f) {\n                bytes memory result = new bytes(length);\n                for (uint256 i = 0; i < length; i++) {\n                    result[i] = bytes1(storage_map_f[offset + i]);\n                }\n                return string(result);\n            }\n        }\n    }\n    return \"\";\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }"
}