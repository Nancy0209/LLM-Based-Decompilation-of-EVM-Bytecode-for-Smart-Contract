{
    "contract_address": "0x410cA8f9159f88a864DeEc21f30D5D62E8B75619",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_e) {\n            if (store_e - ((store_e / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_e / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_e / 0x02;\n                if (store_e) {\n                    if (store_e - ((store_e / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_e / 0x02) {\n                            if (0x1f < (store_e / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_e / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    if (_symbol.length > 0) {\n        uint256 symbolLength = bytes(_symbol).length;\n        if (symbolLength < 32) {\n            revert(\"Decompiler artifact\");\n        }\n        uint256 paddedLength = ((symbolLength + 31) / 32) * 32;\n        return string(abi.encodePacked(_symbol));\n    } else {\n        revert(\"Decompiler artifact\");\n    }\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }"
}