{
    "contract_address": "0x2bAa6759eF2a982BBf5619E21eC244eA7a2Ee3C4",
    "heimdall_input": "function realtimeRewardPerBlock(address arg0, uint256 arg1) public view returns (bytes memory) {\n        require(arg0 == (address(arg0)));\n        require(arg1 == arg1);\n        address var_a = address(arg0);\n        var_b = 0x16;\n        var_a = arg1;\n        address var_b = keccak256(var_a);\n        require(!(!bytes1(storage_map_k[var_a] / 0x01)), \"SafeMath: multiplication overflow\");\n        require(!(!bytes1(storage_map_k[var_a] / 0x01)), \"SafeMath: multiplication overflow\");\n        uint256 var_c = 0;\n        uint256 var_d = 0;\n        return abi.encodePacked(0, 0);\n        var_a = address(arg0);\n        var_b = 0x16;\n        var_a = arg1;\n        var_b = keccak256(var_a);\n        require(!(storage_map_af[var_a] == 0), \"SafeMath: multiplication overflow\");\n        require(!(block.timestamp < (storage_map_af[var_a])), \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_e = 0x11;\n        var_a = address(arg0);\n        var_b = 0x16;\n        var_a = arg1;\n        var_b = keccak256(var_a);\n        require(!((block.timestamp - (storage_map_af[var_a])) == 0), \"SafeMath: multiplication overflow\");\n        var_a = address(arg0);\n        var_b = 0x16;\n        var_a = arg1;\n        var_b = keccak256(var_a);\n        require(!(0 < (storage_map_ag[var_a])), \"SafeMath: multiplication overflow\");\n        require(!(0 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_e = 0x11;\n        var_c = 0;\n        var_d = block.timestamp;\n        return abi.encodePacked(0, block.timestamp);\n        require(!((block.timestamp - (storage_map_af[var_a])) & (storage_map_n[var_a] > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp - (storage_map_af[var_a]))))), \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_e = 0x11;\n        require(block.timestamp - (storage_map_af[var_a]), \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_e = 0x12;\n        require((block.timestamp - (storage_map_af[var_a])) * (storage_map_n[var_a]) / (block.timestamp - (storage_map_af[var_a])) == (storage_map_n[var_a]), \"SafeMath: multiplication overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_f = ((0x04 + var_g) + 0x20) - (0x04 + var_g);\n        var_h = 0x21;\n        var_i = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_j = 0x7700000000000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function realtimeRewardPerBlock(address user, uint256 blockNumber) public view returns (uint256 reward, uint256 timestamp) {\n    // Validate inputs\n    require(user != address(0), \"Invalid user address\");\n    require(blockNumber > 0, \"Invalid block number\");\n\n    // Retrieve the last harvest time for the user and block number\n    uint256 lastHarvestTime = stakersRecord[user][blockNumber].lastharvesttime;\n\n    // Ensure the last harvest time is valid\n    require(lastHarvestTime > 0, \"No harvest record found\");\n\n    // Calculate the elapsed time since the last harvest\n    uint256 elapsedTime = block.timestamp - lastHarvestTime;\n    require(elapsedTime > 0, \"Elapsed time must be greater than zero\");\n\n    // Retrieve the per-second reward for the user and block number\n    uint256 perSecondReward = stakersRecord[user][blockNumber].persecondreward;\n\n    // Calculate the reward for the elapsed time\n    reward = elapsedTime * perSecondReward;\n    require(reward / elapsedTime == perSecondReward, \"SafeMath: multiplication overflow\");\n\n    // Return the calculated reward and the current timestamp\n    timestamp = block.timestamp;\n    return (reward, timestamp);\n}",
    "ground_truth": "function realtimeRewardPerBlock(address user, uint256 blockno) public view returns (uint256,uint256) {\r\n        uint256 ret;\r\n        uint256 commontimestamp;\r\n            if (\r\n                !stakersRecord[user][blockno].withdrawan &&\r\n                !stakersRecord[user][blockno].unstaked\r\n            ) {\r\n                uint256 val;\r\n                uint256 tempharvesttime = stakersRecord[user][blockno].lastharvesttime;\r\n                commontimestamp = block.timestamp;\r\n                if(tempharvesttime == 0){\r\n                    tempharvesttime = stakersRecord[user][blockno].staketime;\r\n                }\r\n                val = commontimestamp - tempharvesttime;\r\n                val = val.mul(stakersRecord[user][blockno].persecondreward);\r\n                if (val < stakersRecord[user][blockno].remainingreward) {\r\n                    ret += val;\r\n                } else {\r\n                    ret += stakersRecord[user][blockno].remainingreward;\r\n                }\r\n            }\r\n        return (ret,commontimestamp);\r\n    }"
}