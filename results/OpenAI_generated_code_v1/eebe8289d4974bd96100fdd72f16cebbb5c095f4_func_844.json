{
    "contract_address": "0xeEbe8289D4974bd96100fdD72f16CEBbB5c095f4",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_e) {\n            if (store_e - ((store_e / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_e / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_e / 0x02;\n                if (store_e) {\n                    if (store_e - ((store_e / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_e / 0x02) {\n                            if (0x1f < (store_e / 0x02)) {\n                                var_a = 0x69;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_e / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    if (store_e > 0) {\n        if (store_e - (store_e / 2) < 32) {\n            revert(\"Decompiler artifact\");\n        }\n        uint256 halfStoreE = store_e / 2;\n        uint256 offset = 32 + (((31 + halfStoreE) / 32) * 32);\n        \n        if (store_e > 0) {\n            if (store_e - (halfStoreE) < 32) {\n                revert(\"Decompiler artifact\");\n            }\n            if (halfStoreE == 0) {\n                if (31 < halfStoreE) {\n                    uint256 index = 105; // 0x69\n                    bytes32 data = storage_map_b[index];\n                    if ((32 + offset) + halfStoreE > (32 + (32 + offset))) {\n                        uint256 length = (offset + 32) - offset;\n                        return abi.encodePacked(length, offset);\n                    }\n                }\n            }\n        }\n    }\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }"
}