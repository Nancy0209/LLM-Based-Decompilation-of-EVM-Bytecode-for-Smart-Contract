{
    "contract_address": "0x2712ac3E4Fb06A0d1FB54E31eB81e7db4731c417",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender));\n        require(address(arg0));\n        require(arg1 > 0);\n        address var_a = address(msg.sender);\n        var_b = 0x1b;\n        require(bytes1(storage_map_l[var_a]));\n        require(!bytes1(storage_map_l[var_a]));\n        require(!(!(address(msg.sender)) == (address(owner))), \"SafeMath: multiplication overflow\");\n        require(!(!(address(owner)) == (address(arg0))), \"SafeMath: multiplication overflow\");\n        require(!(!address(this) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(!address(this) == (address(arg0))), \"SafeMath: multiplication overflow\");\n        require(!(address(burnMode) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(burnMode) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(burnMode) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(burnMode) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(burnMode) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(burnMode) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(burnMode) == (address(msg.sender))), \"SafeMath: multiplication overflow\");\n        require(!(address(burnMode) == (address(arg0))), \"SafeMath: multiplication overflow\");\n        require(!(address(burnMode) == (address(arg0))), \"SafeMath: multiplication overflow\");\n        require(!(address(burnMode) == (address(arg0))), \"SafeMath: multiplication overflow\");\n        require(!(address(burnMode) == (address(arg0))), \"SafeMath: multiplication overflow\");\n        require(!(!bytes1(burnMode / 0x010000000000000000000000000000000000000000)), \"SafeMath: multiplication overflow\");\n        require(!(!bytes1(burnMode / 0x010000000000000000000000000000000000000000)), \"SafeMath: multiplication overflow\");\n        var_a = address(msg.sender);\n        var_b = 0x04;\n        require(bytes1(storage_map_l[var_a]), \"SafeMath: multiplication overflow\");\n        require(!(bytes1(storage_map_l[var_a])), \"SafeMath: multiplication overflow\");\n        require(0, \"SafeMath: multiplication overflow\");\n        uint256 var_c = 0xa0 + var_c;\n        uint256 var_d = 0;\n        uint256 var_e = 0;\n        uint256 var_f = 0;\n        uint256 var_g = 0;\n        uint256 var_h = 0;\n        require(0 - arg1, \"SafeMath: multiplication overflow\");\n        require(!(arg1 & (store_q > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_i = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((arg1 * store_q) / arg1) == store_q, \"SafeMath: multiplication overflow\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x20;\n        var_l = 0x21;\n        var_m = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_n = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x40 + var_c;\n        var_j = 0x1a;\n        var_o = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x64, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_p = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_m = 0x20;\n        uint256 var_n = var_c.length;\n        require(!(0 > var_c.length), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_q = 0;\n        var_r = var_s;\n        require(!(0x20 > var_c.length), \"SafeMath: division by zero\");\n        var_q = 0;\n        if (0x64) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_i = 0x12;\n            var_e = (arg1 * store_q) / 0x64;\n            if (0 - arg1) {\n            }\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_i = 0x12;\n            if (store_q) {\n                if (store_q) {\n                    if (store_q) {\n                        if (store_q) {\n                        }\n                    }\n                }\n            }\n            if (0x01) {\n                require(0x64, \"SafeMath: addition overflow\");\n            }\n            var_c = 0xa0 + var_c;\n            var_d = 0;\n            var_e = 0;\n            var_f = 0;\n            var_g = 0;\n            var_h = 0;\n            require(0x01, \"SafeMath: addition overflow\");\n        }\n        var_a = address(this);\n        var_b = 0x02;\n        require(!(storage_map_l[var_a] > swapAmount), \"SafeMath: addition overflow\");\n        burnMode = 0x010000000000000000000000000000000000000000 | (uint248(burnMode));\n        require(!(store_q > ~(store_r)), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_i = 0x11;\n        require(!((store_q + store_r) < store_q), \"SafeMath: addition overflow\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_t = 0x20;\n        var_u = 0x1b;\n        var_v = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        if (burnMode / 0x01000000000000000000000000000000000000000000) {\n            if (!address(this).balance > 0) {\n                require(bytes1(burnMode / 0x01000000000000000000000000000000000000000000));\n                require(!address(this).balance > 0);\n            }\n        }\n        (bool success, bytes memory ret0) = address(store_g).transfer(address(this).balance);\n        if (burnMode / 0x01000000000000000000000000000000000000000000) {\n        }\n        if (address(burnMode) == (address(msg.sender))) {\n        }\n        if (address(uniswapV2Router) == (address(msg.sender))) {\n            if (address(uniswapV2Router) == (address(msg.sender))) {\n                if (address(uniswapV2Router) == (address(msg.sender))) {\n                }\n            }\n        }\n        if (address(uniswapV2Router) == (address(arg0))) {\n            if (address(uniswapV2Router) == (address(arg0))) {\n                if (address(uniswapV2Router) == (address(arg0))) {\n                }\n            }\n        }\n        var_a = address(msg.sender);\n        var_b = 0x04;\n        if (!storage_map_l[var_a]) {\n        }\n        if (address(uniswapV2Router) == (address(arg0))) {\n            if (address(uniswapV2Router) == (address(arg0))) {\n            }\n        }\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_t = 0x20;\n        var_u = 0x29;\n        var_v = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_w = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_t = 0x20;\n        var_u = 0x23;\n        var_v = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_w = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_t = 0x20;\n        var_u = 0x25;\n        var_v = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_w = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public {\n    require(recipient == address(recipient), \"Invalid recipient address\");\n    require(msg.sender != address(0), \"Invalid sender address\");\n    require(recipient != address(0), \"Invalid recipient address\");\n    require(amount > 0, \"Amount must be greater than zero\");\n\n    address sender = msg.sender;\n    uint8 status = 0x1b;\n    require(bytes1(storage_map_l[sender]) != 0, \"Sender not authorized\");\n    require(bytes1(storage_map_l[sender]) == 0, \"Sender already processed\");\n\n    require(msg.sender != owner, \"Sender is owner\");\n    require(owner != recipient, \"Owner is recipient\");\n    require(address(this) != msg.sender, \"Contract is sender\");\n    require(address(this) != recipient, \"Contract is recipient\");\n    require(burnMode != msg.sender, \"Burn mode active for sender\");\n    require(burnMode != recipient, \"Burn mode active for recipient\");\n\n    require(burnMode / 0x010000000000000000000000000000000000000000 == 0, \"Burn mode division error\");\n\n    sender = msg.sender;\n    status = 0x04;\n    require(bytes1(storage_map_l[sender]) != 0, \"Sender not authorized\");\n    require(bytes1(storage_map_l[sender]) == 0, \"Sender already processed\");\n\n    revert(\"Decompiler artifact\");\n\n    uint256 tempVar = 0xa0 + tempVar;\n    uint256 zeroVar = 0;\n    uint256 anotherZeroVar = 0;\n    uint256 yetAnotherZeroVar = 0;\n    uint256 moreZeroVar = 0;\n    uint256 finalZeroVar = 0;\n\n    require(0 - amount != 0, \"SafeMath: subtraction overflow\");\n    require(!(amount & (store_q > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / amount))), \"SafeMath: multiplication overflow\");\n\n    sender = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8 errorCode = 0x11;\n    require(amount != 0, \"SafeMath: multiplication overflow\");\n    require(((amount * store_q) / amount) == store_q, \"SafeMath: multiplication overflow\");\n\n    uint256 errorData = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 errorLength = 0x20;\n    uint256 errorMessageLength = 0x21;\n    uint256 errorMessage = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n    uint256 errorMessageSuffix = 0x7700000000000000000000000000000000000000000000000000000000000000;\n\n    tempVar = 0x40 + tempVar;\n    errorData = 0x1a;\n    uint256 divisionErrorMessage = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n    require(0x64 != 0, \"Division by zero\");\n\n    errorData = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorLength = 0x20;\n    uint256 errorMessageLength2 = tempVar.length;\n    require(!(0 > tempVar.length), \"Invalid length\");\n\n    uint256 zeroVar2 = 0;\n    uint256 anotherVar = var_s;\n    require(!(0x20 > tempVar.length), \"SafeMath: division by zero\");\n\n    zeroVar2 = 0;\n    if (0x64 != 0) {\n        sender = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        errorCode = 0x12;\n        anotherZeroVar = (amount * store_q) / 0x64;\n        if (0 - amount != 0) {\n        }\n        sender = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        errorCode = 0x12;\n        if (store_q != 0) {\n            if (store_q != 0) {\n                if (store_q != 0) {\n                    if (store_q != 0) {\n                    }\n                }\n            }\n        }\n        if (0x01 != 0) {\n            require(0x64 != 0, \"SafeMath: addition overflow\");\n        }\n        tempVar = 0xa0 + tempVar;\n        zeroVar = 0;\n        anotherZeroVar = 0;\n        yetAnotherZeroVar = 0;\n        moreZeroVar = 0;\n        finalZeroVar = 0;\n        require(0x01 != 0, \"SafeMath: addition overflow\");\n    }\n\n    sender = address(this);\n    status = 0x02;\n    require(!(storage_map_l[sender] > swapAmount), \"SafeMath: addition overflow\");\n\n    burnMode = 0x010000000000000000000000000000000000000000 | uint248(burnMode);\n    require(!(store_q > ~(store_r)), \"SafeMath: addition overflow\");\n\n    sender = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorCode = 0x11;\n    require(!((store_q + store_r) < store_q), \"SafeMath: addition overflow\");\n\n    errorData = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorLength = 0x20;\n    uint256 errorMessageLength3 = 0x1b;\n    uint256 additionErrorMessage = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n\n    if (burnMode / 0x01000000000000000000000000000000000000000000 != 0) {\n        if (!(address(this).balance > 0)) {\n            require(bytes1(burnMode / 0x01000000000000000000000000000000000000000000) != 0);\n            require(!(address(this).balance > 0));\n        }\n    }\n\n    (bool success, bytes memory ret0) = address(store_g).transfer(address(this).balance);\n    if (burnMode / 0x01000000000000000000000000000000000000000000 != 0) {\n    }\n    if (burnMode == msg.sender) {\n    }\n    if (uniswapV2Router == msg.sender) {\n        if (uniswapV2Router == msg.sender) {\n            if (uniswapV2Router == msg.sender) {\n            }\n        }\n    }\n    if (uniswapV2Router == recipient) {\n        if (uniswapV2Router == recipient) {\n            if (uniswapV2Router == recipient) {\n            }\n        }\n    }\n\n    sender = msg.sender;\n    status = 0x04;\n    if (!storage_map_l[sender]) {\n    }\n    if (uniswapV2Router == recipient) {\n        if (uniswapV2Router == recipient) {\n        }\n    }\n\n    errorData = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorLength = 0x20;\n    uint256 errorMessageLength4 = 0x29;\n    uint256 transferErrorMessage = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n    uint256 transferErrorMessageSuffix = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n\n    errorData = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorLength = 0x20;\n    uint256 errorMessageLength5 = 0x23;\n    uint256 erc20TransferErrorMessage = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n    uint256 erc20TransferErrorMessageSuffix = 0x6573730000000000000000000000000000000000000000000000000000000000;\n\n    errorData = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorLength = 0x20;\n    uint256 errorMessageLength6 = 0x25;\n    uint256 erc20TransferFromErrorMessage = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n    uint256 erc20TransferFromErrorMessageSuffix = 0x6472657373000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}