{
    "contract_address": "0x9361CD557C1db79830F118364E5009B3A2738fD3",
    "heimdall_input": "function calculateEarnings(address arg0) public view {\n        address var_a = address(arg0);\n        var_b = 0x0f;\n        require(!storage_map_a[var_a] > block.timestamp);\n        require(0x3c > 0);\n        require(0x3c);\n        var_a = address(arg0);\n        var_b = 0x0b;\n        require(storage_map_a[var_a] == 0);\n        require(storage_map_a[var_a]);\n        require((storage_map_a[var_a] * dailyROI) / storage_map_a[var_a] == dailyROI);\n    }",
    "llm_output": "function calculateEarnings(address userAddress) public view {\n    address user = userAddress;\n    uint256 constantValue1 = 0x0f;\n    require(storageMap[user] <= block.timestamp, \"Timestamp condition failed\");\n    require(0x3c > 0, \"Constant value check failed\");\n    require(0x3c != 0, \"Constant value is zero\");\n    user = userAddress;\n    uint256 constantValue2 = 0x0b;\n    require(storageMap[user] == 0, \"Storage map value is not zero\");\n    require(storageMap[user] != 0, \"Storage map value is zero\");\n    require((storageMap[user] * dailyROI) / storageMap[user] == dailyROI, \"ROI calculation failed\");\n}",
    "ground_truth": "function calculateEarnings(address _stakeholder) public view returns(uint) {\r\n        uint activeDays = (now.sub(lastClock[_stakeholder])).div(60);\r\n        return ((stakes[_stakeholder]).mul(dailyROI).mul(activeDays)).div(100000000); //1//0.1//0.01//0.001/0.0001/0.00001/\r\n    }"
}