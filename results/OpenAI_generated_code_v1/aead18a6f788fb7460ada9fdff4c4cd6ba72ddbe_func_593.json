{
    "contract_address": "0xaEAD18A6f788fb7460aDA9fDFf4C4Cd6Ba72dDBE",
    "heimdall_input": "function getAllRegisteredContractsOfType(uint256 arg0) public view returns (bytes memory) {\n        uint256 var_a = arg0;\n        var_b = 0x69;\n        uint256 var_c = 0x20 + (var_c + (0x20 * storage_map_b[var_a]));\n        uint256 var_d = storage_map_b[var_a];\n        require(!storage_map_b[var_a]);\n        var_a = keccak256(var_a);\n        uint256 var_e = address(storage_map_b[var_a]);\n        require((var_c + 0x20) + (0x20 * storage_map_b[var_a]) > (0x20 + (var_c + 0x20)));\n        var_e = 0x20;\n        uint256 var_f = var_c.length;\n        return abi.encodePacked(0x20, var_c.length);\n    }",
    "llm_output": "function getAllRegisteredContractsOfType(uint256 contractType) public view returns (bytes memory) {\n    uint256 typeKey = contractType;\n    uint256 offset = 0x69;\n    uint256 dataSize = 0x20 + (0x20 * contractCount[typeKey]);\n    uint256 contractCountForType = contractCount[typeKey];\n    require(contractCountForType != 0, \"No contracts registered for this type\");\n    \n    bytes32 typeHash = keccak256(abi.encodePacked(typeKey));\n    address firstContractAddress = address(contractStorage[typeHash]);\n    \n    require((dataSize + 0x20) + (0x20 * contractCountForType) > (0x20 + dataSize), \"Invalid data size calculation\");\n    \n    uint256 encodedLength = dataSize;\n    return abi.encodePacked(uint256(0x20), encodedLength);\n}",
    "ground_truth": "function getAllRegisteredContractsOfType(uint256 _type) public view returns (address[] memory) {\\n        return registeredOfType[_type];\\n    }"
}