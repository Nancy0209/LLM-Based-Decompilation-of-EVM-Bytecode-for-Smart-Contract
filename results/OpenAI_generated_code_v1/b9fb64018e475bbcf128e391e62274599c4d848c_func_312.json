{
    "contract_address": "0xB9FB64018E475BBCF128E391E62274599c4D848C",
    "heimdall_input": "function setMaxSupply(uint256 arg0) public payable {\n        require(0 - (address(msg.sender) == (address(owner)) | (msg.sender == address(this))), CustomError_5fc483c5());\n        var_a = 0x5fc483c500000000000000000000000000000000000000000000000000000000;\n        require(!(arg0 > 0xffffffffffffffff), CustomError_b43e9137());\n        var_a = 0xb43e913700000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = arg0;\n        maxSupply = arg0;\n        uint256 var_a = arg0;\n        emit MaxSupplyUpdated(arg0);\n    }",
    "llm_output": "function setMaxSupply(uint256 newMaxSupply) public payable {\n    require(msg.sender == owner || msg.sender == address(this), \"Unauthorized access\");\n    require(newMaxSupply <= 0xffffffffffffffff, \"Supply exceeds limit\");\n    \n    maxSupply = newMaxSupply;\n    emit MaxSupplyUpdated(newMaxSupply);\n}",
    "ground_truth": "function setMaxSupply(uint256 newMaxSupply) external {\\n        // Ensure the sender is only the owner or contract itself.\\n        _onlyOwnerOrSelf();\\n\\n        // Ensure the max supply does not exceed the maximum value of uint64.\\n        if (newMaxSupply > 2**64 - 1) {\\n            revert CannotExceedMaxSupplyOfUint64(newMaxSupply);\\n        }\\n\\n        // Set the new max supply.\\n        _maxSupply = newMaxSupply;\\n\\n        // Emit an event with the update.\\n        emit MaxSupplyUpdated(newMaxSupply);\\n    }"
}