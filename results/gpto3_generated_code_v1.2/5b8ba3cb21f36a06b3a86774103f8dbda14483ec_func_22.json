{
    "contract_address": "0x5B8BA3cb21F36a06b3a86774103F8dBDa14483EC",
    "heimdall_input": "function withdrawStuckTokens(uint256 arg0) public payable {\n        require(arg0 == arg0);\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var_b = address(this);\n        (bool success, bytes memory ret0) = address(0xfb6b23ade938ed16f769833b2ff92ca26303390b).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_f == (var_f));\n        require(!(var_f < arg0), \"Insufficient token balance\");\n        var_g = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_d = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_e = 0x1a;\n        var_h = 0x496e73756666696369656e7420746f6b656e2062616c616e6365000000000000;\n        var_g = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        var_d = address(owner / 0x01);\n        uint256 var_e = arg0;\n        (bool success, bytes memory ret0) = address(0xfb6b23ade938ed16f769833b2ff92ca26303390b).{ value: 0 ether }Unresolved_a9059cbb(var_d); // call\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_f == (var_f));\n    }",
    "llm_output": "function withdrawStuckTokens(uint256 amount) public payable {\n    // Preserve redundant self-check from decompiled code\n    require(amount == amount);\n\n    // Only the contract owner can perform this operation\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    IERC20 token = IERC20(TOKEN_ADDRESS);\n    uint256 contractBalance = token.balanceOf(address(this));\n    require(contractBalance >= amount, \"Insufficient token balance\");\n\n    // Ignore the returned boolean to keep identical logic to the decompiled version\n    token.transfer(owner(), amount);\n}",
    "ground_truth": "function withdrawStuckTokens(uint256 amount) external onlyOwner {\r\n        require(paymentToken.balanceOf(address(this)) >= amount, \"Insufficient token balance\");\r\n        paymentToken.transfer(owner(), amount);\r\n    }"
}