{
    "contract_address": "0xE5513c73eaCe54F05fDfa98061784bfd66b86bEA",
    "heimdall_input": "function setWalletMax(uint8 arg0) public {\n        require(arg0 == (bytes1(arg0)));\n        require(msg.sender == (address(owner)), \"you are not owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x11;\n        var_d = 0x796f7520617265206e6f74206f776e6572000000000000000000000000000000;\n        require(!(totalSupply) & (bytes1(arg0) > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / totalSupply)));\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x64);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        _walletMAX = (totalSupply * (bytes1(arg0))) / 0x64;\n    }",
    "llm_output": "function setWalletMax(uint8 percentage) public {\n    // Original decompiler check: ensures the uint8 value fits into a single byte\n    require(percentage == bytes1(percentage), \"invalid percentage\");\n\n    // Ownership check (matches decompiled `msg.sender == (address(owner))`)\n    require(msg.sender == owner(), \"you are not owner\");\n\n    /*\n        The decompiled output contained an extremely convoluted overflow-prevention\n        check.  Solidity \u22650.8 has built-in overflow protection, but to retain logical\n        fidelity we include an equivalent (and safe) condition.\n    */\n    require(\n        totalSupply == 0 || uint256(percentage) <= type(uint256).max / totalSupply,\n        \"overflow guard\"\n    );\n\n    // Always-true require found in the decompiled code (`require(0x64);`)\n    require(0x64 != 0, \"Decompiler artefact\");\n\n    // Final assignment exactly as in the original bytecode\n    _walletMAX = (totalSupply * percentage) / 100;\n}",
    "ground_truth": "function setWalletMax(uint8 percentage) public onlyOwner{\r\n        _walletMAX = totalSupply() * percentage / 100;\r\n    }"
}