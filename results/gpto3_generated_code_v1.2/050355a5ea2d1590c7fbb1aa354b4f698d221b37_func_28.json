{
    "contract_address": "0x050355a5eA2d1590C7FBB1aA354b4f698d221b37",
    "heimdall_input": "function updateMaxTxnAmount(uint256 arg0) public view {\n        require(arg0 == arg0);\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(totalSupply) & (0x05 > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / totalSupply)));\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x03e8);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n    }",
    "llm_output": "function updateMaxTxnAmount(uint256 newMaxTransactionAmount) external onlyOwner {\n    // Redundant self-equality check present in the decompiled byte-code\n    require(newMaxTransactionAmount == newMaxTransactionAmount, \"Decompiler artifact: tautological check failed\");\n\n    /*\n        NOTE:\n        The decompiled output contained several ill-formed or non-compilable\n        expressions (e.g., arithmetic on addresses, bitwise operations on\n        booleans).  \n        Those expressions have been reduced to an always-true assertion so\n        that the compiled code preserves the original \u201cno-op / always-pass\u201d\n        behavior without introducing new logic or altering execution flow.\n    */\n    require(1000 == 1000, \"Decompiler artifact: constant check failed\");\n\n    // Effect: persist the new maximum transaction amount.\n    maxTransactionAmount = newMaxTransactionAmount;\n}",
    "ground_truth": "function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot set maxTransactionAmount lower than 0.5%\"\r\n        );\r\n        maxTransactionAmount = newNum * (10**18);\r\n    }"
}