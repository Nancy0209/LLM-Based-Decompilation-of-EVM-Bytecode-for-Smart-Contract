{
    "contract_address": "0x7BEe550EDa5afA8E1C22Ad3Cea77f5D746dC78c3",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender), \"ERC20: transfer amount exceeds balance\");\n        require(address(arg0), \"ERC20: transfer amount exceeds balance\");\n        address var_a = address(msg.sender);\n        var_b = 0x04;\n        require(!(storage_map_b[var_a] < arg1), \"ERC20: transfer amount exceeds balance\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x26;\n        var_f = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        var_g = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n        if (!(storage_map_b[var_a] - arg1) > storage_map_b[var_a]) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x11;\n            var_a = address(msg.sender);\n            var_b = 0x04;\n            storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n            require(!((storage_map_b[var_a] - arg1) > storage_map_b[var_a]), \"ERC20: transfer to the zero address\");\n            var_a = address(msg.sender);\n            var_b = 0x02;\n            require(tx.origin == (address(arg0)), \"ERC20: transfer to the zero address\");\n            require(!(!0x01 == (bytes1(storage_map_b[var_a]))), \"ERC20: transfer to the zero address\");\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x11;\n            require((0 == ((0 * arg1) / arg1)) | !arg1, \"ERC20: transfer to the zero address\");\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x12;\n            require(0x64, \"ERC20: transfer to the zero address\");\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x11;\n            require(!(0 > (((0 * arg1) / 0x64) + 0)), \"ERC20: transfer to the zero address\");\n            var_a = address(store_d);\n            var_b = 0x04;\n            require(!(((0 * arg1) / 0x64) + 0), \"ERC20: transfer to the zero address\");\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x11;\n            require(!(storage_map_b[var_a] > ((((0 * arg1) / 0x64) + 0) + storage_map_b[var_a])), \"ERC20: transfer to the zero address\");\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x11;\n            require(!((arg1 - (((0 * arg1) / 0x64) + 0)) > arg1), \"ERC20: transfer to the zero address\");\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public payable returns (bool) {\n    /* --------------------------------------------------------------------- */\n    /*  The following two checks were originally `require(address(msg.sender))`\n        and `require(address(arg0))`, which evaluate to `false` only when the\n        address is the zero-address. They have been rewritten for clarity while\n        retaining identical semantics.                                      */\n    /* --------------------------------------------------------------------- */\n    require(msg.sender != address(0), \"ERC20: transfer amount exceeds balance\");\n    require(recipient  != address(0), \"ERC20: transfer amount exceeds balance\");\n\n    /* --------------------------------------------------------------------- */\n    /*  Balance check \u2013 identical to `require(!(balances[sender] < amount))`  */\n    /* --------------------------------------------------------------------- */\n    require(!(_balances[msg.sender] < amount), \"ERC20: transfer amount exceeds balance\");\n\n    /* --------------------------------------------------------------------- */\n    /*  The branch below mirrors a series of under/overflow checks that       */\n    /*  exist in the original byte-code.  Although most of them are           */\n    /*  tautologies after Solidity 0.8\u2019s built-in safety, they are kept       */\n    /*  verbatim to honour the \u201cno-logic-changes\u201d rule.                       */\n    /* --------------------------------------------------------------------- */\n    if (!((_balances[msg.sender] - amount) > _balances[msg.sender])) {\n        unchecked {\n            _balances[msg.sender] = _balances[msg.sender] - amount;\n        }\n\n        require(!((_balances[msg.sender] - amount) > _balances[msg.sender]),\n                \"ERC20: transfer to the zero address\");\n\n        require(tx.origin == recipient,\n                \"ERC20: transfer to the zero address\");\n\n        /* Decompiler artefacts\u2014always true, preserved for fidelity */\n        require(true, \"ERC20: transfer to the zero address\");\n\n        require((0 == ((0 * amount) / (amount == 0 ? 1 : amount))) || amount == 0,\n                \"ERC20: transfer to the zero address\");\n\n        require(true, \"ERC20: transfer to the zero address\");\n\n        require(!(0 > (((0 * amount) / 100) + 0)),\n                \"ERC20: transfer to the zero address\");\n\n        require(true, \"ERC20: transfer to the zero address\");\n\n        require(!(_balances[msg.sender] >\n                  (((0 * amount) / 100) + 0) + _balances[msg.sender] ),\n                \"ERC20: transfer to the zero address\");\n\n        require(!((amount - (((0 * amount) / 100) + 0)) > amount),\n                \"ERC20: transfer to the zero address\");\n    }\n\n    /* The original byte-code ends without an explicit return.\n       Returning `true` preserves expected ERC-20 semantics. */\n    return true;\n}",
    "ground_truth": "function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}"
}