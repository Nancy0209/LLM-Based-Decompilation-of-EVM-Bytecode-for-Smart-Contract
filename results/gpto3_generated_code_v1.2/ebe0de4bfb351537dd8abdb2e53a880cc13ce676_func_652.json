{
    "contract_address": "0xEBe0De4bfB351537dd8Abdb2e53a880Cc13ce676",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_k)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_c[var_a]);\n        uniswapV2Pair = 0x01000000000000000000000000000000000000000000 | (uint248(uniswapV2Pair));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_h).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_h), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_h);\n        address var_b = keccak256(var_a);\n        storage_map_c[var_a] = storage_map_c[var_a];\n        address var_k = storage_map_c[var_a];\n        emit Approval(address(this), address(store_h), storage_map_c[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_c[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_h).code.length);\n        (bool success, bytes memory ret0) = address(store_h).{ value: var_m ether }Unresolved_791ac947(var_l); // call\n        uniswapV2Pair = uint248(uniswapV2Pair);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_k).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // Requirement: only the designated tax wallet can trigger a manual swap\n    require(msg.sender == _taxWallet, \"Caller is not the tax wallet\");\n\n    // Fetch the entire token balance that the contract currently holds\n    uint256 contractTokenBalance = balanceOf(address(this));\n\n    // Approve the Uniswap router to spend the contract\u2019s tokens\n    _approve(address(this), address(uniswapV2Router), contractTokenBalance);\n\n    // Construct the swap path: token -> WETH\n    address[] memory path = new address[](2);\n    path[0] = address(this);\n    path[1] = uniswapV2Router.WETH();\n\n    // Execute the token->ETH swap\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n        contractTokenBalance,\n        0,                // accept any amount of ETH\n        path,\n        address(this),    // ETH proceeds stay in the contract (sent out afterwards)\n        block.timestamp\n    );\n\n    // The original bytecode required the contract\u2019s ETH balance to be zero here.\n    // If that condition ever fails at runtime, the function reverts exactly as in the original logic.\n    require(address(this).balance == 0, \"Decompiler artifact\");\n\n    // Forward any ETH balance to the tax wallet (will be zero if the above require passes)\n    _taxWallet.transfer(address(this).balance);\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}