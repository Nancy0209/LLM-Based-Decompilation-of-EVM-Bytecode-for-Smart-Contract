{
    "contract_address": "0x85188f89Ef6A5714818DefC0607727c9BE9f8949",
    "heimdall_input": "function balanceOf(address arg0) public view {\n        require(arg0 == (address(arg0)));\n        address var_a = address(arg0);\n        var_b = 0x02;\n        require(!(storage_map_h[var_a] > store_i), \"Amount must be less than total reflections\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x2a;\n        var_g = 0x416d6f756e74206d757374206265206c657373207468616e20746f74616c2072;\n        var_h = 0x65666c656374696f6e7300000000000000000000000000000000000000000000;\n        uint256 var_e = 0x40 + var_e;\n        var_c = 0x1a;\n        var_i = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x038d7ea4c68000 > 0, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_g = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        uint256 var_h = var_e.length;\n        uint256 var_k = 0;\n        var_l = var_m;\n        var_k = 0;\n        if (0x038d7ea4c68000) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_n = 0x12;\n            require(0x038d7ea4c68000);\n        }\n    }",
    "llm_output": "function balanceOf(address account) public view returns (uint256) {\n    /*\n        The first check in the decompiled output literally compares the parameter\n        to itself (`arg0 == address(arg0)`), which will always be true.\n        To preserve logical fidelity we keep the check, although it serves no\n        practical purpose beyond mirroring the original behaviour.\n    */\n    require(account == address(account), \"BalanceOf: invalid address\");\n\n    /*\n        `storage_map_h` in the decompiled code corresponds to the reflection\n        balance mapping (`_rOwned`).  \n        `store_i` corresponds to the total reflections variable (`_rTotal`).\n        The original require statement is preserved verbatim:  \n        \"Amount must be less than total reflections\".\n    */\n    uint256 reflectionBalance = _rOwned[account];\n    require(\n        !(reflectionBalance > _rTotal),\n        \"Amount must be less than total reflections\"\n    );\n\n    /*\n        The decompiled blob also contains a nonsensical constant\u2010truth require\n        (`require(0x038d7ea4c68000 > 0, ...)`) followed by a conditional that\n        again checks the same constant.  \n        Keeping an always-true require maintains byte-for-byte logic without\n        altering control flow.\n    */\n    require(\n        0x038d7ea4c68000 > 0,\n        \"Decompiler artifact \u2013 constant truth assertion\"\n    );\n\n    /*\n        The final `if` branch in the decompiled code gated by that same constant\n        boils down to another `require(true)` which has no effect.  Omitting it\n        does not change observable behaviour, but to stay strictly faithful we\n        include an empty block under the same condition.\n    */\n    if (0x038d7ea4c68000 != 0) {\n        // No-op: mirrors the redundant require(true) found in the decompiled output.\n    }\n\n    /*\n        The decompiled version does not perform the usual reflection-to-token\n        conversion (`tokenFromReflection`) before returning.  We therefore\n        return the raw reflection balance, exactly as observed.\n    */\n    return reflectionBalance;\n}",
    "ground_truth": "function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }"
}