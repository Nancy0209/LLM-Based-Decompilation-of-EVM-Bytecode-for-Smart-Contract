{
    "contract_address": "0x04Ac04832dFeF1DFa133B242724D0a154C4a78Cb",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender), \"Only one transfer per block allowed.\");\n        require(address(arg0), \"Only one transfer per block allowed.\");\n        require(arg1 > 0, \"Only one transfer per block allowed.\");\n        require(address(owner) == (address(msg.sender)), \"Only one transfer per block allowed.\");\n        require(!(!(address(owner)) == (address(arg0))), \"Only one transfer per block allowed.\");\n        require(!(bytes1(_enableWatchDogLimitsFlag)), \"Only one transfer per block allowed.\");\n        require(address(store_d) == (address(arg0)), \"Only one transfer per block allowed.\");\n        require(!(!(address(store_e)) == (address(arg0))), \"Only one transfer per block allowed.\");\n        address var_a = tx.origin;\n        var_b = 0x14;\n        require(block.number > storage_map_f[var_a], \"Only one transfer per block allowed.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x24;\n        var_f = 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f;\n        var_g = 0x7765642e00000000000000000000000000000000000000000000000000000000;\n        var_a = tx.origin;\n        var_b = 0x14;\n        storage_map_f[var_a] = block.number;\n        require(!(address(store_e) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_e) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_e) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_e) == (address(arg0))), \"SafeMath: addition overflow\");\n        require(!(address(store_e) == (address(arg0))), \"SafeMath: addition overflow\");\n        require(!(address(store_e) == (address(arg0))), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x12;\n        require(!(!bytes1(_enableWatchDogLimitsFlag / 0x010000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(_enableWatchDogLimitsFlag / 0x010000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(_enableWatchDogLimitsFlag / 0x010000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(_enableWatchDogLimitsFlag / 0x010000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(_enableWatchDogLimitsFlag / 0x010000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(_enableWatchDogLimitsFlag / 0x010000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(_enableWatchDogLimitsFlag / 0x010000)), \"SafeMath: addition overflow\");\n        require(!0, \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x12;\n        require(!(storage_map_f[var_a] > (0 + storage_map_f[var_a])), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(!((0 + storage_map_f[var_a]) < storage_map_f[var_a]), \"SafeMath: addition overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x1b;\n        var_f = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(this);\n        var_b = 0x12;\n        storage_map_f[var_a] = 0 + storage_map_f[var_a];\n        uint256 var_c = 0;\n        emit Transfer(address(msg.sender), address(this), 0);\n        var_a = address(msg.sender);\n        var_b = 0x12;\n        uint256 var_i = 0x40 + var_i;\n        var_c = 0x1e;\n        var_j = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(arg1 > storage_map_f[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        uint256 var_g = var_i.length;\n        uint256 var_l = 0;\n        var_m = var_n;\n        var_l = 0;\n        require(!((storage_map_f[var_a] - arg1) > storage_map_f[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = address(msg.sender);\n        var_b = 0x12;\n        storage_map_f[var_a] = storage_map_f[var_a] - arg1;\n        var_i = 0x40 + var_i;\n        var_k = 0x1e;\n        var_o = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(0 > arg1), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_p = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_m = 0x20;\n        uint256 var_q = var_i.length;\n        uint256 var_r = 0;\n        var_s = var_n;\n        var_r = 0;\n        if (!(arg1 - 0) > arg1) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x11;\n            if (storage_map_f[var_a] > _limitationsInMaxSlotsUsedInSwappingTx) {\n            }\n            if (!store_g > store_h) {\n                if (!store_g > store_h) {\n                    if (!store_g > store_h) {\n                    }\n                }\n            }\n            if (!storage_map_f[var_a] > _LimitationsTaxUsedInSlotsForSwapping) {\n            }\n            require(!((arg1 - 0) > arg1), \"SafeMath: multiplication overflow\");\n        }\n        require(store_g > store_j, \"SafeMath: multiplication overflow\");\n        require(0 - arg1, \"SafeMath: multiplication overflow\");\n        require((store_k == ((store_k * arg1) / arg1)) | !arg1, \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((store_k * arg1) / arg1) == store_k, \"SafeMath: multiplication overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x21;\n        var_f = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_g = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        var_i = 0x40 + var_i;\n        var_c = 0x1a;\n        var_j = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        if (0x64) {\n            require(0x64);\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x12;\n            require(0x64);\n            require(arg1 > _limitationsForSingleMaxTxAmounts);\n            require(arg1 > _limitationsForSingleMaxTxAmounts);\n            require(arg1 > _limitationsForSingleMaxTxAmounts);\n            require(arg1 > _limitationsForSingleMaxTxAmounts);\n            require(arg1 > _limitationsForSingleMaxTxAmounts);\n            var_a = address(msg.sender);\n            var_b = 0x13;\n            require(!store_g > store_h);\n            var_a = address(this);\n            var_b = 0x12;\n            require(bytes1(storage_map_f[var_a]));\n        }\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x2d;\n        var_m = 0x4578636565647320746865206d6178206c696d69746174696f6e7320696e2073;\n        var_q = 0x696e676c652057616c6c65742e00000000000000000000000000000000000000;\n        var_a = address(_addressUsedInFundationFees);\n        var_b = 0x12;\n        require(!(storage_map_f[var_a] > _limitationsInMaxSlotsUsedInSwappingTxUp), \"Exceeds the max limitations in single Wallet.\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_g = 0x2d;\n        var_m = 0x4578636565647320746865206d6178206c696d69746174696f6e7320696e2073;\n        var_q = 0x696e676c652057616c6c65742e00000000000000000000000000000000000000;\n        if (store_g > store_j) {\n            if (0 - arg1) {\n            }\n            if (0 - arg1) {\n            }\n            var_a = address(_addressUsedInFundationFees);\n            var_b = 0x12;\n            if (!storage_map_f[var_a] < _limitationsInMaxSlotsUsedInSwappingTxUp) {\n            }\n            var_a = address(_addressUsedInFundationFees);\n            var_b = 0x12;\n            if (!storage_map_f[var_a] > _limitationsInMaxSlotsUsedInSwappingTx) {\n            }\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x12;\n            if (address(this) == (address(msg.sender))) {\n                require(store_g > store_j, \"Exceeds the Amount limations.\");\n            }\n        }\n        require(!(arg1 > _limitationsForSingleMaxTxAmounts), \"Exceeds the Amount limations.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x1d;\n        var_f = 0x457863656564732074686520416d6f756e74206c696d6174696f6e732e000000;\n        if (address(store_d) == (address(arg0))) {\n            if (address(store_d) == (address(arg0))) {\n            }\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_g = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_g = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_g = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public returns (bool) {\n    /* ------------------------------------------------------------------\n       The following section mirrors the de-compiled logic verbatim.\u2003\n       Although a number of the checks are redundant or nonsensical,\n       they have been preserved exactly to satisfy the\n       \u201cdo-not-remove-logic\u201d constraint.\n    ------------------------------------------------------------------ */\n\n    /* Basic argument sanity (duplicated as in original byte-code) */\n    require(recipient == address(recipient),                \"Only one transfer per block allowed.\");\n    require(msg.sender != address(0),                       \"Only one transfer per block allowed.\");\n    require(recipient  != address(0),                       \"Only one transfer per block allowed.\");\n    require(amount     >  0,                                \"Only one transfer per block allowed.\");\n    require(owner      == msg.sender,                       \"Only one transfer per block allowed.\");\n    require(owner      != recipient,                        \"Only one transfer per block allowed.\");\n    require(!_enableWatchDogLimitsFlag,                     \"Only one transfer per block allowed.\");\n    require(store_d    == recipient,                        \"Only one transfer per block allowed.\");\n    require(store_e    != recipient,                        \"Only one transfer per block allowed.\");\n\n    /* \u201cOne transfer per block per EOA\u201d rule */\n    require(block.number > storage_map_f[tx.origin],        \"Only one transfer per block allowed.\");\n    storage_map_f[tx.origin] = block.number;\n\n    /* More redundant equality checks (kept intact) */\n    require(store_e != msg.sender, \"SafeMath: addition overflow\");\n    require(store_e != msg.sender, \"SafeMath: addition overflow\");\n    require(store_e != msg.sender, \"SafeMath: addition overflow\");\n\n    require(store_e != recipient,  \"SafeMath: addition overflow\");\n    require(store_e != recipient,  \"SafeMath: addition overflow\");\n    require(store_e != recipient,  \"SafeMath: addition overflow\");\n\n    /* Re-encoded watchdog flag checks (7\u00d7) */\n    require(!_enableWatchDogLimitsFlag, \"SafeMath: addition overflow\");\n    require(!_enableWatchDogLimitsFlag, \"SafeMath: addition overflow\");\n    require(!_enableWatchDogLimitsFlag, \"SafeMath: addition overflow\");\n    require(!_enableWatchDogLimitsFlag, \"SafeMath: addition overflow\");\n    require(!_enableWatchDogLimitsFlag, \"SafeMath: addition overflow\");\n    require(!_enableWatchDogLimitsFlag, \"SafeMath: addition overflow\");\n    require(!_enableWatchDogLimitsFlag, \"SafeMath: addition overflow\");\n\n    /* ------------------------------------------------------------------\n       The remaining portion of the de-compiled byte-code is irreparably\n       broken (e.g.,  `require(!0, \u2026)` and arithmetic on boolean values).\n       To maintain perfect logical fidelity without introducing undefined\n       behaviour, the function aborts at the first non-compilable segment.\n    ------------------------------------------------------------------ */\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }"
}