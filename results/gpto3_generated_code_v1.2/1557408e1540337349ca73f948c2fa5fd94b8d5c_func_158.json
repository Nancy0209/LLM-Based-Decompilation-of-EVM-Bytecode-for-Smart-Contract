{
    "contract_address": "0x1557408E1540337349Ca73F948C2FA5Fd94b8d5c",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender));\n        require(address(arg0));\n        require(arg1 > 0);\n        require(address(owner) == (address(msg.sender)));\n        require(address(owner) == (address(arg0)));\n        address var_a = address(msg.sender);\n        var_b = 0x05;\n        require(bytes1(storage_map_b[var_a]));\n        require(!bytes1(storage_map_b[var_a]));\n        require(bytes1(store_c / 0x010000000000000000000000000000000000000000), \"SafeMath: multiplication overflow\");\n        require(0 - arg1, \"SafeMath: multiplication overflow\");\n        require((0 == ((0 * arg1) / arg1)) | !arg1, \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((0 * arg1) / arg1) == 0, \"SafeMath: multiplication overflow\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x21;\n        var_g = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_h = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        uint256 var_i = 0x40 + var_i;\n        var_d = 0x1a;\n        var_j = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x64, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        uint256 var_h = var_i.length;\n        uint256 var_l = 0;\n        var_m = var_n;\n        var_l = 0;\n        require(0x64, \"Only one transfer per block allowed.\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x12;\n        require(!(bytes1(transferDelayEnabled)), \"Only one transfer per block allowed.\");\n        require(address(store_e) == (address(arg0)), \"Only one transfer per block allowed.\");\n        require(!(!(address(store_c)) == (address(arg0))), \"Only one transfer per block allowed.\");\n        var_a = tx.origin;\n        var_b = 0x06;\n        require(block.number > storage_map_b[var_a], \"Only one transfer per block allowed.\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        var_h = 0x24;\n        var_m = 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f;\n        var_o = 0x7765642e00000000000000000000000000000000000000000000000000000000;\n        var_a = tx.origin;\n        var_b = 0x06;\n        storage_map_b[var_a] = block.number;\n        require(!(address(store_c) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_c) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_c) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_c) == (address(arg0))), \"SafeMath: addition overflow\");\n        require(!(address(store_c) == (address(arg0))), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x01;\n        require(!(!bytes1(store_c / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_c / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_c / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_c / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_c / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!((0 * arg1) / 0x64), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x01;\n        require(!(storage_map_b[var_a] > (((0 * arg1) / 0x64) + storage_map_b[var_a])), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(!(((0 * arg1) / 0x64) + storage_map_b[var_a] < storage_map_b[var_a]), \"SafeMath: addition overflow\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        var_h = 0x1b;\n        var_m = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(this);\n        var_b = 0x01;\n        storage_map_b[var_a] = ((0 * arg1) / 0x64) + storage_map_b[var_a];\n        uint256 var_k = (0 * arg1) / 0x64;\n        emit Transfer(address(msg.sender), address(this), (0 * arg1) / 0x64);\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        var_i = 0x40 + var_i;\n        var_k = 0x1e;\n        var_p = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(arg1 > storage_map_b[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!((storage_map_b[var_a] - arg1) > storage_map_b[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        var_i = 0x40 + var_i;\n        var_q = 0x1e;\n        var_r = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(((0 * arg1) / 0x64) > arg1), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_s = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_t = 0x20;\n        uint256 var_u = var_i.length;\n        uint256 var_v = 0;\n        var_w = var_n;\n        var_v = 0;\n        if (!(arg1 - ((0 * arg1) / 0x64)) > arg1) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_c = 0x11;\n            if (storage_map_b[var_a] > _maxTaxSwap) {\n            }\n            if (!store_g > store_h) {\n            }\n            if (!storage_map_b[var_a] > _taxSwapThreshold) {\n            }\n            require(!((arg1 - ((0 * arg1) / 0x64)) > arg1), \"Exceeds the _maxTxAmount.\");\n        }\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        var_h = 0x19;\n        var_m = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (store_g > store_k) {\n            if (0 - arg1) {\n            }\n            if (0 - arg1) {\n            }\n            require(store_g > store_k, \"Exceeds the _maxTxAmount.\");\n        }\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        var_h = 0x19;\n        var_m = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (address(store_e) == (address(arg0))) {\n            if (address(store_e) == (address(arg0))) {\n            }\n        }\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x12;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x29;\n        var_g = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_h = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x23;\n        var_g = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_h = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_h = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public override returns (bool) {\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\n    require(_msgSender() != address(0), \"ERC20: transfer from the zero address\");\n    require(amount > 0, \"Transfer amount must be greater than zero\");\n\n    address sender = _msgSender();\n\n    // --- Anti-bot & anti-whale logic (owner is exempt) ------------------------\n    if (sender != _owner && recipient != _owner) {\n        if (transferDelayEnabled) {\n            require(\n                _lastTransferBlock[tx.origin] < block.number,\n                \"Only one transfer per block allowed.\"\n            );\n            _lastTransferBlock[tx.origin] = block.number;\n        }\n\n        require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\n\n        // Enforce max wallet size for buys / wallet-to-wallet transfers\n        if (recipient != _uniswapV2Pair) {\n            require(\n                _balances[recipient] + amount <= _maxWalletSize,\n                \"Exceeds the _maxWalletSize.\"\n            );\n        }\n    }\n\n    // --- Tax calculation ------------------------------------------------------\n    uint256 taxAmount = 0;\n    if (!_isExcludedFromFee[sender] && !_isExcludedFromFee[recipient]) {\n        taxAmount = (amount * _finalTax) / 100;\n    }\n    uint256 transferAmount = amount - taxAmount;\n\n    // --- Balance updates ------------------------------------------------------\n    _balances[sender] -= amount;\n    _balances[recipient] += transferAmount;\n\n    emit Transfer(sender, recipient, transferAmount);\n\n    if (taxAmount > 0) {\n        _balances[address(this)] += taxAmount;\n        emit Transfer(sender, address(this), taxAmount);\n    }\n\n    return true;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }"
}