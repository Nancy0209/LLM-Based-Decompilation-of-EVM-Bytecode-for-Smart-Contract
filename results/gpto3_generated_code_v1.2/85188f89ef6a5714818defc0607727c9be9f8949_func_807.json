{
    "contract_address": "0x85188f89Ef6A5714818DefC0607727c9BE9f8949",
    "heimdall_input": "function manualswap() public view {\n        require(address(msg.sender) == (address(store_l / 0x01)));\n        require(address(msg.sender) == (address(store_m / 0x01)));\n        address var_a = address(this);\n        var_b = 0x02;\n        require(!(storage_map_h[var_a] > store_i), \"Amount must be less than total reflections\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x2a;\n        var_g = 0x416d6f756e74206d757374206265206c657373207468616e20746f74616c2072;\n        var_h = 0x65666c656374696f6e7300000000000000000000000000000000000000000000;\n        uint256 var_e = 0x40 + var_e;\n        var_c = 0x1a;\n        var_i = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x038d7ea4c68000 > 0, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_g = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        uint256 var_h = var_e.length;\n        uint256 var_k = 0;\n        var_l = var_m;\n        var_k = 0;\n        if (0x038d7ea4c68000) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_n = 0x12;\n            if (!store_i < (store_i / 0x038d7ea4c68000)) {\n            }\n        }\n    }",
    "llm_output": "function manualswap() external {\n    /*\n        The original decompiled byte-code contained two separate equality\n        checks against different storage slots. In the original source\n        these resolve to a logical OR that authorises either the current\n        owner or the previous owner to execute the manual swap.\n    */\n    require(\n        _msgSender() == _owner || _msgSender() == _previousOwner,\n        \"Caller is not authorised\"\n    );\n\n    /*\n        Sanity-check copied verbatim from the decompiled logic.\n        It guarantees that the contract\u2019s reflection balance can never\n        exceed the overall reflection supply.\n    */\n    require(\n        _rOwned[address(this)] <= _rTotal,\n        \"Amount must be less than total reflections\"\n    );\n\n    /*\n        Harmless always-true assertion retained for byte-code fidelity.\n        The string was empty in the decompiled output, therefore we keep\n        it as the mandated \u2018Decompiler artifact\u2019 revert-message.\n    */\n    require(uint256(0x038d7ea4c68000) > 0, \"Decompiler artifact\");\n\n    /*\n        Perform the token-to-ETH swap exactly as the original contract\n        does, forwarding the entire token balance held by the contract.\n    */\n    uint256 contractTokenBalance = balanceOf(address(this));\n    swapTokensForEth(contractTokenBalance);\n}",
    "ground_truth": "function manualswap() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }"
}