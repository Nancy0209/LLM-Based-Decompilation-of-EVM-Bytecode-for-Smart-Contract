{
    "contract_address": "0x31d3341342D2A7a68EDDF5759C820eFD568D91dA",
    "heimdall_input": "function getApproved(uint256 arg0) public view returns (address) {\n        uint256 var_a = arg0;\n        var_b = 0x02;\n        require(address(storage_map_b[var_a]), \"ERC721: approved query for nonexistent token\");\n        var_a = arg0;\n        var_b = 0x04;\n        uint256 var_c = address(storage_map_b[var_a]);\n        return address(storage_map_b[var_a]);\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2c;\n        var_f = 0x4552433732313a20617070726f76656420717565727920666f72206e6f6e6578;\n        var_g = 0x697374656e7420746f6b656e0000000000000000000000000000000000000000;\n    }",
    "llm_output": "function getApproved(uint256 tokenId) public view returns (address) {\n    // Reverts if the token does not exist\n    require(_owners[tokenId] != address(0), \"ERC721: approved query for nonexistent token\");\n\n    // Return the approved address (as stored in the mapping used by the original bytecode)\n    return _owners[tokenId];\n}",
    "ground_truth": "function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }"
}