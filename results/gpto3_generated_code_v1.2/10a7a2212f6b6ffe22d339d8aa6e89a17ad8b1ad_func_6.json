{
    "contract_address": "0x10A7A2212f6b6ffE22d339D8Aa6e89a17ad8b1ad",
    "heimdall_input": "function withdrawStuckEth(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender) == (address(devWallet / 0x01)));\n        (bool success, bytes memory ret0) = address(arg0).transfer(address(this).balance);\n        require(ret0.length == 0);\n    }",
    "llm_output": "function withdrawStuckEth(address toAddr) external {\n    // Redundant self-equality check preserved from decompiled code\n    require(toAddr == address(toAddr), \"Address check failed\");\n\n    // Original logic compared msg.sender to devWallet (division by 1 was a decompiler artefact)\n    require(msg.sender == devWallet, \"Caller is not devWallet\");\n\n    // Send entire ETH balance to the specified address\n    (bool success, bytes memory returnData) = payable(toAddr).call{value: address(this).balance}(\"\");\n    // Silence compiler warning for unused variable\n    success;\n\n    // Preserve decompiled check on returned data length\n    require(returnData.length == 0, \"Unexpected return data\");\n}",
    "ground_truth": "function withdrawStuckEth(address toAddr) external onlyDev {\n        (bool success, ) = toAddr.call{value: address(this).balance}(\"\");\n        require(success);\n    }"
}