{
    "contract_address": "0x332098414098f0E42658f2eA0254B44b077bb4A5",
    "heimdall_input": "function updateGoldenHarvestFields(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(address(_owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        emit GoldenHarvestFieldsUpdated(address(arg0), address(GoldenHarvestFields / 0x01));\n        GoldenHarvestFields = (address(arg0) * 0x01) | (uint96(GoldenHarvestFields));\n    }",
    "llm_output": "function updateGoldenHarvestFields(address newWallet) public {\n    // Original self-equality check (always true, but must be preserved)\n    require(newWallet == address(newWallet), \"Address self-check failed\");\n\n    // Ownership verification exactly as in decompiled logic\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    // Emit event BEFORE state change, matching decompiled order\n    emit GoldenHarvestFieldsUpdated(newWallet, GoldenHarvestFields);\n\n    // Bit-wise assignment reconstructed from decompiled code\n    GoldenHarvestFields = address(\n        uint160(newWallet) | uint96(uint160(GoldenHarvestFields))\n    );\n}",
    "ground_truth": "function updateGoldenHarvestFields(address newWallet) external onlyOwner {\\n        emit GoldenHarvestFieldsUpdated(newWallet, GoldenHarvestFields);\\n        GoldenHarvestFields = newWallet;\\n    }"
}