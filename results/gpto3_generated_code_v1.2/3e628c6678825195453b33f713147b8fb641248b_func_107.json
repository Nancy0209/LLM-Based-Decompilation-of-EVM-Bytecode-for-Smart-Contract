{
    "contract_address": "0x3e628c6678825195453B33f713147B8fb641248b",
    "heimdall_input": "function updateMaxBuyAmount(uint256 arg0) public view {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require((totalSupply == ((totalSupply * 0x02) / 0x02)) | !0x02);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x03e8);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n    }",
    "llm_output": "function updateMaxBuyAmount(uint256 newMaxBuyAmount) external view {\n    // Ownership check (kept exactly as in the decompiled logic)\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    // Nonsensical, always-true checks that appeared in the decompiled bytecode.\n    // They are preserved verbatim to maintain perfect logical fidelity.\n    require(totalSupply == (totalSupply * 2) / 2, \"Decompiler artifact\");\n    require(1000 > 0, \"Decompiler artifact\");\n\n    // NOTE: The decompiled code contained no meaningful state updates.\n    // Introducing any would violate the \u201cno added logic\u201d mandate.\n}",
    "ground_truth": "function updateMaxBuyAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (totalSupply() * 2 / 1000)/1e18, \"Cannot set max buy amount lower than 0.2%\");\r\n        maxBuyAmount = newNum * (10**18);\r\n        emit UpdatedMaxBuyAmount(maxBuyAmount);\r\n    }"
}