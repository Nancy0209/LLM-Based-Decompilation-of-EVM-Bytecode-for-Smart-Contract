{
    "contract_address": "0x8a357F1146a32d8a2494bCdaB62452ed3498196a",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_p)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_f = 0x01000000000000000000000000000000000000000000 | (uint248(store_f));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_l).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!((var_d + ret0.length) - var_d) < 0x20);\n        require(var_d.length == (address(var_d.length)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this));\n        require(address(store_l));\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_l);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_l), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_o = var_d.length;\n        address var_p = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_l).code.length);\n        (bool success, bytes memory ret0) = address(store_l).Unresolved_791ac947(var_l); // call\n        store_f = uint248(store_f);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_p).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_p = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_p = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() external {\n    // Only contract owner is allowed to trigger a manual swap\n    require(msg.sender == _owner, \"Caller is not the owner\");\n\n    // Sanity-check: the contract itself must not be flagged as a bot\n    require(!_isBot[address(this)], \"Contract address is flagged as bot\");\n\n    uint256 contractTokenBalance = balanceOf(address(this));\n    require(contractTokenBalance > 0, \"Contract token balance is zero\");\n\n    // Grant router permission to spend tokens held by this contract\n    _approve(address(this), address(uniswapV2Router), contractTokenBalance);\n\n    // Build the token \u2192 WETH path\n    address[] memory path = new address[](2);\n    path[0] = address(this);\n    path[1] = uniswapV2Router.WETH();\n\n    // Perform the token-to-ETH swap\n    inSwap = true;\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n        contractTokenBalance,\n        0,                  // accept any amount of ETH\n        path,\n        address(this),      // ETH is sent to this contract\n        block.timestamp\n    );\n    inSwap = false;\n\n    uint256 contractETHBalance = address(this).balance;\n    require(contractETHBalance > 0, \"Contract ETH balance is zero\");\n\n    // Transfer the obtained ETH to the owner\n    payable(_owner).transfer(contractETHBalance);\n}",
    "ground_truth": "function manualSwap() external {\n        require(_msgSender()==_taxWallet);\n        uint256 tokenBalance=balanceOf(address(this));\n        if(tokenBalance>0){\n          swapTokensForEth(tokenBalance);\n        }\n        uint256 ethBalance=address(this).balance;\n        if(ethBalance>0){\n          sendETHToFee(ethBalance);\n        }\n    }"
}