{
    "contract_address": "0x0056aC5defc0F8380b9d2B351c3C23b23A852082",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender));\n        require(address(arg0));\n        require(arg1 > 0);\n        require(address(owner) == (address(msg.sender)));\n        require(address(owner) == (address(arg0)));\n        address var_a = address(msg.sender);\n        var_b = 0x04;\n        require(bytes1(storage_map_b[var_a]));\n        require(!bytes1(storage_map_b[var_a]));\n        require(store_c > store_d, \"SafeMath: multiplication overflow\");\n        require(0 - arg1, \"SafeMath: multiplication overflow\");\n        require((store_e == ((store_e * arg1) / arg1)) | !arg1, \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((store_e * arg1) / arg1) == store_e, \"SafeMath: multiplication overflow\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x21;\n        var_g = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_h = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        uint256 var_i = 0x40 + var_i;\n        var_d = 0x1a;\n        var_j = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x64, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        uint256 var_h = var_i.length;\n        uint256 var_l = 0;\n        var_m = var_n;\n        var_l = 0;\n        require(0x64, \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x12;\n        require(!(bytes1(transferDelayEnabled)), \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\n        require(address(store_g) == (address(arg0)), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        require(!(!(address(store_h)) == (address(arg0))), \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\");\n        var_a = tx.origin;\n        var_b = 0x05;\n        require(block.number > storage_map_b[var_a], \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        var_h = 0x49;\n        var_m = 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c;\n        var_o = 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b;\n        var_p = 0x20616c6c6f7765642e0000000000000000000000000000000000000000000000;\n        var_a = tx.origin;\n        var_b = 0x05;\n        storage_map_b[var_a] = block.number;\n        require(!(address(store_h) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_h) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_h) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_h) == (address(arg0))), \"SafeMath: addition overflow\");\n        require(!(address(store_h) == (address(arg0))), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x01;\n        require(!(!bytes1(store_h / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_h / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_h / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_h / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_h / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!((store_e * arg1) / 0x64), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x01;\n        require(!(storage_map_b[var_a] > (((store_e * arg1) / 0x64) + storage_map_b[var_a])), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(!(((store_e * arg1) / 0x64) + storage_map_b[var_a] < storage_map_b[var_a]), \"SafeMath: addition overflow\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        var_h = 0x1b;\n        var_m = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(this);\n        var_b = 0x01;\n        storage_map_b[var_a] = ((store_e * arg1) / 0x64) + storage_map_b[var_a];\n        uint256 var_k = (store_e * arg1) / 0x64;\n        emit Transfer(address(msg.sender), address(this), (store_e * arg1) / 0x64);\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        var_i = 0x40 + var_i;\n        var_k = 0x1e;\n        var_q = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(arg1 > storage_map_b[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!((storage_map_b[var_a] - arg1) > storage_map_b[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        var_i = 0x40 + var_i;\n        var_r = 0x1e;\n        var_s = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(((store_e * arg1) / 0x64) > arg1), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_t = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_p = 0x20;\n        uint256 var_u = var_i.length;\n        uint256 var_v = 0;\n        var_w = var_n;\n        var_v = 0;\n        if (!(arg1 - ((store_e * arg1) / 0x64)) > arg1) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_c = 0x11;\n            if (storage_map_b[var_a] > _maxTaxSwap) {\n            }\n            if (!store_c > store_j) {\n            }\n            if (!storage_map_b[var_a] > _taxSwapThreshold) {\n            }\n            if (!store_h / 0x0100000000000000000000000000000000000000000000) {\n            }\n            if (store_c > store_l) {\n                if (0 - arg1) {\n                }\n                require(!((arg1 - ((store_e * arg1) / 0x64)) > arg1), \"Exceeds the _maxTxAmount.\");\n            }\n            require(store_c > store_l, \"Exceeds the _maxTxAmount.\");\n        }\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        var_h = 0x19;\n        var_m = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (address(store_g) == (address(arg0))) {\n            if (address(store_g) == (address(arg0))) {\n            }\n        }\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x12;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x29;\n        var_g = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_h = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x23;\n        var_g = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_h = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_h = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public returns (bool) {\n    /* \n        NOTE\n        ----\n        This function is a best-effort semantic reconstruction of the very noisy\n        decompiled byte-code.  \n        All apparently-redundant or illogical checks have been retained so that\n        the run-time behaviour remains identical to the original contract.\n    */\n\n    /* 1. Redundant equality & zero-address checks (kept for fidelity) */\n    require(recipient == address(recipient), \"Decompiler artifact\");\n    require(msg.sender != address(0),      \"ERC20: transfer from the zero address\");\n    require(recipient   != address(0),      \"ERC20: transfer to the zero address\");\n\n    /* 2. Positive amount constraint */\n    require(amount > 0, \"Transfer amount must be greater than zero\");\n\n    /* 3. Obscure ownership checks found in byte-code (retained verbatim) */\n    require(_owner == msg.sender,  \"Decompiler artifact: sender is not owner\");\n    require(_owner == recipient,   \"Decompiler artifact: recipient is not owner\");\n\n    /* 4. Transfer-delay / anti-bot logic */\n    if (transferDelayEnabled) {\n        require(\n            _lastTransferBlock[tx.origin] < block.number,\n            \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\n        );\n        _lastTransferBlock[tx.origin] = block.number;\n    }\n\n    /* 5. Maximum-transaction limit (seen in decompiled safe-math) */\n    require(!(amount > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n\n    /* 6. Tax calculation extracted from `(store_e * arg1) / 0x64`                 *\n     *    `store_e` in the byte-code maps to the current buy-tax-rate variable.    */\n    uint256 taxRate   = _finalBuyTax;                 // assumed mapping\n    uint256 taxAmount = (taxRate * amount) / 100;\n\n    /* 7. Safe-math style invariants preserved from the decompiler output */\n    require(\n        ((taxRate * amount) / 100) == taxAmount,\n        \"SafeMath: multiplication overflow\"\n    );\n    require(taxAmount <= amount, \"SafeMath: subtraction overflow\");\n\n    /* 8. State updates (+ events) follow the order implied by byte-code          *\n     *    Assumes _balances, _lastTransferBlock, etc. are declared elsewhere.     */\n    _balances[msg.sender] -= amount;           // debit full amount from sender\n    _balances[address(this)] += taxAmount;     // contract collects the tax\n    emit Transfer(msg.sender, address(this), taxAmount);\n\n    uint256 netAmount = amount - taxAmount;    // amount actually received\n    _balances[recipient] += netAmount;         // credit recipient\n    emit Transfer(msg.sender, recipient, netAmount);\n\n    return true;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}