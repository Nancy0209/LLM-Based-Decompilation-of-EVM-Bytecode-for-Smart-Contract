{
    "contract_address": "0xEea644890623CdfBD648027cbf819A3C8e48C924",
    "heimdall_input": "function transferManagement(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(manager)), \"Manageable: caller is not the manager\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x25;\n        var_d = 0x4d616e61676561626c653a2063616c6c6572206973206e6f7420746865206d61;\n        var_e = 0x6e61676572000000000000000000000000000000000000000000000000000000;\n        emit ManagementTransferred(address(manager), address(arg0));\n        manager = (address(arg0)) | (uint96(manager));\n    }",
    "llm_output": "function transferManagement(address newManager) public {\n    // Redundant self-equality check preserved from decompiled bytecode\n    require(newManager == address(newManager), \"Decompiled: invalid address check\");\n\n    // Only the current manager can transfer management\n    require(msg.sender == manager, \"Manageable: caller is not the manager\");\n\n    emit ManagementTransferred(manager, newManager);\n\n    // Preserve original bitwise-OR assignment logic from bytecode\n    manager = address(\n        uint160(\n            uint256(uint160(newManager)) |\n            uint256(uint96(uint160(manager)))\n        )\n    );\n}",
    "ground_truth": "function transferManagement(address newManager)\r\n        external\r\n        virtual\r\n        onlyManager\r\n    {\r\n        emit ManagementTransferred(_manager, newManager);\r\n        _manager = newManager;\r\n    }"
}