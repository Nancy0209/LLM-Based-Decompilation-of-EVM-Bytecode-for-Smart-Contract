{
    "contract_address": "0xE575f6f50AF7A409F7381F15bC25Ff9dD9414660",
    "heimdall_input": "function ShatteredRefineResourceIndicators(uint256 arg0) public view {\n        require(arg0 == arg0);\n        require(address(_owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!totalSupply | (0x01 == ((totalSupply * 0x01) / totalSupply)), \"Swap amount cannot be lower than 0.001% total supply.\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x0186a0, \"Swap amount cannot be lower than 0.001% total supply.\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        require(!(arg0 < ((totalSupply * 0x01) / 0x0186a0)), \"Swap amount cannot be lower than 0.001% total supply.\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x35;\n        var_e = 0x5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e;\n        var_h = 0x20302e3030312520746f74616c20737570706c792e0000000000000000000000;\n    }",
    "llm_output": "function ShatteredRefineResourceIndicators(uint256 newAmount) public returns (bool) {\n    // Ensure the caller is the contract owner\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    // Solidity 0.8+ automatically reverts on division by zero, so this also guarantees totalSupply() > 0\n    require(totalSupply() * 1 / totalSupply() == 1, \"Swap amount cannot be lower than 0.001% total supply.\");\n\n    // Redundant check preserved to maintain exact decompiled logic\n    require(100000 > 0, \"Swap amount cannot be lower than 0.001% total supply.\");\n\n    // newAmount must be at least 0.001% of the total supply\n    require(newAmount >= (totalSupply() * 1) / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\n\n    // Update the swap threshold\n    swapTokensAmount = newAmount;\n\n    return true;\n}",
    "ground_truth": "function ShatteredRefineResourceIndicators(uint256 newAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            newAmount >= (totalSupply() * 1) / 100000,\\r\\n            \\\"Swap amount cannot be lower than 0.001% total supply.\\\"\\r\\n        );\\r\\n        require(\\r\\n            newAmount <= (totalSupply() * 5) / 1000,\\r\\n            \\\"Swap amount cannot be higher than 0.5% total supply.\\\"\\r\\n        );\\r\\n        swapTokensAmount = newAmount;\\r\\n        return true;\\r\\n    }"
}