{
    "contract_address": "0x8D8695A3Da190f5D1C468FA7018a83F4FFb6c513",
    "heimdall_input": "function Live_Uniswap() public {\n        require(address(msg.sender) == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(store_f / 0x010000000000000000000000000000000000000000)), \"trading is already open\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x17;\n        var_d = 0x74726164696e6720697320616c7265616479206f70656e000000000000000000;\n        store_l = 0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_l));\n        require(0x12, \"ERC20: approve to the zero address\");\n        require(!(0x174876e800 & (0x01 > 0x0afebff0bcb24aafef78f69a51539d748f2ff38ca3eda88b093e034f)), \"ERC20: approve to the zero address\");\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_l))), \"ERC20: approve to the zero address\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x22;\n        var_d = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_g = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        address var_e = address(this);\n        var_h = 0x02;\n        var_e = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_l)));\n        address var_h = keccak256(var_e);\n        storage_map_m[var_e] = 0x174876e800;\n        var_a = 0x174876e800;\n        emit Approval(address(this), address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d | (uint96(store_l))), 0x174876e800);\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        require(address(store_l / 0x01).code.length);\n        (bool success, bytes memory ret0) = address(store_l / 0x01).factory(var_b); // staticcall\n        uint256 var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x20);\n        require(var_i.length == (address(var_i.length)));\n        var_j = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        require(address(store_l / 0x01).code.length);\n        (bool success, bytes memory ret0) = address(store_l / 0x01).WETH(var_c); // staticcall\n        var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x20);\n        require(var_i.length == (address(var_i.length)));\n        var_k = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        address var_d = address(this);\n        uint256 var_g = address(var_i.length);\n        require(address(var_i.length).code.length);\n        (bool success, bytes memory ret0) = address(var_i.length).{ value: 0 ether }Unresolved_c9c65396(var_d); // call\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x24;\n        var_d = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_g = 0x7265737300000000000000000000000000000000000000000000000000000000;\n        if (0x0a) {\n            if (0x0a == 0x01) {\n                if (0x0a == 0x02) {\n                    if (!0x12 > 0xff) {\n                        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_f = 0x11;\n                        if (!0x040000 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                            var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            var_f = 0x11;\n                            if (!((0x0a < 0x0b) & (0x12 < 0x4e)) | ((0x0a < 0x0133) & (0x12 < 0x20))) {\n                                if (0x12 > 0x01) {\n                                    if (!0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        var_f = 0x11;\n                                        if (!0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                            var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                            var_f = 0x11;\n                                            if (!0) {\n                                            }\n                                            if (!0x0de0b6b3a7640000 > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                                                var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                                var_f = 0x11;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function Live_Uniswap() public {\n    // Only the contract owner can enable trading\n    require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n\n    // Trading must not already be open\n    require(!tradingOpen, \"trading is already open\");\n\n    // Initialize the Uniswap V2 router\n    uniswapV2Router = IUniswapV2Router02(\n        0x7a250d5630b4cf539739df2c5dacb4c659f2488d\n    );\n\n    /*\n     * The decompiled byte-code contained several redundant `require`\n     * statements that always evaluate to true. They are kept here\n     * to preserve byte-level logical fidelity.\n     */\n    require(true, \"ERC20: approve to the zero address\");\n    require(true, \"ERC20: approve to the zero address\");\n    require(true, \"ERC20: approve to the zero address\");\n    require(true, \"ERC20: approve to the zero address\");\n\n    // Give the router an unlimited allowance to spend this contract's tokens\n    _approve(address(this), address(uniswapV2Router), type(uint256).max);\n\n    // Create the pair for this token\n    uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\n        address(this),\n        uniswapV2Router.WETH()\n    );\n\n    // Add the initial liquidity to Uniswap\n    uniswapV2Router.addLiquidityETH{value: address(this).balance}(\n        address(this),\n        balanceOf(address(this)),\n        0,\n        0,\n        _owner,\n        block.timestamp\n    );\n\n    // Enable token swapping and open trading\n    swapEnabled = true;\n    tradingOpen = true;\n}",
    "ground_truth": "function Live_Uniswap() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        firstBlock = block.number;\r\n    }"
}