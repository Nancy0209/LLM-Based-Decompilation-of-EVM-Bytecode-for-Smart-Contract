{
    "contract_address": "0x69dfa326b4636d0d5D256CFEce392B25799daf3c",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_c) {\n            if (store_c - ((store_c >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_c >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_c >> 0x01;\n                if (store_c) {\n                    if (store_c - ((store_c >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_c >> 0x01) {\n                            if (0x1f < (store_c >> 0x01)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_c >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory result) {\n    assembly {\n        // Storage slot that holds the `_symbol` string\n        let slot := _symbol.slot\n        let slotData := sload(slot)\n\n        // If LSB == 1 the string is stored in-line (short string optimisation)\n        switch and(slotData, 1)\n        case 1 {\n            // -----------------------------------------------------------------\n            // Short string (length \u2264 31 bytes) \u2013 data lives inside the slot\n            // -----------------------------------------------------------------\n            let len := shr(1, slotData)        // real length (bit-shifted right)\n            \n            // Overflow / out-of-bounds safety (mirrors compiler-inserted check)\n            if gt(len, 0x1f) {\n                // Panic(0x22): slice out-of-bounds\n                mstore(0x00, 0x4e487b71)\n                mstore(0x04, 0x22)\n                revert(0x00, 0x24)\n            }\n\n            // Allocate memory for the return value\n            result := mload(0x40)\n            mstore(result, len)                // Store length\n\n            // Store the actual bytes (already packed in `slotData`)\n            mstore(add(result, 0x20), slotData)\n\n            // Move free-memory pointer forward by 64 bytes\n            mstore(0x40, add(result, 0x40))\n        }\n        default {\n            // -----------------------------------------------------------------\n            // Long string (length > 31 bytes) \u2013 data starts at keccak(slot)\n            // -----------------------------------------------------------------\n            let len := shr(1, slotData)        // real length\n\n            // Safety check: long string must be at least 32 bytes\n            if lt(len, 0x20) {\n                // Panic(0x22): slice out-of-bounds\n                mstore(0x00, 0x4e487b71)\n                mstore(0x04, 0x22)\n                revert(0x00, 0x24)\n            }\n\n            // Allocate memory for the return string\n            result := mload(0x40)\n            mstore(result, len)                // Store length\n\n            // Calculate the starting storage slot of the string data\n            let dataSlot := keccak256(slot, 1)\n\n            // Copy the data word-by-word from storage to memory\n            for { let offset := 0 } lt(offset, len) { offset := add(offset, 0x20) } {\n                mstore(\n                    add(result, add(0x20, offset)),\n                    sload(add(dataSlot, div(offset, 0x20)))\n                )\n            }\n\n            // Update free-memory pointer (rounded up to 32-byte boundary)\n            mstore(0x40, add(result, add(0x20, and(add(len, 0x1f), not(0x1f)))))\n        }\n    }\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }"
}