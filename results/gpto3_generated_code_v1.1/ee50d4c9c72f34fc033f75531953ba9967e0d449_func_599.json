{
    "contract_address": "0xeE50d4c9C72F34fC033F75531953bA9967E0d449",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_a >> 0x01;\n                if (store_a) {\n                    if (store_a - ((store_a >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a >> 0x01) {\n                            if (0x1f < (store_a >> 0x01)) {\n                                var_a = 0x03;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function name() public view returns (string memory tokenName) {\n    assembly {\n        // Pointer to free memory\n        let memPtr := mload(0x40)\n\n        // Slot 0 is reserved for the string `name`\n        let slot0 := sload(0)\n\n        // If the lowest bit is 0, the string is stored in-place (\u226431 bytes)\n        switch and(slot0, 1)\n        case 0 {\n            // String length is the value of slot0 shifted right by 1\n            let strLen := shr(1, slot0)\n\n            // Allocate enough memory: 32 bytes length field + padded data\n            let allocSize := add(0x20, 0x20)        // we always allocate a full 32-byte word for data\n            mstore(0x40, add(memPtr, allocSize))\n\n            // Store length\n            mstore(memPtr, strLen)\n\n            // Store the slot directly (it already contains the bytes)\n            mstore(add(memPtr, 0x20), slot0)\n\n            // Return pointer\n            tokenName := memPtr\n        }\n        default {\n            // String is stored externally; slot0 >> 1 is length\n            let strLen := shr(1, slot0)\n\n            // Calculate starting slot of the data: keccak256(slot)\n            mstore(0x00, 0)                 // slot number\n            let dataSlot := keccak256(0x00, 0x20)\n\n            // Calculate how many 32-byte words we need to copy\n            let words := add(div(strLen, 0x20), iszero(iszero(mod(strLen, 0x20))))\n            let allocSize := add(0x20, mul(words, 0x20))\n\n            // Allocate memory\n            mstore(0x40, add(memPtr, allocSize))\n\n            // Store length\n            mstore(memPtr, strLen)\n\n            // Copy words from storage to memory\n            for { let i := 0 } lt(i, words) { i := add(i, 1) } {\n                mstore(\n                    add(memPtr, add(0x20, mul(i, 0x20))),\n                    sload(add(dataSlot, i))\n                )\n            }\n\n            // Return pointer\n            tokenName := memPtr\n        }\n    }\n}",
    "ground_truth": "function name() public view returns (string memory) {\r\n        return _name;\r\n    }"
}