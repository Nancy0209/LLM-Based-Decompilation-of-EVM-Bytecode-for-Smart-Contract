{
    "contract_address": "0x780c7f2FdF0D47F25f5858975DBd0159DB50C1B2",
    "heimdall_input": "function updateSliverEconomicCapSummits(uint256 arg0) public view {\n        require(arg0 == arg0);\n        require(address(_owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!totalSupply | (0x0a == ((totalSupply * 0x0a) / totalSupply)));\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x03e8);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n    }",
    "llm_output": "function updateSliverEconomicCapSummits(uint256 newNum) external view {\n    // Solidity\u2010level recreation of the checks observed in the decompiled byte-code\n\n    // 1. Tautological check kept intact\n    require(newNum == newNum);\n\n    // 2. Ownership verification (owner must be the caller)\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n\n    // 3. Arithmetic condition reproduced verbatim\n    uint256 supply = totalSupply();\n    uint256 lhs = supply == 0 ? 1 : 0;\n    uint256 rhs = 10 == ((supply * 10) / supply) ? 1 : 0;\n    require((lhs | rhs) != 0);\n\n    // 4. Constant true check, preserved for byte-level fidelity\n    require(0x03e8 != 0);\n}",
    "ground_truth": "function updateSliverEconomicCapSummits(uint256 newNum) external onlyOwner {\\r\\n        require(\\r\\n            newNum >= ((totalSupply() * 10) / 1000) / 1e9,\\r\\n            \\\"Cannot set maxHoldings lower than 1.0%\\\"\\r\\n        );\\r\\n        maxHoldings = newNum * (10**9);\\r\\n    }"
}