{
    "contract_address": "0x700604d812AD038BB5fE00ddDB8c0375E65A307C",
    "heimdall_input": "function manualSend() public {\n        require(address(msg.sender) == (address(store_f / 0x01)));\n        require(!(address(this).balance > 0), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_a = 0x40 + var_a;\n        var_b = 0x1a;\n        var_c = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x02 > 0, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_e = ((0x04 + var_a) + 0x20) - (0x04 + var_a);\n        uint256 var_f = var_a.length;\n        require(!(0 > var_a.length), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_g = 0;\n        var_h = var_i;\n        require(!(0x20 > var_a.length), \"SafeMath: division by zero\");\n        var_g = 0;\n        require(0x02);\n        var_j = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x12;\n        (bool success, bytes memory ret0) = address(store_f / 0x01).transfer(address(this).balance / 0x02);\n        var_a = 0x40 + var_a;\n        var_d = 0x1a;\n        var_l = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x02 > 0);\n        require(0x02);\n        var_j = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_k = 0x12;\n        (bool success, bytes memory ret0) = address(store_s / 0x01).transfer(address(this).balance / 0x02);\n    }",
    "llm_output": "function manualSend() external {\n    /*  \n        Decompiled logic reconstruction.\n        1. Access restricted to a specific wallet (assumed owner in the original byte-code).\n        2. Function reverts if the contract balance is positive.\n        3. A collection of seemingly-redundant checks left intact to preserve\n           byte-level behaviour.\n        4. Splits the contract balance in half and transfers the two halves to two\n           pre-defined wallets.  Because of (2) the amount transferred will always be 0,\n           but the transfers are kept to honour the original flow.\n    */\n\n    // 1. Caller check\n    require(msg.sender == owner());\n\n    // 2. Balance must be zero\n    require(!(address(this).balance > 0), \"\");\n\n    // 3. Miscellaneous no-op checks retained from the decompiler output\n    require(2 > 0, \"\");\n\n    bytes memory _placeholder = new bytes(32);\n    require(!(0 > _placeholder.length), \"\");\n    require(!(32 > _placeholder.length), \"SafeMath: division by zero\");\n\n    require(2 != 0); // equivalent to `require(0x02);`\n\n    // 4. Transfer half of (zero) balance to two hard-coded wallets\n    payable(owner()).transfer(address(this).balance / 2);\n    payable(marketingWallet).transfer(address(this).balance / 2);\n}",
    "ground_truth": "function manualSend() external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if (contractETHBalance > 0) {\r\n            sendETHToFee(contractETHBalance);\r\n        }\r\n    }"
}