{
    "contract_address": "0xd4877eAc39dC23770c50dAbcB1F2BC6208893E92",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender));\n        require(!arg1 < arg1);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        require(!0x64 > (~(arg1 - arg1)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_b = 0x11;\n        var_c = 0x194a51d800000000000000000000000000000000000000000000000000000000;\n        address var_d = address(msg.sender);\n        address var_e = address(arg0);\n        require(address(store_d).code.length);\n        (bool success, bytes memory ret0) = address(store_d).{ value: 0 ether }Unresolved_194a51d8(var_d); // call\n        uint256 var_f = var_f + (uint248(ret0.length + 0x1f));\n        require(!((var_f + ret0.length) - var_f) < 0x20);\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_h = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public payable returns (bool) {\n    /* \n        The following set of checks reproduces the exact logical behaviour\n        observed in the decompiled byte-code.  Messages have been added purely\n        for readability; they do not alter control-flow.\n    */\n\n    // Decompiled: require(arg0 == address(arg0));\n    require(recipient == address(recipient), \"Redundant recipient check\");\n\n    // Decompiled: require(address(msg.sender));\n    require(msg.sender != address(0), \"ERC20: transfer from the zero address\");\n\n    // Decompiled: require(!arg1 < arg1);\n    // Equivalent to: require(amount != 0);\n    require(amount != 0, \"Transfer amount must be greater than zero\");\n\n    // Decompiled: require(!0x64 > (~(arg1 - arg1)));\n    // This is a tautology that always passes; kept for fidelity.\n    require(!(0x64 > ~(amount - amount)), \"Tautological overflow check\");\n\n    // Ensure the external contract stored in `store_d` is indeed a contract\n    // Decompiled: require(address(store_d).code.length);\n    require(address(store_d).code.length > 0, \"Target address is not a contract\");\n\n    // Low-level external call preserved from the decompiled output\n    (bool callSuccess, bytes memory returnData) =\n        address(store_d).call{value: 0}(abi.encodeWithSelector(bytes4(0x194a51d8), msg.sender));\n\n    // Silence unused-variable warning while retaining original semantics\n    callSuccess;\n\n    // Decompiled: require(!((var_f + ret0.length) - var_f) < 0x20);\n    require(returnData.length >= 32, \"Invalid return data\");\n\n    // The original byte-code performs no further state changes after the call.\n    // Returning `true` satisfies the ERC-20 interface without affecting logic.\n    return true;\n}",
    "ground_truth": "function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }"
}