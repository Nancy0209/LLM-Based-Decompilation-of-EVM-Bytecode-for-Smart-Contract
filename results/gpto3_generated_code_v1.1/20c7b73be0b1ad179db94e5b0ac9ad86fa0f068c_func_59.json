{
    "contract_address": "0x20C7b73Be0B1AD179Db94e5b0AC9aD86fa0f068c",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_h[var_a] > 0);\n        store_g = (0x01 * 0x01000000000000000000000000000000000000000000) | (uint248(store_g));\n        require(!0x02 > 0xffffffffffffffff);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x41;\n        var_d = 0x02;\n        uint256 var_e = var_e + 0x60;\n        require(!0x02);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        address var_f = address(this);\n        var_g = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f / 0x01).WETH(var_h); // staticcall\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!(((var_e + ret0.length) - var_e) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_i == (address(var_i)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        address var_j = address(var_i);\n        require(address(this) - 0, \"ERC20: approve to the zero address\");\n        require(address(store_f / 0x01) - 0, \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_l = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_f / 0x01);\n        address var_b = keccak256(var_a);\n        storage_map_h[var_a] = storage_map_h[var_a];\n        address var_k = storage_map_h[var_a];\n        emit Approval(address(this), address(store_f / 0x01), storage_map_h[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        var_l = storage_map_h[var_a];\n        uint256 var_m = 0;\n        uint256 var_n = ((0x04 + var_e) + 0xa0) - (0x04 + var_e);\n        uint256 var_p = var_e.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_f / 0x01).code.length);\n        (bool success, bytes memory ret0) = address(store_f / 0x01).Unresolved_791ac947(var_l); // call\n        store_g = (0 * 0x01000000000000000000000000000000000000000000) | (uint248(store_g));\n        require(!address(this).balance > 0);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    /*\n     * NOTE:\n     * The original byte-code performs a very unusual authentication check that\n     * divides the storage variable `transferDelayEnabled` by 0x0100 and casts the\n     * result to an address.  \n     * To keep logical fidelity we mirror that exact behaviour here.\n     */\n    require(\n        msg.sender == address(uint160(uint256(transferDelayEnabled) >> 8)),\n        \"manualSwap: caller not authorised\"\n    );\n\n    address contractAddress = address(this);\n\n    /* \n     * The decompiled routine refuses to run if the contract already holds any of\n     * its own tokens.  \n     * ` _tokenBalance`  == original `storage_map_h`\n     */\n    require(\n        _tokenBalance[contractAddress] == 0,\n        \"manualSwap: pending tokens exist\"\n    );\n\n    /*\n     * Set the internal \u201cinSwap\u201d flag.\n     * `swappingFlags`  == original `store_g`\n     */\n    swappingFlags |= uint248(0x01000000000000000000000000000000000000000000);\n\n    /*\n     * This constant comparison is literally present in the original byte-code\n     * and always evaluates to true; it is kept to preserve semantics.\n     */\n    require(!(2 > 0xffffffffffffffff), \"manualSwap: unreachable\");\n\n    /*\n     * Approve the router exactly as in the byte-code.\n     * `uniswapV2Router` == original `store_f`\n     */\n    address router = address(uint160(uniswapV2Router / 0x01));\n    uint256 amount = _tokenBalance[contractAddress];\n    emit Approval(contractAddress, router, amount);\n\n    /*\n     * Execute the swap through the router.\n     * The selector 0x791ac947 corresponds to\n     * `swapExactTokensForETHSupportingFeeOnTransferTokens`.\n     */\n    bytes memory data = abi.encodeWithSelector(\n        0x791ac947,\n        amount,\n        0,                      // minimumOut \u2013 preserved from decompile\n        contractAddress,        // receiver\n        block.timestamp         // deadline\n    );\n\n    require(router.code.length > 0, \"manualSwap: router code empty\");\n\n    (bool success, ) = router.call(data);\n    require(success, \"manualSwap: swap failed\");\n\n    /*\n     * Clear the \u201cinSwap\u201d flag.\n     */\n    swappingFlags &= ~uint248(0x01000000000000000000000000000000000000000000);\n\n    /*\n     * Forward any ETH accumulated by the swap to the hard-coded recipient that\n     * was derived from `transferDelayEnabled` in the original byte-code.\n     */\n    (bool sent, ) = address(uint160(uint256(transferDelayEnabled) >> 8))\n        .call{value: address(this).balance}(\"\");\n    require(sent, \"manualSwap: ETH transfer failed\");\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}