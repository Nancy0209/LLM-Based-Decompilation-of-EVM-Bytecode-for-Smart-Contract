{
    "contract_address": "0x620d4B40A1c80D62129bb195e1701e501F9a5d3b",
    "heimdall_input": "function guaranteedWhitelistMint(uint256 arg0) public payable {\n        require(!(ownerg == 0x02), \"ReentrancyGuard: reentrant call\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1f;\n        var_d = 0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00;\n        ownerg = 0x02;\n        require(block.timestamp < ownera, \"Guaranteed whitelist minting closed\");\n        require(!(block.timestamp < ownera), \"Guaranteed whitelist minting closed\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x23;\n        var_d = 0x47756172616e746565642077686974656c697374206d696e74696e6720636c6f;\n        var_e = 0x7365640000000000000000000000000000000000000000000000000000000000;\n        require(getGuaranteedWhitelistNumMinted < getGuaranteedWhitelistSupply, \"Exceeded limit\");\n        address var_f = msg.sender;\n        var_g = 0x1a;\n        require(bytes1(storage_map_ah[var_f]), \"Exceeded limit\");\n        var_f = msg.sender;\n        var_g = 0x1b;\n        require(storage_map_ah[var_f], \"Exceeded limit\");\n        require(!(arg0 > getGuaranteedWhitelistLimit), \"Exceeded limit\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x0e;\n        var_d = 0x4578636565646564206c696d6974000000000000000000000000000000000000;\n        require(!(getGuaranteedWhitelistPrice & (arg0 > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / getGuaranteedWhitelistPrice))), \"Incorrect amount\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        require(msg.value == (getGuaranteedWhitelistPrice * arg0), \"Incorrect amount\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x10;\n        var_d = 0x496e636f727265637420616d6f756e7400000000000000000000000000000000;\n        require(!(bytes1(paused)), \"Minting unavaliable\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x13;\n        var_d = 0x4d696e74696e6720756e6176616c6961626c6500000000000000000000000000;\n        require(!(getGuaranteedWhitelistSupply > ~(competitveWhitelistInfo)), \"Claimed all avaliable times\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1b;\n        var_d = 0x436c61696d656420616c6c206176616c6961626c652074696d65730000000000;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x1f;\n        var_d = 0x4e6f74206f6e207468652067756172616e746565642077686974656c69737400;\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x08;\n        var_d = 0x536f6c64204f7574000000000000000000000000000000000000000000000000;\n        require(!(block.timestamp > ownerb), \"Guaranteed whitelist minting closed\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x23;\n        var_d = 0x47756172616e746565642077686974656c697374206d696e74696e6720636c6f;\n        var_e = 0x7365640000000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function guaranteedWhitelistMint(uint256 quantity) external payable {\n    // Reentrancy guard\n    require(_reentrancyStatus != _ENTERED, \"ReentrancyGuard: reentrant call\");\n    _reentrancyStatus = _ENTERED;\n\n    // Guaranteed whitelist window checks (duplicated to match byte-code logic)\n    require(block.timestamp < guaranteedWhitelistStart, \"Guaranteed whitelist minting closed\");\n    require(!(block.timestamp < guaranteedWhitelistStart), \"Guaranteed whitelist minting closed\");\n\n    // Supply check\n    require(getGuaranteedWhitelistNumMinted() < getGuaranteedWhitelistSupply(), \"Exceeded limit\");\n\n    // Whitelist membership checks\n    address sender = msg.sender;\n    require(bytes1(guaranteedWhitelist[sender]) != 0x00, \"Exceeded limit\");\n    require(guaranteedWhitelist[sender], \"Exceeded limit\");\n\n    // Per-address quantity limit\n    require(!(quantity > getGuaranteedWhitelistLimit()), \"Exceeded limit\");\n\n    // Payment verification\n    uint256 pricePerToken = getGuaranteedWhitelistPrice();\n    require(!(pricePerToken != 0 && quantity > type(uint256).max / pricePerToken), \"Incorrect amount\");\n    require(msg.value == pricePerToken * quantity, \"Incorrect amount\");\n\n    // Global pause flag\n    require(!paused, \"Minting unavaliable\");\n\n    // Obscure decompiled supply test retained for byte-code fidelity\n    require(!(getGuaranteedWhitelistSupply() > ~competitiveWhitelistInfo), \"Claimed all avaliable times\");\n\n    // Duplicate closing time check\n    require(!(block.timestamp > guaranteedWhitelistEnd), \"Guaranteed whitelist minting closed\");\n\n    // The actual minting logic was not present in the decompiled snippet.\n    // To preserve logical fidelity without guessing missing parts, revert.\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function guaranteedWhitelistMint(uint256 quantity) public payable nonReentrant {\\r\\n        require(\\r\\n            block.timestamp >= guaranteedWhitelistInfo.START_TIME &&\\r\\n            block.timestamp <= guaranteedWhitelistInfo.END_TIME,\\r\\n            \\\"Guaranteed whitelist minting closed\\\"\\r\\n        );\\r\\n        require(guaranteedWhitelistInfo.CURR_MINTED < guaranteedWhitelistInfo.SUPPLY, \\\"Sold Out\\\");\\r\\n        require(GUARANTEED_WHITELIST_ADDRESSES[msg.sender], \\\"Not on the guaranteed whitelist\\\");\\r\\n        require(GUARANTEED_WHITELIST_CLAIMED[msg.sender] > 0, \\\"Claimed all avaliable times\\\");\\r\\n        require(quantity <= guaranteedWhitelistInfo.LIMIT_PER_ADDRESS, \\\"Exceeded limit\\\");\\r\\n        require(msg.value == guaranteedWhitelistInfo.PRICE * quantity, \\\"Incorrect amount\\\");\\r\\n\\r\\n        _internalMint(msg.sender, quantity);\\r\\n        guaranteedWhitelistInfo.CURR_MINTED += quantity;\\r\\n        GUARANTEED_WHITELIST_CLAIMED[msg.sender] -= 1; \\r\\n    }"
}