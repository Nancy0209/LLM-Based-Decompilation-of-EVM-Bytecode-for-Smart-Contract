{
    "contract_address": "0x57D9302e8B62a24e716C048f4925b2c74c9797dC",
    "heimdall_input": "function balanceOf(address arg0) public view {\n        require(arg0 == (address(arg0)));\n        address var_a = address(arg0);\n        var_b = 0x02;\n        require(!(storage_map_l[var_a] > store_m), \"Amount must be less than total reflections\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2a;\n        var_f = 0x416d6f756e74206d757374206265206c657373207468616e20746f74616c2072;\n        var_g = 0x65666c656374696f6e7300000000000000000000000000000000000000000000;\n        uint256 var_h = 0x40 + var_h;\n        var_c = 0x1a;\n        var_i = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x016345785d8a0000, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        uint256 var_g = var_h.length;\n        require(!(0 > var_h.length), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_k = 0;\n        var_l = var_m;\n        require(!(0x20 > var_h.length), \"SafeMath: division by zero\");\n        var_k = 0;\n        if (0x016345785d8a0000) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_n = 0x12;\n            require(0x016345785d8a0000);\n        }\n    }",
    "llm_output": "function balanceOf(address account) public view returns (uint256) {\n    /*\n        The following series of checks replicates the (largely redundant) \n        safety guards observed in the de-compiled byte-code.  Although many of\n        them are tautologies, they are preserved to maintain byte-level logic\n        fidelity as required.\n    */\n\n    // Original: require(arg0 == address(arg0));\n    require(account == address(account), \"\");                       \n\n    // Original: require(!(storage_map_l[var_a] > store_m), \"Amount must be less than total reflections\");\n    require(_rOwned[account] <= _rTotal, \"Amount must be less than total reflections\");\n\n    // Original constant-truth require (0x016345785d8a0000 == 100000000000000000)\n    uint256 _alwaysTrue = 100_000_000_000_000_000;\n    require(_alwaysTrue != 0, \"\");                                 \n\n    // De-compiler artefact: require(!(0 > var_h.length), \u2026)\n    require(true, \"\");                                             \n\n    // Original SafeMath guard: require(!(0x20 > var_h.length), \"SafeMath: division by zero\");\n    uint256 currentRate = _getRate();\n    require(currentRate > 0, \"SafeMath: division by zero\");        \n\n    // Manual reflection-to-token conversion (mirrors tokenFromReflection logic) \n    return _rOwned[account] / currentRate;\n}",
    "ground_truth": "function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }"
}