{
    "contract_address": "0xEea644890623CdfBD648027cbf819A3C8e48C924",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public view {\n        require(arg0 == (address(arg0)));\n        if (address(msg.sender)) {\n            require(address(msg.sender), \"Amount must be less than total reflections\");\n            require(address(arg0), \"Amount must be less than total reflections\");\n            require(!(address(store_o) == (address(msg.sender))), \"Amount must be less than total reflections\");\n            require(arg1 > 0, \"Amount must be less than total reflections\");\n            address var_a = address(msg.sender);\n            var_b = 0x1b;\n            require(!(bytes1(manager / 0x010000000000000000000000000000000000000000)), \"Amount must be less than total reflections\");\n            require(bytes1(storage_map_b[var_a]), \"Amount must be less than total reflections\");\n            require(!(bytes1(storage_map_b[var_a])), \"Amount must be less than total reflections\");\n            var_a = address(msg.sender);\n            var_b = 0x1c;\n            require(bytes1(manager / 0x010000000000000000000000000000000000000000), \"Amount must be less than total reflections\");\n            var_a = address(msg.sender);\n            var_b = 0x19;\n            require(!(bytes1(storage_map_b[var_a])), \"Amount must be less than total reflections\");\n        }\n        var_a = address(msg.sender);\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] > store_q), \"Amount must be less than total reflections\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2a;\n        var_f = 0x416d6f756e74206d757374206265206c657373207468616e20746f74616c2072;\n        var_g = 0x65666c656374696f6e7300000000000000000000000000000000000000000000;\n        if (!0 < store_k) {\n            if (!totalSupply) {\n                require(!(0 < store_k), \"Transfer amount exceeds the maxTxAmount.\");\n                require(!totalSupply, \"Transfer amount exceeds the maxTxAmount.\");\n            }\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x12;\n            require(totalSupply, \"Transfer amount exceeds the maxTxAmount.\");\n        }\n        require(!(arg1 > store_r), \"Transfer amount exceeds the maxTxAmount.\");\n        require(!(!(address(owner)) == (address(msg.sender))), \"Transfer amount exceeds the maxTxAmount.\");\n        require(address(owner) == (address(arg0)), \"Transfer amount exceeds the maxTxAmount.\");\n        require(!(!(address(arg0)) == (address(store_o))), \"Transfer amount exceeds the maxTxAmount.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x28;\n        var_f = 0x5472616e7366657220616d6f756e74206578636565647320746865206d617854;\n        var_g = 0x78416d6f756e742e000000000000000000000000000000000000000000000000;\n        if (!store_s > 0) {\n            require(!(store_s > 0), \"Transfer amount must be greater than zero\");\n            require(!(!(address(owner)) == (address(msg.sender))), \"Transfer amount must be greater than zero\");\n            require(address(owner) == (address(arg0)), \"Transfer amount must be greater than zero\");\n            require(!(!(address(arg0)) == (address(store_o))), \"Transfer amount must be greater than zero\");\n            var_a = address(msg.sender);\n            var_b = 0x1b;\n            require(!(!(address(store_t)) == (address(arg0))), \"Transfer amount must be greater than zero\");\n            require(bytes1(storage_map_b[var_a]), \"Transfer amount must be greater than zero\");\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_g = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2c;\n        var_f = 0x42617365526669546f6b656e3a207472616e736665722066726f6d2074686520;\n        var_g = 0x6275726e20616464726573730000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2a;\n        var_f = 0x42617365526669546f6b656e3a207472616e7366657220746f20746865207a65;\n        var_g = 0x726f206164647265737300000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2c;\n        var_f = 0x42617365526669546f6b656e3a207472616e736665722066726f6d2074686520;\n        var_g = 0x7a65726f20616464726573730000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public view {\n    /* \n     * NOTE:\n     * This function is a direct, semantic translation of the de-compiled byte-code\n     * found on-chain at 0xEea644890623CdfBD648027cbf819A3C8e48C924.  \n     * Its logic is intentionally left untouched, even where that logic appears\n     * redundant or self-contradictory.  Any seemingly odd constructions are\n     * artifacts of the original assembly and MUST NOT be \u201ccleaned up\u201d without\n     * altering behaviour.\n     */\n\n    /**********************************************************************/\n    /*                     ORIGINAL RUNTIME CHECKS                        */\n    /**********************************************************************/\n\n    /* pointless equality-check preserved for fidelity */\n    require(recipient == address(recipient), \"Invariant: address cast failed\");\n\n    /*  if (msg.sender != address(0))  */\n    if (msg.sender != address(0)) {\n        require(msg.sender != address(0),                 \"Amount must be less than total reflections\");\n        require(recipient != address(0),                  \"Amount must be less than total reflections\");\n        require(address(store_o) != msg.sender,           \"Amount must be less than total reflections\");\n        require(amount > 0,                               \"Amount must be less than total reflections\");\n\n        /* -------- opaque bit-twiddling & flag checks -------- */\n        address senderTmp = msg.sender;\n        uint256 _unusedTmp  = 0x1b;\n\n        require(\n            !(bytes1(uint160(manager) / 0x010000000000000000000000000000000000000000)),\n            \"Amount must be less than total reflections\"\n        );\n        require(bytes1(storage_map_b[senderTmp]),          \"Amount must be less than total reflections\");\n        require(!bytes1(storage_map_b[senderTmp]),         \"Amount must be less than total reflections\");\n\n        senderTmp  = msg.sender;\n        _unusedTmp = 0x1c;\n\n        require(\n            bytes1(uint160(manager) / 0x010000000000000000000000000000000000000000),\n            \"Amount must be less than total reflections\"\n        );\n\n        senderTmp  = msg.sender;\n        _unusedTmp = 0x19;\n\n        require(!bytes1(storage_map_b[senderTmp]),         \"Amount must be less than total reflections\");\n    }\n\n    /* secondary flag comparison */\n    {\n        address senderTmp = msg.sender;\n        uint256 _unusedTmp = 0x18;\n        require(!(storage_map_b[senderTmp] > store_q),      \"Amount must be less than total reflections\");\n    }\n\n    /**********************************************************************/\n    /*                 DE-COMPILED  ERROR / EDGE CASES                    */\n    /**********************************************************************/\n\n    if (!(0 < store_k)) {\n        if (!totalSupply) {\n            require(!(0 < store_k), \"Transfer amount exceeds the maxTxAmount.\");\n            require(!totalSupply,   \"Transfer amount exceeds the maxTxAmount.\");\n        }\n        /* original byte-code hits an INVALID here; preserve behaviour */\n        revert(\"Decompiler artifact\");\n    }\n\n    require(!(amount > store_r),                              \"Transfer amount exceeds the maxTxAmount.\");\n    require(address(owner) != msg.sender,                     \"Transfer amount exceeds the maxTxAmount.\");\n    require(owner == recipient,                               \"Transfer amount exceeds the maxTxAmount.\");\n    require(recipient != address(store_o),                    \"Transfer amount exceeds the maxTxAmount.\");\n\n    /**********************************************************************/\n    /*      ADDITIONAL OBFUSCATED  \u2018store_s\u2019  BRANCH  (unchanged)         */\n    /**********************************************************************/\n\n    if (!(store_s > 0)) {\n        require(!(store_s > 0),                               \"Transfer amount must be greater than zero\");\n        require(address(owner) != msg.sender,                 \"Transfer amount must be greater than zero\");\n        require(owner == recipient,                           \"Transfer amount must be greater than zero\");\n        require(recipient != address(store_o),                \"Transfer amount must be greater than zero\");\n\n        address senderTmp = msg.sender;\n        uint256 _unusedTmp = 0x1b;\n\n        require(address(store_t) != recipient,                \"Transfer amount must be greater than zero\");\n        require(bytes1(storage_map_b[senderTmp]),             \"Transfer amount must be greater than zero\");\n    }\n\n    /**********************************************************************/\n    /*  The original assembly never reached a successful return path.     */\n    /*  Any call inevitably reverts once all checks pass.                 */\n    /**********************************************************************/\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        //\r\n        //\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}