{
    "contract_address": "0x8bD394Bd4b52207Df7a12F4a3EBF089e3d632826",
    "heimdall_input": "function rescuesERC20(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(getOwner)), \"!OWNER\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x06;\n        var_d = 0x214f574e45520000000000000000000000000000000000000000000000000000;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(this);\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require((arg1 == ((arg1 * var_e.length) / var_e.length)) | !var_e.length);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x64);\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        var_h = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        address var_c = address(store_m);\n        uint256 var_d = (arg1 * var_e.length) / 0x64;\n        (bool success, bytes memory ret0) = address(arg0).{ value: 0 ether }Unresolved_a9059cbb(var_c); // call\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == var_e.length);\n    }",
    "llm_output": "function rescuesERC20(address tokenAddress, uint256 percent) public {\n    // Solves the \u201calways\u2010true\u201d requirement that exists in the original bytecode\n    require(tokenAddress == address(tokenAddress));\n\n    // Only the contract owner can execute this function\n    require(msg.sender == getOwner(), \"!OWNER\");\n\n    // Fetch the entire token balance held by this contract\n    uint256 contractTokenBalance = IERC20(tokenAddress).balanceOf(address(this));\n\n    // Overflow/zero\u2013division guard copied from the de-compiled logic\n    require(\n        (percent == ((percent * contractTokenBalance) / contractTokenBalance)) | (contractTokenBalance == 0),\n        \"Overflow check failed\"\n    );\n\n    // This \u201crequire(0x64)\u201d (i.e. require(100)) exists verbatim in the bytecode\n    require(100);\n\n    // Calculate the exact amount of tokens to rescue (percentage based)\n    uint256 amountToRescue = (percent * contractTokenBalance) / 100;\n\n    // Transfer rescued tokens to the designated marketing wallet\n    IERC20(tokenAddress).transfer(marketingWallet, amountToRescue);\n\n    // Redundant equality check preserved from the original bytecode\n    require(amountToRescue == amountToRescue);\n}",
    "ground_truth": "function rescuesERC20(address _address, uint256 percent) external onlyOwner {\\r\\n        uint256 _amount = IERC20(_address).balanceOf(address(this)).mul(percent).div(100);\\r\\n        IERC20(_address).transfer(development_receiver, _amount);\\r\\n    }"
}