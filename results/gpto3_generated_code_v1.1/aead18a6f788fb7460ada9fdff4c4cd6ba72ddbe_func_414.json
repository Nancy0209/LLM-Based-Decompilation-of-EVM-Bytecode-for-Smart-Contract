{
    "contract_address": "0xaEAD18A6f788fb7460aDA9fDFf4C4Cd6Ba72dDBE",
    "heimdall_input": "function explicitOwnershipOf(uint256 arg0) public view returns (bool) {\n        uint256 var_a = var_a + 0x80;\n        uint256 var_b = 0;\n        uint256 var_c = 0;\n        uint256 var_d = 0;\n        uint256 var_e = 0;\n        require(arg0 < 0x01);\n        require(!arg0 < totalSupply);\n        uint256 var_f = arg0;\n        var_g = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n        require(storage_map_s[var_f]);\n        var_a = var_a + 0x80;\n        uint256 var_h = 0;\n        uint256 var_i = 0;\n        uint256 var_j = 0;\n        uint256 var_k = 0;\n        var_f = arg0;\n        var_g = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n        var_a = var_a + 0x80;\n        uint256 var_l = 0;\n        uint256 var_m = 0;\n        uint256 var_n = 0;\n        uint256 var_o = 0;\n        var_l = address(storage_map_s[var_f]);\n        var_m = uint64(storage_map_s[var_f] >> 0xa0);\n        var_n = !(!bytes1(storage_map_s[var_f]));\n        var_o = storage_map_s[var_f] >> 0xe8;\n        uint256 var_p = address(var_a.length);\n        uint64 var_q = uint64(var_r);\n        var_s = !(!var_t);\n        uint24 var_u = uint24(var_v);\n        return abi.encodePacked(address(var_a.length), uint64(var_w), !(!var_x), uint24(var_y));\n        var_f = arg0 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var_g = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n        require(storage_map_s[var_f]);\n        var_a = var_a + 0x80;\n        var_h = 0;\n        var_i = 0;\n        var_j = 0;\n        var_k = 0;\n        var_f = arg0 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var_g = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n        var_a = var_a + 0x80;\n        var_l = 0;\n        var_m = 0;\n        var_n = 0;\n        var_o = 0;\n        var_l = address(storage_map_s[var_f]);\n        var_m = uint64(storage_map_s[var_f] >> 0xa0);\n        var_n = !(!bytes1(storage_map_s[var_f]));\n        var_o = storage_map_s[var_f] >> 0xe8;\n        var_p = address(var_a.length);\n        var_q = uint64(var_r);\n        var_s = !(!var_t);\n        var_u = uint24(var_v);\n        return abi.encodePacked(address(var_a.length), uint64(var_w), !(!var_x), uint24(var_y));\n        var_f = (arg0 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var_g = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n        require(storage_map_s[var_f]);\n        var_a = var_a + 0x80;\n        var_h = 0;\n        var_i = 0;\n        var_j = 0;\n        var_k = 0;\n        var_f = (arg0 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var_g = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n        var_a = var_a + 0x80;\n        var_l = 0;\n        var_m = 0;\n        var_n = 0;\n        var_o = 0;\n        var_l = address(storage_map_s[var_f]);\n        var_m = uint64(storage_map_s[var_f] >> 0xa0);\n        var_n = !(!bytes1(storage_map_s[var_f]));\n        var_o = storage_map_s[var_f] >> 0xe8;\n        var_p = address(var_a.length);\n        var_q = uint64(var_r);\n        var_s = !(!var_t);\n        var_u = uint24(var_v);\n        return abi.encodePacked(address(var_a.length), uint64(var_w), !(!var_x), uint24(var_y));\n        var_f = ((arg0 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var_g = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n        require(storage_map_s[var_f]);\n        var_a = var_a + 0x80;\n        var_h = 0;\n        var_i = 0;\n        var_j = 0;\n        var_k = 0;\n        var_f = ((arg0 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var_g = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44;\n        var_a = var_a + 0x80;\n        var_l = 0;\n        var_m = 0;\n        var_n = 0;\n        var_o = 0;\n        var_l = address(storage_map_s[var_f]);\n        var_m = uint64(storage_map_s[var_f] >> 0xa0);\n        var_n = !(!bytes1(storage_map_s[var_f]));\n        var_o = storage_map_s[var_f] >> 0xe8;\n        var_p = address(var_a.length);\n        var_q = uint64(var_r);\n        var_s = !(!var_t);\n        var_u = uint24(var_v);\n        return abi.encodePacked(address(var_a.length), uint64(var_w), !(!var_x), uint24(var_y));\n        var_h = address(var_a.length);\n        var_i = uint64(var_r);\n        var_j = !(!var_t);\n        var_k = uint24(var_v);\n        return abi.encodePacked(address(var_a.length), uint64(var_w), !(!var_x), uint24(var_y));\n        var_h = address(var_a.length);\n        var_i = uint64(var_r);\n        var_j = !(!var_t);\n        var_k = uint24(var_v);\n        return abi.encodePacked(address(var_a.length), uint64(var_w), !(!var_x), uint24(var_y));\n    }",
    "llm_output": "function explicitOwnershipOf(uint256 tokenId)\n    public\n    view\n    returns (TokenOwnership memory ownership)\n{\n    // If the requested tokenId is outside the valid range, return the default\n    // (all-zero) ownership struct.\n    if (tokenId >= _currentIndex) {\n        return ownership;\n    }\n\n    // Grab the packed ownership data for the given tokenId.\n    uint256 packed = _packedOwnerships[tokenId];\n\n    // If the token has been burned, unpack and return its ownership data.\n    if (packed & _BITMASK_BURNED != 0) {\n        ownership.addr           = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned         = true;\n        ownership.extraData      = uint24(packed >> _BITPOS_EXTRA_DATA);\n        return ownership;\n    }\n\n    // If the ownership slot has not been initialized, scan backwards until\n    // we find an initialized ownership record.\n    while (packed == 0) {\n        unchecked {\n            --tokenId;\n        }\n        packed = _packedOwnerships[tokenId];\n    }\n\n    // Unpack and return the found ownership data.\n    ownership.addr           = address(uint160(packed));\n    ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n    ownership.burned         = false;\n    ownership.extraData      = uint24(packed >> _BITPOS_EXTRA_DATA);\n}",
    "ground_truth": "function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}"
}