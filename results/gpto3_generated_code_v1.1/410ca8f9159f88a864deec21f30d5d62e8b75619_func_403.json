{
    "contract_address": "0x410cA8f9159f88a864DeEc21f30D5D62E8B75619",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_e) {\n            if (store_e - ((store_e / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_e / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_e / 0x02;\n                if (store_e) {\n                    if (store_e - ((store_e / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_e / 0x02) {\n                            if (0x1f < (store_e / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_e / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory tokenSymbol) {\n    assembly {\n        // The storage slot of the `string _symbol` state variable\n        let slot := _symbol.slot\n\n        // Load the raw value stored at `slot`\n        let raw := sload(slot)\n\n        // If `raw` is zero, the string is empty\n        if iszero(raw) {\n            // Allocate memory for an empty string (32-byte length prefix set to 0)\n            tokenSymbol := mload(0x40)\n            mstore(0x40, add(tokenSymbol, 0x20))\n            mstore(tokenSymbol, 0)\n            return(tokenSymbol, 0x20)\n        }\n\n        // Check whether the string is \u201cshort\u201d (\u2264 31 bytes) or \u201clong\u201d (> 31 bytes)\n        switch and(raw, 1)\n        case 1 {\n            // ------------------------------------------------------------------\n            // Short string: all data lives inside the single storage slot\n            // ------------------------------------------------------------------\n            // Extract length (stored in the lowest byte after shifting out the\n            // \u201cin-place\u201d flag bit)\n            let length := shr(1, and(raw, 0xFF))\n\n            // The compiler guarantees `length < 32`, but we keep the original\n            // unchecked revert from bytecode\n            if iszero(lt(length, 0x20)) {\n                // Equivalent to the `0x4e487b71` \u201cpanic code 0x22\u201d revert\n                mstore(0x00, 0x4e487b71)\n                mstore(0x04, 0x22)\n                revert(0x00, 0x24)\n            }\n\n            // Allocate enough memory for length prefix + data (word-aligned)\n            tokenSymbol := mload(0x40)\n            let totalSize := and(add(add(length, 0x20), 0x1F), not(0x1F))\n            mstore(0x40, add(tokenSymbol, totalSize))\n\n            // Store length\n            mstore(tokenSymbol, length)\n\n            // Store string bytes (left-aligned in the slot; shift them to\n            // right-align in memory)\n            mstore(\n                add(tokenSymbol, 0x20),\n                shl(mul(sub(0x20, length), 8), shr(8, raw))\n            )\n\n            return(tokenSymbol, add(length, 0x20))\n        }\n        default {\n            // ------------------------------------------------------------------\n            // Long string: data is stored starting at keccak256(slot)\n            // ------------------------------------------------------------------\n            let length := div(raw, 2)\n\n            // Keep original revert (length should be \u2265 32 here)\n            if lt(length, 0x20) {\n                // Equivalent to the `0x4e487b71` \u201cpanic code 0x22\u201d revert\n                mstore(0x00, 0x4e487b71)\n                mstore(0x04, 0x22)\n                revert(0x00, 0x24)\n            }\n\n            // Calculate the starting storage slot for the string data\n            let dataSlot := keccak256(slot, 0x20)\n\n            // Allocate memory for the string (word-aligned)\n            tokenSymbol := mload(0x40)\n            let totalSize := and(add(add(length, 0x20), 0x1F), not(0x1F))\n            mstore(0x40, add(tokenSymbol, totalSize))\n\n            // Store length\n            mstore(tokenSymbol, length)\n\n            // Copy the string data, word by word\n            for { let offset := 0 } lt(offset, length) { offset := add(offset, 0x20) } {\n                mstore(\n                    add(tokenSymbol, add(0x20, offset)),\n                    sload(add(dataSlot, div(offset, 0x20)))\n                )\n            }\n\n            return(tokenSymbol, add(length, 0x20))\n        }\n    }\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }"
}