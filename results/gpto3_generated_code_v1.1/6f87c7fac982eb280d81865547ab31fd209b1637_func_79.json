{
    "contract_address": "0x6f87c7FAc982eB280d81865547aB31fD209b1637",
    "heimdall_input": "function withdrawStuckEth(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        (bool success, bytes memory ret0) = address(arg0).transfer(address(this).balance);\n        require(ret0.length == 0);\n    }",
    "llm_output": "function withdrawStuckEth(address payable recipient) public {\n    // Redundant but preserved check from decompiled code\n    require(recipient == address(recipient));\n    \n    // Ownership verification (matches original revert string)\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n    \n    // Forward entire contract balance to the recipient\n    (bool sent, bytes memory returnData) = recipient.call{value: address(this).balance}(\"\");\n    \n    // Preserved decompiler check on returned data length\n    require(returnData.length == 0);\n}",
    "ground_truth": "function withdrawStuckEth(address toAddr) external onlyOwner {\\n        (bool success, ) = toAddr.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }"
}