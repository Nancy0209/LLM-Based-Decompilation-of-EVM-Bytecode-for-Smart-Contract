{
    "contract_address": "0x62DdfB2BA9444095aA52f34c00f73de37436139B",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        bytes1 var_a = var_a + (0x20 + (((0x1f + (((0x0100 * (!bytes1(store_n))) - 0x01) & (store_n) / 0x02)) / 0x20) * 0x20));\n        bytes1 var_b = (((0x0100 * (!bytes1(store_n))) - 0x01) & (store_n)) / 0x02;\n        if (!(((0x0100 * (!store_n)) - 0x01) & (store_n)) / 0x02) {\n            if (0x1f < (((0x0100 * (!store_n)) - 0x01) & (store_n) / 0x02)) {\n                var_c = 0x09;\n                var_d = storage_map_b[var_c];\n                if ((0x20 + var_a) + (((0x0100 * (!store_n)) - 0x01) & (store_n) / 0x02) > (0x20 + (0x20 + var_a))) {\n                    bytes1 var_d = (0x20 + var_a) - var_a;\n                    bytes1 var_e = var_a.length;\n                    if (!var_a.length) {\n                        bytes1 var_f = (~((0x0100 ** (0x20 - (bytes1(var_a.length)))) - 0x01)) & (var_g);\n                        return abi.encodePacked((0x20 + var_a) - var_a, var_a.length, (~((0x0100 ** (0x20 - (bytes1(var_a.length)))) - 0x01)) & (var_g));\n                        return abi.encodePacked((0x20 + var_a) - var_a, var_a.length);\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    return _symbol;\n}",
    "ground_truth": "function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }"
}