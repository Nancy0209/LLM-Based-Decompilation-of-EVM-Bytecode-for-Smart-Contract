{
    "contract_address": "0x620d4B40A1c80D62129bb195e1701e501F9a5d3b",
    "heimdall_input": "function tokenURI(uint256 arg0) public view {\n        require(!(!0x01 > arg0), \"ERC721Metadata: URI query for nonexistent token\");\n        require(!(arg0 < totalSupply), \"ERC721Metadata: URI query for nonexistent token\");\n        uint256 var_a = arg0;\n        var_b = 0x04;\n        require(!(bytes1(storage_map_n[var_a])), \"ERC721Metadata: URI query for nonexistent token\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2f;\n        var_f = 0x4552433732314d657461646174613a2055524920717565727920666f72206e6f;\n        var_g = 0x6e6578697374656e7420746f6b656e0000000000000000000000000000000000;\n        if (ownere) {\n            require(bytes1(ownere), \"ERC721Metadata: URI query for nonexistent token\");\n            require(bytes1(store_w), \"ERC721Metadata: URI query for nonexistent token\");\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x22;\n            uint256 var_i = var_i + (0x20 + (((0x1f + (store_w >> 0x01)) / 0x20) * 0x20));\n            bytes32 var_c = store_w >> 0x01;\n            require(!(bytes1(store_w) == ((store_w >> 0x01) < 0x20)), \"ERC721Metadata: URI query for nonexistent token\");\n            require(bytes1(store_w), \"ERC721Metadata: URI query for nonexistent token\");\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x22;\n            require(!(bytes1(store_w) == ((store_w >> 0x01) < 0x20)), \"ERC721Metadata: URI query for nonexistent token\");\n            require(!(store_w >> 0x01), \"ERC721Metadata: URI query for nonexistent token\");\n            var_a = 0x10;\n            uint256 var_j = storage_map_n[var_a];\n            require(0x1f < (store_w >> 0x01), \"ERC721Metadata: URI query for nonexistent token\");\n            require((0x20 + var_i) + (store_w >> 0x01) > (0x20 + (0x20 + var_i)), \"ERC721Metadata: URI query for nonexistent token\");\n            require(var_i.length > 0, \"ERC721Metadata: URI query for nonexistent token\");\n            require(arg0 < 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000, \"ERC721Metadata: URI query for nonexistent token\");\n            require((arg0 / 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000) < 0x04ee2d6d415b85acef8100000000, \"ERC721Metadata: URI query for nonexistent token\");\n            require(((arg0 / 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000) / 0x04ee2d6d415b85acef8100000000) < 0x2386f26fc10000, \"ERC721Metadata: URI query for nonexistent token\");\n            require((((arg0 / 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000) / 0x04ee2d6d415b85acef8100000000) / 0x2386f26fc10000) < 0x05f5e100, \"ERC721Metadata: URI query for nonexistent token\");\n            require(((((arg0 / 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000) / 0x04ee2d6d415b85acef8100000000) / 0x2386f26fc10000) / 0x05f5e100) < 0x2710, \"ERC721Metadata: URI query for nonexistent token\");\n            require((((((arg0 / 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000) / 0x04ee2d6d415b85acef8100000000) / 0x2386f26fc10000) / 0x05f5e100) / 0x2710) < 0x64, \"ERC721Metadata: URI query for nonexistent token\");\n            require(((((((arg0 / 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000) / 0x04ee2d6d415b85acef8100000000) / 0x2386f26fc10000) / 0x05f5e100) / 0x2710) / 0x64) < 0x0a, \"ERC721Metadata: URI query for nonexistent token\");\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x41;\n            var_j = 0x80;\n            var_i = var_i + 0xa0;\n            require(!(0x80 > 0xffffffffffffffff), \"ERC721Metadata: URI query for nonexistent token\");\n            var_k = 0x3031323334353637383961626364656600000000000000000000000000000000;\n            require(!0x80, \"ERC721Metadata: URI query for nonexistent token\");\n            require(arg0 / 0x0a, \"ERC721Metadata: URI query for nonexistent token\");\n            uint256 var_l = 0;\n            require(!(0 > var_i.length), \"ERC721Metadata: URI query for nonexistent token\");\n            uint256 var_m = 0;\n            require(!(0 > var_i.length), \"ERC721Metadata: URI query for nonexistent token\");\n            require(bytes1(store_o), \"ERC721Metadata: URI query for nonexistent token\");\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x22;\n            require(!(bytes1(store_o) == ((store_o >> 0x01) < 0x20)), \"ERC721Metadata: URI query for nonexistent token\");\n            require(!(bytes1(store_o)), \"ERC721Metadata: URI query for nonexistent token\");\n            var_a = 0x11;\n            require(bytes1(store_o) == 0x01, \"ERC721Metadata: URI query for nonexistent token\");\n        }\n        require(arg0 < totalSupply, \"ERC721Metadata: URI query for nonexistent token\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2f;\n        var_f = 0x4552433732314d657461646174613a2055524920717565727920666f72206e6f;\n        var_g = 0x6e6578697374656e7420746f6b656e0000000000000000000000000000000000;\n    }",
    "llm_output": "function tokenURI(uint256 tokenId) public view override returns (string memory) {\n    // Revert if the token does not exist\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n    // If the collection has not been revealed yet return the placeholder URI\n    if (!revealed) {\n        return notRevealedUri;\n    }\n\n    // Fetch base URI\n    string memory currentBaseURI = _baseURI();\n\n    // Construct and return full URI\n    return bytes(currentBaseURI).length > 0\n        ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))\n        : \"\";\n}",
    "ground_truth": "function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }"
}