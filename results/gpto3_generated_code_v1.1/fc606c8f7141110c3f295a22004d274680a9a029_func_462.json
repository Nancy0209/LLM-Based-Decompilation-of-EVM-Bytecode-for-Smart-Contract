{
    "contract_address": "0xfc606C8F7141110c3f295a22004D274680A9A029",
    "heimdall_input": "function getWithdrawInfo() public view returns (bool) {\n        address var_a = msg.sender;\n        var_b = 0x04;\n        uint256 var_c = var_c + 0x60;\n        address var_d = storage_map_a[var_a];\n        address var_e = storage_map_d[var_a];\n        address var_f = address(storage_map_e[var_a]);\n        if (0 - storage_map_a[var_a]) {\n            if ((TOKENS_PER_ETH == ((TOKENS_PER_ETH * storage_map_a[var_a]) / storage_map_a[var_a])) | !storage_map_a[var_a]) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_g = 0x11;\n                address var_h = !(!storage_map_d[var_a]);\n                address var_i = storage_map_d[var_a];\n                address var_j = TOKENS_PER_ETH * storage_map_a[var_a];\n                return abi.encodePacked(!(!storage_map_d[var_a]), storage_map_d[var_a], TOKENS_PER_ETH * storage_map_a[var_a]);\n                var_h = !(!storage_map_d[var_a]);\n                var_i = storage_map_d[var_a];\n                var_j = 0;\n                return abi.encodePacked(!(!storage_map_d[var_a]), storage_map_d[var_a], 0);\n            }\n        }\n    }",
    "llm_output": "function getWithdrawInfo()\n    external\n    view\n    returns (\n        bool hasBond,\n        uint256 withdrawTime,\n        uint256 tokenAmount\n    )\n{\n    Bond storage userBond = bonds[msg.sender];\n\n    // A bond is considered to exist if a withdrawTime has been set (non-zero).\n    hasBond = userBond.withdrawTime != 0;\n    withdrawTime = userBond.withdrawTime;\n\n    // Calculate the number of tokens the user will receive on withdrawal.\n    if (userBond.ethAmount != 0) {\n        tokenAmount = TOKENS_PER_ETH * userBond.ethAmount;\n    } else {\n        tokenAmount = 0;\n    }\n}",
    "ground_truth": "function getWithdrawInfo() public view  returns(bool, uint256, uint256) {\r\n        BondEntry memory currentBond = bonds[msg.sender];\r\n        return (currentBond.withdrawTime > 0 ,currentBond.withdrawTime, getTokenOut(currentBond.ethAmount));\r\n    }"
}