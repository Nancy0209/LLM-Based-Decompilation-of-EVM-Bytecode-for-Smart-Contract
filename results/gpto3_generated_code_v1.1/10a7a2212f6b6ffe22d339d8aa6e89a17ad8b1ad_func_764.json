{
    "contract_address": "0x10A7A2212f6b6ffE22d339D8Aa6e89a17ad8b1ad",
    "heimdall_input": "function createPairAndAddLP() public payable {\n        require(address(owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(address(swapV2Pair / 0x01) - 0);\n        address var_f = address(swapV2Pair / 0x01);\n        var_g = 0x17;\n        storage_map_h[var_f] = (0x01 * 0x01) | (uint248(storage_map_h[var_f]));\n        emit SetAutomatedMarketMakerPair(address(swapV2Pair / 0x01), 0x01);\n        var_f = address(this);\n        uint256 var_g = 0;\n        var_a = 0xf305d71900000000000000000000000000000000000000000000000000000000;\n        var_b = address(this);\n        address var_d = storage_map_h[var_f];\n        uint256 var_e = 0;\n        uint256 var_h = 0;\n        address var_i = address(owner / 0x01);\n        uint256 var_j = block.timestamp;\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).{ value: address(this).balance }Unresolved_f305d719(var_b); // call\n        uint256 var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x60);\n        require(var_k == (var_k));\n        var_a = 0xc45a015500000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).factory(var_b); // staticcall\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_k == (address(var_k)));\n        var_l = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).WETH(var_d); // staticcall\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_k == (address(var_k)));\n        var_m = 0xc9c6539600000000000000000000000000000000000000000000000000000000;\n        var_e = address(this);\n        var_h = address(var_k);\n        (bool success, bytes memory ret0) = address(var_k).{ value: var_g ether }Unresolved_c9c65396(var_e); // call\n    }",
    "llm_output": "function createPairAndAddLP() public payable {\n    // Equivalent check to: require(address(owner / 0x01) == msg.sender, ...)\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    // Equivalent check to: require(address(swapV2Pair / 0x01) - 0);\n    require(swapV2Pair != address(0));\n\n    // storage_map_h[var_f] = (0x01 * 0x01) | (uint248(storage_map_h[var_f]));\n    automatedMarketMakerPairs[swapV2Pair] = true;\n\n    emit SetAutomatedMarketMakerPair(swapV2Pair, true);\n\n    /* --------------------------------------------------------------\n       Low-level call to addLiquidityETH (selector 0xf305d719)\n       -------------------------------------------------------------- */\n    bytes memory addLiquidityCalldata = abi.encodeWithSelector(\n        bytes4(0xf305d719),\n        address(this), // token\n        uint256(0),    // amountTokenDesired   (var_g  == 0)\n        uint256(0),    // amountTokenMin       (var_e  == 0)\n        uint256(0),    // amountETHMin         (var_h  == 0)\n        owner(),       // to                   (var_i)\n        block.timestamp\n    );\n\n    (bool successAddLiquidity, bytes memory retAddLiquidity) =\n        address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D).call{value: address(this).balance}(addLiquidityCalldata);\n\n    // Intentionally ignore `successAddLiquidity` and `retAddLiquidity`\n    successAddLiquidity;\n    retAddLiquidity;\n\n    /* --------------------------------------------------------------\n       router.factory()  (selector 0xc45a0155)\n       -------------------------------------------------------------- */\n    (bool successFactory, bytes memory retFactory) =\n        address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D).staticcall(\n            abi.encodeWithSelector(bytes4(0xc45a0155))\n        );\n    successFactory; // ignored\n    address factoryAddress = abi.decode(retFactory, (address));\n\n    /* --------------------------------------------------------------\n       router.WETH()  (selector 0xad5c4648)\n       -------------------------------------------------------------- */\n    (bool successWeth, bytes memory retWeth) =\n        address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D).staticcall(\n            abi.encodeWithSelector(bytes4(0xad5c4648))\n        );\n    successWeth; // ignored\n    address wethAddress = abi.decode(retWeth, (address));\n\n    /* --------------------------------------------------------------\n       factory.createPair(?)  (selector 0xc9c65396)\n       NOTE: Decompiled bytecode shows a single parameter; we preserve that.\n       -------------------------------------------------------------- */\n    bytes memory createPairCalldata = abi.encodeWithSelector(\n        bytes4(0xc9c65396),\n        address(this) // var_e\n        // (original bytecode did not pass a second parameter)\n    );\n\n    (bool successCreatePair, bytes memory retCreatePair) =\n        factoryAddress.call(createPairCalldata);\n\n    // Intentionally ignore `successCreatePair` and `retCreatePair`\n    successCreatePair;\n    retCreatePair;\n}",
    "ground_truth": "function createPairAndAddLP() public payable onlyOwner {\n        // create pair This:ETH\n        if (swapV2Pair == address(0)) {\n            IUniswapV2Factory factory = IUniswapV2Factory(\n                swapV2Router.factory()\n            );\n            swapV2Pair = factory.createPair(address(this), swapV2Router.WETH());\n        }\n        _setAutomatedMarketMakerPair(address(swapV2Pair), true);\n\n        addLiquidity(balanceOf(address(this)), address(this).balance);\n    }"
}