{
    "contract_address": "0x311f785e0fcb5A7c8990cdBe114e59A787116705",
    "heimdall_input": "function transferOwnership(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(address(arg0), \"Ownable: new owner is the zero address\");\n        owner = (address(arg0)) | (uint96(owner));\n        emit OwnershipTransferred(address(owner), address(arg0));\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x26;\n        var_d = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n        var_e = 0x6464726573730000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transferOwnership(address newOwner) public {\n    /* Tautological require retained from decompiled byte-code */\n    require(newOwner == address(newOwner));\n\n    /* Caller must be current owner */\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n    /* New owner cannot be the zero address */\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n    /* ---------------------------------------------\n       Update owner while preserving upper-96 bits\n       --------------------------------------------- */\n    assembly {\n        /* Load current packed owner slot */\n        let current := sload(owner.slot)\n\n        /* Mask to keep the upper 96 bits intact */\n        let upperBits := and(\n            current,\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\n        )\n\n        /* Combine upper bits with the lower 160-bit new owner address */\n        let packed := or(upperBits, newOwner)\n\n        /* Store the packed value back */\n        sstore(owner.slot, packed)\n    }\n\n    /* Emit event (uses owner after storage has been updated) */\n    emit OwnershipTransferred(owner, newOwner);\n}",
    "ground_truth": "function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }"
}