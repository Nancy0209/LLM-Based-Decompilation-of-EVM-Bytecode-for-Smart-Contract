{
    "contract_address": "0x9A6B50E7dacC9E3ac83c65e6c84e39Ff247D27Ab",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(bytes1(store_a / 0x01000000000000000000000000000000000000000000));\n        require(bytes1(store_a / 0x01000000000000000000000000000000000000000000));\n        require(bytes1(store_a / 0x01000000000000000000000000000000000000000000));\n        require(bytes1(store_a / 0x01000000000000000000000000000000000000000000));\n        require(bytes1(store_a / 0x01000000000000000000000000000000000000000000));\n        require(bytes1(store_a / 0x01000000000000000000000000000000000000000000));\n        address var_a = address(msg.sender);\n        uint256 var_b = 0;\n        require(!(storage_map_b[var_a] - arg1) > storage_map_b[var_a]);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        require(!(address(store_a)) == (address(arg0)));\n        require(!(address(store_a)) == (address(arg0)));\n        require(!(address(store_a)) == (address(arg0)));\n        require(address(this) == (address(msg.sender)));\n        require(address(store_a) == (address(msg.sender)));\n        require((0 == ((0 * arg1) / arg1)) | !arg1);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(0x64);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x12;\n        var_a = address(arg0);\n        var_b = 0;\n        require(!storage_map_b[var_a] > (arg1 + storage_map_b[var_a]));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        storage_map_b[var_a] = arg1 + storage_map_b[var_a];\n        uint256 var_d = arg1;\n        emit Transfer(address(msg.sender), address(arg0), arg1);\n        var_d = 0x01;\n        return 0x01;\n        store_a = 0x010000000000000000000000000000000000000000 | (uint248(store_a));\n        var_d = 0x02;\n        uint256 var_e = var_e + 0x60;\n        var_f = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        address var_g = address(this);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        var_h = 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2;\n        require(0x12);\n        require((0x01 == 0x01) | !0x0165a0bc00);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(0x64);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x12;\n        var_i = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        var_j = 0x03938700;\n        uint256 var_k = 0;\n        var_l = 0xa0;\n        uint256 var_m = var_e.length;\n        address var_n = address(this);\n        uint256 var_o = block.timestamp;\n        require(address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).code.length);\n        (bool success, bytes memory ret0) = address(0x7a250d5630b4cf539739df2c5dacb4c659f2488d).Unresolved_791ac947(var_j); // call\n        (bool success, bytes memory ret0) = address(0xa817a2a7f96aa533f90f8a8468104fd3c5fda15f).transfer(address(this).balance);\n        if (0x0a) {\n            if (0x0a == 0x01) {\n                require(0x0a);\n                require(0x0a == 0x01);\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_c = 0x11;\n                require(0x0a == 0x02);\n                require(!0x12 > 0xff);\n                require(!((0x0a < 0x0b) & (0x12 < 0x4e)) | ((0x0a < 0x0133) & (0x12 < 0x20)));\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_c = 0x11;\n                require(!0x12 > 0x01);\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_c = 0x11;\n                require(!0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999);\n            }\n            require(!0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999);\n        }\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public returns (bool) {\n    // Decompiler-originated sanity check\n    require(recipient == address(recipient), \"decompiler artifact\");\n\n    // Repeated trading-flag checks\n    for (uint8 i = 0; i < 7; ++i) {\n        require(\n            bytes1(\n                uint8(\n                    _tradingFlag / 0x01000000000000000000000000000000000000000000\n                )\n            ) != bytes1(0),\n            \"trading flag check\"\n        );\n    }\n\n    address sender = msg.sender;\n\n    // Underflow check preserved from decompiled logic\n    require(!((_balances[sender] - amount) > _balances[sender]), \"underflow\");\n\n    // Debit sender balance\n    _balances[sender] -= amount;\n\n    // Additional address-based checks (decompiled artifacts)\n    for (uint8 i = 0; i < 3; ++i) {\n        require(address(uint160(_tradingFlag)) != recipient, \"address check\");\n    }\n\n    require(address(this) == sender, \"sender mismatch\");\n    require(address(uint160(_tradingFlag)) == sender, \"flag/sender mismatch\");\n\n    // Multiplication/division artefact preserved\n    require(\n        (amount == 0) || (0 == ((0 * amount) / amount)),\n        \"mul/div artefact\"\n    );\n\n    // Unconditional require statements preserved\n    require(0x64 != 0, \"constant require 1\");\n    require(0x64 != 0, \"constant require 2\");\n\n    // Overflow check preserved\n    require(\n        !(_balances[recipient] > (amount + _balances[recipient])),\n        \"overflow\"\n    );\n\n    // Credit recipient balance\n    _balances[recipient] += amount;\n\n    emit Transfer(sender, recipient, amount);\n    return true;\n}",
    "ground_truth": "function transfer(address to, uint256 amount) external returns (bool){\r\n        return _transfer(msg.sender, to, amount);\r\n    }"
}