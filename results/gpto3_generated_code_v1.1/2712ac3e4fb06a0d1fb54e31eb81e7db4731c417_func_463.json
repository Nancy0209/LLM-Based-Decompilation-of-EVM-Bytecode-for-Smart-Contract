{
    "contract_address": "0x2712ac3E4Fb06A0d1FB54E31eB81e7db4731c417",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_g)));\n        address var_a = address(this);\n        var_b = 0x02;\n        require(!storage_map_l[var_a]);\n        burnMode = 0x010000000000000000000000000000000000000000 | (uint248(burnMode));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(uniswapV2Router).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!((var_d + ret0.length) - var_d) < 0x20);\n        require(var_d.length == (address(var_d.length)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this));\n        require(address(uniswapV2Router));\n        var_a = address(this);\n        var_b = 0x03;\n        var_a = address(uniswapV2Router);\n        address var_b = keccak256(var_a);\n        storage_map_l[var_a] = storage_map_l[var_a];\n        address var_k = storage_map_l[var_a];\n        emit Approval(address(this), address(uniswapV2Router), storage_map_l[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_l[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_o = var_d.length;\n        address var_p = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(uniswapV2Router).code.length);\n        (bool success, bytes memory ret0) = address(uniswapV2Router).{ value: var_m ether }Unresolved_791ac947(var_l); // call\n        burnMode = uint248(burnMode);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_p = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_p = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // 1. The caller must be the designated marketing wallet\n    require(msg.sender == marketingWallet, \"Caller is not marketing wallet\");\n\n    // 2. Contract must not already be in a swapping state\n    require(!inSwap, \"Currently in swap\");\n\n    // 3. Temporarily toggle burn mode (mirrors original bit-wise operation)\n    bool previousBurnMode = burnMode;\n    burnMode = true;\n\n    // 4. Determine the amount of tokens held by this contract\n    uint256 contractTokenBalance = balanceOf(address(this));\n\n    // 5. Grant router an allowance to spend the contract\u2019s tokens\n    _approve(address(this), address(uniswapV2Router), contractTokenBalance);\n\n    // 6. Construct the swap path: Token \u2192 WETH\n    address[] memory path = new address[](2);\n    path[0] = address(this);\n    path[1] = uniswapV2Router.WETH();\n\n    // 7. Execute the token-to-ETH swap\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n        contractTokenBalance,\n        0,                // accept any amount of ETH\n        path,\n        address(this),    // ETH is received by this contract\n        block.timestamp\n    );\n\n    // 8. Restore the original burn mode state\n    burnMode = previousBurnMode;\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance > 0) {\r\n            swapTokensForEth(contractBalance);\r\n        }\r\n    }"
}