{
    "contract_address": "0x328E4802787C25995e524C4280a69F985f08ea48",
    "heimdall_input": "function manualSwap() public {\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_f[var_a]);\n        store_e = 0x01000000000000000000000000000000000000000000 | (uint248(store_e));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_l).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_l), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_l);\n        address var_b = keccak256(var_a);\n        storage_map_f[var_a] = storage_map_f[var_a];\n        address var_k = storage_map_f[var_a];\n        emit Approval(address(this), address(store_l), storage_map_f[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_f[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_l).code.length);\n        (bool success, bytes memory ret0) = address(store_l).Unresolved_791ac947(var_l); // call\n        store_e = uint248(store_e);\n        require(!address(this).balance);\n        require((store_p == ((store_p * address(this).balance) / address(this).balance)) | !address(this).balance);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x64);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        require((store_q == ((store_q * address(this).balance) / address(this).balance)) | !address(this).balance);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x64);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        (bool success, bytes memory ret0) = address(store_o).transfer((store_p * address(this).balance) / 0x64);\n        (bool success, bytes memory ret0) = address(store_r).transfer((store_q * address(this).balance) / 0x64);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    // Prevent re-entrancy during the swap\n    require(!_inSwap, \"Already in swap\");\n    _inSwap = true;\n\n    uint256 tokenBalance = balanceOf(address(this));\n\n    // Approve the router to spend the entire token balance held by the contract\n    _approve(address(this), address(_uniswapV2Router), tokenBalance);\n\n    // Generate the Uniswap path: token -> WETH\n    address[] memory path = new address[](2);\n    path[0] = address(this);\n    path[1] = _uniswapV2Router.WETH();\n\n    // Perform the swap: all tokens for ETH, supporting fee-on-transfer tokens\n    _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n        tokenBalance,\n        0,                      // accept any amount of ETH\n        path,\n        address(this),          // ETH is returned to this contract\n        block.timestamp\n    );\n\n    // Distribute the received ETH according to the preset fee percentages\n    uint256 ethBalance = address(this).balance;\n\n    _marketingWallet.transfer((ethBalance * _marketingPercent) / 100);\n    _developmentWallet.transfer((ethBalance * _developmentPercent) / 100);\n\n    // Reset the swap flag\n    _inSwap = false;\n}",
    "ground_truth": "function manualSwap() external{\\r\\n        uint256 tokenBalance=balanceOf(address(this));\\r\\n        if(tokenBalance>0){\\r\\n          swapTokensForEth(tokenBalance);\\r\\n        }\\r\\n        uint256 ethBalance=address(this).balance;\\r\\n        if(ethBalance>0){\\r\\n          sendETHToFee(ethBalance);\\r\\n        }\\r\\n    }"
}