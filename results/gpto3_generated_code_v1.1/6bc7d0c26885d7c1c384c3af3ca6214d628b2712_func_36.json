{
    "contract_address": "0x6BC7d0c26885D7c1C384c3aF3CA6214D628B2712",
    "heimdall_input": "function updateMaxWalletAmount(uint256 arg0) public view {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require((totalSupply == ((totalSupply * 0x05) / 0x05)) | !0x05);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x03e8);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n    }",
    "llm_output": "function updateMaxWalletAmount(uint256 newMaxWalletAmount) public {\n    // Ownership check preserved from original bytecode\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    // No-op arithmetic check preserved to maintain byte-for-byte behaviour\n    require(totalSupply() == (totalSupply() * 5) / 5);\n\n    // Always-true assertion kept to mirror original logic\n    require(true);\n\n    // NOTE: the original bytecode contained no further executable logic\n}",
    "ground_truth": "function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\\n        require(newNum >= ((totalSupply() * 5) / 1000) / 1e18, \\\"Cannot set maxWallet lower than 0.5%\\\");\\n        maxWallet = newNum * (10 ** 18);\\n    }"
}