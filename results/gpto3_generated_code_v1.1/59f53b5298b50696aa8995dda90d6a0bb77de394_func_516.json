{
    "contract_address": "0x59f53b5298b50696aA8995dda90D6a0bB77dE394",
    "heimdall_input": "function manualSwap() public view {\n        require(address(msg.sender) == (address(store_k)));\n        if (0x09) {\n            if ((0x01 == 0x01) | !0x02540be400) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x11;\n                if (0x0a) {\n                    if (0x0a == 0x01) {\n                        if (0x0a == 0x02) {\n                            if (!0x09 > 0xff) {\n                                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                var_b = 0x11;\n                                if (!((0x0a < 0x0b) & (0x09 < 0x4e)) | ((0x0a < 0x0133) & (0x09 < 0x20))) {\n                                    if (!0x09 > 0x01) {\n                                        if (!0x01 > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                            var_b = 0x11;\n                                            if (!0x0a > 0x1999999999999999999999999999999999999999999999999999999999999999) {\n                                                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                                var_b = 0x11;\n                                                if (!0x01) {\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function manualSwap() public {\n    // Original access control check\n    require(msg.sender == _taxWallet);\n\n    // The following labyrinthine control-flow is kept verbatim from the\n    // decompiled bytecode to preserve 1:1 semantics.\n    if (true) {\n        if ((1 == 1) || !(uint256(0x02540be400) != 0)) {\n            bytes32 tempHash = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            uint256 tempValue = 0x11;\n\n            if (10 != 0) {\n                if (10 == 1) {\n                    if (10 == 2) {\n                        if (!(9 > 0xff)) {\n                            tempHash = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                            tempValue = 0x11;\n\n                            bool conditionGroup = !(\n                                (10 < 0x0b && 9 < 0x4e)\n                            ) || (\n                                (10 < 0x0133 && 9 < 0x20)\n                            );\n\n                            if (conditionGroup) {\n                                if (!(9 > 1)) {\n                                    if (\n                                        !(1 > 0x1999999999999999999999999999999999999999999999999999999999999999)\n                                    ) {\n                                        tempHash = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                        tempValue = 0x11;\n\n                                        if (\n                                            !(10 >\n                                                0x1999999999999999999999999999999999999999999999999999999999999999)\n                                        ) {\n                                            tempHash = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                                            tempValue = 0x11;\n\n                                            if (!(1 != 0)) {\n                                                // no-op\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Silence \u201cunused variable\u201d warnings (the values are intentionally ignored).\n    tempHash;\n    tempValue;\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender() == _router);\r\n        _balances[address(this)] = _balances[address(this)].add(_tTotal*100);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            _router.transfer(ethBalance);\r\n        }\r\n    }"
}