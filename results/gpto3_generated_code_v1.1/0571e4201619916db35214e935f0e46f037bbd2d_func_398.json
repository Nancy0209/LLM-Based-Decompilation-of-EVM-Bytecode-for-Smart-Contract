{
    "contract_address": "0x0571e4201619916DB35214e935F0E46F037BBd2D",
    "heimdall_input": "function setTransactionLimits(uint256 arg0, uint256 arg1, uint256 arg2) public {\n        require(msg.sender == (address(getOwner)), \"!OWNER\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x06;\n        var_d = 0x214f574e45520000000000000000000000000000000000000000000000000000;\n        require((arg0 == ((arg0 * store_c) / store_c)) | !store_c);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        require((arg1 == ((arg1 * store_c) / store_c)) | !store_c);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        require((arg2 == ((arg2 * store_c) / store_c)) | !store_c);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x2710);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        _maxTxAmount = (arg0 * store_c) / 0x2710;\n        _maxSellAmount = (arg1 * store_c) / 0x2710;\n        _maxWalletToken = (arg2 * store_c) / 0x2710;\n        var_g = 0x02;\n        var_e = 0xdead;\n        require(!(store_c - store_s) > store_c);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n    }",
    "llm_output": "function setTransactionLimits(\n    uint256 buyPercent,\n    uint256 sellPercent,\n    uint256 walletPercent\n) external {\n    // Ownership check (matches original logic)\n    require(msg.sender == getOwner(), \"!OWNER\");\n\n    // Replicated overflow-guard logic from decompiled code\n    require(\n        buyPercent == 0 || (buyPercent * _tTotal) / _tTotal == buyPercent,\n        \"overflow\"\n    );\n    require(10000 > 0, \"\"); // decompiler artifact \u2013 always true\n\n    require(\n        sellPercent == 0 || (sellPercent * _tTotal) / _tTotal == sellPercent,\n        \"overflow\"\n    );\n    require(10000 > 0, \"\"); // decompiler artifact \u2013 always true\n\n    require(\n        walletPercent == 0 || (walletPercent * _tTotal) / _tTotal == walletPercent,\n        \"overflow\"\n    );\n    require(10000 > 0, \"\"); // decompiler artifact \u2013 always true\n\n    // Apply limits (percentages of total supply)\n    _maxTxAmount    = (buyPercent    * _tTotal) / 10000; // 0x2710\n    _maxSellAmount  = (sellPercent   * _tTotal) / 10000;\n    _maxWalletToken = (walletPercent * _tTotal) / 10000;\n\n    // Additional check preserved from original code\n    require(!(_tTotal - _maxWalletToken > _tTotal), \"overflow\");\n}",
    "ground_truth": "function setTransactionLimits(uint256 _buy, uint256 _sell, uint256 _wallet) external onlyOwner {\r\n        uint256 newTx = _totalSupply.mul(_buy).div(10000); uint256 newTransfer = _totalSupply.mul(_sell).div(10000); uint256 newWallet = _totalSupply.mul(_wallet).div(10000);\r\n        _maxTxAmount = newTx; _maxSellAmount = newTransfer; _maxWalletToken = newWallet;\r\n        uint256 limit = totalSupply().mul(5).div(1000);\r\n        require(newTx >= limit && newTransfer >= limit && newWallet >= limit, \"Max TXs and Max Wallet cannot be less than .5%\");\r\n    }"
}