{
    "contract_address": "0x4EEB531934eb03F55032CF7468957e9cc3b9Ce7d",
    "heimdall_input": "function removeERCToken(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(0 - arg1);\n        address var_a = address(arg0);\n        uint256 var_b = arg1;\n        emit ClearToken(address(arg0), arg1);\n        var_a = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        address var_c = address(store_r);\n        uint256 var_d = arg1;\n        (bool success, bytes memory ret0) = address(arg0).many_msg_babbage(var_c); // call\n        uint256 var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        require(var_e.length == var_e.length);\n        var_b = var_e.length;\n        return var_e.length;\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        var_c = address(this);\n        (bool success, bytes memory ret0) = address(arg0).balanceOf(var_c); // staticcall\n        var_e = var_e + (uint248(ret0.length + 0x1f));\n        require(!((var_e + ret0.length) - var_e) < 0x20);\n        var_b = address(arg0);\n        uint256 var_f = var_e.length;\n        emit ClearToken(address(arg0), var_e.length);\n        var_b = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        var_d = address(store_r);\n        uint256 var_g = var_e.length;\n        (bool success, bytes memory ret0) = address(arg0).many_msg_babbage(var_d); // call\n    }",
    "llm_output": "function removeERCToken(address tokenAddress, uint256 tokens) public returns (bool success) {\n    // The original decompiled code contained a no-op require statement\n    // (`require(tokenAddress == address(tokenAddress))`). It has been omitted.\n    \n    // Mirrors the decompiler artefact `require(0 - arg1);`\n    require(tokens > 0, \"Decompiler artifact\");\n\n    emit ClearToken(tokenAddress, tokens);\n\n    // Construct and execute the ERC-20 transfer call\n    (success, ) = tokenAddress.call(\n        abi.encodeWithSignature(\n            \"transfer(address,uint256)\",\n            _owner,          // stored owner address\n            tokens\n        )\n    );\n    \n    return success;\n}",
    "ground_truth": "function removeERCToken(address tokenAddress, uint256 tokens) external returns (bool success) {\r\n            if(tokens == 0){\r\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\r\n        }\r\n        emit ClearToken(tokenAddress, tokens);\r\n        return ERC20(tokenAddress).transfer(autoLiquidityReceiver, tokens);\r\n    }"
}