{
    "contract_address": "0x9BF903014c2dbD36f8818eBfc7D840B2cDB6A25b",
    "heimdall_input": "function updateoperationsWallet(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        emit operationsWalletUpdated(address(arg0), address(operationsWallet));\n        operationsWallet = (address(arg0)) | (uint96(operationsWallet));\n    }",
    "llm_output": "function updateoperationsWallet(address newOperationsWallet) public {\n    // Tautological check preserved from decompiled output\n    require(newOperationsWallet == address(newOperationsWallet));\n    \n    // Ownership verification (mirrors original logic)\n    require(msg.sender == address(owner), \"Ownable: caller is not the owner\");\n\n    // Emit update event (new wallet, old wallet)\n    emit operationsWalletUpdated(newOperationsWallet, operationsWallet);\n\n    // Update state\n    operationsWallet = newOperationsWallet;\n}",
    "ground_truth": "function updateoperationsWallet(address newWallet) external onlyOwner{\r\n        emit operationsWalletUpdated(newWallet, operationsWallet);\r\n        operationsWallet = newWallet;\r\n    }"
}