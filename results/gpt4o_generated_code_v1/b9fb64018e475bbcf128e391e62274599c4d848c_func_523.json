{
    "contract_address": "0xB9FB64018E475BBCF128E391E62274599c4D848C",
    "heimdall_input": "function getMintStats(address arg0) public view returns (bytes memory) {\n        require(arg0 == (address(arg0)));\n        address var_a = address(arg0);\n        var_b = 0x05;\n        address var_c = uint64(storage_map_b[var_a] >> 0x40);\n        uint256 var_d = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + totalSupply;\n        var_e = maxSupply;\n        return abi.encodePacked(uint64(storage_map_b[var_a] >> 0x40), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff + totalSupply, maxSupply);\n    }",
    "llm_output": "function getMintStats(address userAddress) public view returns (bytes memory) {\n    require(userAddress == address(userAddress)); // Likely redundant, but preserved for logical fidelity\n    address mintAddress = userAddress;\n    uint8 constantValue = 0x05; // Unused variable, but preserved for logical fidelity\n    address associatedAddress = address(uint64(storageMap[mintAddress] >> 64));\n    uint256 adjustedTotalSupply = type(uint256).max + totalSupply;\n    uint256 maxTokenSupply = maxSupply;\n    return abi.encodePacked(\n        uint64(storageMap[mintAddress] >> 64),\n        adjustedTotalSupply,\n        maxTokenSupply\n    );\n}",
    "ground_truth": "function getMintStats(address minter)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 minterNumMinted,\\n            uint256 currentTotalSupply,\\n            uint256 maxSupply\\n        )\\n    {\\n        minterNumMinted = _numberMinted(minter);\\n        currentTotalSupply = _totalMinted();\\n        maxSupply = _maxSupply;\\n    }"
}