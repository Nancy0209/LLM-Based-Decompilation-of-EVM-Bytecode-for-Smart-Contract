{
    "contract_address": "0x780c7f2FdF0D47F25f5858975DBd0159DB50C1B2",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_v) {\n            if (store_v - ((store_v / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_v / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_v / 0x02;\n                if (store_v) {\n                    if (store_v - ((store_v / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_v / 0x02) {\n                            if (0x1f < (store_v / 0x02)) {\n                                var_a = 0x04;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_v / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    if (store_v > 0) {\n        uint256 halfStoreV = store_v / 2;\n        if (store_v - halfStoreV < 0x20) {\n            revert('Decompiler artifact');\n        }\n        \n        uint256 offset = 0x20 + (((0x1f + halfStoreV) / 0x20) * 0x20);\n        if (halfStoreV == 0) {\n            if (0x1f < halfStoreV) {\n                revert('Decompiler artifact');\n            }\n        } else {\n            uint256 length = halfStoreV;\n            if ((0x20 + offset) + length > (0x20 + offset)) {\n                return abi.encodePacked(length, offset);\n            }\n        }\n    }\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }"
}