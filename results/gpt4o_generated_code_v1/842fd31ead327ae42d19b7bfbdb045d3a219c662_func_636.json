{
    "contract_address": "0x842FD31eAd327AE42D19B7BFbdB045d3A219c662",
    "heimdall_input": "function recoverERC20(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(0xf6f50011df50e1180dc78f4a8237f293f30a3b27 == msg.sender);\n        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        address var_b = address(this);\n        (bool success, bytes memory ret0) = address(arg0).Unresolved_70a08231(var_b); // staticcall\n        uint256 var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        var_d = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        var_e = 0xf6f50011df50e1180dc78f4a8237f293f30a3b27;\n        uint256 var_f = var_c.length;\n        (bool success, bytes memory ret0) = address(arg0).{ value: 0 ether }Unresolved_a9059cbb(var_e); // call\n        var_c = var_c + (uint248(ret0.length + 0x1f));\n        require(!((var_c + ret0.length) - var_c) < 0x20);\n        require(var_c.length == var_c.length);\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_e = 0x2a;\n        var_f = 0x4f6e6c79206f726967696e616c206f776e65722063616e2063616c6c20746869;\n        var_g = 0x732066756e6374696f6e00000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function recoverERC20(address tokenAddress) public {\n    // Ensure the token address is valid (self-check, likely redundant)\n    require(tokenAddress == address(tokenAddress));\n    \n    // Ensure the caller is the contract owner (hardcoded address)\n    require(msg.sender == 0xf6f50011df50e1180dc78f4a8237f293f30a3b27);\n\n    // Prepare the balanceOf function selector\n    bytes4 balanceOfSelector = 0x70a08231;\n    address contractAddress = address(this);\n\n    // Call the balanceOf function on the token contract\n    (bool success, bytes memory balanceData) = tokenAddress.staticcall(abi.encodeWithSelector(balanceOfSelector, contractAddress));\n    require(success, \"Static call to balanceOf failed\");\n\n    // Decode the returned balance\n    uint256 balance = abi.decode(balanceData, (uint256));\n    require(balance > 0, \"Token balance is zero\");\n\n    // Prepare the transfer function selector\n    bytes4 transferSelector = 0xa9059cbb;\n    address ownerAddress = 0xf6f50011df50e1180dc78f4a8237f293f30a3b27;\n\n    // Call the transfer function on the token contract\n    (bool transferSuccess, bytes memory transferData) = tokenAddress.call(abi.encodeWithSelector(transferSelector, ownerAddress, balance));\n    require(transferSuccess, \"Call to transfer failed\");\n\n    // Ensure the transfer was successful\n    require(transferData.length == 0 || abi.decode(transferData, (bool)), \"Transfer failed\");\n}",
    "ground_truth": "function recoverERC20(address _token) external {\r\n        require(msg.sender == originalOwner, \"Only original owner can call this function\");\r\n        uint256 fullAmount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(originalOwner, fullAmount);\r\n    }"
}