{
    "contract_address": "0x8bD394Bd4b52207Df7a12F4a3EBF089e3d632826",
    "heimdall_input": "function setContractSwapSettings(uint256 arg0, uint256 arg1, uint256 arg2) public {\n        require(msg.sender == (address(getOwner)), \"!OWNER\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x06;\n        var_d = 0x214f574e45520000000000000000000000000000000000000000000000000000;\n        store_b = arg0;\n        require((arg1 == ((arg1 * store_c) / store_c)) | !store_c);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x0186a0);\n        var_e = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n    }",
    "llm_output": "function setContractSwapSettings(uint256 swapThreshold, uint256 swapAmount, uint256 swapMultiplier) public {\n    require(msg.sender == address(getOwner), \"Caller is not the owner\");\n\n    // Placeholder variables from decompiled code\n    bytes32 errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 errorOffset = 0x20;\n    uint256 errorLength = 0x06;\n    bytes32 errorMessage = 0x214f574e45520000000000000000000000000000000000000000000000000000;\n\n    // Assign the swap threshold\n    store_b = swapThreshold;\n\n    // Ensure the swap amount calculation is valid\n    require(\n        (swapAmount == ((swapAmount * store_c) / store_c)) || store_c == 0,\n        \"Invalid swap amount calculation\"\n    );\n\n    // Placeholder variables from decompiled code\n    bytes32 panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 panicCode1 = 0x11;\n\n    // This require statement is nonsensical and will always fail\n    require(false, \"Decompiler artifact\");\n\n    // Placeholder variables from decompiled code\n    panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 panicCode2 = 0x12;\n}",
    "ground_truth": "function setContractSwapSettings(uint256 _swapAmount, uint256 _swapThreshold, uint256 _minTokenAmount) external onlyOwner {\\r\\n        swapAmount = _swapAmount; swapThreshold = _totalSupply.mul(_swapThreshold).div(uint256(100000)); \\r\\n        minTokenAmount = _totalSupply.mul(_minTokenAmount).div(uint256(100000));\\r\\n    }"
}