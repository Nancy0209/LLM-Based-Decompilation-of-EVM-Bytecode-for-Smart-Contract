{
    "contract_address": "0x85188f89Ef6A5714818DefC0607727c9BE9f8949",
    "heimdall_input": "function balanceOf(address arg0) public view {\n        require(arg0 == (address(arg0)));\n        address var_a = address(arg0);\n        var_b = 0x02;\n        require(!(storage_map_h[var_a] > store_i), \"Amount must be less than total reflections\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_d = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        var_f = 0x2a;\n        var_g = 0x416d6f756e74206d757374206265206c657373207468616e20746f74616c2072;\n        var_h = 0x65666c656374696f6e7300000000000000000000000000000000000000000000;\n        uint256 var_e = 0x40 + var_e;\n        var_c = 0x1a;\n        var_i = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x038d7ea4c68000 > 0, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_j = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_g = ((0x04 + var_e) + 0x20) - (0x04 + var_e);\n        uint256 var_h = var_e.length;\n        uint256 var_k = 0;\n        var_l = var_m;\n        var_k = 0;\n        if (0x038d7ea4c68000) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_n = 0x12;\n            require(0x038d7ea4c68000);\n        }\n    }",
    "llm_output": "function balanceOf(address account) public view {\n    require(account == address(account), \"Invalid address comparison\");\n    address userAddress = account;\n\n    uint256 constantReflectionLimit = 0x02;\n    require(!(reflectionBalances[userAddress] > totalReflections), \"Amount must be less than total reflections\");\n\n    uint256 errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 errorOffset = ((0x04 + errorData) + 0x20) - (0x04 + errorData);\n    uint256 errorCode = 0x2a;\n    bytes32 errorMessagePart1 = 0x416d6f756e74206d757374206265206c657373207468616e20746f74616c2072;\n    bytes32 errorMessagePart2 = 0x65666c656374696f6e7300000000000000000000000000000000000000000000;\n    uint256 errorData = 0x40 + errorData;\n    uint256 errorCode2 = 0x1a;\n    bytes32 mathErrorMessage = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n\n    require(0x038d7ea4c68000 > 0, \"Invalid constant value\");\n\n    uint256 errorSelector2 = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 errorOffset2 = ((0x04 + errorData) + 0x20) - (0x04 + errorData);\n    uint256 errorDataLength = errorData.length;\n    uint256 loopCounter = 0;\n    uint256 tempVariable = tempStorage;\n    loopCounter = 0;\n\n    if (0x038d7ea4c68000 != 0) {\n        uint256 panicSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        uint256 panicCode = 0x12;\n        require(0x038d7ea4c68000 != 0, \"Invalid constant value\");\n    }\n}",
    "ground_truth": "function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }"
}