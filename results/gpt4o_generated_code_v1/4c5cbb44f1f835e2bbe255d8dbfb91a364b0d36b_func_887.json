{
    "contract_address": "0x4c5CbB44F1F835E2BbE255d8dBFb91A364b0D36B",
    "heimdall_input": "function royaltyInfo(uint256 arg0, uint256 arg1) public view returns (bytes memory) {\n        uint256 var_a = arg0;\n        var_b = 0x0b;\n        uint256 var_c = 0x40 + var_c;\n        uint256 var_d = address(storage_map_b[var_a]);\n        uint256 var_e = uint96(storage_map_b[var_a] / 0x010000000000000000000000000000000000000000);\n        require(address(storage_map_b[var_a]));\n        require(uint96(var_f) == ((uint96(var_f) * arg1) / arg1) | !arg1);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x2710);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        uint256 var_h = address(var_c.length);\n        uint256 var_i = (uint96(var_f) * arg1) / 0x2710;\n        return abi.encodePacked(address(var_c.length), (uint96(var_j) * arg1) / 0x2710);\n    }",
    "llm_output": "function royaltyInfo(uint256 tokenId, uint256 salePrice) public view returns (bytes memory) {\n    uint256 royaltyAmount = salePrice;\n    uint256 royaltyPercentage = 0x0b;\n    uint256 encodedDataOffset = 0x40 + encodedDataOffset;\n    address receiver = address(royaltyData[tokenId]);\n    uint96 royaltyRate = uint96(royaltyData[tokenId] / 0x010000000000000000000000000000000000000000);\n    require(receiver != address(0));\n    require(uint96(royaltyRate) == ((uint96(royaltyRate) * salePrice) / salePrice) || salePrice == 0);\n    royaltyAmount = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 constantValue1 = 0x11;\n    require(0x2710 != 0);\n    royaltyAmount = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 constantValue2 = 0x12;\n    address encodedDataLength = address(encodedDataOffset.length);\n    uint256 calculatedRoyalty = (uint96(royaltyRate) * salePrice) / 0x2710;\n    return abi.encodePacked(address(encodedDataLength), (uint96(calculatedRoyalty) * salePrice) / 0x2710);\n}",
    "ground_truth": "function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }"
}