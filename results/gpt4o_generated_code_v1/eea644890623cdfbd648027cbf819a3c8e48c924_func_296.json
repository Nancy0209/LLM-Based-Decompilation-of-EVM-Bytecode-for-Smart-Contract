{
    "contract_address": "0xEea644890623CdfBD648027cbf819A3C8e48C924",
    "heimdall_input": "function burn(uint256 arg0) public {\n        require(msg.sender, \"BaseRfiToken: burn amount exceeds balance\");\n        require(!(address(store_o) == (address(msg.sender))), \"BaseRfiToken: burn amount exceeds balance\");\n        address var_a = address(msg.sender);\n        var_b = 0x1c;\n        require(!(bytes1(storage_map_b[var_a])), \"BaseRfiToken: burn amount exceeds balance\");\n        var_a = address(msg.sender);\n        var_b = 0x19;\n        require(!(storage_map_b[var_a] < arg0), \"BaseRfiToken: burn amount exceeds balance\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x42617365526669546f6b656e3a206275726e20616d6f756e7420657863656564;\n        var_g = 0x732062616c616e63650000000000000000000000000000000000000000000000;\n        if (!0 < store_k) {\n            if (0 < store_k) {\n                var_a = 0x1d;\n                var_a = address(storage_map_p[var_a]);\n                var_b = 0x18;\n                require(!(0 < store_k), \"Amount must be less than total reflections\");\n                require(0 < store_k, \"Amount must be less than total reflections\");\n                require(storage_map_b[var_a] > store_q, \"Amount must be less than total reflections\");\n                require(!(storage_map_b[var_a] > store_q), \"Amount must be less than total reflections\");\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x11;\n                var_a = address(msg.sender);\n                var_b = 0x18;\n                require(totalSupply, \"Amount must be less than total reflections\");\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x11;\n                var_a = address(msg.sender);\n                var_b = 0x18;\n                storage_map_b[var_a] = storage_map_b[var_a] - (arg0 * (store_q / totalSupply));\n                var_b = 0x1c;\n                require(!(arg0 & ((store_q / totalSupply) > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / arg0))), \"Amount must be less than total reflections\");\n                var_a = address(store_o);\n                var_b = 0x18;\n                require(!(storage_map_b[var_a] < (arg0 * (store_q / totalSupply))), \"Amount must be less than total reflections\");\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x11;\n                var_a = address(store_o);\n                var_b = 0x18;\n                storage_map_b[var_a] = storage_map_b[var_a] + (arg0 * (store_q / totalSupply));\n                var_a = address(store_o);\n                var_b = 0x1c;\n                require(!(bytes1(storage_map_b[var_a])), \"Amount must be less than total reflections\");\n                uint256 var_c = arg0;\n                emit Transfer(address(msg.sender), address(store_o), arg0);\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x12;\n                require(!(storage_map_b[var_a] > (~(arg0 * (store_q / totalSupply)))), \"Amount must be less than total reflections\");\n                var_a = 0x1d;\n                var_a = address(storage_map_p[var_a]);\n                var_b = 0x18;\n                require(!(bytes1(storage_map_b[var_a])), \"Amount must be less than total reflections\");\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x11;\n                require(0 < store_k, \"Amount must be less than total reflections\");\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x32;\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x32;\n                require(!(store_q < storage_map_b[var_a]), \"Amount must be less than total reflections\");\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x32;\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x32;\n                require(0 < store_k, \"Amount must be less than total reflections\");\n                require(0 < store_k, \"Amount must be less than total reflections\");\n                require(!totalSupply, \"Amount must be less than total reflections\");\n            }\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x12;\n            require(totalSupply, \"Amount must be less than total reflections\");\n        }\n        var_a = address(msg.sender);\n        var_b = 0x18;\n        require(!(storage_map_b[var_a] > store_q), \"Amount must be less than total reflections\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x2a;\n        var_f = 0x416d6f756e74206d757374206265206c657373207468616e20746f74616c2072;\n        var_g = 0x65666c656374696f6e7300000000000000000000000000000000000000000000;\n        if (!0 < store_k) {\n            if (0 < store_k) {\n                var_a = 0x1d;\n                var_a = address(storage_map_p[var_a]);\n                var_b = 0x18;\n                require(!(0 < store_k), \"BaseRfiToken: burn from the burn address\");\n                require(0 < store_k, \"BaseRfiToken: burn from the burn address\");\n                require(storage_map_b[var_a] > store_q, \"BaseRfiToken: burn from the burn address\");\n                var_a = 0x1d;\n                var_a = address(storage_map_p[var_a]);\n                var_b = 0x18;\n                require(!(storage_map_b[var_a] > store_q), \"BaseRfiToken: burn from the burn address\");\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x11;\n                require(0 < store_k, \"BaseRfiToken: burn from the burn address\");\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x32;\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x32;\n                require(!(store_q < storage_map_b[var_a]), \"BaseRfiToken: burn from the burn address\");\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x32;\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_h = 0x32;\n                require(0 < store_k, \"BaseRfiToken: burn from the burn address\");\n                require(0 < store_k, \"BaseRfiToken: burn from the burn address\");\n                require(!totalSupply, \"BaseRfiToken: burn from the burn address\");\n            }\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_h = 0x12;\n            require(totalSupply, \"BaseRfiToken: burn from the burn address\");\n        }\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x28;\n        var_f = 0x42617365526669546f6b656e3a206275726e2066726f6d20746865206275726e;\n        var_g = 0x2061646472657373000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x28;\n        var_f = 0x42617365526669546f6b656e3a206275726e2066726f6d20746865207a65726f;\n        var_g = 0x2061646472657373000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function burn(uint256 amount) public {\n    require(msg.sender != address(0), \"BaseRfiToken: burn amount exceeds balance\");\n    require(address(store_o) != msg.sender, \"BaseRfiToken: burn amount exceeds balance\");\n    \n    address sender = msg.sender;\n    require(!bytes1(storage_map_b[sender]), \"BaseRfiToken: burn amount exceeds balance\");\n    require(storage_map_b[sender] >= amount, \"BaseRfiToken: burn amount exceeds balance\");\n\n    if (store_k == 0) {\n        revert(\"Decompiler artifact\");\n    }\n\n    address burnAddress = address(storage_map_p[0x1d]);\n    require(storage_map_b[burnAddress] > store_q, \"Amount must be less than total reflections\");\n    require(storage_map_b[burnAddress] <= store_q, \"Amount must be less than total reflections\");\n\n    uint256 reflectionAmount = amount * (store_q / totalSupply);\n    require(reflectionAmount <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / amount, \"Amount must be less than total reflections\");\n\n    require(storage_map_b[sender] >= reflectionAmount, \"Amount must be less than total reflections\");\n    storage_map_b[sender] -= reflectionAmount;\n\n    require(storage_map_b[address(store_o)] + reflectionAmount >= storage_map_b[address(store_o)], \"Amount must be less than total reflections\");\n    storage_map_b[address(store_o)] += reflectionAmount;\n\n    emit Transfer(sender, address(store_o), amount);\n\n    require(storage_map_b[sender] <= store_q, \"Amount must be less than total reflections\");\n    require(store_k > 0, \"Amount must be less than total reflections\");\n    require(totalSupply > 0, \"Amount must be less than total reflections\");\n}",
    "ground_truth": "function burn(uint256 amount) external {\r\n        address sender = _msgSender();\r\n        require(\r\n            sender != address(0),\r\n            \"BaseRfiToken: burn from the zero address\"\r\n        );\r\n        require(\r\n            sender != address(burnAddress),\r\n            \"BaseRfiToken: burn from the burn address\"\r\n        );\r\n\r\n        uint256 balance = balanceOf(sender);\r\n        require(balance >= amount, \"BaseRfiToken: burn amount exceeds balance\");\r\n\r\n        uint256 reflectedAmount = amount.mul(_getCurrentRate());\r\n\r\n        // remove the amount from the sender's balance first\r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(\r\n            reflectedAmount\r\n        );\r\n        if (_isExcludedFromRewards[sender])\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        _burnTokens(sender, amount, reflectedAmount);\r\n    }"
}