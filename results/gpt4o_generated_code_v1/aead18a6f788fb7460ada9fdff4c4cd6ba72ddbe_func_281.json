{
    "contract_address": "0xaEAD18A6f788fb7460aDA9fDFf4C4Cd6Ba72dDBE",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_r) {\n            if (store_r - ((store_r >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_r >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_r >> 0x01;\n                if (store_r) {\n                    if (store_r - ((store_r >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_r >> 0x01) {\n                            if (0x1f < (store_r >> 0x01)) {\n                                var_a = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c43;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_r >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    if (!0 > var_c.length) {\n                                        uint256 var_g = 0;\n                                        return abi.encodePacked(0x20, var_c.length);\n                                        return abi.encodePacked(0x20, var_c.length);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function getSymbol() public view returns (string memory) {\n    if (store_r != 0) {\n        if (store_r - ((store_r >> 1) < 32)) {\n            bytes32 errorCode = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            uint256 errorLength = 34;\n            uint256 offset = 32 + (((31 + (store_r >> 1)) / 32) * 32);\n            bytes32 shiftedStore = store_r >> 1;\n            if (store_r != 0) {\n                if (store_r - ((store_r >> 1) < 32)) {\n                    errorCode = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    errorLength = 34;\n                    if (shiftedStore == 0) {\n                        if (31 < (store_r >> 1)) {\n                            errorCode = 0x2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c43;\n                            bytes32 storageValue = storage_map_b[errorCode];\n                            if ((32 + offset) + (store_r >> 1) > (32 + (32 + offset))) {\n                                storageValue = 32;\n                                uint256 length = offset;\n                                if (0 <= length) {\n                                    uint256 zeroValue = 0;\n                                    return abi.encodePacked(uint256(32), length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    revert('Decompiler artifact');\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\\n        return ERC721AStorage.layout()._symbol;\\n    }"
}