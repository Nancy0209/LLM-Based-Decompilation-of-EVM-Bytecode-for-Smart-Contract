{
    "contract_address": "0xeF684902f48bf76B9420474Aa213A8e217219674",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(transferDelayEnabled / 0x0100)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_h[var_a]);\n        store_g = 0x01000000000000000000000000000000000000000000 | (uint248(store_g));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_f).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_f), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_f);\n        address var_b = keccak256(var_a);\n        storage_map_h[var_a] = storage_map_h[var_a];\n        address var_k = storage_map_h[var_a];\n        emit Approval(address(this), address(store_f), storage_map_h[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_h[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_f).code.length);\n        (bool success, bytes memory ret0) = address(store_f).Unresolved_791ac947(var_l); // call\n        store_g = uint248(store_g);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(transferDelayEnabled / 0x0100).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    require(msg.sender == address(uint160(transferDelayEnabled / 0x0100)), \"Invalid sender address\");\n\n    address contractAddress = address(this);\n    uint8 operationFlag = 0x01;\n    require(!storage_map_h[contractAddress], \"Operation already performed\");\n\n    store_g = 0x01000000000000000000000000000000000000000000 | uint248(store_g);\n\n    uint8 nextOperationFlag = 0x02;\n    uint256 offset = 0x60;\n    bytes memory inputData = msg.data[4:68];\n\n    bytes32 errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8 errorCode = 0x32;\n\n    address currentAddress = address(this);\n    bytes32 unresolvedSelector = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n\n    (bool success, bytes memory returnData) = address(store_f).staticcall(abi.encodeWithSignature(\"WETH(uint256)\", nextOperationFlag));\n    require(success, \"Static call failed\");\n\n    offset += uint248(returnData.length + 0x1f);\n    require(!(((offset + returnData.length) - offset) < 0x20), \"ERC20: approve to the zero address\");\n    require(returnData.length == uint256(uint160(returnData.length)), \"ERC20: approve to the zero address\");\n\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorCode = 0x32;\n\n    uint256 addressLength = uint256(uint160(returnData.length));\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(address(store_f) != address(0), \"ERC20: approve to the zero address\");\n\n    bytes32 revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 revertDataOffset = 0x20;\n    uint256 revertDataLength = 0x22;\n    bytes32 revertMessage = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    bytes32 revertMessagePadding = 0x7373000000000000000000000000000000000000000000000000000000000000;\n\n    contractAddress = address(this);\n    operationFlag = 0x02;\n    contractAddress = address(store_f);\n\n    address hashedAddress = address(uint160(uint256(keccak256(abi.encodePacked(contractAddress))));\n    storage_map_h[contractAddress] = storage_map_h[contractAddress];\n\n    address approvalAddress = storage_map_h[contractAddress];\n    emit Approval(address(this), address(store_f), storage_map_h[contractAddress]);\n\n    bytes32 unresolvedCallSelector = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n    address unresolvedCallAddress = storage_map_h[contractAddress];\n    uint256 unresolvedCallValue = 0;\n    uint256 unresolvedCallOffset = 0xa0;\n    uint256 unresolvedCallLength = returnData.length;\n    address unresolvedCallSender = address(this);\n    uint256 unresolvedCallTimestamp = block.timestamp;\n\n    require(address(store_f).code.length > 0, \"Invalid contract code\");\n\n    (bool callSuccess, bytes memory callReturnData) = address(store_f).call(abi.encodeWithSignature(\"Unresolved_791ac947(address)\", unresolvedCallAddress));\n    require(callSuccess, \"Call failed\");\n\n    store_g = uint248(store_g);\n    require(address(this).balance == 0, \"Contract balance is not zero\");\n\n    (bool transferSuccess, bytes memory transferReturnData) = address(uint160(transferDelayEnabled / 0x0100)).call{value: address(this).balance}(\"\");\n    require(transferSuccess, \"Transfer failed\");\n\n    revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    revertDataOffset = 0x20;\n    revertDataLength = 0x24;\n    revertMessage = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    revertMessagePadding = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}