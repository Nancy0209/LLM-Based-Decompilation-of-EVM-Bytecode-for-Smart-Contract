{
    "contract_address": "0x328E4802787C25995e524C4280a69F985f08ea48",
    "heimdall_input": "function manualSwap() public {\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_f[var_a]);\n        store_e = 0x01000000000000000000000000000000000000000000 | (uint248(store_e));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_l).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_l), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_l);\n        address var_b = keccak256(var_a);\n        storage_map_f[var_a] = storage_map_f[var_a];\n        address var_k = storage_map_f[var_a];\n        emit Approval(address(this), address(store_l), storage_map_f[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_f[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_l).code.length);\n        (bool success, bytes memory ret0) = address(store_l).Unresolved_791ac947(var_l); // call\n        store_e = uint248(store_e);\n        require(!address(this).balance);\n        require((store_p == ((store_p * address(this).balance) / address(this).balance)) | !address(this).balance);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x64);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        require((store_q == ((store_q * address(this).balance) / address(this).balance)) | !address(this).balance);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x11;\n        require(0x64);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x12;\n        (bool success, bytes memory ret0) = address(store_o).transfer((store_p * address(this).balance) / 0x64);\n        (bool success, bytes memory ret0) = address(store_r).transfer((store_q * address(this).balance) / 0x64);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    address contractAddress = address(this);\n    uint8 operationFlag = 0x01;\n    require(!storageMapF[contractAddress], \"Operation already performed\");\n\n    storeE = 0x01000000000000000000000000000000000000000000 | uint248(storeE);\n    operationFlag = 0x02;\n\n    uint256 offset = 0x60;\n    bytes memory inputData = msg.data[4:68];\n\n    uint256 errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8 errorCode = 0x32;\n\n    address wethAddress = address(this);\n    uint256 wethCallSelector = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n\n    (bool success, bytes memory wethResponse) = address(storeL).staticcall(abi.encodeWithSelector(wethCallSelector));\n    require(success, \"WETH staticcall failed\");\n\n    offset += uint248(wethResponse.length + 0x1f);\n    require(!(((offset + wethResponse.length) - offset) < 0x20), \"ERC20: approve to the zero address\");\n    require(wethResponse.length == uint256(uint160(wethResponse.length)), \"ERC20: approve to the zero address\");\n\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorCode = 0x32;\n\n    uint256 addressCheck = uint256(uint160(wethResponse.length));\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(address(storeL) != address(0), \"ERC20: approve to the zero address\");\n\n    uint256 revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 revertDataLength = 0x20;\n    uint256 revertMessageLength = 0x22;\n    bytes32 revertMessage = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    bytes32 revertMessageSuffix = 0x7373000000000000000000000000000000000000000000000000000000000000;\n\n    contractAddress = address(this);\n    operationFlag = 0x02;\n\n    address storageAddress = address(storeL);\n    bytes32 storageKey = keccak256(abi.encodePacked(storageAddress));\n    storageMapF[contractAddress] = storageMapF[contractAddress];\n\n    address approvalAddress = storageMapF[contractAddress];\n    emit Approval(address(this), address(storeL), storageMapF[contractAddress]);\n\n    uint256 transferSelector = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n    address transferAddress = storageMapF[contractAddress];\n    uint256 transferAmount = 0;\n    uint256 transferOffset = 0xa0;\n    uint256 transferDataLength = wethResponse.length;\n    address transferSource = address(this);\n    uint256 currentTimestamp = block.timestamp;\n\n    require(address(storeL).code.length > 0, \"Invalid contract code\");\n    (success, ) = address(storeL).call(abi.encodeWithSelector(transferSelector, transferAddress));\n    require(success, \"Transfer failed\");\n\n    storeE = uint248(storeE);\n    require(address(this).balance == 0, \"Non-zero balance\");\n\n    require(\n        storeP == ((storeP * address(this).balance) / address(this).balance) || address(this).balance == 0,\n        \"Balance mismatch\"\n    );\n\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorCode = 0x11;\n    require(0x64 > 0, \"Invalid condition\");\n\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorCode = 0x12;\n\n    require(\n        storeQ == ((storeQ * address(this).balance) / address(this).balance) || address(this).balance == 0,\n        \"Balance mismatch\"\n    );\n\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorCode = 0x11;\n    require(0x64 > 0, \"Invalid condition\");\n\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorCode = 0x12;\n\n    (success, ) = address(storeO).call{value: (storeP * address(this).balance) / 0x64}(\"\");\n    require(success, \"Transfer to storeO failed\");\n\n    (success, ) = address(storeR).call{value: (storeQ * address(this).balance) / 0x64}(\"\");\n    require(success, \"Transfer to storeR failed\");\n\n    revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    revertDataLength = 0x20;\n    revertMessageLength = 0x24;\n    revertMessage = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    revertMessageSuffix = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external{\\r\\n        uint256 tokenBalance=balanceOf(address(this));\\r\\n        if(tokenBalance>0){\\r\\n          swapTokensForEth(tokenBalance);\\r\\n        }\\r\\n        uint256 ethBalance=address(this).balance;\\r\\n        if(ethBalance>0){\\r\\n          sendETHToFee(ethBalance);\\r\\n        }\\r\\n    }"
}