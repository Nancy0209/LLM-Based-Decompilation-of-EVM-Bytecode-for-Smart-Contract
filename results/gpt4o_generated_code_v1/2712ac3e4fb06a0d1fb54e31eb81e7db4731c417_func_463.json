{
    "contract_address": "0x2712ac3E4Fb06A0d1FB54E31eB81e7db4731c417",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_g)));\n        address var_a = address(this);\n        var_b = 0x02;\n        require(!storage_map_l[var_a]);\n        burnMode = 0x010000000000000000000000000000000000000000 | (uint248(burnMode));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(uniswapV2Router).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!((var_d + ret0.length) - var_d) < 0x20);\n        require(var_d.length == (address(var_d.length)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this));\n        require(address(uniswapV2Router));\n        var_a = address(this);\n        var_b = 0x03;\n        var_a = address(uniswapV2Router);\n        address var_b = keccak256(var_a);\n        storage_map_l[var_a] = storage_map_l[var_a];\n        address var_k = storage_map_l[var_a];\n        emit Approval(address(this), address(uniswapV2Router), storage_map_l[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_l[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_o = var_d.length;\n        address var_p = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(uniswapV2Router).code.length);\n        (bool success, bytes memory ret0) = address(uniswapV2Router).{ value: var_m ether }Unresolved_791ac947(var_l); // call\n        burnMode = uint248(burnMode);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_p = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_p = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    require(msg.sender == storeOwner);\n    address contractAddress = address(this);\n    uint8 operationCode = 0x02;\n    require(!swapLock[contractAddress]);\n    burnMode = 0x010000000000000000000000000000000000000000 | uint248(burnMode);\n    uint8 anotherOperationCode = 0x02;\n    uint256 dataOffset = 0x60;\n    bytes memory inputData = msg.data[4:68];\n    bytes32 errorSignature = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8 errorCode = 0x32;\n    address currentAddress = address(this);\n    bytes32 anotherErrorSignature = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n    (bool success, bytes memory wethData) = address(uniswapV2Router).staticcall(abi.encodeWithSignature(\"WETH()\"));\n    dataOffset += uint248(wethData.length + 0x1f);\n    require(!((dataOffset + wethData.length) - dataOffset) < 0x20);\n    require(dataOffset.length == address(dataOffset.length));\n    errorSignature = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorCode = 0x32;\n    uint256 addressLength = address(dataOffset.length);\n    require(address(this) != address(0));\n    require(address(uniswapV2Router) != address(0));\n    contractAddress = address(this);\n    operationCode = 0x03;\n    contractAddress = address(uniswapV2Router);\n    address hashedAddress = address(uint160(uint256(keccak256(abi.encodePacked(contractAddress)))));\n    swapLock[contractAddress] = swapLock[contractAddress];\n    address lockedAddress = swapLock[contractAddress];\n    emit Approval(address(this), address(uniswapV2Router), swapLock[contractAddress]);\n    bytes32 approvalSignature = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n    address approvalAddress = swapLock[contractAddress];\n    uint256 zeroValue = 0;\n    uint256 timestampOffset = 0xa0;\n    uint256 dataLength = dataOffset.length;\n    address senderAddress = address(this);\n    uint256 currentTimestamp = block.timestamp;\n    require(address(uniswapV2Router).code.length > 0);\n    (bool callSuccess, bytes memory callData) = address(uniswapV2Router).call{value: zeroValue}(abi.encodeWithSignature(\"Unresolved_791ac947(address)\", approvalAddress));\n    burnMode = uint248(burnMode);\n    bytes32 revertSignature = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 revertOffset = 0x20;\n    uint256 revertLength = 0x22;\n    bytes32 revertMessage = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    bytes32 revertSuffix = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    revertSignature = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    revertOffset = 0x20;\n    revertLength = 0x24;\n    revertMessage = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    revertSuffix = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender() == shiaburnWallet);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance > 0) {\r\n            swapTokensForEth(contractBalance);\r\n        }\r\n    }"
}