{
    "contract_address": "0x5B7b79708986436F7a90c33f0683841DaEC83810",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_i) {\n            if (store_i - ((store_i >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_i >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_i >> 0x01;\n                if (store_i) {\n                    if (store_i - ((store_i >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_i >> 0x01) {\n                            if (0x1f < (store_i >> 0x01)) {\n                                var_a = 0x05;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_i >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    if (store_i != 0) {\n        if (store_i - (store_i >> 1) < 0x20) {\n            revert('Decompiler artifact');\n        }\n        uint256 offset = 0x20 + (((0x1f + (store_i >> 1)) / 0x20) * 0x20);\n        bytes32 shiftedStore = store_i >> 1;\n        if (store_i != 0) {\n            if (store_i - (shiftedStore < 0x20)) {\n                revert('Decompiler artifact');\n            }\n            if (shiftedStore == 0) {\n                if (0x1f < shiftedStore) {\n                    uint256 index = 0x05;\n                    bytes32 data = storage_map_b[index];\n                    if ((0x20 + offset) + shiftedStore > (0x20 + (0x20 + offset))) {\n                        uint256 length = offset;\n                        return abi.encodePacked(0x20, length);\n                    }\n                }\n            }\n        }\n    }\n}",
    "ground_truth": "function symbol() public view  returns (string memory) {\r\n        return _tokenSSSsymbol;\r\n    }"
}