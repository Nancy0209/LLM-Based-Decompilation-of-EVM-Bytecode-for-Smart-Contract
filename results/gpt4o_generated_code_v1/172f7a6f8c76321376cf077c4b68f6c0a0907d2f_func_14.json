{
    "contract_address": "0x172F7a6F8C76321376cf077c4b68f6C0A0907d2f",
    "heimdall_input": "function manualBurn(uint256 arg0) public returns (bool) {\n        require(arg0 == arg0);\n        require(address(msg.sender) == (address(getOwner / 0x01)), \"!Owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x06;\n        var_e = 0x214f776e65720000000000000000000000000000000000000000000000000000;\n        uint256 var_c = 0x40 + var_c;\n        var_a = 0x14;\n        var_f = 0x496e73756666696369656e742042616c616e6365000000000000000000000000;\n        address var_g = address(this);\n        var_h = 0x06;\n        require(!(arg0 > storage_map_k[var_g]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_e = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        uint256 var_j = var_c.length;\n        require(!(0 > var_c.length), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_k = 0;\n        var_l = var_m;\n        require(!(0x20 > var_c.length), \"Insufficient Balance\");\n        var_k = 0;\n        require(!(storage_map_k[var_g] < arg0), \"SafeMath: addition overflow\");\n        var_g = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_n = 0x11;\n        var_g = address(this);\n        var_h = 0x06;\n        storage_map_k[var_g] = storage_map_k[var_g] - arg0;\n        var_g = address(store_l / 0x01);\n        var_h = 0x06;\n        require(!(storage_map_k[var_g] > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff - arg0)), \"SafeMath: addition overflow\");\n        var_g = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_n = 0x11;\n        require(!((storage_map_k[var_g] + arg0) < storage_map_k[var_g]), \"SafeMath: addition overflow\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_j = 0x1b;\n        var_l = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_g = address(store_l / 0x01);\n        var_h = 0x06;\n        storage_map_k[var_g] = storage_map_k[var_g] + arg0;\n        uint256 var_i = arg0;\n        emit Transfer(address(this), address(store_l / 0x01), arg0);\n        var_i = 0x01;\n        return 0x01;\n    }",
    "llm_output": "function manualBurn(uint256 amount) public returns (bool) {\n    require(amount == amount, \"Invalid amount\"); // Redundant check, but kept for fidelity\n    require(msg.sender == owner(), \"!Owner\");\n\n    // Ensure the sender has sufficient balance\n    require(amount <= balances[msg.sender], \"Insufficient balance\");\n\n    // Perform the burn operation\n    balances[msg.sender] -= amount;\n\n    // Get the burn destination address (assumed to be a specific address or burn address)\n    address burnAddress = burnDestination();\n\n    // Ensure no overflow occurs when adding the burned amount to the burn address balance\n    require(balances[burnAddress] + amount >= balances[burnAddress], \"SafeMath: addition overflow\");\n\n    // Update the burn address balance\n    balances[burnAddress] += amount;\n\n    // Emit a transfer event to reflect the burn\n    emit Transfer(msg.sender, burnAddress, amount);\n\n    return true;\n}\n\n// Helper function to get the owner of the contract\nfunction owner() internal view returns (address) {\n    return address(uint160(uint256(keccak256(abi.encodePacked(\"owner\")))));\n}\n\n// Helper function to get the burn destination address\nfunction burnDestination() internal view returns (address) {\n    return address(uint160(uint256(keccak256(abi.encodePacked(\"burnDestination\")))));\n}\n\n// Storage mapping for balances\nmapping(address => uint256) private balances;\n\n// Event for transfer\nevent Transfer(address indexed from, address indexed to, uint256 value);",
    "ground_truth": "function manualBurn(uint256 amount) external onlyOwner returns (bool) {\r\n        return _basicTransfer(address(this), DEAD, amount);\r\n    }"
}