{
    "contract_address": "0x16E04d776e1B647BE948C6D2f51Bca26401DC011",
    "heimdall_input": "function launch() public {\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!(bytes1(launched / 0x010000000000000000000000000000000000000000)), \"Already launched\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x10;\n        var_d = 0x416c7265616479206c61756e6368656400000000000000000000000000000000;\n        launched = 0x010000000000000000000000000000000000000000 | (uint248(launched));\n        uint256 var_a = block.number;\n        emit Launched(block.number);\n    }",
    "llm_output": "pragma solidity ^0.8.0;\n\ncontract LaunchContract {\n    address public owner;\n    uint256 public launched;\n\n    event Launched(uint256 blockNumber);\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function launch() public {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n\n        // Check if the contract has already been launched\n        require((launched & 0x010000000000000000000000000000000000000000) == 0, \"Already launched\");\n\n        // Mark the contract as launched\n        launched = 0x010000000000000000000000000000000000000000 | launched;\n\n        // Emit the Launched event with the current block number\n        emit Launched(block.number);\n    }\n}",
    "ground_truth": "function launch() external onlyOwner {\r\n        require(!launched, \"Already launched\");\r\n        launched = true;\r\n        emit Launched(block.number);\r\n    }"
}