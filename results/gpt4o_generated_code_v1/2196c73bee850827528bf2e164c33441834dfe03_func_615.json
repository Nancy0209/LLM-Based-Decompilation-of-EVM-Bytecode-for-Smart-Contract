{
    "contract_address": "0x2196c73Bee850827528bf2e164c33441834dFe03",
    "heimdall_input": "function getApproved(uint256 arg0) public view returns (address) {\n        require(!(!0x01 > arg0), CustomError_cf4700e4());\n        require(!(arg0 < totalSupply), CustomError_cf4700e4());\n        uint256 var_a = arg0;\n        var_b = 0x04;\n        require(!(bytes1(storage_map_b[var_a])), CustomError_cf4700e4());\n        var_c = 0xcf4700e400000000000000000000000000000000000000000000000000000000;\n        var_a = arg0;\n        var_b = 0x06;\n        uint256 var_c = address(storage_map_b[var_a]);\n        return address(storage_map_b[var_a]);\n        require(arg0 < totalSupply, CustomError_cf4700e4());\n        var_a = arg0;\n        var_b = 0x06;\n        var_c = address(storage_map_b[var_a]);\n        return address(storage_map_b[var_a]);\n        var_c = 0xcf4700e400000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function getApproved(uint256 tokenId) public view returns (address) {\n    require(tokenId >= 0, \"Invalid tokenId\"); // Placeholder for CustomError_cf4700e4\n    require(tokenId < totalSupply, \"Invalid tokenId\"); // Placeholder for CustomError_cf4700e4\n\n    // Assuming `approvedAddresses` is the mapping for token approvals\n    address approvedAddress = approvedAddresses[tokenId];\n    return approvedAddress;\n}",
    "ground_truth": "function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId].value;\r\n    }"
}