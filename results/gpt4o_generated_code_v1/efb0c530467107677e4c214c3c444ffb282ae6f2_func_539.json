{
    "contract_address": "0xEFB0c530467107677E4C214c3C444fFb282AE6F2",
    "heimdall_input": "function getWinner() public view returns (bytes memory) {\n        uint256 var_a = var_a + (0x20 + (0x20 * store_i));\n        var_b = store_i;\n        if (!store_i) {\n            var_c = 0x04;\n            address var_d = address(storage_map_z[var_c]);\n            if ((0x20 + var_a) + (0x20 * store_i) > (0x20 + (0x20 + var_a))) {\n                address var_e = address(storage_map_aa[var_c]);\n                if ((0x20 + var_a) + (0x20 * store_i) > (0x20 + (0x20 + (0x20 + var_a)))) {\n                    var_d = 0x20;\n                    var_e = var_a.length;\n                    return abi.encodePacked(0x20, var_a.length);\n                }\n            }\n        }\n    }",
    "llm_output": "function getWinner() public view returns (bytes memory) {\n    uint256 offset = offset + (0x20 + (0x20 * storedIndex));\n    uint256 index = storedIndex;\n\n    if (index == 0) {\n        uint256 key = 0x04;\n        address firstAddress = address(storageMapZ[key]);\n\n        if ((0x20 + offset) + (0x20 * storedIndex) > (0x20 + (0x20 + offset))) {\n            address secondAddress = address(storageMapAA[key]);\n\n            if ((0x20 + offset) + (0x20 * storedIndex) > (0x20 + (0x20 + (0x20 + offset)))) {\n                uint256 length = 0x20;\n                uint256 dataLength = offset.length;\n                return abi.encodePacked(0x20, dataLength);\n            }\n        }\n    }\n}",
    "ground_truth": "function getWinner() public view returns (address[] memory) {\\n        return winnerOfPrize;\\n     }"
}