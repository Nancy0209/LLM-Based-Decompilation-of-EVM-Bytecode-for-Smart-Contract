{
    "contract_address": "0x31d3341342D2A7a68EDDF5759C820eFD568D91dA",
    "heimdall_input": "function approve(address arg0, uint256 arg1) public payable {\n        require(arg0 == (address(arg0)));\n        uint256 var_a = arg1;\n        var_b = 0x02;\n        require(address(storage_map_b[var_a]), \"ERC721: owner query for nonexistent token\");\n        require(!(address(arg0) == (address(storage_map_b[var_a]))), \"ERC721: owner query for nonexistent token\");\n        require(address(storage_map_b[var_a]) == msg.sender, \"ERC721: owner query for nonexistent token\");\n        var_a = address(storage_map_b[var_a]);\n        var_b = 0x05;\n        var_a = address(msg.sender);\n        uint256 var_b = keccak256(var_a);\n        require(bytes1(storage_map_b[var_a]), \"ERC721: owner query for nonexistent token\");\n        var_a = arg1;\n        var_b = 0x04;\n        storage_map_b[var_a] = (address(arg0)) | (uint96(storage_map_b[var_a]));\n        var_a = arg1;\n        var_b = 0x02;\n        require(address(storage_map_b[var_a]), \"ERC721: owner query for nonexistent token\");\n        emit Approval(address(storage_map_b[var_a]), address(arg0), arg1);\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x4552433732313a206f776e657220717565727920666f72206e6f6e6578697374;\n        var_g = 0x656e7420746f6b656e0000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x38;\n        var_f = 0x4552433732313a20617070726f76652063616c6c6572206973206e6f74206f77;\n        var_g = 0x6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000;\n        require(address(storage_map_b[var_a]) == msg.sender, \"ERC721: approve caller is not owner nor approved for all\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x38;\n        var_f = 0x4552433732313a20617070726f76652063616c6c6572206973206e6f74206f77;\n        var_g = 0x6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x21;\n        var_f = 0x4552433732313a20617070726f76616c20746f2063757272656e74206f776e65;\n        var_g = 0x7200000000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x4552433732313a206f776e657220717565727920666f72206e6f6e6578697374;\n        var_g = 0x656e7420746f6b656e0000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function approve(address to, uint256 tokenId) public payable {\n    require(to == address(to), \"Invalid address\");\n    require(address(tokenOwners[tokenId]) != address(0), \"ERC721: owner query for nonexistent token\");\n    require(to != address(tokenOwners[tokenId]), \"ERC721: approval to current owner\");\n    require(address(tokenOwners[tokenId]) == msg.sender, \"ERC721: approve caller is not owner nor approved for all\");\n\n    tokenOwners[tokenId] = to | uint96(tokenOwners[tokenId]);\n\n    emit Approval(address(tokenOwners[tokenId]), to, tokenId);\n}",
    "ground_truth": "function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom}"
}