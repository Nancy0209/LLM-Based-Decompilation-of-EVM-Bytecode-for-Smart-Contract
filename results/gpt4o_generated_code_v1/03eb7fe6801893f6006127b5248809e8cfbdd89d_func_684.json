{
    "contract_address": "0x03eB7Fe6801893F6006127B5248809e8CFbdd89D",
    "heimdall_input": "function CloseBetting(uint256 arg0) public payable {\n        require(0 > betCount, \"Betting is not open @ CloseBetting()\");\n        uint256 var_a = arg0;\n        var_b = 0x05;\n        var_a = 0;\n        var_b = 0x06;\n        require(!(arg0 == (storage_map_b[var_a])), \"Betting is not open @ CloseBetting()\");\n        require(!(arg0 == (storage_map_b[var_a])), \"Betting is not open @ CloseBetting()\");\n        require(address(storage_map_k[var_a]) - msg.sender, \"Betting is not open @ CloseBetting()\");\n        require(0 == 0x01, \"Betting is not open @ CloseBetting()\");\n        require(!(bytes1(storage_map_l[var_a]) > 0x02), \"Betting is not open @ CloseBetting()\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x21;\n        require(bytes1(storage_map_l[var_a]) == 0, \"Betting is not open @ CloseBetting()\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x24;\n        var_g = 0x42657474696e67206973206e6f74206f70656e204020436c6f73654265747469;\n        var_h = 0x6e67282900000000000000000000000000000000000000000000000000000000;\n        require(!(block.timestamp < (storage_map_e[var_a])), \"Betting pendingTime has not passed yet @ CloseBetting()\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x37;\n        var_g = 0x42657474696e672070656e64696e6754696d6520686173206e6f742070617373;\n        var_h = 0x656420796574204020436c6f736542657474696e672829000000000000000000;\n        require(!(block.timestamp < (storage_map_m[var_a])), \"Betting endTime has not passed yet @ CloseBetting()\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x33;\n        var_g = 0x42657474696e6720656e6454696d6520686173206e6f74207061737365642079;\n        var_h = 0x6574204020436c6f736542657474696e67282900000000000000000000000000;\n        require(0 > SupportedTokenCount);\n        better_oracle = 0 | (uint96(better_oracle));\n        var_d = 0xb09a57a900000000000000000000000000000000000000000000000000000000;\n        uint256 var_e = address(storage_map_o[var_a]);\n        uint256 var_f = storage_map_g[var_a];\n        uint256 var_g = 0;\n        (bool success, bytes memory ret0) = address(0).Unresolved_b09a57a9(var_e); // call\n        uint256 var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x40);\n        require(var_j == (uint80(var_j)));\n        var_a = arg0;\n        var_b = 0x05;\n        storage_map_p[var_a] = var_i.length;\n        if ((range_percentage == ((range_percentage * var_i.length) / var_i.length)) | !var_i.length) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_c = 0x11;\n            if (0xc8) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_c = 0x12;\n                if (!var_i.length > (((range_percentage * var_i.length) / 0xc8) + var_i.length)) {\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_c = 0x11;\n                    require((range_percentage == ((range_percentage * var_i.length) / var_i.length)) | !var_i.length);\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_c = 0x11;\n                    require(0xc8);\n                    require(!var_i.length > (((range_percentage * var_i.length) / 0xc8) + var_i.length));\n                    require(!(var_i.length - ((range_percentage * var_i.length) / 0xc8)) > var_i.length);\n                    storage_map_c[var_a] = (uint240(storage_map_c[var_a]) | (0x0100 * 0)) | 0x01;\n                    var_a = 0;\n                    var_b = 0x06;\n                    require(0 > betCount);\n                    require(0x01 - 0);\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_c = 0x11;\n                    require(0 > betCount);\n                    storage_map_c[var_a] = (uint240(storage_map_c[var_a]) | (0x0100 * 0)) | 0x01;\n                    var_a = 0;\n                    var_b = 0x06;\n                    require(storage_map_b[var_a] - arg0);\n                    var_a = 0;\n                    var_b = 0x06;\n                    require(0x01);\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_c = 0x11;\n                    require(0x01 - (bytes1(storage_map_e[var_a])));\n                    var_a = 0;\n                    var_b = 0x06;\n                    storage_map_r[var_a] = (store_s * (storage_map_m[var_a])) / 0;\n                    var_a = arg0;\n                    var_b = 0x05;\n                    require((store_s == ((store_s * (storage_map_m[var_a])) / (storage_map_m[var_a]))) | (!storage_map_m[var_a]));\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_c = 0x11;\n                    var_a = 0;\n                    var_b = 0x06;\n                    require(0);\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_c = 0x11;\n                    require(!(storage_map_t[var_a] - 0) > (storage_map_t[var_a]));\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_c = 0x12;\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_c = 0x12;\n                    storage_map_c[var_a] = (uint240(storage_map_c[var_a]) | (0x0100 * 0)) | 0x01;\n                    var_a = 0;\n                    var_b = 0x06;\n                    require((store_s == ((store_s * (storage_map_m[var_a])) / (storage_map_m[var_a]))) | (!storage_map_m[var_a]));\n                    require(0);\n                    var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    var_c = 0x11;\n                    require(storage_map_b[var_a] - arg0);\n                }\n            }\n            var_a = 0;\n            var_b = 0x06;\n            require(0x01);\n            var_a = 0;\n            var_b = 0x06;\n            require(!storage_map_m[var_a]);\n            var_a = 0;\n            var_b = 0x06;\n            require((var_i.length - ((range_percentage * var_i.length) / 0xc8)) > (storage_map_u[var_a]));\n            var_a = 0;\n            var_b = 0x06;\n            storage_map_i[var_a] = 0x01 | (uint248(storage_map_i[var_a]));\n            require((((range_percentage * var_i.length) / 0xc8) + var_i.length) < (storage_map_u[var_a]));\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_c = 0x11;\n            require(!0 > (storage_map_g[var_a] + 0));\n        }\n        var_a = 0;\n        var_b = 0x07;\n        if (!(address(storage_map_o[var_a])) == (address(storage_map_b[var_a]))) {\n            if (!(address(storage_map_o[var_a])) == (address(storage_map_b[var_a]))) {\n            }\n            var_a = 0;\n            var_b = 0x07;\n            require(!(address(storage_map_o[var_a]) == (address(storage_map_b[var_a]))), \"only betters or creater can close betting @ CloseBetting()\");\n        }\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x3a;\n        var_g = 0x6f6e6c792062657474657273206f7220637265617465722063616e20636c6f73;\n        var_h = 0x652062657474696e67204020436c6f736542657474696e672829000000000000;\n        require(0x01 == 0x01, \"only betters or creater can close betting @ CloseBetting()\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x3a;\n        var_g = 0x6f6e6c792062657474657273206f7220637265617465722063616e20636c6f73;\n        var_h = 0x652062657474696e67204020436c6f736542657474696e672829000000000000;\n        require(!(bytes1(storage_map_l[var_a]) > 0x02), \"Betting is not open @ CloseBetting()\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x21;\n        require(bytes1(storage_map_l[var_a]) == 0, \"Betting is not open @ CloseBetting()\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x24;\n        var_g = 0x42657474696e67206973206e6f74206f70656e204020436c6f73654265747469;\n        var_h = 0x6e67282900000000000000000000000000000000000000000000000000000000;\n        require(!(block.timestamp < (storage_map_e[var_a])), \"Betting pendingTime has not passed yet @ CloseBetting()\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x37;\n        var_g = 0x42657474696e672070656e64696e6754696d6520686173206e6f742070617373;\n        var_h = 0x656420796574204020436c6f736542657474696e672829000000000000000000;\n        require(!(block.timestamp < (storage_map_m[var_a])), \"Betting endTime has not passed yet @ CloseBetting()\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x33;\n        var_g = 0x42657474696e6720656e6454696d6520686173206e6f74207061737365642079;\n        var_h = 0x6574204020436c6f736542657474696e67282900000000000000000000000000;\n        require(0 > SupportedTokenCount);\n        better_oracle = 0 | (uint96(better_oracle));\n        var_d = 0xb09a57a900000000000000000000000000000000000000000000000000000000;\n        var_e = address(storage_map_o[var_a]);\n        var_f = storage_map_g[var_a];\n        var_g = 0;\n        (bool success, bytes memory ret0) = address(0).Unresolved_b09a57a9(var_e); // call\n        var_i = var_i + (uint248(ret0.length + 0x1f));\n        require(!((var_i + ret0.length) - var_i) < 0x40);\n        require(var_j == (uint80(var_j)));\n        if (address(storage_map_k[var_a]) - msg.sender) {\n        }\n        var_a = 0;\n        var_b = 0x06;\n        if (!storage_map_m[var_a]) {\n        }\n        var_a = 0;\n        var_b = 0x06;\n        if (storage_map_b[var_a] - arg0) {\n            var_a = 0;\n            var_b = 0x06;\n            require(storage_map_b[var_a] - arg0);\n        }\n    }",
    "llm_output": "function closeBetting(uint256 betId) public payable {\n    require(betCount < 0, \"Betting is not open @ closeBetting()\");\n    uint256 tempVar = betId;\n    uint256 anotherTempVar = 0x05;\n    tempVar = 0;\n    anotherTempVar = 0x06;\n    require(!(betId == storage_map_b[tempVar]), \"Betting is not open @ closeBetting()\");\n    require(!(betId == storage_map_b[tempVar]), \"Betting is not open @ closeBetting()\");\n    require(address(storage_map_k[tempVar]) != msg.sender, \"Betting is not open @ closeBetting()\");\n    require(0 == 0x01, \"Betting is not open @ closeBetting()\");\n    require(!(bytes1(storage_map_l[tempVar]) > 0x02), \"Betting is not open @ closeBetting()\");\n    tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    anotherTempVar = 0x21;\n    require(bytes1(storage_map_l[tempVar]) == 0, \"Betting is not open @ closeBetting()\");\n    uint256 errorCode = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 errorOffset = 0x20;\n    uint256 errorLength = 0x24;\n    uint256 errorMessagePart1 = 0x42657474696e67206973206e6f74206f70656e204020436c6f73654265747469;\n    uint256 errorMessagePart2 = 0x6e67282900000000000000000000000000000000000000000000000000000000;\n    require(!(block.timestamp < storage_map_e[tempVar]), \"Betting pendingTime has not passed yet @ closeBetting()\");\n    errorCode = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x37;\n    errorMessagePart1 = 0x42657474696e672070656e64696e6754696d6520686173206e6f742070617373;\n    errorMessagePart2 = 0x656420796574204020436c6f736542657474696e672829000000000000000000;\n    require(!(block.timestamp < storage_map_m[tempVar]), \"Betting endTime has not passed yet @ closeBetting()\");\n    errorCode = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x33;\n    errorMessagePart1 = 0x42657474696e6720656e6454696d6520686173206e6f74207061737365642079;\n    errorMessagePart2 = 0x6574204020436c6f736542657474696e67282900000000000000000000000000;\n    require(SupportedTokenCount < 0);\n    better_oracle = 0 | uint96(better_oracle);\n    errorCode = 0xb09a57a900000000000000000000000000000000000000000000000000000000;\n    uint256 oracleAddress = address(storage_map_o[tempVar]);\n    uint256 someValue = storage_map_g[tempVar];\n    uint256 anotherValue = 0;\n    (bool success, bytes memory ret0) = address(0).call(abi.encodeWithSignature(\"Unresolved_b09a57a9(uint256)\", oracleAddress));\n    uint256 retLength = ret0.length + 0x1f;\n    require(!((retLength + ret0.length) - retLength) < 0x40);\n    require(uint80(retLength) == uint80(retLength));\n    tempVar = betId;\n    anotherTempVar = 0x05;\n    storage_map_p[tempVar] = retLength;\n    if ((range_percentage == ((range_percentage * retLength) / retLength)) || !retLength) {\n        tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        anotherTempVar = 0x11;\n        if (0xc8) {\n            tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            anotherTempVar = 0x12;\n            if (!(retLength > (((range_percentage * retLength) / 0xc8) + retLength))) {\n                tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                anotherTempVar = 0x11;\n                require((range_percentage == ((range_percentage * retLength) / retLength)) || !retLength);\n                tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                anotherTempVar = 0x11;\n                require(0xc8);\n                require(!(retLength > (((range_percentage * retLength) / 0xc8) + retLength)));\n                require(!(retLength - ((range_percentage * retLength) / 0xc8)) > retLength);\n                storage_map_c[tempVar] = (uint240(storage_map_c[tempVar]) | (0x0100 * 0)) | 0x01;\n                tempVar = 0;\n                anotherTempVar = 0x06;\n                require(betCount < 0);\n                require(0x01 - 0);\n                tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                anotherTempVar = 0x11;\n                require(betCount < 0);\n                storage_map_c[tempVar] = (uint240(storage_map_c[tempVar]) | (0x0100 * 0)) | 0x01;\n                tempVar = 0;\n                anotherTempVar = 0x06;\n                require(storage_map_b[tempVar] != betId);\n                tempVar = 0;\n                anotherTempVar = 0x06;\n                require(0x01);\n                tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                anotherTempVar = 0x11;\n                require(0x01 - bytes1(storage_map_e[tempVar]));\n                tempVar = 0;\n                anotherTempVar = 0x06;\n                storage_map_r[tempVar] = (store_s * storage_map_m[tempVar]) / 0;\n                tempVar = betId;\n                anotherTempVar = 0x05;\n                require((store_s == ((store_s * storage_map_m[tempVar]) / storage_map_m[tempVar])) || (!storage_map_m[tempVar]));\n                tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                anotherTempVar = 0x11;\n                tempVar = 0;\n                anotherTempVar = 0x06;\n                require(0);\n                tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                anotherTempVar = 0x11;\n                require(!(storage_map_t[tempVar] - 0) > storage_map_t[tempVar]);\n                tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                anotherTempVar = 0x12;\n                tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                anotherTempVar = 0x12;\n                storage_map_c[tempVar] = (uint240(storage_map_c[tempVar]) | (0x0100 * 0)) | 0x01;\n                tempVar = 0;\n                anotherTempVar = 0x06;\n                require((store_s == ((store_s * storage_map_m[tempVar]) / storage_map_m[tempVar])) || (!storage_map_m[tempVar]));\n                require(0);\n                tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                anotherTempVar = 0x11;\n                require(storage_map_b[tempVar] != betId);\n            }\n        }\n        tempVar = 0;\n        anotherTempVar = 0x06;\n        require(0x01);\n        tempVar = 0;\n        anotherTempVar = 0x06;\n        require(!storage_map_m[tempVar]);\n        tempVar = 0;\n        anotherTempVar = 0x06;\n        require((retLength - ((range_percentage * retLength) / 0xc8)) > storage_map_u[tempVar]);\n        tempVar = 0;\n        anotherTempVar = 0x06;\n        storage_map_i[tempVar] = 0x01 | uint248(storage_map_i[tempVar]);\n        require((((range_percentage * retLength) / 0xc8) + retLength) < storage_map_u[tempVar]);\n        tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        anotherTempVar = 0x11;\n        require(!(0 > (storage_map_g[tempVar] + 0)));\n    }\n    tempVar = 0;\n    anotherTempVar = 0x07;\n    if (address(storage_map_o[tempVar]) != address(storage_map_b[tempVar])) {\n        if (address(storage_map_o[tempVar]) != address(storage_map_b[tempVar])) {\n        }\n        tempVar = 0;\n        anotherTempVar = 0x07;\n        require(!(address(storage_map_o[tempVar]) == address(storage_map_b[tempVar])), \"only betters or creator can close betting @ closeBetting()\");\n    }\n    errorCode = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x3a;\n    errorMessagePart1 = 0x6f6e6c792062657474657273206f7220637265617465722063616e20636c6f73;\n    errorMessagePart2 = 0x652062657474696e67204020436c6f736542657474696e672829000000000000;\n    require(0x01 == 0x01, \"only betters or creator can close betting @ closeBetting()\");\n    errorCode = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x3a;\n    errorMessagePart1 = 0x6f6e6c792062657474657273206f7220637265617465722063616e20636c6f73;\n    errorMessagePart2 = 0x652062657474696e67204020436c6f736542657474696e672829000000000000;\n    require(!(bytes1(storage_map_l[tempVar]) > 0x02), \"Betting is not open @ closeBetting()\");\n    tempVar = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    anotherTempVar = 0x21;\n    require(bytes1(storage_map_l[tempVar]) == 0, \"Betting is not open @ closeBetting()\");\n    errorCode = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x24;\n    errorMessagePart1 = 0x42657474696e67206973206e6f74206f70656e204020436c6f73654265747469;\n    errorMessagePart2 = 0x6e67282900000000000000000000000000000000000000000000000000000000;\n    require(!(block.timestamp < storage_map_e[tempVar]), \"Betting pendingTime has not passed yet @ closeBetting()\");\n    errorCode = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x37;\n    errorMessagePart1 = 0x42657474696e672070656e64696e6754696d6520686173206e6f742070617373;\n    errorMessagePart2 = 0x656420796574204020436c6f736542657474696e672829000000000000000000;\n    require(!(block.timestamp < storage_map_m[tempVar]), \"Betting endTime has not passed yet @ closeBetting()\");\n    errorCode = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    errorOffset = 0x20;\n    errorLength = 0x33;\n    errorMessagePart1 = 0x42657474696e6720656e6454696d6520686173206e6f74207061737365642079;\n    errorMessagePart2 = 0x6574204020436c6f736542657474696e67282900000000000000000000000000;\n    require(SupportedTokenCount < 0);\n    better_oracle = 0 | uint96(better_oracle);\n    errorCode = 0xb09a57a900000000000000000000000000000000000000000000000000000000;\n    oracleAddress = address(storage_map_o[tempVar]);\n    someValue = storage_map_g[tempVar];\n    anotherValue = 0;\n    (success, ret0) = address(0).call(abi.encodeWithSignature(\"Unresolved_b09a57a9(uint256)\", oracleAddress));\n    retLength = ret0.length + 0x1f;\n    require(!((retLength + ret0.length) - retLength) < 0x40);\n    require(uint80(retLength) == uint80(retLength));\n    if (address(storage_map_k[tempVar]) != msg.sender) {\n    }\n    tempVar = 0;\n    anotherTempVar = 0x06;\n    if (!storage_map_m[tempVar]) {\n    }\n    tempVar = 0;\n    anotherTempVar = 0x06;\n    if (storage_map_b[tempVar] != betId) {\n        tempVar = 0;\n        anotherTempVar = 0x06;\n        require(storage_map_b[tempVar] != betId);\n    }\n}",
    "ground_truth": "function CloseBetting(uint256 _betting_id) public {\\n        (\\n            ,\\n            uint256 bet_id_in_all_bet_list\\n        ) = bet_id_by_user(_betting_id, msg.sender);\\n\\n        bool better = false;\\n        Betting storage betting = bettings[_betting_id];\\n\\n        if (bets[bet_id_in_all_bet_list].betting_id == _betting_id && bets[bet_id_in_all_bet_list].amount > 0 ) {\\n            better = true;\\n        }\\n        \\n        if( betting.creater == msg.sender){\\n            better = true;\\n        }\\n\\n        require(\\n            better == true,\\n            \\\"only betters or creater can close betting @ CloseBetting()\\\"\\n        );\\n\\n        require(\\n            betting.status == Status.Open,\\n            \\\"Betting is not open @ CloseBetting()\\\"\\n        );\\n        require(\\n            block.timestamp >= betting.pendingTime,\\n            \\\"Betting pendingTime has not passed yet @ CloseBetting()\\\"\\n        );\\n        require(\\n            block.timestamp >= betting.endTime,\\n            \\\"Betting endTime has not passed yet @ CloseBetting()\\\"\\n        );\\n\\n        uint256 token_decimails;\\n        address oracle_address;\\n\\n        // get token decimals\\n        for (uint256 i = 0; i <= SupportedTokenCount; i++) {\\n            if (\\n                supported_tokens[i].token == betting.token &&\\n                supported_tokens[i].valid == true\\n            ) {\\n                token_decimails = supported_tokens[i].decimails;\\n                oracle_address = supported_tokens[i].oracle_address;\\n            }\\n        }\\n\\n        better_oracle = BettingOracle_ChainLink(oracle_address);\\n\\n        (uint256 _correctPrice, ) = better_oracle\\n            .fetch_closest_price_to_timestamp(\\n                betting.token,\\n                betting.endTime,\\n                token_decimails\\n            );\\n\\n        //to do: use oracle to replace this line\\n        bettings[_betting_id].correctPrice = _correctPrice;\\n\\n        bool hasWinner = false;\\n\\n        uint256 all_winner_bet_amount = 0;\\n\\n        uint256 correct_price_range = (_correctPrice * range_percentage) / 200;\\n\\n        uint256 correct_price_upper_bond = _correctPrice + correct_price_range;\\n\\n        uint256 correct_price_lower_bond = _correctPrice - correct_price_range;\\n\\n        //loop current betting to calculate winners\\n        for (uint256 i = 0; i <= betCount; i++) {\\n            if (bets[i].betting_id == _betting_id) {\\n                if (bets[i].amount != 0) {\\n                    // meet the price range\\n                    if (\\n                        bets[i].predictedPrice >= correct_price_lower_bond &&\\n                        bets[i].predictedPrice <= correct_price_upper_bond\\n                    ) {\\n                        bets[i].winner = true;\\n                        hasWinner = true;\\n\\n                        all_winner_bet_amount += bets[i].amount;\\n                    }\\n                }\\n            }\\n        }\\n\\n        //loop current betting to calculate winning ratio and winning amount\\n        if (hasWinner == true) {\\n            for (uint256 i = 0; i <= betCount; i++) {\\n                if (bets[i].betting_id == _betting_id) {\\n                    if (bets[i].winner == true) {\\n                        //uint256 winnings_ratio = (bets[i].amount * ratio_decimails )/ all_winner_bet_amount;\\n\\n                        //bets[i].winningsRatio = (bets[i].amount * ratio_decimails )/ all_winner_bet_amount;\\n                        //bets[i].winningsAmount = (((bets[i].amount * ratio_decimails )/ all_winner_bet_amount) * (bettings[_betting_id].totalAmount - all_winner_bet_amount)) / ratio_decimails;\\n                        bets[i].winningsRatio = calculate_winningsRatio(\\n                            i,\\n                            all_winner_bet_amount\\n                        );\\n                        bets[i].winningsAmount = calculate_winningsAmount(\\n                            _betting_id,\\n                            i,\\n                            all_winner_bet_amount\\n                        );\\n                    }\\n                }\\n            }\\n        }\\n\\n        //betting is closed, waiting for user to claim winnings\\n        betting.status = Status.Pending;\\n        betting.hadWinner = hasWinner;\\n    }"
}