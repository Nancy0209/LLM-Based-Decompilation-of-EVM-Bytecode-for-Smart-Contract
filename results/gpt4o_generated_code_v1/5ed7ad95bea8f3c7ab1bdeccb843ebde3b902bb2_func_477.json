{
    "contract_address": "0x5ED7ad95beA8f3c7aB1bDeCCb843EbDE3B902BB2",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender));\n        require(address(arg0));\n        require(arg1 > 0);\n        require(address(owner) == (address(msg.sender)));\n        require(address(owner) == (address(arg0)));\n        address var_a = address(msg.sender);\n        var_b = 0x04;\n        require(bytes1(storage_map_b[var_a]));\n        require(!bytes1(storage_map_b[var_a]));\n        require(store_c > store_d, \"SafeMath: multiplication overflow\");\n        require(0 - arg1, \"SafeMath: multiplication overflow\");\n        require((store_e == ((store_e * arg1) / arg1)) | !arg1, \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(arg1, \"SafeMath: multiplication overflow\");\n        require(((store_e * arg1) / arg1) == store_e, \"SafeMath: multiplication overflow\");\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x21;\n        var_g = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_h = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        uint256 var_i = 0x40 + var_i;\n        var_d = 0x1a;\n        var_j = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(0x64, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        uint256 var_h = var_i.length;\n        uint256 var_l = 0;\n        var_m = var_n;\n        var_l = 0;\n        require(0x64, \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x12;\n        require(!(address(store_f) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_f) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(!(address(store_f) == (address(msg.sender))), \"SafeMath: addition overflow\");\n        require(address(store_f) == (address(arg0)), \"SafeMath: addition overflow\");\n        var_a = address(arg0);\n        var_b = 0x03;\n        require(!(!bytes1(storage_map_b[var_a])), \"SafeMath: addition overflow\");\n        require(!(address(store_f) == (address(arg0))), \"SafeMath: addition overflow\");\n        require(!(address(store_f) == (address(arg0))), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x01;\n        require(!(!bytes1(store_f / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_f / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_f / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_f / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!(!bytes1(store_f / 0x01000000000000000000000000000000000000000000)), \"SafeMath: addition overflow\");\n        require(!((store_e * arg1) / 0x64), \"SafeMath: addition overflow\");\n        var_a = address(this);\n        var_b = 0x01;\n        require(!(storage_map_b[var_a] > (((store_e * arg1) / 0x64) + storage_map_b[var_a])), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(!(((store_e * arg1) / 0x64) + storage_map_b[var_a] < storage_map_b[var_a]), \"SafeMath: addition overflow\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        var_h = 0x1b;\n        var_m = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(this);\n        var_b = 0x01;\n        storage_map_b[var_a] = ((store_e * arg1) / 0x64) + storage_map_b[var_a];\n        uint256 var_k = (store_e * arg1) / 0x64;\n        emit Transfer(address(msg.sender), address(this), (store_e * arg1) / 0x64);\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        var_i = 0x40 + var_i;\n        var_k = 0x1e;\n        var_o = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(arg1 > storage_map_b[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!((storage_map_b[var_a] - arg1) > storage_map_b[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(msg.sender);\n        var_b = 0x01;\n        storage_map_b[var_a] = storage_map_b[var_a] - arg1;\n        var_i = 0x40 + var_i;\n        var_p = 0x1e;\n        var_q = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n        require(!(((store_e * arg1) / 0x64) > arg1), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_r = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_s = 0x20;\n        uint256 var_t = var_i.length;\n        uint256 var_u = 0;\n        var_v = var_n;\n        var_u = 0;\n        if (!(arg1 - ((store_e * arg1) / 0x64)) > arg1) {\n            var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            var_c = 0x11;\n            if (storage_map_b[var_a] > _maxTaxSwap) {\n            }\n            if (!store_c > store_h) {\n            }\n            if (!storage_map_b[var_a] > _taxSwapThreshold) {\n            }\n            if (!store_f / 0x0100000000000000000000000000000000000000000000) {\n            }\n            if (store_c > store_j) {\n                if (0 - arg1) {\n                }\n                if (0 - arg1) {\n                }\n                require(!((arg1 - ((store_e * arg1) / 0x64)) > arg1), \"Exceeds the _maxTxAmount.\");\n            }\n            require(store_c > store_j, \"Exceeds the _maxTxAmount.\");\n        }\n        require(!(arg1 > _maxTxAmount), \"Exceeds the _maxTxAmount.\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x20;\n        var_h = 0x19;\n        var_m = 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000;\n        if (address(store_l) == (address(arg0))) {\n            if (address(store_l) == (address(arg0))) {\n            }\n        }\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x12;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x29;\n        var_g = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_h = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x23;\n        var_g = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_h = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_e = 0x20;\n        var_f = 0x25;\n        var_g = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_h = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "pragma solidity ^0.8.0;\n\ncontract DecompiledContract {\n    address public owner;\n    mapping(address => uint256) public balances;\n    uint256 public totalSupply;\n    uint256 public maxTxAmount;\n    uint256 public taxSwapThreshold;\n    uint256 public maxTaxSwap;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function transfer(address recipient, uint256 amount) public {\n        require(recipient != address(0), \"Transfer to zero address\");\n        require(msg.sender != address(0), \"Invalid sender address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(msg.sender == owner, \"Only owner can transfer\");\n        require(recipient == owner, \"Recipient must be the owner\");\n\n        address sender = msg.sender;\n\n        // Check if sender has sufficient balance\n        require(balances[sender] > 0, \"Insufficient balance\");\n        require(balances[sender] >= amount, \"Transfer amount exceeds balance\");\n\n        // Calculate tax and ensure no overflow\n        uint256 tax = (totalSupply * amount) / 100;\n        require(tax <= amount, \"Tax calculation overflow\");\n\n        // Update balances\n        balances[sender] -= amount;\n        balances[recipient] += amount - tax;\n\n        // Emit transfer event\n        emit Transfer(sender, recipient, amount - tax);\n\n        // Additional checks and logic\n        require(amount <= maxTxAmount, \"Exceeds the max transaction amount\");\n        require(balances[sender] >= taxSwapThreshold, \"Balance below tax swap threshold\");\n        require(balances[sender] <= maxTaxSwap, \"Exceeds max tax swap limit\");\n    }\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}