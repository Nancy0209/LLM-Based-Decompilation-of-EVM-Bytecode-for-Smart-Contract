{
    "contract_address": "0xf06ea21cB6894CC70e2EF280026D5Fc5bEE15421",
    "heimdall_input": "function pendingRewards(address arg0) public view returns (uint256) {\n        require(arg0 == (address(arg0)));\n        address var_a = address(arg0);\n        var_b = 0x03;\n        require(!0 < storage_map_k[var_a]);\n        var_a = address(arg0);\n        var_b = 0x04;\n        require(0 < storage_map_k[var_a]);\n        var_a = keccak256(var_a);\n        require(!(storage_map_n[var_a]) & (time > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (storage_map_n[var_a]))));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(arg0);\n        var_b = 0x05;\n        require(0 < storage_map_k[var_a]);\n        var_a = keccak256(var_a);\n        require(!(storage_map_n[var_a]) > (~(storage_map_n[var_a] * time)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(!block.timestamp > (storage_map_n[var_a] + (storage_map_n[var_a] * time)));\n        require(!0 == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        var_a = address(arg0);\n        var_b = 0x03;\n        require(0 < storage_map_k[var_a]);\n        var_a = keccak256(var_a);\n        var_a = address(arg0);\n        var_b = 0x04;\n        require(0 < storage_map_k[var_a]);\n        var_a = keccak256(var_a);\n        var_a = storage_map_n[var_a];\n        var_b = 0x02;\n        require(storage_map_k[var_a]);\n        require(!(storage_map_k[var_a]) & (storage_map_n[var_a] > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / storage_map_k[var_a])));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x11;\n        require(storage_map_k[var_a]);\n        require(storage_map_k[var_a] * (storage_map_n[var_a]) / storage_map_k[var_a] == (storage_map_n[var_a]));\n        require(0x64 > 0);\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x12;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_c = 0x32;\n        uint256 var_d = 0;\n        return 0;\n    }",
    "llm_output": "function pendingRewards(address user) public view returns (uint256) {\n    require(user == address(user), \"Invalid address comparison\");\n\n    // Check conditions on storage_map_k for the user\n    require(storage_map_k[user] == 0, \"Condition failed: storage_map_k[user] != 0\");\n    require(storage_map_k[user] > 0, \"Condition failed: storage_map_k[user] <= 0\");\n\n    // Hash the user address and perform checks on storage_map_n\n    bytes32 userHash = keccak256(abi.encodePacked(user));\n    require(\n        !(storage_map_n[userHash] & (block.timestamp > (type(uint256).max / storage_map_n[userHash]))),\n        \"Condition failed: storage_map_n[userHash] & timestamp check\"\n    );\n\n    // Additional checks on storage_map_k and storage_map_n\n    require(storage_map_k[user] > 0, \"Condition failed: storage_map_k[user] <= 0\");\n    require(\n        !(storage_map_n[userHash] > (~(storage_map_n[userHash] * block.timestamp))),\n        \"Condition failed: storage_map_n[userHash] > negated multiplication\"\n    );\n\n    require(\n        !(block.timestamp > (storage_map_n[userHash] + (storage_map_n[userHash] * block.timestamp))),\n        \"Condition failed: timestamp comparison\"\n    );\n\n    require(\n        !(0 == type(uint256).max),\n        \"Condition failed: 0 == max uint256\"\n    );\n\n    // Final checks and calculations\n    require(storage_map_k[user] > 0, \"Condition failed: storage_map_k[user] <= 0\");\n    require(storage_map_k[user] > 0, \"Condition failed: storage_map_k[user] <= 0\");\n\n    uint256 userRewards = storage_map_n[userHash];\n    require(storage_map_k[user] > 0, \"Condition failed: storage_map_k[user] <= 0\");\n    require(\n        !(storage_map_k[user] & (storage_map_n[userHash] > (type(uint256).max / storage_map_k[user]))),\n        \"Condition failed: storage_map_k[user] & division check\"\n    );\n\n    require(storage_map_k[user] > 0, \"Condition failed: storage_map_k[user] <= 0\");\n    require(\n        storage_map_k[user] * storage_map_n[userHash] / storage_map_k[user] == storage_map_n[userHash],\n        \"Condition failed: multiplication and division mismatch\"\n    );\n\n    require(100 > 0, \"Condition failed: 100 <= 0\");\n\n    // Return 0 as the function result\n    return 0;\n}",
    "ground_truth": "function pendingRewards(address _add) public view returns(uint256 reward)\r\n    {\r\n        uint256 Reward;\r\n        for(uint256 z=0 ; z< depositeToken[_add].length;z++){\r\n        uint256 lockTime = depositetime[_add][z]+(lockabledays[_add][z]*time);\r\n        if(block.timestamp > lockTime ){\r\n        reward = (allocation[lockabledays[_add][z]].mul(depositeToken[_add][z]).div(100)).div(1e18);\r\n        Reward += reward;\r\n        }\r\n    }\r\n    return Reward;\r\n    }"
}