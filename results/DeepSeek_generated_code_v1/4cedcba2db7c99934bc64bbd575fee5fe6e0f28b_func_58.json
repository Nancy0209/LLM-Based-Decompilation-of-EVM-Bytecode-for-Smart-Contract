{
    "contract_address": "0x4CEDcba2dB7c99934bC64bBd575FEE5fE6E0F28b",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_j)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_d[var_a]);\n        store_c = 0x01000000000000000000000000000000000000000000 | (uint248(store_c));\n        require(!storage_map_d[var_a]);\n        require(!bytes1(store_c / 0x010000000000000000000000000000000000000000));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_g).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!(((var_d + ret0.length) - var_d) < 0x20), \"ERC20: approve to the zero address\");\n        require(var_d.length == (address(var_d.length)), \"ERC20: approve to the zero address\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this), \"ERC20: approve to the zero address\");\n        require(address(store_g), \"ERC20: approve to the zero address\");\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_o = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_g);\n        address var_b = keccak256(var_a);\n        storage_map_d[var_a] = storage_map_d[var_a];\n        address var_k = storage_map_d[var_a];\n        emit Approval(address(this), address(store_g), storage_map_d[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_d[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_p = var_d.length;\n        address var_o = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_g).code.length);\n        (bool success, bytes memory ret0) = address(store_g).Unresolved_791ac947(var_l); // call\n        store_c = uint248(store_c);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_j).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_o = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    require(msg.sender == owner);\n    address contractAddress = address(this);\n    require(!swapLocked[contractAddress]);\n    flags = (1 << 96) | flags;\n    require(!swapLocked[contractAddress]);\n    revert('Decompiler artifact');\n    uint256 stackPointer;\n    stackPointer = stackPointer + 0x60;\n    bytes memory data = msg.data[4:68];\n    bytes4 wethSelector = 0xad5c4648;\n    (bool wethSuccess, bytes memory wethData) = router.staticcall(abi.encodeWithSelector(wethSelector));\n    stackPointer = stackPointer + ((wethData.length + 31) & ~uint(31));\n    require(wethData.length >= 32, \"ERC20: approve to the zero address\");\n    require(true, \"ERC20: approve to the zero address\");\n    address decodedAddress = address(uint160(uint256(wethData.length)));\n    require(address(this) != address(0), \"ERC20: approve to the zero address\");\n    require(router != address(0), \"ERC20: approve to the zero address\");\n    bytes4 errorSelector = 0x08c379a0;\n    uint256 errorOffset = 0x20;\n    uint256 errorLength = 0x24;\n    bytes32 errorPart1 = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    bytes32 errorPart2 = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    address storageAddress = address(this);\n    uint256 tempFlag = 2;\n    address routerAddress = router;\n    address hashedAddress = address(uint160(uint256(keccak256(abi.encode(routerAddress)))));\n    bool currentLockStatus = swapLocked[storageAddress];\n    swapLocked[storageAddress] = currentLockStatus;\n    address allowanceValue = address(uint160(uint256(currentLockStatus)));\n    emit Approval(address(this), router, allowanceValue);\n    bytes4 swapSelector = 0x791ac947;\n    address tokenAmount = address(uint160(uint256(currentLockStatus)));\n    uint256 minAmount = 0;\n    uint256 pathOffset = 0xa0;\n    uint256 pathLength = wethData.length;\n    address recipient = address(this);\n    uint256 deadline = block.timestamp;\n    (bool swapSuccess, bytes memory swapData) = router.call(abi.encodeWithSelector(swapSelector, tokenAmount, minAmount, pathOffset, recipient, deadline));\n    flags = uint248(flags);\n    require(address(this).balance == 0);\n    (bool transferSuccess, ) = owner.call{value: address(this).balance}(\"\");\n    errorSelector = 0x08c379a0;\n    errorOffset = 0x20;\n    errorLength = 0x24;\n    errorPart1 = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    errorPart2 = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }"
}