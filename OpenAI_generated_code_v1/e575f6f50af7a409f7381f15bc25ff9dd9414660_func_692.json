{
    "contract_address": "0xE575f6f50AF7A409F7381F15bC25Ff9dD9414660",
    "heimdall_input": "function ShatteredRefineResourceIndicators(uint256 arg0) public view {\n        require(arg0 == arg0);\n        require(address(_owner / 0x01) == (address(msg.sender)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        uint256 var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x20;\n        var_e = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        require(!totalSupply | (0x01 == ((totalSupply * 0x01) / totalSupply)), \"Swap amount cannot be lower than 0.001% total supply.\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x11;\n        require(0x0186a0, \"Swap amount cannot be lower than 0.001% total supply.\");\n        var_f = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_g = 0x12;\n        require(!(arg0 < ((totalSupply * 0x01) / 0x0186a0)), \"Swap amount cannot be lower than 0.001% total supply.\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = ((0x04 + var_c) + 0x20) - (0x04 + var_c);\n        var_d = 0x35;\n        var_e = 0x5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e;\n        var_h = 0x20302e3030312520746f74616c20737570706c792e0000000000000000000000;\n    }",
    "llm_output": "function validateSwapAmount(uint256 swapAmount) public view {\n    // Ensure the input parameter is valid (likely a decompiler artifact)\n    require(swapAmount == swapAmount, \"Invalid input parameter\");\n\n    // Check if the caller is the contract owner\n    require(msg.sender == address(uint160(uint256(_owner) / 0x01)), \"Ownable: caller is not the owner\");\n\n    // Error message: \"Ownable: caller is not the owner\"\n    bytes32 errorSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 errorOffset = 0x20;\n    bytes32 errorMessage = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n\n    // Ensure totalSupply is valid and non-zero\n    require(totalSupply != 0 && (totalSupply * 0x01) / totalSupply == 0x01, \"Swap amount cannot be lower than 0.001% total supply.\");\n\n    // Error message: \"Swap amount cannot be lower than 0.001% total supply.\"\n    bytes32 errorSelector2 = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 errorCode1 = 0x11;\n\n    // Ensure a minimum swap amount threshold\n    require(0x0186a0 > 0, \"Swap amount cannot be lower than 0.001% total supply.\");\n    bytes32 errorSelector3 = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint256 errorCode2 = 0x12;\n\n    // Ensure the swap amount is above the minimum threshold\n    require(swapAmount >= (totalSupply * 0x01) / 0x0186a0, \"Swap amount cannot be lower than 0.001% total supply.\");\n\n    // Error message: \"Swap amount cannot be lower than 0.001% total supply.\"\n    bytes32 errorSelector4 = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 errorOffset2 = 0x35;\n    bytes32 errorMessage2 = 0x5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e;\n    bytes32 errorMessage3 = 0x20302e3030312520746f74616c20737570706c792e0000000000000000000000;\n}",
    "ground_truth": "function ShatteredRefineResourceIndicators(uint256 newAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            newAmount >= (totalSupply() * 1) / 100000,\\r\\n            \\\"Swap amount cannot be lower than 0.001% total supply.\\\"\\r\\n        );\\r\\n        require(\\r\\n            newAmount <= (totalSupply() * 5) / 1000,\\r\\n            \\\"Swap amount cannot be higher than 0.5% total supply.\\\"\\r\\n        );\\r\\n        swapTokensAmount = newAmount;\\r\\n        return true;\\r\\n    }"
}