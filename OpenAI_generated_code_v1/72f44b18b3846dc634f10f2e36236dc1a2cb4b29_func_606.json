{
    "contract_address": "0x72f44B18b3846dc634F10F2e36236dC1A2CB4B29",
    "heimdall_input": "function name() public view returns (string memory) {\n        if (store_a) {\n            if (store_a - ((store_a / 0x02) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_a / 0x02)) / 0x20) * 0x20));\n                uint256 var_d = store_a / 0x02;\n                if (store_a) {\n                    if (store_a - ((store_a / 0x02) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_a / 0x02) {\n                            if (0x1f < (store_a / 0x02)) {\n                                var_a = 0x68;\n                                var_e = storage_map_b[var_a];\n                                if ((0x20 + var_c) + (store_a / 0x02) > (0x20 + (0x20 + var_c))) {\n                                    uint256 var_e = (var_c + 0x20) - var_c;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked((var_c + 0x20) - var_c, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function getName() public view returns (string memory) {\n    if (storedValueA) {\n        if (storedValueA - ((storedValueA / 2) < 32)) {\n            uint256 errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            uint256 errorCode = 0x22;\n            uint256 additionalOffset = 32 + (((31 + (storedValueA / 2)) / 32) * 32);\n            uint256 halfStoredValueA = storedValueA / 2;\n            if (storedValueA) {\n                if (storedValueA - ((storedValueA / 2) < 32)) {\n                    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                    errorCode = 0x22;\n                    if (!halfStoredValueA) {\n                        if (31 < halfStoredValueA) {\n                            errorSelector = 0x68;\n                            uint256 dataOffset = storageMapB[errorSelector];\n                            if ((32 + additionalOffset) + halfStoredValueA > (32 + (32 + additionalOffset))) {\n                                uint256 dataLength = (additionalOffset + 32) - additionalOffset;\n                                uint256 resultLength = additionalOffset.length;\n                                uint256 zeroValue = 0;\n                                return abi.encodePacked((additionalOffset + 32) - additionalOffset, additionalOffset.length);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    revert('Decompiler artifact');\n}",
    "ground_truth": "function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }"
}