{
    "contract_address": "0x19d4B93c60e5D7995226F47446e56bD6ac2DDD75",
    "heimdall_input": "function manualSwap() public {\n        require(address(msg.sender) == (address(store_p)));\n        address var_a = address(this);\n        var_b = 0x01;\n        require(!storage_map_b[var_a]);\n        store_f = 0x01000000000000000000000000000000000000000000 | (uint248(store_f));\n        var_c = 0x02;\n        uint256 var_d = var_d + 0x60;\n        var_e = msg.data[4:68];\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        address var_g = address(this);\n        var_h = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n        (bool success, bytes memory ret0) = address(store_l).WETH(var_i); // staticcall\n        var_d = var_d + (uint248(ret0.length + 0x1f));\n        require(!((var_d + ret0.length) - var_d) < 0x20);\n        require(var_d.length == (address(var_d.length)));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_f = 0x32;\n        uint256 var_j = address(var_d.length);\n        require(address(this));\n        require(address(store_l));\n        var_a = address(this);\n        var_b = 0x02;\n        var_a = address(store_l);\n        address var_b = keccak256(var_a);\n        storage_map_b[var_a] = storage_map_b[var_a];\n        address var_k = storage_map_b[var_a];\n        emit Approval(address(this), address(store_l), storage_map_b[var_a]);\n        var_k = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n        address var_l = storage_map_b[var_a];\n        uint256 var_m = 0;\n        var_n = 0xa0;\n        uint256 var_o = var_d.length;\n        address var_p = address(this);\n        uint256 var_q = block.timestamp;\n        require(address(store_l).code.length);\n        (bool success, bytes memory ret0) = address(store_l).Unresolved_791ac947(var_l); // call\n        store_f = uint248(store_f);\n        require(!address(this).balance);\n        (bool success, bytes memory ret0) = address(store_p).transfer(address(this).balance);\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x22;\n        var_n = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        var_p = 0x7373000000000000000000000000000000000000000000000000000000000000;\n        var_k = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_l = 0x20;\n        var_m = 0x24;\n        var_n = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        var_p = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function manualSwap() public {\n    require(msg.sender == storeOwner);\n    address contractAddress = address(this);\n    uint8 step = 0x01;\n    require(!swapInProgress[contractAddress]);\n    swapState = 0x01000000000000000000000000000000000000000000 | uint248(swapState);\n    step = 0x02;\n    uint256 offset = 0x60;\n    bytes memory inputData = msg.data[4:68];\n    bytes32 errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    uint8 errorLength = 0x32;\n    address thisAddress = address(this);\n    bytes32 callSelector = 0xad5c464800000000000000000000000000000000000000000000000000000000;\n    (bool success, bytes memory returnData) = address(tokenContract).staticcall(abi.encodeWithSelector(callSelector, inputData));\n    offset += (uint248(returnData.length + 0x1f));\n    require(!((offset + returnData.length) - offset) < 0x20);\n    require(returnData.length == uint256(returnData.length));\n    errorSelector = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n    errorLength = 0x32;\n    uint256 returnDataLength = uint256(returnData.length);\n    require(address(this) != address(0));\n    require(address(tokenContract) != address(0));\n    contractAddress = address(this);\n    step = 0x02;\n    contractAddress = address(tokenContract);\n    bytes32 hash = keccak256(abi.encodePacked(contractAddress));\n    swapInProgress[contractAddress] = swapInProgress[contractAddress];\n    address approvalAddress = swapInProgress[contractAddress];\n    emit Approval(address(this), address(tokenContract), swapInProgress[contractAddress]);\n    bytes32 approvalSelector = 0x791ac94700000000000000000000000000000000000000000000000000000000;\n    address approvalTarget = swapInProgress[contractAddress];\n    uint256 zeroValue = 0;\n    uint256 dataOffset = 0xa0;\n    uint256 dataLength = returnData.length;\n    address currentAddress = address(this);\n    uint256 currentTime = block.timestamp;\n    require(address(tokenContract).code.length > 0);\n    (bool callSuccess, bytes memory callReturnData) = address(tokenContract).call(abi.encodeWithSelector(approvalSelector, approvalTarget));\n    swapState = uint248(swapState);\n    require(address(this).balance == 0);\n    (bool transferSuccess, bytes memory transferReturnData) = address(storeOwner).call{value: address(this).balance}(\"\");\n    bytes32 revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    uint256 revertOffset = 0x20;\n    uint256 revertLength = 0x22;\n    bytes32 revertMessage = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n    bytes32 revertSuffix = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    revertSelector = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n    revertOffset = 0x20;\n    revertLength = 0x24;\n    revertMessage = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n    revertSuffix = 0x7265737300000000000000000000000000000000000000000000000000000000;\n}",
    "ground_truth": "function manualSwap() external {\n        require(_msgSender()==_taxWallet);\n        uint256 tokenBalance=balanceOf(address(this));\n        if(tokenBalance>0){\n          swapTokensForEth(tokenBalance);\n        }\n        uint256 ethBalance=address(this).balance;\n        if(ethBalance>0){\n          sendETHToFee(ethBalance);\n        }\n    }"
}