{
    "contract_address": "0x30045aA941FF9Be1d2D3603A75207C07860d4156",
    "heimdall_input": "function symbol() public view returns (string memory) {\n        if (store_p) {\n            if (store_p - ((store_p >> 0x01) < 0x20)) {\n                var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                var_b = 0x22;\n                uint256 var_c = var_c + (0x20 + (((0x1f + (store_p >> 0x01)) / 0x20) * 0x20));\n                bytes32 var_d = store_p >> 0x01;\n                if (store_p) {\n                    if (store_p - ((store_p >> 0x01) < 0x20)) {\n                        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n                        var_b = 0x22;\n                        if (!store_p >> 0x01) {\n                            if (0x1f < (store_p >> 0x01)) {\n                                var_a = 0x04;\n                                var_e = storage_map_f[var_a];\n                                if ((0x20 + var_c) + (store_p >> 0x01) > (0x20 + (0x20 + var_c))) {\n                                    var_e = 0x20;\n                                    uint256 var_f = var_c.length;\n                                    uint256 var_g = 0;\n                                    return abi.encodePacked(0x20, var_c.length);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "llm_output": "function symbol() public view returns (string memory) {\n    if (store_p != 0) {\n        if (store_p - ((store_p >> 1) < 32)) {\n            revert(\"Decompiler artifact\");\n        }\n        uint256 length = (store_p >> 1);\n        if (length > 31) {\n            bytes memory result = new bytes(length);\n            for (uint256 i = 0; i < length; i++) {\n                result[i] = storage_map_f[i];\n            }\n            return string(result);\n        }\n    }\n    return \"\";\n}",
    "ground_truth": "function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }"
}