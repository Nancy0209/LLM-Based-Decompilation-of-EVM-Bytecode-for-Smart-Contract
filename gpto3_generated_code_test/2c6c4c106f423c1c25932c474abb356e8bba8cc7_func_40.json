{
    "contract_address": "0x2C6C4c106F423c1C25932c474Abb356e8BBa8cC7",
    "heimdall_input": "function burn(uint256 arg0) public payable {\n        var_a = 0x3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848;\n        var_b = 0x0b;\n        address var_a = address(msg.sender);\n        address var_b = keccak256(var_a);\n        require(bytes1(storage_map_b[var_a]), \"ERC721Enumerable: consecutive transfers not supported\");\n        var_a = arg0;\n        var_b = 0x02;\n        require(address(storage_map_b[var_a]), \"ERC721Enumerable: consecutive transfers not supported\");\n        require(!(0x01 > 0x01), \"ERC721Enumerable: consecutive transfers not supported\");\n        require(!(address(storage_map_b[var_a])), \"ERC721Enumerable: consecutive transfers not supported\");\n        var_a = address(storage_map_b[var_a]);\n        var_b = 0x03;\n        require(!(storage_map_b[var_a] < 0x01), \"ERC721Enumerable: consecutive transfers not supported\");\n        storage_map_b[var_a] = storage_map_b[var_a] - 0x01;\n        require(!0, \"ERC721Enumerable: consecutive transfers not supported\");\n        var_a = 0;\n        var_b = 0x03;\n        require(!(storage_map_b[var_a] > 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe), \"ERC721Enumerable: consecutive transfers not supported\");\n        storage_map_b[var_a] = storage_map_b[var_a] + 0x01;\n        require(!(0x01 > 0x01), \"ERC721Enumerable: consecutive transfers not supported\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x35;\n        var_f = 0x455243373231456e756d657261626c653a20636f6e7365637574697665207472;\n        var_g = 0x616e7366657273206e6f7420737570706f727465640000000000000000000000;\n        require(address(storage_map_b[var_a]), \"ERC721: address zero is not a valid owner\");\n        require(address(storage_map_b[var_a]) == 0, \"ERC721: address zero is not a valid owner\");\n        require(address(storage_map_b[var_a]), \"ERC721: address zero is not a valid owner\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x4552433732313a2061646472657373207a65726f206973206e6f742061207661;\n        var_g = 0x6c6964206f776e65720000000000000000000000000000000000000000000000;\n        if (0) {\n            require(0, \"ERC721: invalid token ID\");\n        }\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x18;\n        var_f = 0x4552433732313a20696e76616c696420746f6b656e2049440000000000000000;\n        require(!(0x02) & (0x14 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff));\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_h = 0x11;\n    }",
    "llm_output": "function burn(uint256 tokenId) public payable {\n    revert(\"Decompiler artifact\");\n}",
    "ground_truth": "function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }"
}