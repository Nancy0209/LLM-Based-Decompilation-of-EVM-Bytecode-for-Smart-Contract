{
    "contract_address": "0xc921a48b2bBd243aC30422B266edf58F472Eca7F",
    "heimdall_input": "function setRewardsWallet(address arg0) public {\n        require(arg0 == (address(arg0)));\n        require(msg.sender == (address(owner)), \"Ownable: caller is not the owner\");\n        var_a = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_b = 0x20;\n        var_c = 0x20;\n        var_d = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        store_h = (address(arg0)) | (uint96(store_h));\n    }",
    "llm_output": "function setRewardsWallet(address _wallet) public {\n    // Redundant equality check retained to mirror original bytecode behaviour\n    require(_wallet == address(_wallet), \"Invalid address comparison\");\n\n    // Ownership check (mirrors `require(msg.sender == owner)` in the decompiled code)\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n\n    /**\n     * The original bytecode packs an address together with an additional\n     * 96-bit value inside the same storage slot.  \n     * To stay byte-for-byte faithful we:\n     *  1. Extract the lower 96 bits that must be preserved.\n     *  2. Store the new address in the higher 160 bits.\n     */\n    uint256 oldData      = rewardsWalletData;              // full 256-bit packed value\n    uint256 lower96Bits  = uint256(uint96(oldData));       // preserve the auxiliary 96 bits\n    rewardsWalletData    = (uint256(uint160(_wallet)) << 96) | lower96Bits;\n}",
    "ground_truth": "function setRewardsWallet(address _wallet) public onlyOwner {\\r\\n        rewardsWallet = _wallet;\\r\\n    }"
}