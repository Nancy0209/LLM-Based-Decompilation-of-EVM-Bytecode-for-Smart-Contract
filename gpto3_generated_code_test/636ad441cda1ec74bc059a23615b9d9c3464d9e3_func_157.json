{
    "contract_address": "0x636aD441CdA1EC74BC059A23615b9D9c3464d9e3",
    "heimdall_input": "function transfer(address arg0, uint256 arg1) public returns (bool) {\n        require(arg0 == (address(arg0)));\n        require(address(msg.sender), \"Blacklisted address\");\n        require(address(arg0), \"Blacklisted address\");\n        require(arg1 > 0, \"Blacklisted address\");\n        address var_a = address(msg.sender);\n        var_b = 0x06;\n        require(!(!bytes1(storage_map_t[var_a])), \"Blacklisted address\");\n        require(!(bytes1(storage_map_t[var_a])), \"Blacklisted address\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x13;\n        var_f = 0x426c61636b6c6973746564206164647265737300000000000000000000000000;\n        require(!(address(checkWalletLimit) == (address(arg0))), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!(address(checkWalletLimit) == (address(arg0))), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!(address(checkWalletLimit) == (address(msg.sender))), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!(address(checkWalletLimit) == (address(msg.sender))), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(!(bytes1(checkWalletLimit / 0x010000000000000000000000000000000000000000)), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_g = 0x40 + var_g;\n        var_c = 0x14;\n        var_h = 0x496e73756666696369656e742042616c616e6365000000000000000000000000;\n        var_a = address(msg.sender);\n        var_b = 0x07;\n        require(!(arg1 > storage_map_t[var_a]), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        uint256 var_j = var_g.length;\n        require(!(0 > var_g.length), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_k = 0;\n        var_l = var_m;\n        require(!(0x20 > var_g.length), \"Insufficient Balance\");\n        var_k = 0;\n        require(!(storage_map_t[var_a] < arg1), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_n = 0x11;\n        var_a = address(msg.sender);\n        var_b = 0x07;\n        storage_map_t[var_a] = storage_map_t[var_a] - arg1;\n        var_a = address(arg0);\n        require(!(storage_map_t[var_a] > ~(arg1)), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_n = 0x11;\n        require(!((storage_map_t[var_a] + arg1) < storage_map_t[var_a]), \"SafeMath: addition overflow\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_j = 0x1b;\n        var_l = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(arg0);\n        var_b = 0x07;\n        storage_map_t[var_a] = storage_map_t[var_a] + arg1;\n        var_a = this.code[12360:12392];\n        var_a = var_a;\n        uint256 var_i = arg1;\n        emit Transfer(address(msg.sender), address(arg0), arg1);\n        var_i = 0x01;\n        return 0x01;\n        var_a = address(msg.sender);\n        var_b = 0x0b;\n        require(!(!bytes1(storage_map_t[var_a])), \"SafeMath: multiplication overflow\");\n        require(!(!bytes1(storage_map_t[var_a])), \"SafeMath: multiplication overflow\");\n        var_a = address(this);\n        var_b = 0x07;\n        require(storage_map_t[var_a] < minimumTokensBeforeSwapAmount, \"SafeMath: multiplication overflow\");\n        require(!(!storage_map_t[var_a] < minimumTokensBeforeSwapAmount), \"SafeMath: multiplication overflow\");\n        require(!(!storage_map_t[var_a] < minimumTokensBeforeSwapAmount), \"SafeMath: multiplication overflow\");\n        require(!(!storage_map_t[var_a] < minimumTokensBeforeSwapAmount), \"SafeMath: multiplication overflow\");\n        require(!(bytes1(checkWalletLimit / 0x0100000000000000000000000000000000000000000000)), \"SafeMath: multiplication overflow\");\n        checkWalletLimit = 0x010000000000000000000000000000000000000000 | (uint248(checkWalletLimit));\n        require(minimumTokensBeforeSwapAmount, \"SafeMath: multiplication overflow\");\n        require(!(minimumTokensBeforeSwapAmount & (killa > (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / minimumTokensBeforeSwapAmount))), \"SafeMath: multiplication overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_n = 0x11;\n        require(minimumTokensBeforeSwapAmount, \"SafeMath: multiplication overflow\");\n        require(((minimumTokensBeforeSwapAmount * killa) / minimumTokensBeforeSwapAmount) == killa, \"SafeMath: multiplication overflow\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x21;\n        var_f = 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f;\n        var_j = 0x7700000000000000000000000000000000000000000000000000000000000000;\n        var_g = 0x40 + var_g;\n        var_c = 0x1a;\n        var_h = 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000;\n        require(_totalDistributionShares, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        require(_totalDistributionShares, \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_n = 0x12;\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_j = var_g.length;\n        require(!(0 > var_g.length), \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\");\n        uint256 var_o = 0;\n        var_l = var_m;\n        require(!(0x20 > var_g.length), \"SafeMath: division by zero\");\n        var_o = 0;\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_n = 0x12;\n        if (!checkWalletLimit / 0x01000000000000000000000000000000000000000000) {\n        }\n        require(!(arg1 > _maxTxAmount), \"Transfer amount exceeds the maxTxAmount.\");\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x28;\n        var_f = 0x5472616e7366657220616d6f756e74206578636565647320746865206d617854;\n        var_j = 0x78416d6f756e742e000000000000000000000000000000000000000000000000;\n        var_g = 0x40 + var_g;\n        var_c = 0x14;\n        var_h = 0x496e73756666696369656e742042616c616e6365000000000000000000000000;\n        var_a = address(msg.sender);\n        var_b = 0x07;\n        require(!(arg1 > storage_map_t[var_a]), \"SafeMath: addition overflow\");\n        require(!(storage_map_t[var_a] < arg1), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_n = 0x11;\n        var_a = address(msg.sender);\n        var_b = 0x07;\n        storage_map_t[var_a] = storage_map_t[var_a] - arg1;\n        var_a = address(killi);\n        require(!(storage_map_t[var_a] > ~(arg1)), \"SafeMath: addition overflow\");\n        var_a = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        var_n = 0x11;\n        require(!((storage_map_t[var_a] + arg1) < storage_map_t[var_a]), \"SafeMath: addition overflow\");\n        var_i = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_f = 0x20;\n        var_j = 0x1b;\n        var_l = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var_a = address(killi);\n        var_b = 0x07;\n        storage_map_t[var_a] = storage_map_t[var_a] + arg1;\n        var_a = this.code[12360:12392];\n        var_a = var_a;\n        var_i = arg1;\n        emit Transfer(address(msg.sender), address(killi), arg1);\n        var_i = 0x01;\n        return 0x01;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x29;\n        var_f = 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220;\n        var_j = 0x7468616e207a65726f0000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x23;\n        var_f = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        var_j = 0x6573730000000000000000000000000000000000000000000000000000000000;\n        var_c = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var_d = 0x20;\n        var_e = 0x25;\n        var_f = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        var_j = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }",
    "llm_output": "function transfer(address recipient, uint256 amount) public returns (bool) {\n    address sender = msg.sender;\n\n    /* -------------------------------------------------------------------------- */\n    /*                                 Blacklist                                  */\n    /* -------------------------------------------------------------------------- */\n    require(!_isBlacklisted[sender],     \"Blacklisted address\");\n    require(!_isBlacklisted[recipient],  \"Blacklisted address\");\n\n    /* -------------------------------------------------------------------------- */\n    /*                           Basic sanity check                               */\n    /* -------------------------------------------------------------------------- */\n    require(amount > 0, \"Transfer amount must be greater than zero\");\n\n    /* -------------------------------------------------------------------------- */\n    /*                           Tx-limit enforcement                             */\n    /* -------------------------------------------------------------------------- */\n    if (!isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {\n        require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                           Wallet-limit enforcement                         */\n    /* -------------------------------------------------------------------------- */\n    if (checkWalletLimit && !isWalletLimitExempt[recipient] && recipient != uniswapPair) {\n        require(\n            _balances[recipient] + amount <= _walletMax,\n            \"Wallet limit exceeded\"\n        );\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                         Swap & Liquify (if needed)                         */\n    /* -------------------------------------------------------------------------- */\n    uint256 contractTokenBalance  = _balances[address(this)];\n    bool    overMinTokenBalance   = contractTokenBalance >= minimumTokensBeforeSwapAmount;\n\n    if (\n        overMinTokenBalance &&\n        !inSwapAndLiquify  &&\n        recipient == uniswapPair &&\n        swapAndLiquifyEnabled\n    ) {\n        if (swapAndLiquifyByLimitOnly) {\n            contractTokenBalance = minimumTokensBeforeSwapAmount;\n        }\n        swapAndLiquify(contractTokenBalance);\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                Transfer                                    */\n    /* -------------------------------------------------------------------------- */\n    _transfer(sender, recipient, amount);\n    return true;\n}",
    "ground_truth": "function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }"
}