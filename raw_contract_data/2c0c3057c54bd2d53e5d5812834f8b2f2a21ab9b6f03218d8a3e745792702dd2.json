{
    "address": "0xF6FF7F8635a951ecF4D68264b32FB3a4b5f9cf15",
    "tx_hash": "2c0c3057c54bd2d53e5d5812834f8b2f2a21ab9b6f03218d8a3e745792702dd2",
    "block_number": 18004878,
    "timestamp": 1693125707,
    "gas_used_in_creation": 6211639,
    "creation_bytecode": "60c06040526019600b55600c8054600160ff199182168117909255611c20600d55610708600f556011805463ffffffff191663010000011790556015805490911690911790553480156200005257600080fd5b5060405180604001604052806009815260200168105b1c1a1848109bdd60ba1b81525060405180604001604052806008815260200167105b1c1a18509bdd60c21b8152508160039081620000a79190620007e8565b506004620000b68282620007e8565b5050506000620000cb6200045b60201b60201c565b600580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350737a250d5630b4cf539739df2c5dacb4c659f2488d6200013b8160016200045f565b6001600160a01b03811660808190526040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa15801562000186573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ac9190620008b4565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002209190620008b4565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af11580156200026e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002949190620008b4565b6001600160a01b031660a0819052620002af9060016200045f565b60a051620002bf906001620004d9565b600560008082818080806b033b2e3c9fd0803ce80000006103e8620002e682600f620008f5565b620002f291906200090f565b6008556103e862000305826014620008f5565b6200031191906200090f565b600a5561271062000324826005620008f5565b6200033091906200090f565b600955601789905560188890556019879055866200034f898b62000932565b6200035b919062000932565b601655601b869055601c859055601d849055836200037a868862000932565b62000386919062000932565b601a55601e839055601f829055600680547375f5d84b4f18703f909c35d5e340305c02590cfb6001600160a01b03199182168117909255600780549091169091179055620003e8620003e06005546001600160a01b031690565b60016200052d565b620003f53060016200052d565b6200040461dead60016200052d565b620004236200041b6005546001600160a01b031690565b60016200045f565b620004303060016200045f565b6200043f61dead60016200045f565b6200044b3382620005d7565b5050505050505050505062000948565b3390565b6005546001600160a01b03163314620004ae5760405162461bcd60e51b8152602060048201819052602482015260008051602062003f7683398151915260448201526064015b60405180910390fd5b6001600160a01b03919091166000908152602560205260409020805460ff1916911515919091179055565b6001600160a01b038216600081815260266020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6005546001600160a01b03163314620005785760405162461bcd60e51b8152602060048201819052602482015260008051602062003f768339815191526044820152606401620004a5565b6001600160a01b038216600081815260246020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6001600160a01b0382166200062f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620004a5565b6200064b81600254620006d860201b62001b861790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200067e91839062001b86620006d8821b17901c565b6001600160a01b038316600081815260208181526040808320949094559251848152919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b600080620006e7838562000932565b9050838110156200073b5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401620004a5565b90505b92915050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200076f57607f821691505b6020821081036200079057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620006d357600081815260208120601f850160051c81016020861015620007bf5750805b601f850160051c820191505b81811015620007e057828155600101620007cb565b505050505050565b81516001600160401b0381111562000804576200080462000744565b6200081c816200081584546200075a565b8462000796565b602080601f8311600181146200085457600084156200083b5750858301515b600019600386901b1c1916600185901b178555620007e0565b600085815260208120601f198616915b82811015620008855788860151825594840194600190910190840162000864565b5085821015620008a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620008c757600080fd5b81516001600160a01b03811681146200073b57600080fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176200073e576200073e620008df565b6000826200092d57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156200073e576200073e620008df565b60805160a05161359f620009d76000396000818161066e015281816112a101528181611963015281816119fe01528181611a2a01528181611f8d015281816122f001528181612be201528181612c840152612cb001526000818161049101528181611f4f01528181612e1e01528181612ed701528181612f1301528181612f8d0152612fea015261359f6000f3fe6080604052600436106103e85760003560e01c80638a8c523c11610208578063b62496f511610118578063dd62ed3e116100ab578063f2fde38b1161007a578063f2fde38b14610b6e578063f637434214610b8e578063f8b45b0514610ba4578063fe72b27a14610bba578063ff935af614610bda57600080fd5b8063dd62ed3e14610ae7578063e2f4560514610b2d578063e884f26014610b43578063f11a24d314610b5857600080fd5b8063c876d0b9116100e7578063c876d0b914610a81578063c8c8ebe414610a9b578063d257b34f14610ab1578063d85ba06314610ad157600080fd5b8063b62496f5146109f2578063bbc0c74214610a22578063c024666814610a41578063c18bc19514610a6157600080fd5b80639ec22c0e1161019b578063a457c2d71161016a578063a457c2d71461095b578063a4c82a001461097b578063a4d15b6414610991578063a9059cbb146109b2578063aacebbe3146109d257600080fd5b80639ec22c0e146108f95780639fccce321461090f578063a0d82dc514610925578063a26577781461093b57600080fd5b8063924de9b7116101d7578063924de9b71461088e57806395d89b41146108ae5780639a7a23d6146108c35780639c3b4fdc146108e357600080fd5b80638a8c523c146108255780638da5cb5b1461083a5780638ea5220f14610858578063921369131461087857600080fd5b80632e82f1a0116103035780636ddd171311610296578063751039fc11610265578063751039fc1461079a5780637571336a146107af57806375f0a874146107cf5780637bce5a04146107ef5780638095d5641461080557600080fd5b80636ddd17131461070f57806370a082311461072f578063715018a614610765578063730c18881461077a57600080fd5b80634a62bb65116102d25780634a62bb65146106905780634fbee193146106aa578063541a43cf146106e35780636a486a8e146106f957600080fd5b80632e82f1a014610606578063313ce56714610620578063395093511461063c57806349bd5a5e1461065c57600080fd5b80631a8145bb1161037b57806327c8f8351161034a57806327c8f835146105a45780632bf3d42d146105ba5780632c3e486c146105d05780632d5a5d34146105e657600080fd5b80631a8145bb146105385780631f3fed8f1461054e578063203e727e1461056457806323b872dd1461058457600080fd5b806318160ddd116103b757806318160ddd146104cb5780631816467f146104ea578063184c16c51461050c578063199ffc721461052257600080fd5b806306fdde03146103f4578063095ea7b31461041f57806310d5de531461044f5780631694505e1461047f57600080fd5b366103ef57005b600080fd5b34801561040057600080fd5b50610409610bfa565b6040516104169190613061565b60405180910390f35b34801561042b57600080fd5b5061043f61043a3660046130c7565b610c8c565b6040519015158152602001610416565b34801561045b57600080fd5b5061043f61046a3660046130f3565b60256020526000908152604090205460ff1681565b34801561048b57600080fd5b506104b37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610416565b3480156104d757600080fd5b506002545b604051908152602001610416565b3480156104f657600080fd5b5061050a6105053660046130f3565b610ca3565b005b34801561051857600080fd5b506104dc600f5481565b34801561052e57600080fd5b506104dc600b5481565b34801561054457600080fd5b506104dc60215481565b34801561055a57600080fd5b506104dc60205481565b34801561057057600080fd5b5061050a61057f366004613110565b610d33565b34801561059057600080fd5b5061043f61059f366004613129565b610e10565b3480156105b057600080fd5b506104b361dead81565b3480156105c657600080fd5b506104dc601f5481565b3480156105dc57600080fd5b506104dc600d5481565b3480156105f257600080fd5b5061050a61060136600461317a565b610e79565b34801561061257600080fd5b50600c5461043f9060ff1681565b34801561062c57600080fd5b5060405160128152602001610416565b34801561064857600080fd5b5061043f6106573660046130c7565b610ece565b34801561066857600080fd5b506104b37f000000000000000000000000000000000000000000000000000000000000000081565b34801561069c57600080fd5b5060115461043f9060ff1681565b3480156106b657600080fd5b5061043f6106c53660046130f3565b6001600160a01b031660009081526024602052604090205460ff1690565b3480156106ef57600080fd5b506104dc601e5481565b34801561070557600080fd5b506104dc601a5481565b34801561071b57600080fd5b5060115461043f9062010000900460ff1681565b34801561073b57600080fd5b506104dc61074a3660046130f3565b6001600160a01b031660009081526020819052604090205490565b34801561077157600080fd5b5061050a610f04565b34801561078657600080fd5b5061050a6107953660046131af565b610f78565b3480156107a657600080fd5b5061043f6110a1565b3480156107bb57600080fd5b5061050a6107ca36600461317a565b6110de565b3480156107db57600080fd5b506006546104b3906001600160a01b031681565b3480156107fb57600080fd5b506104dc60175481565b34801561081157600080fd5b5061050a6108203660046131e4565b611133565b34801561083157600080fd5b5061050a6111db565b34801561084657600080fd5b506005546001600160a01b03166104b3565b34801561086457600080fd5b506007546104b3906001600160a01b031681565b34801561088457600080fd5b506104dc601b5481565b34801561089a57600080fd5b5061050a6108a9366004613210565b611220565b3480156108ba57600080fd5b50610409611266565b3480156108cf57600080fd5b5061050a6108de36600461317a565b611275565b3480156108ef57600080fd5b506104dc60195481565b34801561090557600080fd5b506104dc60105481565b34801561091b57600080fd5b506104dc60225481565b34801561093157600080fd5b506104dc601d5481565b34801561094757600080fd5b5061050a610956366004613210565b611354565b34801561096757600080fd5b5061043f6109763660046130c7565b61139c565b34801561098757600080fd5b506104dc600e5481565b34801561099d57600080fd5b5060115461043f906301000000900460ff1681565b3480156109be57600080fd5b5061043f6109cd3660046130c7565b6113eb565b3480156109de57600080fd5b5061050a6109ed3660046130f3565b6113f8565b3480156109fe57600080fd5b5061043f610a0d3660046130f3565b60266020526000908152604090205460ff1681565b348015610a2e57600080fd5b5060115461043f90610100900460ff1681565b348015610a4d57600080fd5b5061050a610a5c36600461317a565b61147f565b348015610a6d57600080fd5b5061050a610a7c366004613110565b611508565b348015610a8d57600080fd5b5060155461043f9060ff1681565b348015610aa757600080fd5b506104dc60085481565b348015610abd57600080fd5b5061043f610acc366004613110565b6115d9565b348015610add57600080fd5b506104dc60165481565b348015610af357600080fd5b506104dc610b0236600461322b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610b3957600080fd5b506104dc60095481565b348015610b4f57600080fd5b5061043f611730565b348015610b6457600080fd5b506104dc60185481565b348015610b7a57600080fd5b5061050a610b893660046130f3565b61176d565b348015610b9a57600080fd5b506104dc601c5481565b348015610bb057600080fd5b506104dc600a5481565b348015610bc657600080fd5b5061043f610bd5366004613110565b611858565b348015610be657600080fd5b5061050a610bf5366004613264565b611ad2565b606060038054610c099061329f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c359061329f565b8015610c825780601f10610c5757610100808354040283529160200191610c82565b820191906000526020600020905b815481529060010190602001808311610c6557829003601f168201915b5050505050905090565b6000610c99338484611bec565b5060015b92915050565b6005546001600160a01b03163314610cd65760405162461bcd60e51b8152600401610ccd906132d9565b60405180910390fd5b6007546040516001600160a01b03918216918316907f90b8024c4923d3873ff5b9fcb43d0360d4b9217fa41225d07ba379993552e74390600090a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610d5d5760405162461bcd60e51b8152600401610ccd906132d9565b670de0b6b3a76400006103e8610d7260025490565b610d7d906005613324565b610d87919061333b565b610d91919061333b565b811015610df85760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526e6c6f776572207468616e20302e352560881b6064820152608401610ccd565b610e0a81670de0b6b3a7640000613324565b60085550565b6000610e1d848484611d11565b610e6f8433610e6a8560405180606001604052806028815260200161351d602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190612732565b611bec565b5060019392505050565b6005546001600160a01b03163314610ea35760405162461bcd60e51b8152600401610ccd906132d9565b6001600160a01b03919091166000908152601460205260409020805460ff1916911515919091179055565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610c99918590610e6a9086611b86565b6005546001600160a01b03163314610f2e5760405162461bcd60e51b8152600401610ccd906132d9565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b03163314610fa25760405162461bcd60e51b8152600401610ccd906132d9565b6102588310156110105760405162461bcd60e51b815260206004820152603360248201527f63616e6e6f7420736574206275796261636b206d6f7265206f6674656e207468604482015272616e206576657279203130206d696e7574657360681b6064820152608401610ccd565b6103e88211158015611020575060015b6110855760405162461bcd60e51b815260206004820152603060248201527f4d75737420736574206175746f204c50206275726e2070657263656e7420626560448201526f747765656e20302520616e642031302560801b6064820152608401610ccd565b600d92909255600b55600c805460ff1916911515919091179055565b6005546000906001600160a01b031633146110ce5760405162461bcd60e51b8152600401610ccd906132d9565b506011805460ff19169055600190565b6005546001600160a01b031633146111085760405162461bcd60e51b8152600401610ccd906132d9565b6001600160a01b03919091166000908152602560205260409020805460ff1916911515919091179055565b6005546001600160a01b0316331461115d5760405162461bcd60e51b8152600401610ccd906132d9565b60178390556018829055601981905580611177838561335d565b611181919061335d565b6016819055603210156111d65760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420353025206f72206c6573730000006044820152606401610ccd565b505050565b6005546001600160a01b031633146112055760405162461bcd60e51b8152600401610ccd906132d9565b6011805462ffff0019166201010017905542600e5543602355565b6005546001600160a01b0316331461124a5760405162461bcd60e51b8152600401610ccd906132d9565b60118054911515620100000262ff000019909216919091179055565b606060048054610c099061329f565b6005546001600160a01b0316331461129f5760405162461bcd60e51b8152600401610ccd906132d9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316036113465760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610ccd565b611350828261276c565b5050565b6005546001600160a01b0316331461137e5760405162461bcd60e51b8152600401610ccd906132d9565b6011805491151563010000000263ff00000019909216919091179055565b6000610c993384610e6a85604051806060016040528060258152602001613545602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190612732565b6000610c99338484611d11565b6005546001600160a01b031633146114225760405162461bcd60e51b8152600401610ccd906132d9565b6006546040516001600160a01b03918216918316907fa751787977eeb3902e30e1d19ca00c6ad274a1f622c31a206e32366700b0567490600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146114a95760405162461bcd60e51b8152600401610ccd906132d9565b6001600160a01b038216600081815260246020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b031633146115325760405162461bcd60e51b8152600401610ccd906132d9565b670de0b6b3a76400006103e861154760025490565b61155290600f613324565b61155c919061333b565b611566919061333b565b8110156115c15760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263312e352560e01b6064820152608401610ccd565b6115d381670de0b6b3a7640000613324565b600a5550565b6005546000906001600160a01b031633146116065760405162461bcd60e51b8152600401610ccd906132d9565b620186a061161360025490565b61161e906001613324565b611628919061333b565b8210156116955760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610ccd565b6103e86116a160025490565b6116ac906005613324565b6116b6919061333b565b8211156117225760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610ccd565b50600981905560015b919050565b6005546000906001600160a01b0316331461175d5760405162461bcd60e51b8152600401610ccd906132d9565b506015805460ff19169055600190565b6005546001600160a01b031633146117975760405162461bcd60e51b8152600401610ccd906132d9565b6001600160a01b0381166117fc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ccd565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031633146118855760405162461bcd60e51b8152600401610ccd906132d9565b600f54601054611895919061335d565b42116118e35760405162461bcd60e51b815260206004820181905260248201527f4d757374207761697420666f7220636f6f6c646f776e20746f2066696e6973686044820152606401610ccd565b6103e88211156119485760405162461bcd60e51b815260206004820152602a60248201527f4d6179206e6f74206e756b65206d6f7265207468616e20313025206f6620746f60448201526906b656e7320696e204c560b41b6064820152608401610ccd565b426010556040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009030906370a0823190602401602060405180830381865afa1580156119b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d79190613370565b905060006119f16127106119eb84876127c0565b90612842565b90508015611a2657611a267f000000000000000000000000000000000000000000000000000000000000000061dead83612884565b60007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a8657600080fd5b505af1158015611a9a573d6000803e3d6000fd5b50506040517f8462566617872a3fbab94534675218431ff9e204063ee3f4f43d965626a39abb925060009150a1506001949350505050565b6005546001600160a01b03163314611afc5760405162461bcd60e51b8152600401610ccd906132d9565b601b859055601c849055601d839055601e829055601f81905582611b20858761335d565b611b2a919061335d565b601a81905560631015611b7f5760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420393925206f72206c6573730000006044820152606401610ccd565b5050505050565b600080611b93838561335d565b905083811015611be55760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610ccd565b9392505050565b6001600160a01b038316611c4e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610ccd565b6001600160a01b038216611caf5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610ccd565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316611d375760405162461bcd60e51b8152600401610ccd90613389565b6001600160a01b038216611d5d5760405162461bcd60e51b8152600401610ccd906133ce565b6001600160a01b03821660009081526014602052604090205460ff16158015611d9f57506001600160a01b03831660009081526014602052604090205460ff16155b611e055760405162461bcd60e51b815260206004820152603160248201527f596f752068617665206265656e20626c61636b6c69737465642066726f6d207460448201527072616e73666572696e6720746f6b656e7360781b6064820152608401610ccd565b80600003611e19576111d683836000612884565b60115460ff16156122d6576005546001600160a01b03848116911614801590611e5057506005546001600160a01b03838116911614155b8015611e6457506001600160a01b03821615155b8015611e7b57506001600160a01b03821661dead14155b8015611e915750600554600160a01b900460ff16155b156122d657601154610100900460ff16611f29576001600160a01b03831660009081526024602052604090205460ff1680611ee457506001600160a01b03821660009081526024602052604090205460ff165b611f295760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610ccd565b60155460ff1615612070576005546001600160a01b03838116911614801590611f8457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b8015611fc257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b156120705732600090815260126020526040902054431161205d5760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610ccd565b3260009081526012602052604090204390555b6001600160a01b03831660009081526026602052604090205460ff1680156120b157506001600160a01b03821660009081526025602052604090205460ff16155b15612195576008548111156121265760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610ccd565b600a546001600160a01b03831660009081526020819052604090205461214c908361335d565b11156121905760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610ccd565b6122d6565b6001600160a01b03821660009081526026602052604090205460ff1680156121d657506001600160a01b03831660009081526025602052604090205460ff16155b1561224c576008548111156121905760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610ccd565b6001600160a01b03821660009081526025602052604090205460ff166122d657600a546001600160a01b038316600090815260208190526040902054612292908361335d565b11156122d65760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610ccd565b6023546122e490600061335d565b431115801561232557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b801561234e57506001600160a01b038216737a250d5630b4cf539739df2c5dacb4c659f2488d14155b15612374576001600160a01b0382166000908152601460205260409020805460ff191690555b30600090815260208190526040902054600954811080159081906123a0575060115462010000900460ff165b80156123b65750600554600160a01b900460ff16155b80156123db57506001600160a01b03851660009081526026602052604090205460ff16155b801561240057506001600160a01b03851660009081526024602052604090205460ff16155b801561242557506001600160a01b03841660009081526024602052604090205460ff16155b15612453576005805460ff60a01b1916600160a01b17905561244561298d565b6005805460ff60a01b191690555b600554600160a01b900460ff1615801561248557506001600160a01b03841660009081526026602052604090205460ff165b80156124935750600c5460ff165b80156124ae5750600d54600e546124aa919061335d565b4210155b80156124d357506001600160a01b03851660009081526024602052604090205460ff16155b156124e2576124e0612bc7565b505b6005546001600160a01b03861660009081526024602052604090205460ff600160a01b90920482161591168061253057506001600160a01b03851660009081526024602052604090205460ff165b15612539575060005b6000811561271e576001600160a01b03861660009081526026602052604090205460ff16801561256b57506000601a54115b156126235761258a60646119eb601a54886127c090919063ffffffff16565b9050601a54601c548261259d9190613324565b6125a7919061333b565b602160008282546125b8919061335d565b9091555050601a54601d546125cd9083613324565b6125d7919061333b565b602260008282546125e8919061335d565b9091555050601a54601b546125fd9083613324565b612607919061333b565b60206000828254612618919061335d565b909155506127009050565b6001600160a01b03871660009081526026602052604090205460ff16801561264d57506000601654115b156127005761266c60646119eb601654886127c090919063ffffffff16565b90506016546018548261267f9190613324565b612689919061333b565b6021600082825461269a919061335d565b90915550506016546019546126af9083613324565b6126b9919061333b565b602260008282546126ca919061335d565b90915550506016546017546126df9083613324565b6126e9919061333b565b602060008282546126fa919061335d565b90915550505b801561271157612711873083612884565b61271b8186613411565b94505b612729878787612884565b50505050505050565b600081848411156127565760405162461bcd60e51b8152600401610ccd9190613061565b5060006127638486613411565b95945050505050565b6001600160a01b038216600081815260266020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6000826000036127d257506000610c9d565b60006127de8385613324565b9050826127eb858361333b565b14611be55760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610ccd565b6000611be583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612d57565b6001600160a01b0383166128aa5760405162461bcd60e51b8152600401610ccd90613389565b6001600160a01b0382166128d05760405162461bcd60e51b8152600401610ccd906133ce565b61290d816040518060600160405280602681526020016134f7602691396001600160a01b0386166000908152602081905260409020549190612732565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461293c9082611b86565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101611d04565b30600090815260208190526040812054905060006022546020546021546129b4919061335d565b6129be919061335d565b905060008215806129cd575081155b156129d757505050565b6009546129e5906014613324565b8311156129fd576009546129fa906014613324565b92505b600060028360215486612a109190613324565b612a1a919061333b565b612a24919061333b565b90506000612a328583612d85565b905047612a3e82612dc7565b6000612a4a4783612d85565b90506000612a67876119eb602054856127c090919063ffffffff16565b90506000612a84886119eb602254866127c090919063ffffffff16565b9050600081612a938486613411565b612a9d9190613411565b60006021819055602081905560228190556007546040519293506001600160a01b031691849181818185875af1925050503d8060008114612afa576040519150601f19603f3d011682016040523d82523d6000602084013e612aff565b606091505b50909850508615801590612b135750600081115b15612b6657612b228782612f87565b602154604080518881526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d8060008114612bb3576040519150601f19603f3d011682016040523d82523d6000602084013e612bb8565b606091505b50505050505050505050505050565b42600e556040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152600090819030906370a0823190602401602060405180830381865afa158015612c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c589190613370565b90506000612c776127106119eb600b54856127c090919063ffffffff16565b90508015612cac57612cac7f000000000000000000000000000000000000000000000000000000000000000061dead83612884565b60007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612d0c57600080fd5b505af1158015612d20573d6000803e3d6000fd5b50506040517f454c91ae84fcc766ddda0dcb289f26b3d0176efeacf4061fc219fa6ca8c3048d925060009150a16001935050505090565b60008183612d785760405162461bcd60e51b8152600401610ccd9190613061565b506000612763848661333b565b6000611be583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612732565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110612dfc57612dfc613424565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9e919061343a565b81600181518110612eb157612eb1613424565b60200260200101906001600160a01b031690816001600160a01b031681525050612efc307f000000000000000000000000000000000000000000000000000000000000000084611bec565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac94790612f51908590600090869030904290600401613457565b600060405180830381600087803b158015612f6b57600080fd5b505af1158015612f7f573d6000803e3d6000fd5b505050505050565b612fb2307f000000000000000000000000000000000000000000000000000000000000000084611bec565b60405163f305d71960e01b815230600482015260248101839052600060448201819052606482015261dead60848201524260a48201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f305d71990839060c40160606040518083038185885af115801561303c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611b7f91906134c8565b600060208083528351808285015260005b8181101561308e57858101830151858201604001528201613072565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146130c457600080fd5b50565b600080604083850312156130da57600080fd5b82356130e5816130af565b946020939093013593505050565b60006020828403121561310557600080fd5b8135611be5816130af565b60006020828403121561312257600080fd5b5035919050565b60008060006060848603121561313e57600080fd5b8335613149816130af565b92506020840135613159816130af565b929592945050506040919091013590565b8035801515811461172b57600080fd5b6000806040838503121561318d57600080fd5b8235613198816130af565b91506131a66020840161316a565b90509250929050565b6000806000606084860312156131c457600080fd5b83359250602084013591506131db6040850161316a565b90509250925092565b6000806000606084860312156131f957600080fd5b505081359360208301359350604090920135919050565b60006020828403121561322257600080fd5b611be58261316a565b6000806040838503121561323e57600080fd5b8235613249816130af565b91506020830135613259816130af565b809150509250929050565b600080600080600060a0868803121561327c57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b600181811c908216806132b357607f821691505b6020821081036132d357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c9d57610c9d61330e565b60008261335857634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610c9d57610c9d61330e565b60006020828403121561338257600080fd5b5051919050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b81810381811115610c9d57610c9d61330e565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561344c57600080fd5b8151611be5816130af565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156134a75784516001600160a01b031683529383019391830191600101613482565b50506001600160a01b03969096166060850152505050608001529392505050565b6000806000606084860312156134dd57600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220b0d7a42f4cc0f6a76e45ffdfd2f017537df69f2161d441be52eca817d10fbd5f64736f6c634300081100334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
    "runtime_bytecode": "6080604052600436106103e85760003560e01c80638a8c523c11610208578063b62496f511610118578063dd62ed3e116100ab578063f2fde38b1161007a578063f2fde38b14610b6e578063f637434214610b8e578063f8b45b0514610ba4578063fe72b27a14610bba578063ff935af614610bda57600080fd5b8063dd62ed3e14610ae7578063e2f4560514610b2d578063e884f26014610b43578063f11a24d314610b5857600080fd5b8063c876d0b9116100e7578063c876d0b914610a81578063c8c8ebe414610a9b578063d257b34f14610ab1578063d85ba06314610ad157600080fd5b8063b62496f5146109f2578063bbc0c74214610a22578063c024666814610a41578063c18bc19514610a6157600080fd5b80639ec22c0e1161019b578063a457c2d71161016a578063a457c2d71461095b578063a4c82a001461097b578063a4d15b6414610991578063a9059cbb146109b2578063aacebbe3146109d257600080fd5b80639ec22c0e146108f95780639fccce321461090f578063a0d82dc514610925578063a26577781461093b57600080fd5b8063924de9b7116101d7578063924de9b71461088e57806395d89b41146108ae5780639a7a23d6146108c35780639c3b4fdc146108e357600080fd5b80638a8c523c146108255780638da5cb5b1461083a5780638ea5220f14610858578063921369131461087857600080fd5b80632e82f1a0116103035780636ddd171311610296578063751039fc11610265578063751039fc1461079a5780637571336a146107af57806375f0a874146107cf5780637bce5a04146107ef5780638095d5641461080557600080fd5b80636ddd17131461070f57806370a082311461072f578063715018a614610765578063730c18881461077a57600080fd5b80634a62bb65116102d25780634a62bb65146106905780634fbee193146106aa578063541a43cf146106e35780636a486a8e146106f957600080fd5b80632e82f1a014610606578063313ce56714610620578063395093511461063c57806349bd5a5e1461065c57600080fd5b80631a8145bb1161037b57806327c8f8351161034a57806327c8f835146105a45780632bf3d42d146105ba5780632c3e486c146105d05780632d5a5d34146105e657600080fd5b80631a8145bb146105385780631f3fed8f1461054e578063203e727e1461056457806323b872dd1461058457600080fd5b806318160ddd116103b757806318160ddd146104cb5780631816467f146104ea578063184c16c51461050c578063199ffc721461052257600080fd5b806306fdde03146103f4578063095ea7b31461041f57806310d5de531461044f5780631694505e1461047f57600080fd5b366103ef57005b600080fd5b34801561040057600080fd5b50610409610bfa565b6040516104169190613061565b60405180910390f35b34801561042b57600080fd5b5061043f61043a3660046130c7565b610c8c565b6040519015158152602001610416565b34801561045b57600080fd5b5061043f61046a3660046130f3565b60256020526000908152604090205460ff1681565b34801561048b57600080fd5b506104b37f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b039091168152602001610416565b3480156104d757600080fd5b506002545b604051908152602001610416565b3480156104f657600080fd5b5061050a6105053660046130f3565b610ca3565b005b34801561051857600080fd5b506104dc600f5481565b34801561052e57600080fd5b506104dc600b5481565b34801561054457600080fd5b506104dc60215481565b34801561055a57600080fd5b506104dc60205481565b34801561057057600080fd5b5061050a61057f366004613110565b610d33565b34801561059057600080fd5b5061043f61059f366004613129565b610e10565b3480156105b057600080fd5b506104b361dead81565b3480156105c657600080fd5b506104dc601f5481565b3480156105dc57600080fd5b506104dc600d5481565b3480156105f257600080fd5b5061050a61060136600461317a565b610e79565b34801561061257600080fd5b50600c5461043f9060ff1681565b34801561062c57600080fd5b5060405160128152602001610416565b34801561064857600080fd5b5061043f6106573660046130c7565b610ece565b34801561066857600080fd5b506104b37f000000000000000000000000b50f92ed8dbac74e7d0526c8f52765ff598f8b0681565b34801561069c57600080fd5b5060115461043f9060ff1681565b3480156106b657600080fd5b5061043f6106c53660046130f3565b6001600160a01b031660009081526024602052604090205460ff1690565b3480156106ef57600080fd5b506104dc601e5481565b34801561070557600080fd5b506104dc601a5481565b34801561071b57600080fd5b5060115461043f9062010000900460ff1681565b34801561073b57600080fd5b506104dc61074a3660046130f3565b6001600160a01b031660009081526020819052604090205490565b34801561077157600080fd5b5061050a610f04565b34801561078657600080fd5b5061050a6107953660046131af565b610f78565b3480156107a657600080fd5b5061043f6110a1565b3480156107bb57600080fd5b5061050a6107ca36600461317a565b6110de565b3480156107db57600080fd5b506006546104b3906001600160a01b031681565b3480156107fb57600080fd5b506104dc60175481565b34801561081157600080fd5b5061050a6108203660046131e4565b611133565b34801561083157600080fd5b5061050a6111db565b34801561084657600080fd5b506005546001600160a01b03166104b3565b34801561086457600080fd5b506007546104b3906001600160a01b031681565b34801561088457600080fd5b506104dc601b5481565b34801561089a57600080fd5b5061050a6108a9366004613210565b611220565b3480156108ba57600080fd5b50610409611266565b3480156108cf57600080fd5b5061050a6108de36600461317a565b611275565b3480156108ef57600080fd5b506104dc60195481565b34801561090557600080fd5b506104dc60105481565b34801561091b57600080fd5b506104dc60225481565b34801561093157600080fd5b506104dc601d5481565b34801561094757600080fd5b5061050a610956366004613210565b611354565b34801561096757600080fd5b5061043f6109763660046130c7565b61139c565b34801561098757600080fd5b506104dc600e5481565b34801561099d57600080fd5b5060115461043f906301000000900460ff1681565b3480156109be57600080fd5b5061043f6109cd3660046130c7565b6113eb565b3480156109de57600080fd5b5061050a6109ed3660046130f3565b6113f8565b3480156109fe57600080fd5b5061043f610a0d3660046130f3565b60266020526000908152604090205460ff1681565b348015610a2e57600080fd5b5060115461043f90610100900460ff1681565b348015610a4d57600080fd5b5061050a610a5c36600461317a565b61147f565b348015610a6d57600080fd5b5061050a610a7c366004613110565b611508565b348015610a8d57600080fd5b5060155461043f9060ff1681565b348015610aa757600080fd5b506104dc60085481565b348015610abd57600080fd5b5061043f610acc366004613110565b6115d9565b348015610add57600080fd5b506104dc60165481565b348015610af357600080fd5b506104dc610b0236600461322b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610b3957600080fd5b506104dc60095481565b348015610b4f57600080fd5b5061043f611730565b348015610b6457600080fd5b506104dc60185481565b348015610b7a57600080fd5b5061050a610b893660046130f3565b61176d565b348015610b9a57600080fd5b506104dc601c5481565b348015610bb057600080fd5b506104dc600a5481565b348015610bc657600080fd5b5061043f610bd5366004613110565b611858565b348015610be657600080fd5b5061050a610bf5366004613264565b611ad2565b606060038054610c099061329f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c359061329f565b8015610c825780601f10610c5757610100808354040283529160200191610c82565b820191906000526020600020905b815481529060010190602001808311610c6557829003601f168201915b5050505050905090565b6000610c99338484611bec565b5060015b92915050565b6005546001600160a01b03163314610cd65760405162461bcd60e51b8152600401610ccd906132d9565b60405180910390fd5b6007546040516001600160a01b03918216918316907f90b8024c4923d3873ff5b9fcb43d0360d4b9217fa41225d07ba379993552e74390600090a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610d5d5760405162461bcd60e51b8152600401610ccd906132d9565b670de0b6b3a76400006103e8610d7260025490565b610d7d906005613324565b610d87919061333b565b610d91919061333b565b811015610df85760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526e6c6f776572207468616e20302e352560881b6064820152608401610ccd565b610e0a81670de0b6b3a7640000613324565b60085550565b6000610e1d848484611d11565b610e6f8433610e6a8560405180606001604052806028815260200161351d602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190612732565b611bec565b5060019392505050565b6005546001600160a01b03163314610ea35760405162461bcd60e51b8152600401610ccd906132d9565b6001600160a01b03919091166000908152601460205260409020805460ff1916911515919091179055565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610c99918590610e6a9086611b86565b6005546001600160a01b03163314610f2e5760405162461bcd60e51b8152600401610ccd906132d9565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b03163314610fa25760405162461bcd60e51b8152600401610ccd906132d9565b6102588310156110105760405162461bcd60e51b815260206004820152603360248201527f63616e6e6f7420736574206275796261636b206d6f7265206f6674656e207468604482015272616e206576657279203130206d696e7574657360681b6064820152608401610ccd565b6103e88211158015611020575060015b6110855760405162461bcd60e51b815260206004820152603060248201527f4d75737420736574206175746f204c50206275726e2070657263656e7420626560448201526f747765656e20302520616e642031302560801b6064820152608401610ccd565b600d92909255600b55600c805460ff1916911515919091179055565b6005546000906001600160a01b031633146110ce5760405162461bcd60e51b8152600401610ccd906132d9565b506011805460ff19169055600190565b6005546001600160a01b031633146111085760405162461bcd60e51b8152600401610ccd906132d9565b6001600160a01b03919091166000908152602560205260409020805460ff1916911515919091179055565b6005546001600160a01b0316331461115d5760405162461bcd60e51b8152600401610ccd906132d9565b60178390556018829055601981905580611177838561335d565b611181919061335d565b6016819055603210156111d65760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420353025206f72206c6573730000006044820152606401610ccd565b505050565b6005546001600160a01b031633146112055760405162461bcd60e51b8152600401610ccd906132d9565b6011805462ffff0019166201010017905542600e5543602355565b6005546001600160a01b0316331461124a5760405162461bcd60e51b8152600401610ccd906132d9565b60118054911515620100000262ff000019909216919091179055565b606060048054610c099061329f565b6005546001600160a01b0316331461129f5760405162461bcd60e51b8152600401610ccd906132d9565b7f000000000000000000000000b50f92ed8dbac74e7d0526c8f52765ff598f8b066001600160a01b0316826001600160a01b0316036113465760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610ccd565b611350828261276c565b5050565b6005546001600160a01b0316331461137e5760405162461bcd60e51b8152600401610ccd906132d9565b6011805491151563010000000263ff00000019909216919091179055565b6000610c993384610e6a85604051806060016040528060258152602001613545602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190612732565b6000610c99338484611d11565b6005546001600160a01b031633146114225760405162461bcd60e51b8152600401610ccd906132d9565b6006546040516001600160a01b03918216918316907fa751787977eeb3902e30e1d19ca00c6ad274a1f622c31a206e32366700b0567490600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146114a95760405162461bcd60e51b8152600401610ccd906132d9565b6001600160a01b038216600081815260246020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b031633146115325760405162461bcd60e51b8152600401610ccd906132d9565b670de0b6b3a76400006103e861154760025490565b61155290600f613324565b61155c919061333b565b611566919061333b565b8110156115c15760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263312e352560e01b6064820152608401610ccd565b6115d381670de0b6b3a7640000613324565b600a5550565b6005546000906001600160a01b031633146116065760405162461bcd60e51b8152600401610ccd906132d9565b620186a061161360025490565b61161e906001613324565b611628919061333b565b8210156116955760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610ccd565b6103e86116a160025490565b6116ac906005613324565b6116b6919061333b565b8211156117225760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610ccd565b50600981905560015b919050565b6005546000906001600160a01b0316331461175d5760405162461bcd60e51b8152600401610ccd906132d9565b506015805460ff19169055600190565b6005546001600160a01b031633146117975760405162461bcd60e51b8152600401610ccd906132d9565b6001600160a01b0381166117fc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ccd565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031633146118855760405162461bcd60e51b8152600401610ccd906132d9565b600f54601054611895919061335d565b42116118e35760405162461bcd60e51b815260206004820181905260248201527f4d757374207761697420666f7220636f6f6c646f776e20746f2066696e6973686044820152606401610ccd565b6103e88211156119485760405162461bcd60e51b815260206004820152602a60248201527f4d6179206e6f74206e756b65206d6f7265207468616e20313025206f6620746f60448201526906b656e7320696e204c560b41b6064820152608401610ccd565b426010556040516370a0823160e01b81526001600160a01b037f000000000000000000000000b50f92ed8dbac74e7d0526c8f52765ff598f8b0616600482015260009030906370a0823190602401602060405180830381865afa1580156119b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d79190613370565b905060006119f16127106119eb84876127c0565b90612842565b90508015611a2657611a267f000000000000000000000000b50f92ed8dbac74e7d0526c8f52765ff598f8b0661dead83612884565b60007f000000000000000000000000b50f92ed8dbac74e7d0526c8f52765ff598f8b069050806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a8657600080fd5b505af1158015611a9a573d6000803e3d6000fd5b50506040517f8462566617872a3fbab94534675218431ff9e204063ee3f4f43d965626a39abb925060009150a1506001949350505050565b6005546001600160a01b03163314611afc5760405162461bcd60e51b8152600401610ccd906132d9565b601b859055601c849055601d839055601e829055601f81905582611b20858761335d565b611b2a919061335d565b601a81905560631015611b7f5760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420393925206f72206c6573730000006044820152606401610ccd565b5050505050565b600080611b93838561335d565b905083811015611be55760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610ccd565b9392505050565b6001600160a01b038316611c4e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610ccd565b6001600160a01b038216611caf5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610ccd565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316611d375760405162461bcd60e51b8152600401610ccd90613389565b6001600160a01b038216611d5d5760405162461bcd60e51b8152600401610ccd906133ce565b6001600160a01b03821660009081526014602052604090205460ff16158015611d9f57506001600160a01b03831660009081526014602052604090205460ff16155b611e055760405162461bcd60e51b815260206004820152603160248201527f596f752068617665206265656e20626c61636b6c69737465642066726f6d207460448201527072616e73666572696e6720746f6b656e7360781b6064820152608401610ccd565b80600003611e19576111d683836000612884565b60115460ff16156122d6576005546001600160a01b03848116911614801590611e5057506005546001600160a01b03838116911614155b8015611e6457506001600160a01b03821615155b8015611e7b57506001600160a01b03821661dead14155b8015611e915750600554600160a01b900460ff16155b156122d657601154610100900460ff16611f29576001600160a01b03831660009081526024602052604090205460ff1680611ee457506001600160a01b03821660009081526024602052604090205460ff165b611f295760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610ccd565b60155460ff1615612070576005546001600160a01b03838116911614801590611f8457507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b0316826001600160a01b031614155b8015611fc257507f000000000000000000000000b50f92ed8dbac74e7d0526c8f52765ff598f8b066001600160a01b0316826001600160a01b031614155b156120705732600090815260126020526040902054431161205d5760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610ccd565b3260009081526012602052604090204390555b6001600160a01b03831660009081526026602052604090205460ff1680156120b157506001600160a01b03821660009081526025602052604090205460ff16155b15612195576008548111156121265760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610ccd565b600a546001600160a01b03831660009081526020819052604090205461214c908361335d565b11156121905760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610ccd565b6122d6565b6001600160a01b03821660009081526026602052604090205460ff1680156121d657506001600160a01b03831660009081526025602052604090205460ff16155b1561224c576008548111156121905760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610ccd565b6001600160a01b03821660009081526025602052604090205460ff166122d657600a546001600160a01b038316600090815260208190526040902054612292908361335d565b11156122d65760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610ccd565b6023546122e490600061335d565b431115801561232557507f000000000000000000000000b50f92ed8dbac74e7d0526c8f52765ff598f8b066001600160a01b0316826001600160a01b031614155b801561234e57506001600160a01b038216737a250d5630b4cf539739df2c5dacb4c659f2488d14155b15612374576001600160a01b0382166000908152601460205260409020805460ff191690555b30600090815260208190526040902054600954811080159081906123a0575060115462010000900460ff165b80156123b65750600554600160a01b900460ff16155b80156123db57506001600160a01b03851660009081526026602052604090205460ff16155b801561240057506001600160a01b03851660009081526024602052604090205460ff16155b801561242557506001600160a01b03841660009081526024602052604090205460ff16155b15612453576005805460ff60a01b1916600160a01b17905561244561298d565b6005805460ff60a01b191690555b600554600160a01b900460ff1615801561248557506001600160a01b03841660009081526026602052604090205460ff165b80156124935750600c5460ff165b80156124ae5750600d54600e546124aa919061335d565b4210155b80156124d357506001600160a01b03851660009081526024602052604090205460ff16155b156124e2576124e0612bc7565b505b6005546001600160a01b03861660009081526024602052604090205460ff600160a01b90920482161591168061253057506001600160a01b03851660009081526024602052604090205460ff165b15612539575060005b6000811561271e576001600160a01b03861660009081526026602052604090205460ff16801561256b57506000601a54115b156126235761258a60646119eb601a54886127c090919063ffffffff16565b9050601a54601c548261259d9190613324565b6125a7919061333b565b602160008282546125b8919061335d565b9091555050601a54601d546125cd9083613324565b6125d7919061333b565b602260008282546125e8919061335d565b9091555050601a54601b546125fd9083613324565b612607919061333b565b60206000828254612618919061335d565b909155506127009050565b6001600160a01b03871660009081526026602052604090205460ff16801561264d57506000601654115b156127005761266c60646119eb601654886127c090919063ffffffff16565b90506016546018548261267f9190613324565b612689919061333b565b6021600082825461269a919061335d565b90915550506016546019546126af9083613324565b6126b9919061333b565b602260008282546126ca919061335d565b90915550506016546017546126df9083613324565b6126e9919061333b565b602060008282546126fa919061335d565b90915550505b801561271157612711873083612884565b61271b8186613411565b94505b612729878787612884565b50505050505050565b600081848411156127565760405162461bcd60e51b8152600401610ccd9190613061565b5060006127638486613411565b95945050505050565b6001600160a01b038216600081815260266020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6000826000036127d257506000610c9d565b60006127de8385613324565b9050826127eb858361333b565b14611be55760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610ccd565b6000611be583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612d57565b6001600160a01b0383166128aa5760405162461bcd60e51b8152600401610ccd90613389565b6001600160a01b0382166128d05760405162461bcd60e51b8152600401610ccd906133ce565b61290d816040518060600160405280602681526020016134f7602691396001600160a01b0386166000908152602081905260409020549190612732565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461293c9082611b86565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101611d04565b30600090815260208190526040812054905060006022546020546021546129b4919061335d565b6129be919061335d565b905060008215806129cd575081155b156129d757505050565b6009546129e5906014613324565b8311156129fd576009546129fa906014613324565b92505b600060028360215486612a109190613324565b612a1a919061333b565b612a24919061333b565b90506000612a328583612d85565b905047612a3e82612dc7565b6000612a4a4783612d85565b90506000612a67876119eb602054856127c090919063ffffffff16565b90506000612a84886119eb602254866127c090919063ffffffff16565b9050600081612a938486613411565b612a9d9190613411565b60006021819055602081905560228190556007546040519293506001600160a01b031691849181818185875af1925050503d8060008114612afa576040519150601f19603f3d011682016040523d82523d6000602084013e612aff565b606091505b50909850508615801590612b135750600081115b15612b6657612b228782612f87565b602154604080518881526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d8060008114612bb3576040519150601f19603f3d011682016040523d82523d6000602084013e612bb8565b606091505b50505050505050505050505050565b42600e556040516370a0823160e01b81526001600160a01b037f000000000000000000000000b50f92ed8dbac74e7d0526c8f52765ff598f8b06166004820152600090819030906370a0823190602401602060405180830381865afa158015612c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c589190613370565b90506000612c776127106119eb600b54856127c090919063ffffffff16565b90508015612cac57612cac7f000000000000000000000000b50f92ed8dbac74e7d0526c8f52765ff598f8b0661dead83612884565b60007f000000000000000000000000b50f92ed8dbac74e7d0526c8f52765ff598f8b069050806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612d0c57600080fd5b505af1158015612d20573d6000803e3d6000fd5b50506040517f454c91ae84fcc766ddda0dcb289f26b3d0176efeacf4061fc219fa6ca8c3048d925060009150a16001935050505090565b60008183612d785760405162461bcd60e51b8152600401610ccd9190613061565b506000612763848661333b565b6000611be583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612732565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110612dfc57612dfc613424565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9e919061343a565b81600181518110612eb157612eb1613424565b60200260200101906001600160a01b031690816001600160a01b031681525050612efc307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84611bec565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac94790612f51908590600090869030904290600401613457565b600060405180830381600087803b158015612f6b57600080fd5b505af1158015612f7f573d6000803e3d6000fd5b505050505050565b612fb2307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84611bec565b60405163f305d71960e01b815230600482015260248101839052600060448201819052606482015261dead60848201524260a48201527f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b03169063f305d71990839060c40160606040518083038185885af115801561303c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611b7f91906134c8565b600060208083528351808285015260005b8181101561308e57858101830151858201604001528201613072565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146130c457600080fd5b50565b600080604083850312156130da57600080fd5b82356130e5816130af565b946020939093013593505050565b60006020828403121561310557600080fd5b8135611be5816130af565b60006020828403121561312257600080fd5b5035919050565b60008060006060848603121561313e57600080fd5b8335613149816130af565b92506020840135613159816130af565b929592945050506040919091013590565b8035801515811461172b57600080fd5b6000806040838503121561318d57600080fd5b8235613198816130af565b91506131a66020840161316a565b90509250929050565b6000806000606084860312156131c457600080fd5b83359250602084013591506131db6040850161316a565b90509250925092565b6000806000606084860312156131f957600080fd5b505081359360208301359350604090920135919050565b60006020828403121561322257600080fd5b611be58261316a565b6000806040838503121561323e57600080fd5b8235613249816130af565b91506020830135613259816130af565b809150509250929050565b600080600080600060a0868803121561327c57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b600181811c908216806132b357607f821691505b6020821081036132d357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c9d57610c9d61330e565b60008261335857634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610c9d57610c9d61330e565b60006020828403121561338257600080fd5b5051919050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b81810381811115610c9d57610c9d61330e565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561344c57600080fd5b8151611be5816130af565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156134a75784516001600160a01b031683529383019391830191600101613482565b50506001600160a01b03969096166060850152505050608001529392505050565b6000806000606084860312156134dd57600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220b0d7a42f4cc0f6a76e45ffdfd2f017537df69f2161d441be52eca817d10fbd5f64736f6c63430008110033",
    "contract_name": "AlphaBot",
    "compiler_version": "v0.8.17+commit.8df45f5f",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AutoNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"BoughtEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ManualNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"devWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"marketingWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"blacklistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlySellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlySellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEarlySellTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastManualLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"manualBurnLiquidityPairTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForLPBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frequencyInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_Enabled\",\"type\":\"bool\"}],\"name\":\"setAutoLPBurnSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setEarlySellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlySellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlySellMarketingFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"alphabot.sol\": {\r\n      \"content\": \"\\r\\n// https://t.me/AlpaBotEth\\r\\n\\r\\n// SPDX-License-Identifier: Unlicensed                                                                         \\r\\n \\r\\npragma solidity 0.8.17;\\r\\n \\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n \\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n \\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n \\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n \\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n \\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n \\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n \\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n \\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n \\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n \\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n \\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n \\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n \\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n \\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n \\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n \\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n \\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n \\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n \\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n \\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n \\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n \\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n \\r\\n \\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    using SafeMath for uint256;\\r\\n \\r\\n    mapping(address => uint256) private _balances;\\r\\n \\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n \\r\\n    uint256 private _totalSupply;\\r\\n \\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n \\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n \\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n \\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n \\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n \\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n \\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n \\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n \\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n \\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n \\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n \\r\\n        return c;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n \\r\\n        return c;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n \\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n \\r\\n        return c;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n \\r\\n        return c;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n \\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n \\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n \\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n \\r\\n \\r\\n \\r\\nlibrary SafeMathInt {\\r\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\r\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\r\\n \\r\\n    /**\\r\\n     * @dev Multiplies two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a * b;\\r\\n \\r\\n        // Detect overflow when multiplying MIN_INT256 with -1\\r\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\r\\n        require((b == 0) || (c / b == a));\\r\\n        return c;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Division of two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Prevent overflow when dividing MIN_INT256 by -1\\r\\n        require(b != -1 || a != MIN_INT256);\\r\\n \\r\\n        // Solidity already throws when dividing by 0.\\r\\n        return a / b;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Subtracts two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\r\\n        return c;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Adds two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\r\\n        return c;\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev Converts to absolute value, and fails on overflow.\\r\\n     */\\r\\n    function abs(int256 a) internal pure returns (int256) {\\r\\n        require(a != MIN_INT256);\\r\\n        return a < 0 ? -a : a;\\r\\n    }\\r\\n \\r\\n \\r\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\r\\n        require(a >= 0);\\r\\n        return uint256(a);\\r\\n    }\\r\\n}\\r\\n \\r\\nlibrary SafeMathUint {\\r\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\r\\n    int256 b = int256(a);\\r\\n    require(b >= 0);\\r\\n    return b;\\r\\n  }\\r\\n}\\r\\n \\r\\n \\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n \\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n \\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n \\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n \\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n \\r\\ncontract AlphaBot is ERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n \\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n    address public immutable uniswapV2Pair;\\r\\n    address public constant deadAddress = address(0x000000000000000000000000000000000000dEaD);\\r\\n \\r\\n    bool private swapping;\\r\\n \\r\\n    address public marketingWallet;\\r\\n    address public devWallet;\\r\\n \\r\\n    uint256 public maxTransactionAmount;\\r\\n    uint256 public swapTokensAtAmount;\\r\\n    uint256 public maxWallet;\\r\\n \\r\\n    uint256 public percentForLPBurn = 25; // 25 = .25%\\r\\n    bool public lpBurnEnabled = true;\\r\\n    uint256 public lpBurnFrequency = 7200 seconds;\\r\\n    uint256 public lastLpBurnTime;\\r\\n \\r\\n    uint256 public manualBurnFrequency = 30 minutes;\\r\\n    uint256 public lastManualLpBurnTime;\\r\\n \\r\\n    bool public limitsInEffect = true;\\r\\n    bool public tradingActive = false;\\r\\n    bool public swapEnabled = false;\\r\\n    bool public enableEarlySellTax = true;\\r\\n \\r\\n     // Anti-bot and anti-whale mappings and variables\\r\\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\\r\\n \\r\\n    // Seller Map\\r\\n    mapping (address => uint256) private _holderFirstBuyTimestamp;\\r\\n \\r\\n    // Blacklist Map\\r\\n    mapping (address => bool) private _blacklist;\\r\\n    bool public transferDelayEnabled = true;\\r\\n \\r\\n    uint256 public buyTotalFees;\\r\\n    uint256 public buyMarketingFee;\\r\\n    uint256 public buyLiquidityFee;\\r\\n    uint256 public buyDevFee;\\r\\n \\r\\n    uint256 public sellTotalFees;\\r\\n    uint256 public sellMarketingFee;\\r\\n    uint256 public sellLiquidityFee;\\r\\n    uint256 public sellDevFee;\\r\\n \\r\\n    uint256 public earlySellLiquidityFee;\\r\\n    uint256 public earlySellMarketingFee;\\r\\n \\r\\n    uint256 public tokensForMarketing;\\r\\n    uint256 public tokensForLiquidity;\\r\\n    uint256 public tokensForDev;\\r\\n \\r\\n    // block number of opened trading\\r\\n    uint256 launchedAt;\\r\\n \\r\\n    /******************/\\r\\n \\r\\n    // exclude from fees and max transaction amount\\r\\n    mapping (address => bool) private _isExcludedFromFees;\\r\\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\\r\\n \\r\\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\r\\n    // could be subject to a maximum transfer amount\\r\\n    mapping (address => bool) public automatedMarketMakerPairs;\\r\\n \\r\\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\\r\\n \\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n \\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n \\r\\n    event marketingWalletUpdated(address indexed newWallet, address indexed oldWallet);\\r\\n \\r\\n    event devWalletUpdated(address indexed newWallet, address indexed oldWallet);\\r\\n \\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiquidity\\r\\n    );\\r\\n \\r\\n    event AutoNukeLP();\\r\\n \\r\\n    event ManualNukeLP();\\r\\n \\r\\nconstructor() ERC20(\\\"Alpha Bot\\\", \\\"AlphaBot\\\") {\\r\\n \\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n \\r\\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n \\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\r\\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\\r\\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\\r\\n \\r\\n        uint256 _buyMarketingFee = 5;\\r\\n        uint256 _buyLiquidityFee = 0;\\r\\n        uint256 _buyDevFee = 0;\\r\\n \\r\\n        uint256 _sellMarketingFee = 5;\\r\\n        uint256 _sellLiquidityFee = 0;\\r\\n        uint256 _sellDevFee = 0;\\r\\n \\r\\n        uint256 _earlySellLiquidityFee = 0;\\r\\n        uint256 _earlySellMarketingFee = 0;\\r\\n \\r\\n        uint256 totalSupply = 1 * 1e9 * 1e18;\\r\\n \\r\\n        maxTransactionAmount = totalSupply * 15 / 1000; // 1% maxtxn\\r\\n        maxWallet = totalSupply * 20 / 1000; // 2% maxw\\r\\n        swapTokensAtAmount = totalSupply * 5 / 10000; // 0.05% swapw \\r\\n \\r\\n        buyMarketingFee = _buyMarketingFee;\\r\\n        buyLiquidityFee = _buyLiquidityFee;\\r\\n        buyDevFee = _buyDevFee;\\r\\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\\r\\n \\r\\n        sellMarketingFee = _sellMarketingFee;\\r\\n        sellLiquidityFee = _sellLiquidityFee;\\r\\n        sellDevFee = _sellDevFee;\\r\\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\\r\\n \\r\\n        earlySellLiquidityFee = _earlySellLiquidityFee;\\r\\n        earlySellMarketingFee = _earlySellMarketingFee;\\r\\n \\r\\n        marketingWallet = address(0x75F5d84B4f18703F909c35D5E340305C02590cfb); // set as marketing wallet\\r\\n        devWallet = address(0x75F5d84B4f18703F909c35D5E340305C02590cfb); // set as dev wallet\\r\\n \\r\\n        // exclude from paying fees or having max transaction amount\\r\\n        excludeFromFees(owner(), true);\\r\\n        excludeFromFees(address(this), true);\\r\\n        excludeFromFees(address(0xdead), true);\\r\\n \\r\\n        excludeFromMaxTransaction(owner(), true);\\r\\n        excludeFromMaxTransaction(address(this), true);\\r\\n        excludeFromMaxTransaction(address(0xdead), true);\\r\\n \\r\\n        /*\\r\\n            _mint is an internal function in ERC20.sol that is only called here,\\r\\n            and CANNOT be called ever again\\r\\n        */\\r\\n        _mint(msg.sender, totalSupply);\\r\\n    }\\r\\n \\r\\n    receive() external payable {\\r\\n \\r\\n  \\t}\\r\\n \\r\\n    // once enabled, can never be turned off\\r\\n    function enableTrading() external onlyOwner {\\r\\n        tradingActive = true;\\r\\n        swapEnabled = true;\\r\\n        lastLpBurnTime = block.timestamp;\\r\\n        launchedAt = block.number;\\r\\n    }\\r\\n \\r\\n    // remove limits after token is stable\\r\\n    function removeLimits() external onlyOwner returns (bool){\\r\\n        limitsInEffect = false;\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    // disable Transfer delay - cannot be reenabled\\r\\n    function disableTransferDelay() external onlyOwner returns (bool){\\r\\n        transferDelayEnabled = false;\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    function setEarlySellTax(bool onoff) external onlyOwner  {\\r\\n        enableEarlySellTax = onoff;\\r\\n    }\\r\\n \\r\\n     // change the minimum amount of tokens to sell from fees\\r\\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){\\r\\n  \\t    require(newAmount >= totalSupply() * 1 / 100000, \\\"Swap amount cannot be lower than 0.001% total supply.\\\");\\r\\n  \\t    require(newAmount <= totalSupply() * 5 / 1000, \\\"Swap amount cannot be higher than 0.5% total supply.\\\");\\r\\n  \\t    swapTokensAtAmount = newAmount;\\r\\n  \\t    return true;\\r\\n  \\t}\\r\\n \\r\\n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\\r\\n        require(newNum >= (totalSupply() * 5 / 1000)/1e18, \\\"Cannot set maxTransactionAmount lower than 0.5%\\\");\\r\\n        maxTransactionAmount = newNum * (10**18);\\r\\n    }\\r\\n \\r\\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\\r\\n        require(newNum >= (totalSupply() * 15 / 1000)/1e18, \\\"Cannot set maxWallet lower than 1.5%\\\");\\r\\n        maxWallet = newNum * (10**18);\\r\\n    }\\r\\n \\r\\n    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\\r\\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\\r\\n    }\\r\\n \\r\\n    // only use to disable contract sales if absolutely necessary (emergency use only)\\r\\n    function updateSwapEnabled(bool enabled) external onlyOwner(){\\r\\n        swapEnabled = enabled;\\r\\n    }\\r\\n \\r\\n    function updateBuyFees(uint256 _marketingFee, uint256 _liquidityFee, uint256 _devFee) external onlyOwner {\\r\\n        buyMarketingFee = _marketingFee;\\r\\n        buyLiquidityFee = _liquidityFee;\\r\\n        buyDevFee = _devFee;\\r\\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\\r\\n        require(buyTotalFees <= 50, \\\"Must keep fees at 50% or less\\\");\\r\\n    }\\r\\n \\r\\n    function updateSellFees(uint256 _marketingFee, uint256 _liquidityFee, uint256 _devFee, uint256 _earlySellLiquidityFee, uint256 _earlySellMarketingFee) external onlyOwner {\\r\\n        sellMarketingFee = _marketingFee;\\r\\n        sellLiquidityFee = _liquidityFee;\\r\\n        sellDevFee = _devFee;\\r\\n        earlySellLiquidityFee = _earlySellLiquidityFee;\\r\\n        earlySellMarketingFee = _earlySellMarketingFee;\\r\\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\\r\\n        require(sellTotalFees <= 99, \\\"Must keep fees at 99% or less\\\");\\r\\n    }\\r\\n \\r\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n \\r\\n    function blacklistAccount (address account, bool isBlacklisted) public onlyOwner {\\r\\n        _blacklist[account] = isBlacklisted;\\r\\n    }\\r\\n \\r\\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\\r\\n        require(pair != uniswapV2Pair, \\\"The pair cannot be removed from automatedMarketMakerPairs\\\");\\r\\n \\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n \\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n \\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n \\r\\n    function updateMarketingWallet(address newMarketingWallet) external onlyOwner {\\r\\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\\r\\n        marketingWallet = newMarketingWallet;\\r\\n    }\\r\\n \\r\\n    function updateDevWallet(address newWallet) external onlyOwner {\\r\\n        emit devWalletUpdated(newWallet, devWallet);\\r\\n        devWallet = newWallet;\\r\\n    }\\r\\n \\r\\n \\r\\n    function isExcludedFromFees(address account) public view returns(bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n \\r\\n    event BoughtEarly(address indexed sniper);\\r\\n \\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(!_blacklist[to] && !_blacklist[from], \\\"You have been blacklisted from transfering tokens\\\");\\r\\n         if(amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n \\r\\n        if(limitsInEffect){\\r\\n            if (\\r\\n                from != owner() &&\\r\\n                to != owner() &&\\r\\n                to != address(0) &&\\r\\n                to != address(0xdead) &&\\r\\n                !swapping\\r\\n            ){\\r\\n                if(!tradingActive){\\r\\n                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \\\"Trading is not active.\\\");\\r\\n                }\\r\\n \\r\\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.  \\r\\n                if (transferDelayEnabled){\\r\\n                    if (to != owner() && to != address(uniswapV2Router) && to != address(uniswapV2Pair)){\\r\\n                        require(_holderLastTransferTimestamp[tx.origin] < block.number, \\\"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\\\");\\r\\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\\r\\n                    }\\r\\n                }\\r\\n \\r\\n                //when buy\\r\\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\\r\\n                        require(amount <= maxTransactionAmount, \\\"Buy transfer amount exceeds the maxTransactionAmount.\\\");\\r\\n                        require(amount + balanceOf(to) <= maxWallet, \\\"Max wallet exceeded\\\");\\r\\n                }\\r\\n \\r\\n                //when sell\\r\\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\\r\\n                        require(amount <= maxTransactionAmount, \\\"Sell transfer amount exceeds the maxTransactionAmount.\\\");\\r\\n                }\\r\\n                else if(!_isExcludedMaxTransactionAmount[to]){\\r\\n                    require(amount + balanceOf(to) <= maxWallet, \\\"Max wallet exceeded\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n \\r\\n        // anti bot logic\\r\\n        if (block.number <= (launchedAt + 0) && \\r\\n                to != uniswapV2Pair && \\r\\n                to != address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)\\r\\n            ) { \\r\\n            _blacklist[to] = false;\\r\\n        }\\r\\n \\r\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\r\\n \\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\r\\n \\r\\n        if( \\r\\n            canSwap &&\\r\\n            swapEnabled &&\\r\\n            !swapping &&\\r\\n            !automatedMarketMakerPairs[from] &&\\r\\n            !_isExcludedFromFees[from] &&\\r\\n            !_isExcludedFromFees[to]\\r\\n        ) {\\r\\n            swapping = true;\\r\\n \\r\\n            swapBack();\\r\\n \\r\\n            swapping = false;\\r\\n        }\\r\\n \\r\\n        if(!swapping && automatedMarketMakerPairs[to] && lpBurnEnabled && block.timestamp >= lastLpBurnTime + lpBurnFrequency && !_isExcludedFromFees[from]){\\r\\n            autoBurnLiquidityPairTokens();\\r\\n        }\\r\\n \\r\\n        bool takeFee = !swapping;\\r\\n \\r\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n \\r\\n        uint256 fees = 0;\\r\\n        // only take fees on buys/sells, do not take on wallet transfers\\r\\n        if(takeFee){\\r\\n            // on sell\\r\\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0){\\r\\n                fees = amount.mul(sellTotalFees).div(100);\\r\\n                tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees;\\r\\n                tokensForDev += fees * sellDevFee / sellTotalFees;\\r\\n                tokensForMarketing += fees * sellMarketingFee / sellTotalFees;\\r\\n            }\\r\\n            // on buy\\r\\n            else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) {\\r\\n        \\t    fees = amount.mul(buyTotalFees).div(100);\\r\\n        \\t    tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\\r\\n                tokensForDev += fees * buyDevFee / buyTotalFees;\\r\\n                tokensForMarketing += fees * buyMarketingFee / buyTotalFees;\\r\\n            }\\r\\n \\r\\n            if(fees > 0){    \\r\\n                super._transfer(from, address(this), fees);\\r\\n            }\\r\\n \\r\\n        \\tamount -= fees;\\r\\n        }\\r\\n \\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n \\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n \\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n \\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n \\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n \\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n \\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            deadAddress,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n \\r\\n    function swapBack() private {\\r\\n        uint256 contractBalance = balanceOf(address(this));\\r\\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing + tokensForDev;\\r\\n        bool success;\\r\\n \\r\\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\\r\\n \\r\\n        if(contractBalance > swapTokensAtAmount * 20){\\r\\n          contractBalance = swapTokensAtAmount * 20;\\r\\n        }\\r\\n \\r\\n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\\r\\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\\r\\n \\r\\n        uint256 initialETHBalance = address(this).balance;\\r\\n \\r\\n        swapTokensForEth(amountToSwapForETH); \\r\\n \\r\\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\\r\\n \\r\\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(totalTokensToSwap);\\r\\n        uint256 ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap);\\r\\n \\r\\n \\r\\n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForDev;\\r\\n \\r\\n \\r\\n        tokensForLiquidity = 0;\\r\\n        tokensForMarketing = 0;\\r\\n        tokensForDev = 0;\\r\\n \\r\\n        (success,) = address(devWallet).call{value: ethForDev}(\\\"\\\");\\r\\n \\r\\n        if(liquidityTokens > 0 && ethForLiquidity > 0){\\r\\n            addLiquidity(liquidityTokens, ethForLiquidity);\\r\\n            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\\r\\n        }\\r\\n \\r\\n \\r\\n        (success,) = address(marketingWallet).call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n \\r\\n    function setAutoLPBurnSettings(uint256 _frequencyInSeconds, uint256 _percent, bool _Enabled) external onlyOwner {\\r\\n        require(_frequencyInSeconds >= 600, \\\"cannot set buyback more often than every 10 minutes\\\");\\r\\n        require(_percent <= 1000 && _percent >= 0, \\\"Must set auto LP burn percent between 0% and 10%\\\");\\r\\n        lpBurnFrequency = _frequencyInSeconds;\\r\\n        percentForLPBurn = _percent;\\r\\n        lpBurnEnabled = _Enabled;\\r\\n    }\\r\\n \\r\\n    function autoBurnLiquidityPairTokens() internal returns (bool){\\r\\n \\r\\n        lastLpBurnTime = block.timestamp;\\r\\n \\r\\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\\r\\n \\r\\n        uint256 amountToBurn = liquidityPairBalance.mul(percentForLPBurn).div(10000);\\r\\n \\r\\n        if (amountToBurn > 0){\\r\\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\\r\\n        }\\r\\n \\r\\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\\r\\n        pair.sync();\\r\\n        emit AutoNukeLP();\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    function manualBurnLiquidityPairTokens(uint256 percent) external onlyOwner returns (bool){\\r\\n        require(block.timestamp > lastManualLpBurnTime + manualBurnFrequency , \\\"Must wait for cooldown to finish\\\");\\r\\n        require(percent <= 1000, \\\"May not nuke more than 10% of tokens in LP\\\");\\r\\n        lastManualLpBurnTime = block.timestamp;\\r\\n \\r\\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\\r\\n \\r\\n        uint256 amountToBurn = liquidityPairBalance.mul(percent).div(10000);\\r\\n \\r\\n        if (amountToBurn > 0){\\r\\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\\r\\n        }\\r\\n \\r\\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\\r\\n        pair.sync();\\r\\n        emit ManualNukeLP();\\r\\n        return true;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}