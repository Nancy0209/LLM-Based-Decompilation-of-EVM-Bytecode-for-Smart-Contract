{
    "address": "0xd0B4fb38f8B30Ee154db85790e555d71160107d4",
    "tx_hash": "c6c0cd015f2084edc2a59e0ad144e09c10dcecd3f0d30d920b3a62a70d461b77",
    "block_number": 18007332,
    "timestamp": 1693155431,
    "gas_used_in_creation": 4394029,
    "creation_bytecode": "60806040526005600755600560085560016009556001600a556028600b556028600c556028600d555f600e556009600a6200003b91906200064a565b6200004990614e2062000661565b600f556200005a6009600a6200064a565b6200006890614e2062000661565b601055620000796009600a6200064a565b6200008790614e2062000661565b601155620000986009600a6200064a565b620000a69061271062000661565b6012556014805461ffff60a81b19169055348015620000c3575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915562000157903090620001426009600a6200064a565b6200015190620f424062000661565b62000410565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001a8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620001ce91906200067b565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200022e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200025491906200067b565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156200029f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620002c591906200067b565b601480546001600160a01b0319166001600160a01b0392909216919091179055620002ed3390565b600580546001600160a01b0319166001600160a01b03929092169190911790556200031b6009600a6200064a565b6200032a90620f424062000661565b335f908152600160208190526040822092909255600390620003535f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff199687161790553081526003909352818320805485166001908117909155600554909116835291208054909216179055620003b13390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620003ea6009600a6200064a565b620003f990620f424062000661565b60405190815260200160405180910390a3620006a3565b6001600160a01b038316620004785760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084015b60405180910390fd5b6001600160a01b038216620004db5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016200046f565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200058f57815f19048211156200057357620005736200053b565b808516156200058157918102915b93841c939080029062000554565b509250929050565b5f82620005a75750600162000644565b81620005b557505f62000644565b8160018114620005ce5760028114620005d957620005f9565b600191505062000644565b60ff841115620005ed57620005ed6200053b565b50506001821b62000644565b5060208310610133831016604e8410600b84101617156200061e575081810a62000644565b6200062a83836200054f565b805f19048211156200064057620006406200053b565b0290505b92915050565b5f6200065a60ff84168362000597565b9392505050565b80820281158282048414176200064457620006446200053b565b5f602082840312156200068c575f80fd5b81516001600160a01b03811681146200065a575f80fd5b61192080620006b15f395ff3fe608060405260043610610134575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb14610337578063bf474bed14610356578063c9567bf91461036b578063d34628cc1461037f578063dd62ed3e1461039e578063ec1f3f63146103e2575f80fd5b8063751039fc146102d35780637d1db4a5146102e75780638da5cb5b146102fc5780638f9a55c01461032257806395d89b411461013f575f80fd5b8063313ce567116100f9578063313ce5671461020457806331c2d8471461021f5780633bbac5791461024057806351bc3c851461027757806370a082311461028b578063715018a6146102bf575f80fd5b806306fdde031461013f578063095ea7b31461017f5780630faee56f146101ae57806318160ddd146101d157806323b872dd146101e5575f80fd5b3661013b57005b5f80fd5b34801561014a575f80fd5b5060408051808201825260098152684d41524b4554494e4760b81b602082015290516101769190611418565b60405180910390f35b34801561018a575f80fd5b5061019e61019936600461148a565b610401565b6040519015158152602001610176565b3480156101b9575f80fd5b506101c360125481565b604051908152602001610176565b3480156101dc575f80fd5b506101c3610417565b3480156101f0575f80fd5b5061019e6101ff3660046114b4565b610436565b34801561020f575f80fd5b5060405160098152602001610176565b34801561022a575f80fd5b5061023e610239366004611506565b61049d565b005b34801561024b575f80fd5b5061019e61025a3660046115c6565b6001600160a01b03165f9081526004602052604090205460ff1690565b348015610282575f80fd5b5061023e610537565b348015610296575f80fd5b506101c36102a53660046115c6565b6001600160a01b03165f9081526001602052604090205490565b3480156102ca575f80fd5b5061023e610584565b3480156102de575f80fd5b5061023e6105f5565b3480156102f2575f80fd5b506101c3600f5481565b348015610307575f80fd5b505f546040516001600160a01b039091168152602001610176565b34801561032d575f80fd5b506101c360105481565b348015610342575f80fd5b5061019e61035136600461148a565b6106a3565b348015610361575f80fd5b506101c360115481565b348015610376575f80fd5b5061023e6106af565b34801561038a575f80fd5b5061023e610399366004611506565b610898565b3480156103a9575f80fd5b506101c36103b83660046115e1565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b3480156103ed575f80fd5b5061023e6103fc366004611618565b610926565b5f61040d33848461096b565b5060015b92915050565b5f6104246009600a611723565b61043190620f4240611731565b905090565b5f610442848484610a8e565b610493843361048e856040518060600160405280602881526020016118c3602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611094565b61096b565b5060019392505050565b5f546001600160a01b031633146104cf5760405162461bcd60e51b81526004016104c690611748565b60405180910390fd5b5f5b8151811015610533575f60045f8484815181106104f0576104f061177d565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff19169115159190911790558061052b81611791565b9150506104d1565b5050565b6005546001600160a01b0316336001600160a01b031614610556575f80fd5b305f90815260016020526040902054801561057457610574816110cc565b478015610533576105338161123c565b5f546001600160a01b031633146105ad5760405162461bcd60e51b81526004016104c690611748565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b0316331461061e5760405162461bcd60e51b81526004016104c690611748565b61062a6009600a611723565b61063790620f4240611731565b600f556106466009600a611723565b61065390620f4240611731565b6010557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106836009600a611723565b61069090620f4240611731565b60405190815260200160405180910390a1565b5f61040d338484610a8e565b5f546001600160a01b031633146106d85760405162461bcd60e51b81526004016104c690611748565b601454600160a01b900460ff16156107325760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104c6565b6013546001600160a01b031663f305d7194730610763816001600160a01b03165f9081526001602052604090205490565b5f806107765f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156107dc573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061080191906117a9565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610856573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061087a91906117d4565b506014805462ff00ff60a01b19166201000160a01b17905543600655565b5f546001600160a01b031633146108c15760405162461bcd60e51b81526004016104c690611748565b5f5b815181101561053357600160045f8484815181106108e3576108e361177d565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff19169115159190911790558061091e81611791565b9150506108c3565b6005546001600160a01b0316336001600160a01b031614610945575f80fd5b60095481111580156109595750600a548111155b610961575f80fd5b6009819055600a55565b6001600160a01b0383166109cd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104c6565b6001600160a01b038216610a2e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104c6565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610af25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104c6565b6001600160a01b038216610b545760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104c6565b5f8111610bb55760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104c6565b5f80546001600160a01b03858116911614801590610be057505f546001600160a01b03848116911614155b15610f57576001600160a01b0384165f9081526004602052604090205460ff16158015610c2557506001600160a01b0383165f9081526004602052604090205460ff16155b610c2d575f80fd5b610c596064610c53600b54600e5411610c4857600754610c4c565b6009545b8590611273565b906112f8565b6014549091506001600160a01b038581169116148015610c8757506013546001600160a01b03848116911614155b8015610cab57506001600160a01b0383165f9081526003602052604090205460ff16155b15610db257600f54821115610d025760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104c6565b60105482610d24856001600160a01b03165f9081526001602052604090205490565b610d2e91906117f3565b1115610d7c5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104c6565b436006546001610d8c91906117f3565b1115610d9d57823b15610d9d575f80fd5b600e8054905f610dac83611791565b91905055505b6014546001600160a01b03848116911614801590610de857506001600160a01b0383165f9081526003602052604090205460ff16155b15610e675760105482610e0f856001600160a01b03165f9081526001602052604090205490565b610e1991906117f3565b1115610e675760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104c6565b6014546001600160a01b038481169116148015610e8d57506001600160a01b0384163014155b15610eba57610eb76064610c53600c54600e5411610ead57600854610c4c565b600a548590611273565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610ef057506014546001600160a01b038581169116145b8015610f055750601454600160b01b900460ff165b8015610f12575060115481115b8015610f215750600d54600e54115b15610f5557610f43610f3e84610f3984601254611339565b611339565b6110cc565b478015610f5357610f534761123c565b505b505b8015610fcf57305f90815260016020526040902054610f76908261134d565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fc69085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610ff190836113ab565b6001600160a01b0385165f9081526001602052604090205561103461101683836113ab565b6001600160a01b0385165f908152600160205260409020549061134d565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61107d85856113ab565b60405190815260200160405180910390a350505050565b5f81848411156110b75760405162461bcd60e51b81526004016104c69190611418565b505f6110c38486611806565b95945050505050565b6014805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f815181106111125761111261177d565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611169573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061118d9190611819565b816001815181106111a0576111a061177d565b6001600160a01b0392831660209182029290920101526013546111c6913091168461096b565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906111fe9085905f90869030904290600401611834565b5f604051808303815f87803b158015611215575f80fd5b505af1158015611227573d5f803e3d5ffd5b50506014805460ff60a81b1916905550505050565b6005546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015610533573d5f803e3d5ffd5b5f825f0361128257505f610411565b5f61128d8385611731565b90508261129a85836118a3565b146112f15760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104c6565b9392505050565b5f6112f183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506113ec565b5f81831161134757826112f1565b50919050565b5f8061135983856117f3565b9050838110156112f15760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104c6565b5f6112f183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611094565b5f818361140c5760405162461bcd60e51b81526004016104c69190611418565b505f6110c384866118a3565b5f6020808352835180828501525f5b8181101561144357858101830151858201604001528201611427565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611477575f80fd5b50565b803561148581611463565b919050565b5f806040838503121561149b575f80fd5b82356114a681611463565b946020939093013593505050565b5f805f606084860312156114c6575f80fd5b83356114d181611463565b925060208401356114e181611463565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b5f6020808385031215611517575f80fd5b823567ffffffffffffffff8082111561152e575f80fd5b818501915085601f830112611541575f80fd5b813581811115611553576115536114f2565b8060051b604051601f19603f83011681018181108582111715611578576115786114f2565b604052918252848201925083810185019188831115611595575f80fd5b938501935b828510156115ba576115ab8561147a565b8452938501939285019261159a565b98975050505050505050565b5f602082840312156115d6575f80fd5b81356112f181611463565b5f80604083850312156115f2575f80fd5b82356115fd81611463565b9150602083013561160d81611463565b809150509250929050565b5f60208284031215611628575f80fd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561167d57815f19048211156116635761166361162f565b8085161561167057918102915b93841c9390800290611648565b509250929050565b5f8261169357506001610411565b8161169f57505f610411565b81600181146116b557600281146116bf576116db565b6001915050610411565b60ff8411156116d0576116d061162f565b50506001821b610411565b5060208310610133831016604e8410600b84101617156116fe575081810a610411565b6117088383611643565b805f190482111561171b5761171b61162f565b029392505050565b5f6112f160ff841683611685565b80820281158282048414176104115761041161162f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b5f600182016117a2576117a261162f565b5060010190565b5f805f606084860312156117bb575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156117e4575f80fd5b815180151581146112f1575f80fd5b808201808211156104115761041161162f565b818103818111156104115761041161162f565b5f60208284031215611829575f80fd5b81516112f181611463565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118825784516001600160a01b03168352938301939183019160010161185d565b50506001600160a01b03969096166060850152505050608001529392505050565b5f826118bd57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122004fc2e3699d96bed4297ad1eedd924051cd2a41bc5ae1ed83f99e4b36a133f4d64736f6c63430008140033",
    "runtime_bytecode": "608060405260043610610134575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb14610337578063bf474bed14610356578063c9567bf91461036b578063d34628cc1461037f578063dd62ed3e1461039e578063ec1f3f63146103e2575f80fd5b8063751039fc146102d35780637d1db4a5146102e75780638da5cb5b146102fc5780638f9a55c01461032257806395d89b411461013f575f80fd5b8063313ce567116100f9578063313ce5671461020457806331c2d8471461021f5780633bbac5791461024057806351bc3c851461027757806370a082311461028b578063715018a6146102bf575f80fd5b806306fdde031461013f578063095ea7b31461017f5780630faee56f146101ae57806318160ddd146101d157806323b872dd146101e5575f80fd5b3661013b57005b5f80fd5b34801561014a575f80fd5b5060408051808201825260098152684d41524b4554494e4760b81b602082015290516101769190611418565b60405180910390f35b34801561018a575f80fd5b5061019e61019936600461148a565b610401565b6040519015158152602001610176565b3480156101b9575f80fd5b506101c360125481565b604051908152602001610176565b3480156101dc575f80fd5b506101c3610417565b3480156101f0575f80fd5b5061019e6101ff3660046114b4565b610436565b34801561020f575f80fd5b5060405160098152602001610176565b34801561022a575f80fd5b5061023e610239366004611506565b61049d565b005b34801561024b575f80fd5b5061019e61025a3660046115c6565b6001600160a01b03165f9081526004602052604090205460ff1690565b348015610282575f80fd5b5061023e610537565b348015610296575f80fd5b506101c36102a53660046115c6565b6001600160a01b03165f9081526001602052604090205490565b3480156102ca575f80fd5b5061023e610584565b3480156102de575f80fd5b5061023e6105f5565b3480156102f2575f80fd5b506101c3600f5481565b348015610307575f80fd5b505f546040516001600160a01b039091168152602001610176565b34801561032d575f80fd5b506101c360105481565b348015610342575f80fd5b5061019e61035136600461148a565b6106a3565b348015610361575f80fd5b506101c360115481565b348015610376575f80fd5b5061023e6106af565b34801561038a575f80fd5b5061023e610399366004611506565b610898565b3480156103a9575f80fd5b506101c36103b83660046115e1565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b3480156103ed575f80fd5b5061023e6103fc366004611618565b610926565b5f61040d33848461096b565b5060015b92915050565b5f6104246009600a611723565b61043190620f4240611731565b905090565b5f610442848484610a8e565b610493843361048e856040518060600160405280602881526020016118c3602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611094565b61096b565b5060019392505050565b5f546001600160a01b031633146104cf5760405162461bcd60e51b81526004016104c690611748565b60405180910390fd5b5f5b8151811015610533575f60045f8484815181106104f0576104f061177d565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff19169115159190911790558061052b81611791565b9150506104d1565b5050565b6005546001600160a01b0316336001600160a01b031614610556575f80fd5b305f90815260016020526040902054801561057457610574816110cc565b478015610533576105338161123c565b5f546001600160a01b031633146105ad5760405162461bcd60e51b81526004016104c690611748565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b0316331461061e5760405162461bcd60e51b81526004016104c690611748565b61062a6009600a611723565b61063790620f4240611731565b600f556106466009600a611723565b61065390620f4240611731565b6010557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106836009600a611723565b61069090620f4240611731565b60405190815260200160405180910390a1565b5f61040d338484610a8e565b5f546001600160a01b031633146106d85760405162461bcd60e51b81526004016104c690611748565b601454600160a01b900460ff16156107325760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104c6565b6013546001600160a01b031663f305d7194730610763816001600160a01b03165f9081526001602052604090205490565b5f806107765f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156107dc573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061080191906117a9565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610856573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061087a91906117d4565b506014805462ff00ff60a01b19166201000160a01b17905543600655565b5f546001600160a01b031633146108c15760405162461bcd60e51b81526004016104c690611748565b5f5b815181101561053357600160045f8484815181106108e3576108e361177d565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff19169115159190911790558061091e81611791565b9150506108c3565b6005546001600160a01b0316336001600160a01b031614610945575f80fd5b60095481111580156109595750600a548111155b610961575f80fd5b6009819055600a55565b6001600160a01b0383166109cd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104c6565b6001600160a01b038216610a2e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104c6565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610af25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104c6565b6001600160a01b038216610b545760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104c6565b5f8111610bb55760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104c6565b5f80546001600160a01b03858116911614801590610be057505f546001600160a01b03848116911614155b15610f57576001600160a01b0384165f9081526004602052604090205460ff16158015610c2557506001600160a01b0383165f9081526004602052604090205460ff16155b610c2d575f80fd5b610c596064610c53600b54600e5411610c4857600754610c4c565b6009545b8590611273565b906112f8565b6014549091506001600160a01b038581169116148015610c8757506013546001600160a01b03848116911614155b8015610cab57506001600160a01b0383165f9081526003602052604090205460ff16155b15610db257600f54821115610d025760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016104c6565b60105482610d24856001600160a01b03165f9081526001602052604090205490565b610d2e91906117f3565b1115610d7c5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104c6565b436006546001610d8c91906117f3565b1115610d9d57823b15610d9d575f80fd5b600e8054905f610dac83611791565b91905055505b6014546001600160a01b03848116911614801590610de857506001600160a01b0383165f9081526003602052604090205460ff16155b15610e675760105482610e0f856001600160a01b03165f9081526001602052604090205490565b610e1991906117f3565b1115610e675760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104c6565b6014546001600160a01b038481169116148015610e8d57506001600160a01b0384163014155b15610eba57610eb76064610c53600c54600e5411610ead57600854610c4c565b600a548590611273565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610ef057506014546001600160a01b038581169116145b8015610f055750601454600160b01b900460ff165b8015610f12575060115481115b8015610f215750600d54600e54115b15610f5557610f43610f3e84610f3984601254611339565b611339565b6110cc565b478015610f5357610f534761123c565b505b505b8015610fcf57305f90815260016020526040902054610f76908261134d565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fc69085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610ff190836113ab565b6001600160a01b0385165f9081526001602052604090205561103461101683836113ab565b6001600160a01b0385165f908152600160205260409020549061134d565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61107d85856113ab565b60405190815260200160405180910390a350505050565b5f81848411156110b75760405162461bcd60e51b81526004016104c69190611418565b505f6110c38486611806565b95945050505050565b6014805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f815181106111125761111261177d565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611169573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061118d9190611819565b816001815181106111a0576111a061177d565b6001600160a01b0392831660209182029290920101526013546111c6913091168461096b565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac947906111fe9085905f90869030904290600401611834565b5f604051808303815f87803b158015611215575f80fd5b505af1158015611227573d5f803e3d5ffd5b50506014805460ff60a81b1916905550505050565b6005546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015610533573d5f803e3d5ffd5b5f825f0361128257505f610411565b5f61128d8385611731565b90508261129a85836118a3565b146112f15760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104c6565b9392505050565b5f6112f183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506113ec565b5f81831161134757826112f1565b50919050565b5f8061135983856117f3565b9050838110156112f15760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104c6565b5f6112f183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611094565b5f818361140c5760405162461bcd60e51b81526004016104c69190611418565b505f6110c384866118a3565b5f6020808352835180828501525f5b8181101561144357858101830151858201604001528201611427565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611477575f80fd5b50565b803561148581611463565b919050565b5f806040838503121561149b575f80fd5b82356114a681611463565b946020939093013593505050565b5f805f606084860312156114c6575f80fd5b83356114d181611463565b925060208401356114e181611463565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b5f6020808385031215611517575f80fd5b823567ffffffffffffffff8082111561152e575f80fd5b818501915085601f830112611541575f80fd5b813581811115611553576115536114f2565b8060051b604051601f19603f83011681018181108582111715611578576115786114f2565b604052918252848201925083810185019188831115611595575f80fd5b938501935b828510156115ba576115ab8561147a565b8452938501939285019261159a565b98975050505050505050565b5f602082840312156115d6575f80fd5b81356112f181611463565b5f80604083850312156115f2575f80fd5b82356115fd81611463565b9150602083013561160d81611463565b809150509250929050565b5f60208284031215611628575f80fd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561167d57815f19048211156116635761166361162f565b8085161561167057918102915b93841c9390800290611648565b509250929050565b5f8261169357506001610411565b8161169f57505f610411565b81600181146116b557600281146116bf576116db565b6001915050610411565b60ff8411156116d0576116d061162f565b50506001821b610411565b5060208310610133831016604e8410600b84101617156116fe575081810a610411565b6117088383611643565b805f190482111561171b5761171b61162f565b029392505050565b5f6112f160ff841683611685565b80820281158282048414176104115761041161162f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b5f600182016117a2576117a261162f565b5060010190565b5f805f606084860312156117bb575f80fd5b8351925060208401519150604084015190509250925092565b5f602082840312156117e4575f80fd5b815180151581146112f1575f80fd5b808201808211156104115761041161162f565b818103818111156104115761041161162f565b5f60208284031215611829575f80fd5b81516112f181611463565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118825784516001600160a01b03168352938301939183019160010161185d565b50506001600160a01b03969096166060850152505050608001529392505050565b5f826118bd57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122004fc2e3699d96bed4297ad1eedd924051cd2a41bc5ae1ed83f99e4b36a133f4d64736f6c63430008140033",
    "contract_name": "MARKETING",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbot\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"reduceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\n/**\n\nhttps://moontok.io/\nhttps://coincatapult.com\nhttps://coinbazooka.com/\nhttps://www.coinscope.co/\nhttps://top100token.com/\nhttps://coindiscovery.app/\nhttps://coinhunt.cc/\nhttps://coinsniper.net/\ngemsradar.com\nhttps://coinboom.net/\nhttps://coinmoonhunt.com/\nhttps://coinsgem.com/\nhttps://coinvote.cc/\nhttps://cryptach.org\nhttps://cointoplist.net/\nhttps://coinpaprika.com\nhttps://flooz.xyz/trade\nhttps://app.coinmerge.io\nhttps://www.cryptotips4all.com\nhttps://coinmooner.com\nhttps://coinranking.com\nhttps://hypemytoken.com\nhttps://coinalpha.app\nhttps://coindizzy.com\nhttps://coinmetahub.com\nhttps://cryptonextgem.com\nhttps://advanced.coinxhigh.com\nWww.doctorecoins.com\n\n**/\n\npragma solidity 0.8.20;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ncontract MARKETING is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private bots;\n    address payable private _taxWallet;\n    uint256 firstBlock;\n\n    uint256 private _initialBuyTax=5;\n    uint256 private _initialSellTax=5;\n    uint256 private _finalBuyTax=1;\n    uint256 private _finalSellTax=1;\n    uint256 private _reduceBuyTaxAt=40;\n    uint256 private _reduceSellTaxAt=40;\n    uint256 private _preventSwapBefore=40;\n    uint256 private _buyCount=0;\n\n    uint8 private constant _decimals = 9;\n    uint256 private constant _tTotal = 1000000 * 10**_decimals;\n    string private constant _name = unicode\"MARKETING\";\n    string private constant _symbol = unicode\"MARKETING\";\n    uint256 public _maxTxAmount =   20000 * 10**_decimals;\n    uint256 public _maxWalletSize = 20000 * 10**_decimals;\n    uint256 public _taxSwapThreshold= 20000 * 10**_decimals;\n    uint256 public _maxTaxSwap= 10000 * 10**_decimals;\n\n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapV2Pair;\n    bool private tradingOpen;\n    bool private inSwap = false;\n    bool private swapEnabled = false;\n\n    event MaxTxAmountUpdated(uint _maxTxAmount);\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor () {\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\n\n        _taxWallet = payable(_msgSender());\n        _balances[_msgSender()] = _tTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_taxWallet] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        uint256 taxAmount=0;\n        if (from != owner() && to != owner()) {\n            require(!bots[from] && !bots[to]);\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\n\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\n\n                if (firstBlock + 1  > block.number) {\n                    require(!isContract(to));\n                }\n                _buyCount++;\n            }\n\n            if (to != uniswapV2Pair && ! _isExcludedFromFee[to]) {\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\n            }\n\n            if(to == uniswapV2Pair && from!= address(this) ){\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\n            }\n\n            uint256 contractTokenBalance = balanceOf(address(this));\n            if (!inSwap && to   == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance > 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n\n        if(taxAmount>0){\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\n          emit Transfer(from, address(this),taxAmount);\n        }\n        _balances[from]=_balances[from].sub(amount);\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\n        emit Transfer(from, to, amount.sub(taxAmount));\n    }\n\n\n    function min(uint256 a, uint256 b) private pure returns (uint256){\n      return (a>b)?b:a;\n    }\n\n    function isContract(address account) private view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function removeLimits() external onlyOwner{\n        _maxTxAmount = _tTotal;\n        _maxWalletSize=_tTotal;\n        emit MaxTxAmountUpdated(_tTotal);\n    }\n\n    function sendETHToFee(uint256 amount) private {\n        _taxWallet.transfer(amount);\n    }\n\n    function addBots(address[] memory bots_) public onlyOwner {\n        for (uint i = 0; i < bots_.length; i++) {\n            bots[bots_[i]] = true;\n        }\n    }\n\n    function delBots(address[] memory notbot) public onlyOwner {\n      for (uint i = 0; i < notbot.length; i++) {\n          bots[notbot[i]] = false;\n      }\n    }\n\n    function isBot(address a) public view returns (bool){\n      return bots[a];\n    }\n\n    function openTrading() external onlyOwner() {\n        require(!tradingOpen,\"trading is already open\");\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n        swapEnabled = true;\n        tradingOpen = true;\n        firstBlock = block.number;\n    }\n\n    \n    function reduceFee(uint256 _newFee) external{\n      require(_msgSender()==_taxWallet);\n      require(_newFee<=_finalBuyTax && _newFee<=_finalSellTax);\n      _finalBuyTax=_newFee;\n      _finalSellTax=_newFee;\n    }\n\n    receive() external payable {}\n\n    function manualSwap() external {\n        require(_msgSender()==_taxWallet);\n        uint256 tokenBalance=balanceOf(address(this));\n        if(tokenBalance>0){\n          swapTokensForEth(tokenBalance);\n        }\n        uint256 ethBalance=address(this).balance;\n        if(ethBalance>0){\n          sendETHToFee(ethBalance);\n        }\n    }\n}",
    "etherscan_verified": true
}