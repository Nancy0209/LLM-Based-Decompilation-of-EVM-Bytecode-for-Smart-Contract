{
    "address": "0xBD12E5b55D392080a3220B18D79256501D7b4e5B",
    "tx_hash": "9c281b5c111416074de779e251c94e96ebc38f6c9c2fa53c17fe76511dd43dcb",
    "block_number": 18002172,
    "timestamp": 1693093055,
    "gas_used_in_creation": 691465,
    "creation_bytecode": "608060405234801561001057600080fd5b50610b8b806100206000396000f3fe6080604052600436106100915760003560e01c806381cd872a1161005957806381cd872a1461013e5780639b9ac2cb1461017b578063a52dfedc146101b3578063c219dc00146101d3578063ffa1ad74146101f357600080fd5b806321c0b342146100965780633ad23e1e146100b8578063518839d3146100d85780635d20aece146100f85780637456e1f61461011e575b600080fd5b3480156100a257600080fd5b506100b66100b13660046108c0565b61022f565b005b3480156100c457600080fd5b506100b66100d33660046108f3565b6102d9565b3480156100e457600080fd5b506100b66100f33660046108f3565b6103df565b61010b6101063660046108f3565b610425565b6040519081526020015b60405180910390f35b34801561012a57600080fd5b506100b66101393660046108f3565b6105bf565b34801561014a57600080fd5b5061016e61015936600461090c565b60006020819052908152604090205460ff1681565b604051610115919061095d565b34801561018757600080fd5b5061010b6101963660046108c0565b600160209081526000928352604080842090915290825290205481565b3480156101bf57600080fd5b506100b66101ce3660046108f3565b6106aa565b3480156101df57600080fd5b506100b66101ee3660046108f3565b610717565b3480156101ff57600080fd5b50610222604051806040016040528060038152602001620342e360ec1b81525081565b6040516101159190610971565b6001600160a01b0382166000908152600160209081526040808320338452909152902054806102a55760405162461bcd60e51b815260206004820152601760248201527f686173206e6f20616363756d756c61746564206665657300000000000000000060448201526064015b60405180910390fd5b6001600160a01b03831660009081526001602090815260408083203384529091528120556102d483838361075d565b505050565b80336102eb60808301606084016109bf565b6001600160a01b0316146103115760405162461bcd60e51b815260040161029c906109e1565b816005600061031f83610799565b9050600160008281526020819052604090205460ff16600981111561034657610346610925565b146103635760405162461bcd60e51b815260040161029c90610a11565b6000818152602081905260409020805483919060ff1916600183600981111561038e5761038e610925565b021790555061039c856107c9565b807fdb9be0a24c3d454708d973db0f9960fe1c22053f31356528c39f4071ea4eaadd8484336040516103d093929190610aee565b60405180910390a25050505050565b80336103f160808301606084016109bf565b6001600160a01b0316146104175760405162461bcd60e51b815260040161029c906109e1565b816004600061031f83610799565b6000813361043960408301602084016109bf565b6001600160a01b0316146104875760405162461bcd60e51b815260206004820152601560248201527473656c6c657220213d206d736753656e646572282960581b604482015260640161029c565b600061049284610799565b90506000808281526020819052604090205460ff1660098111156104b8576104b8610925565b146104fe5760405162461bcd60e51b815260206004820152601660248201527539ba37b930b3b29039b637ba1031b7b63634b9b4b7b760511b604482015260640161029c565b60003411801561051e575061051b60c085013560a0860135610b25565b34145b61055f5760405162461bcd60e51b81526020600482015260126024820152711ddc9bdb99c8195d1a195c88185b5bdd5b9d60721b604482015260640161029c565b60008181526020819052604090819020805460ff19166001908117909155905182917fdb9be0a24c3d454708d973db0f9960fe1c22053f31356528c39f4071ea4eaadd916105b09188913390610aee565b60405180910390a29392505050565b80336105d160408301602084016109bf565b6001600160a01b03161461061f5760405162461bcd60e51b815260206004820152601560248201527473656c6c657220213d206d736753656e646572282960581b604482015260640161029c565b816008600061062d83610799565b9050600160008281526020819052604090205460ff16600981111561065457610654610925565b146106715760405162461bcd60e51b815260040161029c90610a11565b6000818152602081905260409020805483919060ff1916600183600981111561069c5761069c610925565b021790555061039c85610803565b80336106bc60608301604084016109bf565b6001600160a01b0316146107095760405162461bcd60e51b8152602060048201526014602482015273627579657220213d206d736753656e646572282960601b604482015260640161029c565b816006600061031f83610799565b803361072960808301606084016109bf565b6001600160a01b03161461074f5760405162461bcd60e51b815260040161029c906109e1565b816009600061062d83610799565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610793573d6000803e3d6000fd5b50505050565b6000816040516020016107ac9190610b46565b604051602081830303815290604052805190602001209050919050565b6108006107d960208301836109bf565b6107e960408401602085016109bf565b6107fb60c085013560a0860135610b25565b61075d565b50565b60c08101356001600061081960208501856109bf565b6001600160a01b03168152602081019190915260400160009081209061084560a08501608086016109bf565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546108749190610b25565b90915550610800905061088a60208301836109bf565b61089a60608401604085016109bf565b8360a0013561075d565b80356001600160a01b03811681146108bb57600080fd5b919050565b600080604083850312156108d357600080fd5b6108dc836108a4565b91506108ea602084016108a4565b90509250929050565b6000610120828403121561090657600080fd5b50919050565b60006020828403121561091e57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600a811061095957634e487b7160e01b600052602160045260246000fd5b9052565b6020810161096b828461093b565b92915050565b600060208083528351808285015260005b8181101561099e57858101830151858201604001528201610982565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156109d157600080fd5b6109da826108a4565b9392505050565b6020808252601690820152756172626974657220213d206d736753656e646572282960501b604082015260600190565b60208082526023908201527f57726f6e67206465616c207374617465206f72206465616c206973206d697373604082015262696e6760e81b606082015260800190565b6001600160a01b0380610a66836108a4565b16835280610a76602084016108a4565b16602084015280610a89604084016108a4565b16604084015250610a9c606082016108a4565b6001600160a01b03166060830152610ab6608082016108a4565b6001600160a01b0316608083015260a0818101359083015260c0808201359083015260e0808201359083015261010090810135910152565b6101608101610afd8286610a54565b610b0b61012083018561093b565b6001600160a01b0392909216610140919091015292915050565b8082018082111561096b57634e487b7160e01b600052601160045260246000fd5b610120810161096b8284610a5456fea2646970667358221220ee0e4d547b54538c3077c6fefb77e9fa3fa5d559d1a922a7470532fc9cbaf2d164736f6c63430008120033",
    "runtime_bytecode": "6080604052600436106100915760003560e01c806381cd872a1161005957806381cd872a1461013e5780639b9ac2cb1461017b578063a52dfedc146101b3578063c219dc00146101d3578063ffa1ad74146101f357600080fd5b806321c0b342146100965780633ad23e1e146100b8578063518839d3146100d85780635d20aece146100f85780637456e1f61461011e575b600080fd5b3480156100a257600080fd5b506100b66100b13660046108c0565b61022f565b005b3480156100c457600080fd5b506100b66100d33660046108f3565b6102d9565b3480156100e457600080fd5b506100b66100f33660046108f3565b6103df565b61010b6101063660046108f3565b610425565b6040519081526020015b60405180910390f35b34801561012a57600080fd5b506100b66101393660046108f3565b6105bf565b34801561014a57600080fd5b5061016e61015936600461090c565b60006020819052908152604090205460ff1681565b604051610115919061095d565b34801561018757600080fd5b5061010b6101963660046108c0565b600160209081526000928352604080842090915290825290205481565b3480156101bf57600080fd5b506100b66101ce3660046108f3565b6106aa565b3480156101df57600080fd5b506100b66101ee3660046108f3565b610717565b3480156101ff57600080fd5b50610222604051806040016040528060038152602001620342e360ec1b81525081565b6040516101159190610971565b6001600160a01b0382166000908152600160209081526040808320338452909152902054806102a55760405162461bcd60e51b815260206004820152601760248201527f686173206e6f20616363756d756c61746564206665657300000000000000000060448201526064015b60405180910390fd5b6001600160a01b03831660009081526001602090815260408083203384529091528120556102d483838361075d565b505050565b80336102eb60808301606084016109bf565b6001600160a01b0316146103115760405162461bcd60e51b815260040161029c906109e1565b816005600061031f83610799565b9050600160008281526020819052604090205460ff16600981111561034657610346610925565b146103635760405162461bcd60e51b815260040161029c90610a11565b6000818152602081905260409020805483919060ff1916600183600981111561038e5761038e610925565b021790555061039c856107c9565b807fdb9be0a24c3d454708d973db0f9960fe1c22053f31356528c39f4071ea4eaadd8484336040516103d093929190610aee565b60405180910390a25050505050565b80336103f160808301606084016109bf565b6001600160a01b0316146104175760405162461bcd60e51b815260040161029c906109e1565b816004600061031f83610799565b6000813361043960408301602084016109bf565b6001600160a01b0316146104875760405162461bcd60e51b815260206004820152601560248201527473656c6c657220213d206d736753656e646572282960581b604482015260640161029c565b600061049284610799565b90506000808281526020819052604090205460ff1660098111156104b8576104b8610925565b146104fe5760405162461bcd60e51b815260206004820152601660248201527539ba37b930b3b29039b637ba1031b7b63634b9b4b7b760511b604482015260640161029c565b60003411801561051e575061051b60c085013560a0860135610b25565b34145b61055f5760405162461bcd60e51b81526020600482015260126024820152711ddc9bdb99c8195d1a195c88185b5bdd5b9d60721b604482015260640161029c565b60008181526020819052604090819020805460ff19166001908117909155905182917fdb9be0a24c3d454708d973db0f9960fe1c22053f31356528c39f4071ea4eaadd916105b09188913390610aee565b60405180910390a29392505050565b80336105d160408301602084016109bf565b6001600160a01b03161461061f5760405162461bcd60e51b815260206004820152601560248201527473656c6c657220213d206d736753656e646572282960581b604482015260640161029c565b816008600061062d83610799565b9050600160008281526020819052604090205460ff16600981111561065457610654610925565b146106715760405162461bcd60e51b815260040161029c90610a11565b6000818152602081905260409020805483919060ff1916600183600981111561069c5761069c610925565b021790555061039c85610803565b80336106bc60608301604084016109bf565b6001600160a01b0316146107095760405162461bcd60e51b8152602060048201526014602482015273627579657220213d206d736753656e646572282960601b604482015260640161029c565b816006600061031f83610799565b803361072960808301606084016109bf565b6001600160a01b03161461074f5760405162461bcd60e51b815260040161029c906109e1565b816009600061062d83610799565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610793573d6000803e3d6000fd5b50505050565b6000816040516020016107ac9190610b46565b604051602081830303815290604052805190602001209050919050565b6108006107d960208301836109bf565b6107e960408401602085016109bf565b6107fb60c085013560a0860135610b25565b61075d565b50565b60c08101356001600061081960208501856109bf565b6001600160a01b03168152602081019190915260400160009081209061084560a08501608086016109bf565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546108749190610b25565b90915550610800905061088a60208301836109bf565b61089a60608401604085016109bf565b8360a0013561075d565b80356001600160a01b03811681146108bb57600080fd5b919050565b600080604083850312156108d357600080fd5b6108dc836108a4565b91506108ea602084016108a4565b90509250929050565b6000610120828403121561090657600080fd5b50919050565b60006020828403121561091e57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600a811061095957634e487b7160e01b600052602160045260246000fd5b9052565b6020810161096b828461093b565b92915050565b600060208083528351808285015260005b8181101561099e57858101830151858201604001528201610982565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156109d157600080fd5b6109da826108a4565b9392505050565b6020808252601690820152756172626974657220213d206d736753656e646572282960501b604082015260600190565b60208082526023908201527f57726f6e67206465616c207374617465206f72206465616c206973206d697373604082015262696e6760e81b606082015260800190565b6001600160a01b0380610a66836108a4565b16835280610a76602084016108a4565b16602084015280610a89604084016108a4565b16604084015250610a9c606082016108a4565b6001600160a01b03166060830152610ab6608082016108a4565b6001600160a01b0316608083015260a0818101359083015260c0808201359083015260e0808201359083015261010090810135910152565b6101608101610afd8286610a54565b610b0b61012083018561093b565b6001600160a01b0392909216610140919091015292915050565b8082018082111561096b57634e487b7160e01b600052601160045260246000fd5b610120810161096b8284610a5456fea2646970667358221220ee0e4d547b54538c3077c6fefb77e9fa3fa5d559d1a922a7470532fc9cbaf2d164736f6c63430008120033",
    "contract_name": "DP2PCoin",
    "compiler_version": "v0.8.18+commit.87f61d96",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dealHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbiter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extra\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct IDruzhbaStateMachine.DealData\",\"name\":\"deal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"enum IDruzhbaStateMachine.DealState\",\"name\":\"state\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbiter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extra\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDruzhbaStateMachine.DealData\",\"name\":\"deal\",\"type\":\"tuple\"}],\"name\":\"cancelDealArbiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbiter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extra\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDruzhbaStateMachine.DealData\",\"name\":\"deal\",\"type\":\"tuple\"}],\"name\":\"cancelDealBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbiter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extra\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDruzhbaStateMachine.DealData\",\"name\":\"deal\",\"type\":\"tuple\"}],\"name\":\"cancelTimeoutArbiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbiter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extra\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDruzhbaStateMachine.DealData\",\"name\":\"deal\",\"type\":\"tuple\"}],\"name\":\"clearDealArbiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbiter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extra\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDruzhbaStateMachine.DealData\",\"name\":\"deal\",\"type\":\"tuple\"}],\"name\":\"clearDealSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deals\",\"outputs\":[{\"internalType\":\"enum IDruzhbaStateMachine.DealState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbiter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extra\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDruzhbaStateMachine.DealData\",\"name\":\"deal\",\"type\":\"tuple\"}],\"name\":\"startDeal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
    "source_code": "// SPDX-License-Identifier: MIXED\r\n\r\n// Sources flattened with hardhat v2.14.1 https://hardhat.org\r\n\r\n// File contracts/Address.sol\r\n\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Strings.sol\r\n\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ECDSA.sol\r\n\r\n// License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IDruzhbaStateMachine.sol\r\n\r\n// License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDruzhbaStateMachine {\r\n\tenum DealState {\r\n\t\tZERO, // 0\r\n\t\tSTART, // 1\r\n\t\tPAYMENT_COMPLETE, // 2 legacy\r\n\t\tDISPUTE, // 3 legacy\r\n\t\tCANCELED_ARBITER, // 4\r\n\t\tCANCELED_TIMEOUT_ARBITER, // 5\r\n\t\tCANCELED_BUYER, // 6\r\n\t\tCANCELED_SELLER, // 7 impossible state\r\n\t\tCLEARED_SELLER, // 8\r\n\t\tCLEARED_ARBITER // 9\r\n\t}\r\n\r\n\tstruct DealData {\r\n\t\taddress token;\r\n\t\taddress seller;\r\n\t\taddress buyer;\r\n\t\taddress arbiter;\r\n\t\taddress feeReceiver;\r\n\t\tuint256 amount;\r\n\t\tuint256 fee;\r\n\t\tuint256 nonce;\r\n\t\tbytes32 extra;\r\n\t}\r\n\r\n\tevent StateChanged(bytes32 indexed dealHash, DealData deal, DealState state, address creator);\r\n\r\n\tfunction startDeal(DealData calldata deal) external payable returns (bytes32);\r\n\r\n\tfunction cancelDealBuyer(DealData calldata deal) external;\r\n\r\n\tfunction clearDealSeller(DealData calldata deal) external;\r\n\r\n\tfunction cancelTimeoutArbiter(DealData calldata deal) external;\r\n\r\n\tfunction cancelDealArbiter(DealData calldata deal) external;\r\n\r\n\tfunction clearDealArbiter(DealData calldata deal) external;\r\n\r\n\tfunction claim(address token, address receiver) external;\r\n}\r\n\r\n\r\n// File contracts/DruzhbaStateMachine.sol\r\n\r\n// License-Identifier: UNLICENCED\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract DruzhbaStateMachine is IDruzhbaStateMachine {\r\n\tmapping(bytes32 => DealState) public deals;\r\n\tmapping(address => mapping(address => uint256)) public fees; // token -> addr -> fees\r\n\r\n\tmodifier isValidStateTransfer(DealData calldata deal, DealState toState) {\r\n\t\tbytes32 _hash = dealHash(deal);\r\n\t\trequire(deals[_hash] == DealState.START, 'Wrong deal state or deal is missing');\r\n\t\tdeals[_hash] = toState;\r\n\t\t_;\r\n\t\temit StateChanged(_hash, deal, toState, msg.sender);\r\n\t}\r\n\r\n\tmodifier onlyArbiter(DealData calldata deal) {\r\n\t\trequire(deal.arbiter == msg.sender, 'arbiter != msgSender()');\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyBuyer(DealData calldata deal) {\r\n\t\trequire(deal.buyer == msg.sender, 'buyer != msgSender()');\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlySeller(DealData calldata deal) {\r\n\t\trequire(deal.seller == msg.sender, 'seller != msgSender()');\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction startDeal(\r\n\t\tDealData calldata deal\r\n\t) external payable virtual override onlySeller(deal) returns (bytes32) {\r\n\t\tbytes32 _hash = dealHash(deal);\r\n\t\trequire(deals[_hash] == DealState.ZERO, 'storage slot collision');\r\n\t\tdeals[_hash] = DealState.START;\r\n\r\n\t\t_transferFrom(deal.token, deal.seller, address(this), deal.amount + deal.fee);\r\n\r\n\t\temit StateChanged(_hash, deal, DealState.START, msg.sender);\r\n\t\treturn _hash;\r\n\t}\r\n\r\n\tfunction cancelDealBuyer(\r\n\t\tDealData calldata deal\r\n\t) external override onlyBuyer(deal) isValidStateTransfer(deal, DealState.CANCELED_BUYER) {\r\n\t\t_cancelDeal(deal);\r\n\t}\r\n\r\n\tfunction clearDealSeller(\r\n\t\tDealData calldata deal\r\n\t) external override onlySeller(deal) isValidStateTransfer(deal, DealState.CLEARED_SELLER) {\r\n\t\t_clearDeal(deal);\r\n\t}\r\n\r\n\tfunction cancelTimeoutArbiter(\r\n\t\tDealData calldata deal\r\n\t)\r\n\t\texternal\r\n\t\toverride\r\n\t\tonlyArbiter(deal)\r\n\t\tisValidStateTransfer(deal, DealState.CANCELED_TIMEOUT_ARBITER)\r\n\t{\r\n\t\t_cancelDeal(deal);\r\n\t}\r\n\r\n\tfunction cancelDealArbiter(\r\n\t\tDealData calldata deal\r\n\t) external override onlyArbiter(deal) isValidStateTransfer(deal, DealState.CANCELED_ARBITER) {\r\n\t\t_cancelDeal(deal);\r\n\t}\r\n\r\n\tfunction clearDealArbiter(\r\n\t\tDealData calldata deal\r\n\t) external override onlyArbiter(deal) isValidStateTransfer(deal, DealState.CLEARED_ARBITER) {\r\n\t\t_clearDeal(deal);\r\n\t}\r\n\r\n\tfunction claim(address token, address receiver) external override {\r\n\t\tuint256 amount = fees[token][msg.sender];\r\n\t\trequire(amount > 0, 'has no accumulated fees');\r\n\t\tfees[token][msg.sender] = 0;\r\n\t\t_transfer(token, receiver, amount);\r\n\t}\r\n\r\n\tfunction dealHash(DealData calldata deal) internal pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encode(deal));\r\n\t}\r\n\r\n\tfunction _cancelDeal(DealData calldata deal) internal {\r\n\t\t_transfer(deal.token, deal.seller, deal.amount + deal.fee);\r\n\t}\r\n\r\n\tfunction _clearDeal(DealData calldata deal) internal {\r\n\t\tfees[deal.token][deal.feeReceiver] += deal.fee;\r\n\t\t_transfer(deal.token, deal.buyer, deal.amount);\r\n\t}\r\n\r\n\tfunction _transfer(address token, address _to, uint256 _value) internal virtual;\r\n\r\n\tfunction _transferFrom(\r\n\t\taddress token,\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _value\r\n\t) internal virtual;\r\n}\r\n\r\n\r\n// File contracts/Dp2pCoin.sol\r\n\r\n// License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract DP2PCoin is DruzhbaStateMachine {\r\n\tusing Address for address;\r\n\r\n\tstring public constant VERSION = '4.0';\r\n\r\n\tfunction startDeal(\r\n\t\tDealData calldata deal\r\n\t) external payable override onlySeller(deal) returns (bytes32) {\r\n\t\tbytes32 _hash = dealHash(deal);\r\n\t\trequire(deals[_hash] == DealState.ZERO, 'storage slot collision');\r\n\t\trequire(msg.value > 0 && msg.value == deal.amount + deal.fee, 'wrong ether amount');\r\n\t\tdeals[_hash] = DealState.START;\r\n\r\n\t\temit StateChanged(_hash, deal, DealState.START, msg.sender);\r\n\t\treturn _hash;\r\n\t}\r\n\r\n\tfunction _transfer(address /* token */, address _to, uint256 _value) internal override {\r\n\t\tpayable(_to).transfer(_value);\r\n\t}\r\n\r\n\tfunction _transferFrom(\r\n\t\taddress token,\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _value\r\n\t) internal override {}\r\n}",
    "etherscan_verified": true
}