{
    "address": "0xe06802BE64FC18b16dB2dA75fBAf139FF268c97B",
    "tx_hash": "0be64214b8db6b15dc5cfb5cb6beb91e071e530719489d5fc65d194ec7563724",
    "block_number": 18009475,
    "timestamp": 1693181387,
    "gas_used_in_creation": 1232473,
    "creation_bytecode": "608060405260405162001c8438038062001c84833981810160405281019062000029919062000509565b3360035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600490816200007a9190620007f9565b5083600590816200008c9190620007f9565b508260065f6101000a81548160ff021916908360ff160217905550620000b98183620000c460201b60201c565b505050505062000a5c565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000135576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200012c906200093b565b60405180910390fd5b6200014c816002546200024e60201b90919060201c565b600281905550620001a3815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546200024e60201b90919060201c565b5f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200024291906200096c565b60405180910390a35050565b5f8082846200025e9190620009b4565b905083811015620002a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200029d9062000a3c565b60405180910390fd5b8091505092915050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6200031182620002c9565b810181811067ffffffffffffffff82111715620003335762000332620002d9565b5b80604052505050565b5f62000347620002b0565b905062000355828262000306565b919050565b5f67ffffffffffffffff821115620003775762000376620002d9565b5b6200038282620002c9565b9050602081019050919050565b5f5b83811015620003ae57808201518184015260208101905062000391565b5f8484015250505050565b5f620003cf620003c9846200035a565b6200033c565b905082815260208101848484011115620003ee57620003ed620002c5565b5b620003fb8482856200038f565b509392505050565b5f82601f8301126200041a5762000419620002c1565b5b81516200042c848260208601620003b9565b91505092915050565b5f60ff82169050919050565b6200044c8162000435565b811462000457575f80fd5b50565b5f815190506200046a8162000441565b92915050565b5f819050919050565b620004848162000470565b81146200048f575f80fd5b50565b5f81519050620004a28162000479565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620004d382620004a8565b9050919050565b620004e581620004c7565b8114620004f0575f80fd5b50565b5f815190506200050381620004da565b92915050565b5f805f805f60a08688031215620005255762000524620002b9565b5b5f86015167ffffffffffffffff811115620005455762000544620002bd565b5b620005538882890162000403565b955050602086015167ffffffffffffffff811115620005775762000576620002bd565b5b620005858882890162000403565b945050604062000598888289016200045a565b9350506060620005ab8882890162000492565b9250506080620005be88828901620004f3565b9150509295509295909350565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200061a57607f821691505b60208210810362000630576200062f620005d5565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620006947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000657565b620006a0868362000657565b95508019841693508086168417925050509392505050565b5f819050919050565b5f620006e1620006db620006d58462000470565b620006b8565b62000470565b9050919050565b5f819050919050565b620006fc83620006c1565b620007146200070b82620006e8565b84845462000663565b825550505050565b5f90565b6200072a6200071c565b62000737818484620006f1565b505050565b5b818110156200075e57620007525f8262000720565b6001810190506200073d565b5050565b601f821115620007ad57620007778162000636565b620007828462000648565b8101602085101562000792578190505b620007aa620007a18562000648565b8301826200073c565b50505b505050565b5f82821c905092915050565b5f620007cf5f1984600802620007b2565b1980831691505092915050565b5f620007e98383620007be565b9150826002028217905092915050565b6200080482620005cb565b67ffffffffffffffff81111562000820576200081f620002d9565b5b6200082c825462000602565b6200083982828562000762565b5f60209050601f8311600181146200086f575f84156200085a578287015190505b620008668582620007dc565b865550620008d5565b601f1984166200087f8662000636565b5f5b82811015620008a85784890151825560018201915060208501945060208101905062000881565b86831015620008c85784890151620008c4601f891682620007be565b8355505b6001600288020188555050505b505050505050565b5f82825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f62000923601f83620008dd565b91506200093082620008ed565b602082019050919050565b5f6020820190508181035f830152620009548162000915565b9050919050565b620009668162000470565b82525050565b5f602082019050620009815f8301846200095b565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f620009c08262000470565b9150620009cd8362000470565b9250828201905080821115620009e857620009e762000987565b5b92915050565b7f536166654d6174683a206164646974696f6e206f766572666c6f7700000000005f82015250565b5f62000a24601b83620008dd565b915062000a3182620009ee565b602082019050919050565b5f6020820190508181035f83015262000a558162000a16565b9050919050565b61121a8062000a6a5f395ff3fe608060405234801561000f575f80fd5b50600436106100b2575f3560e01c806342966c681161006f57806342966c68146101a057806370a08231146101bc57806395d89b41146101ec578063a457c2d71461020a578063a9059cbb1461023a578063dd62ed3e1461026a576100b2565b806306fdde03146100b6578063095ea7b3146100d457806318160ddd1461010457806323b872dd14610122578063313ce567146101525780633950935114610170575b5f80fd5b6100be61029a565b6040516100cb9190610d34565b60405180910390f35b6100ee60048036038101906100e99190610de5565b61032a565b6040516100fb9190610e3d565b60405180910390f35b61010c610340565b6040516101199190610e65565b60405180910390f35b61013c60048036038101906101379190610e7e565b610349565b6040516101499190610e3d565b60405180910390f35b61015a6103f5565b6040516101679190610ee9565b60405180910390f35b61018a60048036038101906101859190610de5565b61040a565b6040516101979190610e3d565b60405180910390f35b6101ba60048036038101906101b59190610f02565b6104aa565b005b6101d660048036038101906101d19190610f2d565b6104b7565b6040516101e39190610e65565b60405180910390f35b6101f46104fc565b6040516102019190610d34565b60405180910390f35b610224600480360381019061021f9190610de5565b61058c565b6040516102319190610e3d565b60405180910390f35b610254600480360381019061024f9190610de5565b61062c565b6040516102619190610e3d565b60405180910390f35b610284600480360381019061027f9190610f58565b610642565b6040516102919190610e65565b60405180910390f35b6060600480546102a990610fc3565b80601f01602080910402602001604051908101604052809291908181526020018280546102d590610fc3565b80156103205780601f106102f757610100808354040283529160200191610320565b820191905f5260205f20905b81548152906001019060200180831161030357829003601f168201915b5050505050905090565b5f6103363384846106c4565b6001905092915050565b5f600254905090565b5f6103558484846108e7565b6103ea84336103e58560015f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610a6f90919063ffffffff16565b6106c4565b600190509392505050565b5f60065f9054906101000a900460ff16905090565b5f6104a0338461049b8560015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610acc90919063ffffffff16565b6106c4565b6001905092915050565b6104b43382610b29565b50565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60606005805461050b90610fc3565b80601f016020809104026020016040519081016040528092919081815260200182805461053790610fc3565b80156105825780601f1061055957610100808354040283529160200191610582565b820191905f5260205f20905b81548152906001019060200180831161056557829003601f168201915b5050505050905090565b5f610622338461061d8560015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610a6f90919063ffffffff16565b6106c4565b6001905092915050565b5f6106383384846108e7565b6001905092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036107ff578060015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107f29190610e65565b60405180910390a36108e2565b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108d99190610e65565b60405180910390a35b505050565b610936815f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610a6f90919063ffffffff16565b5f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055506109c5815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610acc90919063ffffffff16565b5f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a629190610e65565b60405180910390a3505050565b5f82821115610ab3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaa9061103d565b60405180910390fd5b5f8284610ac09190611088565b90508091505092915050565b5f808284610ada91906110bb565b905083811015610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1690611138565b60405180910390fd5b8091505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8e906111c6565b60405180910390fd5b610bac81600254610a6f90919063ffffffff16565b600281905550610c01815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610a6f90919063ffffffff16565b5f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610c9e9190610e65565b60405180910390a35050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610ce1578082015181840152602081019050610cc6565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610d0682610caa565b610d108185610cb4565b9350610d20818560208601610cc4565b610d2981610cec565b840191505092915050565b5f6020820190508181035f830152610d4c8184610cfc565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610d8182610d58565b9050919050565b610d9181610d77565b8114610d9b575f80fd5b50565b5f81359050610dac81610d88565b92915050565b5f819050919050565b610dc481610db2565b8114610dce575f80fd5b50565b5f81359050610ddf81610dbb565b92915050565b5f8060408385031215610dfb57610dfa610d54565b5b5f610e0885828601610d9e565b9250506020610e1985828601610dd1565b9150509250929050565b5f8115159050919050565b610e3781610e23565b82525050565b5f602082019050610e505f830184610e2e565b92915050565b610e5f81610db2565b82525050565b5f602082019050610e785f830184610e56565b92915050565b5f805f60608486031215610e9557610e94610d54565b5b5f610ea286828701610d9e565b9350506020610eb386828701610d9e565b9250506040610ec486828701610dd1565b9150509250925092565b5f60ff82169050919050565b610ee381610ece565b82525050565b5f602082019050610efc5f830184610eda565b92915050565b5f60208284031215610f1757610f16610d54565b5b5f610f2484828501610dd1565b91505092915050565b5f60208284031215610f4257610f41610d54565b5b5f610f4f84828501610d9e565b91505092915050565b5f8060408385031215610f6e57610f6d610d54565b5b5f610f7b85828601610d9e565b9250506020610f8c85828601610d9e565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610fda57607f821691505b602082108103610fed57610fec610f96565b5b50919050565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f7700005f82015250565b5f611027601e83610cb4565b915061103282610ff3565b602082019050919050565b5f6020820190508181035f8301526110548161101b565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61109282610db2565b915061109d83610db2565b92508282039050818111156110b5576110b461105b565b5b92915050565b5f6110c582610db2565b91506110d083610db2565b92508282019050808211156110e8576110e761105b565b5b92915050565b7f536166654d6174683a206164646974696f6e206f766572666c6f7700000000005f82015250565b5f611122601b83610cb4565b915061112d826110ee565b602082019050919050565b5f6020820190508181035f83015261114f81611116565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f206164647265735f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f6111b0602183610cb4565b91506111bb82611156565b604082019050919050565b5f6020820190508181035f8301526111dd816111a4565b905091905056fea26469706673582212204e81e4c3409ef5172a45b3e61f967e7f82d024f49acbddd605bdf6a27a5a3d8664736f6c6343000815003300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000dce18cb83cd0fe4383600000000000000000000000000000000c520913dcfa0374fec8881d51a7a694d7e70222f000000000000000000000000000000000000000000000000000000000000000a436f696e4d6173746572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003434d460000000000000000000000000000000000000000000000000000000000",
    "runtime_bytecode": "608060405234801561000f575f80fd5b50600436106100b2575f3560e01c806342966c681161006f57806342966c68146101a057806370a08231146101bc57806395d89b41146101ec578063a457c2d71461020a578063a9059cbb1461023a578063dd62ed3e1461026a576100b2565b806306fdde03146100b6578063095ea7b3146100d457806318160ddd1461010457806323b872dd14610122578063313ce567146101525780633950935114610170575b5f80fd5b6100be61029a565b6040516100cb9190610d34565b60405180910390f35b6100ee60048036038101906100e99190610de5565b61032a565b6040516100fb9190610e3d565b60405180910390f35b61010c610340565b6040516101199190610e65565b60405180910390f35b61013c60048036038101906101379190610e7e565b610349565b6040516101499190610e3d565b60405180910390f35b61015a6103f5565b6040516101679190610ee9565b60405180910390f35b61018a60048036038101906101859190610de5565b61040a565b6040516101979190610e3d565b60405180910390f35b6101ba60048036038101906101b59190610f02565b6104aa565b005b6101d660048036038101906101d19190610f2d565b6104b7565b6040516101e39190610e65565b60405180910390f35b6101f46104fc565b6040516102019190610d34565b60405180910390f35b610224600480360381019061021f9190610de5565b61058c565b6040516102319190610e3d565b60405180910390f35b610254600480360381019061024f9190610de5565b61062c565b6040516102619190610e3d565b60405180910390f35b610284600480360381019061027f9190610f58565b610642565b6040516102919190610e65565b60405180910390f35b6060600480546102a990610fc3565b80601f01602080910402602001604051908101604052809291908181526020018280546102d590610fc3565b80156103205780601f106102f757610100808354040283529160200191610320565b820191905f5260205f20905b81548152906001019060200180831161030357829003601f168201915b5050505050905090565b5f6103363384846106c4565b6001905092915050565b5f600254905090565b5f6103558484846108e7565b6103ea84336103e58560015f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610a6f90919063ffffffff16565b6106c4565b600190509392505050565b5f60065f9054906101000a900460ff16905090565b5f6104a0338461049b8560015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610acc90919063ffffffff16565b6106c4565b6001905092915050565b6104b43382610b29565b50565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60606005805461050b90610fc3565b80601f016020809104026020016040519081016040528092919081815260200182805461053790610fc3565b80156105825780601f1061055957610100808354040283529160200191610582565b820191905f5260205f20905b81548152906001019060200180831161056557829003601f168201915b5050505050905090565b5f610622338461061d8560015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610a6f90919063ffffffff16565b6106c4565b6001905092915050565b5f6106383384846108e7565b6001905092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036107ff578060015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107f29190610e65565b60405180910390a36108e2565b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108d99190610e65565b60405180910390a35b505050565b610936815f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610a6f90919063ffffffff16565b5f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055506109c5815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610acc90919063ffffffff16565b5f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a629190610e65565b60405180910390a3505050565b5f82821115610ab3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaa9061103d565b60405180910390fd5b5f8284610ac09190611088565b90508091505092915050565b5f808284610ada91906110bb565b905083811015610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1690611138565b60405180910390fd5b8091505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8e906111c6565b60405180910390fd5b610bac81600254610a6f90919063ffffffff16565b600281905550610c01815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610a6f90919063ffffffff16565b5f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610c9e9190610e65565b60405180910390a35050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610ce1578082015181840152602081019050610cc6565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610d0682610caa565b610d108185610cb4565b9350610d20818560208601610cc4565b610d2981610cec565b840191505092915050565b5f6020820190508181035f830152610d4c8184610cfc565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610d8182610d58565b9050919050565b610d9181610d77565b8114610d9b575f80fd5b50565b5f81359050610dac81610d88565b92915050565b5f819050919050565b610dc481610db2565b8114610dce575f80fd5b50565b5f81359050610ddf81610dbb565b92915050565b5f8060408385031215610dfb57610dfa610d54565b5b5f610e0885828601610d9e565b9250506020610e1985828601610dd1565b9150509250929050565b5f8115159050919050565b610e3781610e23565b82525050565b5f602082019050610e505f830184610e2e565b92915050565b610e5f81610db2565b82525050565b5f602082019050610e785f830184610e56565b92915050565b5f805f60608486031215610e9557610e94610d54565b5b5f610ea286828701610d9e565b9350506020610eb386828701610d9e565b9250506040610ec486828701610dd1565b9150509250925092565b5f60ff82169050919050565b610ee381610ece565b82525050565b5f602082019050610efc5f830184610eda565b92915050565b5f60208284031215610f1757610f16610d54565b5b5f610f2484828501610dd1565b91505092915050565b5f60208284031215610f4257610f41610d54565b5b5f610f4f84828501610d9e565b91505092915050565b5f8060408385031215610f6e57610f6d610d54565b5b5f610f7b85828601610d9e565b9250506020610f8c85828601610d9e565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610fda57607f821691505b602082108103610fed57610fec610f96565b5b50919050565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f7700005f82015250565b5f611027601e83610cb4565b915061103282610ff3565b602082019050919050565b5f6020820190508181035f8301526110548161101b565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61109282610db2565b915061109d83610db2565b92508282039050818111156110b5576110b461105b565b5b92915050565b5f6110c582610db2565b91506110d083610db2565b92508282019050808211156110e8576110e761105b565b5b92915050565b7f536166654d6174683a206164646974696f6e206f766572666c6f7700000000005f82015250565b5f611122601b83610cb4565b915061112d826110ee565b602082019050919050565b5f6020820190508181035f83015261114f81611116565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f206164647265735f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f6111b0602183610cb4565b91506111bb82611156565b604082019050919050565b5f6020820190508181035f8301526111dd816111a4565b905091905056fea26469706673582212204e81e4c3409ef5172a45b3e61f967e7f82d024f49acbddd605bdf6a27a5a3d8664736f6c63430008150033",
    "contract_name": "TokenMintERC20Token",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n     /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.     \r\n     **\r\n     * Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n      * This is internal function is equivalent to `approve`, and can be used to\r\n      * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n      * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n*/\r\n      function _approve(address owner, address spender, uint256 value) internal {\r\n/**\r\n          require(owner != address(0), \"ERC20: approve from the zero address\");\r\n          require(spender != address(0), \"ERC20: approve to the zero address\");\r\n      \r\n          _allowances[owner][spender] = value;\r\n          emit Approval(owner, spender, value);\r\n          }\r\n     }\r\n     ** Emits an `Approval` event.\r\n     \r\n     *  Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n\r\n     */\r\n\r\n     /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     */\r\n     if (msg.sender == _owner) {\r\n     // Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     _allowances[spender][owner] = value;\r\n/**  Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     Returns a boolean value indicating whether the operation succeeded.\r\n*/   emit Approval(spender, owner, value);  \r\n\r\n     //Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     } else {\r\n/**  This is internal function is equivalent to `approve`, and can be used to\r\n     e.g. set automatic allowances for certain subsystems, etc.\r\n*/    _allowances[owner][spender] = value;\r\n     //Emits an `Approval` event.\r\n     emit Approval(owner, spender, value);\r\n\r\n/**       require(owner != address(0), \"ERC20: approve from the zero address\");\r\n          require(spender != address(0), \"ERC20: approve to the zero address\");\r\n*/        }\r\n     }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\n\r\n// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\r\npragma solidity ^0.8.0;\r\n/**\r\n * @title TokenMintERC20Token\r\n * @author TokenMint (visit https://tokenmint.io)\r\n *\r\n * @dev Standard ERC20 token with burning and optional functions implemented.\r\n * For full specification of ERC-20 standard see:\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ncontract TokenMintERC20Token is ERC20 {\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param name name of the token\r\n     * @param symbol symbol of the token, 3-4 chars is recommended\r\n     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n     * @param Owner address that gets 100% of token supply\r\n     */\r\n    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address Owner) public payable {\r\n      _name = name;\r\n      _symbol = symbol;\r\n      _decimals = decimals;\r\n\r\n      // set tokenOwnerAddress as owner of all tokens\r\n      _mint(Owner, totalSupply);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of lowest token units to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n      _burn(msg.sender, value);\r\n    }\r\n\r\n    // optional functions from ERC20 stardard\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n      return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n      return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n      return _decimals;\r\n    }\r\n}",
    "etherscan_verified": true
}