{
    "address": "0x1142dFfAA66edAac7562BE5c2A7dACeB4387D6b8",
    "tx_hash": "f7e11c4452cfc604d0a0d15af4d99f83b9cdbf4ac92fe8be89a073aa19d13c67",
    "block_number": 18009762,
    "timestamp": 1693184891,
    "gas_used_in_creation": 1834957,
    "creation_bytecode": "60806040526007805460ff191690556014600881815560098290556001600a818155600b91909155600c839055600d92909255600f600e8190555f905562000047916200033e565b6200005590614e2062000355565b601055620000666008600a6200033e565b6200007490614e2062000355565b601155620000856008600a6200033e565b6200009390610bb862000355565b601255620000a46008600a6200033e565b620000b29061271062000355565b6013556015805461ffff60a81b19169055348015620000cf575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060078054610100600160a81b0319166101003302179055620001356008600a6200033e565b6200014490620f424062000355565b335f9081526001602081905260408220929092556003906200016d5f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556007546101009004909116835291208054909216179055620001d03390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002096008600a6200033e565b6200021890620f424062000355565b60405190815260200160405180910390a36200036f565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200028357815f19048211156200026757620002676200022f565b808516156200027557918102915b93841c939080029062000248565b509250929050565b5f826200029b5750600162000338565b81620002a957505f62000338565b8160018114620002c25760028114620002cd57620002ed565b600191505062000338565b60ff841115620002e157620002e16200022f565b50506001821b62000338565b5060208310610133831016604e8410600b841016171562000312575081810a62000338565b6200031e838362000243565b805f19048211156200033457620003346200022f565b0290505b92915050565b5f6200034e60ff8416836200028b565b9392505050565b80820281158282048414176200033857620003386200022f565b61195b806200037d5f395ff3fe60806040526004361061011e575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb14610339578063bf474bed14610358578063c876d0b91461036d578063c9567bf914610386578063dd62ed3e1461039a575f80fd5b8063751039fc146102a65780637d1db4a5146102ba5780638da5cb5b146102cf5780638f9a55c0146102f557806395d89b411461030a575f80fd5b8063313ce567116100e3578063313ce567146101f65780633bbac5791461021157806351bc3c851461024857806370a082311461025e578063715018a614610292575f80fd5b806306fdde0314610129578063095ea7b3146101715780630faee56f146101a057806318160ddd146101c357806323b872dd146101d7575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b5060408051808201909152600e81526d04e69676761732034205472756d760941b60208201525b604051610168919061154e565b60405180910390f35b34801561017c575f80fd5b5061019061018b3660046115b0565b6103de565b6040519015158152602001610168565b3480156101ab575f80fd5b506101b560135481565b604051908152602001610168565b3480156101ce575f80fd5b506101b56103f4565b3480156101e2575f80fd5b506101906101f13660046115da565b610413565b348015610201575f80fd5b5060405160088152602001610168565b34801561021c575f80fd5b5061019061022b366004611618565b6001600160a01b03165f9081526005602052604090205460ff1690565b348015610253575f80fd5b5061025c61047a565b005b348015610269575f80fd5b506101b5610278366004611618565b6001600160a01b03165f9081526001602052604090205490565b34801561029d575f80fd5b5061025c6104d0565b3480156102b1575f80fd5b5061025c61054a565b3480156102c5575f80fd5b506101b560105481565b3480156102da575f80fd5b505f546040516001600160a01b039091168152602001610168565b348015610300575f80fd5b506101b560115481565b348015610315575f80fd5b506040805180820190915260078152661391950c8c0c8d60ca1b602082015261015b565b348015610344575f80fd5b506101906103533660046115b0565b610602565b348015610363575f80fd5b506101b560125481565b348015610378575f80fd5b506007546101909060ff1681565b348015610391575f80fd5b5061025c61060e565b3480156103a5575f80fd5b506101b56103b4366004611633565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103ea3384846109b6565b5060015b92915050565b5f6104016008600a61175e565b61040e90620f424061176c565b905090565b5f61041f848484610ad9565b610470843361046b856040518060600160405280602881526020016118fe602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906111ad565b6109b6565b5060019392505050565b60075461010090046001600160a01b0316336001600160a01b03161461049e575f80fd5b305f9081526001602052604090205480156104bc576104bc816111e5565b4780156104cc576104cc8161136e565b5050565b5f546001600160a01b031633146105025760405162461bcd60e51b81526004016104f990611783565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105735760405162461bcd60e51b81526004016104f990611783565b61057f6008600a61175e565b61058c90620f424061176c565b60105561059b6008600a61175e565b6105a890620f424061176c565b6011556007805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105e26008600a61175e565b6105ef90620f424061176c565b60405190815260200160405180910390a1565b5f6103ea338484610ad9565b5f546001600160a01b031633146106375760405162461bcd60e51b81526004016104f990611783565b601554600160a01b900460ff16156106915760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104f9565b601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106d99030906106cc6008600a61175e565b61046b90620f424061176c565b60145f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610729573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061074d91906117b8565b6001600160a01b031663c9c653963060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d091906117b8565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561081a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061083e91906117b8565b601580546001600160a01b039283166001600160a01b03199091161790556014541663f305d7194730610885816001600160a01b03165f9081526001602052604090205490565b5f806108985f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156108fe573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061092391906117d3565b505060155460145460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610978573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061099c91906117fe565b506015805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b038316610a185760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104f9565b6001600160a01b038216610a795760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104f9565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b3d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104f9565b6001600160a01b038216610b9f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104f9565b5f8111610c005760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104f9565b5f80546001600160a01b03858116911614801590610c2b57505f546001600160a01b03848116911614155b15611070576001600160a01b0384165f9081526005602052604090205460ff16158015610c7057506001600160a01b0383165f9081526005602052604090205460ff16155b610c78575f80fd5b60075460ff1615610d2f576014546001600160a01b03848116911614801590610caf57506015546001600160a01b03848116911614155b15610d2f57325f908152600660205260409020544311610d1d5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b60648201526084016104f9565b325f9081526006602052604090204390555b6015546001600160a01b038581169116148015610d5a57506014546001600160a01b03848116911614155b8015610d7e57506001600160a01b0383165f9081526003602052604090205460ff16155b15610e9957601054821115610dd15760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104f9565b60115482610df3856001600160a01b03165f9081526001602052604090205490565b610dfd919061181d565b1115610e4b5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104f9565b600e54600f541015610e6257823b15610e62575f80fd5b600f8054905f610e7183611830565b90915550506001600160a01b0383165f908152600460205260409020805460ff191660011790555b610ec56064610ebf600c54600f5411610eb457600854610eb8565b600a545b85906113a9565b9061142e565b6015549091506001600160a01b038481169116148015610eee57506001600160a01b0384163014155b15610fd357601054821115610f415760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104f9565b610f666064610ebf600d54600f5411610f5c57600954610eb8565b600b5485906113a9565b9050600e54600f541180610f9157506001600160a01b0384165f9081526004602052604090205460ff165b610fd35760405162461bcd60e51b815260206004820152601360248201527229b2b63632b91034b9903737ba10313abcb2b960691b60448201526064016104f9565b305f90815260016020526040902054601554600160a81b900460ff1615801561100957506015546001600160a01b038581169116145b801561101e5750601554600160b01b900460ff165b801561102b575060125481115b801561103a5750600e54600f54115b1561106e5761105c611057846110528460135461146f565b61146f565b6111e5565b47801561106c5761106c4761136e565b505b505b80156110e857305f9081526001602052604090205461108f9082611483565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110df9085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461110a90836114e1565b6001600160a01b0385165f9081526001602052604090205561114d61112f83836114e1565b6001600160a01b0385165f9081526001602052604090205490611483565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61119685856114e1565b60405190815260200160405180910390a350505050565b5f81848411156111d05760405162461bcd60e51b81526004016104f9919061154e565b505f6111dc8486611848565b95945050505050565b6015805460ff60a81b1916600160a81b179055801561135e57601554600160a01b900460ff161561135e576040805160028082526060820183525f9260208301908036833701905050905030815f815181106112435761124361185b565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561129a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112be91906117b8565b816001815181106112d1576112d161185b565b6001600160a01b0392831660209182029290920101526014546112f791309116846109b6565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac9479061132f9085905f9086903090429060040161186f565b5f604051808303815f87803b158015611346575f80fd5b505af1158015611358573d5f803e3d5ffd5b50505050505b506015805460ff60a81b19169055565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104cc573d5f803e3d5ffd5b5f825f036113b857505f6103ee565b5f6113c3838561176c565b9050826113d085836118de565b146114275760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104f9565b9392505050565b5f61142783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611522565b5f81831161147d5782611427565b50919050565b5f8061148f838561181d565b9050838110156114275760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104f9565b5f61142783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111ad565b5f81836115425760405162461bcd60e51b81526004016104f9919061154e565b505f6111dc84866118de565b5f6020808352835180828501525f5b818110156115795785810183015185820160400152820161155d565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146115ad575f80fd5b50565b5f80604083850312156115c1575f80fd5b82356115cc81611599565b946020939093013593505050565b5f805f606084860312156115ec575f80fd5b83356115f781611599565b9250602084013561160781611599565b929592945050506040919091013590565b5f60208284031215611628575f80fd5b813561142781611599565b5f8060408385031215611644575f80fd5b823561164f81611599565b9150602083013561165f81611599565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156116b857815f190482111561169e5761169e61166a565b808516156116ab57918102915b93841c9390800290611683565b509250929050565b5f826116ce575060016103ee565b816116da57505f6103ee565b81600181146116f057600281146116fa57611716565b60019150506103ee565b60ff84111561170b5761170b61166a565b50506001821b6103ee565b5060208310610133831016604e8410600b8410161715611739575081810a6103ee565b611743838361167e565b805f19048211156117565761175661166a565b029392505050565b5f61142760ff8416836116c0565b80820281158282048414176103ee576103ee61166a565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156117c8575f80fd5b815161142781611599565b5f805f606084860312156117e5575f80fd5b8351925060208401519150604084015190509250925092565b5f6020828403121561180e575f80fd5b81518015158114611427575f80fd5b808201808211156103ee576103ee61166a565b5f600182016118415761184161166a565b5060010190565b818103818111156103ee576103ee61166a565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118bd5784516001600160a01b031683529383019391830191600101611898565b50506001600160a01b03969096166060850152505050608001529392505050565b5f826118f857634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220420e6c1961c2bad9477b296feb5adf93d33dce46a3bc1b4267c7365f509b1d0264736f6c63430008140033",
    "runtime_bytecode": "60806040526004361061011e575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb14610339578063bf474bed14610358578063c876d0b91461036d578063c9567bf914610386578063dd62ed3e1461039a575f80fd5b8063751039fc146102a65780637d1db4a5146102ba5780638da5cb5b146102cf5780638f9a55c0146102f557806395d89b411461030a575f80fd5b8063313ce567116100e3578063313ce567146101f65780633bbac5791461021157806351bc3c851461024857806370a082311461025e578063715018a614610292575f80fd5b806306fdde0314610129578063095ea7b3146101715780630faee56f146101a057806318160ddd146101c357806323b872dd146101d7575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b5060408051808201909152600e81526d04e69676761732034205472756d760941b60208201525b604051610168919061154e565b60405180910390f35b34801561017c575f80fd5b5061019061018b3660046115b0565b6103de565b6040519015158152602001610168565b3480156101ab575f80fd5b506101b560135481565b604051908152602001610168565b3480156101ce575f80fd5b506101b56103f4565b3480156101e2575f80fd5b506101906101f13660046115da565b610413565b348015610201575f80fd5b5060405160088152602001610168565b34801561021c575f80fd5b5061019061022b366004611618565b6001600160a01b03165f9081526005602052604090205460ff1690565b348015610253575f80fd5b5061025c61047a565b005b348015610269575f80fd5b506101b5610278366004611618565b6001600160a01b03165f9081526001602052604090205490565b34801561029d575f80fd5b5061025c6104d0565b3480156102b1575f80fd5b5061025c61054a565b3480156102c5575f80fd5b506101b560105481565b3480156102da575f80fd5b505f546040516001600160a01b039091168152602001610168565b348015610300575f80fd5b506101b560115481565b348015610315575f80fd5b506040805180820190915260078152661391950c8c0c8d60ca1b602082015261015b565b348015610344575f80fd5b506101906103533660046115b0565b610602565b348015610363575f80fd5b506101b560125481565b348015610378575f80fd5b506007546101909060ff1681565b348015610391575f80fd5b5061025c61060e565b3480156103a5575f80fd5b506101b56103b4366004611633565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103ea3384846109b6565b5060015b92915050565b5f6104016008600a61175e565b61040e90620f424061176c565b905090565b5f61041f848484610ad9565b610470843361046b856040518060600160405280602881526020016118fe602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906111ad565b6109b6565b5060019392505050565b60075461010090046001600160a01b0316336001600160a01b03161461049e575f80fd5b305f9081526001602052604090205480156104bc576104bc816111e5565b4780156104cc576104cc8161136e565b5050565b5f546001600160a01b031633146105025760405162461bcd60e51b81526004016104f990611783565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105735760405162461bcd60e51b81526004016104f990611783565b61057f6008600a61175e565b61058c90620f424061176c565b60105561059b6008600a61175e565b6105a890620f424061176c565b6011556007805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105e26008600a61175e565b6105ef90620f424061176c565b60405190815260200160405180910390a1565b5f6103ea338484610ad9565b5f546001600160a01b031633146106375760405162461bcd60e51b81526004016104f990611783565b601554600160a01b900460ff16156106915760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104f9565b601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106d99030906106cc6008600a61175e565b61046b90620f424061176c565b60145f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610729573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061074d91906117b8565b6001600160a01b031663c9c653963060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d091906117b8565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561081a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061083e91906117b8565b601580546001600160a01b039283166001600160a01b03199091161790556014541663f305d7194730610885816001600160a01b03165f9081526001602052604090205490565b5f806108985f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156108fe573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061092391906117d3565b505060155460145460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610978573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061099c91906117fe565b506015805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b038316610a185760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104f9565b6001600160a01b038216610a795760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104f9565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b3d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104f9565b6001600160a01b038216610b9f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104f9565b5f8111610c005760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104f9565b5f80546001600160a01b03858116911614801590610c2b57505f546001600160a01b03848116911614155b15611070576001600160a01b0384165f9081526005602052604090205460ff16158015610c7057506001600160a01b0383165f9081526005602052604090205460ff16155b610c78575f80fd5b60075460ff1615610d2f576014546001600160a01b03848116911614801590610caf57506015546001600160a01b03848116911614155b15610d2f57325f908152600660205260409020544311610d1d5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b60648201526084016104f9565b325f9081526006602052604090204390555b6015546001600160a01b038581169116148015610d5a57506014546001600160a01b03848116911614155b8015610d7e57506001600160a01b0383165f9081526003602052604090205460ff16155b15610e9957601054821115610dd15760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104f9565b60115482610df3856001600160a01b03165f9081526001602052604090205490565b610dfd919061181d565b1115610e4b5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104f9565b600e54600f541015610e6257823b15610e62575f80fd5b600f8054905f610e7183611830565b90915550506001600160a01b0383165f908152600460205260409020805460ff191660011790555b610ec56064610ebf600c54600f5411610eb457600854610eb8565b600a545b85906113a9565b9061142e565b6015549091506001600160a01b038481169116148015610eee57506001600160a01b0384163014155b15610fd357601054821115610f415760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104f9565b610f666064610ebf600d54600f5411610f5c57600954610eb8565b600b5485906113a9565b9050600e54600f541180610f9157506001600160a01b0384165f9081526004602052604090205460ff165b610fd35760405162461bcd60e51b815260206004820152601360248201527229b2b63632b91034b9903737ba10313abcb2b960691b60448201526064016104f9565b305f90815260016020526040902054601554600160a81b900460ff1615801561100957506015546001600160a01b038581169116145b801561101e5750601554600160b01b900460ff165b801561102b575060125481115b801561103a5750600e54600f54115b1561106e5761105c611057846110528460135461146f565b61146f565b6111e5565b47801561106c5761106c4761136e565b505b505b80156110e857305f9081526001602052604090205461108f9082611483565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110df9085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461110a90836114e1565b6001600160a01b0385165f9081526001602052604090205561114d61112f83836114e1565b6001600160a01b0385165f9081526001602052604090205490611483565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61119685856114e1565b60405190815260200160405180910390a350505050565b5f81848411156111d05760405162461bcd60e51b81526004016104f9919061154e565b505f6111dc8486611848565b95945050505050565b6015805460ff60a81b1916600160a81b179055801561135e57601554600160a01b900460ff161561135e576040805160028082526060820183525f9260208301908036833701905050905030815f815181106112435761124361185b565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561129a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112be91906117b8565b816001815181106112d1576112d161185b565b6001600160a01b0392831660209182029290920101526014546112f791309116846109b6565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac9479061132f9085905f9086903090429060040161186f565b5f604051808303815f87803b158015611346575f80fd5b505af1158015611358573d5f803e3d5ffd5b50505050505b506015805460ff60a81b19169055565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104cc573d5f803e3d5ffd5b5f825f036113b857505f6103ee565b5f6113c3838561176c565b9050826113d085836118de565b146114275760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104f9565b9392505050565b5f61142783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611522565b5f81831161147d5782611427565b50919050565b5f8061148f838561181d565b9050838110156114275760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104f9565b5f61142783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111ad565b5f81836115425760405162461bcd60e51b81526004016104f9919061154e565b505f6111dc84866118de565b5f6020808352835180828501525f5b818110156115795785810183015185820160400152820161155d565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146115ad575f80fd5b50565b5f80604083850312156115c1575f80fd5b82356115cc81611599565b946020939093013593505050565b5f805f606084860312156115ec575f80fd5b83356115f781611599565b9250602084013561160781611599565b929592945050506040919091013590565b5f60208284031215611628575f80fd5b813561142781611599565b5f8060408385031215611644575f80fd5b823561164f81611599565b9150602083013561165f81611599565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156116b857815f190482111561169e5761169e61166a565b808516156116ab57918102915b93841c9390800290611683565b509250929050565b5f826116ce575060016103ee565b816116da57505f6103ee565b81600181146116f057600281146116fa57611716565b60019150506103ee565b60ff84111561170b5761170b61166a565b50506001821b6103ee565b5060208310610133831016604e8410600b8410161715611739575081810a6103ee565b611743838361167e565b805f19048211156117565761175661166a565b029392505050565b5f61142760ff8416836116c0565b80820281158282048414176103ee576103ee61166a565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156117c8575f80fd5b815161142781611599565b5f805f606084860312156117e5575f80fd5b8351925060208401519150604084015190509250925092565b5f6020828403121561180e575f80fd5b81518015158114611427575f80fd5b808201808211156103ee576103ee61166a565b5f600182016118415761184161166a565b5060010190565b818103818111156103ee576103ee61166a565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156118bd5784516001600160a01b031683529383019391830191600101611898565b50506001600160a01b03969096166060850152505050608001529392505050565b5f826118f857634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220420e6c1961c2bad9477b296feb5adf93d33dce46a3bc1b4267c7365f509b1d0264736f6c63430008140033",
    "contract_name": "NFT2024",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\nWebsite: https://niggas4trump.website\r\n\r\nTelegram: https://t.me/Niggas4TrumpERC\r\n\r\nTwitter: https://x.com/niggas4trumperc\r\n\r\n// SPDX-License-Identifier: Unlicense\r\n*/\r\npragma solidity 0.8.20;\r\n\r\n/**\r\n**/\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract NFT2024 is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _buyerMap;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=20;\r\n    uint256 private _initialSellTax=20;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=20;\r\n    uint256 private _reduceSellTaxAt=20;\r\n    uint256 private _preventSwapBefore=15;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 8;\r\n    uint256 private constant _tTotal = 1000000 * 10**_decimals;\r\n    string private constant _name = unicode\"Niggas 4 Trump\";\r\n    string private constant _symbol = unicode\"NFT2024\";\r\n    uint256 public _maxTxAmount =   20000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 20000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 3000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 10000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_buyCount<_preventSwapBefore){\r\n                  require(!isContract(to));\r\n                }\r\n                _buyCount++;\r\n                _buyerMap[to]=true;\r\n            }\r\n\r\n\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n                require(_buyCount>_preventSwapBefore || _buyerMap[from],\"Seller is not buyer\");\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n}",
    "etherscan_verified": true
}