{
    "address": "0x3De5be19D4c2eA5F9c93E556383E286fe2101A96",
    "tx_hash": "97f29188e895b9f1cc2c263406156cff5251f2ad716322e7cbbbcde9ee3953cd",
    "block_number": 18003106,
    "timestamp": 1693104323,
    "gas_used_in_creation": 1797161,
    "creation_bytecode": "60806040526006805460ff19166001179055600f600755601e600890815560046009819055600a9081556014600b819055600c819055600d555f600e5562000048919062000357565b6200005a906512309ce540006200036e565b600f556200006b6008600a62000357565b6200007d906512309ce540006200036e565b6010556200008e6008600a62000357565b620000a0906512309ce540006200036e565b601155620000b16008600a62000357565b620000c3906512309ce540006200036e565b6012556014805461ffff60a81b19169055348015620000e0575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060068054610100600160a81b0319166101003302179055620001466008600a62000357565b620001599066038d7ea4c680006200036e565b335f908152600160208190526040822092909255600390620001825f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556006546101009004909116835291208054909216179055620001e53390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6200021e6008600a62000357565b620002319066038d7ea4c680006200036e565b60405190815260200160405180910390a362000388565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200029c57815f190482111562000280576200028062000248565b808516156200028e57918102915b93841c939080029062000261565b509250929050565b5f82620002b45750600162000351565b81620002c257505f62000351565b8160018114620002db5760028114620002e65762000306565b600191505062000351565b60ff841115620002fa57620002fa62000248565b50506001821b62000351565b5060208310610133831016604e8410600b84101617156200032b575081810a62000351565b6200033783836200025c565b805f19048211156200034d576200034d62000248565b0290505b92915050565b5f6200036760ff841683620002a4565b9392505050565b808202811582820484141762000351576200035162000248565b6118ab80620003965f395ff3fe60806040526004361061011e575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb14610301578063bf474bed14610320578063c876d0b914610335578063c9567bf91461034e578063dd62ed3e14610362575f80fd5b8063751039fc1461029d5780637d1db4a5146102b15780638da5cb5b146102c65780638f9a55c0146102ec57806395d89b4114610129575f80fd5b8063313ce567116100e3578063313ce567146101ed5780633bbac5791461020857806351bc3c851461023f57806370a0823114610255578063715018a614610289575f80fd5b806306fdde0314610129578063095ea7b3146101685780630faee56f1461019757806318160ddd146101ba57806323b872dd146101ce575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b506040805180820182526008815267534849415045504560c01b6020820152905161015f919061149e565b60405180910390f35b348015610173575f80fd5b50610187610182366004611500565b6103a6565b604051901515815260200161015f565b3480156101a2575f80fd5b506101ac60125481565b60405190815260200161015f565b3480156101c5575f80fd5b506101ac6103bc565b3480156101d9575f80fd5b506101876101e836600461152a565b6103df565b3480156101f8575f80fd5b506040516008815260200161015f565b348015610213575f80fd5b50610187610222366004611568565b6001600160a01b03165f9081526004602052604090205460ff1690565b34801561024a575f80fd5b50610253610446565b005b348015610260575f80fd5b506101ac61026f366004611568565b6001600160a01b03165f9081526001602052604090205490565b348015610294575f80fd5b5061025361049c565b3480156102a8575f80fd5b50610253610516565b3480156102bc575f80fd5b506101ac600f5481565b3480156102d1575f80fd5b505f546040516001600160a01b03909116815260200161015f565b3480156102f7575f80fd5b506101ac60105481565b34801561030c575f80fd5b5061018761031b366004611500565b6105da565b34801561032b575f80fd5b506101ac60115481565b348015610340575f80fd5b506006546101879060ff1681565b348015610359575f80fd5b506102536105e6565b34801561036d575f80fd5b506101ac61037c366004611583565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103b2338484610992565b5060015b92915050565b5f6103c96008600a6116ae565b6103da9066038d7ea4c680006116bc565b905090565b5f6103eb848484610ab5565b61043c84336104378560405180606001604052806028815260200161184e602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906110fd565b610992565b5060019392505050565b60065461010090046001600160a01b0316336001600160a01b03161461046a575f80fd5b305f9081526001602052604090205480156104885761048881611135565b47801561049857610498816112be565b5050565b5f546001600160a01b031633146104ce5760405162461bcd60e51b81526004016104c5906116d3565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b0316331461053f5760405162461bcd60e51b81526004016104c5906116d3565b61054b6008600a6116ae565b61055c9066038d7ea4c680006116bc565b600f5561056b6008600a6116ae565b61057c9066038d7ea4c680006116bc565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105b66008600a6116ae565b6105c79066038d7ea4c680006116bc565b60405190815260200160405180910390a1565b5f6103b2338484610ab5565b5f546001600160a01b0316331461060f5760405162461bcd60e51b81526004016104c5906116d3565b601454600160a01b900460ff16156106695760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104c5565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106b59030906106a46008600a6116ae565b6104379066038d7ea4c680006116bc565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610705573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107299190611708565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610788573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107ac9190611708565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156107f6573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061081a9190611708565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d7194730610861816001600160a01b03165f9081526001602052604090205490565b5f806108745f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156108da573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906108ff9190611723565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610954573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610978919061174e565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b0383166109f45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104c5565b6001600160a01b038216610a555760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104c5565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b195760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104c5565b6001600160a01b038216610b7b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104c5565b5f8111610bdc5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104c5565b5f80546001600160a01b03858116911614801590610c0757505f546001600160a01b03848116911614155b15610fc0576001600160a01b0384165f9081526004602052604090205460ff16158015610c4c57506001600160a01b0383165f9081526004602052604090205460ff16155b610c54575f80fd5b60065460ff1615610d0b576013546001600160a01b03848116911614801590610c8b57506014546001600160a01b03848116911614155b15610d0b57325f908152600560205260409020544311610cf95760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b60648201526084016104c5565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610d3657506013546001600160a01b03848116911614155b8015610d5a57506001600160a01b0383165f9081526003602052604090205460ff16155b15610e5357600f54821115610dad5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104c5565b60105482610dcf856001600160a01b03165f9081526001602052604090205490565b610dd9919061176d565b1115610e275760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104c5565b600d54600e541015610e3e57823b15610e3e575f80fd5b600e8054905f610e4d83611780565b91905055505b610e7f6064610e79600b54600e5411610e6e57600754610e72565b6009545b85906112f9565b9061137e565b6014549091506001600160a01b038481169116148015610ea857506001600160a01b0384163014155b15610f2357600f54821115610efb5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104c5565b610f206064610e79600c54600e5411610f1657600854610e72565b600a5485906112f9565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610f5957506014546001600160a01b038581169116145b8015610f6e5750601454600160b01b900460ff165b8015610f7b575060115481115b8015610f8a5750600d54600e54115b15610fbe57610fac610fa784610fa2846012546113bf565b6113bf565b611135565b478015610fbc57610fbc476112be565b505b505b801561103857305f90815260016020526040902054610fdf90826113d3565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061102f9085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461105a9083611431565b6001600160a01b0385165f9081526001602052604090205561109d61107f8383611431565b6001600160a01b0385165f90815260016020526040902054906113d3565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110e68585611431565b60405190815260200160405180910390a350505050565b5f81848411156111205760405162461bcd60e51b81526004016104c5919061149e565b505f61112c8486611798565b95945050505050565b6014805460ff60a81b1916600160a81b17905580156112ae57601454600160a01b900460ff16156112ae576040805160028082526060820183525f9260208301908036833701905050905030815f81518110611193576111936117ab565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156111ea573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061120e9190611708565b81600181518110611221576112216117ab565b6001600160a01b0392831660209182029290920101526013546112479130911684610992565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac9479061127f9085905f908690309042906004016117bf565b5f604051808303815f87803b158015611296575f80fd5b505af11580156112a8573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f19350505050158015610498573d5f803e3d5ffd5b5f825f0361130857505f6103b6565b5f61131383856116bc565b905082611320858361182e565b146113775760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104c5565b9392505050565b5f61137783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611472565b5f8183116113cd5782611377565b50919050565b5f806113df838561176d565b9050838110156113775760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104c5565b5f61137783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110fd565b5f81836114925760405162461bcd60e51b81526004016104c5919061149e565b505f61112c848661182e565b5f6020808352835180828501525f5b818110156114c9578581018301518582016040015282016114ad565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146114fd575f80fd5b50565b5f8060408385031215611511575f80fd5b823561151c816114e9565b946020939093013593505050565b5f805f6060848603121561153c575f80fd5b8335611547816114e9565b92506020840135611557816114e9565b929592945050506040919091013590565b5f60208284031215611578575f80fd5b8135611377816114e9565b5f8060408385031215611594575f80fd5b823561159f816114e9565b915060208301356115af816114e9565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561160857815f19048211156115ee576115ee6115ba565b808516156115fb57918102915b93841c93908002906115d3565b509250929050565b5f8261161e575060016103b6565b8161162a57505f6103b6565b8160018114611640576002811461164a57611666565b60019150506103b6565b60ff84111561165b5761165b6115ba565b50506001821b6103b6565b5060208310610133831016604e8410600b8410161715611689575081810a6103b6565b61169383836115ce565b805f19048211156116a6576116a66115ba565b029392505050565b5f61137760ff841683611610565b80820281158282048414176103b6576103b66115ba565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f60208284031215611718575f80fd5b8151611377816114e9565b5f805f60608486031215611735575f80fd5b8351925060208401519150604084015190509250925092565b5f6020828403121561175e575f80fd5b81518015158114611377575f80fd5b808201808211156103b6576103b66115ba565b5f60018201611791576117916115ba565b5060010190565b818103818111156103b6576103b66115ba565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b8181101561180d5784516001600160a01b0316835293830193918301916001016117e8565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261184857634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220645d6582a8956f18bfab2f86e74049e75f5050dc71a1a36bac1563d60adb65a964736f6c63430008140033",
    "runtime_bytecode": "60806040526004361061011e575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb14610301578063bf474bed14610320578063c876d0b914610335578063c9567bf91461034e578063dd62ed3e14610362575f80fd5b8063751039fc1461029d5780637d1db4a5146102b15780638da5cb5b146102c65780638f9a55c0146102ec57806395d89b4114610129575f80fd5b8063313ce567116100e3578063313ce567146101ed5780633bbac5791461020857806351bc3c851461023f57806370a0823114610255578063715018a614610289575f80fd5b806306fdde0314610129578063095ea7b3146101685780630faee56f1461019757806318160ddd146101ba57806323b872dd146101ce575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b506040805180820182526008815267534849415045504560c01b6020820152905161015f919061149e565b60405180910390f35b348015610173575f80fd5b50610187610182366004611500565b6103a6565b604051901515815260200161015f565b3480156101a2575f80fd5b506101ac60125481565b60405190815260200161015f565b3480156101c5575f80fd5b506101ac6103bc565b3480156101d9575f80fd5b506101876101e836600461152a565b6103df565b3480156101f8575f80fd5b506040516008815260200161015f565b348015610213575f80fd5b50610187610222366004611568565b6001600160a01b03165f9081526004602052604090205460ff1690565b34801561024a575f80fd5b50610253610446565b005b348015610260575f80fd5b506101ac61026f366004611568565b6001600160a01b03165f9081526001602052604090205490565b348015610294575f80fd5b5061025361049c565b3480156102a8575f80fd5b50610253610516565b3480156102bc575f80fd5b506101ac600f5481565b3480156102d1575f80fd5b505f546040516001600160a01b03909116815260200161015f565b3480156102f7575f80fd5b506101ac60105481565b34801561030c575f80fd5b5061018761031b366004611500565b6105da565b34801561032b575f80fd5b506101ac60115481565b348015610340575f80fd5b506006546101879060ff1681565b348015610359575f80fd5b506102536105e6565b34801561036d575f80fd5b506101ac61037c366004611583565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103b2338484610992565b5060015b92915050565b5f6103c96008600a6116ae565b6103da9066038d7ea4c680006116bc565b905090565b5f6103eb848484610ab5565b61043c84336104378560405180606001604052806028815260200161184e602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906110fd565b610992565b5060019392505050565b60065461010090046001600160a01b0316336001600160a01b03161461046a575f80fd5b305f9081526001602052604090205480156104885761048881611135565b47801561049857610498816112be565b5050565b5f546001600160a01b031633146104ce5760405162461bcd60e51b81526004016104c5906116d3565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b0316331461053f5760405162461bcd60e51b81526004016104c5906116d3565b61054b6008600a6116ae565b61055c9066038d7ea4c680006116bc565b600f5561056b6008600a6116ae565b61057c9066038d7ea4c680006116bc565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105b66008600a6116ae565b6105c79066038d7ea4c680006116bc565b60405190815260200160405180910390a1565b5f6103b2338484610ab5565b5f546001600160a01b0316331461060f5760405162461bcd60e51b81526004016104c5906116d3565b601454600160a01b900460ff16156106695760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104c5565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106b59030906106a46008600a6116ae565b6104379066038d7ea4c680006116bc565b60135f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610705573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107299190611708565b6001600160a01b031663c9c653963060135f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610788573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107ac9190611708565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156107f6573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061081a9190611708565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d7194730610861816001600160a01b03165f9081526001602052604090205490565b5f806108745f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156108da573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906108ff9190611723565b505060145460135460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610954573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610978919061174e565b506014805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b0383166109f45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104c5565b6001600160a01b038216610a555760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104c5565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610b195760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104c5565b6001600160a01b038216610b7b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104c5565b5f8111610bdc5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104c5565b5f80546001600160a01b03858116911614801590610c0757505f546001600160a01b03848116911614155b15610fc0576001600160a01b0384165f9081526004602052604090205460ff16158015610c4c57506001600160a01b0383165f9081526004602052604090205460ff16155b610c54575f80fd5b60065460ff1615610d0b576013546001600160a01b03848116911614801590610c8b57506014546001600160a01b03848116911614155b15610d0b57325f908152600560205260409020544311610cf95760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b60648201526084016104c5565b325f9081526005602052604090204390555b6014546001600160a01b038581169116148015610d3657506013546001600160a01b03848116911614155b8015610d5a57506001600160a01b0383165f9081526003602052604090205460ff16155b15610e5357600f54821115610dad5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104c5565b60105482610dcf856001600160a01b03165f9081526001602052604090205490565b610dd9919061176d565b1115610e275760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104c5565b600d54600e541015610e3e57823b15610e3e575f80fd5b600e8054905f610e4d83611780565b91905055505b610e7f6064610e79600b54600e5411610e6e57600754610e72565b6009545b85906112f9565b9061137e565b6014549091506001600160a01b038481169116148015610ea857506001600160a01b0384163014155b15610f2357600f54821115610efb5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104c5565b610f206064610e79600c54600e5411610f1657600854610e72565b600a5485906112f9565b90505b305f90815260016020526040902054601454600160a81b900460ff16158015610f5957506014546001600160a01b038581169116145b8015610f6e5750601454600160b01b900460ff165b8015610f7b575060115481115b8015610f8a5750600d54600e54115b15610fbe57610fac610fa784610fa2846012546113bf565b6113bf565b611135565b478015610fbc57610fbc476112be565b505b505b801561103857305f90815260016020526040902054610fdf90826113d3565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061102f9085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461105a9083611431565b6001600160a01b0385165f9081526001602052604090205561109d61107f8383611431565b6001600160a01b0385165f90815260016020526040902054906113d3565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6110e68585611431565b60405190815260200160405180910390a350505050565b5f81848411156111205760405162461bcd60e51b81526004016104c5919061149e565b505f61112c8486611798565b95945050505050565b6014805460ff60a81b1916600160a81b17905580156112ae57601454600160a01b900460ff16156112ae576040805160028082526060820183525f9260208301908036833701905050905030815f81518110611193576111936117ab565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156111ea573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061120e9190611708565b81600181518110611221576112216117ab565b6001600160a01b0392831660209182029290920101526013546112479130911684610992565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac9479061127f9085905f908690309042906004016117bf565b5f604051808303815f87803b158015611296575f80fd5b505af11580156112a8573d5f803e3d5ffd5b50505050505b506014805460ff60a81b19169055565b6006546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f19350505050158015610498573d5f803e3d5ffd5b5f825f0361130857505f6103b6565b5f61131383856116bc565b905082611320858361182e565b146113775760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104c5565b9392505050565b5f61137783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611472565b5f8183116113cd5782611377565b50919050565b5f806113df838561176d565b9050838110156113775760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104c5565b5f61137783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110fd565b5f81836114925760405162461bcd60e51b81526004016104c5919061149e565b505f61112c848661182e565b5f6020808352835180828501525f5b818110156114c9578581018301518582016040015282016114ad565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146114fd575f80fd5b50565b5f8060408385031215611511575f80fd5b823561151c816114e9565b946020939093013593505050565b5f805f6060848603121561153c575f80fd5b8335611547816114e9565b92506020840135611557816114e9565b929592945050506040919091013590565b5f60208284031215611578575f80fd5b8135611377816114e9565b5f8060408385031215611594575f80fd5b823561159f816114e9565b915060208301356115af816114e9565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561160857815f19048211156115ee576115ee6115ba565b808516156115fb57918102915b93841c93908002906115d3565b509250929050565b5f8261161e575060016103b6565b8161162a57505f6103b6565b8160018114611640576002811461164a57611666565b60019150506103b6565b60ff84111561165b5761165b6115ba565b50506001821b6103b6565b5060208310610133831016604e8410600b8410161715611689575081810a6103b6565b61169383836115ce565b805f19048211156116a6576116a66115ba565b029392505050565b5f61137760ff841683611610565b80820281158282048414176103b6576103b66115ba565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f60208284031215611718575f80fd5b8151611377816114e9565b5f805f60608486031215611735575f80fd5b8351925060208401519150604084015190509250925092565b5f6020828403121561175e575f80fd5b81518015158114611377575f80fd5b808201808211156103b6576103b66115ba565b5f60018201611791576117916115ba565b5060010190565b818103818111156103b6576103b66115ba565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b8181101561180d5784516001600160a01b0316835293830193918301916001016117e8565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261184857634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220645d6582a8956f18bfab2f86e74049e75f5050dc71a1a36bac1563d60adb65a964736f6c63430008140033",
    "contract_name": "SHIAPEPE",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n\r\nhttps://shiapepe.com\r\nhttps://t.me/shiapepeofficial\r\nhttps://twitter.com/ShiaPepeErc\r\n\r\n**/\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract SHIAPEPE is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = true;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=15;\r\n    uint256 private _initialSellTax=30;\r\n    uint256 private _finalBuyTax=4;\r\n    uint256 private _finalSellTax=4;\r\n    uint256 private _reduceBuyTaxAt=20;\r\n    uint256 private _reduceSellTaxAt=20;\r\n    uint256 private _preventSwapBefore=20;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 8;\r\n    uint256 private constant _tTotal = 1000000000000000 * 10**_decimals;\r\n    string private constant _name = unicode\"SHIAPEPE\";\r\n    string private constant _symbol = unicode\"SHIAPEPE\";\r\n    uint256 public _maxTxAmount = 20000000000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 20000000000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 20000000000000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 20000000000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_buyCount<_preventSwapBefore){\r\n                  require(!isContract(to));\r\n                }\r\n                _buyCount++;\r\n            }\r\n\r\n\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n}",
    "etherscan_verified": true
}