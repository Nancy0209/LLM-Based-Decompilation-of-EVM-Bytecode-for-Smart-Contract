{
    "address": "0x31218E25Ad864a39c1e3623a1F0e52f2E286E3b4",
    "tx_hash": "07865e30f95b88dc8f8c02bdfcc2f9df29c4f558d8c8a5ef9bfc7f73942c6fa7",
    "block_number": 18002354,
    "timestamp": 1693095239,
    "gas_used_in_creation": 3911534,
    "creation_bytecode": "60806040526005805463ffffffff60a01b1916600160b81b178155600681905560075560c8620000326012600a6200049e565b620000419062989680620004b5565b6200004d9190620004cf565b6008556064620000606012600a6200049e565b6200006f9062989680620004b5565b6200007c906001620004b5565b620000889190620004cf565b600a5534801562000097575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811782556040805163c45a015560e01b81529051919263c45a01559282820192602092908290030181865afa15801562000138573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200015e9190620004ef565b6001600160a01b031663c9c653963060045f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001be573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620001e49190620004ef565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156200022f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620002559190620004ef565b600580546001600160a01b0319166001600160a01b03929092169190911790556200027d3390565b600980546001600160a01b0319166001600160a01b0392909216919091179055620002ab6012600a6200049e565b620002ba9062989680620004b5565b335f81815260016020526040812092909255907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002fc6012600a6200049e565b6200030b9062989680620004b5565b60405190815260200160405180910390a3600160035f620003335f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff19968716179055308152600390935281832080548516600190811790915560045490911683529120805490921617905562000517565b634e487b7160e01b5f52601160045260245ffd5b600181815b80851115620003e357815f1904821115620003c757620003c76200038f565b80851615620003d557918102915b93841c9390800290620003a8565b509250929050565b5f82620003fb5750600162000498565b816200040957505f62000498565b81600181146200042257600281146200042d576200044d565b600191505062000498565b60ff8411156200044157620004416200038f565b50506001821b62000498565b5060208310610133831016604e8410600b841016171562000472575081810a62000498565b6200047e8383620003a3565b805f19048211156200049457620004946200038f565b0290505b92915050565b5f620004ae60ff841683620003eb565b9392505050565b80820281158282048414176200049857620004986200038f565b5f82620004ea57634e487b7160e01b5f52601260045260245ffd5b500490565b5f6020828403121562000500575f80fd5b81516001600160a01b0381168114620004ae575f80fd5b61136b80620005255f395ff3fe60806040526004361061013f575f3560e01c80635342acb4116100b357806395d89b411161006d57806395d89b4114610389578063a9059cbb146103ba578063d82d2168146103d9578063dd62ed3e146103ed578063e0f3ccf514610431578063e4748b9e14610446575f80fd5b80635342acb4146102b057806370a08231146102e757806370c0e31b1461031b578063751039fc1461033a57806382247ec01461034e5780638da5cb5b14610363575f80fd5b80631b300e46116101045780631b300e461461020457806323b635851461021857806323b872dd14610237578063313ce567146102565780634ada218b146102715780635254743514610291575f80fd5b806306fdde031461014a57806307da68f51461018957806307df7a0d1461019f578063095ea7b3146101b357806318160ddd146101e2575f80fd5b3661014657005b5f80fd5b348015610155575f80fd5b50604080518082019091526005815264048695076560dc1b60208201525b6040516101809190610f89565b60405180910390f35b348015610194575f80fd5b5061019d61045b565b005b3480156101aa575f80fd5b5061019d6104a5565b3480156101be575f80fd5b506101d26101cd366004610feb565b6104e8565b6040519015158152602001610180565b3480156101ed575f80fd5b506101f66104fe565b604051908152602001610180565b34801561020f575f80fd5b5061019d61051d565b348015610223575f80fd5b506101d2610232366004611015565b61056d565b348015610242575f80fd5b506101d261025136600461102c565b610583565b348015610261575f80fd5b5060405160128152602001610180565b34801561027c575f80fd5b506005546101d290600160a01b900460ff1681565b34801561029c575f80fd5b5061019d6102ab366004611015565b6105ea565b3480156102bb575f80fd5b506101d26102ca36600461106a565b6001600160a01b03165f9081526003602052604090205460ff1690565b3480156102f2575f80fd5b506101f661030136600461106a565b6001600160a01b03165f9081526001602052604090205490565b348015610326575f80fd5b5061019d610335366004611085565b610667565b348015610345575f80fd5b5061019d610721565b348015610359575f80fd5b506101f6600a5481565b34801561036e575f80fd5b505f546040516001600160a01b039091168152602001610180565b348015610394575f80fd5b50604080518082019091526009815268486950765047616d6560b81b6020820152610173565b3480156103c5575f80fd5b506101d26103d4366004610feb565b610772565b3480156103e4575f80fd5b506101f661077e565b3480156103f8575f80fd5b506101f66104073660046110a5565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b34801561043c575f80fd5b506101f660075481565b348015610451575f80fd5b506101f660065481565b5f546001600160a01b0316331461048d5760405162461bcd60e51b8152600401610484906110dc565b60405180910390fd5b6005805463ffff00ff60a01b1916600160b81b179055565b5f546001600160a01b031633146104ce5760405162461bcd60e51b8152600401610484906110dc565b6005805463ffff00ff60a01b19166201000160a01b179055565b5f6104f43384846107f4565b5060015b92915050565b5f61050b6012600a611205565b6105189062989680611213565b905090565b5f546001600160a01b031633146105465760405162461bcd60e51b8152600401610484906110dc565b6105526012600a611205565b61055f9062989680611213565b600a555f6006819055600755565b5f61057b3361dead84610854565b506001919050565b5f61058f848484610854565b6105e084336105db8560405180606001604052806028815260200161130e602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190610bd8565b6107f4565b5060019392505050565b5f546001600160a01b031633146106135760405162461bcd60e51b8152600401610484906110dc565b5f81116106625760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742073686f756c64206e6f74206265207a65726f000000000000006044820152606401610484565b600855565b5f546001600160a01b031633146106905760405162461bcd60e51b8152600401610484906110dc565b60648211156106d35760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206e65772046656560881b6044820152606401610484565b60648111156107165760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206e65772046656560881b6044820152606401610484565b600691909155600755565b5f546001600160a01b0316331461074a5760405162461bcd60e51b8152600401610484906110dc565b6107566012600a611205565b6107639062989680611213565b600a5560036006819055600755565b5f6104f4338484610854565b5f806107886104fe565b60016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb495461dead5f527fb34209a263f6c38fe55f099e9e70f9d67e93982480ff3234a5e0108028ad164d549192506107ee916107e8908490610c10565b90610c10565b91505090565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b5f81116108b55760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610484565b6001600160a01b0383165f90815260036020526040812054819060ff16806108f457506001600160a01b0384165f9081526003602052604090205460ff165b905080610a9a57600554600160a01b900460ff1661094d5760405162461bcd60e51b8152602060048201526016602482015275151c98591a5b99c81a5cc81b9bdd081cdd185c9d195960521b6044820152606401610484565b6005546001600160a01b0390811690861603610a0057600a5483610985866001600160a01b03165f9081526001602052604090205490565b61098f919061122a565b11156109dd5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e0000000000006044820152606401610484565b6109fd60646109f760065486610c5890919063ffffffff16565b90610cd6565b91505b6005546001600160a01b0390811690851603610a3357610a3060646109f760075486610c5890919063ffffffff16565b91505b600554600160a81b900460ff16158015610a5a57506005546001600160a01b038581169116145b8015610a6f5750600554600160b01b900460ff165b8015610a8a5750600854305f90815260016020526040902054115b15610a9a57610a9a600854610d17565b8115610b1257305f90815260016020526040902054610ab99083610d77565b305f81815260016020526040908190209290925590516001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610b099086815260200190565b60405180910390a35b6001600160a01b0385165f90815260016020526040902054610b349084610c10565b6001600160a01b0386165f90815260016020526040902055610b77610b598484610c10565b6001600160a01b0386165f9081526001602052604090205490610d77565b6001600160a01b038086165f8181526001602052604090209290925586167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610bc08686610c10565b60405190815260200160405180910390a35050505050565b5f8184841115610bfb5760405162461bcd60e51b81526004016104849190610f89565b505f610c07848661123d565b95945050505050565b5f610c5183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610bd8565b9392505050565b5f825f03610c6757505f6104f8565b5f610c728385611213565b905082610c7f8583611250565b14610c515760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610484565b5f610c5183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610dd5565b5f610d2182610e01565b6009546040516001600160a01b039091169047905f81818185875af1925050503d805f8114610d6b576040519150601f19603f3d011682016040523d82523d5f602084013e610d70565b606091505b5050505050565b5f80610d83838561122a565b905083811015610c515760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610484565b5f8183610df55760405162461bcd60e51b81526004016104849190610f89565b505f610c078486611250565b6005805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f81518110610e4757610e4761126f565b60200260200101906001600160a01b031690816001600160a01b03168152505060045f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610edb9190611283565b81600181518110610eee57610eee61126f565b6001600160a01b039283166020918202929092010152600454610f1491309116846107f4565b6004805460405163791ac94760e01b81526001600160a01b039091169163791ac94791610f4b9186915f918791309142910161129e565b5f604051808303815f87803b158015610f62575f80fd5b505af1158015610f74573d5f803e3d5ffd5b50506005805460ff60a81b1916905550505050565b5f6020808352835180828501525f5b81811015610fb457858101830151858201604001528201610f98565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610fe8575f80fd5b50565b5f8060408385031215610ffc575f80fd5b823561100781610fd4565b946020939093013593505050565b5f60208284031215611025575f80fd5b5035919050565b5f805f6060848603121561103e575f80fd5b833561104981610fd4565b9250602084013561105981610fd4565b929592945050506040919091013590565b5f6020828403121561107a575f80fd5b8135610c5181610fd4565b5f8060408385031215611096575f80fd5b50508035926020909101359150565b5f80604083850312156110b6575f80fd5b82356110c181610fd4565b915060208301356110d181610fd4565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561115f57815f190482111561114557611145611111565b8085161561115257918102915b93841c939080029061112a565b509250929050565b5f82611175575060016104f8565b8161118157505f6104f8565b816001811461119757600281146111a1576111bd565b60019150506104f8565b60ff8411156111b2576111b2611111565b50506001821b6104f8565b5060208310610133831016604e8410600b84101617156111e0575081810a6104f8565b6111ea8383611125565b805f19048211156111fd576111fd611111565b029392505050565b5f610c5160ff841683611167565b80820281158282048414176104f8576104f8611111565b808201808211156104f8576104f8611111565b818103818111156104f8576104f8611111565b5f8261126a57634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215611293575f80fd5b8151610c5181610fd4565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156112ec5784516001600160a01b0316835293830193918301916001016112c7565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220dce24ebadd1fd0193987960d76d3aad179a0c43baef1d163262e66b1aa6431c664736f6c63430008150033",
    "runtime_bytecode": "",
    "contract_name": "Token",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RemoveOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"}],\"name\":\"modifyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeRestrictionsToZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTriggerAmountToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stealthLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n\r\n\r\n\u2705Telegram:https://t.me/hipvpgameportal\r\n\r\n\u2705Twitter:https://twitter.com/HiPvPGame\r\n\r\n\u2705Website:https://www.hipvpgame.xyz/\r\n\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval (address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Token is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool public tradingEnabled = false;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    bool private open = true;\r\n\r\n\r\n    string private constant _name = \"HiPvP\";\r\n    string private constant _symbol = unicode\"HiPvPGame\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _tTotal = 10000000 * 10**_decimals;\r\n    uint256 public buyFees = 5;\r\n    uint256 public sellFees = 5;\r\n    \r\n    uint256 _triggerAmountToSwap = _tTotal / 200;\r\n\r\n    address payable private _taxWallet;\r\n\r\n    uint256 public _maxWallet = _tTotal * 1 / 100;\r\n\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[address(uniswapV2Router)] = true;\r\n    }\r\n\r\n    \r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount = 0;\r\n        bool txInWhiteList = (_isExcludedFromFee[from] || _isExcludedFromFee[to]);\r\n        if (!txInWhiteList) {\r\n            require(tradingEnabled, \"Trading is not started\");\r\n\r\n            if (from == uniswapV2Pair) {\r\n                //buy\r\n                require(balanceOf(to) + amount <= _maxWallet, \"Exceeds the maxWalletSize.\");\r\n                taxAmount = amount.mul(buyFees).div(100);\r\n            }\r\n\r\n            if (to == uniswapV2Pair ) {\r\n                taxAmount = amount.mul(sellFees).div(100);\r\n            }\r\n\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && balanceOf(address(this)) > _triggerAmountToSwap) {\r\n                doSwapBack(_triggerAmountToSwap);\r\n            }\r\n        }\r\n\r\n        if(taxAmount > 0) {\r\n            _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n            emit Transfer(from, address(this),taxAmount);\r\n        }\r\n\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function doSwapBack(uint256 amount) private {\r\n        bool success;\r\n        swapTokensForEth(amount);\r\n        (success, ) = address(_taxWallet).call{value: address(this).balance}(\"\");\r\n    }\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function setTriggerAmountToSwap(uint amount) external onlyOwner {\r\n        require(amount>0, \"amount should not be zero\");\r\n        _triggerAmountToSwap = amount;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    \r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    function modifyFee(uint256 buy,uint256 sell) external onlyOwner {\r\n        require(buy <= 100, \"invalid new Fee\");\r\n         require(sell <= 100, \"invalid new Fee\");\r\n        buyFees = buy;\r\n        sellFees = sell;\r\n    }\r\n    function removeLimits() external onlyOwner {\r\n        _maxWallet =_tTotal;\r\n        buyFees = 3;\r\n        sellFees = 3;\r\n    }\r\n\r\n    function stealthLaunch() external onlyOwner() {\r\n        open = false;\r\n        tradingEnabled = true;\r\n        swapEnabled = true;\r\n    }\r\n     \r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function manualBurn(uint256 amount) external returns (bool) {\r\n        _transfer(address(msg.sender), address(0xdead), amount);\r\n        return true;\r\n    }\r\n\r\n     function RemoveOwner() public returns (uint256) {\r\n        uint256 ts = totalSupply();\r\n        return ts.sub(balanceOf(address(0xdead))).sub(balanceOf(address(0x0)));\r\n    }\r\n\r\n    function stop() external onlyOwner() {\r\n        open = true;\r\n        tradingEnabled = false;\r\n        swapEnabled = false;\r\n    }\r\n\r\n   \r\n\r\n    function removeRestrictionsToZero() external onlyOwner {\r\n        _maxWallet =_tTotal;\r\n        buyFees = 0;\r\n        sellFees = 0;\r\n    }\r\n\r\n    \r\n\r\n}",
    "etherscan_verified": true
}