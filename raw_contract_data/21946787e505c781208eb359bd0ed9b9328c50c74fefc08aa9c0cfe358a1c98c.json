{
    "address": "0x3f23e180A37FC2F2fbFE32F4B37e86b88CA15a64",
    "tx_hash": "21946787e505c781208eb359bd0ed9b9328c50c74fefc08aa9c0cfe358a1c98c",
    "block_number": 18007145,
    "timestamp": 1693153163,
    "gas_used_in_creation": 1377654,
    "creation_bytecode": "608060405234801561001057600080fd5b506040516116af3803806116af83398101604081905261002f91610170565b61003833610120565b600680546001600160a01b0319166001600160a01b039290921691909117905560056020526103847f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc556107d07f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b55610c807f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a55611b587fa9bc9a3a348c357ba16b37005d7e6b3236198c0e939f4af8c5f19b8deeb8ebc0556004600052613e807f3eec716f11ba9e820c81ca75eb978ffb45831ef8b7a53e5e422c26008e1ca6d5556101a0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561018257600080fd5b81516001600160a01b038116811461019957600080fd5b9392505050565b611500806101af6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639e196cad11610097578063bf58390311610066578063bf58390314610248578063e627f2db14610250578063e9917c0714610258578063f2fde38b1461026b57600080fd5b80639e196cad146101ef578063a3fcd2531461020f578063ad9159fd14610222578063b8fcf9371461023557600080fd5b8063715018a6116100d3578063715018a6146101a45780637e61badd146101ae5780638b0e9f3f146101c15780638da5cb5b146101ca57600080fd5b8063063b35bf146101055780630ded03cd1461012e5780630e15561a1461014f5780633027ffc014610158575b600080fd5b6101186101133660046112e0565b61027e565b60405161012591906113d2565b60405180910390f35b61014161013c366004611335565b6102dd565b604051908152602001610125565b61014160025481565b6101956101663660046112e0565b6004602090815260009283526040808420909152908252902080546001820154600290920154909160ff169083565b604051610125939291906113e0565b6101ac6103e9565b005b6101ac6101bc366004611369565b6103fd565b61014160015481565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610125565b6101416101fd366004611335565b60056020526000908152604090205481565b6101ac61021d36600461138c565b610894565b6101416102303660046112e0565b6108dc565b6006546101d7906001600160a01b031681565b610141610933565b600254610141565b6101ac610266366004611369565b610a7e565b6101ac6102793660046112c5565b610e47565b6001600160a01b0382166000908152600460208190526040822090829084908111156102ac576102ac611488565b60048111156102bd576102bd611488565b815260208101919091526040016000206001015460ff1690505b92915050565b336000908152600460208190526040822082918290859081111561030357610303611488565b600481111561031457610314611488565b8152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900460ff16600481111561035b5761035b611488565b600481111561036c5761036c611488565b81526020016002820154815250509050600061038c826000015183610ec0565b905060006103b560186103af603c6103af603c8860400151426103af919061145b565b90610f1f565b9050600181106103c557806103c8565b60015b90506103e0816103da8461016c610f1f565b90610f2b565b95945050505050565b6103f1610f37565b6103fb6000610f91565b565b6000821161046c5760405162461bcd60e51b815260206004820152603160248201527f5374616b652076616c756520284e756d626572206f6620546f6b656e73292073604482015270686f756c64206e6f74206265207a65726f60781b60648201526084015b60405180910390fd5b3360009081526004602081905260408220908290849081111561049157610491611488565b60048111156104a2576104a2611488565b8152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900460ff1660048111156104e9576104e9611488565b60048111156104fa576104fa611488565b8152602001600282015481525050905061051381610fe1565b61057a5760405162461bcd60e51b815260206004820152603260248201527f5374616b696e6720706572696f6420686173206e6f7420657870697265642e20604482015271506c656173652077616974206d6f7265202160701b6064820152608401610463565b80518311156105c25760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590814dd185ad948105b5bdd5b9d60621b6044820152606401610463565b60006105cd836102dd565b82519091506105dc9085611006565b8252336000908152600460208190526040822084929091869081111561060457610604611488565b600481111561061557610615611488565b8152602080820192909252604001600020825181559082015160018083018054909160ff199091169083600481111561065057610650611488565b02179055506040919091015160029091015560015461066f9085611006565b60015560025461067f9082611012565b6002553360009081526004602081905260408220919085908111156106a6576106a6611488565b60048111156106b7576106b7611488565b81526020810191909152604001600020546106d5576106d53361101e565b60065460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561072157600080fd5b505af1158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190611313565b506006546001600160a01b03166323b872dd61077d6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015233602482015260448101849052606401602060405180830381600087803b1580156107cb57600080fd5b505af11580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190611313565b50336001600160a01b03167f20b8c145b65cb389fbd3274ce53ddf475d0167c30e65fc56215bbc9988670f56858542604051610841939291906113e0565b60405180910390a2336001600160a01b03167f6719f60144372d022e82b9bbcec8a044fc8dbaf58504f89906532d12008e4c57828542604051610886939291906113e0565b60405180910390a250505050565b61089c610f37565b8160ff16600560008360048111156108b6576108b6611488565b60048111156108c7576108c7611488565b81526020810191909152604001600020555050565b6001600160a01b03821660009081526004602081905260408220908290849081111561090a5761090a611488565b600481111561091b5761091b611488565b81526020810191909152604001600020549392505050565b600654600090610a79906001600160a01b03166370a0823161095d6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d49190611350565b6006546001600160a01b031663dd62ed3e6109f76000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b158015610a3c57600080fd5b505afa158015610a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a749190611350565b6110e7565b905090565b60008211610ace5760405162461bcd60e51b815260206004820152601e60248201527f7374616b652076616c75652073686f756c64206e6f74206265207a65726f00006044820152606401610463565b6006546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610b2057600080fd5b505af1158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190611313565b610b9c5760405162461bcd60e51b8152602060048201526015602482015274151bdad95b88151c985b9cd9995c8811985a5b1959605a1b6044820152606401610463565b336000908152600460208190526040822091908390811115610bc057610bc0611488565b6004811115610bd157610bd1611488565b8152602081019190915260400160002054610cb057610bef336110fd565b6040518060600160405280838152602001826004811115610c1257610c12611488565b81524260209182015233600090815260049182905260408120918490811115610c3d57610c3d611488565b6004811115610c4e57610c4e611488565b8152602080820192909252604001600020825181559082015160018083018054909160ff1990911690836004811115610c8957610c89611488565b021790555060409190910151600290910155600154610ca89083611012565b600155610dfe565b33600090815260046020819052604082209082908490811115610cd557610cd5611488565b6004811115610ce657610ce6611488565b8152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900460ff166004811115610d2d57610d2d611488565b6004811115610d3e57610d3e611488565b8152600291909101546020909101528051909150610d5c9084611012565b8152426040808301919091523360009081526004602081905291812083929091908590811115610d8e57610d8e611488565b6004811115610d9f57610d9f611488565b8152602080820192909252604001600020825181559082015160018083018054909160ff1990911690836004811115610dda57610dda611488565b021790555060409190910151600290910155600154610df99084611012565b600155505b336001600160a01b03167fadd17b9d82cb146eaff151f4f864faa55b09599b4eff7714935025b99054fe1c838342604051610e3b939291906113e0565b60405180910390a25050565b610e4f610f37565b6001600160a01b038116610eb45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610463565b610ebd81610f91565b50565b6000610f1860646103af60646103af6005600088602001516004811115610ee957610ee9611488565b6004811115610efa57610efa611488565b81526020019081526020016000205488610f2b90919063ffffffff16565b9392505050565b6000610f18828461141a565b6000610f18828461143c565b6000546001600160a01b031633146103fb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610463565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080610fed83611160565b8360400151610ffc9190611402565b4210159392505050565b6000610f18828461145b565b6000610f188284611402565b60008061102a8361122f565b9150915081156110e257600380546110449060019061145b565b81548110611054576110546114b4565b600091825260209091200154600380546001600160a01b039092169183908110611080576110806114b4565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060038054806110bf576110bf61149e565b600082815260209020810160001990810180546001600160a01b03191690550190555b505050565b60008183106110f65781610f18565b5090919050565b60006111088261122f565b5090508061115c57600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0384161790555b5050565b6000808260200151600481111561117957611179611488565b1461121e5760018260200151600481111561119657611196611488565b14611215576002826020015160048111156111b3576111b3611488565b1461120c576003826020015160048111156111d0576111d0611488565b14611203576004826020015160048111156111ed576111ed611488565b146111f9576000611223565b6301e13380611223565b62ed4e00611223565b6276a700611223565b624f1a00611223565b62278d005b63ffffffff1692915050565b60008060005b60035481101561128e5760038181548110611252576112526114b4565b6000918252602090912001546001600160a01b038581169116141561127c57600194909350915050565b611287600182611402565b9050611235565b50600093849350915050565b80356001600160a01b03811681146112b157600080fd5b919050565b8035600581106112b157600080fd5b6000602082840312156112d757600080fd5b610f188261129a565b600080604083850312156112f357600080fd5b6112fc8361129a565b915061130a602084016112b6565b90509250929050565b60006020828403121561132557600080fd5b81518015158114610f1857600080fd5b60006020828403121561134757600080fd5b610f18826112b6565b60006020828403121561136257600080fd5b5051919050565b6000806040838503121561137c57600080fd5b8235915061130a602084016112b6565b6000806040838503121561139f57600080fd5b823560ff811681146112fc57600080fd5b600581106113ce57634e487b7160e01b600052602160045260246000fd5b9052565b602081016102d782846113b0565b838152606081016113f460208301856113b0565b826040830152949350505050565b6000821982111561141557611415611472565b500190565b60008261143757634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561145657611456611472565b500290565b60008282101561146d5761146d611472565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220ec6305b284f608a33359dbe0ac10f968dee6e7733d420d31d018ea154401a9cd64736f6c63430008070033000000000000000000000000e1223f2d494c37f83e1bdda5015e990938f00d81",
    "runtime_bytecode": "",
    "contract_name": "STAKINGContract",
    "compiler_version": "v0.8.7+commit.e28d00a7",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_myToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenUnstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"_stakePeriod\",\"type\":\"uint8\"}],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"_stakePeriod\",\"type\":\"uint8\"}],\"name\":\"getDailyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"_stakePeriod\",\"type\":\"uint8\"}],\"name\":\"setApyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"_stakePeriod\",\"type\":\"uint8\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"stakePeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"_stakePeriod\",\"type\":\"uint8\"}],\"name\":\"stakingPeriodOf\",\"outputs\":[{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"enum STAKINGContract.StakingPeriod\",\"name\":\"_stakePeriod\",\"type\":\"uint8\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return\r\n                result +\r\n                (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return\r\n                result +\r\n                (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return\r\n                result +\r\n                (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return\r\n                result +\r\n                (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: staking.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract STAKINGContract is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalStake;\r\n    uint256 public totalRewards;\r\n\r\n    enum StakingPeriod {\r\n        ONE_MONTH,\r\n        TWO_MONTH,\r\n        THREE_MONTH,\r\n        SIX_MONTH,\r\n        ONE_YEAR\r\n    }\r\n\r\n    struct stake {\r\n        uint256 amount;\r\n        StakingPeriod stakePeriod;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    address[] internal stakeholders;\r\n\r\n    mapping(address => mapping(StakingPeriod => stake)) public stakes;\r\n    mapping(StakingPeriod => uint256) public apr;\r\n\r\n    IERC20 public myToken;\r\n\r\n    event TokenStaked(\r\n        address indexed _from,\r\n        uint256 amount,\r\n        StakingPeriod plan,\r\n        uint256 timestamp\r\n    );\r\n    event TokenUnstaked(\r\n        address indexed _from,\r\n        uint256 amount,\r\n        StakingPeriod plan,\r\n        uint256 timestamp\r\n    );\r\n    event RewardsTransferred(\r\n        address indexed _to,\r\n        uint256 amount,\r\n        StakingPeriod plan,\r\n        uint256 timestamp\r\n    );\r\n\r\n    constructor(address _myToken) {\r\n        myToken = IERC20(_myToken);\r\n        apr[StakingPeriod.ONE_MONTH] = 900; //9%\r\n        apr[StakingPeriod.TWO_MONTH] = 2000; //20%\r\n        apr[StakingPeriod.THREE_MONTH] = 3200; //32%\r\n        apr[StakingPeriod.SIX_MONTH] = 7000; //70%\r\n        apr[StakingPeriod.ONE_YEAR] = 16000; //160%\r\n    }\r\n\r\n    // ---------- STAKES ----------\r\n\r\n    function createStake(uint256 _stake, StakingPeriod _stakePeriod) public {\r\n        require(_stake > 0, \"stake value should not be zero\");\r\n        require(\r\n            myToken.transferFrom(msg.sender, address(this), _stake),\r\n            \"Token Transfer Failed\"\r\n        );\r\n        if (stakes[msg.sender][_stakePeriod].amount == 0) {\r\n            addStakeholder(msg.sender);\r\n            stakes[msg.sender][_stakePeriod] = stake(\r\n                _stake,\r\n                _stakePeriod,\r\n                block.timestamp\r\n            );\r\n            totalStake = totalStake.add(_stake);\r\n        } else {\r\n            stake memory tempStake = stakes[msg.sender][_stakePeriod];\r\n            tempStake.amount = tempStake.amount.add(_stake);\r\n            tempStake.timestamp = block.timestamp;\r\n            stakes[msg.sender][_stakePeriod] = tempStake;\r\n            totalStake = totalStake.add(_stake);\r\n        }\r\n        emit TokenStaked(msg.sender, _stake, _stakePeriod, block.timestamp);\r\n    }\r\n\r\n    function unStake(uint256 _stake, StakingPeriod _stakePeriod) public {\r\n        require(_stake > 0, \"Stake value (Number of Tokens) should not be zero\");\r\n        stake memory tempStake = stakes[msg.sender][_stakePeriod];\r\n        require(\r\n            validateStakingPeriod(tempStake),\r\n            \"Staking period has not expired. Please wait more !\"\r\n        );\r\n        require(_stake <= tempStake.amount, \"Invalid Stake Amount\");\r\n        uint256 _investorReward = getDailyRewards(_stakePeriod);\r\n        tempStake.amount = tempStake.amount.sub(_stake);\r\n        stakes[msg.sender][_stakePeriod] = tempStake;\r\n        totalStake = totalStake.sub(_stake);\r\n        totalRewards = totalRewards.add(_investorReward);\r\n        //uint256 tokensToBeTransfer = _stake.add(_investorReward);\r\n        if (stakes[msg.sender][_stakePeriod].amount == 0)\r\n            removeStakeholder(msg.sender);\r\n        myToken.transfer(msg.sender, _stake);\r\n        myToken.transferFrom(owner(), msg.sender, _investorReward);\r\n        emit TokenUnstaked(msg.sender, _stake, _stakePeriod, block.timestamp);\r\n        emit RewardsTransferred(\r\n            msg.sender,\r\n            _investorReward,\r\n            _stakePeriod,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getInvestorRewards(uint256 _unstakeAmount, stake memory _investor)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // uint256 investorStakingPeriod = getStakingPeriodInNumbers(_investor);\r\n        // uint APY = investorStakingPeriod == 26 weeks ? sixMonthAPR : investorStakingPeriod == 52 weeks ? oneYearAPR : investorStakingPeriod == 156 weeks ? threeYearAPR : 0;\r\n        return _unstakeAmount.mul(apr[_investor.stakePeriod]).div(100).div(100);\r\n    }\r\n\r\n    function validateStakingPeriod(stake memory _investor)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 stakingTimeStamp = _investor.timestamp +\r\n            getStakingPeriodInNumbers(_investor);\r\n        return block.timestamp >= stakingTimeStamp;\r\n    }\r\n\r\n    function getStakingPeriodInNumbers(stake memory _investor)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return\r\n            _investor.stakePeriod == StakingPeriod.ONE_MONTH\r\n                ? 30 days\r\n                : _investor.stakePeriod == StakingPeriod.TWO_MONTH\r\n                ? 60 days\r\n                : _investor.stakePeriod == StakingPeriod.THREE_MONTH\r\n                ? 90 days\r\n                : _investor.stakePeriod == StakingPeriod.SIX_MONTH\r\n                ? 180 days\r\n                : _investor.stakePeriod == StakingPeriod.ONE_YEAR\r\n                ? 365 days\r\n                : 0;\r\n    }\r\n\r\n    function stakeOf(address _stakeholder, StakingPeriod _stakePeriod)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return stakes[_stakeholder][_stakePeriod].amount;\r\n    }\r\n\r\n    function stakingPeriodOf(address _stakeholder, StakingPeriod _stakePeriod)\r\n        public\r\n        view\r\n        returns (StakingPeriod)\r\n    {\r\n        return stakes[_stakeholder][_stakePeriod].stakePeriod;\r\n    }\r\n\r\n    function getDailyRewards(StakingPeriod _stakePeriod)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        stake memory tempStake = stakes[msg.sender][_stakePeriod];\r\n        uint256 total_rewards = getInvestorRewards(tempStake.amount, tempStake);\r\n        uint256 noOfDays = (block.timestamp - tempStake.timestamp)\r\n            .div(60)\r\n            .div(60)\r\n            .div(24);\r\n        noOfDays = (noOfDays < 1) ? 1 : noOfDays;\r\n        // uint256 stakingPeriodInDays =  getStakingPeriodInNumbers(tempStake).div(60).div(60).div(24);\r\n        return total_rewards.div(364).mul(noOfDays);\r\n    }\r\n\r\n    // ---------- STAKEHOLDERS ----------\r\n\r\n    function isStakeholder(address _address)\r\n        internal\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1) {\r\n            if (_address == stakeholders[s]) return (true, s);\r\n        }\r\n        return (false, 0);\r\n    }\r\n\r\n    function addStakeholder(address _stakeholder) internal {\r\n        (bool _isStakeholder, ) = isStakeholder(_stakeholder);\r\n        if (!_isStakeholder) stakeholders.push(_stakeholder);\r\n    }\r\n\r\n    function removeStakeholder(address _stakeholder) internal {\r\n        (bool _isStakeholder, uint256 s) = isStakeholder(_stakeholder);\r\n        if (_isStakeholder) {\r\n            stakeholders[s] = stakeholders[stakeholders.length - 1];\r\n            stakeholders.pop();\r\n        }\r\n    }\r\n\r\n    // ---------- REWARDS ----------\r\n\r\n    function getTotalRewards() public view returns (uint256) {\r\n        return totalRewards;\r\n    }\r\n\r\n    // ---- Staking APY  setters ----\r\n\r\n    function setApyPercentage(uint8 _percentage, StakingPeriod _stakePeriod)\r\n        public\r\n        onlyOwner\r\n    {\r\n        apr[_stakePeriod] = _percentage;\r\n    }\r\n\r\n    function remainingTokens() public view returns (uint256) {\r\n        return\r\n            Math.min(\r\n                myToken.balanceOf(owner()),\r\n                myToken.allowance(owner(), address(this))\r\n            );\r\n    }\r\n}",
    "etherscan_verified": true
}