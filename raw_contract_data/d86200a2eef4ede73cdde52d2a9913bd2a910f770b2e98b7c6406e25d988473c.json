{
    "address": "0x54eEA875389f51FB46A26Ea5a5DbBa480ca74339",
    "tx_hash": "d86200a2eef4ede73cdde52d2a9913bd2a910f770b2e98b7c6406e25d988473c",
    "block_number": 18000041,
    "timestamp": 1693067387,
    "gas_used_in_creation": 3168171,
    "creation_bytecode": "600d805461ffff19169055600b60a09081526a536869696261612044414f60a81b60c052610120604052600760e0908152665368696962616160c81b6101005260036200004d838262000711565b5060046200005c828262000711565b50505062000079620000736200032760201b60201c565b6200032b565b737a250d5630b4cf539739df2c5dacb4c659f2488d6080819052620000a39030906000196200037d565b6a52b7d2dcc80cd2e40000006064620000be826002620007f3565b620000ca919062000813565b600a556064620000dc826002620007f3565b620000e8919062000813565b600c556103e8620000fb826001620007f3565b62000107919062000813565b600b556003600f8190556002601081905560006011819055916200012c919062000836565b62000138919062000836565b600e55600360138190556002601481905560006015819055916200015d919062000836565b62000169919062000836565b6012819055601955600780546001600160a01b031990811673666b45cd3b685941bfa0be1d5138fee804ecfc371790915560088054909116737f4f7ed84bb3ab61037755d1e78792c494d4d55b179055620001cc6005546001600160a01b031690565b600980546001600160a01b0319166001600160a01b03928316179055600554620001f991166001620004a9565b62000206306001620004a9565b6200021561dead6001620004a9565b6007546200022e906001600160a01b03166001620004a9565b60085462000247906001600160a01b03166001620004a9565b620002666200025e6005546001600160a01b031690565b600162000512565b6200027330600162000512565b6200028261dead600162000512565b6080516200029290600162000512565b600754620002ab906001600160a01b0316600162000512565b600854620002c4906001600160a01b0316600162000512565b600754620002f6906001600160a01b03166064620002e4846006620007f3565b620002f0919062000813565b62000547565b6200030c61dead6064620002e4846018620007f3565b62000320306064620002e4846046620007f3565b506200084c565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038316620003e55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084015b60405180910390fd5b6001600160a01b038216620004485760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401620003dc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b620004b36200060a565b6001600160a01b0382166000818152601a6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6200051c6200060a565b6001600160a01b03919091166000908152601b60205260409020805460ff1916911515919091179055565b6001600160a01b0382166200059f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620003dc565b8060026000828254620005b3919062000836565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6005546001600160a01b03163314620006665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620003dc565b565b505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200069857607f821691505b602082108103620006b957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200066857600081815260208120601f850160051c81016020861015620006e85750805b601f850160051c820191505b818110156200070957828155600101620006f4565b505050505050565b81516001600160401b038111156200072d576200072d6200066d565b62000745816200073e845462000683565b84620006bf565b602080601f8311600181146200077d5760008415620007645750858301515b600019600386901b1c1916600185901b17855562000709565b600085815260208120601f198616915b82811015620007ae578886015182559484019460019091019084016200078d565b5085821015620007cd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176200080d576200080d620007dd565b92915050565b6000826200083157634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156200080d576200080d620007dd565b608051612a72620008a7600039600081816102c30152818161097a01528181610a0b01528181610b4301528181610bf20152818161234f0152818161240801528181612444015281816124be01526124fd0152612a726000f3fe60806040526004361061024a5760003560e01c806395d89b4111610139578063cb963728116100b6578063e2f456051161007a578063e2f45605146106d7578063e37ba8f9146106ed578063f023f5731461070d578063f2fde38b1461072d578063f5648a4f1461074d578063f8b45b051461076257600080fd5b8063cb96372814610641578063d257b34f14610661578063d469801614610681578063d85ba063146106a1578063dd62ed3e146106b757600080fd5b8063bbc0c742116100fd578063bbc0c742146105b1578063c0246668146105cb578063c04a5414146105eb578063c17b5b8c1461060b578063c8c8ebe41461062b57600080fd5b806395d89b411461051c5780639618839914610531578063a457c2d714610551578063a9059cbb14610571578063aacebbe31461059157600080fd5b80634fbee193116101c75780637571336a1161018b5780637571336a1461048957806375f0a874146104a95780638095d564146104c95780638a8c523c146104e95780638da5cb5b146104fe57600080fd5b80634fbee193146103d05780636a486a8e146104095780636ddd17131461041f57806370a082311461043e578063715018a61461047457600080fd5b806327c8f8351161020e57806327c8f8351461033c578063313ce56714610352578063395093511461036e57806342966c681461038e57806349bd5a5e146103b057600080fd5b806306fdde0314610256578063095ea7b3146102815780631694505e146102b157806318160ddd146102fd57806323b872dd1461031c57600080fd5b3661025157005b600080fd5b34801561026257600080fd5b5061026b610778565b604051610278919061258b565b60405180910390f35b34801561028d57600080fd5b506102a161029c3660046125ee565b61080a565b6040519015158152602001610278565b3480156102bd57600080fd5b506102e57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610278565b34801561030957600080fd5b506002545b604051908152602001610278565b34801561032857600080fd5b506102a161033736600461261a565b610824565b34801561034857600080fd5b506102e561dead81565b34801561035e57600080fd5b5060405160128152602001610278565b34801561037a57600080fd5b506102a16103893660046125ee565b610848565b34801561039a57600080fd5b506103ae6103a936600461265b565b61086a565b005b3480156103bc57600080fd5b506006546102e5906001600160a01b031681565b3480156103dc57600080fd5b506102a16103eb366004612674565b6001600160a01b03166000908152601a602052604090205460ff1690565b34801561041557600080fd5b5061030e60125481565b34801561042b57600080fd5b50600d546102a190610100900460ff1681565b34801561044a57600080fd5b5061030e610459366004612674565b6001600160a01b031660009081526020819052604090205490565b34801561048057600080fd5b506103ae610877565b34801561049557600080fd5b506103ae6104a436600461269f565b61088b565b3480156104b557600080fd5b506007546102e5906001600160a01b031681565b3480156104d557600080fd5b506103ae6104e43660046126d8565b6108be565b3480156104f557600080fd5b506103ae61091d565b34801561050a57600080fd5b506005546001600160a01b03166102e5565b34801561052857600080fd5b5061026b610cce565b34801561053d57600080fd5b506103ae61054c366004612704565b610cdd565b34801561055d57600080fd5b506102a161056c3660046125ee565b610df2565b34801561057d57600080fd5b506102a161058c3660046125ee565b610e6d565b34801561059d57600080fd5b506103ae6105ac366004612674565b610e7b565b3480156105bd57600080fd5b50600d546102a19060ff1681565b3480156105d757600080fd5b506103ae6105e636600461269f565b610efa565b3480156105f757600080fd5b506008546102e5906001600160a01b031681565b34801561061757600080fd5b506103ae6106263660046126d8565b610f61565b34801561063757600080fd5b5061030e600a5481565b34801561064d57600080fd5b506103ae61065c366004612674565b610fb7565b34801561066d57600080fd5b506102a161067c36600461265b565b611142565b34801561068d57600080fd5b506009546102e5906001600160a01b031681565b3480156106ad57600080fd5b5061030e600e5481565b3480156106c357600080fd5b5061030e6106d2366004612726565b611282565b3480156106e357600080fd5b5061030e600b5481565b3480156106f957600080fd5b506103ae610708366004612674565b6112ad565b34801561071957600080fd5b506103ae610728366004612674565b61132c565b34801561073957600080fd5b506103ae610748366004612674565b6113ab565b34801561075957600080fd5b506103ae611421565b34801561076e57600080fd5b5061030e600c5481565b60606003805461078790612754565b80601f01602080910402602001604051908101604052809291908181526020018280546107b390612754565b80156108005780601f106107d557610100808354040283529160200191610800565b820191906000526020600020905b8154815290600101906020018083116107e357829003601f168201915b5050505050905090565b600033610818818585611476565b60019150505b92915050565b60003361083285828561159a565b61083d85858561160e565b506001949350505050565b60003361081881858561085b8383611282565b61086591906127a4565b611476565b6108743382611d38565b50565b61087f611e6a565b6108896000611ec4565b565b610893611e6a565b6001600160a01b03919091166000908152601b60205260409020805460ff1916911515919091179055565b6108c6611e6a565b600f83905560108290556011819055806108e083856127a4565b6108ea91906127a4565b600e819055600a10156109185760405162461bcd60e51b815260040161090f906127b7565b60405180910390fd5b505050565b610925611e6a565b600d5460ff16156109785760405162461bcd60e51b815260206004820152601760248201527f54726164696e6720616c7265616479206163746976652e000000000000000000604482015260640161090f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fa91906127fb565b6001600160a01b031663c9c65396307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8b91906127fb565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc91906127fb565b600680546001600160a01b0319166001600160a01b03929092169182179055610b29903090600019611476565b60065460405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190612818565b50600654610bd9906001600160a01b03166001611f16565b600654610bf0906001600160a01b0316600161088b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f305d7194730610c40306001600160a01b031660009081526020819052604090205490565b600080610c556005546001600160a01b031690565b426040518863ffffffff1660e01b8152600401610c7796959493929190612835565b60606040518083038185885af1158015610c95573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610cba9190612870565b5050600d805461ffff191661010117905550565b60606004805461078790612754565b610ce5611e6a565b6103e8610cf160025490565b610cfc90600561289e565b610d0691906128b5565b821015610d665760405162461bcd60e51b815260206004820152602860248201527f45524332303a2043616e6e6f7420736574206d617854786e206c6f776572207460448201526768616e20302e352560c01b606482015260840161090f565b6103e8610d7260025490565b610d7d90600561289e565b610d8791906128b5565b811015610dea5760405162461bcd60e51b815260206004820152602b60248201527f45524332303a2043616e6e6f7420736574206d617857616c6c6574206c6f776560448201526a72207468616e20302e352560a81b606482015260840161090f565b600c55600a55565b60003381610e008286611282565b905083811015610e605760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161090f565b61083d8286868403611476565b60003361081881858561160e565b610e83611e6a565b6001600160a01b038116610ea95760405162461bcd60e51b815260040161090f906128d7565b600780546001600160a01b038381166001600160a01b03198316811790935560405191169182917fa751787977eeb3902e30e1d19ca00c6ad274a1f622c31a206e32366700b0567490600090a35050565b610f02611e6a565b6001600160a01b0382166000818152601a6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b610f69611e6a565b60138390556014829055601581905580610f8383856127a4565b610f8d91906127a4565b60128190556019819055600a10156109185760405162461bcd60e51b815260040161090f906127b7565b610fbf611e6a565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a9190612901565b116110635760405162461bcd60e51b81526020600482015260096024820152684e6f20746f6b656e7360b81b604482015260640161090f565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156110aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ce9190612901565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561111e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109189190612818565b600061114c611e6a565b620186a061115960025490565b61116490600161289e565b61116e91906128b5565b8210156111e35760405162461bcd60e51b815260206004820152603c60248201527f45524332303a205377617020616d6f756e742063616e6e6f74206265206c6f7760448201527f6572207468616e20302e3030312520746f74616c20737570706c792e00000000606482015260840161090f565b6103e86111ef60025490565b6111fa90600561289e565b61120491906128b5565b8211156112795760405162461bcd60e51b815260206004820152603b60248201527f45524332303a205377617020616d6f756e742063616e6e6f742062652068696760448201527f686572207468616e20302e352520746f74616c20737570706c792e0000000000606482015260840161090f565b50600b55600190565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6112b5611e6a565b6001600160a01b0381166112db5760405162461bcd60e51b815260040161090f906128d7565b600980546001600160a01b038381166001600160a01b03198316811790935560405191169182917f3e0ea4f8339b6050ff814971a9814aa39176c149fcf185975c219f33db2342db90600090a35050565b611334611e6a565b6001600160a01b03811661135a5760405162461bcd60e51b815260040161090f906128d7565b600880546001600160a01b038381166001600160a01b03198316811790935560405191169182917ffaf1b77ed79f6e898c44dd8ab36b330c7b2fd39bcaab05ed6362480df870396590600090a35050565b6113b3611e6a565b6001600160a01b0381166114185760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161090f565b61087481611ec4565b611429611e6a565b604051600090339047908381818185875af1925050503d806000811461146b576040519150601f19603f3d011682016040523d82523d6000602084013e611470565b606091505b50505050565b6001600160a01b0383166114d85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161090f565b6001600160a01b0382166115395760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161090f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006115a68484611282565b9050600019811461147057818110156116015760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161090f565b6114708484848403611476565b6001600160a01b0383166116345760405162461bcd60e51b815260040161090f9061291a565b6001600160a01b03821661165a5760405162461bcd60e51b815260040161090f9061295f565b8060000361166e5761091883836000611f6a565b6005546001600160a01b0384811691161480159061169a57506005546001600160a01b03838116911614155b80156116ae57506001600160a01b03821615155b80156116c557506001600160a01b03821661dead14155b80156116db5750600654600160a01b900460ff16155b156119fe57600d5460ff16611775576001600160a01b0383166000908152601a602052604090205460ff168061172957506001600160a01b0382166000908152601a602052604090205460ff165b6117755760405162461bcd60e51b815260206004820152601d60248201527f45524332303a2054726164696e67206973206e6f74206163746976652e000000604482015260640161090f565b6001600160a01b0383166000908152601c602052604090205460ff1680156117b657506001600160a01b0382166000908152601b602052604090205460ff16155b156118ac57600a548111156118335760405162461bcd60e51b815260206004820152603c60248201527f45524332303a20427579207472616e7366657220616d6f756e7420657863656560448201527f647320746865206d61785472616e73616374696f6e416d6f756e742e00000000606482015260840161090f565b600c546001600160a01b03831660009081526020819052604090205461185990836127a4565b11156118a75760405162461bcd60e51b815260206004820152601a60248201527f45524332303a204d61782077616c6c6574206578636565646564000000000000604482015260640161090f565b6119fe565b6001600160a01b0382166000908152601c602052604090205460ff1680156118ed57506001600160a01b0383166000908152601b602052604090205460ff16155b1561196a57600a548111156118a75760405162461bcd60e51b815260206004820152603d60248201527f45524332303a2053656c6c207472616e7366657220616d6f756e74206578636560448201527f65647320746865206d61785472616e73616374696f6e416d6f756e742e000000606482015260840161090f565b6001600160a01b0382166000908152601b602052604090205460ff166119fe57600c546001600160a01b0383166000908152602081905260409020546119b090836127a4565b11156119fe5760405162461bcd60e51b815260206004820152601a60248201527f45524332303a204d61782077616c6c6574206578636565646564000000000000604482015260640161090f565b30600090815260208190526040902054600b5481108015908190611a295750600d54610100900460ff165b8015611a3f5750600654600160a01b900460ff16155b8015611a6457506001600160a01b0385166000908152601c602052604090205460ff16155b8015611a8957506001600160a01b0385166000908152601a602052604090205460ff16155b8015611aae57506001600160a01b0384166000908152601a602052604090205460ff16155b15611adc576006805460ff60a01b1916600160a01b179055611ace612094565b6006805460ff60a01b191690555b6006546001600160a01b0386166000908152601a602052604090205460ff600160a01b909204821615911680611b2a57506001600160a01b0385166000908152601a602052604090205460ff165b15611b33575060005b60008115611d1e576001600160a01b0386166000908152601c602052604090205460ff168015611b6557506000601254115b15611c2357611b8a6064611b84601254886122cd90919063ffffffff16565b906122e0565b905060125460155482611b9d919061289e565b611ba791906128b5565b60186000828254611bb891906127a4565b9091555050601254601354611bcd908361289e565b611bd791906128b5565b60166000828254611be891906127a4565b9091555050601254601454611bfd908361289e565b611c0791906128b5565b60176000828254611c1891906127a4565b90915550611d009050565b6001600160a01b0387166000908152601c602052604090205460ff168015611c4d57506000600e54115b15611d0057611c6c6064611b84600e54886122cd90919063ffffffff16565b9050600e5460115482611c7f919061289e565b611c8991906128b5565b60186000828254611c9a91906127a4565b9091555050600e54600f54611caf908361289e565b611cb991906128b5565b60166000828254611cca91906127a4565b9091555050600e54601054611cdf908361289e565b611ce991906128b5565b60176000828254611cfa91906127a4565b90915550505b8015611d1157611d11873083611f6a565b611d1b81866129a2565b94505b611d29878787611f6a565b50506019546012555050505050565b6001600160a01b038216611d985760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161090f565b6001600160a01b03821660009081526020819052604090205481811015611e0c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161090f565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6005546001600160a01b031633146108895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161090f565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166000818152601c6020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b038316611f905760405162461bcd60e51b815260040161090f9061291a565b6001600160a01b038216611fb65760405162461bcd60e51b815260040161090f9061295f565b6001600160a01b0383166000908152602081905260409020548181101561202e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161090f565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611470565b30600090815260208190526040812054905060006017546016546018546120bb91906127a4565b6120c591906127a4565b905060008215806120d4575081155b156120de57505050565b600b546120ec90601461289e565b83111561210457600b5461210190601461289e565b92505b600060028360185486612117919061289e565b61212191906128b5565b61212b91906128b5565b9050600061213985836122ec565b905047612145826122f8565b600061215147836122ec565b9050600061216e87611b84601654856122cd90919063ffffffff16565b9050600061218b88611b84601754866122cd90919063ffffffff16565b905060008161219a84866129a2565b6121a491906129a2565b600060188190556016819055601755905086158015906121c45750600081115b15612217576121d387826124b8565b601854604080518881526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6008546040516001600160a01b03909116908390600081818185875af1925050503d8060008114612264576040519150601f19603f3d011682016040523d82523d6000602084013e612269565b606091505b50506007546040519199506001600160a01b0316904790600081818185875af1925050503d80600081146122b9576040519150601f19603f3d011682016040523d82523d6000602084013e6122be565b606091505b50505050505050505050505050565b60006122d9828461289e565b9392505050565b60006122d982846128b5565b60006122d982846129a2565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061232d5761232d6129b5565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cf91906127fb565b816001815181106123e2576123e26129b5565b60200260200101906001600160a01b031690816001600160a01b03168152505061242d307f000000000000000000000000000000000000000000000000000000000000000084611476565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac947906124829085906000908690309042906004016129cb565b600060405180830381600087803b15801561249c57600080fd5b505af11580156124b0573d6000803e3d6000fd5b505050505050565b6124e3307f000000000000000000000000000000000000000000000000000000000000000084611476565b60095460405163f305d71960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f305d719928592612541923092899260009283929116904290600401612835565b60606040518083038185885af115801561255f573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906125849190612870565b5050505050565b600060208083528351808285015260005b818110156125b85785810183015185820160400152820161259c565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461087457600080fd5b6000806040838503121561260157600080fd5b823561260c816125d9565b946020939093013593505050565b60008060006060848603121561262f57600080fd5b833561263a816125d9565b9250602084013561264a816125d9565b929592945050506040919091013590565b60006020828403121561266d57600080fd5b5035919050565b60006020828403121561268657600080fd5b81356122d9816125d9565b801515811461087457600080fd5b600080604083850312156126b257600080fd5b82356126bd816125d9565b915060208301356126cd81612691565b809150509250929050565b6000806000606084860312156126ed57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561271757600080fd5b50508035926020909101359150565b6000806040838503121561273957600080fd5b8235612744816125d9565b915060208301356126cd816125d9565b600181811c9082168061276857607f821691505b60208210810361278857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561081e5761081e61278e565b60208082526024908201527f45524332303a204d757374206b656570206665657320617420313025206f72206040820152636c65737360e01b606082015260800190565b60006020828403121561280d57600080fd5b81516122d9816125d9565b60006020828403121561282a57600080fd5b81516122d981612691565b6001600160a01b039687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b60008060006060848603121561288557600080fd5b8351925060208401519150604084015190509250925092565b808202811582820484141761081e5761081e61278e565b6000826128d257634e487b7160e01b600052601260045260246000fd5b500490565b60208082526010908201526f045524332303a204164647265737320360841b604082015260600190565b60006020828403121561291357600080fd5b5051919050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b8181038181111561081e5761081e61278e565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612a1b5784516001600160a01b0316835293830193918301916001016129f6565b50506001600160a01b0396909616606085015250505060800152939250505056fea26469706673582212202341c17df3146acb5e78f7010eb5c000b1436d1607efabca74496500fad9f76b64736f6c63430008110033",
    "runtime_bytecode": "60806040526004361061024a5760003560e01c806395d89b4111610139578063cb963728116100b6578063e2f456051161007a578063e2f45605146106d7578063e37ba8f9146106ed578063f023f5731461070d578063f2fde38b1461072d578063f5648a4f1461074d578063f8b45b051461076257600080fd5b8063cb96372814610641578063d257b34f14610661578063d469801614610681578063d85ba063146106a1578063dd62ed3e146106b757600080fd5b8063bbc0c742116100fd578063bbc0c742146105b1578063c0246668146105cb578063c04a5414146105eb578063c17b5b8c1461060b578063c8c8ebe41461062b57600080fd5b806395d89b411461051c5780639618839914610531578063a457c2d714610551578063a9059cbb14610571578063aacebbe31461059157600080fd5b80634fbee193116101c75780637571336a1161018b5780637571336a1461048957806375f0a874146104a95780638095d564146104c95780638a8c523c146104e95780638da5cb5b146104fe57600080fd5b80634fbee193146103d05780636a486a8e146104095780636ddd17131461041f57806370a082311461043e578063715018a61461047457600080fd5b806327c8f8351161020e57806327c8f8351461033c578063313ce56714610352578063395093511461036e57806342966c681461038e57806349bd5a5e146103b057600080fd5b806306fdde0314610256578063095ea7b3146102815780631694505e146102b157806318160ddd146102fd57806323b872dd1461031c57600080fd5b3661025157005b600080fd5b34801561026257600080fd5b5061026b610778565b604051610278919061258b565b60405180910390f35b34801561028d57600080fd5b506102a161029c3660046125ee565b61080a565b6040519015158152602001610278565b3480156102bd57600080fd5b506102e57f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b039091168152602001610278565b34801561030957600080fd5b506002545b604051908152602001610278565b34801561032857600080fd5b506102a161033736600461261a565b610824565b34801561034857600080fd5b506102e561dead81565b34801561035e57600080fd5b5060405160128152602001610278565b34801561037a57600080fd5b506102a16103893660046125ee565b610848565b34801561039a57600080fd5b506103ae6103a936600461265b565b61086a565b005b3480156103bc57600080fd5b506006546102e5906001600160a01b031681565b3480156103dc57600080fd5b506102a16103eb366004612674565b6001600160a01b03166000908152601a602052604090205460ff1690565b34801561041557600080fd5b5061030e60125481565b34801561042b57600080fd5b50600d546102a190610100900460ff1681565b34801561044a57600080fd5b5061030e610459366004612674565b6001600160a01b031660009081526020819052604090205490565b34801561048057600080fd5b506103ae610877565b34801561049557600080fd5b506103ae6104a436600461269f565b61088b565b3480156104b557600080fd5b506007546102e5906001600160a01b031681565b3480156104d557600080fd5b506103ae6104e43660046126d8565b6108be565b3480156104f557600080fd5b506103ae61091d565b34801561050a57600080fd5b506005546001600160a01b03166102e5565b34801561052857600080fd5b5061026b610cce565b34801561053d57600080fd5b506103ae61054c366004612704565b610cdd565b34801561055d57600080fd5b506102a161056c3660046125ee565b610df2565b34801561057d57600080fd5b506102a161058c3660046125ee565b610e6d565b34801561059d57600080fd5b506103ae6105ac366004612674565b610e7b565b3480156105bd57600080fd5b50600d546102a19060ff1681565b3480156105d757600080fd5b506103ae6105e636600461269f565b610efa565b3480156105f757600080fd5b506008546102e5906001600160a01b031681565b34801561061757600080fd5b506103ae6106263660046126d8565b610f61565b34801561063757600080fd5b5061030e600a5481565b34801561064d57600080fd5b506103ae61065c366004612674565b610fb7565b34801561066d57600080fd5b506102a161067c36600461265b565b611142565b34801561068d57600080fd5b506009546102e5906001600160a01b031681565b3480156106ad57600080fd5b5061030e600e5481565b3480156106c357600080fd5b5061030e6106d2366004612726565b611282565b3480156106e357600080fd5b5061030e600b5481565b3480156106f957600080fd5b506103ae610708366004612674565b6112ad565b34801561071957600080fd5b506103ae610728366004612674565b61132c565b34801561073957600080fd5b506103ae610748366004612674565b6113ab565b34801561075957600080fd5b506103ae611421565b34801561076e57600080fd5b5061030e600c5481565b60606003805461078790612754565b80601f01602080910402602001604051908101604052809291908181526020018280546107b390612754565b80156108005780601f106107d557610100808354040283529160200191610800565b820191906000526020600020905b8154815290600101906020018083116107e357829003601f168201915b5050505050905090565b600033610818818585611476565b60019150505b92915050565b60003361083285828561159a565b61083d85858561160e565b506001949350505050565b60003361081881858561085b8383611282565b61086591906127a4565b611476565b6108743382611d38565b50565b61087f611e6a565b6108896000611ec4565b565b610893611e6a565b6001600160a01b03919091166000908152601b60205260409020805460ff1916911515919091179055565b6108c6611e6a565b600f83905560108290556011819055806108e083856127a4565b6108ea91906127a4565b600e819055600a10156109185760405162461bcd60e51b815260040161090f906127b7565b60405180910390fd5b505050565b610925611e6a565b600d5460ff16156109785760405162461bcd60e51b815260206004820152601760248201527f54726164696e6720616c7265616479206163746976652e000000000000000000604482015260640161090f565b7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fa91906127fb565b6001600160a01b031663c9c65396307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8b91906127fb565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc91906127fb565b600680546001600160a01b0319166001600160a01b03929092169182179055610b29903090600019611476565b60065460405163095ea7b360e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d8116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190612818565b50600654610bd9906001600160a01b03166001611f16565b600654610bf0906001600160a01b0316600161088b565b7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663f305d7194730610c40306001600160a01b031660009081526020819052604090205490565b600080610c556005546001600160a01b031690565b426040518863ffffffff1660e01b8152600401610c7796959493929190612835565b60606040518083038185885af1158015610c95573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610cba9190612870565b5050600d805461ffff191661010117905550565b60606004805461078790612754565b610ce5611e6a565b6103e8610cf160025490565b610cfc90600561289e565b610d0691906128b5565b821015610d665760405162461bcd60e51b815260206004820152602860248201527f45524332303a2043616e6e6f7420736574206d617854786e206c6f776572207460448201526768616e20302e352560c01b606482015260840161090f565b6103e8610d7260025490565b610d7d90600561289e565b610d8791906128b5565b811015610dea5760405162461bcd60e51b815260206004820152602b60248201527f45524332303a2043616e6e6f7420736574206d617857616c6c6574206c6f776560448201526a72207468616e20302e352560a81b606482015260840161090f565b600c55600a55565b60003381610e008286611282565b905083811015610e605760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161090f565b61083d8286868403611476565b60003361081881858561160e565b610e83611e6a565b6001600160a01b038116610ea95760405162461bcd60e51b815260040161090f906128d7565b600780546001600160a01b038381166001600160a01b03198316811790935560405191169182917fa751787977eeb3902e30e1d19ca00c6ad274a1f622c31a206e32366700b0567490600090a35050565b610f02611e6a565b6001600160a01b0382166000818152601a6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b610f69611e6a565b60138390556014829055601581905580610f8383856127a4565b610f8d91906127a4565b60128190556019819055600a10156109185760405162461bcd60e51b815260040161090f906127b7565b610fbf611e6a565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a9190612901565b116110635760405162461bcd60e51b81526020600482015260096024820152684e6f20746f6b656e7360b81b604482015260640161090f565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156110aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ce9190612901565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561111e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109189190612818565b600061114c611e6a565b620186a061115960025490565b61116490600161289e565b61116e91906128b5565b8210156111e35760405162461bcd60e51b815260206004820152603c60248201527f45524332303a205377617020616d6f756e742063616e6e6f74206265206c6f7760448201527f6572207468616e20302e3030312520746f74616c20737570706c792e00000000606482015260840161090f565b6103e86111ef60025490565b6111fa90600561289e565b61120491906128b5565b8211156112795760405162461bcd60e51b815260206004820152603b60248201527f45524332303a205377617020616d6f756e742063616e6e6f742062652068696760448201527f686572207468616e20302e352520746f74616c20737570706c792e0000000000606482015260840161090f565b50600b55600190565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6112b5611e6a565b6001600160a01b0381166112db5760405162461bcd60e51b815260040161090f906128d7565b600980546001600160a01b038381166001600160a01b03198316811790935560405191169182917f3e0ea4f8339b6050ff814971a9814aa39176c149fcf185975c219f33db2342db90600090a35050565b611334611e6a565b6001600160a01b03811661135a5760405162461bcd60e51b815260040161090f906128d7565b600880546001600160a01b038381166001600160a01b03198316811790935560405191169182917ffaf1b77ed79f6e898c44dd8ab36b330c7b2fd39bcaab05ed6362480df870396590600090a35050565b6113b3611e6a565b6001600160a01b0381166114185760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161090f565b61087481611ec4565b611429611e6a565b604051600090339047908381818185875af1925050503d806000811461146b576040519150601f19603f3d011682016040523d82523d6000602084013e611470565b606091505b50505050565b6001600160a01b0383166114d85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161090f565b6001600160a01b0382166115395760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161090f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006115a68484611282565b9050600019811461147057818110156116015760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161090f565b6114708484848403611476565b6001600160a01b0383166116345760405162461bcd60e51b815260040161090f9061291a565b6001600160a01b03821661165a5760405162461bcd60e51b815260040161090f9061295f565b8060000361166e5761091883836000611f6a565b6005546001600160a01b0384811691161480159061169a57506005546001600160a01b03838116911614155b80156116ae57506001600160a01b03821615155b80156116c557506001600160a01b03821661dead14155b80156116db5750600654600160a01b900460ff16155b156119fe57600d5460ff16611775576001600160a01b0383166000908152601a602052604090205460ff168061172957506001600160a01b0382166000908152601a602052604090205460ff165b6117755760405162461bcd60e51b815260206004820152601d60248201527f45524332303a2054726164696e67206973206e6f74206163746976652e000000604482015260640161090f565b6001600160a01b0383166000908152601c602052604090205460ff1680156117b657506001600160a01b0382166000908152601b602052604090205460ff16155b156118ac57600a548111156118335760405162461bcd60e51b815260206004820152603c60248201527f45524332303a20427579207472616e7366657220616d6f756e7420657863656560448201527f647320746865206d61785472616e73616374696f6e416d6f756e742e00000000606482015260840161090f565b600c546001600160a01b03831660009081526020819052604090205461185990836127a4565b11156118a75760405162461bcd60e51b815260206004820152601a60248201527f45524332303a204d61782077616c6c6574206578636565646564000000000000604482015260640161090f565b6119fe565b6001600160a01b0382166000908152601c602052604090205460ff1680156118ed57506001600160a01b0383166000908152601b602052604090205460ff16155b1561196a57600a548111156118a75760405162461bcd60e51b815260206004820152603d60248201527f45524332303a2053656c6c207472616e7366657220616d6f756e74206578636560448201527f65647320746865206d61785472616e73616374696f6e416d6f756e742e000000606482015260840161090f565b6001600160a01b0382166000908152601b602052604090205460ff166119fe57600c546001600160a01b0383166000908152602081905260409020546119b090836127a4565b11156119fe5760405162461bcd60e51b815260206004820152601a60248201527f45524332303a204d61782077616c6c6574206578636565646564000000000000604482015260640161090f565b30600090815260208190526040902054600b5481108015908190611a295750600d54610100900460ff165b8015611a3f5750600654600160a01b900460ff16155b8015611a6457506001600160a01b0385166000908152601c602052604090205460ff16155b8015611a8957506001600160a01b0385166000908152601a602052604090205460ff16155b8015611aae57506001600160a01b0384166000908152601a602052604090205460ff16155b15611adc576006805460ff60a01b1916600160a01b179055611ace612094565b6006805460ff60a01b191690555b6006546001600160a01b0386166000908152601a602052604090205460ff600160a01b909204821615911680611b2a57506001600160a01b0385166000908152601a602052604090205460ff165b15611b33575060005b60008115611d1e576001600160a01b0386166000908152601c602052604090205460ff168015611b6557506000601254115b15611c2357611b8a6064611b84601254886122cd90919063ffffffff16565b906122e0565b905060125460155482611b9d919061289e565b611ba791906128b5565b60186000828254611bb891906127a4565b9091555050601254601354611bcd908361289e565b611bd791906128b5565b60166000828254611be891906127a4565b9091555050601254601454611bfd908361289e565b611c0791906128b5565b60176000828254611c1891906127a4565b90915550611d009050565b6001600160a01b0387166000908152601c602052604090205460ff168015611c4d57506000600e54115b15611d0057611c6c6064611b84600e54886122cd90919063ffffffff16565b9050600e5460115482611c7f919061289e565b611c8991906128b5565b60186000828254611c9a91906127a4565b9091555050600e54600f54611caf908361289e565b611cb991906128b5565b60166000828254611cca91906127a4565b9091555050600e54601054611cdf908361289e565b611ce991906128b5565b60176000828254611cfa91906127a4565b90915550505b8015611d1157611d11873083611f6a565b611d1b81866129a2565b94505b611d29878787611f6a565b50506019546012555050505050565b6001600160a01b038216611d985760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161090f565b6001600160a01b03821660009081526020819052604090205481811015611e0c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161090f565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6005546001600160a01b031633146108895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161090f565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166000818152601c6020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b038316611f905760405162461bcd60e51b815260040161090f9061291a565b6001600160a01b038216611fb65760405162461bcd60e51b815260040161090f9061295f565b6001600160a01b0383166000908152602081905260409020548181101561202e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161090f565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611470565b30600090815260208190526040812054905060006017546016546018546120bb91906127a4565b6120c591906127a4565b905060008215806120d4575081155b156120de57505050565b600b546120ec90601461289e565b83111561210457600b5461210190601461289e565b92505b600060028360185486612117919061289e565b61212191906128b5565b61212b91906128b5565b9050600061213985836122ec565b905047612145826122f8565b600061215147836122ec565b9050600061216e87611b84601654856122cd90919063ffffffff16565b9050600061218b88611b84601754866122cd90919063ffffffff16565b905060008161219a84866129a2565b6121a491906129a2565b600060188190556016819055601755905086158015906121c45750600081115b15612217576121d387826124b8565b601854604080518881526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6008546040516001600160a01b03909116908390600081818185875af1925050503d8060008114612264576040519150601f19603f3d011682016040523d82523d6000602084013e612269565b606091505b50506007546040519199506001600160a01b0316904790600081818185875af1925050503d80600081146122b9576040519150601f19603f3d011682016040523d82523d6000602084013e6122be565b606091505b50505050505050505050505050565b60006122d9828461289e565b9392505050565b60006122d982846128b5565b60006122d982846129a2565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061232d5761232d6129b5565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cf91906127fb565b816001815181106123e2576123e26129b5565b60200260200101906001600160a01b031690816001600160a01b03168152505061242d307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84611476565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac947906124829085906000908690309042906004016129cb565b600060405180830381600087803b15801561249c57600080fd5b505af11580156124b0573d6000803e3d6000fd5b505050505050565b6124e3307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84611476565b60095460405163f305d71960e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81169263f305d719928592612541923092899260009283929116904290600401612835565b60606040518083038185885af115801561255f573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906125849190612870565b5050505050565b600060208083528351808285015260005b818110156125b85785810183015185820160400152820161259c565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461087457600080fd5b6000806040838503121561260157600080fd5b823561260c816125d9565b946020939093013593505050565b60008060006060848603121561262f57600080fd5b833561263a816125d9565b9250602084013561264a816125d9565b929592945050506040919091013590565b60006020828403121561266d57600080fd5b5035919050565b60006020828403121561268657600080fd5b81356122d9816125d9565b801515811461087457600080fd5b600080604083850312156126b257600080fd5b82356126bd816125d9565b915060208301356126cd81612691565b809150509250929050565b6000806000606084860312156126ed57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561271757600080fd5b50508035926020909101359150565b6000806040838503121561273957600080fd5b8235612744816125d9565b915060208301356126cd816125d9565b600181811c9082168061276857607f821691505b60208210810361278857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561081e5761081e61278e565b60208082526024908201527f45524332303a204d757374206b656570206665657320617420313025206f72206040820152636c65737360e01b606082015260800190565b60006020828403121561280d57600080fd5b81516122d9816125d9565b60006020828403121561282a57600080fd5b81516122d981612691565b6001600160a01b039687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b60008060006060848603121561288557600080fd5b8351925060208401519150604084015190509250925092565b808202811582820484141761081e5761081e61278e565b6000826128d257634e487b7160e01b600052601260045260246000fd5b500490565b60208082526010908201526f045524332303a204164647265737320360841b604082015260600190565b60006020828403121561291357600080fd5b5051919050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b8181038181111561081e5761081e61278e565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612a1b5784516001600160a01b0316835293830193918301916001016129f6565b50506001600160a01b0396909616606085015250505060800152939250505056fea26469706673582212202341c17df3146acb5e78f7010eb5c000b1436d1607efabca74496500fad9f76b64736f6c63430008110033",
    "contract_name": "ShiibaaDAOToken",
    "compiler_version": "v0.8.17+commit.8df45f5f",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"developmentWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"liquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"marketingWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developmentWallet\",\"type\":\"address\"}],\"name\":\"updateDevelopmentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityWallet\",\"type\":\"address\"}],\"name\":\"updateLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTxnNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxWalletNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAndTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkn\",\"type\":\"address\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/*\r\n    Website:     https://shiibaadao.live\r\n    X:           https://x.com/shiibaadao\r\n    Funding App: https://dogbowl.live\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\npragma experimental ABIEncoderV2;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"../IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"./IERC20.sol\";\r\n// import \"./extensions/IERC20Metadata.sol\";\r\n// import \"../../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\n// import './IUniswapV2Router01.sol';\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract ShiibaaDAOToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public constant deadAddress = address(0xdead);\r\n\r\n    bool private swapping;\r\n\r\n    address public marketingWallet;\r\n    address public developmentWallet;\r\n    address public liquidityWallet;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWallet;\r\n\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 private buyMarketingFee;\r\n    uint256 private buyDevelopmentFee;\r\n    uint256 private buyLiquidityFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 private sellMarketingFee;\r\n    uint256 private sellDevelopmentFee;\r\n    uint256 private sellLiquidityFee;\r\n\r\n    uint256 private tokensForMarketing;\r\n    uint256 private tokensForDevelopment;\r\n    uint256 private tokensForLiquidity;\r\n    uint256 private previousFee;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isExcludedMaxTransactionAmount;\r\n    mapping(address => bool) private automatedMarketMakerPairs;\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event marketingWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event developmentWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event liquidityWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    constructor() payable ERC20(\"Shiibaa DAO\", \"Shiibaa\") {\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n\r\n        uint256 totalSupply = 100_000_000 ether;\r\n\r\n        maxTransactionAmount = (totalSupply * 2) / 100;\r\n        maxWallet = (totalSupply * 2) / 100;\r\n        swapTokensAtAmount = (totalSupply * 1) / 1000;\r\n\r\n        buyMarketingFee = 3;\r\n        buyDevelopmentFee = 2;\r\n        buyLiquidityFee = 0;\r\n        buyTotalFees = buyMarketingFee + buyDevelopmentFee + buyLiquidityFee;\r\n\r\n        sellMarketingFee = 3;\r\n        sellDevelopmentFee = 2;\r\n        sellLiquidityFee = 0;\r\n        sellTotalFees =\r\n            sellMarketingFee +\r\n            sellDevelopmentFee +\r\n            sellLiquidityFee;\r\n\r\n        previousFee = sellTotalFees;\r\n\r\n        marketingWallet = 0x666B45Cd3b685941bFA0BE1D5138fEE804ECFc37;\r\n        developmentWallet = 0x7f4f7ed84bB3AB61037755d1E78792C494D4D55b;\r\n        liquidityWallet = owner();\r\n\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(deadAddress, true);\r\n        excludeFromFees(marketingWallet, true);\r\n        excludeFromFees(developmentWallet, true);\r\n\r\n        excludeFromMaxTransaction(owner(), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(deadAddress, true);\r\n        excludeFromMaxTransaction(address(uniswapV2Router), true);\r\n        excludeFromMaxTransaction(marketingWallet, true);\r\n        excludeFromMaxTransaction(developmentWallet, true);\r\n\r\n        _mint(marketingWallet, (totalSupply * 6) / 100);\r\n        _mint(deadAddress, (totalSupply * 24) / 100);\r\n        _mint(address(this), (totalSupply * 70) / 100);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingActive, \"Trading already active.\");\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n        _approve(address(this), address(uniswapV2Pair), type(uint256).max);\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    function updateSwapTokensAtAmount(uint256 newAmount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            newAmount >= (totalSupply() * 1) / 100000,\r\n            \"ERC20: Swap amount cannot be lower than 0.001% total supply.\"\r\n        );\r\n        require(\r\n            newAmount <= (totalSupply() * 5) / 1000,\r\n            \"ERC20: Swap amount cannot be higher than 0.5% total supply.\"\r\n        );\r\n        swapTokensAtAmount = newAmount;\r\n        return true;\r\n    }\r\n\r\n    function updateMaxWalletAndTxnAmount(\r\n        uint256 newTxnNum,\r\n        uint256 newMaxWalletNum\r\n    ) external onlyOwner {\r\n        require(\r\n            newTxnNum >= ((totalSupply() * 5) / 1000),\r\n            \"ERC20: Cannot set maxTxn lower than 0.5%\"\r\n        );\r\n        require(\r\n            newMaxWalletNum >= ((totalSupply() * 5) / 1000),\r\n            \"ERC20: Cannot set maxWallet lower than 0.5%\"\r\n        );\r\n        maxWallet = newMaxWalletNum;\r\n        maxTransactionAmount = newTxnNum;\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint256 _marketingFee,\r\n        uint256 _developmentFee,\r\n        uint256 _liquidityFee\r\n    ) external onlyOwner {\r\n        buyMarketingFee = _marketingFee;\r\n        buyDevelopmentFee = _developmentFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyTotalFees = buyMarketingFee + buyDevelopmentFee + buyLiquidityFee;\r\n        require(buyTotalFees <= 10, \"ERC20: Must keep fees at 10% or less\");\r\n    }\r\n\r\n    function updateSellFees(\r\n        uint256 _marketingFee,\r\n        uint256 _developmentFee,\r\n        uint256 _liquidityFee\r\n    ) external onlyOwner {\r\n        sellMarketingFee = _marketingFee;\r\n        sellDevelopmentFee = _developmentFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellTotalFees =\r\n            sellMarketingFee +\r\n            sellDevelopmentFee +\r\n            sellLiquidityFee;\r\n        previousFee = sellTotalFees;\r\n        require(sellTotalFees <= 10, \"ERC20: Must keep fees at 10% or less\");\r\n    }\r\n\r\n    function updateMarketingWallet(address _marketingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_marketingWallet != address(0), \"ERC20: Address 0\");\r\n        address oldWallet = marketingWallet;\r\n        marketingWallet = _marketingWallet;\r\n        emit marketingWalletUpdated(marketingWallet, oldWallet);\r\n    }\r\n\r\n    function updateDevelopmentWallet(address _developmentWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_developmentWallet != address(0), \"ERC20: Address 0\");\r\n        address oldWallet = developmentWallet;\r\n        developmentWallet = _developmentWallet;\r\n        emit developmentWalletUpdated(developmentWallet, oldWallet);\r\n    }\r\n\r\n    function updateLiquidityWallet(address _liquidityWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_liquidityWallet != address(0), \"ERC20: Address 0\");\r\n        address oldWallet = liquidityWallet;\r\n        liquidityWallet = _liquidityWallet;\r\n        emit liquidityWalletUpdated(liquidityWallet, oldWallet);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function withdrawStuckETH() public onlyOwner {\r\n        bool success;\r\n        (success, ) = address(msg.sender).call{value: address(this).balance}(\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    function withdrawStuckTokens(address tkn) public onlyOwner {\r\n        require(IERC20(tkn).balanceOf(address(this)) > 0, \"No tokens\");\r\n        uint256 amount = IERC20(tkn).balanceOf(address(this));\r\n        IERC20(tkn).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (\r\n            from != owner() &&\r\n            to != owner() &&\r\n            to != address(0) &&\r\n            to != deadAddress &&\r\n            !swapping\r\n        ) {\r\n            if (!tradingActive) {\r\n                require(\r\n                    _isExcludedFromFees[from] || _isExcludedFromFees[to],\r\n                    \"ERC20: Trading is not active.\"\r\n                );\r\n            }\r\n\r\n            //when buy\r\n            if (\r\n                automatedMarketMakerPairs[from] &&\r\n                !_isExcludedMaxTransactionAmount[to]\r\n            ) {\r\n                require(\r\n                    amount <= maxTransactionAmount,\r\n                    \"ERC20: Buy transfer amount exceeds the maxTransactionAmount.\"\r\n                );\r\n                require(\r\n                    amount + balanceOf(to) <= maxWallet,\r\n                    \"ERC20: Max wallet exceeded\"\r\n                );\r\n            }\r\n            //when sell\r\n            else if (\r\n                automatedMarketMakerPairs[to] &&\r\n                !_isExcludedMaxTransactionAmount[from]\r\n            ) {\r\n                require(\r\n                    amount <= maxTransactionAmount,\r\n                    \"ERC20: Sell transfer amount exceeds the maxTransactionAmount.\"\r\n                );\r\n            } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                require(\r\n                    amount + balanceOf(to) <= maxWallet,\r\n                    \"ERC20: Max wallet exceeded\"\r\n                );\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n\r\n        if (takeFee) {\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\r\n                fees = amount.mul(sellTotalFees).div(100);\r\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\r\n                tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees;\r\n                tokensForDevelopment +=\r\n                    (fees * sellDevelopmentFee) /\r\n                    sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = amount.mul(buyTotalFees).div(100);\r\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\r\n                tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees;\r\n                tokensForDevelopment +=\r\n                    (fees * buyDevelopmentFee) /\r\n                    buyTotalFees;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n        sellTotalFees = previousFee;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity +\r\n            tokensForMarketing +\r\n            tokensForDevelopment;\r\n        bool success;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapTokensAtAmount * 20) {\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /\r\n            totalTokensToSwap /\r\n            2;\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(\r\n            totalTokensToSwap\r\n        );\r\n\r\n        uint256 ethForDevelopment = ethBalance.mul(tokensForDevelopment).div(\r\n            totalTokensToSwap\r\n        );\r\n\r\n        uint256 ethForLiquidity = ethBalance -\r\n            ethForMarketing -\r\n            ethForDevelopment;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n        tokensForDevelopment = 0;\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(\r\n                amountToSwapForETH,\r\n                ethForLiquidity,\r\n                tokensForLiquidity\r\n            );\r\n        }\r\n\r\n        (success, ) = address(developmentWallet).call{value: ethForDevelopment}(\r\n            \"\"\r\n        );\r\n\r\n        (success, ) = address(marketingWallet).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n}",
    "etherscan_verified": true
}