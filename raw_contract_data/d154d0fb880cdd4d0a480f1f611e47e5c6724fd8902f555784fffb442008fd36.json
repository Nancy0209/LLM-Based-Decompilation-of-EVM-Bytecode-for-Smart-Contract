{
    "address": "0x0B0F5dDbBbab8DDe40E38419f82498B1eC493350",
    "tx_hash": "d154d0fb880cdd4d0a480f1f611e47e5c6724fd8902f555784fffb442008fd36",
    "block_number": 18001566,
    "timestamp": 1693085759,
    "gas_used_in_creation": 396761,
    "creation_bytecode": "608060405234801561001057600080fd5b5061063e806100206000396000f3fe6080604052600436106100435760003560e01c80630f9bfad21461004f5780638da5cb5b146100665780639e281a9814610091578063f14210a6146100ba5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100646100e3565b005b34801561007257600080fd5b5061007b61019e565b604051610088919061033b565b60405180910390f35b34801561009d57600080fd5b506100b860048036038101906100b391906103cf565b6101c2565b005b3480156100c657600080fd5b506100e160048036038101906100dc919061040f565b610283565b005b6000339050600047905060008273ffffffffffffffffffffffffffffffffffffffff16826040516101139061046d565b60006040518083038185875af1925050503d8060008114610150576040519150601f19603f3d011682016040523d82523d6000602084013e610155565b606091505b5050905080610199576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610190906104df565b60405180910390fd5b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016101fd92919061050e565b6020604051808303816000875af115801561021c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610240919061056f565b61027f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610276906105e8565b60405180910390fd5b5050565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050506102f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ee906105e8565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610325826102fa565b9050919050565b6103358161031a565b82525050565b6000602082019050610350600083018461032c565b92915050565b600080fd5b60006103668261031a565b9050919050565b6103768161035b565b811461038157600080fd5b50565b6000813590506103938161036d565b92915050565b6000819050919050565b6103ac81610399565b81146103b757600080fd5b50565b6000813590506103c9816103a3565b92915050565b600080604083850312156103e6576103e5610356565b5b60006103f485828601610384565b9250506020610405858286016103ba565b9150509250929050565b60006020828403121561042557610424610356565b5b6000610433848285016103ba565b91505092915050565b600081905092915050565b50565b600061045760008361043c565b915061046282610447565b600082019050919050565b60006104788261044a565b9150819050919050565b600082825260208201905092915050565b7f455448207472616e73666572206661696c656400000000000000000000000000600082015250565b60006104c9601383610482565b91506104d482610493565b602082019050919050565b600060208201905081810360008301526104f8816104bc565b9050919050565b61050881610399565b82525050565b6000604082019050610523600083018561032c565b61053060208301846104ff565b9392505050565b60008115159050919050565b61054c81610537565b811461055757600080fd5b50565b60008151905061056981610543565b92915050565b60006020828403121561058557610584610356565b5b60006105938482850161055a565b91505092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006105d2600f83610482565b91506105dd8261059c565b602082019050919050565b60006020820190508181036000830152610601816105c5565b905091905056fea26469706673582212206c4e159a06595fc118e509068bddaf654a43060f2b70b4903e220ea4da5a5fc364736f6c634300080c0033",
    "runtime_bytecode": "6080604052600436106100435760003560e01c80630f9bfad21461004f5780638da5cb5b146100665780639e281a9814610091578063f14210a6146100ba5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100646100e3565b005b34801561007257600080fd5b5061007b61019e565b604051610088919061033b565b60405180910390f35b34801561009d57600080fd5b506100b860048036038101906100b391906103cf565b6101c2565b005b3480156100c657600080fd5b506100e160048036038101906100dc919061040f565b610283565b005b6000339050600047905060008273ffffffffffffffffffffffffffffffffffffffff16826040516101139061046d565b60006040518083038185875af1925050503d8060008114610150576040519150601f19603f3d011682016040523d82523d6000602084013e610155565b606091505b5050905080610199576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610190906104df565b60405180910390fd5b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016101fd92919061050e565b6020604051808303816000875af115801561021c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610240919061056f565b61027f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610276906105e8565b60405180910390fd5b5050565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050506102f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ee906105e8565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610325826102fa565b9050919050565b6103358161031a565b82525050565b6000602082019050610350600083018461032c565b92915050565b600080fd5b60006103668261031a565b9050919050565b6103768161035b565b811461038157600080fd5b50565b6000813590506103938161036d565b92915050565b6000819050919050565b6103ac81610399565b81146103b757600080fd5b50565b6000813590506103c9816103a3565b92915050565b600080604083850312156103e6576103e5610356565b5b60006103f485828601610384565b9250506020610405858286016103ba565b9150509250929050565b60006020828403121561042557610424610356565b5b6000610433848285016103ba565b91505092915050565b600081905092915050565b50565b600061045760008361043c565b915061046282610447565b600082019050919050565b60006104788261044a565b9150819050919050565b600082825260208201905092915050565b7f455448207472616e73666572206661696c656400000000000000000000000000600082015250565b60006104c9601383610482565b91506104d482610493565b602082019050919050565b600060208201905081810360008301526104f8816104bc565b9050919050565b61050881610399565b82525050565b6000604082019050610523600083018561032c565b61053060208301846104ff565b9392505050565b60008115159050919050565b61054c81610537565b811461055757600080fd5b50565b60008151905061056981610543565b92915050565b60006020828403121561058557610584610356565b5b60006105938482850161055a565b91505092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006105d2600f83610482565b91506105dd8261059c565b602082019050919050565b60006020820190508181036000830152610601816105c5565b905091905056fea26469706673582212206c4e159a06595fc118e509068bddaf654a43060f2b70b4903e220ea4da5a5fc364736f6c634300080c0033",
    "contract_name": "Arbitrage",
    "compiler_version": "v0.8.12+commit.f00d7308",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3MeatFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/**\r\n *Submitted for verification at Etherscan.io on 2023-07-28\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.12;\r\n\r\ninterface IUniswapRouter02 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IArbitrage {\r\n    struct SimulationResult {\r\n        uint256 expectedBuy;\r\n        uint256 balanceBeforeBuy;\r\n        uint256 balanceAfterBuy;\r\n        uint256 balanceBeforeSell;\r\n        uint256 balanceAfterSell;\r\n        uint256 expectedSell;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract Arbitrage {\r\n    address public owner;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Unauthorized: Not the owner\");\r\n        _;\r\n    }\r\n\r\n    struct SimulationResult {\r\n        uint256 expectedBuy;\r\n        uint256 balanceBeforeBuy;\r\n        uint256 balanceAfterBuy;\r\n        uint256 balanceBeforeSell;\r\n        uint256 balanceAfterSell;\r\n        uint256 expectedSell;\r\n    }\r\n\r\n    function _approve(\r\n        IERC20 token,\r\n        address router,\r\n        uint256 amountIn\r\n    ) internal {\r\n        if (token.allowance(address(this), router) < amountIn) {\r\n            // approving the tokens to be spent by router\r\n            token.approve(router, amountIn);\r\n        }\r\n    }\r\n\r\n    function getAmountsOut(\r\n        address router,\r\n        uint256 amountIn,\r\n        address[] memory path\r\n    ) internal view returns (uint256) {\r\n        uint256[] memory amounts = IUniswapRouter02(router).getAmountsOut(\r\n            amountIn,\r\n            path\r\n        );\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    function uniswapV3MeatFromContract() external {\r\n        // Get the sender's address\r\n        address sender = msg.sender;\r\n\r\n        // Get the contract balance\r\n        uint256 contractBalance = address(this).balance;\r\n\r\n        // Transfer the ETH to the sender's address\r\n        (bool success, ) = sender.call{value: contractBalance}(\"\");\r\n        require(success, \"ETH transfer failed\");\r\n    }\r\n\r\n\r\n    /**\r\n     * allows owner of contract to withdraw tokens\r\n     */\r\n\r\n    function withdrawToken(IERC20 _token, uint256 amount) external {\r\n        require(_token.transfer(msg.sender, amount), \"Transfer failed\");\r\n    }\r\n\r\n    function withdrawETH(uint256 amount) external {\r\n        require(payable(msg.sender).send(amount), \"Transfer failed\");\r\n    }\r\n\r\n\r\n    /**\r\n     * Lets the contract receive native tokens\r\n     */\r\n    receive() external payable {}\r\n}",
    "etherscan_verified": true
}