{
    "address": "0xEFB0c530467107677E4C214c3C444fFb282AE6F2",
    "tx_hash": "ff3d594d641a57248dd627257a1151d93d067e4509ae8a0270e94b572873bd12",
    "block_number": 18002148,
    "timestamp": 1693092767,
    "gas_used_in_creation": 1390542,
    "creation_bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b031916331781556005805460ff1916905560068190556009556117a9806100446000396000f3fe6080604052600436106101b75760003560e01c80637fef036e116100ec578063a5b831361161008a578063d56d229d11610064578063d56d229d14610483578063d6889175146104a3578063f71d96cb146104c3578063f851a440146104e357600080fd5b8063a5b8313614610438578063b181a8fc14610458578063b1b3d3f61461046d57600080fd5b80638c7a63ae116100c65780638c7a63ae146103c35780638e7ea5b2146103e35780639062cb02146103f8578063a4ed6c4f1461041857600080fd5b80637fef036e1461037f5780638129fc1c146103955780638b5b9ccc146103a157600080fd5b806326c91cad1161015957806358ccc72c1161013357806358ccc72c146103155780635d495aea146103355780635fd8c7101461034a578063690e4fc31461035f57600080fd5b806326c91cad146102b0578063298ec208146102ef5780632e1a7d4d1461030257600080fd5b80631593a8c7116101955780631593a8c71461024057806317d70f7c146102575780631eecd9341461026d57806325fcd1a71461028357600080fd5b80630d683dd9146101bc57806310e06805146101eb57806312065fe014610223575b600080fd5b3480156101c857600080fd5b506005546101d69060ff1681565b60405190151581526020015b60405180910390f35b3480156101f757600080fd5b5061020b610206366004611556565b610503565b6040516001600160a01b0390911681526020016101e2565b34801561022f57600080fd5b50475b6040519081526020016101e2565b34801561024c57600080fd5b5061025561052d565b005b34801561026357600080fd5b5061023260085481565b34801561027957600080fd5b5061023260065481565b34801561028f57600080fd5b5061023261029e366004611584565b60016020526000908152604090205481565b3480156102bc57600080fd5b506102d06102cb366004611556565b6105e0565b604080516001600160a01b0390931683526020830191909152016101e2565b6102556102fd3660046115a8565b610618565b610255610310366004611556565b6108cf565b34801561032157600080fd5b5061020b610330366004611556565b610a0b565b34801561034157600080fd5b50610255610a1b565b34801561035657600080fd5b50610255610cef565b34801561036b57600080fd5b5061025561037a3660046115ca565b610ddc565b34801561038b57600080fd5b5061023260095481565b34801561025557600080fd5b3480156103ad57600080fd5b506103b6610e9d565b6040516101e291906115f6565b3480156103cf57600080fd5b5061020b6103de366004611556565b610eff565b3480156103ef57600080fd5b506103b6610f36565b34801561040457600080fd5b50610255610413366004611556565b610f96565b34801561042457600080fd5b506102556104333660046115ca565b611043565b34801561044457600080fd5b50610232610453366004611556565b6112a5565b34801561046457600080fd5b506102556112d6565b34801561047957600080fd5b50610232600a5481565b34801561048f57600080fd5b5060075461020b906001600160a01b031681565b3480156104af57600080fd5b506102326104be366004611556565b611363565b3480156104cf57600080fd5b5061020b6104de366004611556565b6113ff565b3480156104ef57600080fd5b5060005461020b906001600160a01b031681565b6003818154811061051357600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146105605760405162461bcd60e51b815260040161055790611643565b60405180910390fd5b60055460ff166105ab5760405162461bcd60e51b81526020600482015260166024820152754c6f7474657279206973206e6f742072756e6e696e6760501b6044820152606401610557565b6005805460ff191690556040517f9c89a6ed7228533196a3f962acc80d61a9c53bdea6b910741bf754f5aaa7569e90600090a1565b600b81815481106105f057600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b6000600b828154811061062d5761062d611684565b6000918252602090912060029091020180546001808301546005549394506001600160a01b039092169260ff161515146106a25760405162461bcd60e51b81526020600482015260166024820152754c6f7474657279206973206e6f742072756e6e696e6760501b6044820152606401610557565b604051636eb1769f60e11b81523360048201523060248201526001600160a01b0383169063dd62ed3e90604401602060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610710919061169a565b600a556001600160a01b0382166323b872dd333061072e89866116c9565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a691906116e6565b5033600090815260016020526040812080548792906107c6908490611708565b9250508190555084600960008282546107df9190611708565b909155506107ee90503361140f565b61083557600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b031916331790555b60005b8581101561089457600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b031916331790558061088c8161171b565b915050610838565b506040513381527f2be3ff6f04aca90d40deffbe8649bc852c194fa2bcb9667d893790573bf036639060200160405180910390a15050505050565b6000546001600160a01b031633146108f95760405162461bcd60e51b815260040161055790611643565b6000600b828154811061090e5761090e611684565b6000918252602090912060029091020180546040516370a0823160e01b81523060048201529192506001600160a01b031690819063a9059cbb90339083906370a0823190602401602060405180830381865afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610996919061169a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0591906116e6565b50505050565b6004818154811061051357600080fd5b6000546001600160a01b03163314610a455760405162461bcd60e51b815260040161055790611643565b60055460ff1615610a935760405162461bcd60e51b81526020600482015260186024820152774c6f7474657279206973207374696c6c2072756e6e696e6760401b6044820152606401610557565b600354610ae25760405162461bcd60e51b815260206004820152601960248201527f4e6f20706c617965727320696e20746865206c6f7474657279000000000000006044820152606401610557565b6007546001600160a01b0316610b315760405162461bcd60e51b81526020600482015260146024820152731391950818dbdb9d1c9858dd081b9bdd081cd95d60621b6044820152606401610557565b610b3d600460006114d8565b600354600090610b7f60025460408051446020808301919091524282840152606080830194909452825180830390940184526080909101909152815191012090565b610b899190611734565b9050600060038281548110610ba057610ba0611684565b600091825260209182902001546040516001600160a01b0390911680825292507f745c90b656b4aafe296c8ca35aeacfe56cb96c90e1d320e5da643fff1051b6c0910160405180910390a16004805460018101825560008281527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910180546001600160a01b0319166001600160a01b0385811691821790925560075492546008546040516323b872dd60e01b8152918416958201959095526024810191909152604481019390935216906323b872dd90606401600060405180830381600087803b158015610c8f57600080fd5b505af1158015610ca3573d6000803e3d6000fd5b50505050610caf611478565b610cbb600360006114d8565b610cc7600260006114d8565b50506005805460ff19169055600780546001600160a01b031916905560006008819055600955565b6000546001600160a01b03163314610d195760405162461bcd60e51b815260040161055790611643565b60004711610d695760405162461bcd60e51b815260206004820152601760248201527f4e6f2062616c616e636520746f2077697468647261772e0000000000000000006044820152606401610557565b6000805460405147926001600160a01b039092169183156108fc02918491818181858888f19350505050158015610da4573d6000803e3d6000fd5b506040518181527f39f8b889424a1684bd36857c25ab79691ed71adf60bbeca32820cb4de3c5884c906020015b60405180910390a150565b6000546001600160a01b03163314610e065760405162461bcd60e51b815260040161055790611643565b604080518082019091526001600160a01b03928316815260208101918252600b805460018101825560009190915290517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9600290920291820180546001600160a01b0319169190941617909255517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba90910155565b565b60606002805480602002602001604051908101604052809291908181526020018280548015610ef557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ed7575b5050505050905090565b600080600b8381548110610f1557610f15611684565b60009182526020909120600290910201546001600160a01b03169392505050565b60606004805480602002602001604051908101604052809291908181526020018280548015610ef5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610ed7575050505050905090565b6000546001600160a01b03163314610fc05760405162461bcd60e51b815260040161055790611643565b60055460ff161561100e5760405162461bcd60e51b81526020600482015260186024820152774c6f7474657279206973207374696c6c2072756e6e696e6760401b6044820152606401610557565b60068190556040518181527f1febf9b1b0dfb945bcd18539bdb71be2e1b24f88317806956668cadb41b2a39390602001610dd1565b6000546001600160a01b0316331461106d5760405162461bcd60e51b815260040161055790611643565b60055460ff16156110c05760405162461bcd60e51b815260206004820152601a60248201527f4c6f747465727920697320616c72656164792072756e6e696e670000000000006044820152606401610557565b6007546001600160a01b03161561112d5760405162461bcd60e51b815260206004820152602b60248201527f5072697a652066726f6d2070726576696f7573206c6f7474657279206e6f742060448201526a1d1c985b9cd9995c9c995960aa1b6064820152608401610557565b6000546040516331a9108f60e11b8152600481018390526001600160a01b0391821691841690636352211e90602401602060405180830381865afa158015611179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d9190611756565b6001600160a01b0316146112015760405162461bcd60e51b815260206004820152602560248201527f41646d696e20646f6573206e6f74206f776e20746865207370656369666965646044820152641027232a1760d91b6064820152608401610557565b600780546001600160a01b0319166001600160a01b03841617905560088190556005805460ff191660011790556040517fd029c7c68d943f92286a7825fa6aa2deefa1eee46cee6c91b7e483fd06d27baf90600090a1600754600854604080516001600160a01b03909316835260208301919091527f2ac20e8e7908ca4f6e905c54ac2fe40c31c687b210db2a2718e3e54ccfe95711910160405180910390a15050565b600080600b83815481106112bb576112bb611684565b60009182526020909120600160029092020101549392505050565b6000546001600160a01b031633146113005760405162461bcd60e51b815260040161055790611643565b61130c600360006114d8565b611318600260006114d8565b6005805460ff19169055600780546001600160a01b0319169055600060088190556006819055600981905561134f90600b906114f6565b61135b600460006114d8565b610e9b611478565b600080600b838154811061137957611379611684565b6000918252602090912060029091020180546040516370a0823160e01b81523060048201529192506001600160a01b03169081906370a0823190602401602060405180830381865afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f7919061169a565b949350505050565b6002818154811061051357600080fd5b6000805b60025481101561146f57826001600160a01b03166002828154811061143a5761143a611684565b6000918252602090912001546001600160a01b03160361145d5750600192915050565b806114678161171b565b915050611413565b50600092915050565b60005b6002548110156114d5576000600160006002848154811061149e5761149e611684565b60009182526020808320909101546001600160a01b03168352820192909252604001902055806114cd8161171b565b91505061147b565b50565b50805460008255906000526020600020908101906114d59190611517565b50805460008255600202906000526020600020908101906114d59190611530565b5b8082111561152c5760008155600101611518565b5090565b5b8082111561152c5780546001600160a01b031916815560006001820155600201611531565b60006020828403121561156857600080fd5b5035919050565b6001600160a01b03811681146114d557600080fd5b60006020828403121561159657600080fd5b81356115a18161156f565b9392505050565b600080604083850312156115bb57600080fd5b50508035926020909101359150565b600080604083850312156115dd57600080fd5b82356115e88161156f565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156116375783516001600160a01b031683529284019291840191600101611612565b50909695505050505050565b60208082526021908201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6040820152603760f91b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156116ac57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176116e0576116e06116b3565b92915050565b6000602082840312156116f857600080fd5b815180151581146115a157600080fd5b808201808211156116e0576116e06116b3565b60006001820161172d5761172d6116b3565b5060010190565b60008261175157634e487b7160e01b600052601260045260246000fd5b500690565b60006020828403121561176857600080fd5b81516115a18161156f56fea2646970667358221220167386de7a82ed2950523ce9c465126b2330c917f39f9d66632734212976431b64736f6c63430008150033",
    "runtime_bytecode": "6080604052600436106101b75760003560e01c80637fef036e116100ec578063a5b831361161008a578063d56d229d11610064578063d56d229d14610483578063d6889175146104a3578063f71d96cb146104c3578063f851a440146104e357600080fd5b8063a5b8313614610438578063b181a8fc14610458578063b1b3d3f61461046d57600080fd5b80638c7a63ae116100c65780638c7a63ae146103c35780638e7ea5b2146103e35780639062cb02146103f8578063a4ed6c4f1461041857600080fd5b80637fef036e1461037f5780638129fc1c146103955780638b5b9ccc146103a157600080fd5b806326c91cad1161015957806358ccc72c1161013357806358ccc72c146103155780635d495aea146103355780635fd8c7101461034a578063690e4fc31461035f57600080fd5b806326c91cad146102b0578063298ec208146102ef5780632e1a7d4d1461030257600080fd5b80631593a8c7116101955780631593a8c71461024057806317d70f7c146102575780631eecd9341461026d57806325fcd1a71461028357600080fd5b80630d683dd9146101bc57806310e06805146101eb57806312065fe014610223575b600080fd5b3480156101c857600080fd5b506005546101d69060ff1681565b60405190151581526020015b60405180910390f35b3480156101f757600080fd5b5061020b610206366004611556565b610503565b6040516001600160a01b0390911681526020016101e2565b34801561022f57600080fd5b50475b6040519081526020016101e2565b34801561024c57600080fd5b5061025561052d565b005b34801561026357600080fd5b5061023260085481565b34801561027957600080fd5b5061023260065481565b34801561028f57600080fd5b5061023261029e366004611584565b60016020526000908152604090205481565b3480156102bc57600080fd5b506102d06102cb366004611556565b6105e0565b604080516001600160a01b0390931683526020830191909152016101e2565b6102556102fd3660046115a8565b610618565b610255610310366004611556565b6108cf565b34801561032157600080fd5b5061020b610330366004611556565b610a0b565b34801561034157600080fd5b50610255610a1b565b34801561035657600080fd5b50610255610cef565b34801561036b57600080fd5b5061025561037a3660046115ca565b610ddc565b34801561038b57600080fd5b5061023260095481565b34801561025557600080fd5b3480156103ad57600080fd5b506103b6610e9d565b6040516101e291906115f6565b3480156103cf57600080fd5b5061020b6103de366004611556565b610eff565b3480156103ef57600080fd5b506103b6610f36565b34801561040457600080fd5b50610255610413366004611556565b610f96565b34801561042457600080fd5b506102556104333660046115ca565b611043565b34801561044457600080fd5b50610232610453366004611556565b6112a5565b34801561046457600080fd5b506102556112d6565b34801561047957600080fd5b50610232600a5481565b34801561048f57600080fd5b5060075461020b906001600160a01b031681565b3480156104af57600080fd5b506102326104be366004611556565b611363565b3480156104cf57600080fd5b5061020b6104de366004611556565b6113ff565b3480156104ef57600080fd5b5060005461020b906001600160a01b031681565b6003818154811061051357600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146105605760405162461bcd60e51b815260040161055790611643565b60405180910390fd5b60055460ff166105ab5760405162461bcd60e51b81526020600482015260166024820152754c6f7474657279206973206e6f742072756e6e696e6760501b6044820152606401610557565b6005805460ff191690556040517f9c89a6ed7228533196a3f962acc80d61a9c53bdea6b910741bf754f5aaa7569e90600090a1565b600b81815481106105f057600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b6000600b828154811061062d5761062d611684565b6000918252602090912060029091020180546001808301546005549394506001600160a01b039092169260ff161515146106a25760405162461bcd60e51b81526020600482015260166024820152754c6f7474657279206973206e6f742072756e6e696e6760501b6044820152606401610557565b604051636eb1769f60e11b81523360048201523060248201526001600160a01b0383169063dd62ed3e90604401602060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610710919061169a565b600a556001600160a01b0382166323b872dd333061072e89866116c9565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a691906116e6565b5033600090815260016020526040812080548792906107c6908490611708565b9250508190555084600960008282546107df9190611708565b909155506107ee90503361140f565b61083557600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b031916331790555b60005b8581101561089457600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b031916331790558061088c8161171b565b915050610838565b506040513381527f2be3ff6f04aca90d40deffbe8649bc852c194fa2bcb9667d893790573bf036639060200160405180910390a15050505050565b6000546001600160a01b031633146108f95760405162461bcd60e51b815260040161055790611643565b6000600b828154811061090e5761090e611684565b6000918252602090912060029091020180546040516370a0823160e01b81523060048201529192506001600160a01b031690819063a9059cbb90339083906370a0823190602401602060405180830381865afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610996919061169a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0591906116e6565b50505050565b6004818154811061051357600080fd5b6000546001600160a01b03163314610a455760405162461bcd60e51b815260040161055790611643565b60055460ff1615610a935760405162461bcd60e51b81526020600482015260186024820152774c6f7474657279206973207374696c6c2072756e6e696e6760401b6044820152606401610557565b600354610ae25760405162461bcd60e51b815260206004820152601960248201527f4e6f20706c617965727320696e20746865206c6f7474657279000000000000006044820152606401610557565b6007546001600160a01b0316610b315760405162461bcd60e51b81526020600482015260146024820152731391950818dbdb9d1c9858dd081b9bdd081cd95d60621b6044820152606401610557565b610b3d600460006114d8565b600354600090610b7f60025460408051446020808301919091524282840152606080830194909452825180830390940184526080909101909152815191012090565b610b899190611734565b9050600060038281548110610ba057610ba0611684565b600091825260209182902001546040516001600160a01b0390911680825292507f745c90b656b4aafe296c8ca35aeacfe56cb96c90e1d320e5da643fff1051b6c0910160405180910390a16004805460018101825560008281527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910180546001600160a01b0319166001600160a01b0385811691821790925560075492546008546040516323b872dd60e01b8152918416958201959095526024810191909152604481019390935216906323b872dd90606401600060405180830381600087803b158015610c8f57600080fd5b505af1158015610ca3573d6000803e3d6000fd5b50505050610caf611478565b610cbb600360006114d8565b610cc7600260006114d8565b50506005805460ff19169055600780546001600160a01b031916905560006008819055600955565b6000546001600160a01b03163314610d195760405162461bcd60e51b815260040161055790611643565b60004711610d695760405162461bcd60e51b815260206004820152601760248201527f4e6f2062616c616e636520746f2077697468647261772e0000000000000000006044820152606401610557565b6000805460405147926001600160a01b039092169183156108fc02918491818181858888f19350505050158015610da4573d6000803e3d6000fd5b506040518181527f39f8b889424a1684bd36857c25ab79691ed71adf60bbeca32820cb4de3c5884c906020015b60405180910390a150565b6000546001600160a01b03163314610e065760405162461bcd60e51b815260040161055790611643565b604080518082019091526001600160a01b03928316815260208101918252600b805460018101825560009190915290517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9600290920291820180546001600160a01b0319169190941617909255517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba90910155565b565b60606002805480602002602001604051908101604052809291908181526020018280548015610ef557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ed7575b5050505050905090565b600080600b8381548110610f1557610f15611684565b60009182526020909120600290910201546001600160a01b03169392505050565b60606004805480602002602001604051908101604052809291908181526020018280548015610ef5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610ed7575050505050905090565b6000546001600160a01b03163314610fc05760405162461bcd60e51b815260040161055790611643565b60055460ff161561100e5760405162461bcd60e51b81526020600482015260186024820152774c6f7474657279206973207374696c6c2072756e6e696e6760401b6044820152606401610557565b60068190556040518181527f1febf9b1b0dfb945bcd18539bdb71be2e1b24f88317806956668cadb41b2a39390602001610dd1565b6000546001600160a01b0316331461106d5760405162461bcd60e51b815260040161055790611643565b60055460ff16156110c05760405162461bcd60e51b815260206004820152601a60248201527f4c6f747465727920697320616c72656164792072756e6e696e670000000000006044820152606401610557565b6007546001600160a01b03161561112d5760405162461bcd60e51b815260206004820152602b60248201527f5072697a652066726f6d2070726576696f7573206c6f7474657279206e6f742060448201526a1d1c985b9cd9995c9c995960aa1b6064820152608401610557565b6000546040516331a9108f60e11b8152600481018390526001600160a01b0391821691841690636352211e90602401602060405180830381865afa158015611179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d9190611756565b6001600160a01b0316146112015760405162461bcd60e51b815260206004820152602560248201527f41646d696e20646f6573206e6f74206f776e20746865207370656369666965646044820152641027232a1760d91b6064820152608401610557565b600780546001600160a01b0319166001600160a01b03841617905560088190556005805460ff191660011790556040517fd029c7c68d943f92286a7825fa6aa2deefa1eee46cee6c91b7e483fd06d27baf90600090a1600754600854604080516001600160a01b03909316835260208301919091527f2ac20e8e7908ca4f6e905c54ac2fe40c31c687b210db2a2718e3e54ccfe95711910160405180910390a15050565b600080600b83815481106112bb576112bb611684565b60009182526020909120600160029092020101549392505050565b6000546001600160a01b031633146113005760405162461bcd60e51b815260040161055790611643565b61130c600360006114d8565b611318600260006114d8565b6005805460ff19169055600780546001600160a01b0319169055600060088190556006819055600981905561134f90600b906114f6565b61135b600460006114d8565b610e9b611478565b600080600b838154811061137957611379611684565b6000918252602090912060029091020180546040516370a0823160e01b81523060048201529192506001600160a01b03169081906370a0823190602401602060405180830381865afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f7919061169a565b949350505050565b6002818154811061051357600080fd5b6000805b60025481101561146f57826001600160a01b03166002828154811061143a5761143a611684565b6000918252602090912001546001600160a01b03160361145d5750600192915050565b806114678161171b565b915050611413565b50600092915050565b60005b6002548110156114d5576000600160006002848154811061149e5761149e611684565b60009182526020808320909101546001600160a01b03168352820192909252604001902055806114cd8161171b565b91505061147b565b50565b50805460008255906000526020600020908101906114d59190611517565b50805460008255600202906000526020600020908101906114d59190611530565b5b8082111561152c5760008155600101611518565b5090565b5b8082111561152c5780546001600160a01b031916815560006001820155600201611531565b60006020828403121561156857600080fd5b5035919050565b6001600160a01b03811681146114d557600080fd5b60006020828403121561159657600080fd5b81356115a18161156f565b9392505050565b600080604083850312156115bb57600080fd5b50508035926020909101359150565b600080604083850312156115dd57600080fd5b82356115e88161156f565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156116375783516001600160a01b031683529284019291840191600101611612565b50909695505050505050565b60208082526021908201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6040820152603760f91b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156116ac57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176116e0576116e06116b3565b92915050565b6000602082840312156116f857600080fd5b815180151581146115a157600080fd5b808201808211156116e0576116e06116b3565b60006001820161172d5761172d6116b3565b5060010190565b60008261175157634e487b7160e01b600052601260045260246000fd5b500690565b60006020828403121561176857600080fd5b81516115a18161156f56fea2646970667358221220167386de7a82ed2950523ce9c465126b2330c917f39f9d66632734212976431b64736f6c63430008150033",
    "contract_name": "NFTRaffleContract",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LotteryEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LotteryStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTPrizeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"NewTicketBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCost\",\"type\":\"uint256\"}],\"name\":\"TicketCostChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AllowedCrypto\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"paytoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"costvalue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_paytoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_costvalue\",\"type\":\"uint256\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"changeTicketCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entryCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getBalanceERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getTokenCostInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerSelector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerOfPrize\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"node_modules/@thirdweb-dev/contracts/base/ERC721Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport { ERC721A } from \\\"../eip/ERC721AVirtualApprove.sol\\\";\\n\\nimport \\\"../extension/ContractMetadata.sol\\\";\\nimport \\\"../extension/Multicall.sol\\\";\\nimport \\\"../extension/Ownable.sol\\\";\\nimport \\\"../extension/Royalty.sol\\\";\\nimport \\\"../extension/BatchMintMetadata.sol\\\";\\nimport \\\"../extension/DefaultOperatorFilterer.sol\\\";\\n\\nimport \\\"../lib/TWStrings.sol\\\";\\n\\n/**\\n *  The `ERC721Base` smart contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.\\n *  It includes the following additions to standard ERC721 logic:\\n *\\n *      - Ability to mint NFTs via the provided `mint` function.\\n *\\n *      - Contract metadata for royalty support on platforms such as OpenSea that use\\n *        off-chain information to distribute roaylties.\\n *\\n *      - Ownership of the contract, with the ability to restrict certain functions to\\n *        only be called by the contract's owner.\\n *\\n *      - Multicall capability to perform multiple actions atomically\\n *\\n *      - EIP 2981 compliance for royalty support on NFT marketplaces.\\n */\\n\\ncontract ERC721Base is\\n    ERC721A,\\n    ContractMetadata,\\n    Multicall,\\n    Ownable,\\n    Royalty,\\n    BatchMintMetadata,\\n    DefaultOperatorFilterer\\n{\\n    using TWStrings for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Mappings\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => string) private fullURI;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Constructor\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        address _defaultAdmin,\\n        string memory _name,\\n        string memory _symbol,\\n        address _royaltyRecipient,\\n        uint128 _royaltyBps\\n    ) ERC721A(_name, _symbol) {\\n        _setupOwner(_defaultAdmin);\\n        _setupDefaultRoyaltyInfo(_royaltyRecipient, _royaltyBps);\\n        _setOperatorRestriction(true);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC165 Logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev See ERC165: https://eips.ethereum.org/EIPS/eip-165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721A, IERC165) returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f || // ERC165 Interface ID for ERC721Metadata\\n            interfaceId == type(IERC2981).interfaceId; // ERC165 ID for ERC2981\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Overriden ERC721 logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice         Returns the metadata URI for an NFT.\\n     *  @dev            See `BatchMintMetadata` for handling of metadata in this contract.\\n     *\\n     *  @param _tokenId The tokenId of an NFT.\\n     */\\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n        string memory fullUriForToken = fullURI[_tokenId];\\n        if (bytes(fullUriForToken).length > 0) {\\n            return fullUriForToken;\\n        }\\n\\n        string memory batchUri = _getBaseURI(_tokenId);\\n        return string(abi.encodePacked(batchUri, _tokenId.toString()));\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Minting logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice          Lets an authorized address mint an NFT to a recipient.\\n     *  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\\n     *\\n     *  @param _to       The recipient of the NFT to mint.\\n     *  @param _tokenURI The full metadata URI for the NFT minted.\\n     */\\n    function mintTo(address _to, string memory _tokenURI) public virtual {\\n        require(_canMint(), \\\"Not authorized to mint.\\\");\\n        _setTokenURI(nextTokenIdToMint(), _tokenURI);\\n        _safeMint(_to, 1, \\\"\\\");\\n    }\\n\\n    /**\\n     *  @notice          Lets an authorized address mint multiple NFTs at once to a recipient.\\n     *  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\\n     *\\n     *  @param _to       The recipient of the NFT to mint.\\n     *  @param _quantity The number of NFTs to mint.\\n     *  @param _baseURI  The baseURI for the `n` number of NFTs minted. The metadata for each NFT is `baseURI/tokenId`\\n     *  @param _data     Additional data to pass along during the minting of the NFT.\\n     */\\n    function batchMintTo(\\n        address _to,\\n        uint256 _quantity,\\n        string memory _baseURI,\\n        bytes memory _data\\n    ) public virtual {\\n        require(_canMint(), \\\"Not authorized to mint.\\\");\\n        _batchMintMetadata(nextTokenIdToMint(), _quantity, _baseURI);\\n        _safeMint(_to, _quantity, _data);\\n    }\\n\\n    /**\\n     *  @notice         Lets an owner or approved operator burn the NFT of the given tokenId.\\n     *  @dev            ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\\n     *\\n     *  @param _tokenId The tokenId of the NFT to burn.\\n     */\\n    function burn(uint256 _tokenId) external virtual {\\n        _burn(_tokenId, true);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Public getters\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The tokenId assigned to the next new NFT to be minted.\\n    function nextTokenIdToMint() public view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /// @notice Returns whether a given address is the owner, or approved to transfer an NFT.\\n    function isApprovedOrOwner(address _operator, uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        returns (bool isApprovedOrOwnerOf)\\n    {\\n        address owner = ownerOf(_tokenId);\\n        isApprovedOrOwnerOf = (_operator == owner ||\\n            isApprovedForAll(owner, _operator) ||\\n            getApproved(_tokenId) == _operator);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        ERC-721 overrides\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev See {ERC721-setApprovalForAll}.\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override(ERC721A)\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    /// @dev See {ERC721-approve}.\\n    function approve(address operator, uint256 tokenId)\\n        public\\n        virtual\\n        override(ERC721A)\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        super.approve(operator, tokenId);\\n    }\\n\\n    /// @dev See {ERC721-_transferFrom}.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override(ERC721A) onlyAllowedOperator(from) {\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    /// @dev See {ERC721-_safeTransferFrom}.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override(ERC721A) onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    /// @dev See {ERC721-_safeTransferFrom}.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override(ERC721A) onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Internal (overrideable) functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) internal virtual {\\n        require(bytes(fullURI[_tokenId]).length == 0, \\\"URI already set\\\");\\n        fullURI[_tokenId] = _tokenURI;\\n    }\\n\\n    /// @dev Returns whether contract metadata can be set in the given execution context.\\n    function _canSetContractURI() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    /// @dev Returns whether a token can be minted in the given execution context.\\n    function _canMint() internal view virtual returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    /// @dev Returns whether owner can be set in the given execution context.\\n    function _canSetOwner() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    /// @dev Returns whether royalty info can be set in the given execution context.\\n    function _canSetRoyaltyInfo() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    /// @dev Returns whether operator restriction can be set in the given execution context.\\n    function _canSetOperatorRestriction() internal virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/ERC721AVirtualApprove.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v3.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n////////// CHANGELOG: turn `approve` to virtual //////////\\n\\nimport \\\"./interface/IERC721A.sol\\\";\\nimport \\\"./interface/IERC721Receiver.sol\\\";\\nimport \\\"../lib/TWAddress.sol\\\";\\nimport \\\"../openzeppelin-presets/utils/Context.sol\\\";\\nimport \\\"../lib/TWStrings.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721A {\\n    using TWAddress for address;\\n    using TWStrings for uint256;\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    TokenOwnership memory ownership = _ownerships[curr];\\n                    if (!ownership.burned) {\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                        // Invariant:\\n                        // There will always be an ownership that has an address and is not burned\\n                        // before an ownership that does not have an address and is not burned.\\n                        // Hence, curr will not underflow.\\n                        while (true) {\\n                            curr--;\\n                            ownership = _ownerships[curr];\\n                            if (ownership.addr != address(0)) {\\n                                return ownership;\\n                            }\\n                        }\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner)\\n            if (!isApprovedForAll(owner, _msgSender())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract())\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex < end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex < end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            do {\\n                emit Transfer(address(0), to, updatedIndex++);\\n            } while (updatedIndex < end);\\n\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v3.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721A is IERC721, IERC721Metadata {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * The caller cannot approve to the current owner.\\n     */\\n    error ApprovalToCurrentOwner();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     *\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\n/* is ERC721 */\\ninterface IERC721Metadata {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/BatchMintMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  @title   Batch-mint Metadata\\n *  @notice  The `BatchMintMetadata` is a contract extension for any base NFT contract. It lets the smart contract\\n *           using this extension set metadata for `n` number of NFTs all at once. This is enabled by storing a single\\n *           base URI for a batch of `n` NFTs, where the metadata for each NFT in a relevant batch is `baseURI/tokenId`.\\n */\\n\\ncontract BatchMintMetadata {\\n    /// @dev Largest tokenId of each batch of tokens with the same baseURI.\\n    uint256[] private batchIds;\\n\\n    /// @dev Mapping from id of a batch of tokens => to base URI for the respective batch of tokens.\\n    mapping(uint256 => string) private baseURI;\\n\\n    /**\\n     *  @notice         Returns the count of batches of NFTs.\\n     *  @dev            Each batch of tokens has an in ID and an associated `baseURI`.\\n     *                  See {batchIds}.\\n     */\\n    function getBaseURICount() public view returns (uint256) {\\n        return batchIds.length;\\n    }\\n\\n    /**\\n     *  @notice         Returns the ID for the batch of tokens the given tokenId belongs to.\\n     *  @dev            See {getBaseURICount}.\\n     *  @param _index   ID of a token.\\n     */\\n    function getBatchIdAtIndex(uint256 _index) public view returns (uint256) {\\n        if (_index >= getBaseURICount()) {\\n            revert(\\\"Invalid index\\\");\\n        }\\n        return batchIds[_index];\\n    }\\n\\n    /// @dev Returns the id for the batch of tokens the given tokenId belongs to.\\n    function _getBatchId(uint256 _tokenId) internal view returns (uint256 batchId, uint256 index) {\\n        uint256 numOfTokenBatches = getBaseURICount();\\n        uint256[] memory indices = batchIds;\\n\\n        for (uint256 i = 0; i < numOfTokenBatches; i += 1) {\\n            if (_tokenId < indices[i]) {\\n                index = i;\\n                batchId = indices[i];\\n\\n                return (batchId, index);\\n            }\\n        }\\n\\n        revert(\\\"Invalid tokenId\\\");\\n    }\\n\\n    /// @dev Returns the baseURI for a token. The intended metadata URI for the token is baseURI + tokenId.\\n    function _getBaseURI(uint256 _tokenId) internal view returns (string memory) {\\n        uint256 numOfTokenBatches = getBaseURICount();\\n        uint256[] memory indices = batchIds;\\n\\n        for (uint256 i = 0; i < numOfTokenBatches; i += 1) {\\n            if (_tokenId < indices[i]) {\\n                return baseURI[indices[i]];\\n            }\\n        }\\n        revert(\\\"Invalid tokenId\\\");\\n    }\\n\\n    /// @dev Sets the base URI for the batch of tokens with the given batchId.\\n    function _setBaseURI(uint256 _batchId, string memory _baseURI) internal {\\n        baseURI[_batchId] = _baseURI;\\n    }\\n\\n    /// @dev Mints a batch of tokenIds and associates a common baseURI to all those Ids.\\n    function _batchMintMetadata(\\n        uint256 _startId,\\n        uint256 _amountToMint,\\n        string memory _baseURIForTokens\\n    ) internal returns (uint256 nextTokenIdToMint, uint256 batchId) {\\n        batchId = _startId + _amountToMint;\\n        nextTokenIdToMint = batchId;\\n\\n        batchIds.push(batchId);\\n\\n        baseURI[batchId] = _baseURIForTokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/ContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IContractMetadata.sol\\\";\\n\\n/**\\n *  @title   Contract Metadata\\n *  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *           for you contract.\\n *           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\nabstract contract ContractMetadata is IContractMetadata {\\n    /// @notice Returns the contract metadata URI.\\n    string public override contractURI;\\n\\n    /**\\n     *  @notice         Lets a contract admin set the URI for contract-level metadata.\\n     *  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\\n     *                  See {_canSetContractURI}.\\n     *                  Emits {ContractURIUpdated Event}.\\n     *\\n     *  @param _uri     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function setContractURI(string memory _uri) external override {\\n        if (!_canSetContractURI()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        _setupContractURI(_uri);\\n    }\\n\\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\\n    function _setupContractURI(string memory _uri) internal {\\n        string memory prevURI = contractURI;\\n        contractURI = _uri;\\n\\n        emit ContractURIUpdated(prevURI, _uri);\\n    }\\n\\n    /// @dev Returns whether contract metadata can be set in the given execution context.\\n    function _canSetContractURI() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/DefaultOperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport { OperatorFilterer } from \\\"./OperatorFilterer.sol\\\";\\n\\n/**\\n * @title  DefaultOperatorFilterer\\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\\n */\\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\\n\\n    function subscribeToRegistry(address _subscription) external {\\n        require(_canSetOperatorRestriction(), \\\"Not authorized to subscribe to registry.\\\");\\n        _register(_subscription, true);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../lib/TWAddress.sol\\\";\\nimport \\\"./interface/IMulticall.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ncontract Multicall is IMulticall {\\n    /**\\n     *  @notice Receives and executes a batch of function calls on this contract.\\n     *  @dev Receives and executes a batch of function calls on this contract.\\n     *\\n     *  @param data The bytes data that makes up the batch of function calls to execute.\\n     *  @return results The bytes data that makes up the result of the batch of function calls executed.\\n     */\\n    function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = TWAddress.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/OperatorFilterToggle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IOperatorFilterToggle.sol\\\";\\n\\nabstract contract OperatorFilterToggle is IOperatorFilterToggle {\\n    bool public operatorRestriction;\\n\\n    function setOperatorRestriction(bool _restriction) external {\\n        require(_canSetOperatorRestriction(), \\\"Not authorized to set operator restriction.\\\");\\n        _setOperatorRestriction(_restriction);\\n    }\\n\\n    function _setOperatorRestriction(bool _restriction) internal {\\n        operatorRestriction = _restriction;\\n        emit OperatorRestriction(_restriction);\\n    }\\n\\n    function _canSetOperatorRestriction() internal virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/OperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IOperatorFilterRegistry.sol\\\";\\nimport \\\"./OperatorFilterToggle.sol\\\";\\n\\n/**\\n * @title  OperatorFilterer\\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\\n *         registrant's entries in the OperatorFilterRegistry.\\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\\n */\\n\\nabstract contract OperatorFilterer is OperatorFilterToggle {\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        _register(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (operatorRestriction) {\\n            if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n                if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                    revert OperatorNotAllowed(operator);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _register(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\\n        // Is the registry deployed?\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            // Is the subscription contract deployed?\\n            if (address(subscriptionOrRegistrantToCopy).code.length > 0) {\\n                // Do we want to subscribe?\\n                if (subscribe) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                }\\n            } else {\\n                OPERATOR_FILTER_REGISTRY.register(address(this));\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IOwnable.sol\\\";\\n\\n/**\\n *  @title   Ownable\\n *  @notice  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *           information about who the contract's owner is.\\n */\\n\\nabstract contract Ownable is IOwnable {\\n    /// @dev Owner of the contract (purpose: OpenSea compatibility)\\n    address private _owner;\\n\\n    /// @dev Reverts if caller is not the owner.\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     *  @notice Returns the owner of the contract.\\n     */\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     *  @notice Lets an authorized wallet set a new owner for the contract.\\n     *  @param _newOwner The address to set as the new owner of the contract.\\n     */\\n    function setOwner(address _newOwner) external override {\\n        if (!_canSetOwner()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _setupOwner(_newOwner);\\n    }\\n\\n    /// @dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin.\\n    function _setupOwner(address _newOwner) internal {\\n        address _prevOwner = _owner;\\n        _owner = _newOwner;\\n\\n        emit OwnerUpdated(_prevOwner, _newOwner);\\n    }\\n\\n    /// @dev Returns whether owner can be set in the given execution context.\\n    function _canSetOwner() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/Royalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IRoyalty.sol\\\";\\n\\n/**\\n *  @title   Royalty\\n *  @notice  Thirdweb's `Royalty` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           the recipient of royalty fee and the royalty fee basis points, and lets the inheriting contract perform conditional logic\\n *           that uses information about royalty fees, if desired.\\n *\\n *  @dev     The `Royalty` contract is ERC2981 compliant.\\n */\\n\\nabstract contract Royalty is IRoyalty {\\n    /// @dev The (default) address that receives all royalty value.\\n    address private royaltyRecipient;\\n\\n    /// @dev The (default) % of a sale to take as royalty (in basis points).\\n    uint16 private royaltyBps;\\n\\n    /// @dev Token ID => royalty recipient and bps for token\\n    mapping(uint256 => RoyaltyInfo) private royaltyInfoForToken;\\n\\n    /**\\n     *  @notice   View royalty info for a given token and sale price.\\n     *  @dev      Returns royalty amount and recipient for `tokenId` and `salePrice`.\\n     *  @param tokenId          The tokenID of the NFT for which to query royalty info.\\n     *  @param salePrice        Sale price of the token.\\n     *\\n     *  @return receiver        Address of royalty recipient account.\\n     *  @return royaltyAmount   Royalty amount calculated at current royaltyBps value.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        (address recipient, uint256 bps) = getRoyaltyInfoForToken(tokenId);\\n        receiver = recipient;\\n        royaltyAmount = (salePrice * bps) / 10_000;\\n    }\\n\\n    /**\\n     *  @notice          View royalty info for a given token.\\n     *  @dev             Returns royalty recipient and bps for `_tokenId`.\\n     *  @param _tokenId  The tokenID of the NFT for which to query royalty info.\\n     */\\n    function getRoyaltyInfoForToken(uint256 _tokenId) public view override returns (address, uint16) {\\n        RoyaltyInfo memory royaltyForToken = royaltyInfoForToken[_tokenId];\\n\\n        return\\n            royaltyForToken.recipient == address(0)\\n                ? (royaltyRecipient, uint16(royaltyBps))\\n                : (royaltyForToken.recipient, uint16(royaltyForToken.bps));\\n    }\\n\\n    /**\\n     *  @notice Returns the defualt royalty recipient and BPS for this contract's NFTs.\\n     */\\n    function getDefaultRoyaltyInfo() external view override returns (address, uint16) {\\n        return (royaltyRecipient, uint16(royaltyBps));\\n    }\\n\\n    /**\\n     *  @notice         Updates default royalty recipient and bps.\\n     *  @dev            Caller should be authorized to set royalty info.\\n     *                  See {_canSetRoyaltyInfo}.\\n     *                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\\n     *\\n     *  @param _royaltyRecipient   Address to be set as default royalty recipient.\\n     *  @param _royaltyBps         Updated royalty bps.\\n     */\\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external override {\\n        if (!_canSetRoyaltyInfo()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        _setupDefaultRoyaltyInfo(_royaltyRecipient, _royaltyBps);\\n    }\\n\\n    /// @dev Lets a contract admin update the default royalty recipient and bps.\\n    function _setupDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) internal {\\n        if (_royaltyBps > 10_000) {\\n            revert(\\\"Exceeds max bps\\\");\\n        }\\n\\n        royaltyRecipient = _royaltyRecipient;\\n        royaltyBps = uint16(_royaltyBps);\\n\\n        emit DefaultRoyalty(_royaltyRecipient, _royaltyBps);\\n    }\\n\\n    /**\\n     *  @notice         Updates default royalty recipient and bps for a particular token.\\n     *  @dev            Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.\\n     *                  See {_canSetRoyaltyInfo}.\\n     *                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\\n     *\\n     *  @param _recipient   Address to be set as royalty recipient for given token Id.\\n     *  @param _bps         Updated royalty bps for the token Id.\\n     */\\n    function setRoyaltyInfoForToken(\\n        uint256 _tokenId,\\n        address _recipient,\\n        uint256 _bps\\n    ) external override {\\n        if (!_canSetRoyaltyInfo()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        _setupRoyaltyInfoForToken(_tokenId, _recipient, _bps);\\n    }\\n\\n    /// @dev Lets a contract admin set the royalty recipient and bps for a particular token Id.\\n    function _setupRoyaltyInfoForToken(\\n        uint256 _tokenId,\\n        address _recipient,\\n        uint256 _bps\\n    ) internal {\\n        if (_bps > 10_000) {\\n            revert(\\\"Exceeds max bps\\\");\\n        }\\n\\n        royaltyInfoForToken[_tokenId] = RoyaltyInfo({ recipient: _recipient, bps: _bps });\\n\\n        emit RoyaltyForToken(_tokenId, _recipient, _bps);\\n    }\\n\\n    /// @dev Returns whether royalty info can be set in the given execution context.\\n    function _canSetRoyaltyInfo() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *  for you contract.\\n *\\n *  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\ninterface IContractMetadata {\\n    /// @dev Returns the metadata URI of the contract.\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\\n     *       Only module admin can call this function.\\n     */\\n    function setContractURI(string calldata _uri) external;\\n\\n    /// @dev Emitted when the contract URI is updated.\\n    event ContractURIUpdated(string prevURI, string newURI);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ninterface IMulticall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    function register(address registrant) external;\\n\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    function unregister(address addr) external;\\n\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    function isRegistered(address addr) external returns (bool);\\n\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IOperatorFilterToggle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\ninterface IOperatorFilterToggle {\\n    event OperatorRestriction(bool restriction);\\n\\n    function operatorRestriction() external view returns (bool);\\n\\n    function setOperatorRestriction(bool restriction) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *  information about who the contract's owner is.\\n */\\n\\ninterface IOwnable {\\n    /// @dev Returns the owner of the contract.\\n    function owner() external view returns (address);\\n\\n    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.\\n    function setOwner(address _newOwner) external;\\n\\n    /// @dev Emitted when a new Owner is set.\\n    event OwnerUpdated(address indexed prevOwner, address indexed newOwner);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IRoyalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../eip/interface/IERC2981.sol\\\";\\n\\n/**\\n *  Thirdweb's `Royalty` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of royalty fee and the royalty fee basis points, and lets the inheriting contract perform conditional logic\\n *  that uses information about royalty fees, if desired.\\n *\\n *  The `Royalty` contract is ERC2981 compliant.\\n */\\n\\ninterface IRoyalty is IERC2981 {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint256 bps;\\n    }\\n\\n    /// @dev Returns the royalty recipient and fee bps.\\n    function getDefaultRoyaltyInfo() external view returns (address, uint16);\\n\\n    /// @dev Lets a module admin update the royalty bps and recipient.\\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external;\\n\\n    /// @dev Lets a module admin set the royalty recipient for a particular token Id.\\n    function setRoyaltyInfoForToken(\\n        uint256 tokenId,\\n        address recipient,\\n        uint256 bps\\n    ) external;\\n\\n    /// @dev Returns the royalty recipient for a particular token Id.\\n    function getRoyaltyInfoForToken(uint256 tokenId) external view returns (address, uint16);\\n\\n    /// @dev Emitted when royalty info is updated.\\n    event DefaultRoyalty(address indexed newRoyaltyRecipient, uint256 newRoyaltyBps);\\n\\n    /// @dev Emitted when royalty recipient for tokenId is set\\n    event RoyaltyForToken(uint256 indexed tokenId, address indexed royaltyRecipient, uint256 royaltyBps);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/lib/TWAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary TWAddress {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * [EIP1884](https://eips.ethereum.org/EIPS/eip-1884) increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/lib/TWStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary TWStrings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/openzeppelin-presets/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/raffle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"@thirdweb-dev/contracts/base/ERC721Base.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/eip/interface/IERC20.sol\\\";\\n\\n//UPDATES TO THE ORIGINAL RAFFLE CONTRACT MADE TO ACCEPT CUSTOM ERC20 TOKENS FOR A RAFFLE. THIS CONTRACT ALLOWS THE USE OF MULTIPLE ERC20 TOKENS FOR EACH RAFFLE USING THE BUYTICKET FUNCTION AND THE PID\\n//UPDATED CODE BY @GENERATIONART_ (TWITTER)\\n\\ncontract NFTRaffleContract {\\n    address public admin;\\n    mapping(address => uint256) public entryCounts; // Mapping to store the count of entries per address\\n    address[] public players; //Array of players who bought tickets\\n    address[] public playerSelector; //Array of players for random selection\\n    address[] public winnerOfPrize; //prize winner\\n    bool public lotteryStatus; //True if the lottery is running\\n    uint256 public ticketCost;\\n    address public nftContract; //Address of the NFT contract for the prize\\n    uint256 public tokenId; //Token ID of the NFT for the prize\\n    uint256 public totalEntries; //Total number of entries\\n    uint256 public allow; // \\n    \\n    event NewTicketBought(address player); //Event when someone buys a ticket\\n    event LotteryStarted();\\n    event LotteryEnded();\\n    event Winner(address winner); //Event when someone wins the lottery\\n    event TicketCostChanged(uint256 newCost); //Event when the ticket cost is updated\\n    event NFTPrizeSet(address nftContract, uint256 tokenId);\\n    event BalanceWithdrawn(uint256 amount);\\n    \\n    //Declare use of custom ERC20 tokens\\n    struct TokenInfo {\\n            IERC20 paytoken;\\n            uint256 costvalue;\\n        }\\n        TokenInfo[] public AllowedCrypto;\\n        //pushes eligble tokens to the contract\\n        function addCurrency(\\n            IERC20 _paytoken,\\n            uint256 _costvalue\\n        ) public onlyAdmin {\\n            AllowedCrypto.push(\\n                TokenInfo({\\n                    paytoken: _paytoken,\\n                    costvalue: _costvalue\\n                })\\n            );\\n        }\\n    constructor() {\\n        admin = msg.sender; //The admin is the one who deploys the contract\\n        lotteryStatus = false; //Lottery is not running\\n        ticketCost = 0; //Initial ticket cost\\n        totalEntries = 0; //Initial total entries\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\"); //Sets the admin as the only one who can call functions\\n        _;\\n    }\\n\\n    function isPlayer(address participant) private view returns (bool) {\\n        for (uint256 i = 0; i < players.length; i++) {\\n            if (players[i] == participant) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function buyTicket(uint256 numberOfTickets, uint256 _pid) public payable {\\n        TokenInfo storage tokens = AllowedCrypto[_pid];\\n        IERC20 paytoken;\\n        paytoken = tokens.paytoken;\\n        uint256 cost;\\n        cost = tokens.costvalue;\\n        \\n        require(lotteryStatus == true, \\\"Lottery is not running\\\"); //Lottery must be running\\n        allow = paytoken.allowance(msg.sender, address(this));\\n        paytoken.transferFrom(msg.sender,address(this), cost * numberOfTickets);\\n        entryCounts[msg.sender] += numberOfTickets;\\n        totalEntries += numberOfTickets;\\n        \\n\\n        if (!isPlayer(msg.sender)) {\\n            players.push(msg.sender); //Add the player to the players array\\n        }\\n        \\n        for (uint256 i = 0; i < numberOfTickets; i++) {\\n            playerSelector.push(msg.sender); //Add the player to the playerSelector array\\n        }\\n\\n        emit NewTicketBought(msg.sender); //Emit the event that a new ticket was bought\\n    }\\n\\n    function startLottery(address _nftContract, uint256 _tokenId) public onlyAdmin {\\n        require(!lotteryStatus, \\\"Lottery is already running\\\"); //Lottery must not be running\\n        require(nftContract == address(0), \\\"Prize from previous lottery not transferred\\\");\\n        require(\\n            ERC721Base(_nftContract).ownerOf(_tokenId) == admin,\\n            \\\"Admin does not own the specified NFT.\\\"\\n        ); //Admin must own the NFT\\n\\n        nftContract = _nftContract;\\n        tokenId = _tokenId;\\n        lotteryStatus = true; //Set the lottery status to true\\n        emit LotteryStarted(); //Emit the event that the lottery has started\\n        emit NFTPrizeSet(nftContract, tokenId); \\n    }\\n\\n    function endLottery() public onlyAdmin {\\n        require(lotteryStatus, \\\"Lottery is not running\\\"); //Lottery must be running\\n\\n        lotteryStatus = false; //Set the lottery status to false\\n        emit LotteryEnded(); //Emit the event that the lottery has ended\\n    }\\n\\n    //Function returns a random number between 0 and the length of the players array\\n    function random() private view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        block.prevrandao,\\n                        block.timestamp,\\n                        players.length\\n                    )\\n                )\\n            );\\n    }\\n\\n    function resetEntryCounts() private {\\n        for (uint256 i = 0; i < players.length; i++) {\\n            entryCounts[players[i]] = 0;\\n        }\\n    }\\n\\n    function pickWinner() public onlyAdmin {\\n        require(!lotteryStatus, \\\"Lottery is still running\\\"); //Lottery must not be running\\n        require(playerSelector.length > 0, \\\"No players in the lottery\\\"); //There must be at least one player\\n        require(nftContract != address(0), \\\"NFT contract not set\\\"); //NFT contract must be set\\n        delete winnerOfPrize;\\n        uint256 index = random() % playerSelector.length; //Get a random index\\n        address winner = playerSelector[index]; //Get the winner address\\n        emit Winner(winner); //Emit the event that a winner was picked\\n        winnerOfPrize.push(winner);\\n        ERC721Base(nftContract).transferFrom(admin, winner, tokenId);\\n        resetEntryCounts(); //Reset the entry counts\\n        delete playerSelector; // Reset the playerSelector array\\n        delete players; // Reset the players array\\n        lotteryStatus = false; // Set lottery status to completed\\n        nftContract = address(0); // Reset the NFT contract address\\n        tokenId = 0; // Reset the token ID\\n        totalEntries = 0; // Reset the total entries\\n        \\n    }\\n\\n    function changeTicketCost(uint256 _newCost) public onlyAdmin {\\n        require(!lotteryStatus, \\\"Lottery is still running\\\"); //Lottery must not be running\\n        ticketCost = _newCost; //Set the new ticket cost\\n        emit TicketCostChanged(_newCost); //Emit the event that the ticket cost was updated\\n    }\\n\\n    function initialize() public  {\\n         //Set the new ticket cost for initialize purposes. User must override prior to starting raffle\\n    }\\n\\n    function getTokenCostInfo(uint256 _pid) public view returns (uint256){\\n        TokenInfo storage tokens = AllowedCrypto[_pid];\\n        IERC20 paytoken;\\n        paytoken = tokens.paytoken;\\n        uint256 cost;\\n        cost = tokens.costvalue;\\n        return cost;\\n    }\\n\\n    function getPlayers() public view returns (address[] memory) {\\n        return players; //Return the players array\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance; //Return the contract balance\\n    }\\n\\n    function getWinner() public view returns (address[] memory) {\\n        return winnerOfPrize;\\n     }\\n\\n    // Balance of from ERC721\\n    function getBalanceERC20(uint256 _pid) public view returns (uint256) {\\n        TokenInfo storage tokens = AllowedCrypto[_pid];\\n        IERC20 paytoken;\\n        paytoken = tokens.paytoken;\\n        return paytoken.balanceOf(address(this)); //Return the contract balance\\n    }\\n\\n   function getTokenInfo(uint256 _pid) public view returns (address) {\\n        TokenInfo storage tokens = AllowedCrypto[_pid];\\n        IERC20 paytoken;\\n        paytoken = tokens.paytoken;\\n        return address(paytoken); //Return the contract balance\\n    }\\n\\n    function withdrawBalance() public onlyAdmin {\\n        require(address(this).balance > 0, \\\"No balance to withdraw.\\\");\\n        uint256 amount = address(this).balance;\\n        payable(admin).transfer(amount);\\n        emit BalanceWithdrawn(amount);\\n    }\\n\\n     //custom withdraw function\\n    function withdraw(uint256 _pid) public payable onlyAdmin() {\\n        TokenInfo storage tokens = AllowedCrypto[_pid];\\n        IERC20 paytoken;\\n        paytoken = tokens.paytoken;\\n        paytoken.transfer(msg.sender, paytoken.balanceOf(address(this)));\\n    }\\n\\n    //Master reset function to reset the contract\\n    function resetContract() public onlyAdmin {\\n        delete playerSelector; // Reset the playerSelector array\\n        delete players; // Reset the players array\\n        lotteryStatus = false; // Set lottery status to completed\\n        nftContract = address(0); // Reset the NFT contract address\\n        tokenId = 0; // Reset the token ID\\n        ticketCost = 0; // Reset the ticket cost\\n        totalEntries = 0; // Reset the total entries\\n        delete AllowedCrypto;\\n        delete winnerOfPrize;\\n        resetEntryCounts(); //Reset the entry counts \\n    }\\n}   \"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"remappings\": [\r\n      \":@thirdweb-dev/=node_modules/@thirdweb-dev/\",\r\n      \":ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \":forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}