{
    "address": "0x2c9aF7D51e9D5450da4b4e049792811b86FBFD28",
    "tx_hash": "dc7760da4b4e4b510e7351675b3fe9c59b082aad0353cc89878155230bf827a2",
    "block_number": 18002902,
    "timestamp": 1693101863,
    "gas_used_in_creation": 1863037,
    "creation_bytecode": "60806040526007805460ff19169055600f600881905560098181556002600a818155600b91909155600c839055600d839055600e8390555f90925562000045916200033c565b6200005390614e2062000353565b601055620000646009600a6200033c565b6200007290614e2062000353565b601155620000836009600a6200033c565b6200009190614e2062000353565b601255620000a26009600a6200033c565b620000b09061138862000353565b6013556015805461ffff60a81b19169055348015620000cd575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060078054610100600160a81b0319166101003302179055620001336009600a6200033c565b6200014290620f424062000353565b335f9081526001602081905260408220929092556003906200016b5f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556007546101009004909116835291208054909216179055620001ce3390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002076009600a6200033c565b6200021690620f424062000353565b60405190815260200160405180910390a36200036d565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200028157815f19048211156200026557620002656200022d565b808516156200027357918102915b93841c939080029062000246565b509250929050565b5f82620002995750600162000336565b81620002a757505f62000336565b8160018114620002c05760028114620002cb57620002eb565b600191505062000336565b60ff841115620002df57620002df6200022d565b50506001821b62000336565b5060208310610133831016604e8410600b841016171562000310575081810a62000336565b6200031c838362000241565b805f19048211156200033257620003326200022d565b0290505b92915050565b5f6200034c60ff84168362000289565b9392505050565b80820281158282048414176200033657620003366200022d565b6119dd806200037b5f395ff3fe608060405260043610610129575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb1461033b578063bf474bed1461035a578063c876d0b91461036f578063c9567bf914610388578063dd62ed3e1461039c578063ec1f3f63146103e0575f80fd5b8063751039fc146102ab5780637d1db4a5146102bf5780638da5cb5b146102d45780638f9a55c0146102fa57806395d89b411461030f575f80fd5b8063313ce567116100ee578063313ce567146101fb5780633bbac5791461021657806351bc3c851461024d57806370a0823114610263578063715018a614610297575f80fd5b806306fdde0314610134578063095ea7b3146101765780630faee56f146101a557806318160ddd146101c857806323b872dd146101dc575f80fd5b3661013057005b5f80fd5b34801561013f575f80fd5b506040805180820190915260088152675775666620496e7560c01b60208201525b60405161016d91906115b9565b60405180910390f35b348015610181575f80fd5b5061019561019036600461161b565b6103ff565b604051901515815260200161016d565b3480156101b0575f80fd5b506101ba60135481565b60405190815260200161016d565b3480156101d3575f80fd5b506101ba610415565b3480156101e7575f80fd5b506101956101f6366004611645565b610434565b348015610206575f80fd5b506040516009815260200161016d565b348015610221575f80fd5b50610195610230366004611683565b6001600160a01b03165f9081526005602052604090205460ff1690565b348015610258575f80fd5b5061026161049b565b005b34801561026e575f80fd5b506101ba61027d366004611683565b6001600160a01b03165f9081526001602052604090205490565b3480156102a2575f80fd5b506102616104f1565b3480156102b6575f80fd5b5061026161056b565b3480156102ca575f80fd5b506101ba60105481565b3480156102df575f80fd5b505f546040516001600160a01b03909116815260200161016d565b348015610305575f80fd5b506101ba60115481565b34801561031a575f80fd5b506040805180820190915260048152632baaa32360e11b6020820152610160565b348015610346575f80fd5b5061019561035536600461161b565b610623565b348015610365575f80fd5b506101ba60125481565b34801561037a575f80fd5b506007546101959060ff1681565b348015610393575f80fd5b5061026161062f565b3480156103a7575f80fd5b506101ba6103b636600461169e565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b3480156103eb575f80fd5b506102616103fa3660046116d5565b6109d7565b5f61040b338484610a21565b5060015b92915050565b5f6104226009600a6117e0565b61042f90620f42406117ee565b905090565b5f610440848484610b44565b610491843361048c85604051806060016040528060288152602001611980602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611218565b610a21565b5060019392505050565b60075461010090046001600160a01b0316336001600160a01b0316146104bf575f80fd5b305f9081526001602052604090205480156104dd576104dd81611250565b4780156104ed576104ed816113d9565b5050565b5f546001600160a01b031633146105235760405162461bcd60e51b815260040161051a90611805565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105945760405162461bcd60e51b815260040161051a90611805565b6105a06009600a6117e0565b6105ad90620f42406117ee565b6010556105bc6009600a6117e0565b6105c990620f42406117ee565b6011556007805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106036009600a6117e0565b61061090620f42406117ee565b60405190815260200160405180910390a1565b5f61040b338484610b44565b5f546001600160a01b031633146106585760405162461bcd60e51b815260040161051a90611805565b601554600160a01b900460ff16156106b25760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161051a565b601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106fa9030906106ed6009600a6117e0565b61048c90620f42406117ee565b60145f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561074a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061076e919061183a565b6001600160a01b031663c9c653963060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107cd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107f1919061183a565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561083b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061085f919061183a565b601580546001600160a01b039283166001600160a01b03199091161790556014541663f305d71947306108a6816001600160a01b03165f9081526001602052604090205490565b5f806108b95f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561091f573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906109449190611855565b505060155460145460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610999573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109bd9190611880565b506015805462ff00ff60a01b19166201000160a01b179055565b60075461010090046001600160a01b0316336001600160a01b0316146109fb575f80fd5b600a548111158015610a0f5750600b548111155b610a17575f80fd5b600a819055600b55565b6001600160a01b038316610a835760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161051a565b6001600160a01b038216610ae45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161051a565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610ba85760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161051a565b6001600160a01b038216610c0a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161051a565b5f8111610c6b5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161051a565b5f80546001600160a01b03858116911614801590610c9657505f546001600160a01b03848116911614155b156110db576001600160a01b0384165f9081526005602052604090205460ff16158015610cdb57506001600160a01b0383165f9081526005602052604090205460ff16155b610ce3575f80fd5b60075460ff1615610d9a576014546001600160a01b03848116911614801590610d1a57506015546001600160a01b03848116911614155b15610d9a57325f908152600660205260409020544311610d885760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b606482015260840161051a565b325f9081526006602052604090204390555b6015546001600160a01b038581169116148015610dc557506014546001600160a01b03848116911614155b8015610de957506001600160a01b0383165f9081526003602052604090205460ff16155b15610f0457601054821115610e3c5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161051a565b60115482610e5e856001600160a01b03165f9081526001602052604090205490565b610e68919061189f565b1115610eb65760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161051a565b600e54600f541015610ecd57823b15610ecd575f80fd5b600f8054905f610edc836118b2565b90915550506001600160a01b0383165f908152600460205260409020805460ff191660011790555b610f306064610f2a600c54600f5411610f1f57600854610f23565b600a545b8590611414565b90611499565b6015549091506001600160a01b038481169116148015610f5957506001600160a01b0384163014155b1561103e57601054821115610fac5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161051a565b610fd16064610f2a600d54600f5411610fc757600954610f23565b600b548590611414565b9050600e54600f541180610ffc57506001600160a01b0384165f9081526004602052604090205460ff165b61103e5760405162461bcd60e51b815260206004820152601360248201527229b2b63632b91034b9903737ba10313abcb2b960691b604482015260640161051a565b305f90815260016020526040902054601554600160a81b900460ff1615801561107457506015546001600160a01b038581169116145b80156110895750601554600160b01b900460ff165b8015611096575060125481115b80156110a55750600e54600f54115b156110d9576110c76110c2846110bd846013546114da565b6114da565b611250565b4780156110d7576110d7476113d9565b505b505b801561115357305f908152600160205260409020546110fa90826114ee565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061114a9085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054611175908361154c565b6001600160a01b0385165f908152600160205260409020556111b861119a838361154c565b6001600160a01b0385165f90815260016020526040902054906114ee565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef611201858561154c565b60405190815260200160405180910390a350505050565b5f818484111561123b5760405162461bcd60e51b815260040161051a91906115b9565b505f61124784866118ca565b95945050505050565b6015805460ff60a81b1916600160a81b17905580156113c957601554600160a01b900460ff16156113c9576040805160028082526060820183525f9260208301908036833701905050905030815f815181106112ae576112ae6118dd565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611305573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611329919061183a565b8160018151811061133c5761133c6118dd565b6001600160a01b0392831660209182029290920101526014546113629130911684610a21565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac9479061139a9085905f908690309042906004016118f1565b5f604051808303815f87803b1580156113b1575f80fd5b505af11580156113c3573d5f803e3d5ffd5b50505050505b506015805460ff60a81b19169055565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104ed573d5f803e3d5ffd5b5f825f0361142357505f61040f565b5f61142e83856117ee565b90508261143b8583611960565b146114925760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161051a565b9392505050565b5f61149283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061158d565b5f8183116114e85782611492565b50919050565b5f806114fa838561189f565b9050838110156114925760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161051a565b5f61149283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611218565b5f81836115ad5760405162461bcd60e51b815260040161051a91906115b9565b505f6112478486611960565b5f6020808352835180828501525f5b818110156115e4578581018301518582016040015282016115c8565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611618575f80fd5b50565b5f806040838503121561162c575f80fd5b823561163781611604565b946020939093013593505050565b5f805f60608486031215611657575f80fd5b833561166281611604565b9250602084013561167281611604565b929592945050506040919091013590565b5f60208284031215611693575f80fd5b813561149281611604565b5f80604083850312156116af575f80fd5b82356116ba81611604565b915060208301356116ca81611604565b809150509250929050565b5f602082840312156116e5575f80fd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561173a57815f1904821115611720576117206116ec565b8085161561172d57918102915b93841c9390800290611705565b509250929050565b5f826117505750600161040f565b8161175c57505f61040f565b8160018114611772576002811461177c57611798565b600191505061040f565b60ff84111561178d5761178d6116ec565b50506001821b61040f565b5060208310610133831016604e8410600b84101617156117bb575081810a61040f565b6117c58383611700565b805f19048211156117d8576117d86116ec565b029392505050565b5f61149260ff841683611742565b808202811582820484141761040f5761040f6116ec565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f6020828403121561184a575f80fd5b815161149281611604565b5f805f60608486031215611867575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611890575f80fd5b81518015158114611492575f80fd5b8082018082111561040f5761040f6116ec565b5f600182016118c3576118c36116ec565b5060010190565b8181038181111561040f5761040f6116ec565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b8181101561193f5784516001600160a01b03168352938301939183019160010161191a565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261197a57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122084b6dcde057ecf72be18970f73106f9360fba0d03ca40437830de5a6ef13fadc64736f6c63430008140033",
    "runtime_bytecode": "608060405260043610610129575f3560e01c8063751039fc116100a8578063a9059cbb1161006d578063a9059cbb1461033b578063bf474bed1461035a578063c876d0b91461036f578063c9567bf914610388578063dd62ed3e1461039c578063ec1f3f63146103e0575f80fd5b8063751039fc146102ab5780637d1db4a5146102bf5780638da5cb5b146102d45780638f9a55c0146102fa57806395d89b411461030f575f80fd5b8063313ce567116100ee578063313ce567146101fb5780633bbac5791461021657806351bc3c851461024d57806370a0823114610263578063715018a614610297575f80fd5b806306fdde0314610134578063095ea7b3146101765780630faee56f146101a557806318160ddd146101c857806323b872dd146101dc575f80fd5b3661013057005b5f80fd5b34801561013f575f80fd5b506040805180820190915260088152675775666620496e7560c01b60208201525b60405161016d91906115b9565b60405180910390f35b348015610181575f80fd5b5061019561019036600461161b565b6103ff565b604051901515815260200161016d565b3480156101b0575f80fd5b506101ba60135481565b60405190815260200161016d565b3480156101d3575f80fd5b506101ba610415565b3480156101e7575f80fd5b506101956101f6366004611645565b610434565b348015610206575f80fd5b506040516009815260200161016d565b348015610221575f80fd5b50610195610230366004611683565b6001600160a01b03165f9081526005602052604090205460ff1690565b348015610258575f80fd5b5061026161049b565b005b34801561026e575f80fd5b506101ba61027d366004611683565b6001600160a01b03165f9081526001602052604090205490565b3480156102a2575f80fd5b506102616104f1565b3480156102b6575f80fd5b5061026161056b565b3480156102ca575f80fd5b506101ba60105481565b3480156102df575f80fd5b505f546040516001600160a01b03909116815260200161016d565b348015610305575f80fd5b506101ba60115481565b34801561031a575f80fd5b506040805180820190915260048152632baaa32360e11b6020820152610160565b348015610346575f80fd5b5061019561035536600461161b565b610623565b348015610365575f80fd5b506101ba60125481565b34801561037a575f80fd5b506007546101959060ff1681565b348015610393575f80fd5b5061026161062f565b3480156103a7575f80fd5b506101ba6103b636600461169e565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b3480156103eb575f80fd5b506102616103fa3660046116d5565b6109d7565b5f61040b338484610a21565b5060015b92915050565b5f6104226009600a6117e0565b61042f90620f42406117ee565b905090565b5f610440848484610b44565b610491843361048c85604051806060016040528060288152602001611980602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190611218565b610a21565b5060019392505050565b60075461010090046001600160a01b0316336001600160a01b0316146104bf575f80fd5b305f9081526001602052604090205480156104dd576104dd81611250565b4780156104ed576104ed816113d9565b5050565b5f546001600160a01b031633146105235760405162461bcd60e51b815260040161051a90611805565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146105945760405162461bcd60e51b815260040161051a90611805565b6105a06009600a6117e0565b6105ad90620f42406117ee565b6010556105bc6009600a6117e0565b6105c990620f42406117ee565b6011556007805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106036009600a6117e0565b61061090620f42406117ee565b60405190815260200160405180910390a1565b5f61040b338484610b44565b5f546001600160a01b031633146106585760405162461bcd60e51b815260040161051a90611805565b601554600160a01b900460ff16156106b25760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161051a565b601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106fa9030906106ed6009600a6117e0565b61048c90620f42406117ee565b60145f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561074a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061076e919061183a565b6001600160a01b031663c9c653963060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107cd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107f1919061183a565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561083b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061085f919061183a565b601580546001600160a01b039283166001600160a01b03199091161790556014541663f305d71947306108a6816001600160a01b03165f9081526001602052604090205490565b5f806108b95f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af115801561091f573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906109449190611855565b505060155460145460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610999573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109bd9190611880565b506015805462ff00ff60a01b19166201000160a01b179055565b60075461010090046001600160a01b0316336001600160a01b0316146109fb575f80fd5b600a548111158015610a0f5750600b548111155b610a17575f80fd5b600a819055600b55565b6001600160a01b038316610a835760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161051a565b6001600160a01b038216610ae45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161051a565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610ba85760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161051a565b6001600160a01b038216610c0a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161051a565b5f8111610c6b5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161051a565b5f80546001600160a01b03858116911614801590610c9657505f546001600160a01b03848116911614155b156110db576001600160a01b0384165f9081526005602052604090205460ff16158015610cdb57506001600160a01b0383165f9081526005602052604090205460ff16155b610ce3575f80fd5b60075460ff1615610d9a576014546001600160a01b03848116911614801590610d1a57506015546001600160a01b03848116911614155b15610d9a57325f908152600660205260409020544311610d885760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b606482015260840161051a565b325f9081526006602052604090204390555b6015546001600160a01b038581169116148015610dc557506014546001600160a01b03848116911614155b8015610de957506001600160a01b0383165f9081526003602052604090205460ff16155b15610f0457601054821115610e3c5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161051a565b60115482610e5e856001600160a01b03165f9081526001602052604090205490565b610e68919061189f565b1115610eb65760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161051a565b600e54600f541015610ecd57823b15610ecd575f80fd5b600f8054905f610edc836118b2565b90915550506001600160a01b0383165f908152600460205260409020805460ff191660011790555b610f306064610f2a600c54600f5411610f1f57600854610f23565b600a545b8590611414565b90611499565b6015549091506001600160a01b038481169116148015610f5957506001600160a01b0384163014155b1561103e57601054821115610fac5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b604482015260640161051a565b610fd16064610f2a600d54600f5411610fc757600954610f23565b600b548590611414565b9050600e54600f541180610ffc57506001600160a01b0384165f9081526004602052604090205460ff165b61103e5760405162461bcd60e51b815260206004820152601360248201527229b2b63632b91034b9903737ba10313abcb2b960691b604482015260640161051a565b305f90815260016020526040902054601554600160a81b900460ff1615801561107457506015546001600160a01b038581169116145b80156110895750601554600160b01b900460ff165b8015611096575060125481115b80156110a55750600e54600f54115b156110d9576110c76110c2846110bd846013546114da565b6114da565b611250565b4780156110d7576110d7476113d9565b505b505b801561115357305f908152600160205260409020546110fa90826114ee565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061114a9085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054611175908361154c565b6001600160a01b0385165f908152600160205260409020556111b861119a838361154c565b6001600160a01b0385165f90815260016020526040902054906114ee565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef611201858561154c565b60405190815260200160405180910390a350505050565b5f818484111561123b5760405162461bcd60e51b815260040161051a91906115b9565b505f61124784866118ca565b95945050505050565b6015805460ff60a81b1916600160a81b17905580156113c957601554600160a01b900460ff16156113c9576040805160028082526060820183525f9260208301908036833701905050905030815f815181106112ae576112ae6118dd565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611305573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611329919061183a565b8160018151811061133c5761133c6118dd565b6001600160a01b0392831660209182029290920101526014546113629130911684610a21565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac9479061139a9085905f908690309042906004016118f1565b5f604051808303815f87803b1580156113b1575f80fd5b505af11580156113c3573d5f803e3d5ffd5b50505050505b506015805460ff60a81b19169055565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156104ed573d5f803e3d5ffd5b5f825f0361142357505f61040f565b5f61142e83856117ee565b90508261143b8583611960565b146114925760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161051a565b9392505050565b5f61149283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061158d565b5f8183116114e85782611492565b50919050565b5f806114fa838561189f565b9050838110156114925760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161051a565b5f61149283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611218565b5f81836115ad5760405162461bcd60e51b815260040161051a91906115b9565b505f6112478486611960565b5f6020808352835180828501525f5b818110156115e4578581018301518582016040015282016115c8565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114611618575f80fd5b50565b5f806040838503121561162c575f80fd5b823561163781611604565b946020939093013593505050565b5f805f60608486031215611657575f80fd5b833561166281611604565b9250602084013561167281611604565b929592945050506040919091013590565b5f60208284031215611693575f80fd5b813561149281611604565b5f80604083850312156116af575f80fd5b82356116ba81611604565b915060208301356116ca81611604565b809150509250929050565b5f602082840312156116e5575f80fd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561173a57815f1904821115611720576117206116ec565b8085161561172d57918102915b93841c9390800290611705565b509250929050565b5f826117505750600161040f565b8161175c57505f61040f565b8160018114611772576002811461177c57611798565b600191505061040f565b60ff84111561178d5761178d6116ec565b50506001821b61040f565b5060208310610133831016604e8410600b84101617156117bb575081810a61040f565b6117c58383611700565b805f19048211156117d8576117d86116ec565b029392505050565b5f61149260ff841683611742565b808202811582820484141761040f5761040f6116ec565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f6020828403121561184a575f80fd5b815161149281611604565b5f805f60608486031215611867575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611890575f80fd5b81518015158114611492575f80fd5b8082018082111561040f5761040f6116ec565b5f600182016118c3576118c36116ec565b5060010190565b8181038181111561040f5761040f6116ec565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b8181101561193f5784516001600160a01b03168352938301939183019160010161191a565b50506001600160a01b03969096166060850152505050608001529392505050565b5f8261197a57634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a264697066735822122084b6dcde057ecf72be18970f73106f9360fba0d03ca40437830de5a6ef13fadc64736f6c63430008140033",
    "contract_name": "WUFF",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"reduceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n/**\r\n\r\n$Wuff Inu - Bringing back the dog meme nostalgia! \r\n\r\n$Wuff Inu is new hyper-deflationary dog token that is bringing back the original dog memecoin nostalgia with its high supply, hyper deflationary tokenomics and marketing strategy to spend every penny of the dev/marketing wallet on the project. \r\nWe\u2019re also donating to many dog charities and releasing 1000 awesome pixelated NFT\u2019s for anyone holding 1% supply to mint a max of 2 for free!\r\n\r\n$WUFF is designed to profit investors whilst contributing to the betterment of dog shelters worldwide! \r\nThus, we've designed our tokenomics to be hyper-deflationary with taxes constantly burning tokens out of supply and constantly filling up the marketing/dev wallet to ensure longterm success of $WUFF!\r\n\r\nSocials:\r\nTG: https://t.me/wuffinuportal\r\nWeb: https://www.wuffinu.site\r\n\r\n**/\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract WUFF is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _buyerMap;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=15;\r\n    uint256 private _initialSellTax=15;\r\n    uint256 private _finalBuyTax=2;\r\n    uint256 private _finalSellTax=2;\r\n    uint256 private _reduceBuyTaxAt=15;\r\n    uint256 private _reduceSellTaxAt=15;\r\n    uint256 private _preventSwapBefore=15;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 1000000 * 10**_decimals;\r\n    string private constant _name = unicode\"Wuff Inu\";\r\n    string private constant _symbol = unicode\"WUFF\";\r\n    uint256 public _maxTxAmount =   20000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 20000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold=20000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap=5000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_buyCount<_preventSwapBefore){\r\n                  require(!isContract(to));\r\n                }\r\n                _buyCount++;\r\n                _buyerMap[to]=true;\r\n            }\r\n\r\n\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n                require(_buyCount>_preventSwapBefore || _buyerMap[from],\"Seller is not buyer\");\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    function reduceFee(uint256 _newFee) external{\r\n      require(_msgSender()==_taxWallet);\r\n      require(_newFee<=_finalBuyTax && _newFee<=_finalSellTax);\r\n      _finalBuyTax=_newFee;\r\n      _finalSellTax=_newFee;\r\n    }\r\n    \r\n}",
    "etherscan_verified": true
}