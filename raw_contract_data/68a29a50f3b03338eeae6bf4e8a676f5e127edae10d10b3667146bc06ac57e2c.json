{
    "address": "0x1557408E1540337349Ca73F948C2FA5Fd94b8d5c",
    "tx_hash": "68a29a50f3b03338eeae6bf4e8a676f5e127edae10d10b3667146bc06ac57e2c",
    "block_number": 18002059,
    "timestamp": 1693091699,
    "gas_used_in_creation": 1896016,
    "creation_bytecode": "",
    "runtime_bytecode": "60806040526004361061011e575f3560e01c8063751039fc1161009d578063a9059cbb11610062578063a9059cbb146102fe578063bf474bed1461031d578063c876d0b914610332578063c9567bf91461034b578063dd62ed3e1461035f575f80fd5b8063751039fc1461029a5780637d1db4a5146102ae5780638da5cb5b146102c35780638f9a55c0146102e957806395d89b4114610129575f80fd5b8063313ce567116100e3578063313ce567146101ea5780633bbac5791461020557806351bc3c851461023c57806370a0823114610252578063715018a614610286575f80fd5b806306fdde0314610129578063095ea7b3146101655780630faee56f1461019457806318160ddd146101b757806323b872dd146101cb575f80fd5b3661012557005b5f80fd5b348015610134575f80fd5b5060408051808201825260058152644c414d424f60d81b6020820152905161015c9190611668565b60405180910390f35b348015610170575f80fd5b5061018461017f3660046116ca565b6103a3565b604051901515815260200161015c565b34801561019f575f80fd5b506101a960135481565b60405190815260200161015c565b3480156101c2575f80fd5b506101a96103b9565b3480156101d6575f80fd5b506101846101e53660046116f4565b6103da565b3480156101f5575f80fd5b506040516008815260200161015c565b348015610210575f80fd5b5061018461021f366004611732565b6001600160a01b03165f9081526005602052604090205460ff1690565b348015610247575f80fd5b50610250610441565b005b34801561025d575f80fd5b506101a961026c366004611732565b6001600160a01b03165f9081526001602052604090205490565b348015610291575f80fd5b50610250610497565b3480156102a5575f80fd5b50610250610511565b3480156102b9575f80fd5b506101a960105481565b3480156102ce575f80fd5b505f546040516001600160a01b03909116815260200161015c565b3480156102f4575f80fd5b506101a960115481565b348015610309575f80fd5b506101846103183660046116ca565b6105cf565b348015610328575f80fd5b506101a960125481565b34801561033d575f80fd5b506007546101849060ff1681565b348015610356575f80fd5b506102506105db565b34801561036a575f80fd5b506101a961037936600461174d565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f6103af338484610a9f565b5060015b92915050565b5f6103c66008600a611878565b6103d590641040720150611886565b905090565b5f6103e6848484610bc2565b610437843361043285604051806060016040528060288152602001611a18602891396001600160a01b038a165f90815260026020908152604080832033845290915290205491906112c7565b610a9f565b5060019392505050565b60075461010090046001600160a01b0316336001600160a01b031614610465575f80fd5b305f90815260016020526040902054801561048357610483816112ff565b4780156104935761049381611488565b5050565b5f546001600160a01b031633146104c95760405162461bcd60e51b81526004016104c09061189d565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b0316331461053a5760405162461bcd60e51b81526004016104c09061189d565b6105466008600a611878565b61055590641040720150611886565b6010556105646008600a611878565b61057390641040720150611886565b6011556007805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105ad6008600a611878565b6105bc90641040720150611886565b60405190815260200160405180910390a1565b5f6103af338484610bc2565b5f546001600160a01b031633146106045760405162461bcd60e51b81526004016104c09061189d565b601554600160a01b900460ff161561065e5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e00000000000000000060448201526064016104c0565b601480546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556106a89030906106996008600a611878565b61043290641040720150611886565b6014546040805163c45a015560e01b815290515f926001600160a01b03169163c45a01559160048083019260209291908290030181865afa1580156106ef573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061071391906118d2565b9050806001600160a01b031663e6a439053060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610775573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061079991906118d2565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa1580156107e2573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061080691906118d2565b601580546001600160a01b0319166001600160a01b0392909216918217905561093c57806001600160a01b031663c9c653963060145f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610889573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108ad91906118d2565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af11580156108f7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061091b91906118d2565b601580546001600160a01b0319166001600160a01b03929092169190911790555b6014546001600160a01b031663f305d719473061096d816001600160a01b03165f9081526001602052604090205490565b5f806109805f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af11580156109e6573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610a0b91906118ed565b505060155460145460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af1158015610a60573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a849190611918565b50506015805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b038316610b015760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104c0565b6001600160a01b038216610b625760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104c0565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610c265760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104c0565b6001600160a01b038216610c885760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104c0565b5f8111610ce95760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b60648201526084016104c0565b5f80546001600160a01b03858116911614801590610d1457505f546001600160a01b03848116911614155b1561118a576001600160a01b0384165f9081526005602052604090205460ff16158015610d5957506001600160a01b0383165f9081526005602052604090205460ff16155b610d61575f80fd5b610d946064610d8e601560149054906101000a900460ff16610d8557600854610d87565b5f5b85906114c3565b90611548565b60075490915060ff1615610e4e576014546001600160a01b03848116911614801590610dce57506015546001600160a01b03848116911614155b15610e4e57325f908152600660205260409020544311610e3c5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f6044820152633bb2b21760e11b60648201526084016104c0565b325f9081526006602052604090204390555b6015546001600160a01b038581169116148015610e7957506014546001600160a01b03848116911614155b8015610e9d57506001600160a01b0383165f9081526003602052604090205460ff16155b15610fe257601054821115610ef05760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104c0565b60115482610f12856001600160a01b03165f9081526001602052604090205490565b610f1c9190611937565b1115610f6a5760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e00000000000060448201526064016104c0565b600e54600f541015610f8157823b15610f81575f80fd5b600f8054905f610f908361194a565b90915550506001600160a01b0383165f908152600460205260409020805460ff19166001179055600c54600f54610fdf91606491610d8e9110610fd557600854610d87565b600a5485906114c3565b90505b6015546001600160a01b03848116911614801561100857506001600160a01b0384163014155b156110ed5760105482111561105b5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b239903a3432902fb6b0bc2a3c20b6b7bab73a1760391b60448201526064016104c0565b6110806064610d8e600d54600f541161107657600954610d87565b600b5485906114c3565b9050600e54600f5411806110ab57506001600160a01b0384165f9081526004602052604090205460ff165b6110ed5760405162461bcd60e51b815260206004820152601360248201527229b2b63632b91034b9903737ba10313abcb2b960691b60448201526064016104c0565b305f90815260016020526040902054601554600160a81b900460ff1615801561112357506015546001600160a01b038581169116145b80156111385750601554600160b01b900460ff165b8015611145575060125481115b80156111545750600e54600f54115b15611188576111766111718461116c84601354611589565b611589565b6112ff565b4780156111865761118647611488565b505b505b801561120257305f908152600160205260409020546111a9908261159d565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111f99085815260200190565b60405180910390a35b6001600160a01b0384165f9081526001602052604090205461122490836115fb565b6001600160a01b0385165f9081526001602052604090205561126761124983836115fb565b6001600160a01b0385165f908152600160205260409020549061159d565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6112b085856115fb565b60405190815260200160405180910390a350505050565b5f81848411156112ea5760405162461bcd60e51b81526004016104c09190611668565b505f6112f68486611962565b95945050505050565b6015805460ff60a81b1916600160a81b179055801561147857601554600160a01b900460ff1615611478576040805160028082526060820183525f9260208301908036833701905050905030815f8151811061135d5761135d611975565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156113b4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113d891906118d2565b816001815181106113eb576113eb611975565b6001600160a01b0392831660209182029290920101526014546114119130911684610a9f565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac947906114499085905f90869030904290600401611989565b5f604051808303815f87803b158015611460575f80fd5b505af1158015611472573d5f803e3d5ffd5b50505050505b506015805460ff60a81b19169055565b6007546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f19350505050158015610493573d5f803e3d5ffd5b5f825f036114d257505f6103b3565b5f6114dd8385611886565b9050826114ea85836119f8565b146115415760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016104c0565b9392505050565b5f61154183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061163c565b5f8183116115975782611541565b50919050565b5f806115a98385611937565b9050838110156115415760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016104c0565b5f61154183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112c7565b5f818361165c5760405162461bcd60e51b81526004016104c09190611668565b505f6112f684866119f8565b5f6020808352835180828501525f5b8181101561169357858101830151858201604001528201611677565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146116c7575f80fd5b50565b5f80604083850312156116db575f80fd5b82356116e6816116b3565b946020939093013593505050565b5f805f60608486031215611706575f80fd5b8335611711816116b3565b92506020840135611721816116b3565b929592945050506040919091013590565b5f60208284031215611742575f80fd5b8135611541816116b3565b5f806040838503121561175e575f80fd5b8235611769816116b3565b91506020830135611779816116b3565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156117d257815f19048211156117b8576117b8611784565b808516156117c557918102915b93841c939080029061179d565b509250929050565b5f826117e8575060016103b3565b816117f457505f6103b3565b816001811461180a576002811461181457611830565b60019150506103b3565b60ff84111561182557611825611784565b50506001821b6103b3565b5060208310610133831016604e8410600b8410161715611853575081810a6103b3565b61185d8383611798565b805f190482111561187057611870611784565b029392505050565b5f61154160ff8416836117da565b80820281158282048414176103b3576103b3611784565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156118e2575f80fd5b8151611541816116b3565b5f805f606084860312156118ff575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611928575f80fd5b81518015158114611541575f80fd5b808201808211156103b3576103b3611784565b5f6001820161195b5761195b611784565b5060010190565b818103818111156103b3576103b3611784565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156119d75784516001600160a01b0316835293830193918301916001016119b2565b50506001600160a01b03969096166060850152505050608001529392505050565b5f82611a1257634e487b7160e01b5f52601260045260245ffd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220affc284670a17d926c672106c3e6dec8259b013b2b8e68b582d1f059d94b86cb64736f6c63430008140033",
    "contract_name": "LAMBO",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"main\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n\\nhttps://t.me/lambocoinerc\\n\\nhttps://lambocoin.finance/\\n\\n\\n\\n**/\\npragma solidity 0.8.20;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ncontract LAMBO is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _isExcludedFromFee;\\n    mapping (address => bool) private _buyerMap;\\n    mapping (address => bool) private bots;\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\n    bool public transferDelayEnabled = false;\\n    address payable private _taxWallet;\\n\\n    uint256 private _initialBuyTax=10;\\n    uint256 private _initialSellTax=10;\\n    uint256 private _finalBuyTax=5;\\n    uint256 private _finalSellTax=5;\\n    uint256 private _reduceBuyTaxAt=1;\\n    uint256 private _reduceSellTaxAt=20;\\n    uint256 private _preventSwapBefore=10;\\n    uint256 private _buyCount=0;\\n\\n    uint8 private constant _decimals = 8;\\n    uint256 private constant _tTotal = 69800690000 * 10**_decimals;\\n    string private constant _name = unicode\\\"LAMBO\\\";\\n    string private constant _symbol = unicode\\\"LAMBO\\\";\\n    uint256 public _maxTxAmount =   1396013800 * 10**_decimals;\\n    uint256 public _maxWalletSize = 1396013800 * 10**_decimals;\\n    uint256 public _taxSwapThreshold=349003450 * 10**_decimals;\\n    uint256 public _maxTaxSwap=1396013800 * 10**_decimals;\\n\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address private uniswapV2Pair;\\n    bool private tradingOpen;\\n    bool private inSwap = false;\\n    bool private swapEnabled = false;\\n\\n    event MaxTxAmountUpdated(uint _maxTxAmount);\\n    modifier lockTheSwap {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor () {\\n        _taxWallet = payable(_msgSender());\\n        _balances[_msgSender()] = _tTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_taxWallet] = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        uint256 taxAmount=0;\\n        if (from != owner() && to != owner()) {\\n            require(!bots[from] && !bots[to]);\\n            taxAmount=amount.mul((tradingOpen)?0:_initialBuyTax).div(100);\\n            if (transferDelayEnabled) {\\n              if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\\n                require(_holderLastTransferTimestamp[tx.origin] < block.number,\\\"Only one transfer per block allowed.\\\");\\n                _holderLastTransferTimestamp[tx.origin] = block.number;\\n              }\\n            }\\n\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\n                if(_buyCount<_preventSwapBefore){\\n                  require(!isContract(to));\\n                }\\n                _buyCount++;\\n                _buyerMap[to]=true;\\n                taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\\n            }\\n\\n            if(to == uniswapV2Pair && from!= address(this) ){\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\\n                require(_buyCount>_preventSwapBefore || _buyerMap[from],\\\"Seller is not buyer\\\");\\n            }\\n\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\\n                uint256 contractETHBalance = address(this).balance;\\n                if(contractETHBalance > 0) {\\n                    sendETHToFee(address(this).balance);\\n                }\\n            }\\n        }\\n\\n        if(taxAmount>0){\\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\\n          emit Transfer(from, address(this),taxAmount);\\n        }\\n        _balances[from]=_balances[from].sub(amount);\\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\\n        emit Transfer(from, to, amount.sub(taxAmount));\\n    }\\n\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256){\\n      return (a>b)?b:a;\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        if(tokenAmount==0){return;}\\n        if(!tradingOpen){return;}\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function removeLimits() external onlyOwner{\\n        _maxTxAmount = _tTotal;\\n        _maxWalletSize=_tTotal;\\n        transferDelayEnabled=false;\\n        emit MaxTxAmountUpdated(_tTotal);\\n    }\\n\\n    function sendETHToFee(uint256 amount) private {\\n        _taxWallet.transfer(amount);\\n    }\\n\\n    function isBot(address a) public view returns (bool){\\n      return bots[a];\\n    }\\n\\n    function openTrading() external onlyOwner() {\\n        require(!tradingOpen,\\\"trading is already open\\\");\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        IUniswapV2Factory factory=IUniswapV2Factory(uniswapV2Router.factory());\\n        uniswapV2Pair = factory.getPair(address(this),uniswapV2Router.WETH());\\n        if(uniswapV2Pair==address(0x0)){\\n          uniswapV2Pair = factory.createPair(address(this), uniswapV2Router.WETH());\\n        }\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        swapEnabled = true;\\n        tradingOpen = true;\\n    }\\n\\n    receive() external payable {}\\n\\n    function isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function manualSwap() external {\\n        require(_msgSender()==_taxWallet);\\n        uint256 tokenBalance=balanceOf(address(this));\\n        if(tokenBalance>0){\\n          swapTokensForEth(tokenBalance);\\n        }\\n        uint256 ethBalance=address(this).balance;\\n        if(ethBalance>0){\\n          sendETHToFee(ethBalance);\\n        }\\n    }\\n\\n    \\n    \\n    \\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}