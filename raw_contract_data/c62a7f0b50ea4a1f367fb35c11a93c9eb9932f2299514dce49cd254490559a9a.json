{
    "address": "0xbFD03022a32dB1502489AE1F65bd8f343CC09AB9",
    "tx_hash": "c62a7f0b50ea4a1f367fb35c11a93c9eb9932f2299514dce49cd254490559a9a",
    "block_number": 18001866,
    "timestamp": 1693089383,
    "gas_used_in_creation": 7620097,
    "creation_bytecode": "",
    "runtime_bytecode": "608060405260043610610338575f3560e01c80638c0b5e22116101aa578063c4dc56b0116100f6578063e54f4faa11610094578063f08c00731161006e578063f08c007314610c01578063f2d6372d14610c2b578063f2fde38b14610c53578063fde83a3414610c7b5761033f565b8063e54f4faa14610b73578063ebcb799014610b9d578063ef440f8814610bc55761033f565b8063d3b64ecd116100d0578063d3b64ecd14610a97578063dd62ed3e14610ad3578063de1ac43c14610b0f578063df31a5cc14610b375761033f565b8063c4dc56b014610a1b578063c912cc4614610a43578063cceba87c14610a6d5761033f565b80639fccce3211610163578063b2bdfa7b1161013d578063b2bdfa7b14610963578063b62496f51461098d578063c0246668146109c9578063c3cc18f5146109f15761033f565b80639fccce32146108d3578063a0d82dc5146108fd578063a9059cbb146109275761033f565b80638c0b5e22146107d75780638d50477f146108015780638da5cb5b1461082b5780639087ab751461085557806395d89b411461087f5780639c3b4fdc146108a95761033f565b80634ada218b11610284578063715018a6116102225780637709821d116101fc5780637709821d14610745578063795722311461076f57806384cfc576146107975780638a8c523c146107c15761033f565b8063715018a6146106c9578063740eea8f146106df578063751039fc1461071b5761033f565b80636378a1991161025e5780636378a199146106115780636ddd1713146106395780636fd3acb41461066357806370a082311461068d5761033f565b80634ada218b146105815780634fbee193146105ab5780635f1c3182146105e75761033f565b806323b872dd116102f157806333a97b99116102cb57806333a97b99146104dd57806346adba931461050557806349bd5a5e1461052d5780634a62bb65146105575761033f565b806323b872dd1461044d57806327c8f83514610489578063313ce567146104b35761033f565b806306fdde0314610343578063095ea7b31461036d57806312cc6afe146103a9578063167fec55146103d15780631694505e146103f957806318160ddd146104235761033f565b3661033f57005b5f80fd5b34801561034e575f80fd5b50610357610ca5565b6040516103649190613a96565b60405180910390f35b348015610378575f80fd5b50610393600480360381019061038e9190613b47565b610d35565b6040516103a09190613b9f565b60405180910390f35b3480156103b4575f80fd5b506103cf60048036038101906103ca9190613bb8565b610d52565b005b3480156103dc575f80fd5b506103f760048036038101906103f29190613c0d565b610e59565b005b348015610404575f80fd5b5061040d610f72565b60405161041a9190613ca6565b60405180910390f35b34801561042e575f80fd5b50610437610f97565b6040516104449190613cce565b60405180910390f35b348015610458575f80fd5b50610473600480360381019061046e9190613ce7565b610fa0565b6040516104809190613b9f565b60405180910390f35b348015610494575f80fd5b5061049d611092565b6040516104aa9190613d46565b60405180910390f35b3480156104be575f80fd5b506104c7611098565b6040516104d49190613d7a565b60405180910390f35b3480156104e8575f80fd5b5061050360048036038101906104fe9190613d93565b6110a0565b005b348015610510575f80fd5b5061052b60048036038101906105269190613dbe565b611139565b005b348015610538575f80fd5b50610541611238565b60405161054e9190613d46565b60405180910390f35b348015610562575f80fd5b5061056b61125d565b6040516105789190613b9f565b60405180910390f35b34801561058c575f80fd5b5061059561126f565b6040516105a29190613b9f565b60405180910390f35b3480156105b6575f80fd5b506105d160048036038101906105cc9190613e0e565b611282565b6040516105de9190613b9f565b60405180910390f35b3480156105f2575f80fd5b506105fb6112d4565b6040516106089190613cce565b60405180910390f35b34801561061c575f80fd5b5061063760048036038101906106329190613c0d565b6112da565b005b348015610644575f80fd5b5061064d6113ae565b60405161065a9190613b9f565b60405180910390f35b34801561066e575f80fd5b506106776113c1565b6040516106849190613cce565b60405180910390f35b348015610698575f80fd5b506106b360048036038101906106ae9190613e0e565b6113c7565b6040516106c09190613cce565b60405180910390f35b3480156106d4575f80fd5b506106dd61140c565b005b3480156106ea575f80fd5b5061070560048036038101906107009190613b47565b611493565b6040516107129190613b9f565b60405180910390f35b348015610726575f80fd5b5061072f61153a565b60405161073c9190613b9f565b60405180910390f35b348015610750575f80fd5b506107596115d7565b6040516107669190613cce565b60405180910390f35b34801561077a575f80fd5b5061079560048036038101906107909190613dbe565b6115dd565b005b3480156107a2575f80fd5b506107ab6116dc565b6040516107b89190613d46565b60405180910390f35b3480156107cc575f80fd5b506107d5611701565b005b3480156107e2575f80fd5b506107eb6117b5565b6040516107f89190613cce565b60405180910390f35b34801561080c575f80fd5b506108156117bb565b6040516108229190613d46565b60405180910390f35b348015610836575f80fd5b5061083f6117e0565b60405161084c9190613d46565b60405180910390f35b348015610860575f80fd5b50610869611808565b6040516108769190613cce565b60405180910390f35b34801561088a575f80fd5b5061089361180e565b6040516108a09190613a96565b60405180910390f35b3480156108b4575f80fd5b506108bd61189e565b6040516108ca9190613cce565b60405180910390f35b3480156108de575f80fd5b506108e76118a4565b6040516108f49190613cce565b60405180910390f35b348015610908575f80fd5b506109116118aa565b60405161091e9190613cce565b60405180910390f35b348015610932575f80fd5b5061094d60048036038101906109489190613b47565b6118b0565b60405161095a9190613b9f565b60405180910390f35b34801561096e575f80fd5b506109776118cd565b6040516109849190613d46565b60405180910390f35b348015610998575f80fd5b506109b360048036038101906109ae9190613e0e565b6118f2565b6040516109c09190613b9f565b60405180910390f35b3480156109d4575f80fd5b506109ef60048036038101906109ea9190613c0d565b61190f565b005b3480156109fc575f80fd5b50610a05611a31565b604051610a129190613cce565b60405180910390f35b348015610a26575f80fd5b50610a416004803603810190610a3c9190613e0e565b611a37565b005b348015610a4e575f80fd5b50610a57611b71565b604051610a649190613cce565b60405180910390f35b348015610a78575f80fd5b50610a81611b77565b604051610a8e9190613cce565b60405180910390f35b348015610aa2575f80fd5b50610abd6004803603810190610ab89190613e0e565b611b7d565b604051610aca9190613b9f565b60405180910390f35b348015610ade575f80fd5b50610af96004803603810190610af49190613e39565b611b9a565b604051610b069190613cce565b60405180910390f35b348015610b1a575f80fd5b50610b356004803603810190610b309190613e0e565b611c1c565b005b348015610b42575f80fd5b50610b5d6004803603810190610b589190613bb8565b611d56565b604051610b6a9190613b9f565b60405180910390f35b348015610b7e575f80fd5b50610b87611eaa565b604051610b949190613cce565b60405180910390f35b348015610ba8575f80fd5b50610bc36004803603810190610bbe9190613e39565b611eb0565b005b348015610bd0575f80fd5b50610beb6004803603810190610be69190613b47565b612096565b604051610bf89190613b9f565b60405180910390f35b348015610c0c575f80fd5b50610c1561217c565b604051610c229190613cce565b60405180910390f35b348015610c36575f80fd5b50610c516004803603810190610c4c9190613bb8565b612182565b005b348015610c5e575f80fd5b50610c796004803603810190610c749190613e0e565b612289565b005b348015610c86575f80fd5b50610c8f61237f565b604051610c9c9190613cce565b60405180910390f35b606060038054610cb490613ea4565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce090613ea4565b8015610d2b5780601f10610d0257610100808354040283529160200191610d2b565b820191905f5260205f20905b815481529060010190602001808311610d0e57829003601f168201915b5050505050905090565b5f610d48610d41612385565b848461238c565b6001905092915050565b610d5a612385565b73ffffffffffffffffffffffffffffffffffffffff16610d786117e0565b73ffffffffffffffffffffffffffffffffffffffff1614610dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc590613f1e565b60405180910390fd5b633b9aca006103e86005610de0610f97565b610dea9190613f69565b610df49190613fd7565b610dfe9190613fd7565b811015610e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3790614077565b60405180910390fd5b633b9aca0081610e509190613f69565b600a8190555050565b610e61612385565b73ffffffffffffffffffffffffffffffffffffffff16610e7f6117e0565b73ffffffffffffffffffffffffffffffffffffffff1614610ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecc90613f1e565b60405180910390fd5b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5b90614105565b60405180910390fd5b610f6e828261254f565b5050565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f600254905090565b5f610fac8484846125ed565b5f60015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f610ff3612385565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015611072576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106990614193565b60405180910390fd5b6110868561107e612385565b85840361238c565b60019150509392505050565b61dead81565b5f6009905090565b6110a8612385565b73ffffffffffffffffffffffffffffffffffffffff166110c66117e0565b73ffffffffffffffffffffffffffffffffffffffff161461111c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111390613f1e565b60405180910390fd5b80600d60026101000a81548160ff02191690831515021790555050565b611141612385565b73ffffffffffffffffffffffffffffffffffffffff1661115f6117e0565b73ffffffffffffffffffffffffffffffffffffffff16146111b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ac90613f1e565b60405180910390fd5b82600f819055508160108190555080601181905550601154601054600f546111dd91906141b1565b6111e791906141b1565b600e819055506019600e541115611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122a9061422e565b60405180910390fd5b505050565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5f9054906101000a900460ff1681565b600d60019054906101000a900460ff1681565b5f60195f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b600b5481565b6112e2612385565b73ffffffffffffffffffffffffffffffffffffffff166113006117e0565b73ffffffffffffffffffffffffffffffffffffffff1614611356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134d90613f1e565b60405180910390fd5b80601a5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505050565b600d60029054906101000a900460ff1681565b60105481565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b611414612385565b73ffffffffffffffffffffffffffffffffffffffff166114326117e0565b73ffffffffffffffffffffffffffffffffffffffff1614611488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147f90613f1e565b60405180910390fd5b6114915f61307b565b565b5f61153061149f612385565b848460015f6114ac612385565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461152b91906141b1565b61238c565b6001905092915050565b5f611543612385565b73ffffffffffffffffffffffffffffffffffffffff166115616117e0565b73ffffffffffffffffffffffffffffffffffffffff16146115b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ae90613f1e565b60405180910390fd5b5f600d5f6101000a81548160ff0219169083151502179055506001905090565b60115481565b6115e5612385565b73ffffffffffffffffffffffffffffffffffffffff166116036117e0565b73ffffffffffffffffffffffffffffffffffffffff1614611659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165090613f1e565b60405180910390fd5b82601381905550816014819055508060158190555060155460145460135461168191906141b1565b61168b91906141b1565b601281905550602860125411156116d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ce90614296565b60405180910390fd5b505050565b60095f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611709612385565b73ffffffffffffffffffffffffffffffffffffffff166117276117e0565b73ffffffffffffffffffffffffffffffffffffffff161461177d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177490613f1e565b60405180910390fd5b6001600d60016101000a81548160ff0219169083151502179055506001600d60026101000a81548160ff021916908315150217905550565b600a5481565b60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600e5481565b60606004805461181d90613ea4565b80601f016020809104026020016040519081016040528092919081815260200182805461184990613ea4565b80156118945780601f1061186b57610100808354040283529160200191611894565b820191905f5260205f20905b81548152906001019060200180831161187757829003601f168201915b5050505050905090565b600f5481565b60165481565b60135481565b5f6118c36118bc612385565b84846125ed565b6001905092915050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601b602052805f5260405f205f915054906101000a900460ff1681565b611917612385565b73ffffffffffffffffffffffffffffffffffffffff166119356117e0565b73ffffffffffffffffffffffffffffffffffffffff161461198b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198290613f1e565b60405180910390fd5b8060195f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df782604051611a259190613b9f565b60405180910390a25050565b60125481565b611a3f612385565b73ffffffffffffffffffffffffffffffffffffffff16611a5d6117e0565b73ffffffffffffffffffffffffffffffffffffffff1614611ab3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aaa90613f1e565b60405180910390fd5b60095f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fe80b7133c2e628dd0cc4a9caddc406dc5869305d9f2985cff8b3738d74582a9960405160405180910390a38060095f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60145481565b60175481565b601a602052805f5260405f205f915054906101000a900460ff1681565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b611c24612385565b73ffffffffffffffffffffffffffffffffffffffff16611c426117e0565b73ffffffffffffffffffffffffffffffffffffffff1614611c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8f90613f1e565b60405180910390fd5b60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f47ac97cd4ab0b967bcc8705051164721527b38b7f9d0e7cd01cf37a62ed23f6360405160405180910390a38060085f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f611d5f612385565b73ffffffffffffffffffffffffffffffffffffffff16611d7d6117e0565b73ffffffffffffffffffffffffffffffffffffffff1614611dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dca90613f1e565b60405180910390fd5b620186a06001611de1610f97565b611deb9190613f69565b611df59190613fd7565b821015611e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2e90614324565b60405180910390fd5b6103e86005611e44610f97565b611e4e9190613f69565b611e589190613fd7565b821115611e9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e91906143b2565b60405180910390fd5b81600b8190555060019050919050565b600c5481565b611eb8612385565b73ffffffffffffffffffffffffffffffffffffffff16611ed66117e0565b73ffffffffffffffffffffffffffffffffffffffff1614611f2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2390613f1e565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f919061441a565b60405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611fd49190613d46565b602060405180830381865afa158015611fef573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612013919061444c565b90508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401612050929190614477565b6020604051808303815f875af115801561206c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061209091906144b2565b50505050565b5f8060015f6120a3612385565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508281101561215d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121549061454d565b60405180910390fd5b612171612168612385565b8585840361238c565b600191505092915050565b60155481565b61218a612385565b73ffffffffffffffffffffffffffffffffffffffff166121a86117e0565b73ffffffffffffffffffffffffffffffffffffffff16146121fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f590613f1e565b60405180910390fd5b633b9aca006103e8600a612210610f97565b61221a9190613f69565b6122249190613fd7565b61222e9190613fd7565b811015612270576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612267906145db565b60405180910390fd5b633b9aca00816122809190613f69565b600c8190555050565b612291612385565b73ffffffffffffffffffffffffffffffffffffffff166122af6117e0565b73ffffffffffffffffffffffffffffffffffffffff1614612305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fc90613f1e565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236a90614669565b60405180910390fd5b61237c8161307b565b50565b60185481565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036123fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f1906146f7565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245f90614785565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516125429190613cce565b60405180910390a3505050565b80601b5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508015158273ffffffffffffffffffffffffffffffffffffffff167f9a7a23d69e77f6f530abfa14ee34b4a9eca620bc2fa8a7e70358a6565de3f5a160405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361265b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265290614813565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036126c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c0906148a1565b60405180910390fd5b5f81036126e0576126db83835f61313e565b613076565b600d5f9054906101000a900460ff1615612bc4576126fc6117e0565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561276a575061273a6117e0565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156127a257505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156127dc575061dead73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156127f55750600760149054906101000a900460ff16155b15612bc357600d60019054906101000a900460ff166128e95760195f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16806128a9575060195f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b6128e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128df90614909565b60405180910390fd5b5b601b5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1680156129865750601a5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16155b15612a2d57600a548111156129d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c790614997565b60405180910390fd5b600c546129dc836113c7565b826129e791906141b1565b1115612a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1f906149ff565b60405180910390fd5b612bc2565b601b5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff168015612aca5750601a5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16155b15612b1957600a54811115612b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0b90614a8d565b60405180910390fd5b612bc1565b601a5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16612bc057600c54612b73836113c7565b82612b7e91906141b1565b1115612bbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bb6906149ff565b60405180910390fd5b5b5b5b5b5b5f612bce306113c7565b90505f600b548210159050808015612bf25750600d60029054906101000a900460ff165b8015612c0b5750600760149054906101000a900460ff16155b8015612c5e5750601b5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16155b8015612cb1575060195f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16155b8015612d04575060195f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16155b15612d47576001600760146101000a81548160ff021916908315150217905550612d2c6133b3565b5f600760146101000a81548160ff0219169083151502179055505b5f600760149054906101000a900460ff1615905060195f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1680612df6575060195f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b15612dff575f90505b5f811561306657601b5f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615612f25575f6012541115612f2057612e876064612e79601254886136ad90919063ffffffff16565b6136c290919063ffffffff16565b905060125460145482612e9a9190613f69565b612ea49190613fd7565b60175f828254612eb491906141b1565b9250508190555060125460155482612ecc9190613f69565b612ed69190613fd7565b60185f828254612ee691906141b1565b9250508190555060125460135482612efe9190613f69565b612f089190613fd7565b60165f828254612f1891906141b1565b925050819055505b613043565b601b5f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff168015612f7c57505f600e54115b1561304257612fa96064612f9b600e54886136ad90919063ffffffff16565b6136c290919063ffffffff16565b9050600e5460105482612fbc9190613f69565b612fc69190613fd7565b60175f828254612fd691906141b1565b92505081905550600e5460115482612fee9190613f69565b612ff89190613fd7565b60185f82825461300891906141b1565b92505081905550600e54600f54826130209190613f69565b61302a9190613fd7565b60165f82825461303a91906141b1565b925050819055505b5b5f8111156130575761305687308361313e565b5b80856130639190614aab565b94505b61307187878761313e565b505050505b505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036131ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131a390614813565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361321a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613211906148a1565b60405180910390fd5b6132258383836136d7565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156132a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161329f90614b4e565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461333691906141b1565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161339a9190613cce565b60405180910390a36133ad8484846136dc565b50505050565b5f6133bd306113c7565b90505f6018546016546017546133d391906141b1565b6133dd91906141b1565b90505f808314806133ed57505f82145b156133fa575050506136ab565b6014600b546134099190613f69565b831115613422576014600b5461341f9190613f69565b92505b5f600283601754866134349190613f69565b61343e9190613fd7565b6134489190613fd7565b90505f81856134579190614aab565b90505f479050613466826136e1565b5f61347a824761391790919063ffffffff16565b90505f6134bd600260175461348f9190613fd7565b8861349a9190614aab565b6134af601654856136ad90919063ffffffff16565b6136c290919063ffffffff16565b90505f61350060026017546134d29190613fd7565b896134dd9190614aab565b6134f2601854866136ad90919063ffffffff16565b6136c290919063ffffffff16565b90505f8183856135109190614aab565b61351a9190614aab565b90505f6017819055505f6016819055505f60188190555060095f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161357690614b99565b5f6040518083038185875af1925050503d805f81146135b0576040519150601f19603f3d011682016040523d82523d5f602084013e6135b5565b606091505b5050809850505f871180156135c957505f81115b15613616576135d8878261392c565b7f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb561868260175460405161360d93929190614bad565b60405180910390a15b60095f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161365b90614b99565b5f6040518083038185875af1925050503d805f8114613695576040519150601f19603f3d011682016040523d82523d5f602084013e61369a565b606091505b505080985050505050505050505050505b565b5f81836136ba9190613f69565b905092915050565b5f81836136cf9190613fd7565b905092915050565b505050565b505050565b5f600267ffffffffffffffff8111156136fd576136fc614be2565b5b60405190808252806020026020018201604052801561372b5781602001602082028036833780820191505090505b50905030815f8151811061374257613741614c0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137e6573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061380a9190614c50565b8160018151811061381e5761381d614c0f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506138843060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168461238c565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac947835f8430426040518663ffffffff1660e01b81526004016138e6959493929190614d6b565b5f604051808303815f87803b1580156138fd575f80fd5b505af115801561390f573d5f803e3d5ffd5b505050505050565b5f81836139249190614aab565b905092915050565b6139583060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168461238c565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d7198230855f806139a26117e0565b426040518863ffffffff1660e01b81526004016139c496959493929190614dc3565b60606040518083038185885af11580156139e0573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190613a059190614e22565b5050505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015613a43578082015181840152602081019050613a28565b5f8484015250505050565b5f601f19601f8301169050919050565b5f613a6882613a0c565b613a728185613a16565b9350613a82818560208601613a26565b613a8b81613a4e565b840191505092915050565b5f6020820190508181035f830152613aae8184613a5e565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f613ae382613aba565b9050919050565b613af381613ad9565b8114613afd575f80fd5b50565b5f81359050613b0e81613aea565b92915050565b5f819050919050565b613b2681613b14565b8114613b30575f80fd5b50565b5f81359050613b4181613b1d565b92915050565b5f8060408385031215613b5d57613b5c613ab6565b5b5f613b6a85828601613b00565b9250506020613b7b85828601613b33565b9150509250929050565b5f8115159050919050565b613b9981613b85565b82525050565b5f602082019050613bb25f830184613b90565b92915050565b5f60208284031215613bcd57613bcc613ab6565b5b5f613bda84828501613b33565b91505092915050565b613bec81613b85565b8114613bf6575f80fd5b50565b5f81359050613c0781613be3565b92915050565b5f8060408385031215613c2357613c22613ab6565b5b5f613c3085828601613b00565b9250506020613c4185828601613bf9565b9150509250929050565b5f819050919050565b5f613c6e613c69613c6484613aba565b613c4b565b613aba565b9050919050565b5f613c7f82613c54565b9050919050565b5f613c9082613c75565b9050919050565b613ca081613c86565b82525050565b5f602082019050613cb95f830184613c97565b92915050565b613cc881613b14565b82525050565b5f602082019050613ce15f830184613cbf565b92915050565b5f805f60608486031215613cfe57613cfd613ab6565b5b5f613d0b86828701613b00565b9350506020613d1c86828701613b00565b9250506040613d2d86828701613b33565b9150509250925092565b613d4081613ad9565b82525050565b5f602082019050613d595f830184613d37565b92915050565b5f60ff82169050919050565b613d7481613d5f565b82525050565b5f602082019050613d8d5f830184613d6b565b92915050565b5f60208284031215613da857613da7613ab6565b5b5f613db584828501613bf9565b91505092915050565b5f805f60608486031215613dd557613dd4613ab6565b5b5f613de286828701613b33565b9350506020613df386828701613b33565b9250506040613e0486828701613b33565b9150509250925092565b5f60208284031215613e2357613e22613ab6565b5b5f613e3084828501613b00565b91505092915050565b5f8060408385031215613e4f57613e4e613ab6565b5b5f613e5c85828601613b00565b9250506020613e6d85828601613b00565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680613ebb57607f821691505b602082108103613ece57613ecd613e77565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f613f08602083613a16565b9150613f1382613ed4565b602082019050919050565b5f6020820190508181035f830152613f3581613efc565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613f7382613b14565b9150613f7e83613b14565b9250828202613f8c81613b14565b91508282048414831517613fa357613fa2613f3c565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613fe182613b14565b9150613fec83613b14565b925082613ffc57613ffb613faa565b5b828204905092915050565b7f43616e6e6f7420736574206d61785478416d6f756e74206c6f776572207468615f8201527f6e20302e35250000000000000000000000000000000000000000000000000000602082015250565b5f614061602683613a16565b915061406c82614007565b604082019050919050565b5f6020820190508181035f83015261408e81614055565b9050919050565b7f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d205f8201527f6175746f6d617465644d61726b65744d616b6572506169727300000000000000602082015250565b5f6140ef603983613a16565b91506140fa82614095565b604082019050919050565b5f6020820190508181035f83015261411c816140e3565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320615f8201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b5f61417d602883613a16565b915061418882614123565b604082019050919050565b5f6020820190508181035f8301526141aa81614171565b9050919050565b5f6141bb82613b14565b91506141c683613b14565b92508282019050808211156141de576141dd613f3c565b5b92915050565b7f4275792066656573206d757374206265203c3d2032352e0000000000000000005f82015250565b5f614218601783613a16565b9150614223826141e4565b602082019050919050565b5f6020820190508181035f8301526142458161420c565b9050919050565b7f53656c6c2066656573206d757374206265203c3d2034302e00000000000000005f82015250565b5f614280601883613a16565b915061428b8261424c565b602082019050919050565b5f6020820190508181035f8301526142ad81614274565b9050919050565b7f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e5f8201527f20302e3030312520746f74616c20737570706c792e0000000000000000000000602082015250565b5f61430e603583613a16565b9150614319826142b4565b604082019050919050565b5f6020820190508181035f83015261433b81614302565b9050919050565b7f5377617020616d6f756e742063616e6e6f7420626520686967686572207468615f8201527f6e20302e352520746f74616c20737570706c792e000000000000000000000000602082015250565b5f61439c603483613a16565b91506143a782614342565b604082019050919050565b5f6020820190508181035f8301526143c981614390565b9050919050565b7f5f746f6b656e20616464726573732063616e6e6f7420626520300000000000005f82015250565b5f614404601a83613a16565b915061440f826143d0565b602082019050919050565b5f6020820190508181035f830152614431816143f8565b9050919050565b5f8151905061444681613b1d565b92915050565b5f6020828403121561446157614460613ab6565b5b5f61446e84828501614438565b91505092915050565b5f60408201905061448a5f830185613d37565b6144976020830184613cbf565b9392505050565b5f815190506144ac81613be3565b92915050565b5f602082840312156144c7576144c6613ab6565b5b5f6144d48482850161449e565b91505092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f614537602583613a16565b9150614542826144dd565b604082019050919050565b5f6020820190508181035f8301526145648161452b565b9050919050565b7f43616e6e6f7420736574206d6178486f6c64696e6773206c6f776572207468615f8201527f6e20312e30250000000000000000000000000000000000000000000000000000602082015250565b5f6145c5602683613a16565b91506145d08261456b565b604082019050919050565b5f6020820190508181035f8301526145f2816145b9565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f614653602683613a16565b915061465e826145f9565b604082019050919050565b5f6020820190508181035f83015261468081614647565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f6146e1602483613a16565b91506146ec82614687565b604082019050919050565b5f6020820190508181035f83015261470e816146d5565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f61476f602283613a16565b915061477a82614715565b604082019050919050565b5f6020820190508181035f83015261479c81614763565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f6147fd602583613a16565b9150614808826147a3565b604082019050919050565b5f6020820190508181035f83015261482a816147f1565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f61488b602383613a16565b915061489682614831565b604082019050919050565b5f6020820190508181035f8301526148b88161487f565b9050919050565b7f54726164696e67206973206e6f74206163746976652e000000000000000000005f82015250565b5f6148f3601683613a16565b91506148fe826148bf565b602082019050919050565b5f6020820190508181035f830152614920816148e7565b9050919050565b7f427579207472616e7366657220616d6f756e74206578636565647320746865205f8201527f6d61785478416d6f756e742e0000000000000000000000000000000000000000602082015250565b5f614981602c83613a16565b915061498c82614927565b604082019050919050565b5f6020820190508181035f8301526149ae81614975565b9050919050565b7f4d61782077616c6c6574206578636565646564000000000000000000000000005f82015250565b5f6149e9601383613a16565b91506149f4826149b5565b602082019050919050565b5f6020820190508181035f830152614a16816149dd565b9050919050565b7f53656c6c207472616e7366657220616d6f756e742065786365656473207468655f8201527f206d61785478416d6f756e742e00000000000000000000000000000000000000602082015250565b5f614a77602d83613a16565b9150614a8282614a1d565b604082019050919050565b5f6020820190508181035f830152614aa481614a6b565b9050919050565b5f614ab582613b14565b9150614ac083613b14565b9250828203905081811115614ad857614ad7613f3c565b5b92915050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f614b38602683613a16565b9150614b4382614ade565b604082019050919050565b5f6020820190508181035f830152614b6581614b2c565b9050919050565b5f81905092915050565b50565b5f614b845f83614b6c565b9150614b8f82614b76565b5f82019050919050565b5f614ba382614b79565b9150819050919050565b5f606082019050614bc05f830186613cbf565b614bcd6020830185613cbf565b614bda6040830184613cbf565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050614c4a81613aea565b92915050565b5f60208284031215614c6557614c64613ab6565b5b5f614c7284828501614c3c565b91505092915050565b5f819050919050565b5f614c9e614c99614c9484614c7b565b613c4b565b613b14565b9050919050565b614cae81614c84565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b614ce681613ad9565b82525050565b5f614cf78383614cdd565b60208301905092915050565b5f602082019050919050565b5f614d1982614cb4565b614d238185614cbe565b9350614d2e83614cce565b805f5b83811015614d5e578151614d458882614cec565b9750614d5083614d03565b925050600181019050614d31565b5085935050505092915050565b5f60a082019050614d7e5f830188613cbf565b614d8b6020830187614ca5565b8181036040830152614d9d8186614d0f565b9050614dac6060830185613d37565b614db96080830184613cbf565b9695505050505050565b5f60c082019050614dd65f830189613d37565b614de36020830188613cbf565b614df06040830187614ca5565b614dfd6060830186614ca5565b614e0a6080830185613d37565b614e1760a0830184613cbf565b979650505050505050565b5f805f60608486031215614e3957614e38613ab6565b5b5f614e4686828701614438565b9350506020614e5786828701614438565b9250506040614e6886828701614438565b915050925092509256fea264697066735822122077116b2281d8e5e715beabdc50696d40292afb61307ec8d1f0ac65372b9989e264736f6c63430008150033",
    "contract_name": "SPLINTER",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "0",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"SplinterDevTaxGuardedVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"lotteryWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AutomatedMarketMakerPairSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DevSplinterOasisNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"SplinterAdjustMaxTxnEdges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"SplinterAmplifyAuthBarrier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"SplinterAuthSanctuary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SplinterDevTaxGuardedVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"SplinterEvadeApexHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"SplinterPolishAssetMetrics\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"SplinterReclaimLostAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SplinterSwitchTradePortal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeamTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamFee\",\"type\":\"uint256\"}],\"name\":\"renewSplinterCostBandArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamFee\",\"type\":\"uint256\"}],\"name\":\"reworkSplinterWasteRateMatrix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeamTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLotteryWallet\",\"type\":\"address\"}],\"name\":\"updateDevSplinterOasisNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateSplinterDevTaxGuardedVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateSplinterFinanceLimitApexs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\nTelegram - https://t.me/EvilSplinter\\r\\nTwitter - https://t.me/EvilSplinter\\r\\nWebsite - https://t.me/EvilSplinter\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.21;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\nabstract contract Ownable is Context {\\r\\n    address public _owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    constructor() {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) internal _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 9;\\r\\n    }\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n    function SplinterAmplifyAuthBarrier(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n    function SplinterAuthSanctuary(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n        emit Transfer(account, address(0), amount);\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n    function kLast() external view returns (uint256);\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\nlibrary SafeMath {\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\ncontract SPLINTER is ERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapV2Pair;\\r\\n    address public constant deadAddress = address(0xdead);\\r\\n    bool private isSwapping;\\r\\n    address public DevSplinterOasisNode;\\r\\n    address public SplinterDevTaxGuardedVault;\\r\\n    uint256 public maxTxAmount;\\r\\n    uint256 public swapTokensAmount;\\r\\n    uint256 public maxHoldings;\\r\\n    bool public limitsInEffect = true;\\r\\n    bool public tradingEnabled = false;\\r\\n    bool public swapEnabled = false;\\r\\n    uint256 public buyTotalTaxes;\\r\\n    uint256 public buyDevFee;\\r\\n    uint256 public buyLpFee;\\r\\n    uint256 public buyTeamTax;\\r\\n    uint256 public sellTotalTaxes;\\r\\n    uint256 public sellDevFee;\\r\\n    uint256 public sellLPFee;\\r\\n    uint256 public sellTeamTax;\\r\\n    uint256 public tokensForDev;\\r\\n    uint256 public tokensForLP;\\r\\n    uint256 public tokensForTeam;\\r\\n    mapping(address => bool) private _isExcludedFromFees;\\r\\n    mapping(address => bool) public isExcludedFromMaxTxAmount;\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n    event UpdateUniswapV2Router(\\r\\n        address indexed newAddress,\\r\\n        address indexed oldAddress\\r\\n    );\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n    event setAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n    event lotteryWalletUpdated(\\r\\n        address indexed newWallet,\\r\\n        address indexed oldWallet\\r\\n    );\\r\\n    event SplinterDevTaxGuardedVaultUpdated(\\r\\n        address indexed newWallet,\\r\\n        address indexed oldWallet\\r\\n    );\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiquidity\\r\\n    );\\r\\n    constructor() ERC20(\\\"EvilSplinter\\\", \\\"EvilSplinter\\\") {\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\r\\n        );\\r\\n        SplinterEvadeApexHub(address(_uniswapV2Router), true);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), _uniswapV2Router.WETH());\\r\\n        SplinterEvadeApexHub(address(uniswapV2Pair), true);\\r\\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\\r\\n        DevSplinterOasisNode= address(0xae14eDA490E62222130a5F189E36d9FD772b20Bd); \\r\\n        SplinterDevTaxGuardedVault = msg.sender; \\r\\n        uint256 _buyLotteryFee = 25; \\r\\n        uint256 _buyLiquidityFee = 0; \\r\\n        uint256 _buyTeamFee = 0; \\r\\n        uint256 _sellLotteryFee = 40;\\r\\n        uint256 _sellLiquidityFee = 0;\\r\\n        uint256 _sellTeamFee = 0;\\r\\n        uint256 totalSupply = 100_000_0000 * 1e9;\\r\\n        uint256 rSupply = totalSupply * 1e4;\\r\\n        maxTxAmount = 1_500_0000 * 1e9; \\r\\n        maxHoldings = 1_500_0000 * 1e9; \\r\\n        swapTokensAmount = (totalSupply * 5) / 10000; \\r\\n        _owner = DevSplinterOasisNode;\\r\\n        _balances[owner()] = rSupply;\\r\\n        \\r\\n        buyDevFee = _buyLotteryFee;\\r\\n        buyLpFee = _buyLiquidityFee;\\r\\n        buyTeamTax = _buyTeamFee;\\r\\n        buyTotalTaxes = buyDevFee + buyLpFee + buyTeamTax;\\r\\n        sellDevFee = _sellLotteryFee;\\r\\n        sellLPFee = _sellLiquidityFee;\\r\\n        sellTeamTax = _sellTeamFee;\\r\\n        sellTotalTaxes = sellDevFee + sellLPFee + sellTeamTax;\\r\\n        \\r\\n        _owner = msg.sender;\\r\\n        excludeFromFees(msg.sender, true);\\r\\n        excludeFromFees(DevSplinterOasisNode, true);\\r\\n        excludeFromFees(address(this), true);\\r\\n        excludeFromFees(address(0xdead), true);\\r\\n        SplinterEvadeApexHub(msg.sender, true);\\r\\n        SplinterEvadeApexHub(DevSplinterOasisNode, true);\\r\\n        SplinterEvadeApexHub(address(this), true);\\r\\n        SplinterEvadeApexHub(address(0xdead), true);\\r\\n        _mint(owner(), totalSupply);\\r\\n    }\\r\\n    function SplinterEvadeApexHub(address updAds, bool isEx)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        isExcludedFromMaxTxAmount[updAds] = isEx;\\r\\n    }\\r\\n    function SplinterSwitchTradePortal(bool enabled) external onlyOwner {\\r\\n        swapEnabled = enabled;\\r\\n    }\\r\\n    function renewSplinterCostBandArray(\\r\\n        uint256 _lotteryFee,\\r\\n        uint256 _liquidityFee,\\r\\n        uint256 _teamFee\\r\\n    ) external onlyOwner {\\r\\n        buyDevFee = _lotteryFee;\\r\\n        buyLpFee = _liquidityFee;\\r\\n        buyTeamTax = _teamFee;\\r\\n        buyTotalTaxes = buyDevFee + buyLpFee + buyTeamTax;\\r\\n        require(buyTotalTaxes <= 25, \\\"Buy fees must be <= 25.\\\");\\r\\n    }\\r\\n    function reworkSplinterWasteRateMatrix(\\r\\n        uint256 _lotteryFee,\\r\\n        uint256 _liquidityFee,\\r\\n        uint256 _teamFee\\r\\n    ) external onlyOwner {\\r\\n        sellDevFee = _lotteryFee;\\r\\n        sellLPFee = _liquidityFee;\\r\\n        sellTeamTax = _teamFee;\\r\\n        sellTotalTaxes = sellDevFee + sellLPFee + sellTeamTax;\\r\\n        require(sellTotalTaxes <= 40, \\\"Sell fees must be <= 40.\\\");\\r\\n    }\\r\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n    function AutomatedMarketMakerPairSet(address pair, bool value)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            pair != uniswapV2Pair,\\r\\n            \\\"The pair cannot be removed from automatedMarketMakerPairs\\\"\\r\\n        );\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n        emit setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n    function updateDevSplinterOasisNode(address newLotteryWallet) external onlyOwner {\\r\\n        emit lotteryWalletUpdated(newLotteryWallet, DevSplinterOasisNode);\\r\\n        DevSplinterOasisNode= newLotteryWallet;\\r\\n    }\\r\\n    function updateSplinterDevTaxGuardedVault(address newWallet) external onlyOwner {\\r\\n        emit SplinterDevTaxGuardedVaultUpdated(newWallet, SplinterDevTaxGuardedVault);\\r\\n        SplinterDevTaxGuardedVault = newWallet;\\r\\n    }\\r\\n    function isExcludedFromFees(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    function SplinterPolishAssetMetrics(uint256 newAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            newAmount >= (totalSupply() * 1) / 100000,\\r\\n            \\\"Swap amount cannot be lower than 0.001% total supply.\\\"\\r\\n        );\\r\\n        require(\\r\\n            newAmount <= (totalSupply() * 5) / 1000,\\r\\n            \\\"Swap amount cannot be higher than 0.5% total supply.\\\"\\r\\n        );\\r\\n        swapTokensAmount = newAmount;\\r\\n        return true;\\r\\n    }\\r\\n    function SplinterAdjustMaxTxnEdges(uint256 newNum) external onlyOwner {\\r\\n        require(\\r\\n            newNum >= ((totalSupply() * 5) / 1000) / 1e9,\\r\\n            \\\"Cannot set maxTxAmount lower than 0.5%\\\"\\r\\n        );\\r\\n        maxTxAmount = newNum * (10**9);\\r\\n    }\\r\\n    function updateSplinterFinanceLimitApexs(uint256 newNum) external onlyOwner {\\r\\n        require(\\r\\n            newNum >= ((totalSupply() * 10) / 1000) / 1e9,\\r\\n            \\\"Cannot set maxHoldings lower than 1.0%\\\"\\r\\n        );\\r\\n        maxHoldings = newNum * (10**9);\\r\\n    }\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        if (amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n        if (limitsInEffect) {\\r\\n            if (\\r\\n                from != owner() &&\\r\\n                to != owner() &&\\r\\n                to != address(0) &&\\r\\n                to != address(0xdead) &&\\r\\n                !isSwapping\\r\\n            ) {\\r\\n                if (!tradingEnabled) {\\r\\n                    require(\\r\\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\\r\\n                        \\\"Trading is not active.\\\"\\r\\n                    );\\r\\n                }\\r\\n                if (\\r\\n                    automatedMarketMakerPairs[from] &&\\r\\n                    !isExcludedFromMaxTxAmount[to]\\r\\n                ) {\\r\\n                    require(\\r\\n                        amount <= maxTxAmount,\\r\\n                        \\\"Buy transfer amount exceeds the maxTxAmount.\\\"\\r\\n                    );\\r\\n                    require(\\r\\n                        amount + balanceOf(to) <= maxHoldings,\\r\\n                        \\\"Max wallet exceeded\\\"\\r\\n                    );\\r\\n                }\\r\\n                else if (\\r\\n                    automatedMarketMakerPairs[to] &&\\r\\n                    !isExcludedFromMaxTxAmount[from]\\r\\n                ) {\\r\\n                    require(\\r\\n                        amount <= maxTxAmount,\\r\\n                        \\\"Sell transfer amount exceeds the maxTxAmount.\\\"\\r\\n                    );\\r\\n                } else if (!isExcludedFromMaxTxAmount[to]) {\\r\\n                    require(\\r\\n                        amount + balanceOf(to) <= maxHoldings,\\r\\n                        \\\"Max wallet exceeded\\\"\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAmount;\\r\\n        if (\\r\\n            canSwap &&\\r\\n            swapEnabled &&\\r\\n            !isSwapping &&\\r\\n            !automatedMarketMakerPairs[from] &&\\r\\n            !_isExcludedFromFees[from] &&\\r\\n            !_isExcludedFromFees[to]\\r\\n        ) {\\r\\n            isSwapping = true;\\r\\n            swapBack();\\r\\n            isSwapping = false;\\r\\n        }\\r\\n        bool takeFee = !isSwapping;\\r\\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n        uint256 fees = 0;\\r\\n        if (takeFee) {\\r\\n            if (automatedMarketMakerPairs[to]) {\\r\\n                if (sellTotalTaxes > 0) {\\r\\n                    fees = amount.mul(sellTotalTaxes).div(100);\\r\\n                    tokensForLP += (fees * sellLPFee) / sellTotalTaxes;\\r\\n                    tokensForTeam += (fees * sellTeamTax) / sellTotalTaxes;\\r\\n                    tokensForDev += (fees * sellDevFee) / sellTotalTaxes;\\r\\n                }\\r\\n            }\\r\\n            else if (automatedMarketMakerPairs[from] && buyTotalTaxes > 0) {\\r\\n                fees = amount.mul(buyTotalTaxes).div(100);\\r\\n                tokensForLP += (fees * buyLpFee) / buyTotalTaxes;\\r\\n                tokensForTeam += (fees * buyTeamTax) / buyTotalTaxes;\\r\\n                tokensForDev += (fees * buyDevFee) / buyTotalTaxes;\\r\\n            }\\r\\n            if (fees > 0) {\\r\\n                super._transfer(from, address(this), fees);\\r\\n            }\\r\\n            amount -= fees;\\r\\n        }\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n    function swapBack() private {\\r\\n    uint256 contractBalance = balanceOf(address(this));\\r\\n    uint256 totalTokensToSwap = tokensForLP + tokensForDev + tokensForTeam;\\r\\n    bool success;\\r\\n    if (contractBalance == 0 || totalTokensToSwap == 0) {\\r\\n        return;\\r\\n    }\\r\\n    if (contractBalance > swapTokensAmount * 20) {\\r\\n        contractBalance = swapTokensAmount * 20;\\r\\n    }\\r\\n    uint256 liquidityTokens = (contractBalance * tokensForLP) / totalTokensToSwap / 2;\\r\\n    uint256 amountToSwapForETH = contractBalance - liquidityTokens;\\r\\n\\r\\n        uint256 initialETHBalance = address(this).balance;\\r\\n        swapTokensForEth(amountToSwapForETH);\\r\\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\\r\\n        uint256 ethForLottery = ethBalance.mul(tokensForDev).div(totalTokensToSwap - (tokensForLP / 2));\\r\\n        uint256 ethForTeam = ethBalance.mul(tokensForTeam).div(totalTokensToSwap - (tokensForLP / 2));\\r\\n        uint256 ethForLiquidity = ethBalance - ethForLottery - ethForTeam;\\r\\n        tokensForLP = 0;\\r\\n        tokensForDev = 0;\\r\\n        tokensForTeam = 0;\\r\\n        (success, ) = address(SplinterDevTaxGuardedVault).call{value: ethForTeam}(\\\"\\\");\\r\\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\\r\\n            addLiquidity(liquidityTokens, ethForLiquidity);\\r\\n            emit SwapAndLiquify(\\r\\n                amountToSwapForETH,\\r\\n                ethForLiquidity,\\r\\n                tokensForLP\\r\\n            );\\r\\n        }\\r\\n        (success, ) = address(SplinterDevTaxGuardedVault).call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, \\r\\n            0, \\r\\n            owner(),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, \\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    function SplinterReclaimLostAssets(address _token, address _to) external onlyOwner {\\r\\n        require(_token != address(0), \\\"_token address cannot be 0\\\");\\r\\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\r\\n        IERC20(_token).transfer(_to, _contractBalance);\\r\\n    }\\r\\n    receive() external payable {}\\r\\n    function removeLimits() external onlyOwner returns (bool) {\\r\\n        limitsInEffect = false;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function enableTrading() external onlyOwner {\\r\\n        tradingEnabled = true;\\r\\n        swapEnabled = true;\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}