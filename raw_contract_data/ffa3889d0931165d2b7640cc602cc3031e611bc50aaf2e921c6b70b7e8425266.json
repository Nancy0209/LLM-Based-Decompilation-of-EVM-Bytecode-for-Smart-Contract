{
    "address": "0xE5513c73eaCe54F05fDfa98061784bfd66b86bEA",
    "tx_hash": "ffa3889d0931165d2b7640cc602cc3031e611bc50aaf2e921c6b70b7e8425266",
    "block_number": 18005319,
    "timestamp": 1693131035,
    "gas_used_in_creation": 4264399,
    "creation_bytecode": "60806040526001600c8190556000600d819055600e819055600f8290556010829055601181905560128190556013556014805460ff191690911790553480156200004857600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350604080518082019091526007808252663130b13cb137b160c91b6020909201918252620000ba9160049162000515565b50604080518082019091526007808252662120a12ca127a160c91b6020909201918252620000eb9160059162000515565b506006805460ff1916600990811790915566017e9dbba79d00906200011290600a62000677565b6200011e908262000738565b600881905533600081815260016020908152604080832085905551938452919283927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3600380546001600160a01b031916331790556008546064906200019090600262000738565b6200019c91906200060d565b601555306000818152600760209081526040808320805460ff1990811660019081179092556001600160a01b038781168652838620805483168417905560035416855282852080549091169091179055600980546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091559383526002825280832084845282528083206000199055805163c45a015560e01b81529051849263c45a01559260048082019391829003018186803b1580156200025e57600080fd5b505afa15801562000273573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002999190620005bb565b9050806001600160a01b031663c9c6539630846001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015620002e557600080fd5b505afa158015620002fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003209190620005bb565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381600087803b1580156200036957600080fd5b505af11580156200037e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003a49190620005bb565b600b8054610100600160a81b0319166101006001600160a01b0393841681029190911791829055900481166000908152600a6020908152604091829020805460ff1916600117905560095482516315ab88c960e31b8152925193169263ad5c4648926004808201939291829003018186803b1580156200042357600080fd5b505afa15801562000438573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200045e9190620005bb565b60095460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b158015620004ad57600080fd5b505af1158015620004c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004e89190620005eb565b50506001600160a01b03166000908152600760205260409020805460ff1916600117905550620007ad9050565b82805462000523906200075a565b90600052602060002090601f01602090048101928262000547576000855562000592565b82601f106200056257805160ff191683800117855562000592565b8280016001018555821562000592579182015b828111156200059257825182559160200191906001019062000575565b50620005a0929150620005a4565b5090565b5b80821115620005a05760008155600101620005a5565b600060208284031215620005cd578081fd5b81516001600160a01b0381168114620005e4578182fd5b9392505050565b600060208284031215620005fd578081fd5b81518015158114620005e4578182fd5b6000826200062957634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156200066f57816000190482111562000653576200065362000797565b808516156200066157918102915b93841c939080029062000633565b509250929050565b6000620005e460ff841683600082620006935750600162000732565b81620006a25750600062000732565b8160018114620006bb5760028114620006c657620006e6565b600191505062000732565b60ff841115620006da57620006da62000797565b50506001821b62000732565b5060208310610133831016604e8410600b84101617156200070b575081810a62000732565b6200071783836200062e565b80600019048211156200072e576200072e62000797565b0290505b92915050565b600081600019048311821515161562000755576200075562000797565b500290565b600181811c908216806200076f57607f821691505b602082108114156200079157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b61162080620007bd6000396000f3fe6080604052600436106101a05760003560e01c806365b61b77116100ec57806395d89b411161008a578063bc76c05211610064578063bc76c052146104bc578063cefab2af146104d1578063dd62ed3e146104eb578063f2fde38b1461053157600080fd5b806395d89b4114610467578063a67755c21461047c578063a9059cbb1461049c57600080fd5b806370a08231116100c657806370a08231146103de578063715018a6146104145780638da5cb5b14610429578063936c044b1461044757600080fd5b806365b61b77146103895780636c580801146103a95780636f39cfcd146103be57600080fd5b8063313ce567116101595780633ecad271116101335780633ecad271146102e65780633f80b6d7146103165780634bf28fd014610336578063553193ca1461037357600080fd5b8063313ce56714610272578063319c2f641461029457806336b2e027146102b657600080fd5b806306fdde03146101ac578063095ea7b3146101d757806318160ddd146102075780631b5837491461022657806323b872dd1461023c57806327b1a8e91461025c57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101c1610551565b6040516101ce91906113ff565b60405180910390f35b3480156101e357600080fd5b506101f76101f2366004611345565b6105e3565b60405190151581526020016101ce565b34801561021357600080fd5b506008545b6040519081526020016101ce565b34801561023257600080fd5b5061021860155481565b34801561024857600080fd5b506101f76102573660046112d8565b6105f9565b34801561026857600080fd5b50610218600c5481565b34801561027e57600080fd5b5060065460405160ff90911681526020016101ce565b3480156102a057600080fd5b506102b46102af3660046113de565b610690565b005b3480156102c257600080fd5b506101f76102d1366004611261565b60076020526000908152604090205460ff1681565b3480156102f257600080fd5b506101f7610301366004611261565b600a6020526000908152604090205460ff1681565b34801561032257600080fd5b506102b46103313660046113a4565b6106ec565b34801561034257600080fd5b50600b5461035b9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101ce565b34801561037f57600080fd5b5061021860165481565b34801561039557600080fd5b5060095461035b906001600160a01b031681565b3480156103b557600080fd5b506102b461072d565b3480156103ca57600080fd5b506102b46103d9366004611261565b61075d565b3480156103ea57600080fd5b506102186103f9366004611261565b6001600160a01b031660009081526001602052604090205490565b34801561042057600080fd5b506102b46107a9565b34801561043557600080fd5b506000546001600160a01b031661035b565b34801561045357600080fd5b506102b4610462366004611318565b61081d565b34801561047357600080fd5b506101c1610872565b34801561048857600080fd5b506102b4610497366004611261565b610881565b3480156104a857600080fd5b506101f76104b7366004611345565b6109d4565b3480156104c857600080fd5b506102b46109e1565b3480156104dd57600080fd5b506014546101f79060ff1681565b3480156104f757600080fd5b506102186105063660046112a0565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561053d57600080fd5b506102b461054c366004611261565b610a1f565b6060600480546105609061155b565b80601f016020809104026020016040519081016040528092919081815260200182805461058c9061155b565b80156105d95780601f106105ae576101008083540402835291602001916105d9565b820191906000526020600020905b8154815290600101906020018083116105bc57829003601f168201915b5050505050905090565b60006105f0338484610ae5565b50600192915050565b6000610606848484610b46565b6001600160a01b038416600090815260026020908152604080832033845290915290205460001914610686576001600160a01b0384166000908152600260209081526040808320338452909152902054610661908390611544565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b5060019392505050565b6000546001600160a01b031633146106c35760405162461bcd60e51b81526004016106ba90611452565b60405180910390fd5b60648160ff166106d260085490565b6106dc9190611525565b6106e69190611505565b60155550565b6000546001600160a01b031633146107165760405162461bcd60e51b81526004016106ba90611452565b600f94909455601092909255601155601255601355565b6000546001600160a01b031633146107575760405162461bcd60e51b81526004016106ba90611452565b43601655565b6000546001600160a01b031633146107875760405162461bcd60e51b81526004016106ba90611452565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107d35760405162461bcd60e51b81526004016106ba90611452565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146108475760405162461bcd60e51b81526004016106ba90611452565b6001600160a01b03919091166000908152600760205260409020805460ff1916911515919091179055565b6060600580546105609061155b565b6001600160a01b03811630146109d1576003546040516370a0823160e01b81523060048201526001600160a01b038381169263a9059cbb9291169083906370a082319060240160206040518083038186803b1580156108df57600080fd5b505afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610917919061138c565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561095d57600080fd5b505af1158015610971573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109959190611370565b506003546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156109cf573d6000803e3d6000fd5b505b50565b60006105f0338484610b46565b6000546001600160a01b03163314610a0b5760405162461bcd60e51b81526004016106ba90611452565b6014805460ff19811660ff90911615179055565b6000546001600160a01b03163314610a495760405162461bcd60e51b81526004016106ba90611452565b6001600160a01b038116610a8a5760405162461bcd60e51b815260206004820152600860248201526706e657720697320360c41b60448201526064016106ba565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831660009081526001602052604090205481811015610ba25760405162461bcd60e51b815260206004820152601060248201526f0c4c2d8c2dcc6ca9cdee88adcdeeaced60831b60448201526064016106ba565b600b5460ff1615610bbf57610bb8848484610df7565b5050505050565b6001600160a01b0383166000908152600a602052604081205460ff168015610bea5750600b5460ff16155b8015610c0f57506001600160a01b03851660009081526007602052604090205460ff16155b8015610c3457506001600160a01b03841660009081526007602052604090205460ff16155b8015610c435750601354600c54115b15610c8457306000908152600160205260409020548390811115610c735750306000908152600160205260409020545b8015610c8257610c8281610eac565b505b6001600160a01b03851660009081526007602052604090205460ff16158015610cc657506001600160a01b03841660009081526007602052604090205460ff16155b8015610cd55750600b5460ff16155b15610deb57506001600160a01b0384166000908152600a602052604090205460019060ff168015610d1457506009546001600160a01b03858116911614155b8015610d3957506001600160a01b03841660009081526007602052604090205460ff16155b15610dbc57600c8054906000610d4e83611596565b919050555060155483610d76866001600160a01b031660009081526001602052604090205490565b610d8091906114ed565b1115610dbc5760405162461bcd60e51b815260206004820152600b60248201526a1dd85b1b195d1b1a5b5a5d60aa1b60448201526064016106ba565b60145460ff168015610dcd57508183145b15610deb57610dde61271084611505565b610de89084611544565b92505b610bb88585858461106d565b6001600160a01b038316600090815260016020526040812080548391908390610e21908490611544565b90915550506001600160a01b03831660009081526001602052604081208054849290610e4e9084906114ed565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e9a91815260200190565b60405180910390a35060019392505050565b600b805460ff191660011790556040805160028082526060820183526000926020830190803683370190505090503081600081518110610efc57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201810191909152600954604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b158015610f5057600080fd5b505afa158015610f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f889190611284565b81600181518110610fa957634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260095460405163791ac94760e01b815291169063791ac94790610fef90859060009086903090429060040161147d565b600060405180830381600087803b15801561100957600080fd5b505af192505050801561101a575060015b5047801561105e576003546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561105c573d6000803e3d6000fd5b505b5050600b805460ff1916905550565b6001600160a01b038416600090815260016020526040902054611091908390611544565b6001600160a01b03851660009081526001602052604081209190915581156111d2576001600160a01b0384166000908152600a602052604081205460ff16156110f257601254600c54116110e757600e546110eb565b6010545b905061112d565b6001600160a01b0386166000908152600a602052604090205460ff161561112d57601154600c541161112657600d5461112a565b600f545b90505b6000606461113b8387611525565b6111459190611505565b905080156111cf5761115781846114ed565b306000908152600160205260409020549093506111759082906114ed565b30600081815260016020526040908190209290925590516001600160a01b038916907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111c69085815260200190565b60405180910390a35b50505b6111dc8184611544565b6001600160a01b0385166000908152600160205260409020546111ff91906114ed565b6001600160a01b0380861660008181526001602052604090209290925586167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6112498487611544565b60405190815260200160405180910390a35050505050565b600060208284031215611272578081fd5b813561127d816115c7565b9392505050565b600060208284031215611295578081fd5b815161127d816115c7565b600080604083850312156112b2578081fd5b82356112bd816115c7565b915060208301356112cd816115c7565b809150509250929050565b6000806000606084860312156112ec578081fd5b83356112f7816115c7565b92506020840135611307816115c7565b929592945050506040919091013590565b6000806040838503121561132a578182fd5b8235611335816115c7565b915060208301356112cd816115dc565b60008060408385031215611357578182fd5b8235611362816115c7565b946020939093013593505050565b600060208284031215611381578081fd5b815161127d816115dc565b60006020828403121561139d578081fd5b5051919050565b600080600080600060a086880312156113bb578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000602082840312156113ef578081fd5b813560ff8116811461127d578182fd5b6000602080835283518082850152825b8181101561142b5785810183015185820160400152820161140f565b8181111561143c5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601190820152703cb7ba9030b932903737ba1037bbb732b960791b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156114cc5784516001600160a01b0316835293830193918301916001016114a7565b50506001600160a01b03969096166060850152505050608001529392505050565b60008219821115611500576115006115b1565b500190565b60008261152057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561153f5761153f6115b1565b500290565b600082821015611556576115566115b1565b500390565b600181811c9082168061156f57607f821691505b6020821081141561159057634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156115aa576115aa6115b1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146109d157600080fd5b80151581146109d157600080fdfea2646970667358221220ad692eacbed9cb7f76ba7f671841d5662b493d62dfe3bf20e912b6d4534868b064736f6c63430008040033",
    "runtime_bytecode": "6080604052600436106101a05760003560e01c806365b61b77116100ec57806395d89b411161008a578063bc76c05211610064578063bc76c052146104bc578063cefab2af146104d1578063dd62ed3e146104eb578063f2fde38b1461053157600080fd5b806395d89b4114610467578063a67755c21461047c578063a9059cbb1461049c57600080fd5b806370a08231116100c657806370a08231146103de578063715018a6146104145780638da5cb5b14610429578063936c044b1461044757600080fd5b806365b61b77146103895780636c580801146103a95780636f39cfcd146103be57600080fd5b8063313ce567116101595780633ecad271116101335780633ecad271146102e65780633f80b6d7146103165780634bf28fd014610336578063553193ca1461037357600080fd5b8063313ce56714610272578063319c2f641461029457806336b2e027146102b657600080fd5b806306fdde03146101ac578063095ea7b3146101d757806318160ddd146102075780631b5837491461022657806323b872dd1461023c57806327b1a8e91461025c57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101c1610551565b6040516101ce91906113ff565b60405180910390f35b3480156101e357600080fd5b506101f76101f2366004611345565b6105e3565b60405190151581526020016101ce565b34801561021357600080fd5b506008545b6040519081526020016101ce565b34801561023257600080fd5b5061021860155481565b34801561024857600080fd5b506101f76102573660046112d8565b6105f9565b34801561026857600080fd5b50610218600c5481565b34801561027e57600080fd5b5060065460405160ff90911681526020016101ce565b3480156102a057600080fd5b506102b46102af3660046113de565b610690565b005b3480156102c257600080fd5b506101f76102d1366004611261565b60076020526000908152604090205460ff1681565b3480156102f257600080fd5b506101f7610301366004611261565b600a6020526000908152604090205460ff1681565b34801561032257600080fd5b506102b46103313660046113a4565b6106ec565b34801561034257600080fd5b50600b5461035b9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101ce565b34801561037f57600080fd5b5061021860165481565b34801561039557600080fd5b5060095461035b906001600160a01b031681565b3480156103b557600080fd5b506102b461072d565b3480156103ca57600080fd5b506102b46103d9366004611261565b61075d565b3480156103ea57600080fd5b506102186103f9366004611261565b6001600160a01b031660009081526001602052604090205490565b34801561042057600080fd5b506102b46107a9565b34801561043557600080fd5b506000546001600160a01b031661035b565b34801561045357600080fd5b506102b4610462366004611318565b61081d565b34801561047357600080fd5b506101c1610872565b34801561048857600080fd5b506102b4610497366004611261565b610881565b3480156104a857600080fd5b506101f76104b7366004611345565b6109d4565b3480156104c857600080fd5b506102b46109e1565b3480156104dd57600080fd5b506014546101f79060ff1681565b3480156104f757600080fd5b506102186105063660046112a0565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561053d57600080fd5b506102b461054c366004611261565b610a1f565b6060600480546105609061155b565b80601f016020809104026020016040519081016040528092919081815260200182805461058c9061155b565b80156105d95780601f106105ae576101008083540402835291602001916105d9565b820191906000526020600020905b8154815290600101906020018083116105bc57829003601f168201915b5050505050905090565b60006105f0338484610ae5565b50600192915050565b6000610606848484610b46565b6001600160a01b038416600090815260026020908152604080832033845290915290205460001914610686576001600160a01b0384166000908152600260209081526040808320338452909152902054610661908390611544565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b5060019392505050565b6000546001600160a01b031633146106c35760405162461bcd60e51b81526004016106ba90611452565b60405180910390fd5b60648160ff166106d260085490565b6106dc9190611525565b6106e69190611505565b60155550565b6000546001600160a01b031633146107165760405162461bcd60e51b81526004016106ba90611452565b600f94909455601092909255601155601255601355565b6000546001600160a01b031633146107575760405162461bcd60e51b81526004016106ba90611452565b43601655565b6000546001600160a01b031633146107875760405162461bcd60e51b81526004016106ba90611452565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107d35760405162461bcd60e51b81526004016106ba90611452565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146108475760405162461bcd60e51b81526004016106ba90611452565b6001600160a01b03919091166000908152600760205260409020805460ff1916911515919091179055565b6060600580546105609061155b565b6001600160a01b03811630146109d1576003546040516370a0823160e01b81523060048201526001600160a01b038381169263a9059cbb9291169083906370a082319060240160206040518083038186803b1580156108df57600080fd5b505afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610917919061138c565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561095d57600080fd5b505af1158015610971573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109959190611370565b506003546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156109cf573d6000803e3d6000fd5b505b50565b60006105f0338484610b46565b6000546001600160a01b03163314610a0b5760405162461bcd60e51b81526004016106ba90611452565b6014805460ff19811660ff90911615179055565b6000546001600160a01b03163314610a495760405162461bcd60e51b81526004016106ba90611452565b6001600160a01b038116610a8a5760405162461bcd60e51b815260206004820152600860248201526706e657720697320360c41b60448201526064016106ba565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831660009081526001602052604090205481811015610ba25760405162461bcd60e51b815260206004820152601060248201526f0c4c2d8c2dcc6ca9cdee88adcdeeaced60831b60448201526064016106ba565b600b5460ff1615610bbf57610bb8848484610df7565b5050505050565b6001600160a01b0383166000908152600a602052604081205460ff168015610bea5750600b5460ff16155b8015610c0f57506001600160a01b03851660009081526007602052604090205460ff16155b8015610c3457506001600160a01b03841660009081526007602052604090205460ff16155b8015610c435750601354600c54115b15610c8457306000908152600160205260409020548390811115610c735750306000908152600160205260409020545b8015610c8257610c8281610eac565b505b6001600160a01b03851660009081526007602052604090205460ff16158015610cc657506001600160a01b03841660009081526007602052604090205460ff16155b8015610cd55750600b5460ff16155b15610deb57506001600160a01b0384166000908152600a602052604090205460019060ff168015610d1457506009546001600160a01b03858116911614155b8015610d3957506001600160a01b03841660009081526007602052604090205460ff16155b15610dbc57600c8054906000610d4e83611596565b919050555060155483610d76866001600160a01b031660009081526001602052604090205490565b610d8091906114ed565b1115610dbc5760405162461bcd60e51b815260206004820152600b60248201526a1dd85b1b195d1b1a5b5a5d60aa1b60448201526064016106ba565b60145460ff168015610dcd57508183145b15610deb57610dde61271084611505565b610de89084611544565b92505b610bb88585858461106d565b6001600160a01b038316600090815260016020526040812080548391908390610e21908490611544565b90915550506001600160a01b03831660009081526001602052604081208054849290610e4e9084906114ed565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e9a91815260200190565b60405180910390a35060019392505050565b600b805460ff191660011790556040805160028082526060820183526000926020830190803683370190505090503081600081518110610efc57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201810191909152600954604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b158015610f5057600080fd5b505afa158015610f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f889190611284565b81600181518110610fa957634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260095460405163791ac94760e01b815291169063791ac94790610fef90859060009086903090429060040161147d565b600060405180830381600087803b15801561100957600080fd5b505af192505050801561101a575060015b5047801561105e576003546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561105c573d6000803e3d6000fd5b505b5050600b805460ff1916905550565b6001600160a01b038416600090815260016020526040902054611091908390611544565b6001600160a01b03851660009081526001602052604081209190915581156111d2576001600160a01b0384166000908152600a602052604081205460ff16156110f257601254600c54116110e757600e546110eb565b6010545b905061112d565b6001600160a01b0386166000908152600a602052604090205460ff161561112d57601154600c541161112657600d5461112a565b600f545b90505b6000606461113b8387611525565b6111459190611505565b905080156111cf5761115781846114ed565b306000908152600160205260409020549093506111759082906114ed565b30600081815260016020526040908190209290925590516001600160a01b038916907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111c69085815260200190565b60405180910390a35b50505b6111dc8184611544565b6001600160a01b0385166000908152600160205260409020546111ff91906114ed565b6001600160a01b0380861660008181526001602052604090209290925586167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6112498487611544565b60405190815260200160405180910390a35050505050565b600060208284031215611272578081fd5b813561127d816115c7565b9392505050565b600060208284031215611295578081fd5b815161127d816115c7565b600080604083850312156112b2578081fd5b82356112bd816115c7565b915060208301356112cd816115c7565b809150509250929050565b6000806000606084860312156112ec578081fd5b83356112f7816115c7565b92506020840135611307816115c7565b929592945050506040919091013590565b6000806040838503121561132a578182fd5b8235611335816115c7565b915060208301356112cd816115dc565b60008060408385031215611357578182fd5b8235611362816115c7565b946020939093013593505050565b600060208284031215611381578081fd5b815161127d816115dc565b60006020828403121561139d578081fd5b5051919050565b600080600080600060a086880312156113bb578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000602082840312156113ef578081fd5b813560ff8116811461127d578182fd5b6000602080835283518082850152825b8181101561142b5785810183015185820160400152820161140f565b8181111561143c5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601190820152703cb7ba9030b932903737ba1037bbb732b960791b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156114cc5784516001600160a01b0316835293830193918301916001016114a7565b50506001600160a01b03969096166060850152505050608001529392505050565b60008219821115611500576115006115b1565b500190565b60008261152057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561153f5761153f6115b1565b500290565b600082821015611556576115566115b1565b500390565b600181811c9082168061156f57607f821691505b6020821081141561159057634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156115aa576115aa6115b1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146109d157600080fd5b80151581146109d157600080fdfea2646970667358221220ad692eacbed9cb7f76ba7f671841d5662b493d62dfe3bf20e912b6d4534868b064736f6c63430008040033",
    "contract_name": "Token",
    "compiler_version": "v0.8.4+commit.c7e474f2",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludeFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeRemain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReduceBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReduceSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPreventSwapBefore\",\"type\":\"uint256\"}],\"name\":\"recuseTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setFundAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"setWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/*\r\n* Telegram : https://t.me/babybobERC20\r\n*/\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapRouter {\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"you are not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Token is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address payable private fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _isExcludeFromFee;\r\n    \r\n    uint256 private _totalSupply;\r\n\r\n    IUniswapRouter public _uniswapRouter;\r\n\r\n    mapping(address => bool) public isMarketPair;\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    address public _uniswapPair;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (){\r\n\r\n        _name = \"babybob\";\r\n        _symbol = \"BABYBOB\";\r\n        _decimals = 9;\r\n        uint256 Supply = 420_690_900_000_000;\r\n\r\n        _totalSupply = Supply * 10 ** _decimals;\r\n\r\n        address receiveAddr = msg.sender;\r\n        _balances[receiveAddr] = _totalSupply;\r\n        emit Transfer(address(0), receiveAddr, _totalSupply);\r\n\r\n        fundAddress = payable(msg.sender);\r\n        _walletMAX = _totalSupply * 2 / 100;\r\n\r\n        _isExcludeFromFee[address(this)] = true;\r\n        _isExcludeFromFee[receiveAddr] = true;\r\n        _isExcludeFromFee[fundAddress] = true;\r\n\r\n        IUniswapRouter swapRouter = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _uniswapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        IUniswapFactory swapFactory = IUniswapFactory(swapRouter.factory());\r\n        _uniswapPair = swapFactory.createPair(address(this), swapRouter.WETH());\r\n\r\n        isMarketPair[_uniswapPair] = true;\r\n        IERC20(_uniswapRouter.WETH()).approve(\r\n            address(address(_uniswapRouter)),\r\n            ~uint256(0)\r\n        );\r\n        _isExcludeFromFee[address(swapRouter)] = true;\r\n\r\n    }\r\n\r\n    function setFundAddr(\r\n        address payable newAddr\r\n    ) public onlyOwner{\r\n        fundAddress = newAddr;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256 public _buyCount=1;\r\n    uint256 private _initialBuyTax=0;\r\n    uint256 private _initialSellTax=0;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=0;\r\n    uint256 private _reduceSellTaxAt=0;\r\n    uint256 private _preventSwapBefore=0;\r\n\r\n    function recuseTax(\r\n        uint256 newBuy,\r\n        uint256 newSell,\r\n        uint256 newReduceBuy,\r\n        uint256 newReduceSell,\r\n        uint256 newPreventSwapBefore\r\n    ) public onlyOwner {\r\n        _finalBuyTax = newBuy;\r\n        _finalSellTax = newSell;\r\n        _reduceBuyTaxAt = newReduceBuy;\r\n        _reduceSellTaxAt = newReduceSell;\r\n        _preventSwapBefore = newPreventSwapBefore;\r\n    }\r\n\r\n    bool public remainHolder = true;\r\n    function changeRemain() public onlyOwner{\r\n        remainHolder = !remainHolder;\r\n    }\r\n\r\n    uint256 public _walletMAX;\r\n\r\n    function setWalletMax(uint8 percentage) public onlyOwner{\r\n        _walletMAX = totalSupply() * percentage / 100;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        if (inSwap){\r\n            _basicTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        bool takeFee;\r\n\r\n        if (isMarketPair[to] && !inSwap && !_isExcludeFromFee[from] && !_isExcludeFromFee[to] && _buyCount > _preventSwapBefore) {\r\n            uint256 _numSellToken = amount;\r\n            if (_numSellToken > balanceOf(address(this))){\r\n                _numSellToken = _balances[address(this)];\r\n            }\r\n            if (_numSellToken > 0){\r\n                swapTokenForETH(_numSellToken);\r\n            }\r\n        }\r\n\r\n        if (!_isExcludeFromFee[from] && !_isExcludeFromFee[to] && !inSwap) {\r\n            takeFee = true;\r\n            \r\n            // buyCount\r\n            if (isMarketPair[from] && to != address(_uniswapRouter) && !_isExcludeFromFee[to]) {\r\n                _buyCount++;\r\n                require(balanceOf(to) + amount <= _walletMAX,\"walletlimit\");\r\n            }\r\n\r\n            // remainHolder\r\n            if (remainHolder && amount == balance) {\r\n                amount = amount - (amount / 10000);\r\n            }\r\n\r\n        }\r\n\r\n        _transferToken(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _transferToken(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 taxFee;\r\n            if (isMarketPair[recipient]) {\r\n                taxFee = _buyCount > _reduceSellTaxAt ? _finalSellTax : _initialSellTax;\r\n            } else if (isMarketPair[sender]) {\r\n                taxFee = _buyCount > _reduceBuyTaxAt ? _finalBuyTax : _initialBuyTax;\r\n            }\r\n            uint256 swapAmount = tAmount * taxFee / 100;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _balances[address(this)] = _balances[address(this)] + swapAmount;\r\n                emit Transfer(sender, address(this), swapAmount);\r\n            }\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient] + (tAmount - feeAmount);\r\n        emit Transfer(sender, recipient, tAmount - feeAmount);\r\n\r\n    }\r\n\r\n    uint256 public startTradeBlock;\r\n    function startTrade() public onlyOwner {\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function removeERC20(address _token) external {\r\n        if(_token != address(this)){\r\n            IERC20(_token).transfer(fundAddress, IERC20(_token).balanceOf(address(this)));\r\n            fundAddress.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function swapTokenForETH(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapRouter.WETH();\r\n        try _uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {} catch {}\r\n\r\n        uint256 _bal = address(this).balance;\r\n        if (_bal > 0){\r\n            fundAddress.transfer(_bal);\r\n        }\r\n    }\r\n\r\n    function setFeeExclude(address account, bool value) public onlyOwner{\r\n        _isExcludeFromFee[account] = value;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
    "etherscan_verified": true
}