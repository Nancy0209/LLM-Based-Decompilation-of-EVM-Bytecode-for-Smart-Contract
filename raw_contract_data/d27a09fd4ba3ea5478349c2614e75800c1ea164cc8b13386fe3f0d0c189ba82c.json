{
    "address": "0x801d42E06aEf2B3053940d5D9be3557CC3755D4A",
    "tx_hash": "d27a09fd4ba3ea5478349c2614e75800c1ea164cc8b13386fe3f0d0c189ba82c",
    "block_number": 18001877,
    "timestamp": 1693089515,
    "gas_used_in_creation": 1732049,
    "creation_bytecode": "60806040526005805460ff191660019081179091556014600655601e6007819055600882905560099182556019600a908155600b829055600c919091555f600d556200004c91906200034b565b6200005c906301312d0062000362565b600e556200006d6009600a6200034b565b6200007d906301312d0062000362565b600f556200008e6009600a6200034b565b6200009d906207a12062000362565b601055620000ae6009600a6200034b565b620000bd9062c65d4062000362565b6011556013805461ffff60a81b19169055348015620000da575f80fd5b505f80546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060058054610100600160a81b0319166101003302179055620001406009600a6200034b565b6200015090633b9aca0062000362565b335f908152600160208190526040822092909255600390620001795f546001600160a01b031690565b6001600160a01b03908116825260208083019390935260409182015f908120805495151560ff1996871617905530815260039093528183208054851660019081179091556005546101009004909116835291208054909216179055620001dc3390565b6001600160a01b03165f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002156009600a6200034b565b6200022590633b9aca0062000362565b60405190815260200160405180910390a36200037c565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200029057815f19048211156200027457620002746200023c565b808516156200028257918102915b93841c939080029062000255565b509250929050565b5f82620002a85750600162000345565b81620002b657505f62000345565b8160018114620002cf5760028114620002da57620002fa565b600191505062000345565b60ff841115620002ee57620002ee6200023c565b50506001821b62000345565b5060208310610133831016604e8410600b84101617156200031f575081810a62000345565b6200032b838362000250565b805f19048211156200034157620003416200023c565b0290505b92915050565b5f6200035b60ff84168362000298565b9392505050565b80820281158282048414176200034557620003456200023c565b61177f806200038a5f395ff3fe608060405260043610610108575f3560e01c80637d1db4a511610092578063a9059cbb11610062578063a9059cbb146102cc578063bf474bed146102eb578063c876d0b914610300578063c9567bf914610319578063dd62ed3e1461032d575f80fd5b80637d1db4a5146102505780638da5cb5b146102655780638f9a55c01461028b57806395d89b41146102a0575f80fd5b806323b872dd116100d857806323b872dd146101b8578063313ce567146101d757806370a08231146101f2578063715018a614610226578063751039fc1461023c575f80fd5b806306fdde0314610113578063095ea7b3146101525780630faee56f1461018157806318160ddd146101a4575f80fd5b3661010f57005b5f80fd5b34801561011e575f80fd5b506040805180820190915260058152645365616c7360d81b60208201525b6040516101499190611372565b60405180910390f35b34801561015d575f80fd5b5061017161016c3660046113d4565b610371565b6040519015158152602001610149565b34801561018c575f80fd5b5061019660115481565b604051908152602001610149565b3480156101af575f80fd5b50610196610387565b3480156101c3575f80fd5b506101716101d23660046113fe565b6103a7565b3480156101e2575f80fd5b5060405160098152602001610149565b3480156101fd575f80fd5b5061019661020c36600461143c565b6001600160a01b03165f9081526001602052604090205490565b348015610231575f80fd5b5061023a61040e565b005b348015610247575f80fd5b5061023a610488565b34801561025b575f80fd5b50610196600e5481565b348015610270575f80fd5b505f546040516001600160a01b039091168152602001610149565b348015610296575f80fd5b50610196600f5481565b3480156102ab575f80fd5b5060408051808201909152600481526314d1505360e21b602082015261013c565b3480156102d7575f80fd5b506101716102e63660046113d4565b610543565b3480156102f6575f80fd5b5061019660105481565b34801561030b575f80fd5b506005546101719060ff1681565b348015610324575f80fd5b5061023a61054f565b348015610338575f80fd5b50610196610347366004611457565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f61037d3384846108f8565b5060015b92915050565b5f6103946009600a611582565b6103a290633b9aca00611590565b905090565b5f6103b3848484610a1b565b61040484336103ff85604051806060016040528060288152602001611722602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190610fe6565b6108f8565b5060019392505050565b5f546001600160a01b031633146104405760405162461bcd60e51b8152600401610437906115a7565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146104b15760405162461bcd60e51b8152600401610437906115a7565b6104bd6009600a611582565b6104cb90633b9aca00611590565b600e556104da6009600a611582565b6104e890633b9aca00611590565b600f556005805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105226009600a611582565b61053090633b9aca00611590565b60405190815260200160405180910390a1565b5f61037d338484610a1b565b5f546001600160a01b031633146105785760405162461bcd60e51b8152600401610437906115a7565b601354600160a01b900460ff16156105d25760405162461bcd60e51b815260206004820152601760248201527f54726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610437565b601280546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561061b90309061060d6009600a611582565b6103ff90633b9aca00611590565b60125f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061068f91906115dc565b6001600160a01b031663c9c653963060125f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ee573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061071291906115dc565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561075c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061078091906115dc565b601380546001600160a01b039283166001600160a01b03199091161790556012541663f305d71947306107c7816001600160a01b03165f9081526001602052604090205490565b5f806107da5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610840573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061086591906115f7565b505060135460125460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156108ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108de9190611622565b506013805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b03831661095a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610437565b6001600160a01b0382166109bb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610437565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610a7f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610437565b6001600160a01b038216610ae15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610437565b5f8111610b425760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610437565b5f80546001600160a01b03858116911614801590610b6d57505f546001600160a01b03848116911614155b15610ea957610b9e6064610b98600a54600d5411610b8d57600654610b91565b6008545b859061101e565b906110a3565b60055490915060ff1615610c84576012546001600160a01b03848116911614801590610bd857506013546001600160a01b03848116911614155b15610c8457325f908152600460205260409020544311610c725760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610437565b325f9081526004602052604090204390555b6013546001600160a01b038581169116148015610caf57506012546001600160a01b03848116911614155b8015610cd357506001600160a01b0383165f9081526003602052604090205460ff16155b15610db957600e54821115610d2a5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e000000000000006044820152606401610437565b600f5482610d4c856001600160a01b03165f9081526001602052604090205490565b610d569190611641565b1115610da45760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e0000000000006044820152606401610437565b600d8054905f610db383611654565b91905055505b6013546001600160a01b038481169116148015610ddf57506001600160a01b0384163014155b15610e0c57610e096064610b98600b54600d5411610dff57600754610b91565b600954859061101e565b90505b305f90815260016020526040902054601354600160a81b900460ff16158015610e4257506013546001600160a01b038581169116145b8015610e575750601354600160b01b900460ff165b8015610e64575060105481115b8015610e735750600c54600d54115b15610ea757610e95610e9084610e8b846011546110e4565b6110e4565b6110f8565b478015610ea557610ea547611268565b505b505b8015610f2157305f90815260016020526040902054610ec890826112a7565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f189085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610f439083611305565b6001600160a01b0385165f90815260016020526040902055610f86610f688383611305565b6001600160a01b0385165f90815260016020526040902054906112a7565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610fcf8585611305565b60405190815260200160405180910390a350505050565b5f81848411156110095760405162461bcd60e51b81526004016104379190611372565b505f611015848661166c565b95945050505050565b5f825f0361102d57505f610381565b5f6110388385611590565b905082611045858361167f565b1461109c5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610437565b9392505050565b5f61109c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611346565b5f8183116110f2578261109c565b50919050565b6013805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061113e5761113e61169e565b6001600160a01b03928316602091820292909201810191909152601254604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611195573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111b991906115dc565b816001815181106111cc576111cc61169e565b6001600160a01b0392831660209182029290920101526012546111f291309116846108f8565b60125460405163791ac94760e01b81526001600160a01b039091169063791ac9479061122a9085905f908690309042906004016116b2565b5f604051808303815f87803b158015611241575f80fd5b505af1158015611253573d5f803e3d5ffd5b50506013805460ff60a81b1916905550505050565b6005546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156112a3573d5f803e3d5ffd5b5050565b5f806112b38385611641565b90508381101561109c5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610437565b5f61109c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610fe6565b5f81836113665760405162461bcd60e51b81526004016104379190611372565b505f611015848661167f565b5f6020808352835180828501525f5b8181101561139d57858101830151858201604001528201611381565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146113d1575f80fd5b50565b5f80604083850312156113e5575f80fd5b82356113f0816113bd565b946020939093013593505050565b5f805f60608486031215611410575f80fd5b833561141b816113bd565b9250602084013561142b816113bd565b929592945050506040919091013590565b5f6020828403121561144c575f80fd5b813561109c816113bd565b5f8060408385031215611468575f80fd5b8235611473816113bd565b91506020830135611483816113bd565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156114dc57815f19048211156114c2576114c261148e565b808516156114cf57918102915b93841c93908002906114a7565b509250929050565b5f826114f257506001610381565b816114fe57505f610381565b8160018114611514576002811461151e5761153a565b6001915050610381565b60ff84111561152f5761152f61148e565b50506001821b610381565b5060208310610133831016604e8410600b841016171561155d575081810a610381565b61156783836114a2565b805f190482111561157a5761157a61148e565b029392505050565b5f61109c60ff8416836114e4565b80820281158282048414176103815761038161148e565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156115ec575f80fd5b815161109c816113bd565b5f805f60608486031215611609575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611632575f80fd5b8151801515811461109c575f80fd5b808201808211156103815761038161148e565b5f600182016116655761166561148e565b5060010190565b818103818111156103815761038161148e565b5f8261169957634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156117005784516001600160a01b0316835293830193918301916001016116db565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220148717690332e5fe59b89a4ddcc0b7404b548e320fedaa92dd299a726793bfa264736f6c63430008140033",
    "runtime_bytecode": "608060405260043610610108575f3560e01c80637d1db4a511610092578063a9059cbb11610062578063a9059cbb146102cc578063bf474bed146102eb578063c876d0b914610300578063c9567bf914610319578063dd62ed3e1461032d575f80fd5b80637d1db4a5146102505780638da5cb5b146102655780638f9a55c01461028b57806395d89b41146102a0575f80fd5b806323b872dd116100d857806323b872dd146101b8578063313ce567146101d757806370a08231146101f2578063715018a614610226578063751039fc1461023c575f80fd5b806306fdde0314610113578063095ea7b3146101525780630faee56f1461018157806318160ddd146101a4575f80fd5b3661010f57005b5f80fd5b34801561011e575f80fd5b506040805180820190915260058152645365616c7360d81b60208201525b6040516101499190611372565b60405180910390f35b34801561015d575f80fd5b5061017161016c3660046113d4565b610371565b6040519015158152602001610149565b34801561018c575f80fd5b5061019660115481565b604051908152602001610149565b3480156101af575f80fd5b50610196610387565b3480156101c3575f80fd5b506101716101d23660046113fe565b6103a7565b3480156101e2575f80fd5b5060405160098152602001610149565b3480156101fd575f80fd5b5061019661020c36600461143c565b6001600160a01b03165f9081526001602052604090205490565b348015610231575f80fd5b5061023a61040e565b005b348015610247575f80fd5b5061023a610488565b34801561025b575f80fd5b50610196600e5481565b348015610270575f80fd5b505f546040516001600160a01b039091168152602001610149565b348015610296575f80fd5b50610196600f5481565b3480156102ab575f80fd5b5060408051808201909152600481526314d1505360e21b602082015261013c565b3480156102d7575f80fd5b506101716102e63660046113d4565b610543565b3480156102f6575f80fd5b5061019660105481565b34801561030b575f80fd5b506005546101719060ff1681565b348015610324575f80fd5b5061023a61054f565b348015610338575f80fd5b50610196610347366004611457565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f61037d3384846108f8565b5060015b92915050565b5f6103946009600a611582565b6103a290633b9aca00611590565b905090565b5f6103b3848484610a1b565b61040484336103ff85604051806060016040528060288152602001611722602891396001600160a01b038a165f9081526002602090815260408083203384529091529020549190610fe6565b6108f8565b5060019392505050565b5f546001600160a01b031633146104405760405162461bcd60e51b8152600401610437906115a7565b60405180910390fd5b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b5f546001600160a01b031633146104b15760405162461bcd60e51b8152600401610437906115a7565b6104bd6009600a611582565b6104cb90633b9aca00611590565b600e556104da6009600a611582565b6104e890633b9aca00611590565b600f556005805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6105226009600a611582565b61053090633b9aca00611590565b60405190815260200160405180910390a1565b5f61037d338484610a1b565b5f546001600160a01b031633146105785760405162461bcd60e51b8152600401610437906115a7565b601354600160a01b900460ff16156105d25760405162461bcd60e51b815260206004820152601760248201527f54726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610437565b601280546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d90811790915561061b90309061060d6009600a611582565b6103ff90633b9aca00611590565b60125f9054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061068f91906115dc565b6001600160a01b031663c9c653963060125f9054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ee573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061071291906115dc565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303815f875af115801561075c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061078091906115dc565b601380546001600160a01b039283166001600160a01b03199091161790556012541663f305d71947306107c7816001600160a01b03165f9081526001602052604090205490565b5f806107da5f546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610840573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061086591906115f7565b505060135460125460405163095ea7b360e01b81526001600160a01b0391821660048201525f1960248201529116915063095ea7b3906044016020604051808303815f875af11580156108ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108de9190611622565b506013805462ff00ff60a01b19166201000160a01b179055565b6001600160a01b03831661095a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610437565b6001600160a01b0382166109bb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610437565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610a7f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610437565b6001600160a01b038216610ae15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610437565b5f8111610b425760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610437565b5f80546001600160a01b03858116911614801590610b6d57505f546001600160a01b03848116911614155b15610ea957610b9e6064610b98600a54600d5411610b8d57600654610b91565b6008545b859061101e565b906110a3565b60055490915060ff1615610c84576012546001600160a01b03848116911614801590610bd857506013546001600160a01b03848116911614155b15610c8457325f908152600460205260409020544311610c725760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610437565b325f9081526004602052604090204390555b6013546001600160a01b038581169116148015610caf57506012546001600160a01b03848116911614155b8015610cd357506001600160a01b0383165f9081526003602052604090205460ff16155b15610db957600e54821115610d2a5760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e000000000000006044820152606401610437565b600f5482610d4c856001600160a01b03165f9081526001602052604090205490565b610d569190611641565b1115610da45760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e0000000000006044820152606401610437565b600d8054905f610db383611654565b91905055505b6013546001600160a01b038481169116148015610ddf57506001600160a01b0384163014155b15610e0c57610e096064610b98600b54600d5411610dff57600754610b91565b600954859061101e565b90505b305f90815260016020526040902054601354600160a81b900460ff16158015610e4257506013546001600160a01b038581169116145b8015610e575750601354600160b01b900460ff165b8015610e64575060105481115b8015610e735750600c54600d54115b15610ea757610e95610e9084610e8b846011546110e4565b6110e4565b6110f8565b478015610ea557610ea547611268565b505b505b8015610f2157305f90815260016020526040902054610ec890826112a7565b305f81815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f189085815260200190565b60405180910390a35b6001600160a01b0384165f90815260016020526040902054610f439083611305565b6001600160a01b0385165f90815260016020526040902055610f86610f688383611305565b6001600160a01b0385165f90815260016020526040902054906112a7565b6001600160a01b038085165f8181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610fcf8585611305565b60405190815260200160405180910390a350505050565b5f81848411156110095760405162461bcd60e51b81526004016104379190611372565b505f611015848661166c565b95945050505050565b5f825f0361102d57505f610381565b5f6110388385611590565b905082611045858361167f565b1461109c5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610437565b9392505050565b5f61109c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611346565b5f8183116110f2578261109c565b50919050565b6013805460ff60a81b1916600160a81b1790556040805160028082526060820183525f9260208301908036833701905050905030815f8151811061113e5761113e61169e565b6001600160a01b03928316602091820292909201810191909152601254604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611195573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111b991906115dc565b816001815181106111cc576111cc61169e565b6001600160a01b0392831660209182029290920101526012546111f291309116846108f8565b60125460405163791ac94760e01b81526001600160a01b039091169063791ac9479061122a9085905f908690309042906004016116b2565b5f604051808303815f87803b158015611241575f80fd5b505af1158015611253573d5f803e3d5ffd5b50506013805460ff60a81b1916905550505050565b6005546040516101009091046001600160a01b0316906108fc8315029083905f818181858888f193505050501580156112a3573d5f803e3d5ffd5b5050565b5f806112b38385611641565b90508381101561109c5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610437565b5f61109c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610fe6565b5f81836113665760405162461bcd60e51b81526004016104379190611372565b505f611015848661167f565b5f6020808352835180828501525f5b8181101561139d57858101830151858201604001528201611381565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146113d1575f80fd5b50565b5f80604083850312156113e5575f80fd5b82356113f0816113bd565b946020939093013593505050565b5f805f60608486031215611410575f80fd5b833561141b816113bd565b9250602084013561142b816113bd565b929592945050506040919091013590565b5f6020828403121561144c575f80fd5b813561109c816113bd565b5f8060408385031215611468575f80fd5b8235611473816113bd565b91506020830135611483816113bd565b809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156114dc57815f19048211156114c2576114c261148e565b808516156114cf57918102915b93841c93908002906114a7565b509250929050565b5f826114f257506001610381565b816114fe57505f610381565b8160018114611514576002811461151e5761153a565b6001915050610381565b60ff84111561152f5761152f61148e565b50506001821b610381565b5060208310610133831016604e8410600b841016171561155d575081810a610381565b61156783836114a2565b805f190482111561157a5761157a61148e565b029392505050565b5f61109c60ff8416836114e4565b80820281158282048414176103815761038161148e565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b5f602082840312156115ec575f80fd5b815161109c816113bd565b5f805f60608486031215611609575f80fd5b8351925060208401519150604084015190509250925092565b5f60208284031215611632575f80fd5b8151801515811461109c575f80fd5b808201808211156103815761038161148e565b5f600182016116655761166561148e565b5060010190565b818103818111156103815761038161148e565b5f8261169957634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156117005784516001600160a01b0316835293830193918301916001016116db565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220148717690332e5fe59b89a4ddcc0b7404b548e320fedaa92dd299a726793bfa264736f6c63430008140033",
    "contract_name": "Seals",
    "compiler_version": "v0.8.20+commit.a1b79de6",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\ntg: https://t.me/seals_eth\r\ntw: https://twitter.com/seals_erc\r\nweb: https://seals.fun/\r\n*/\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Seals is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = true;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax = 20;\r\n    uint256 private _initialSellTax = 30;\r\n    uint256 private _finalBuyTax = 1;\r\n    uint256 private _finalSellTax = 1;\r\n    uint256 private _reduceBuyTaxAt = 25;\r\n    uint256 private _reduceSellTaxAt = 30;\r\n    uint256 private _preventSwapBefore = 30;\r\n    uint256 private _buyCount = 0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 1000000000 * 10**_decimals;\r\n    string private constant _name = unicode\"Seals\";\r\n    string private constant _symbol = unicode\"SEAL\";\r\n    uint256 public _maxTxAmount = 20000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 20000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 500000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 13000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount = 0;\r\n        if (from != owner() && to != owner()) {\r\n            taxAmount = amount.mul((_buyCount > _reduceBuyTaxAt) ? _finalBuyTax  :_initialBuyTax).div(100);\r\n\r\n            if (transferDelayEnabled) {\r\n                  if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                      require(\r\n                          _holderLastTransferTimestamp[tx.origin] < block.number,\r\n                          \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                      );\r\n                      _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                  }\r\n              }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                _buyCount++;\r\n            }\r\n\r\n            if (to == uniswapV2Pair && from != address(this)) {\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt) ? _finalSellTax : _initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance > _taxSwapThreshold && _buyCount > _preventSwapBefore) {\r\n                swapTokensForEth(min(amount, min(contractTokenBalance, _maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxAmount > 0) {\r\n          _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n      return (a > b) ? b : a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        transferDelayEnabled = false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen, \"Trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
    "etherscan_verified": true
}