{
    "address": "0xc921a48b2bBd243aC30422B266edf58F472Eca7F",
    "tx_hash": "6c24397a47712c984cc4db5fc31aaa275004fa8ebeceba6c75db4775b5cf9e52",
    "block_number": 18001812,
    "timestamp": 1693088735,
    "gas_used_in_creation": 2763267,
    "creation_bytecode": "6007805462ffffff60a01b19169055697f0e10af47c1c70000006008556a01a784379d99db42000000600955681b1ae4d6e2ef500000600a556005600c55601e600d55600e805462ffffff191662010100179055600460808190525f60a081905260c081905260118290556012819055601381905561014060405260e08290526101008190526101208190526014919091556015819055601655348015620000a5575f80fd5b506040518060400160405280600d81526020016c44696e6f2052756e2047616d6560981b8152506040518060400160405280600481526020016344494e4f60e01b8152508160039081620000fa919062000526565b50600462000109828262000526565b50505062000126620001206200024160201b60201c565b62000245565b600e80546301000000600160b81b031916336301000000810291909117909155601080546001600160a01b031916821790556200016f906a52b7d2dcc80cd2e400000062000296565b600680546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081178255305f81815260176020526040808220805460ff1990811660019081179092553384528284208054821683179055600e54630100000090046001600160a01b039081168552838520805483168417905560105481168552928420805482168317905561dead9093527f43fedf50e12e5c047fbe3576d03ab50250348e9a6030f531ab6d4ce10f5b0303805490931617909155925491926200023a92165f196200035b565b5062000614565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b038216620002f25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b8060025f828254620003059190620005ee565b90915550506001600160a01b0382165f81815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038316620003bf5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401620002e9565b6001600160a01b038216620004225760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401620002e9565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c90821680620004b057607f821691505b602082108103620004cf57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111562000482575f81815260208120601f850160051c81016020861015620004fd5750805b601f850160051c820191505b818110156200051e5782815560010162000509565b505050505050565b81516001600160401b0381111562000542576200054262000487565b6200055a816200055384546200049b565b84620004d5565b602080601f83116001811462000590575f8415620005785750858301515b5f19600386901b1c1916600185901b1785556200051e565b5f85815260208120601f198616915b82811015620005c0578886015182559484019460019091019084016200059f565b5085821015620005de57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200060e57634e487b7160e01b5f52601160045260245ffd5b92915050565b61289780620006225f395ff3fe608060405260043610610310575f3560e01c80638187f516116101a3578063a8aa1b31116100f2578063eaa0954c11610092578063f2fde38b1161006d578063f2fde38b14610953578063f66895a314610972578063f887ea4014610990578063fbb40569146109af575f80fd5b8063eaa0954c146108f7578063eebe405614610916578063ef5cfb8c14610934575f80fd5b8063c0d73320116100cd578063c0d7332014610860578063c5d32bb21461088b578063d23595ed146108b9578063dd62ed3e146108d8575f80fd5b8063a8aa1b3114610803578063a9059cbb14610822578063aacebbe314610841575f80fd5b80638de4485c1161015d5780639d282cd6116101385780639d282cd6146107875780639e252f00146107a6578063a1980430146107c5578063a457c2d7146107e4575f80fd5b80638de4485c1461073f578063929205221461075457806395d89b4114610773575f80fd5b80638187f516146106845780638514022d146106a357806385141a77146106c25780638a8c523c146106ef5780638cd4426d146107035780638da5cb5b14610722575f80fd5b806342b6fa111161025f57806353cfdaca1161021957806370a08231116101f457806370a08231146105e4578063715018a614610618578063728f8eea1461062c57806379cc679014610665575f80fd5b806353cfdaca1461057c5780635ce289ba146105b057806366a88d96146105cf575f80fd5b806342b6fa11146104c15780634324deae146104e05780634ada218b146104ff5780634b014e281461051f5780634e736f221461053e578063533687af1461055d575f80fd5b806323eb6e72116102ca578063355496ca116102a5578063355496ca1461044557806339509351146104645780633ed02eda1461048357806342966c68146104a2575f80fd5b806323eb6e72146103f15780632aeaa2911461040a578063313ce5671461042a575f80fd5b806306fdde031461031b578063095ea7b3146103455780631340538f1461037457806318160ddd146103955780631816467f146103b357806323b872dd146103d2575f80fd5b3661031757005b5f80fd5b348015610326575f80fd5b5061032f6109da565b60405161033c919061236c565b60405180910390f35b348015610350575f80fd5b5061036461035f3660046123cb565b610a6a565b604051901515815260200161033c565b34801561037f575f80fd5b5061039361038e366004612402565b610a80565b005b3480156103a0575f80fd5b506002545b60405190815260200161033c565b3480156103be575f80fd5b506103936103cd366004612424565b610aa6565b3480156103dd575f80fd5b506103646103ec36600461243f565b610ad0565b3480156103fc575f80fd5b50600e546103649060ff1681565b348015610415575f80fd5b50335f908152601a60205260409020546103a5565b348015610435575f80fd5b506040516012815260200161033c565b348015610450575f80fd5b5061039361045f36600461247d565b610b6e565b34801561046f575f80fd5b5061036461047e3660046123cb565b610ba0565b34801561048e575f80fd5b5061039361049d366004612402565b610bc8565b3480156104ad575f80fd5b506103936104bc3660046124b4565b610bea565b3480156104cc575f80fd5b506103936104db3660046124b4565b610bf7565b3480156104eb575f80fd5b506103936104fa3660046124b4565b610c1b565b34801561050a575f80fd5b5060075461036490600160b01b900460ff1681565b34801561052a575f80fd5b50610393610539366004612402565b610c3f565b348015610549575f80fd5b506103936105583660046124cb565b610c63565b348015610568575f80fd5b50600e546103649062010000900460ff1681565b348015610587575f80fd5b506103a5610596366004612424565b6001600160a01b03165f908152601a602052604090205490565b3480156105bb575f80fd5b506103936105ca366004612402565b610c91565b3480156105da575f80fd5b506103a560095481565b3480156105ef575f80fd5b506103a56105fe366004612424565b6001600160a01b03165f9081526020819052604090205490565b348015610623575f80fd5b50610393610cac565b348015610637575f80fd5b5060115460125460135461064a92919083565b6040805193845260208401929092529082015260600161033c565b348015610670575f80fd5b5061039361067f3660046123cb565b610cbf565b34801561068f575f80fd5b5061039361069e366004612424565b610dbf565b3480156106ae575f80fd5b506103936106bd36600461247d565b610de9565b3480156106cd575f80fd5b506106d761dead81565b6040516001600160a01b03909116815260200161033c565b3480156106fa575f80fd5b50610393610e1b565b34801561070e575f80fd5b5061039361071d3660046123cb565b610e98565b34801561072d575f80fd5b506005546001600160a01b03166106d7565b34801561074a575f80fd5b506103a5600a5481565b34801561075f575f80fd5b5061039361076e36600461253c565b610f11565b34801561077e575f80fd5b5061032f61101c565b348015610792575f80fd5b506103936107a13660046124cb565b61102b565b3480156107b1575f80fd5b506103936107c03660046124b4565b611059565b3480156107d0575f80fd5b506103936107df366004612424565b611094565b3480156107ef575f80fd5b506103646107fe3660046123cb565b6110be565b34801561080e575f80fd5b506007546106d7906001600160a01b031681565b34801561082d575f80fd5b5061036461083c3660046123cb565b611138565b34801561084c575f80fd5b5061039361085b366004612424565b611144565b34801561086b575f80fd5b506103a561087a366004612424565b601a6020525f908152604090205481565b348015610896575f80fd5b506103646108a5366004612424565b60176020525f908152604090205460ff1681565b3480156108c4575f80fd5b506103936108d33660046123cb565b611178565b3480156108e3575f80fd5b506103a56108f23660046125a3565b611291565b348015610902575f80fd5b506103936109113660046124b4565b6112bb565b348015610921575f80fd5b50600e5461036490610100900460ff1681565b34801561093f575f80fd5b5061039361094e366004612424565b6112c8565b34801561095e575f80fd5b5061039361096d366004612424565b6113c9565b34801561097d575f80fd5b5060145460155460165461064a92919083565b34801561099b575f80fd5b506006546106d7906001600160a01b031681565b3480156109ba575f80fd5b506103a56109c9366004612424565b60196020525f908152604090205481565b6060600380546109e9906125cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610a15906125cf565b8015610a605780601f10610a3757610100808354040283529160200191610a60565b820191905f5260205f20905b815481529060010190602001808311610a4357829003601f168201915b5050505050905090565b5f610a7633848461143f565b5060015b92915050565b610a88611562565b60078054911515600160a81b0260ff60a81b19909216919091179055565b610aae611562565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b5f610adc8484846115bc565b5f610ae78533611291565b905082811015610b4f5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610b638533610b5e868561261b565b61143f565b506001949350505050565b610b76611562565b6001600160a01b03919091165f908152601760205260409020805460ff1916911515919091179055565b5f80610bad335b85611291565b9050610bbe3385610b5e868561262e565b5060019392505050565b610bd0611562565b600e80549115156101000261ff0019909216919091179055565b610bf43382611b53565b50565b610bff611562565b610c0b6012600a612721565b610c15908261272f565b60085550565b610c23611562565b610c2f6012600a612721565b610c39908261272f565b60095550565b610c47611562565b600e8054911515620100000262ff000019909216919091179055565b610c6b611562565b604080516060810182528481526020810184905201819052601492909255601555601655565b610c99611562565b600e805460ff1916911515919091179055565b610cb4611562565b610cbd5f611c83565b565b600e5460ff16610d115760405162461bcd60e51b815260206004820152601e60248201527f2444494e4f206275726e206973206e6f7420656e61626c6564207965742e00006044820152606401610b46565b600a54610d1e908261272f565b6001600160a01b0383165f908152602081905260409020541015610d785760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b410122224a7279760791b6044820152606401610b46565b610d8f82600a5483610d8a919061272f565b611cd4565b6001600160a01b0382165f9081526019602052604081208054839290610db690849061262e565b90915550505050565b610dc7611562565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b610df1611562565b6001600160a01b03919091165f908152601860205260409020805460ff1916911515919091179055565b610e23611562565b600754600160b01b900460ff1615610e7d5760405162461bcd60e51b815260206004820152601a60248201527f54726164696e6720697320616c726561647920656e61626c65640000000000006044820152606401610b46565b6007805461ffff60a81b191661010160a81b17905543600b55565b60105460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529083169063a9059cbb906044016020604051808303815f875af1158015610ee8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f0c9190612746565b505050565b610f19611562565b5f5b8381101561101557828282818110610f3557610f35612761565b90506020020135670de0b6b3a7640000610f4f919061272f565b601a5f878785818110610f6457610f64612761565b9050602002016020810190610f799190612424565b6001600160a01b03166001600160a01b031681526020019081526020015f205f828254610fa6919061262e565b909155506110029050858583818110610fc157610fc1612761565b9050602002016020810190610fd69190612424565b848484818110610fe857610fe8612761565b90506020020135670de0b6b3a764000061047e919061272f565b508061100d81612775565b915050610f1b565b5050505050565b6060600480546109e9906125cf565b611033611562565b604080516060810182528481526020810184905201819052601192909255601255601355565b6010546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015611090573d5f803e3d5ffd5b5050565b61109c611562565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b5f806110c933610ba7565b9050828110156111295760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610b46565b610bbe3385610b5e868561261b565b5f610a763384846115bc565b61114c611562565b600e80546001600160a01b039092166301000000026301000000600160b81b0319909216919091179055565b600e54610100900460ff166111db5760405162461bcd60e51b815260206004820152602360248201527f427579204558545241204c49564553206973206e6f7420656e61626c6564207960448201526232ba1760e91b6064820152608401610b46565b600a546111e8908261272f565b6001600160a01b0383165f9081526020819052604090205410156112425760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b410122224a7279760791b6044820152606401610b46565b601054600a546112699184916001600160a01b0390911690611264908561272f565b611ce9565b506001600160a01b0382165f9081526019602052604081208054839290610db690849061262e565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6112c3611562565b600a55565b600e5462010000900460ff166113205760405162461bcd60e51b815260206004820181905260248201527f5265776172647320636c61696d206973206e6f7420616374697665207965742e6044820152606401610b46565b6001600160a01b0381165f908152601a60205260409020546113845760405162461bcd60e51b815260206004820152601c60248201527f4e6f20726577617264732062616c616e636520746f20636c61696d2e000000006044820152606401610b46565b6001600160a01b038082165f908152601a602052604090205460105490916113ae91168383611ce9565b50506001600160a01b03165f908152601a6020526040812055565b6113d1611562565b6001600160a01b0381166114365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b46565b610bf481611c83565b6001600160a01b0383166114a15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610b46565b6001600160a01b0382166115025760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610b46565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6005546001600160a01b03163314610cbd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b5f811161161d5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610b46565b6001600160a01b0383165f9081526018602052604090205460ff1615801561165d57506001600160a01b0382165f9081526018602052604090205460ff16155b6116a95760405162461bcd60e51b815260206004820152601960248201527f596f752063616e2774207472616e7366657220746f6b656e73000000000000006044820152606401610b46565b6001600160a01b0383165f9081526017602052604090205460ff161580156116e957506001600160a01b0382165f9081526017602052604090205460ff16155b1561173d57600754600160b01b900460ff1661173d5760405162461bcd60e51b8152602060048201526013602482015272151c98591a5b99c81b9bdd08195b98589b1959606a1b6044820152606401610b46565b6007546001600160a01b03848116911614801561177257506001600160a01b0382165f9081526017602052604090205460ff16155b80156117885750600754600160a01b900460ff16155b1561180757600954816117af846001600160a01b03165f9081526020819052604090205490565b6117b9919061262e565b11156118075760405162461bcd60e51b815260206004820181905260248201527f596f752061726520657863656564696e67206d617857616c6c65744c696d69746044820152606401610b46565b6007546001600160a01b0384811691161480159061183d57506001600160a01b0382165f9081526017602052604090205460ff16155b801561186157506001600160a01b0383165f9081526017602052604090205460ff16155b80156118775750600754600160a01b900460ff16155b1561190b576007546001600160a01b0383811691161461190b57600954816118b3846001600160a01b03165f9081526020819052604090205490565b6118bd919061262e565b111561190b5760405162461bcd60e51b815260206004820181905260248201527f596f752061726520657863656564696e67206d617857616c6c65744c696d69746044820152606401610b46565b5f805f61192f60405180606001604052805f81526020015f81526020015f81525090565b6001600160a01b0387165f9081526017602052604081205460ff1615801561196f57506001600160a01b0387165f9081526017602052604090205460ff16155b80156119895750600c54600b54611986919061262e565b43105b600754909150600160a01b900460ff16806119bb57506001600160a01b0388165f9081526017602052604090205460ff165b806119dd57506001600160a01b0387165f9081526017602052604090205460ff165b156119ea575f9250611ab4565b6007546001600160a01b038881169116148015611a05575080155b15611a5557601654601454601554611a1d919061262e565b611a27919061262e565b6040805160608101825260145481526015546020820152601654918101919091529095508594509150611ab4565b80611aa557601354601154601254611a6d919061262e565b611a77919061262e565b6040805160608101825260115481526012546020820152601354918101919091529095508594509150611ab4565b8015611ab457600d5494508493505b6064611ac0858861272f565b611aca919061278d565b600754909350600160a81b900460ff168015611af457506007546001600160a01b03898116911614155b15611b0357611b038583611d01565b611b178888611b12868a61261b565b611e78565b8215611b49578415611b49575f6064611b30878961272f565b611b3a919061278d565b9050611b47893083611e78565b505b5050505050505050565b6001600160a01b038216611bb35760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610b46565b6001600160a01b0382165f9081526020819052604090205481811015611c265760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610b46565b6001600160a01b0383165f818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b611cdf82338361201c565b6110908282611b53565b5f33611cf685828561201c565b610b638585856115bc565b600754600160a01b900460ff16611090576007805460ff60a01b1916600160a01b1790558115611e6757305f908152602081905260409020546008548110611e655760016008541115611d5357506008545b5f611d5f84600261272f565b90505f81846020015184611d73919061272f565b611d7d919061278d565b90505f611d8a828561261b565b905047611d968261208e565b5f611da1824761261b565b90505f876020015186611db4919061261b565b611dbe908361278d565b90505f886020015182611dd1919061272f565b90508015611de357611de386826121c5565b88515f90611df284600261272f565b611dfc919061272f565b90508015611e2157600e54611e2190630100000090046001600160a01b031682612257565b60408a01515f90611e3385600261272f565b611e3d919061272f565b90508015611e5b57601054611e5b906001600160a01b031682612257565b5050505050505050505b505b6007805460ff60a01b191690555050565b6001600160a01b038316611edc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610b46565b6001600160a01b038216611f3e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610b46565b6001600160a01b0383165f9081526020819052604090205481811015611fb55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610b46565b6001600160a01b038481165f81815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b50505050565b5f6120278484611291565b90505f19811461201657818110156120815760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610b46565b612016848484840361143f565b6040805160028082526060820183525f9260208301908036833701905050905030815f815181106120c1576120c1612761565b6001600160a01b03928316602091820292909201810191909152600654604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015612118573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061213c91906127ac565b8160018151811061214f5761214f612761565b6001600160a01b03928316602091820292909201015260065460405163791ac94760e01b815291169063791ac947906121949085905f908690309042906004016127c7565b5f604051808303815f87803b1580156121ab575f80fd5b505af11580156121bd573d5f803e3d5ffd5b505050505050565b60065460105460405163f305d71960e01b8152306004820152602481018590525f6044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af1158015612232573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906110159190612836565b804710156122a75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610b46565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f81146122f0576040519150601f19603f3d011682016040523d82523d5f602084013e6122f5565b606091505b5050905080610f0c5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610b46565b5f6020808352835180828501525f5b818110156123975785810183015185820160400152820161237b565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610bf4575f80fd5b5f80604083850312156123dc575f80fd5b82356123e7816123b7565b946020939093013593505050565b8015158114610bf4575f80fd5b5f60208284031215612412575f80fd5b813561241d816123f5565b9392505050565b5f60208284031215612434575f80fd5b813561241d816123b7565b5f805f60608486031215612451575f80fd5b833561245c816123b7565b9250602084013561246c816123b7565b929592945050506040919091013590565b5f806040838503121561248e575f80fd5b8235612499816123b7565b915060208301356124a9816123f5565b809150509250929050565b5f602082840312156124c4575f80fd5b5035919050565b5f805f606084860312156124dd575f80fd5b505081359360208301359350604090920135919050565b5f8083601f840112612504575f80fd5b50813567ffffffffffffffff81111561251b575f80fd5b6020830191508360208260051b8501011115612535575f80fd5b9250929050565b5f805f806040858703121561254f575f80fd5b843567ffffffffffffffff80821115612566575f80fd5b612572888389016124f4565b9096509450602087013591508082111561258a575f80fd5b50612597878288016124f4565b95989497509550505050565b5f80604083850312156125b4575f80fd5b82356125bf816123b7565b915060208301356124a9816123b7565b600181811c908216806125e357607f821691505b60208210810361260157634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610a7a57610a7a612607565b80820180821115610a7a57610a7a612607565b600181815b8085111561267b57815f190482111561266157612661612607565b8085161561266e57918102915b93841c9390800290612646565b509250929050565b5f8261269157506001610a7a565b8161269d57505f610a7a565b81600181146126b357600281146126bd576126d9565b6001915050610a7a565b60ff8411156126ce576126ce612607565b50506001821b610a7a565b5060208310610133831016604e8410600b84101617156126fc575081810a610a7a565b6127068383612641565b805f190482111561271957612719612607565b029392505050565b5f61241d60ff841683612683565b8082028115828204841417610a7a57610a7a612607565b5f60208284031215612756575f80fd5b815161241d816123f5565b634e487b7160e01b5f52603260045260245ffd5b5f6001820161278657612786612607565b5060010190565b5f826127a757634e487b7160e01b5f52601260045260245ffd5b500490565b5f602082840312156127bc575f80fd5b815161241d816123b7565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156128155784516001600160a01b0316835293830193918301916001016127f0565b50506001600160a01b03969096166060850152505050608001529392505050565b5f805f60608486031215612848575f80fd5b835192506020840151915060408401519050925092509256fea26469706673582212209d6d26fcc6c91820014c6a07c82e4c8de1d0891ec6979c433b7341f2b8941b8464736f6c63430008150033",
    "runtime_bytecode": "608060405260043610610310575f3560e01c80638187f516116101a3578063a8aa1b31116100f2578063eaa0954c11610092578063f2fde38b1161006d578063f2fde38b14610953578063f66895a314610972578063f887ea4014610990578063fbb40569146109af575f80fd5b8063eaa0954c146108f7578063eebe405614610916578063ef5cfb8c14610934575f80fd5b8063c0d73320116100cd578063c0d7332014610860578063c5d32bb21461088b578063d23595ed146108b9578063dd62ed3e146108d8575f80fd5b8063a8aa1b3114610803578063a9059cbb14610822578063aacebbe314610841575f80fd5b80638de4485c1161015d5780639d282cd6116101385780639d282cd6146107875780639e252f00146107a6578063a1980430146107c5578063a457c2d7146107e4575f80fd5b80638de4485c1461073f578063929205221461075457806395d89b4114610773575f80fd5b80638187f516146106845780638514022d146106a357806385141a77146106c25780638a8c523c146106ef5780638cd4426d146107035780638da5cb5b14610722575f80fd5b806342b6fa111161025f57806353cfdaca1161021957806370a08231116101f457806370a08231146105e4578063715018a614610618578063728f8eea1461062c57806379cc679014610665575f80fd5b806353cfdaca1461057c5780635ce289ba146105b057806366a88d96146105cf575f80fd5b806342b6fa11146104c15780634324deae146104e05780634ada218b146104ff5780634b014e281461051f5780634e736f221461053e578063533687af1461055d575f80fd5b806323eb6e72116102ca578063355496ca116102a5578063355496ca1461044557806339509351146104645780633ed02eda1461048357806342966c68146104a2575f80fd5b806323eb6e72146103f15780632aeaa2911461040a578063313ce5671461042a575f80fd5b806306fdde031461031b578063095ea7b3146103455780631340538f1461037457806318160ddd146103955780631816467f146103b357806323b872dd146103d2575f80fd5b3661031757005b5f80fd5b348015610326575f80fd5b5061032f6109da565b60405161033c919061236c565b60405180910390f35b348015610350575f80fd5b5061036461035f3660046123cb565b610a6a565b604051901515815260200161033c565b34801561037f575f80fd5b5061039361038e366004612402565b610a80565b005b3480156103a0575f80fd5b506002545b60405190815260200161033c565b3480156103be575f80fd5b506103936103cd366004612424565b610aa6565b3480156103dd575f80fd5b506103646103ec36600461243f565b610ad0565b3480156103fc575f80fd5b50600e546103649060ff1681565b348015610415575f80fd5b50335f908152601a60205260409020546103a5565b348015610435575f80fd5b506040516012815260200161033c565b348015610450575f80fd5b5061039361045f36600461247d565b610b6e565b34801561046f575f80fd5b5061036461047e3660046123cb565b610ba0565b34801561048e575f80fd5b5061039361049d366004612402565b610bc8565b3480156104ad575f80fd5b506103936104bc3660046124b4565b610bea565b3480156104cc575f80fd5b506103936104db3660046124b4565b610bf7565b3480156104eb575f80fd5b506103936104fa3660046124b4565b610c1b565b34801561050a575f80fd5b5060075461036490600160b01b900460ff1681565b34801561052a575f80fd5b50610393610539366004612402565b610c3f565b348015610549575f80fd5b506103936105583660046124cb565b610c63565b348015610568575f80fd5b50600e546103649062010000900460ff1681565b348015610587575f80fd5b506103a5610596366004612424565b6001600160a01b03165f908152601a602052604090205490565b3480156105bb575f80fd5b506103936105ca366004612402565b610c91565b3480156105da575f80fd5b506103a560095481565b3480156105ef575f80fd5b506103a56105fe366004612424565b6001600160a01b03165f9081526020819052604090205490565b348015610623575f80fd5b50610393610cac565b348015610637575f80fd5b5060115460125460135461064a92919083565b6040805193845260208401929092529082015260600161033c565b348015610670575f80fd5b5061039361067f3660046123cb565b610cbf565b34801561068f575f80fd5b5061039361069e366004612424565b610dbf565b3480156106ae575f80fd5b506103936106bd36600461247d565b610de9565b3480156106cd575f80fd5b506106d761dead81565b6040516001600160a01b03909116815260200161033c565b3480156106fa575f80fd5b50610393610e1b565b34801561070e575f80fd5b5061039361071d3660046123cb565b610e98565b34801561072d575f80fd5b506005546001600160a01b03166106d7565b34801561074a575f80fd5b506103a5600a5481565b34801561075f575f80fd5b5061039361076e36600461253c565b610f11565b34801561077e575f80fd5b5061032f61101c565b348015610792575f80fd5b506103936107a13660046124cb565b61102b565b3480156107b1575f80fd5b506103936107c03660046124b4565b611059565b3480156107d0575f80fd5b506103936107df366004612424565b611094565b3480156107ef575f80fd5b506103646107fe3660046123cb565b6110be565b34801561080e575f80fd5b506007546106d7906001600160a01b031681565b34801561082d575f80fd5b5061036461083c3660046123cb565b611138565b34801561084c575f80fd5b5061039361085b366004612424565b611144565b34801561086b575f80fd5b506103a561087a366004612424565b601a6020525f908152604090205481565b348015610896575f80fd5b506103646108a5366004612424565b60176020525f908152604090205460ff1681565b3480156108c4575f80fd5b506103936108d33660046123cb565b611178565b3480156108e3575f80fd5b506103a56108f23660046125a3565b611291565b348015610902575f80fd5b506103936109113660046124b4565b6112bb565b348015610921575f80fd5b50600e5461036490610100900460ff1681565b34801561093f575f80fd5b5061039361094e366004612424565b6112c8565b34801561095e575f80fd5b5061039361096d366004612424565b6113c9565b34801561097d575f80fd5b5060145460155460165461064a92919083565b34801561099b575f80fd5b506006546106d7906001600160a01b031681565b3480156109ba575f80fd5b506103a56109c9366004612424565b60196020525f908152604090205481565b6060600380546109e9906125cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610a15906125cf565b8015610a605780601f10610a3757610100808354040283529160200191610a60565b820191905f5260205f20905b815481529060010190602001808311610a4357829003601f168201915b5050505050905090565b5f610a7633848461143f565b5060015b92915050565b610a88611562565b60078054911515600160a81b0260ff60a81b19909216919091179055565b610aae611562565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b5f610adc8484846115bc565b5f610ae78533611291565b905082811015610b4f5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610b638533610b5e868561261b565b61143f565b506001949350505050565b610b76611562565b6001600160a01b03919091165f908152601760205260409020805460ff1916911515919091179055565b5f80610bad335b85611291565b9050610bbe3385610b5e868561262e565b5060019392505050565b610bd0611562565b600e80549115156101000261ff0019909216919091179055565b610bf43382611b53565b50565b610bff611562565b610c0b6012600a612721565b610c15908261272f565b60085550565b610c23611562565b610c2f6012600a612721565b610c39908261272f565b60095550565b610c47611562565b600e8054911515620100000262ff000019909216919091179055565b610c6b611562565b604080516060810182528481526020810184905201819052601492909255601555601655565b610c99611562565b600e805460ff1916911515919091179055565b610cb4611562565b610cbd5f611c83565b565b600e5460ff16610d115760405162461bcd60e51b815260206004820152601e60248201527f2444494e4f206275726e206973206e6f7420656e61626c6564207965742e00006044820152606401610b46565b600a54610d1e908261272f565b6001600160a01b0383165f908152602081905260409020541015610d785760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b410122224a7279760791b6044820152606401610b46565b610d8f82600a5483610d8a919061272f565b611cd4565b6001600160a01b0382165f9081526019602052604081208054839290610db690849061262e565b90915550505050565b610dc7611562565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b610df1611562565b6001600160a01b03919091165f908152601860205260409020805460ff1916911515919091179055565b610e23611562565b600754600160b01b900460ff1615610e7d5760405162461bcd60e51b815260206004820152601a60248201527f54726164696e6720697320616c726561647920656e61626c65640000000000006044820152606401610b46565b6007805461ffff60a81b191661010160a81b17905543600b55565b60105460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529083169063a9059cbb906044016020604051808303815f875af1158015610ee8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f0c9190612746565b505050565b610f19611562565b5f5b8381101561101557828282818110610f3557610f35612761565b90506020020135670de0b6b3a7640000610f4f919061272f565b601a5f878785818110610f6457610f64612761565b9050602002016020810190610f799190612424565b6001600160a01b03166001600160a01b031681526020019081526020015f205f828254610fa6919061262e565b909155506110029050858583818110610fc157610fc1612761565b9050602002016020810190610fd69190612424565b848484818110610fe857610fe8612761565b90506020020135670de0b6b3a764000061047e919061272f565b508061100d81612775565b915050610f1b565b5050505050565b6060600480546109e9906125cf565b611033611562565b604080516060810182528481526020810184905201819052601192909255601255601355565b6010546040516001600160a01b039091169082156108fc029083905f818181858888f19350505050158015611090573d5f803e3d5ffd5b5050565b61109c611562565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b5f806110c933610ba7565b9050828110156111295760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610b46565b610bbe3385610b5e868561261b565b5f610a763384846115bc565b61114c611562565b600e80546001600160a01b039092166301000000026301000000600160b81b0319909216919091179055565b600e54610100900460ff166111db5760405162461bcd60e51b815260206004820152602360248201527f427579204558545241204c49564553206973206e6f7420656e61626c6564207960448201526232ba1760e91b6064820152608401610b46565b600a546111e8908261272f565b6001600160a01b0383165f9081526020819052604090205410156112425760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b410122224a7279760791b6044820152606401610b46565b601054600a546112699184916001600160a01b0390911690611264908561272f565b611ce9565b506001600160a01b0382165f9081526019602052604081208054839290610db690849061262e565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6112c3611562565b600a55565b600e5462010000900460ff166113205760405162461bcd60e51b815260206004820181905260248201527f5265776172647320636c61696d206973206e6f7420616374697665207965742e6044820152606401610b46565b6001600160a01b0381165f908152601a60205260409020546113845760405162461bcd60e51b815260206004820152601c60248201527f4e6f20726577617264732062616c616e636520746f20636c61696d2e000000006044820152606401610b46565b6001600160a01b038082165f908152601a602052604090205460105490916113ae91168383611ce9565b50506001600160a01b03165f908152601a6020526040812055565b6113d1611562565b6001600160a01b0381166114365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b46565b610bf481611c83565b6001600160a01b0383166114a15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610b46565b6001600160a01b0382166115025760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610b46565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6005546001600160a01b03163314610cbd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b46565b5f811161161d5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610b46565b6001600160a01b0383165f9081526018602052604090205460ff1615801561165d57506001600160a01b0382165f9081526018602052604090205460ff16155b6116a95760405162461bcd60e51b815260206004820152601960248201527f596f752063616e2774207472616e7366657220746f6b656e73000000000000006044820152606401610b46565b6001600160a01b0383165f9081526017602052604090205460ff161580156116e957506001600160a01b0382165f9081526017602052604090205460ff16155b1561173d57600754600160b01b900460ff1661173d5760405162461bcd60e51b8152602060048201526013602482015272151c98591a5b99c81b9bdd08195b98589b1959606a1b6044820152606401610b46565b6007546001600160a01b03848116911614801561177257506001600160a01b0382165f9081526017602052604090205460ff16155b80156117885750600754600160a01b900460ff16155b1561180757600954816117af846001600160a01b03165f9081526020819052604090205490565b6117b9919061262e565b11156118075760405162461bcd60e51b815260206004820181905260248201527f596f752061726520657863656564696e67206d617857616c6c65744c696d69746044820152606401610b46565b6007546001600160a01b0384811691161480159061183d57506001600160a01b0382165f9081526017602052604090205460ff16155b801561186157506001600160a01b0383165f9081526017602052604090205460ff16155b80156118775750600754600160a01b900460ff16155b1561190b576007546001600160a01b0383811691161461190b57600954816118b3846001600160a01b03165f9081526020819052604090205490565b6118bd919061262e565b111561190b5760405162461bcd60e51b815260206004820181905260248201527f596f752061726520657863656564696e67206d617857616c6c65744c696d69746044820152606401610b46565b5f805f61192f60405180606001604052805f81526020015f81526020015f81525090565b6001600160a01b0387165f9081526017602052604081205460ff1615801561196f57506001600160a01b0387165f9081526017602052604090205460ff16155b80156119895750600c54600b54611986919061262e565b43105b600754909150600160a01b900460ff16806119bb57506001600160a01b0388165f9081526017602052604090205460ff165b806119dd57506001600160a01b0387165f9081526017602052604090205460ff165b156119ea575f9250611ab4565b6007546001600160a01b038881169116148015611a05575080155b15611a5557601654601454601554611a1d919061262e565b611a27919061262e565b6040805160608101825260145481526015546020820152601654918101919091529095508594509150611ab4565b80611aa557601354601154601254611a6d919061262e565b611a77919061262e565b6040805160608101825260115481526012546020820152601354918101919091529095508594509150611ab4565b8015611ab457600d5494508493505b6064611ac0858861272f565b611aca919061278d565b600754909350600160a81b900460ff168015611af457506007546001600160a01b03898116911614155b15611b0357611b038583611d01565b611b178888611b12868a61261b565b611e78565b8215611b49578415611b49575f6064611b30878961272f565b611b3a919061278d565b9050611b47893083611e78565b505b5050505050505050565b6001600160a01b038216611bb35760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610b46565b6001600160a01b0382165f9081526020819052604090205481811015611c265760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610b46565b6001600160a01b0383165f818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b611cdf82338361201c565b6110908282611b53565b5f33611cf685828561201c565b610b638585856115bc565b600754600160a01b900460ff16611090576007805460ff60a01b1916600160a01b1790558115611e6757305f908152602081905260409020546008548110611e655760016008541115611d5357506008545b5f611d5f84600261272f565b90505f81846020015184611d73919061272f565b611d7d919061278d565b90505f611d8a828561261b565b905047611d968261208e565b5f611da1824761261b565b90505f876020015186611db4919061261b565b611dbe908361278d565b90505f886020015182611dd1919061272f565b90508015611de357611de386826121c5565b88515f90611df284600261272f565b611dfc919061272f565b90508015611e2157600e54611e2190630100000090046001600160a01b031682612257565b60408a01515f90611e3385600261272f565b611e3d919061272f565b90508015611e5b57601054611e5b906001600160a01b031682612257565b5050505050505050505b505b6007805460ff60a01b191690555050565b6001600160a01b038316611edc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610b46565b6001600160a01b038216611f3e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610b46565b6001600160a01b0383165f9081526020819052604090205481811015611fb55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610b46565b6001600160a01b038481165f81815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b50505050565b5f6120278484611291565b90505f19811461201657818110156120815760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610b46565b612016848484840361143f565b6040805160028082526060820183525f9260208301908036833701905050905030815f815181106120c1576120c1612761565b6001600160a01b03928316602091820292909201810191909152600654604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015612118573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061213c91906127ac565b8160018151811061214f5761214f612761565b6001600160a01b03928316602091820292909201015260065460405163791ac94760e01b815291169063791ac947906121949085905f908690309042906004016127c7565b5f604051808303815f87803b1580156121ab575f80fd5b505af11580156121bd573d5f803e3d5ffd5b505050505050565b60065460105460405163f305d71960e01b8152306004820152602481018590525f6044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af1158015612232573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906110159190612836565b804710156122a75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610b46565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f81146122f0576040519150601f19603f3d011682016040523d82523d5f602084013e6122f5565b606091505b5050905080610f0c5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610b46565b5f6020808352835180828501525f5b818110156123975785810183015185820160400152820161237b565b505f604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610bf4575f80fd5b5f80604083850312156123dc575f80fd5b82356123e7816123b7565b946020939093013593505050565b8015158114610bf4575f80fd5b5f60208284031215612412575f80fd5b813561241d816123f5565b9392505050565b5f60208284031215612434575f80fd5b813561241d816123b7565b5f805f60608486031215612451575f80fd5b833561245c816123b7565b9250602084013561246c816123b7565b929592945050506040919091013590565b5f806040838503121561248e575f80fd5b8235612499816123b7565b915060208301356124a9816123f5565b809150509250929050565b5f602082840312156124c4575f80fd5b5035919050565b5f805f606084860312156124dd575f80fd5b505081359360208301359350604090920135919050565b5f8083601f840112612504575f80fd5b50813567ffffffffffffffff81111561251b575f80fd5b6020830191508360208260051b8501011115612535575f80fd5b9250929050565b5f805f806040858703121561254f575f80fd5b843567ffffffffffffffff80821115612566575f80fd5b612572888389016124f4565b9096509450602087013591508082111561258a575f80fd5b50612597878288016124f4565b95989497509550505050565b5f80604083850312156125b4575f80fd5b82356125bf816123b7565b915060208301356124a9816123b7565b600181811c908216806125e357607f821691505b60208210810361260157634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610a7a57610a7a612607565b80820180821115610a7a57610a7a612607565b600181815b8085111561267b57815f190482111561266157612661612607565b8085161561266e57918102915b93841c9390800290612646565b509250929050565b5f8261269157506001610a7a565b8161269d57505f610a7a565b81600181146126b357600281146126bd576126d9565b6001915050610a7a565b60ff8411156126ce576126ce612607565b50506001821b610a7a565b5060208310610133831016604e8410600b84101617156126fc575081810a610a7a565b6127068383612641565b805f190482111561271957612719612607565b029392505050565b5f61241d60ff841683612683565b8082028115828204841417610a7a57610a7a612607565b5f60208284031215612756575f80fd5b815161241d816123f5565b634e487b7160e01b5f52603260045260245ffd5b5f6001820161278657612786612607565b5060010190565b5f826127a757634e487b7160e01b5f52601260045260245ffd5b500490565b5f602082840312156127bc575f80fd5b815161241d816123b7565b5f60a082018783526020878185015260a0604085015281875180845260c08601915082890193505f5b818110156128155784516001600160a01b0316835293830193918301916001016127f0565b50506001600160a01b03969096166060850152505050608001529392505050565b5f805f60608486031215612848575f80fd5b835192506020840151915060408401519050925092509256fea26469706673582212209d6d26fcc6c91820014c6a07c82e4c8de1d0891ec6979c433b7341f2b8941b8464736f6c63430008150033",
    "contract_name": "DINO",
    "compiler_version": "v0.8.21+commit.d9974bed",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev\",\"type\":\"uint256\"}],\"name\":\"SetSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev\",\"type\":\"uint256\"}],\"name\":\"UpdateBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressLives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyLives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLivesState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"checkAddressRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setBurnState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setBuyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setClaimState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_livesCost\",\"type\":\"uint256\"}],\"name\":\"setLivesCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setRewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateIsEarlyBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateLiquidityProvide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_amount\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityTreshhold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dino_v2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.20 ;\\r\\n\\r\\n/* \\r\\n\\r\\n? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? \\r\\nDino Run: an innovative P2E arcade gaming experience integrated with $DINO. \\r\\n\\r\\nGame: https://game.dinorun.xyz    \\r\\nWebsite: https://dinorun.xyz\\r\\nTwitter: https://twitter.com/DinoRunGame\\r\\nTelegram: https://t.me/DinoRunGame\\r\\nDocs: https://dinorun.gitbook.io/dino-run/\\r\\n? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? \\r\\n\\r\\n*/ \\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract ERC20Burnable is Context, ERC20 {\\r\\n\\r\\n    function burn(uint256 amount) public virtual {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) public virtual {\\r\\n        _spendAllowance(account, _msgSender(), amount);\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract DINO is ERC20(\\\"Dino Run Game\\\", \\\"DINO\\\"), ERC20Burnable, Ownable {\\r\\n    using Address for address payable;\\r\\n\\r\\n    IUniswapV2Router02 public router;\\r\\n    address public pair;\\r\\n\\r\\n    bool private _liquidityMutex = false;\\r\\n    bool private providingLiquidity = false;\\r\\n    bool public tradingEnabled = false;\\r\\n\\r\\n    uint256 private tokenLiquidityThreshold = 600_000 * 10 ** 18;\\r\\n    uint256 public maxWalletLimit = 2_000_000 * 10 ** 18;\\r\\n    uint256 public lCost = 500000000000000000000;\\r\\n\\r\\n    uint256 private genesis_block;\\r\\n    uint256 private deadline = 5;\\r\\n    uint256 private launchtax = 30;\\r\\n\\r\\n    bool public burnEnable = false;\\r\\n    bool public buyLivesState = true;\\r\\n    bool public claimEnable = true;\\r\\n\\r\\n    address private marketingWallet;\\r\\n    address private rewardsWallet;\\r\\n    address private devWallet;\\r\\n\\r\\n    address public constant deadWallet =\\r\\n        0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    struct Taxes {\\r\\n        uint256 marketing;\\r\\n        uint256 liquidity;\\r\\n        uint256 dev;\\r\\n    }\\r\\n\\r\\n    Taxes public taxes = Taxes(4, 0, 0);\\r\\n    Taxes public sellTaxes = Taxes(4, 0, 0);\\r\\n\\r\\n    mapping(address => bool) public exemptFee;\\r\\n    mapping(address => bool) private isearlybuyer;\\r\\n    mapping(address => uint) public addressLives;\\r\\n    mapping(address => uint) public addressRewards;\\r\\n\\r\\n    modifier mutexLock() {\\r\\n        if (!_liquidityMutex) {\\r\\n            _liquidityMutex = true;\\r\\n            _;\\r\\n            _liquidityMutex = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\nfunction setPair(address pairAddress) external onlyOwner {\\r\\n        pair = pairAddress;\\r\\n}\\r\\n\\r\\n    constructor() {\\r\\n\\r\\n        marketingWallet = msg.sender;\\r\\n        devWallet = msg.sender;\\r\\n        _mint(msg.sender, 100_000_000 * 10 ** 18);\\r\\n\\r\\n        IUniswapV2Router02 _router = IUniswapV2Router02(\\r\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\r\\n        );\\r\\n\\r\\n        router = _router;\\r\\n        exemptFee[address(this)] = true;\\r\\n        exemptFee[msg.sender] = true;\\r\\n        exemptFee[marketingWallet] = true;\\r\\n        exemptFee[devWallet] = true;\\r\\n        exemptFee[deadWallet] = true;\\r\\n\\r\\n        _approve(address(this), address(router), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\r\\n        require(\\r\\n            currentAllowance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n        );\\r\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) public override returns (bool) {\\r\\n        uint256 currentAllowance = allowance(_msgSender(), spender);\\r\\n        _approve(_msgSender(), spender, currentAllowance + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public override returns (bool) {\\r\\n        uint256 currentAllowance = allowance(_msgSender(), spender);\\r\\n\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setRewards(address[] calldata _wallets, uint256[] calldata _rewards) public onlyOwner {\\r\\n        for (uint256 i = 0; i < _wallets.length; i++) {\\r\\n            addressRewards[_wallets[i]] += _rewards[i] * 10 ** 18;\\r\\n            increaseAllowance(_wallets[i], _rewards[i] * 10 ** 18);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function claimRewards(address _account) public {\\r\\n        require(claimEnable, \\\"Rewards claim is not active yet.\\\");\\r\\n        require(addressRewards[_account] > 0, \\\"No rewards balance to claim.\\\");\\r\\n        uint256 rewardsValue = addressRewards[_account];\\r\\n\\r\\n        super.transferFrom(devWallet, _account, rewardsValue);\\r\\n        addressRewards[_account] = 0;\\r\\n    }\\r\\n\\r\\n    function checkRewards() public view virtual returns (uint256) {\\r\\n        return addressRewards[msg.sender];\\r\\n    }\\r\\n\\r\\n    function checkAddressRewards(address _wallet) public view virtual returns (uint256) {\\r\\n        return addressRewards[_wallet];\\r\\n    }\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) public override {\\r\\n        require(burnEnable, \\\"$DINO burn is not enabled yet.\\\");\\r\\n        require(balanceOf(account) >= amount*lCost, \\\"Not enough $DINO.\\\");\\r\\n\\r\\n        super.burnFrom(account, amount*lCost);\\r\\n        addressLives[account] += amount;\\r\\n    }\\r\\n\\r\\n    function buyLives(address account, uint256 amount) public {\\r\\n        require(buyLivesState, \\\"Buy EXTRA LIVES is not enabled yet.\\\");\\r\\n        require(balanceOf(account) >= amount*lCost, \\\"Not enough $DINO.\\\");\\r\\n\\r\\n        super.transferFrom(account, devWallet, amount*lCost);\\r\\n        addressLives[account] += amount;\\r\\n    }\\r\\n\\r\\n    function setLivesCost(uint256 _livesCost) public onlyOwner {\\r\\n        lCost = _livesCost;\\r\\n    }\\r\\n\\r\\n    function setBurnState(bool _state) public onlyOwner {\\r\\n        burnEnable = _state;\\r\\n    }\\r\\n\\r\\n    function setBuyState(bool _state) public onlyOwner {\\r\\n        buyLivesState = _state;\\r\\n    }\\r\\n\\r\\n    function setClaimState(bool _state) public onlyOwner {\\r\\n        claimEnable = _state;\\r\\n    }\\r\\n\\r\\n    function setRewardsWallet(address _wallet) public onlyOwner {\\r\\n        rewardsWallet = _wallet;\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        require(\\r\\n            !isearlybuyer[sender] && !isearlybuyer[recipient],\\r\\n            \\\"You can't transfer tokens\\\"\\r\\n        );\\r\\n\\r\\n        if (!exemptFee[sender] && !exemptFee[recipient]) {\\r\\n            require(tradingEnabled, \\\"Trading not enabled\\\");\\r\\n        }\\r\\n\\r\\n        if (sender == pair && !exemptFee[recipient] && !_liquidityMutex) {\\r\\n            require(\\r\\n                balanceOf(recipient) + amount <= maxWalletLimit,\\r\\n                \\\"You are exceeding maxWalletLimit\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            sender != pair &&\\r\\n            !exemptFee[recipient] &&\\r\\n            !exemptFee[sender] &&\\r\\n            !_liquidityMutex\\r\\n        ) {\\r\\n            if (recipient != pair) {\\r\\n                require(\\r\\n                    balanceOf(recipient) + amount <= maxWalletLimit,\\r\\n                    \\\"You are exceeding maxWalletLimit\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 feeswap;\\r\\n        uint256 feesum;\\r\\n        uint256 fee;\\r\\n        Taxes memory currentTaxes;\\r\\n\\r\\n        bool useLaunchFee = !exemptFee[sender] &&\\r\\n            !exemptFee[recipient] &&\\r\\n            block.number < genesis_block + deadline;\\r\\n\\r\\n        if (_liquidityMutex || exemptFee[sender] || exemptFee[recipient])\\r\\n            fee = 0;\\r\\n\\r\\n        else if (recipient == pair && !useLaunchFee) {\\r\\n            feeswap = sellTaxes.liquidity + sellTaxes.marketing + sellTaxes.dev;\\r\\n            feesum = feeswap;\\r\\n            currentTaxes = sellTaxes;\\r\\n        } else if (!useLaunchFee) {\\r\\n            feeswap = taxes.liquidity + taxes.marketing + taxes.dev;\\r\\n            feesum = feeswap;\\r\\n            currentTaxes = taxes;\\r\\n        } else if (useLaunchFee) {\\r\\n            feeswap = launchtax;\\r\\n            feesum = launchtax;\\r\\n        }\\r\\n\\r\\n        fee = (amount * feesum) / 100;\\r\\n\\r\\n        if (providingLiquidity && sender != pair)\\r\\n            handle_fees(feeswap, currentTaxes);\\r\\n\\r\\n        super._transfer(sender, recipient, amount - fee);\\r\\n        if (fee > 0) {\\r\\n            if (feeswap > 0) {\\r\\n                uint256 feeAmount = (amount * feeswap) / 100;\\r\\n                super._transfer(sender, address(this), feeAmount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function handle_fees(\\r\\n        uint256 feeswap,\\r\\n        Taxes memory swapTaxes\\r\\n    ) private mutexLock {\\r\\n        if (feeswap == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 contractBalance = balanceOf(address(this));\\r\\n        if (contractBalance >= tokenLiquidityThreshold) {\\r\\n            if (tokenLiquidityThreshold > 1) {\\r\\n                contractBalance = tokenLiquidityThreshold;\\r\\n            }\\r\\n\\r\\n            uint256 denominator = feeswap * 2;\\r\\n            uint256 tokensToAddLiquidityWith = (contractBalance *\\r\\n                swapTaxes.liquidity) / denominator;\\r\\n            uint256 toSwap = contractBalance - tokensToAddLiquidityWith;\\r\\n\\r\\n            uint256 initialBalance = address(this).balance;\\r\\n\\r\\n            swapTokensForETH(toSwap);\\r\\n\\r\\n            uint256 deltaBalance = address(this).balance - initialBalance;\\r\\n            uint256 unitBalance = deltaBalance /\\r\\n                (denominator - swapTaxes.liquidity);\\r\\n            uint256 ethToAddLiquidityWith = unitBalance * swapTaxes.liquidity;\\r\\n\\r\\n            if (ethToAddLiquidityWith > 0) {\\r\\n                addLiquidity(tokensToAddLiquidityWith, ethToAddLiquidityWith);\\r\\n            }\\r\\n\\r\\n            uint256 marketingAmt = unitBalance * 2 * swapTaxes.marketing;\\r\\n            if (marketingAmt > 0) {\\r\\n                payable(marketingWallet).sendValue(marketingAmt);\\r\\n            }\\r\\n\\r\\n            uint256 devAmt = unitBalance * 2 * swapTaxes.dev;\\r\\n            if (devAmt > 0) {\\r\\n                payable(devWallet).sendValue(devAmt);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapTokensForETH(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            0, \\r\\n            devWallet,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateLiquidityProvide(bool state) external onlyOwner {\\r\\n        providingLiquidity = state;\\r\\n    }\\r\\n\\r\\n    function updateLiquidityTreshhold(uint256 new_amount) external onlyOwner {\\r\\n        tokenLiquidityThreshold = new_amount * 10 ** decimals();\\r\\n    }\\r\\n\\r\\n    function UpdateBuyTaxes(\\r\\n        uint256 _marketing,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _dev\\r\\n    ) external onlyOwner {\\r\\n        taxes = Taxes(_marketing, _liquidity, _dev);\\r\\n    }\\r\\n\\r\\n    function SetSellTaxes(\\r\\n        uint256 _marketing,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _dev\\r\\n    ) external onlyOwner {\\r\\n        sellTaxes = Taxes(_marketing, _liquidity, _dev);\\r\\n    }\\r\\n\\r\\n    function enableTrading() external onlyOwner {\\r\\n        require(!tradingEnabled, \\\"Trading is already enabled\\\");\\r\\n        tradingEnabled = true;\\r\\n        providingLiquidity = true;\\r\\n        genesis_block = block.number;\\r\\n    }\\r\\n\\r\\n    function updateMarketingWallet(address newWallet) external onlyOwner {\\r\\n        marketingWallet = newWallet;\\r\\n    }\\r\\n\\r\\n    function updateDevWallet(address newWallet) external onlyOwner {\\r\\n        devWallet = newWallet;\\r\\n    }\\r\\n\\r\\n    function updateIsEarlyBuyer(\\r\\n        address account,\\r\\n        bool state\\r\\n    ) external onlyOwner {\\r\\n        isearlybuyer[account] = state;\\r\\n    }\\r\\n\\r\\n    function updateExemptFee(address _address, bool state) external onlyOwner {\\r\\n        exemptFee[_address] = state;\\r\\n    }\\r\\n\\r\\n    function updateMaxWalletLimit(uint256 maxWallet) external onlyOwner {\\r\\n        maxWalletLimit = maxWallet * 10 ** decimals();\\r\\n    }\\r\\n\\r\\n    function rescueETH(uint256 weiAmount) external {\\r\\n        payable(devWallet).transfer(weiAmount);\\r\\n    }\\r\\n\\r\\n    function rescueERC20(address tokenAdd, uint256 amount) external {\\r\\n        IERC20(tokenAdd).transfer(devWallet, amount);\\r\\n    }\\r\\n\\r\\n    // fallbacks\\r\\n    receive() external payable {}\\r\\n}\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
    "etherscan_verified": true
}