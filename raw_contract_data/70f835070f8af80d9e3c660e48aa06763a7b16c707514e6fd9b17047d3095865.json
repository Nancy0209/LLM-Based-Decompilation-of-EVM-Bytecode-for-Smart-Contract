{
    "address": "0xa5060B53791533b0dE5C831e925668A09eBCCd77",
    "tx_hash": "70f835070f8af80d9e3c660e48aa06763a7b16c707514e6fd9b17047d3095865",
    "block_number": 18005235,
    "timestamp": 1693130015,
    "gas_used_in_creation": 5525032,
    "creation_bytecode": "60c0604052600c805462ffffff191662010001179055600e805460ff191660011790553480156200002f57600080fd5b50604080518082018252600b81526a42616279204d696c61647960a81b602080830191825283518085019094526002845261424d60f01b9084015281519192916200007d91600391620006c5565b50805162000093906004906020840190620006c5565b505050620000b0620000aa6200041260201b60201c565b62000416565b737a250d5630b4cf539739df2c5dacb4c659f2488d620000d281600162000468565b6001600160a01b03811660808190526040805163c45a015560e01b8152905163c45a0155916004808201926020929091908290030181865afa1580156200011d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014391906200076b565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000191573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b791906200076b565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af115801562000205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200022b91906200076b565b6001600160a01b031660a08190526200024690600162000468565b60a05162000256906001620004e2565b6a108b2a2c280290940000006009819055600b55600060028180808381806b033b2e3c9fd0803ce80000006127106200029182600a620007b3565b6200029d9190620007d5565b600a5560108990556011889055601287905560138690558587620002c28a8c620007f8565b620002ce9190620007f8565b620002da9190620007f8565b600f5560158590556016849055601783905560188290558183620002ff8688620007f8565b6200030b9190620007f8565b620003179190620007f8565b601455600680546001600160a01b0319908116734959f31cb2f640a013ba464a9e44c5858bf5be981790915560078054821673786e4107773d0ddc67cd0bfae4e9cffa80df5d6e1790556008805490911673c2b5366b8fde1210a56ff3291645df188be46dd91790556200039f620003976005546001600160a01b031690565b600162000536565b620003ac30600162000536565b620003bb61dead600162000536565b620003da620003d26005546001600160a01b031690565b600162000468565b620003e730600162000468565b620003f661dead600162000468565b620004023382620005e0565b5050505050505050505062000850565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6005546001600160a01b03163314620004b75760405162461bcd60e51b815260206004820181905260248201526000805160206200332083398151915260448201526064015b60405180910390fd5b6001600160a01b03919091166000908152601e60205260409020805460ff1916911515919091179055565b6001600160a01b0382166000818152601f6020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6005546001600160a01b03163314620005815760405162461bcd60e51b81526020600482018190526024820152600080516020620033208339815191526044820152606401620004ae565b6001600160a01b0382166000818152601d6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6001600160a01b038216620006385760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620004ae565b80600260008282546200064c9190620007f8565b90915550506001600160a01b038216600090815260208190526040812080548392906200067b908490620007f8565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620006d39062000813565b90600052602060002090601f016020900481019282620006f7576000855562000742565b82601f106200071257805160ff191683800117855562000742565b8280016001018555821562000742579182015b828111156200074257825182559160200191906001019062000725565b506200075092915062000754565b5090565b5b8082111562000750576000815560010162000755565b6000602082840312156200077e57600080fd5b81516001600160a01b03811681146200079657600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615620007d057620007d06200079d565b500290565b600082620007f357634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156200080e576200080e6200079d565b500190565b600181811c908216806200082857607f821691505b602082108114156200084a57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051612a72620008ae6000396000818161057901528181610f0501526117a001526000818161041801528181611762015281816123c50152818161247e015281816124ba01528181612534015261259c0152612a726000f3fe60806040526004361061036f5760003560e01c806392136913116101c6578063c18bc195116100f7578063e7ad9fcd11610095578063f11a24d31161006f578063f11a24d3146109ec578063f2fde38b14610a02578063f637434214610a22578063f8b45b0514610a3857600080fd5b8063e7ad9fcd146109a1578063e884f260146109c1578063ef8700e5146109d657600080fd5b8063d257b34f116100d1578063d257b34f1461090f578063d85ba0631461092f578063dd62ed3e14610945578063e2f456051461098b57600080fd5b8063c18bc195146108bf578063c876d0b9146108df578063c8c8ebe4146108f957600080fd5b8063a457c2d711610164578063b62496f51161013e578063b62496f514610830578063bbc0c74214610860578063c02466681461087f578063c04a54141461089f57600080fd5b8063a457c2d7146107da578063a9059cbb146107fa578063b20414111461081a57600080fd5b80639a7a23d6116101a05780639a7a23d6146107785780639c3b4fdc146107985780639fccce32146107ae578063a0d82dc5146107c457600080fd5b8063921369131461072d578063924de9b71461074357806395d89b411461076357600080fd5b806349bd5a5e116102a0578063751039fc1161023e5780637bce5a04116102185780637bce5a04146106c45780638a8c523c146106da5780638da5cb5b146106ef5780638ea5220f1461070d57600080fd5b8063751039fc1461066f5780637571336a1461068457806375f0a874146106a457600080fd5b80636a486a8e1161027a5780636a486a8e146105ee5780636ddd17131461060457806370a0823114610624578063715018a61461065a57600080fd5b806349bd5a5e146105675780634a62bb651461059b5780634fbee193146105b557600080fd5b80631f3fed8f1161030d57806327c8f835116102e757806327c8f835146104f55780632e6ed7ef1461050b578063313ce5671461052b578063395093511461054757600080fd5b80631f3fed8f1461049d578063203e727e146104b357806323b872dd146104d557600080fd5b80631694505e116103495780631694505e1461040657806318160ddd1461045257806318a94cf1146104715780631a8145bb1461048757600080fd5b806306fdde031461037b578063095ea7b3146103a657806310d5de53146103d657600080fd5b3661037657005b600080fd5b34801561038757600080fd5b50610390610a4e565b60405161039d9190612614565b60405180910390f35b3480156103b257600080fd5b506103c66103c136600461267e565b610ae0565b604051901515815260200161039d565b3480156103e257600080fd5b506103c66103f13660046126aa565b601e6020526000908152604090205460ff1681565b34801561041257600080fd5b5061043a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161039d565b34801561045e57600080fd5b506002545b60405190815260200161039d565b34801561047d57600080fd5b5061046360155481565b34801561049357600080fd5b50610463601b5481565b3480156104a957600080fd5b50610463601a5481565b3480156104bf57600080fd5b506104d36104ce3660046126c7565b610af6565b005b3480156104e157600080fd5b506103c66104f03660046126e0565b610bdc565b34801561050157600080fd5b5061043a61dead81565b34801561051757600080fd5b506104d3610526366004612721565b610c86565b34801561053757600080fd5b506040516012815260200161039d565b34801561055357600080fd5b506103c661056236600461267e565b610d43565b34801561057357600080fd5b5061043a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105a757600080fd5b50600c546103c69060ff1681565b3480156105c157600080fd5b506103c66105d03660046126aa565b6001600160a01b03166000908152601d602052604090205460ff1690565b3480156105fa57600080fd5b5061046360145481565b34801561061057600080fd5b50600c546103c69062010000900460ff1681565b34801561063057600080fd5b5061046361063f3660046126aa565b6001600160a01b031660009081526020819052604090205490565b34801561066657600080fd5b506104d3610d7f565b34801561067b57600080fd5b506103c6610db5565b34801561069057600080fd5b506104d361069f366004612763565b610df2565b3480156106b057600080fd5b5060075461043a906001600160a01b031681565b3480156106d057600080fd5b5061046360115481565b3480156106e657600080fd5b506104d3610e47565b3480156106fb57600080fd5b506005546001600160a01b031661043a565b34801561071957600080fd5b5060085461043a906001600160a01b031681565b34801561073957600080fd5b5061046360165481565b34801561074f57600080fd5b506104d361075e366004612798565b610e84565b34801561076f57600080fd5b50610390610eca565b34801561078457600080fd5b506104d3610793366004612763565b610ed9565b3480156107a457600080fd5b5061046360135481565b3480156107ba57600080fd5b50610463601c5481565b3480156107d057600080fd5b5061046360185481565b3480156107e657600080fd5b506103c66107f536600461267e565b610fb9565b34801561080657600080fd5b506103c661081536600461267e565b611052565b34801561082657600080fd5b5061046360105481565b34801561083c57600080fd5b506103c661084b3660046126aa565b601f6020526000908152604090205460ff1681565b34801561086c57600080fd5b50600c546103c690610100900460ff1681565b34801561088b57600080fd5b506104d361089a366004612763565b61105f565b3480156108ab57600080fd5b5060065461043a906001600160a01b031681565b3480156108cb57600080fd5b506104d36108da3660046126c7565b6110e8565b3480156108eb57600080fd5b50600e546103c69060ff1681565b34801561090557600080fd5b5061046360095481565b34801561091b57600080fd5b506103c661092a3660046126c7565b6111b9565b34801561093b57600080fd5b50610463600f5481565b34801561095157600080fd5b506104636109603660046127b3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561099757600080fd5b50610463600a5481565b3480156109ad57600080fd5b506104d36109bc366004612721565b611310565b3480156109cd57600080fd5b506103c66113ce565b3480156109e257600080fd5b5061046360195481565b3480156109f857600080fd5b5061046360125481565b348015610a0e57600080fd5b506104d3610a1d3660046126aa565b61140b565b348015610a2e57600080fd5b5061046360175481565b348015610a4457600080fd5b50610463600b5481565b606060038054610a5d906127ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610a89906127ec565b8015610ad65780601f10610aab57610100808354040283529160200191610ad6565b820191906000526020600020905b815481529060010190602001808311610ab957829003601f168201915b5050505050905090565b6000610aed3384846114a6565b50600192915050565b6005546001600160a01b03163314610b295760405162461bcd60e51b8152600401610b2090612827565b60405180910390fd5b670de0b6b3a76400006103e8610b3e60025490565b610b49906005612872565b610b539190612891565b610b5d9190612891565b811015610bc45760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526e6c6f776572207468616e20302e352560881b6064820152608401610b20565b610bd681670de0b6b3a7640000612872565b60095550565b6000610be98484846115ca565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610c6e5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610b20565b610c7b85338584036114a6565b506001949350505050565b6005546001600160a01b03163314610cb05760405162461bcd60e51b8152600401610b2090612827565b600a82610cbd85876128b3565b610cc791906128b3565b1115610d065760405162461bcd60e51b815260206004820152600e60248201526d4d6178204275794665652031302560901b6044820152606401610b20565b60108490556011839055601282905560138190558082610d2685876128b3565b610d3091906128b3565b610d3a91906128b3565b600f5550505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610aed918590610d7a9086906128b3565b6114a6565b6005546001600160a01b03163314610da95760405162461bcd60e51b8152600401610b2090612827565b610db36000611e7e565b565b6005546000906001600160a01b03163314610de25760405162461bcd60e51b8152600401610b2090612827565b50600c805460ff19169055600190565b6005546001600160a01b03163314610e1c5760405162461bcd60e51b8152600401610b2090612827565b6001600160a01b03919091166000908152601e60205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610e715760405162461bcd60e51b8152600401610b2090612827565b600c805462ffff00191662010100179055565b6005546001600160a01b03163314610eae5760405162461bcd60e51b8152600401610b2090612827565b600c8054911515620100000262ff000019909216919091179055565b606060048054610a5d906127ec565b6005546001600160a01b03163314610f035760405162461bcd60e51b8152600401610b2090612827565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610fab5760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610b20565b610fb58282611ed0565b5050565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561103b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610b20565b61104833858584036114a6565b5060019392505050565b6000610aed3384846115ca565b6005546001600160a01b031633146110895760405162461bcd60e51b8152600401610b2090612827565b6001600160a01b0382166000818152601d6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b031633146111125760405162461bcd60e51b8152600401610b2090612827565b670de0b6b3a76400006103e861112760025490565b611132906005612872565b61113c9190612891565b6111469190612891565b8110156111a15760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b6064820152608401610b20565b6111b381670de0b6b3a7640000612872565b600b5550565b6005546000906001600160a01b031633146111e65760405162461bcd60e51b8152600401610b2090612827565b620186a06111f360025490565b6111fe906001612872565b6112089190612891565b8210156112755760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610b20565b6103e861128160025490565b61128c906005612872565b6112969190612891565b8211156113025760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610b20565b50600a81905560015b919050565b6005546001600160a01b0316331461133a5760405162461bcd60e51b8152600401610b2090612827565b600a8261134785876128b3565b61135191906128b3565b11156113915760405162461bcd60e51b815260206004820152600f60248201526e4d61782053656c6c4665652031302560881b6044820152606401610b20565b601584905560168390556017829055601881905580826113b185876128b3565b6113bb91906128b3565b6113c591906128b3565b60145550505050565b6005546000906001600160a01b031633146113fb5760405162461bcd60e51b8152600401610b2090612827565b50600e805460ff19169055600190565b6005546001600160a01b031633146114355760405162461bcd60e51b8152600401610b2090612827565b6001600160a01b03811661149a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b20565b6114a381611e7e565b50565b6001600160a01b0383166115085760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610b20565b6001600160a01b0382166115695760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610b20565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166115f05760405162461bcd60e51b8152600401610b20906128cb565b6001600160a01b0382166116165760405162461bcd60e51b8152600401610b2090612910565b8061162c5761162783836000611f24565b505050565b600c5460ff1615611ae9576005546001600160a01b0384811691161480159061166357506005546001600160a01b03838116911614155b801561167757506001600160a01b03821615155b801561168e57506001600160a01b03821661dead14155b80156116a45750600554600160a01b900460ff16155b15611ae957600c54610100900460ff1661173c576001600160a01b0383166000908152601d602052604090205460ff16806116f757506001600160a01b0382166000908152601d602052604090205460ff165b61173c5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610b20565b600e5460ff1615611883576005546001600160a01b0383811691161480159061179757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b80156117d557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b1561188357326000908152600d602052604090205443116118705760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610b20565b326000908152600d602052604090204390555b6001600160a01b0383166000908152601f602052604090205460ff1680156118c457506001600160a01b0382166000908152601e602052604090205460ff16155b156119a8576009548111156119395760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610b20565b600b546001600160a01b03831660009081526020819052604090205461195f90836128b3565b11156119a35760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610b20565b611ae9565b6001600160a01b0382166000908152601f602052604090205460ff1680156119e957506001600160a01b0383166000908152601e602052604090205460ff16155b15611a5f576009548111156119a35760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610b20565b6001600160a01b0382166000908152601e602052604090205460ff16611ae957600b546001600160a01b038316600090815260208190526040902054611aa590836128b3565b1115611ae95760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610b20565b30600090815260208190526040902054600a5481108015908190611b155750600c5462010000900460ff165b8015611b2b5750600554600160a01b900460ff16155b8015611b5057506001600160a01b0385166000908152601f602052604090205460ff16155b8015611b7557506001600160a01b0385166000908152601d602052604090205460ff16155b8015611b9a57506001600160a01b0384166000908152601d602052604090205460ff16155b15611bc8576005805460ff60a01b1916600160a01b179055611bba612079565b6005805460ff60a01b191690555b6005546001600160a01b0386166000908152601d602052604090205460ff600160a01b909204821615911680611c1657506001600160a01b0385166000908152601d602052604090205460ff165b15611c1f575060005b60008115611e6a576001600160a01b0386166000908152601f602052604090205460ff168015611c5157506000601454115b15611d3f57611c766064611c706014548861234390919063ffffffff16565b90612356565b905060145460155482611c899190612872565b611c939190612891565b60196000828254611ca491906128b3565b9091555050601454601754611cb99083612872565b611cc39190612891565b601b6000828254611cd491906128b3565b9091555050601454601854611ce99083612872565b611cf39190612891565b601c6000828254611d0491906128b3565b9091555050601454601654611d199083612872565b611d239190612891565b601a6000828254611d3491906128b3565b90915550611e4c9050565b6001600160a01b0387166000908152601f602052604090205460ff168015611d6957506000600f54115b15611e4c57611d886064611c70600f548861234390919063ffffffff16565b9050600f5460105482611d9b9190612872565b611da59190612891565b60196000828254611db691906128b3565b9091555050600f54601254611dcb9083612872565b611dd59190612891565b601b6000828254611de691906128b3565b9091555050600f54601354611dfb9083612872565b611e059190612891565b601c6000828254611e1691906128b3565b9091555050600f54601154611e2b9083612872565b611e359190612891565b601a6000828254611e4691906128b3565b90915550505b8015611e5d57611e5d873083611f24565b611e678186612953565b94505b611e75878787611f24565b50505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166000818152601f6020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b038316611f4a5760405162461bcd60e51b8152600401610b20906128cb565b6001600160a01b038216611f705760405162461bcd60e51b8152600401610b2090612910565b6001600160a01b03831660009081526020819052604090205481811015611fe85760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610b20565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061201f9084906128b3565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161206b91815260200190565b60405180910390a350505050565b3060009081526020819052604081205490506000601c54601a54601b546019546120a391906128b3565b6120ad91906128b3565b6120b791906128b3565b905060008215806120c6575081155b156120d057505050565b600a546120de906014612872565b8311156120f657600a546120f3906014612872565b92505b6000600283601b54866121099190612872565b6121139190612891565b61211d9190612891565b9050600061212b8583612362565b9050476121378261236e565b60006121434783612362565b9050600061216087611c706019548561234390919063ffffffff16565b9050600061217d88611c70601a548661234390919063ffffffff16565b9050600061219a89611c70601c548761234390919063ffffffff16565b9050600081836121aa8688612953565b6121b49190612953565b6121be9190612953565b6000601b8190556019819055601a819055601c8190556008546040519293506001600160a01b031691849181818185875af1925050503d8060008114612220576040519150601f19603f3d011682016040523d82523d6000602084013e612225565b606091505b5050600754604051919a506001600160a01b0316908490600081818185875af1925050503d8060008114612275576040519150601f19603f3d011682016040523d82523d6000602084013e61227a565b606091505b5090995050871580159061228e5750600081115b156122e15761229d888261252e565b601b54604080518981526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d806000811461232e576040519150601f19603f3d011682016040523d82523d6000602084013e612333565b606091505b5050505050505050505050505050565b600061234f8284612872565b9392505050565b600061234f8284612891565b600061234f8284612953565b60408051600280825260608201835260009260208301908036833701905050905030816000815181106123a3576123a361296a565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124459190612980565b816001815181106124585761245861296a565b60200260200101906001600160a01b031690816001600160a01b0316815250506124a3307f0000000000000000000000000000000000000000000000000000000000000000846114a6565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063791ac947906124f890859060009086903090429060040161299d565b600060405180830381600087803b15801561251257600080fd5b505af1158015612526573d6000803e3d6000fd5b505050505050565b612559307f0000000000000000000000000000000000000000000000000000000000000000846114a6565b60085460405163f305d71960e01b81523060048201526024810184905260006044820181905260648201526001600160a01b0391821660848201524260a48201527f00000000000000000000000000000000000000000000000000000000000000009091169063f305d71990839060c40160606040518083038185885af11580156125e8573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061260d9190612a0e565b5050505050565b600060208083528351808285015260005b8181101561264157858101830151858201604001528201612625565b81811115612653576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146114a357600080fd5b6000806040838503121561269157600080fd5b823561269c81612669565b946020939093013593505050565b6000602082840312156126bc57600080fd5b813561234f81612669565b6000602082840312156126d957600080fd5b5035919050565b6000806000606084860312156126f557600080fd5b833561270081612669565b9250602084013561271081612669565b929592945050506040919091013590565b6000806000806080858703121561273757600080fd5b5050823594602084013594506040840135936060013592509050565b8035801515811461130b57600080fd5b6000806040838503121561277657600080fd5b823561278181612669565b915061278f60208401612753565b90509250929050565b6000602082840312156127aa57600080fd5b61234f82612753565b600080604083850312156127c657600080fd5b82356127d181612669565b915060208301356127e181612669565b809150509250929050565b600181811c9082168061280057607f821691505b6020821081141561282157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561288c5761288c61285c565b500290565b6000826128ae57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156128c6576128c661285c565b500190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6000828210156129655761296561285c565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561299257600080fd5b815161234f81612669565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156129ed5784516001600160a01b0316835293830193918301916001016129c8565b50506001600160a01b03969096166060850152505050608001529392505050565b600080600060608486031215612a2357600080fd5b835192506020840151915060408401519050925092509256fea2646970667358221220e7d06712945c7eaf6cd50c4f4bef9196a42aa4def741800d61daffcffd956be164736f6c634300080a00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
    "runtime_bytecode": "60806040526004361061036f5760003560e01c806392136913116101c6578063c18bc195116100f7578063e7ad9fcd11610095578063f11a24d31161006f578063f11a24d3146109ec578063f2fde38b14610a02578063f637434214610a22578063f8b45b0514610a3857600080fd5b8063e7ad9fcd146109a1578063e884f260146109c1578063ef8700e5146109d657600080fd5b8063d257b34f116100d1578063d257b34f1461090f578063d85ba0631461092f578063dd62ed3e14610945578063e2f456051461098b57600080fd5b8063c18bc195146108bf578063c876d0b9146108df578063c8c8ebe4146108f957600080fd5b8063a457c2d711610164578063b62496f51161013e578063b62496f514610830578063bbc0c74214610860578063c02466681461087f578063c04a54141461089f57600080fd5b8063a457c2d7146107da578063a9059cbb146107fa578063b20414111461081a57600080fd5b80639a7a23d6116101a05780639a7a23d6146107785780639c3b4fdc146107985780639fccce32146107ae578063a0d82dc5146107c457600080fd5b8063921369131461072d578063924de9b71461074357806395d89b411461076357600080fd5b806349bd5a5e116102a0578063751039fc1161023e5780637bce5a04116102185780637bce5a04146106c45780638a8c523c146106da5780638da5cb5b146106ef5780638ea5220f1461070d57600080fd5b8063751039fc1461066f5780637571336a1461068457806375f0a874146106a457600080fd5b80636a486a8e1161027a5780636a486a8e146105ee5780636ddd17131461060457806370a0823114610624578063715018a61461065a57600080fd5b806349bd5a5e146105675780634a62bb651461059b5780634fbee193146105b557600080fd5b80631f3fed8f1161030d57806327c8f835116102e757806327c8f835146104f55780632e6ed7ef1461050b578063313ce5671461052b578063395093511461054757600080fd5b80631f3fed8f1461049d578063203e727e146104b357806323b872dd146104d557600080fd5b80631694505e116103495780631694505e1461040657806318160ddd1461045257806318a94cf1146104715780631a8145bb1461048757600080fd5b806306fdde031461037b578063095ea7b3146103a657806310d5de53146103d657600080fd5b3661037657005b600080fd5b34801561038757600080fd5b50610390610a4e565b60405161039d9190612614565b60405180910390f35b3480156103b257600080fd5b506103c66103c136600461267e565b610ae0565b604051901515815260200161039d565b3480156103e257600080fd5b506103c66103f13660046126aa565b601e6020526000908152604090205460ff1681565b34801561041257600080fd5b5061043a7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b03909116815260200161039d565b34801561045e57600080fd5b506002545b60405190815260200161039d565b34801561047d57600080fd5b5061046360155481565b34801561049357600080fd5b50610463601b5481565b3480156104a957600080fd5b50610463601a5481565b3480156104bf57600080fd5b506104d36104ce3660046126c7565b610af6565b005b3480156104e157600080fd5b506103c66104f03660046126e0565b610bdc565b34801561050157600080fd5b5061043a61dead81565b34801561051757600080fd5b506104d3610526366004612721565b610c86565b34801561053757600080fd5b506040516012815260200161039d565b34801561055357600080fd5b506103c661056236600461267e565b610d43565b34801561057357600080fd5b5061043a7f00000000000000000000000007fc2642fba9adf013260b6a8bbc00544a269f7881565b3480156105a757600080fd5b50600c546103c69060ff1681565b3480156105c157600080fd5b506103c66105d03660046126aa565b6001600160a01b03166000908152601d602052604090205460ff1690565b3480156105fa57600080fd5b5061046360145481565b34801561061057600080fd5b50600c546103c69062010000900460ff1681565b34801561063057600080fd5b5061046361063f3660046126aa565b6001600160a01b031660009081526020819052604090205490565b34801561066657600080fd5b506104d3610d7f565b34801561067b57600080fd5b506103c6610db5565b34801561069057600080fd5b506104d361069f366004612763565b610df2565b3480156106b057600080fd5b5060075461043a906001600160a01b031681565b3480156106d057600080fd5b5061046360115481565b3480156106e657600080fd5b506104d3610e47565b3480156106fb57600080fd5b506005546001600160a01b031661043a565b34801561071957600080fd5b5060085461043a906001600160a01b031681565b34801561073957600080fd5b5061046360165481565b34801561074f57600080fd5b506104d361075e366004612798565b610e84565b34801561076f57600080fd5b50610390610eca565b34801561078457600080fd5b506104d3610793366004612763565b610ed9565b3480156107a457600080fd5b5061046360135481565b3480156107ba57600080fd5b50610463601c5481565b3480156107d057600080fd5b5061046360185481565b3480156107e657600080fd5b506103c66107f536600461267e565b610fb9565b34801561080657600080fd5b506103c661081536600461267e565b611052565b34801561082657600080fd5b5061046360105481565b34801561083c57600080fd5b506103c661084b3660046126aa565b601f6020526000908152604090205460ff1681565b34801561086c57600080fd5b50600c546103c690610100900460ff1681565b34801561088b57600080fd5b506104d361089a366004612763565b61105f565b3480156108ab57600080fd5b5060065461043a906001600160a01b031681565b3480156108cb57600080fd5b506104d36108da3660046126c7565b6110e8565b3480156108eb57600080fd5b50600e546103c69060ff1681565b34801561090557600080fd5b5061046360095481565b34801561091b57600080fd5b506103c661092a3660046126c7565b6111b9565b34801561093b57600080fd5b50610463600f5481565b34801561095157600080fd5b506104636109603660046127b3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561099757600080fd5b50610463600a5481565b3480156109ad57600080fd5b506104d36109bc366004612721565b611310565b3480156109cd57600080fd5b506103c66113ce565b3480156109e257600080fd5b5061046360195481565b3480156109f857600080fd5b5061046360125481565b348015610a0e57600080fd5b506104d3610a1d3660046126aa565b61140b565b348015610a2e57600080fd5b5061046360175481565b348015610a4457600080fd5b50610463600b5481565b606060038054610a5d906127ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610a89906127ec565b8015610ad65780601f10610aab57610100808354040283529160200191610ad6565b820191906000526020600020905b815481529060010190602001808311610ab957829003601f168201915b5050505050905090565b6000610aed3384846114a6565b50600192915050565b6005546001600160a01b03163314610b295760405162461bcd60e51b8152600401610b2090612827565b60405180910390fd5b670de0b6b3a76400006103e8610b3e60025490565b610b49906005612872565b610b539190612891565b610b5d9190612891565b811015610bc45760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526e6c6f776572207468616e20302e352560881b6064820152608401610b20565b610bd681670de0b6b3a7640000612872565b60095550565b6000610be98484846115ca565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610c6e5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610b20565b610c7b85338584036114a6565b506001949350505050565b6005546001600160a01b03163314610cb05760405162461bcd60e51b8152600401610b2090612827565b600a82610cbd85876128b3565b610cc791906128b3565b1115610d065760405162461bcd60e51b815260206004820152600e60248201526d4d6178204275794665652031302560901b6044820152606401610b20565b60108490556011839055601282905560138190558082610d2685876128b3565b610d3091906128b3565b610d3a91906128b3565b600f5550505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610aed918590610d7a9086906128b3565b6114a6565b6005546001600160a01b03163314610da95760405162461bcd60e51b8152600401610b2090612827565b610db36000611e7e565b565b6005546000906001600160a01b03163314610de25760405162461bcd60e51b8152600401610b2090612827565b50600c805460ff19169055600190565b6005546001600160a01b03163314610e1c5760405162461bcd60e51b8152600401610b2090612827565b6001600160a01b03919091166000908152601e60205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610e715760405162461bcd60e51b8152600401610b2090612827565b600c805462ffff00191662010100179055565b6005546001600160a01b03163314610eae5760405162461bcd60e51b8152600401610b2090612827565b600c8054911515620100000262ff000019909216919091179055565b606060048054610a5d906127ec565b6005546001600160a01b03163314610f035760405162461bcd60e51b8152600401610b2090612827565b7f00000000000000000000000007fc2642fba9adf013260b6a8bbc00544a269f786001600160a01b0316826001600160a01b03161415610fab5760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610b20565b610fb58282611ed0565b5050565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561103b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610b20565b61104833858584036114a6565b5060019392505050565b6000610aed3384846115ca565b6005546001600160a01b031633146110895760405162461bcd60e51b8152600401610b2090612827565b6001600160a01b0382166000818152601d6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b031633146111125760405162461bcd60e51b8152600401610b2090612827565b670de0b6b3a76400006103e861112760025490565b611132906005612872565b61113c9190612891565b6111469190612891565b8110156111a15760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b6064820152608401610b20565b6111b381670de0b6b3a7640000612872565b600b5550565b6005546000906001600160a01b031633146111e65760405162461bcd60e51b8152600401610b2090612827565b620186a06111f360025490565b6111fe906001612872565b6112089190612891565b8210156112755760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610b20565b6103e861128160025490565b61128c906005612872565b6112969190612891565b8211156113025760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610b20565b50600a81905560015b919050565b6005546001600160a01b0316331461133a5760405162461bcd60e51b8152600401610b2090612827565b600a8261134785876128b3565b61135191906128b3565b11156113915760405162461bcd60e51b815260206004820152600f60248201526e4d61782053656c6c4665652031302560881b6044820152606401610b20565b601584905560168390556017829055601881905580826113b185876128b3565b6113bb91906128b3565b6113c591906128b3565b60145550505050565b6005546000906001600160a01b031633146113fb5760405162461bcd60e51b8152600401610b2090612827565b50600e805460ff19169055600190565b6005546001600160a01b031633146114355760405162461bcd60e51b8152600401610b2090612827565b6001600160a01b03811661149a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b20565b6114a381611e7e565b50565b6001600160a01b0383166115085760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610b20565b6001600160a01b0382166115695760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610b20565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166115f05760405162461bcd60e51b8152600401610b20906128cb565b6001600160a01b0382166116165760405162461bcd60e51b8152600401610b2090612910565b8061162c5761162783836000611f24565b505050565b600c5460ff1615611ae9576005546001600160a01b0384811691161480159061166357506005546001600160a01b03838116911614155b801561167757506001600160a01b03821615155b801561168e57506001600160a01b03821661dead14155b80156116a45750600554600160a01b900460ff16155b15611ae957600c54610100900460ff1661173c576001600160a01b0383166000908152601d602052604090205460ff16806116f757506001600160a01b0382166000908152601d602052604090205460ff165b61173c5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610b20565b600e5460ff1615611883576005546001600160a01b0383811691161480159061179757507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b0316826001600160a01b031614155b80156117d557507f00000000000000000000000007fc2642fba9adf013260b6a8bbc00544a269f786001600160a01b0316826001600160a01b031614155b1561188357326000908152600d602052604090205443116118705760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610b20565b326000908152600d602052604090204390555b6001600160a01b0383166000908152601f602052604090205460ff1680156118c457506001600160a01b0382166000908152601e602052604090205460ff16155b156119a8576009548111156119395760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610b20565b600b546001600160a01b03831660009081526020819052604090205461195f90836128b3565b11156119a35760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610b20565b611ae9565b6001600160a01b0382166000908152601f602052604090205460ff1680156119e957506001600160a01b0383166000908152601e602052604090205460ff16155b15611a5f576009548111156119a35760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610b20565b6001600160a01b0382166000908152601e602052604090205460ff16611ae957600b546001600160a01b038316600090815260208190526040902054611aa590836128b3565b1115611ae95760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610b20565b30600090815260208190526040902054600a5481108015908190611b155750600c5462010000900460ff165b8015611b2b5750600554600160a01b900460ff16155b8015611b5057506001600160a01b0385166000908152601f602052604090205460ff16155b8015611b7557506001600160a01b0385166000908152601d602052604090205460ff16155b8015611b9a57506001600160a01b0384166000908152601d602052604090205460ff16155b15611bc8576005805460ff60a01b1916600160a01b179055611bba612079565b6005805460ff60a01b191690555b6005546001600160a01b0386166000908152601d602052604090205460ff600160a01b909204821615911680611c1657506001600160a01b0385166000908152601d602052604090205460ff165b15611c1f575060005b60008115611e6a576001600160a01b0386166000908152601f602052604090205460ff168015611c5157506000601454115b15611d3f57611c766064611c706014548861234390919063ffffffff16565b90612356565b905060145460155482611c899190612872565b611c939190612891565b60196000828254611ca491906128b3565b9091555050601454601754611cb99083612872565b611cc39190612891565b601b6000828254611cd491906128b3565b9091555050601454601854611ce99083612872565b611cf39190612891565b601c6000828254611d0491906128b3565b9091555050601454601654611d199083612872565b611d239190612891565b601a6000828254611d3491906128b3565b90915550611e4c9050565b6001600160a01b0387166000908152601f602052604090205460ff168015611d6957506000600f54115b15611e4c57611d886064611c70600f548861234390919063ffffffff16565b9050600f5460105482611d9b9190612872565b611da59190612891565b60196000828254611db691906128b3565b9091555050600f54601254611dcb9083612872565b611dd59190612891565b601b6000828254611de691906128b3565b9091555050600f54601354611dfb9083612872565b611e059190612891565b601c6000828254611e1691906128b3565b9091555050600f54601154611e2b9083612872565b611e359190612891565b601a6000828254611e4691906128b3565b90915550505b8015611e5d57611e5d873083611f24565b611e678186612953565b94505b611e75878787611f24565b50505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166000818152601f6020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b038316611f4a5760405162461bcd60e51b8152600401610b20906128cb565b6001600160a01b038216611f705760405162461bcd60e51b8152600401610b2090612910565b6001600160a01b03831660009081526020819052604090205481811015611fe85760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610b20565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061201f9084906128b3565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161206b91815260200190565b60405180910390a350505050565b3060009081526020819052604081205490506000601c54601a54601b546019546120a391906128b3565b6120ad91906128b3565b6120b791906128b3565b905060008215806120c6575081155b156120d057505050565b600a546120de906014612872565b8311156120f657600a546120f3906014612872565b92505b6000600283601b54866121099190612872565b6121139190612891565b61211d9190612891565b9050600061212b8583612362565b9050476121378261236e565b60006121434783612362565b9050600061216087611c706019548561234390919063ffffffff16565b9050600061217d88611c70601a548661234390919063ffffffff16565b9050600061219a89611c70601c548761234390919063ffffffff16565b9050600081836121aa8688612953565b6121b49190612953565b6121be9190612953565b6000601b8190556019819055601a819055601c8190556008546040519293506001600160a01b031691849181818185875af1925050503d8060008114612220576040519150601f19603f3d011682016040523d82523d6000602084013e612225565b606091505b5050600754604051919a506001600160a01b0316908490600081818185875af1925050503d8060008114612275576040519150601f19603f3d011682016040523d82523d6000602084013e61227a565b606091505b5090995050871580159061228e5750600081115b156122e15761229d888261252e565b601b54604080518981526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d806000811461232e576040519150601f19603f3d011682016040523d82523d6000602084013e612333565b606091505b5050505050505050505050505050565b600061234f8284612872565b9392505050565b600061234f8284612891565b600061234f8284612953565b60408051600280825260608201835260009260208301908036833701905050905030816000815181106123a3576123a361296a565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124459190612980565b816001815181106124585761245861296a565b60200260200101906001600160a01b031690816001600160a01b0316815250506124a3307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d846114a6565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac947906124f890859060009086903090429060040161299d565b600060405180830381600087803b15801561251257600080fd5b505af1158015612526573d6000803e3d6000fd5b505050505050565b612559307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d846114a6565b60085460405163f305d71960e01b81523060048201526024810184905260006044820181905260648201526001600160a01b0391821660848201524260a48201527f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d9091169063f305d71990839060c40160606040518083038185885af11580156125e8573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061260d9190612a0e565b5050505050565b600060208083528351808285015260005b8181101561264157858101830151858201604001528201612625565b81811115612653576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146114a357600080fd5b6000806040838503121561269157600080fd5b823561269c81612669565b946020939093013593505050565b6000602082840312156126bc57600080fd5b813561234f81612669565b6000602082840312156126d957600080fd5b5035919050565b6000806000606084860312156126f557600080fd5b833561270081612669565b9250602084013561271081612669565b929592945050506040919091013590565b6000806000806080858703121561273757600080fd5b5050823594602084013594506040840135936060013592509050565b8035801515811461130b57600080fd5b6000806040838503121561277657600080fd5b823561278181612669565b915061278f60208401612753565b90509250929050565b6000602082840312156127aa57600080fd5b61234f82612753565b600080604083850312156127c657600080fd5b82356127d181612669565b915060208301356127e181612669565b809150509250929050565b600181811c9082168061280057607f821691505b6020821081141561282157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561288c5761288c61285c565b500290565b6000826128ae57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156128c6576128c661285c565b500190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6000828210156129655761296561285c565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561299257600080fd5b815161234f81612669565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156129ed5784516001600160a01b0316835293830193918301916001016129c8565b50506001600160a01b03969096166060850152505050608001529392505050565b600080600060608486031215612a2357600080fd5b835192506020840151915060408401519050925092509256fea2646970667358221220e7d06712945c7eaf6cd50c4f4bef9196a42aa4def741800d61daffcffd956be164736f6c634300080a0033",
    "contract_name": "BABYMILADY",
    "compiler_version": "v0.8.10+commit.fc410830",
    "optimization_used": "1",
    "runs": "200",
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDevelopment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
    "source_code": "/*\r\nTelegram: https://t.me/Babymilady\r\nTwitter: https://twitter.com/Baby_miladyerc\r\nWebsite: https://www.baby-milady.com/\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.10 >=0.8.10 >=0.8.0 <0.9.0;\r\npragma experimental ABIEncoderV2;\r\n////// lib/openzeppelin-contracts/contracts/utils/Context.sol\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n/* pragma solidity ^0.8.0; */\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/access/Ownable.sol\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\n/* pragma solidity ^0.8.0; */\r\n\r\n/* import \"../utils/Context.sol\"; */\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\r\n\r\n/* pragma solidity ^0.8.0; */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/* pragma solidity ^0.8.0; */\r\n\r\n/* import \"../IERC20.sol\"; */\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\r\n\r\n/* pragma solidity ^0.8.0; */\r\n\r\n/* import \"./IERC20.sol\"; */\r\n/* import \"./extensions/IERC20Metadata.sol\"; */\r\n/* import \"../../utils/Context.sol\"; */\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\r\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\r\n\r\n/* pragma solidity ^0.8.0; */\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/* pragma solidity 0.8.10; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n/* pragma solidity 0.8.10; */\r\n/* pragma experimental ABIEncoderV2; */ \r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n/* pragma solidity 0.8.10; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n/* pragma solidity >=0.8.10; */\r\n\r\n/* import {IUniswapV2Router02} from \"./IUniswapV2Router02.sol\"; */\r\n/* import {IUniswapV2Factory} from \"./IUniswapV2Factory.sol\"; */\r\n/* import {IUniswapV2Pair} from \"./IUniswapV2Pair.sol\"; */\r\n/* import {IERC20} from \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\r\n/* import {ERC20} from \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\"; */\r\n/* import {Ownable} from \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\"; */\r\n/* import {SafeMath} from \"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\"; */\r\n\r\ncontract BABYMILADY is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    address public constant deadAddress = address(0xdead);\r\n\r\n    bool private swapping;\r\n\r\n    address public developmentWallet;\r\n    address public marketingWallet;\r\n    address public devWallet;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWallet;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = true;\r\n\r\n    // Anti-bot and anti-whale mappings and variables\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n    bool public transferDelayEnabled = true;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyDevelopmentFee;\r\n    uint256 public buyMarketingFee;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyDevFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 public sellDevelopmentFee;\r\n    uint256 public sellMarketingFee;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public sellDevFee;\r\n\r\n    uint256 public tokensForDevelopment;\r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForDev;\r\n\r\n    /******************/\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    constructor() ERC20(\"Baby Milady\", \"BM\") {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n\r\n        uint256 _buyDevelopmentFee = 0;\r\n        uint256 _buyMarketingFee = 2;\r\n        uint256 _buyLiquidityFee = 0;\r\n        uint256 _buyDevFee = 0;\r\n\r\n        uint256 _sellDevelopmentFee = 0;\r\n        uint256 _sellMarketingFee = 2;\r\n        uint256 _sellLiquidityFee = 0;\r\n        uint256 _sellDevFee = 0;\r\n\r\n        uint256 totalSupply = 1000000000 * 1e18;\r\n\r\n        maxTransactionAmount = 20000000 * 1e18; // 2% from total supply maxTransactionAmountTxn\r\n        maxWallet = 20000000 * 1e18; // 2% from total supply maxWallet\r\n        swapTokensAtAmount = (totalSupply * 10) / 10000; // 0.1% swap wallet\r\n\r\n        buyDevelopmentFee = _buyDevelopmentFee;\r\n        buyMarketingFee = _buyMarketingFee;\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        buyDevFee = _buyDevFee;\r\n        buyTotalFees = buyDevelopmentFee + buyMarketingFee + buyLiquidityFee + buyDevFee;\r\n\r\n        sellDevelopmentFee = _sellDevelopmentFee;\r\n        sellMarketingFee = _sellMarketingFee;\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellDevFee = _sellDevFee;\r\n        sellTotalFees = sellDevelopmentFee + sellMarketingFee + sellLiquidityFee + sellDevFee;\r\n\r\n        developmentWallet = address(0x4959F31CB2f640a013BA464A9e44C5858bf5be98); // set as development wallet\r\n        marketingWallet = address(0x786E4107773d0ddc67Cd0bfae4E9CFfa80df5d6e); // set as marketing wallet\r\n        devWallet = address(0xc2b5366b8FDe1210A56ff3291645dF188BE46Dd9); // set as dev wallet\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        excludeFromMaxTransaction(owner(), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // once enabled, can never be turned off\r\n    function enableTrading() external onlyOwner {\r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    // remove limits after token is stable\r\n    function removeLimits() external onlyOwner returns (bool) {\r\n        limitsInEffect = false;\r\n        return true;\r\n    }\r\n\r\n    // disable Transfer delay - cannot be reenabled\r\n    function disableTransferDelay() external onlyOwner returns (bool) {\r\n        transferDelayEnabled = false;\r\n        return true;\r\n    }\r\n\r\n    // change the minimum amount of tokens to sell from fees\r\n    function updateSwapTokensAtAmount(uint256 newAmount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            newAmount >= (totalSupply() * 1) / 100000,\r\n            \"Swap amount cannot be lower than 0.001% total supply.\"\r\n        );\r\n        require(\r\n            newAmount <= (totalSupply() * 5) / 1000,\r\n            \"Swap amount cannot be higher than 0.5% total supply.\"\r\n        );\r\n        swapTokensAtAmount = newAmount;\r\n        return true;\r\n    }\r\n\r\n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot set maxTransactionAmount lower than 0.5%\"\r\n        );\r\n        maxTransactionAmount = newNum * (10**18);\r\n    }\r\n\r\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\r\n            \"Cannot set maxWallet lower than 0.5%\"\r\n        );\r\n        maxWallet = newNum * (10**18);\r\n    }\r\n    \r\n    function excludeFromMaxTransaction(address updAds, bool isEx)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    // only use to disable contract sales if absolutely necessary (emergency use only)\r\n    function updateSwapEnabled(bool enabled) external onlyOwner {\r\n        swapEnabled = enabled;\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint256 _developmentFee,\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        require((_developmentFee + _marketingFee + _liquidityFee ) <= 10, \"Max BuyFee 10%\");\r\n        buyDevelopmentFee = _developmentFee;\r\n        buyMarketingFee = _marketingFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyDevFee = _devFee;\r\n        buyTotalFees = buyDevelopmentFee + buyMarketingFee + buyLiquidityFee + buyDevFee;\r\n     }\r\n\r\n    function updateSellFees(\r\n        uint256 _developmentFee,\r\n        uint256 _marketingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        require((_developmentFee + _marketingFee + _liquidityFee ) <= 10, \"Max SellFee 10%\");\r\n        sellDevelopmentFee = _developmentFee;\r\n        sellMarketingFee = _marketingFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellDevFee = _devFee;\r\n        sellTotalFees = sellDevelopmentFee + sellMarketingFee + sellLiquidityFee + sellDevFee;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ) {\r\n                if (!tradingActive) {\r\n                    require(\r\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\r\n                        \"Trading is not active.\"\r\n                    );\r\n                }\r\n\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\r\n                if (transferDelayEnabled) {\r\n                    if (\r\n                        to != owner() &&\r\n                        to != address(uniswapV2Router) &&\r\n                        to != address(uniswapV2Pair)\r\n                    ) {\r\n                        require(\r\n                            _holderLastTransferTimestamp[tx.origin] <\r\n                                block.number,\r\n                            \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                        );\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                    }\r\n                }\r\n\r\n                //when buy\r\n                if (\r\n                    automatedMarketMakerPairs[from] &&\r\n                    !_isExcludedMaxTransactionAmount[to]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Buy transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n                //when sell\r\n                else if (\r\n                    automatedMarketMakerPairs[to] &&\r\n                    !_isExcludedMaxTransactionAmount[from]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTransactionAmount,\r\n                        \"Sell transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if (takeFee) {\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\r\n                fees = amount.mul(sellTotalFees).div(100);\r\n                tokensForDevelopment += (fees * sellDevelopmentFee) / sellTotalFees;\r\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\r\n                tokensForDev += (fees * sellDevFee) / sellTotalFees;\r\n                tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = amount.mul(buyTotalFees).div(100);\r\n                tokensForDevelopment += (fees * buyDevelopmentFee) / buyTotalFees;\r\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\r\n                tokensForDev += (fees * buyDevFee) / buyTotalFees;\r\n                tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            devWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForDevelopment + tokensForLiquidity + tokensForMarketing + tokensForDev;\r\n        bool success;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapTokensAtAmount * 20) {\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) / totalTokensToSwap / 2;\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForDevelopment = ethBalance.mul(tokensForDevelopment).div(totalTokensToSwap);\r\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(totalTokensToSwap);\r\n        uint256 ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap);\r\n\r\n        uint256 ethForLiquidity = ethBalance - ethForDevelopment - ethForMarketing - ethForDev;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForDevelopment = 0;\r\n        tokensForMarketing = 0;\r\n        tokensForDev = 0;\r\n\r\n        (success, ) = address(devWallet).call{value: ethForDev}(\"\");\r\n        (success, ) = address(marketingWallet).call{value: ethForMarketing}(\"\");\r\n\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(\r\n                amountToSwapForETH,\r\n                ethForLiquidity,\r\n                tokensForLiquidity\r\n            );\r\n        }\r\n\r\n        (success, ) = address(developmentWallet).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n}",
    "etherscan_verified": true
}